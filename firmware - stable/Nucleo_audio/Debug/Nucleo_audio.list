
Nucleo_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08010620  08010620  00011620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010b0c  08010b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010b14  08010b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010b18  08010b18  00011b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002ec  20000008  08010b1c  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ef8  200002f4  08010e08  000122f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200021ec  08010e08  000131ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000122f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027f59  00000000  00000000  00012324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050ff  00000000  00000000  0003a27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002640  00000000  00000000  0003f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d67  00000000  00000000  000419c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007688  00000000  00000000  00043727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029aca  00000000  00000000  0004adaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010787e  00000000  00000000  00074879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017c0f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b3f0  00000000  00000000  0017c13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009a  00000000  00000000  0018752c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f4 	.word	0x200002f4
 800015c:	00000000 	.word	0x00000000
 8000160:	08010608 	.word	0x08010608

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f8 	.word	0x200002f8
 800017c:	08010608 	.word	0x08010608

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	static uint16_t sample = 0;
	static uint16_t sample_count = 0;
	static uint16_t counter = 0;

	buffer1[0] = (uint8_t)-128;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	701a      	strb	r2, [r3, #0]
	buffer2[0] = (uint8_t)-128;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	701a      	strb	r2, [r3, #0]

	//update buffer
	sample = ADC_reading;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000efe:	881a      	ldrh	r2, [r3, #0]
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f02:	801a      	strh	r2, [r3, #0]
	memcpy(&workspace_buffer[2*sample_count+1], &sample, sizeof(uint16_t));
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f14:	8812      	ldrh	r2, [r2, #0]
 8000f16:	801a      	strh	r2, [r3, #0]

	counter++;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f22:	801a      	strh	r2, [r3, #0]
	sample_count++;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f2e:	801a      	strh	r2, [r3, #0]

	if (counter == 32000){
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000f38:	d102      	bne.n	8000f40 <HAL_TIM_PeriodElapsedCallback+0x58>
		counter = 0;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
	}

	// Use the local counter to determine when to signal
	if(sample_count == AUDIO_BUFFER_SIZE)
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	2b64      	cmp	r3, #100	@ 0x64
 8000f46:	d10f      	bne.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		//swap buffers so buffer points to the other buffer
		uint8_t *temp = workspace_buffer;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
		workspace_buffer = ready_buffer;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f54:	6013      	str	r3, [r2, #0]
		ready_buffer = temp;
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6013      	str	r3, [r2, #0]
		sample_count = 0;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	801a      	strh	r2, [r3, #0]
		flag = 1;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
	}
  }
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	20000488 	.word	0x20000488
 8000f78:	20000554 	.word	0x20000554
 8000f7c:	20000484 	.word	0x20000484
 8000f80:	2000061e 	.word	0x2000061e
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000620 	.word	0x20000620
 8000f8c:	20000622 	.word	0x20000622
 8000f90:	2000000c 	.word	0x2000000c
 8000f94:	20000486 	.word	0x20000486

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fe83 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f861 	bl	8001068 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fa6:	f000 f8c3 	bl	8001130 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 f9f7 	bl	800139c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 f9e3 	bl	8001378 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fb2:	f000 f8ef 	bl	8001194 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fb6:	f000 f991 	bl	80012dc <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000fba:	f00c f911 	bl	800d1e0 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000fbe:	f000 f94d 	bl	800125c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC reading
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_reading, 2);
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4922      	ldr	r1, [pc, #136]	@ (8001050 <main+0xb8>)
 8000fc6:	4823      	ldr	r0, [pc, #140]	@ (8001054 <main+0xbc>)
 8000fc8:	f001 fa4c 	bl	8002464 <HAL_ADC_Start_DMA>
//  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fd13 	bl	80019f8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fd10 	bl	80019f8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f000 fd0d 	bl	80019f8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fd43 	bl	8001a6c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f000 fd3f 	bl	8001a6c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f000 fd3b 	bl	8001a6c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <main+0xc0>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <main+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <main+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <main+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <main+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001016:	4910      	ldr	r1, [pc, #64]	@ (8001058 <main+0xc0>)
 8001018:	2000      	movs	r0, #0
 800101a:	f000 fd97 	bl	8001b4c <BSP_COM_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <main+0x90>
  {
    Error_Handler();
 8001024:	f000 f9c7 	bl	80013b6 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */

  //start ADC sampler timer
  HAL_TIM_Base_Start_IT(&htim2);
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <main+0xc4>)
 800102a:	f007 f9a1 	bl	8008370 <HAL_TIM_Base_Start_IT>
  uint8_t status;

  while (1)
  {
	  if (flag==1){
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <main+0xc8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d1fb      	bne.n	800102e <main+0x96>
  		  status = CDC_Transmit_FS(ready_buffer, BUFFER_SIZE);
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <main+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	21c9      	movs	r1, #201	@ 0xc9
 800103c:	4618      	mov	r0, r3
 800103e:	f00c f98d 	bl	800d35c <CDC_Transmit_FS>
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
//		  sprintf(msg, " mic: %d, ac: %f %f %f, gy: %f %f %f \r\n", ADC_reading, a_f32[0],a_f32[1],a_f32[2],g_f32[0],g_f32[1],g_f32[2]);
//		  CDC_Transmit_FS((uint8_t*)msg, sizeof(msg));

		  flag = 0;
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <main+0xc8>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 800104c:	e7ef      	b.n	800102e <main+0x96>
 800104e:	bf00      	nop
 8001050:	20000484 	.word	0x20000484
 8001054:	20000320 	.word	0x20000320
 8001058:	20000310 	.word	0x20000310
 800105c:	20000438 	.word	0x20000438
 8001060:	20000486 	.word	0x20000486
 8001064:	2000000c 	.word	0x2000000c

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09a      	sub	sp, #104	@ 0x68
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2248      	movs	r2, #72	@ 0x48
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f00d fbfe 	bl	800e878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108e:	4b27      	ldr	r3, [pc, #156]	@ (800112c <SystemClock_Config+0xc4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001096:	4a25      	ldr	r2, [pc, #148]	@ (800112c <SystemClock_Config+0xc4>)
 8001098:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <SystemClock_Config+0xc4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ba:	2340      	movs	r3, #64	@ 0x40
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	2303      	movs	r3, #3
 80010c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010c6:	2310      	movs	r3, #16
 80010c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 feb3 	bl	8006e50 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f961 	bl	80013b6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80010f4:	236f      	movs	r3, #111	@ 0x6f
 80010f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2303      	movs	r3, #3
 80010fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2103      	movs	r1, #3
 8001114:	4618      	mov	r0, r3
 8001116:	f006 fa0f 	bl	8007538 <HAL_RCC_ClockConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001120:	f000 f949 	bl	80013b6 <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3768      	adds	r7, #104	@ 0x68
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	58000400 	.word	0x58000400

08001130 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	@ 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2250      	movs	r2, #80	@ 0x50
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f00d fb9b 	bl	800e878 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8001142:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8001146:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001148:	2306      	movs	r3, #6
 800114a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800114c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001156:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001158:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800115e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8001162:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001164:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800116a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800116e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001170:	2300      	movs	r3, #0
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001174:	2300      	movs	r3, #0
 8001176:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4618      	mov	r0, r3
 800117c:	f006 fe19 	bl	8007db2 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001186:	f000 f916 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	@ 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011aa:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011ac:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <MX_ADC1_Init+0xc0>)
 80011ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011d8:	2201      	movs	r2, #1
 80011da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011de:	2201      	movs	r2, #1
 80011e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_ADC1_Init+0xbc>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_ADC1_Init+0xbc>)
 8001200:	2200      	movs	r2, #0
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_ADC1_Init+0xbc>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120c:	4810      	ldr	r0, [pc, #64]	@ (8001250 <MX_ADC1_Init+0xbc>)
 800120e:	f000 ffdd 	bl	80021cc <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001218:	f000 f8cd 	bl	80013b6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_ADC1_Init+0xc4>)
 800121e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2306      	movs	r3, #6
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001224:	2306      	movs	r3, #6
 8001226:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001228:	237f      	movs	r3, #127	@ 0x7f
 800122a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800122c:	2304      	movs	r3, #4
 800122e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_ADC1_Init+0xbc>)
 800123a:	f001 fb75 	bl	8002928 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001244:	f000 f8b7 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000320 	.word	0x20000320
 8001254:	50040000 	.word	0x50040000
 8001258:	04300002 	.word	0x04300002

0800125c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <MX_I2C1_Init+0x78>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <MX_I2C1_Init+0x7c>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001274:	2201      	movs	r2, #1
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001296:	480e      	ldr	r0, [pc, #56]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001298:	f002 fde9 	bl	8003e6e <HAL_I2C_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012a2:	f000 f888 	bl	80013b6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4809      	ldr	r0, [pc, #36]	@ (80012d0 <MX_I2C1_Init+0x74>)
 80012aa:	f003 fc94 	bl	8004bd6 <HAL_I2CEx_ConfigAnalogFilter>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b4:	f000 f87f 	bl	80013b6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_I2C1_Init+0x74>)
 80012bc:	f003 fcd6 	bl	8004c6c <HAL_I2CEx_ConfigDigitalFilter>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f876 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200003e4 	.word	0x200003e4
 80012d4:	40005400 	.word	0x40005400
 80012d8:	10b17db5 	.word	0x10b17db5

080012dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <MX_TIM2_Init+0x98>)
 80012fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_TIM2_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_TIM2_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200-1;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_TIM2_Init+0x98>)
 8001310:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001314:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_TIM2_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_TIM2_Init+0x98>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001322:	4814      	ldr	r0, [pc, #80]	@ (8001374 <MX_TIM2_Init+0x98>)
 8001324:	f006 ffcc 	bl	80082c0 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800132e:	f000 f842 	bl	80013b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_TIM2_Init+0x98>)
 8001340:	f007 f96b 	bl	800861a <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800134a:	f000 f834 	bl	80013b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800134e:	2320      	movs	r3, #32
 8001350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <MX_TIM2_Init+0x98>)
 800135c:	f007 fb54 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001366:	f000 f826 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000438 	.word	0x20000438

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800137c:	2004      	movs	r0, #4
 800137e:	f7ff fd81 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff fd7e 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	200b      	movs	r0, #11
 800138e:	f002 f8ac 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001392:	200b      	movs	r0, #11
 8001394:	f002 f8c3 	bl	800351e <HAL_NVIC_EnableIRQ>

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	2004      	movs	r0, #4
 80013a2:	f7ff fd88 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fd85 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fd82 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ba:	b672      	cpsid	i
}
 80013bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013be:	bf00      	nop
 80013c0:	e7fd      	b.n	80013be <Error_Handler+0x8>

080013c2 <LL_AHB2_GRP1_EnableClock>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001400:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001402:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001410:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <HAL_ADC_MspInit+0xb8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d145      	bne.n	80014e2 <HAL_ADC_MspInit+0xae>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001456:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800145a:	f7ff ffb2 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2004      	movs	r0, #4
 8001460:	f7ff ffaf 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001464:	2301      	movs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	481e      	ldr	r0, [pc, #120]	@ (80014f0 <HAL_ADC_MspInit+0xbc>)
 8001478:	f002 fb4e 	bl	8003b18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 800147e:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <HAL_ADC_MspInit+0xc4>)
 8001480:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 8001484:	2205      	movs	r2, #5
 8001486:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 800149c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 80014a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b6:	480f      	ldr	r0, [pc, #60]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 80014b8:	f002 f84c 	bl	8003554 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 80014c2:	f7ff ff78 	bl	80013b6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 80014ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014cc:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <HAL_ADC_MspInit+0xc0>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	2012      	movs	r0, #18
 80014d8:	f002 f807 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014dc:	2012      	movs	r0, #18
 80014de:	f002 f81e 	bl	800351e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	50040000 	.word	0x50040000
 80014f0:	48000800 	.word	0x48000800
 80014f4:	20000384 	.word	0x20000384
 80014f8:	40020008 	.word	0x40020008

080014fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b09c      	sub	sp, #112	@ 0x70
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2250      	movs	r2, #80	@ 0x50
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f00d f9ab 	bl	800e878 <memset>
  if(hi2c->Instance==I2C1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <HAL_I2C_MspInit+0xa8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d136      	bne.n	800159a <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800152c:	2304      	movs	r3, #4
 800152e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001530:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fc39 	bl	8007db2 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001546:	f7ff ff36 	bl	80013b6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2002      	movs	r0, #2
 800154c:	f7ff ff39 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001550:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001554:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001556:	2312      	movs	r3, #18
 8001558:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001562:	2304      	movs	r3, #4
 8001564:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800156a:	4619      	mov	r1, r3
 800156c:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <HAL_I2C_MspInit+0xac>)
 800156e:	f002 fad3 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001572:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001576:	f7ff ff3d 	bl	80013f4 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	201e      	movs	r0, #30
 8001580:	f001 ffb3 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001584:	201e      	movs	r0, #30
 8001586:	f001 ffca 	bl	800351e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201f      	movs	r0, #31
 8001590:	f001 ffab 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001594:	201f      	movs	r0, #31
 8001596:	f001 ffc2 	bl	800351e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800159a:	bf00      	nop
 800159c:	3770      	adds	r7, #112	@ 0x70
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40005400 	.word	0x40005400
 80015a8:	48000400 	.word	0x48000400

080015ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015bc:	d10a      	bne.n	80015d4 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ff18 	bl	80013f4 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	201c      	movs	r0, #28
 80015ca:	f001 ff8e 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ce:	201c      	movs	r0, #28
 80015d0:	f001 ffa5 	bl	800351e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 fb93 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}

0800163a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800163e:	2001      	movs	r0, #1
 8001640:	f002 fbf2 	bl	8003e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800164c:	2002      	movs	r0, #2
 800164e:	f002 fbeb 	bl	8003e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800165a:	2010      	movs	r0, #16
 800165c:	f002 fbe4 	bl	8003e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <DMA1_Channel1_IRQHandler+0x10>)
 800166a:	f002 f8f5 	bl	8003858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000384 	.word	0x20000384

08001678 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <ADC1_IRQHandler+0x10>)
 800167e:	f000 ff75 	bl	800256c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000320 	.word	0x20000320

0800168c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <USB_HP_IRQHandler+0x10>)
 8001692:	f003 fc27 	bl	8004ee4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001ba4 	.word	0x20001ba4

080016a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <USB_LP_IRQHandler+0x10>)
 80016a6:	f003 fc1d 	bl	8004ee4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20001ba4 	.word	0x20001ba4

080016b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <TIM2_IRQHandler+0x10>)
 80016ba:	f006 fea7 	bl	800840c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000438 	.word	0x20000438

080016c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <I2C1_EV_IRQHandler+0x10>)
 80016ce:	f002 fc69 	bl	8003fa4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003e4 	.word	0x200003e4

080016dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <I2C1_ER_IRQHandler+0x10>)
 80016e2:	f002 fc79 	bl	8003fd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200003e4 	.word	0x200003e4

080016f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_kill>:

int _kill(int pid, int sig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800170a:	f00d f907 	bl	800e91c <__errno>
 800170e:	4603      	mov	r3, r0
 8001710:	2216      	movs	r2, #22
 8001712:	601a      	str	r2, [r3, #0]
  return -1;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_exit>:

void _exit (int status)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ffe7 	bl	8001700 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001732:	bf00      	nop
 8001734:	e7fd      	b.n	8001732 <_exit+0x12>

08001736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e00a      	b.n	800175e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001748:	f3af 8000 	nop.w
 800174c:	4601      	mov	r1, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	b2ca      	uxtb	r2, r1
 8001756:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbf0      	blt.n	8001748 <_read+0x12>
  }

  return len;
 8001766:	687b      	ldr	r3, [r7, #4]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e009      	b.n	8001796 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fa40 	bl	8001c10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbf1      	blt.n	8001782 <_write+0x12>
  }
  return len;
 800179e:	687b      	ldr	r3, [r7, #4]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_close>:

int _close(int file)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d0:	605a      	str	r2, [r3, #4]
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_isatty>:

int _isatty(int file)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f00d f86c 	bl	800e91c <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20030000 	.word	0x20030000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000624 	.word	0x20000624
 8001878:	200021f0 	.word	0x200021f0

0800187c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001880:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <SystemInit+0x98>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001886:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <SystemInit+0x98>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80018a8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <SystemInit+0x9c>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018c6:	f023 0305 	bic.w	r3, r3, #5
 80018ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e6:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <SystemInit+0xa0>)
 80018e8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80018ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ee:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <SystemInit+0xa0>)
 80018f0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001900:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00
 8001918:	faf6fefb 	.word	0xfaf6fefb
 800191c:	22041000 	.word	0x22041000

08001920 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001920:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001922:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001924:	3304      	adds	r3, #4

08001926 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001926:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001928:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800192a:	d3f9      	bcc.n	8001920 <CopyDataInit>
  bx lr
 800192c:	4770      	bx	lr

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800192e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001930:	3004      	adds	r0, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001932:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>
  bx lr
 8001936:	4770      	bx	lr

08001938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800193a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800193c:	f7ff ff9e 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001940:	480b      	ldr	r0, [pc, #44]	@ (8001970 <LoopForever+0x6>)
 8001942:	490c      	ldr	r1, [pc, #48]	@ (8001974 <LoopForever+0xa>)
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <LoopForever+0xe>)
 8001946:	2300      	movs	r3, #0
 8001948:	f7ff ffed 	bl	8001926 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <LoopForever+0x12>)
 800194e:	490c      	ldr	r1, [pc, #48]	@ (8001980 <LoopForever+0x16>)
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <LoopForever+0x1a>)
 8001952:	2300      	movs	r3, #0
 8001954:	f7ff ffe7 	bl	8001926 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <LoopForever+0x1e>)
 800195a:	490c      	ldr	r1, [pc, #48]	@ (800198c <LoopForever+0x22>)
 800195c:	2300      	movs	r3, #0
 800195e:	f7ff ffe8 	bl	8001932 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001962:	f00c ffe1 	bl	800e928 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001966:	f7ff fb17 	bl	8000f98 <main>

0800196a <LoopForever>:

LoopForever:
  b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   r0, =_estack
 800196c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001970:	20000008 	.word	0x20000008
 8001974:	200002f4 	.word	0x200002f4
 8001978:	08010b1c 	.word	0x08010b1c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800197c:	20030000 	.word	0x20030000
 8001980:	20030000 	.word	0x20030000
 8001984:	08010e08 	.word	0x08010e08
  INIT_BSS _sbss, _ebss
 8001988:	200002f4 	.word	0x200002f4
 800198c:	200021ec 	.word	0x200021ec

08001990 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <AES1_IRQHandler>

08001992 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4313      	orrs	r3, r2
 80019da:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f7ff ffbd 	bl	8001992 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <BSP_LED_Init+0x6c>)
 8001a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a20:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <BSP_LED_Init+0x70>)
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	f107 020c 	add.w	r2, r7, #12
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 f86b 	bl	8003b18 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <BSP_LED_Init+0x70>)
 8001a46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <BSP_LED_Init+0x6c>)
 8001a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	f002 f9cf 	bl	8003df8 <HAL_GPIO_WritePin>
}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	0801076c 	.word	0x0801076c
 8001a68:	20000014 	.word	0x20000014

08001a6c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	460a      	mov	r2, r1
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <BSP_PB_Init+0x2e>
 8001a92:	2004      	movs	r0, #4
 8001a94:	f7ff ff7d 	bl	8001992 <LL_AHB2_GRP1_EnableClock>
 8001a98:	e00c      	b.n	8001ab4 <BSP_PB_Init+0x48>
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d103      	bne.n	8001aa8 <BSP_PB_Init+0x3c>
 8001aa0:	2008      	movs	r0, #8
 8001aa2:	f7ff ff76 	bl	8001992 <LL_AHB2_GRP1_EnableClock>
 8001aa6:	e005      	b.n	8001ab4 <BSP_PB_Init+0x48>
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d102      	bne.n	8001ab4 <BSP_PB_Init+0x48>
 8001aae:	2008      	movs	r0, #8
 8001ab0:	f7ff ff6f 	bl	8001992 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d117      	bne.n	8001aea <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <BSP_PB_Init+0xd4>)
 8001abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac2:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <BSP_PB_Init+0xd8>)
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	f107 020c 	add.w	r2, r7, #12
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f81a 	bl	8003b18 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f000 f965 	bl	8001db4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d123      	bne.n	8001b38 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <BSP_PB_Init+0xd4>)
 8001af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001afe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b02:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <BSP_PB_Init+0xd8>)
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	f107 020c 	add.w	r2, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 f800 	bl	8003b18 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <BSP_PB_Init+0xdc>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	210f      	movs	r1, #15
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fce0 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <BSP_PB_Init+0xdc>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fcf3 	bl	800351e <HAL_NVIC_EnableIRQ>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	08010774 	.word	0x08010774
 8001b44:	20000020 	.word	0x20000020
 8001b48:	0801077c 	.word	0x0801077c

08001b4c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d903      	bls.n	8001b6a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b62:	f06f 0301 	mvn.w	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e018      	b.n	8001b9c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2294      	movs	r2, #148	@ 0x94
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <BSP_COM_Init+0x5c>)
 8001b74:	4413      	add	r3, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f866 	bl	8001c48 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2294      	movs	r2, #148	@ 0x94
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <BSP_COM_Init+0x5c>)
 8001b86:	4413      	add	r3, r2
 8001b88:	6839      	ldr	r1, [r7, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f80e 	bl	8001bac <MX_LPUART1_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001b96:	f06f 0303 	mvn.w	r3, #3
 8001b9a:	e000      	b.n	8001b9e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000628 	.word	0x20000628

08001bac <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <MX_LPUART1_Init+0x60>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	220c      	movs	r2, #12
 8001bca:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	895b      	ldrh	r3, [r3, #10]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	891b      	ldrh	r3, [r3, #8]
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	899b      	ldrh	r3, [r3, #12]
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bf8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f006 ffa2 	bl	8008b44 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000002c 	.word	0x2000002c

08001c10 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <__io_putchar+0x30>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2394      	movs	r3, #148	@ 0x94
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <__io_putchar+0x34>)
 8001c26:	1898      	adds	r0, r3, r2
 8001c28:	1d39      	adds	r1, r7, #4
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f006 ffe2 	bl	8008bf8 <HAL_UART_Transmit>
  return ch;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200006bc 	.word	0x200006bc
 8001c44:	20000628 	.word	0x20000628

08001c48 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff fe9e 	bl	8001992 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001c56:	2002      	movs	r0, #2
 8001c58:	f7ff fe9b 	bl	8001992 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001c5c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c60:	f7ff feb0 	bl	80019c4 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001c64:	2340      	movs	r3, #64	@ 0x40
 8001c66:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001c74:	2307      	movs	r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	@ (8001ca4 <COM1_MspInit+0x5c>)
 8001c80:	f001 ff4a 	bl	8003b18 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	4803      	ldr	r0, [pc, #12]	@ (8001ca4 <COM1_MspInit+0x5c>)
 8001c98:	f001 ff3e 	bl	8003b18 <HAL_GPIO_Init>
}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_Init+0x3c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <HAL_Init+0x3c>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f001 fc08 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 f80f 	bl	8001ce8 <HAL_InitTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e001      	b.n	8001cda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd6:	f7ff fba6 	bl	8001426 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58004000 	.word	0x58004000

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001cf4:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_InitTick+0x6c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d024      	beq.n	8001d46 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cfc:	f005 fdc8 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_InitTick+0x6c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 fc10 	bl	800353a <HAL_SYSTICK_Config>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	d809      	bhi.n	8001d3a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d26:	2200      	movs	r2, #0
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2e:	f001 fbdc 	bl	80034ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <HAL_InitTick+0x70>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e004      	b.n	8001d4a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000034 	.word	0x20000034
 8001d58:	20000030 	.word	0x20000030

08001d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000034 	.word	0x20000034
 8001d80:	200006c0 	.word	0x200006c0

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200006c0 	.word	0x200006c0

08001d9c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_GetTickPrio+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000030 	.word	0x20000030

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffe2 	bl	8001d84 <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_Delay+0x44>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffd2 	bl	8001d84 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000034 	.word	0x20000034

08001dfc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3360      	adds	r3, #96	@ 0x60
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <LL_ADC_SetOffset+0x44>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e9c:	bf00      	nop
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	03fff000 	.word	0x03fff000

08001eac <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3360      	adds	r3, #96	@ 0x60
 8001eba:	461a      	mov	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3360      	adds	r3, #96	@ 0x60
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f26:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3330      	adds	r3, #48	@ 0x30
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	211f      	movs	r1, #31
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	f003 011f 	and.w	r1, r3, #31
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b087      	sub	sp, #28
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3314      	adds	r3, #20
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0e5b      	lsrs	r3, r3, #25
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0d1b      	lsrs	r3, r3, #20
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2107      	movs	r1, #7
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0d1b      	lsrs	r3, r3, #20
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0318 	and.w	r3, r3, #24
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002048:	40d9      	lsrs	r1, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	400b      	ands	r3, r1
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	431a      	orrs	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	0007ffff 	.word	0x0007ffff

0800206c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6093      	str	r3, [r2, #8]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020a4:	d101      	bne.n	80020aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80020c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020f4:	d101      	bne.n	80020fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002118:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <LL_ADC_IsEnabled+0x18>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <LL_ADC_IsEnabled+0x1a>
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002166:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800216a:	f043 0204 	orr.w	r2, r3, #4
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b04      	cmp	r3, #4
 8002190:	d101      	bne.n	8002196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d101      	bne.n	80021bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e12e      	b.n	8002448 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff f91b 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff3d 	bl	8002090 <LL_ADC_IsDeepPowerDownEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff23 	bl	800206c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff58 	bl	80020e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff3c 	bl	80020b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002240:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <HAL_ADC_Init+0x284>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	4a83      	ldr	r2, [pc, #524]	@ (8002454 <HAL_ADC_Init+0x288>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002254:	e002      	b.n	800225c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff3a 	bl	80020e0 <LL_ADC_IsInternalRegulatorEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff73 	bl	800217e <LL_ADC_REG_IsConversionOngoing>
 8002298:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 80c7 	bne.w	8002436 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80c3 	bne.w	8002436 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff33 	bl	8002130 <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d0:	4861      	ldr	r0, [pc, #388]	@ (8002458 <HAL_ADC_Init+0x28c>)
 80022d2:	f7ff ff2d 	bl	8002130 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4619      	mov	r1, r3
 80022e2:	485e      	ldr	r0, [pc, #376]	@ (800245c <HAL_ADC_Init+0x290>)
 80022e4:	f7ff fd8a 	bl	8001dfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e5b      	ldrb	r3, [r3, #25]
 80022ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002306:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002308:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d106      	bne.n	8002328 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	3b01      	subs	r3, #1
 8002320:	045b      	lsls	r3, r3, #17
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b45      	ldr	r3, [pc, #276]	@ (8002460 <HAL_ADC_Init+0x294>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	430b      	orrs	r3, r1
 8002356:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff0e 	bl	800217e <LL_ADC_REG_IsConversionOngoing>
 8002362:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff1b 	bl	80021a4 <LL_ADC_INJ_IsConversionOngoing>
 800236e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d13d      	bne.n	80023f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d13a      	bne.n	80023f2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002380:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002388:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002398:	f023 0302 	bic.w	r3, r3, #2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	69b9      	ldr	r1, [r7, #24]
 80023a2:	430b      	orrs	r3, r1
 80023a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d118      	bne.n	80023e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023cc:	4311      	orrs	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023d2:	430a      	orrs	r2, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	611a      	str	r2, [r3, #16]
 80023e0:	e007      	b.n	80023f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d10c      	bne.n	8002414 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	f023 010f 	bic.w	r1, r3, #15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
 8002412:	e007      	b.n	8002424 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 020f 	bic.w	r2, r2, #15
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
 8002434:	e007      	b.n	8002446 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002446:	7ffb      	ldrb	r3, [r7, #31]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000010 	.word	0x20000010
 8002454:	053e2d63 	.word	0x053e2d63
 8002458:	50040000 	.word	0x50040000
 800245c:	50040300 	.word	0x50040300
 8002460:	fff0c007 	.word	0xfff0c007

08002464 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe82 	bl	800217e <LL_ADC_REG_IsConversionOngoing>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d167      	bne.n	8002550 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_Start_DMA+0x2a>
 800248a:	2302      	movs	r3, #2
 800248c:	e063      	b.n	8002556 <HAL_ADC_Start_DMA+0xf2>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fe0c 	bl	80030b4 <ADC_Enable>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d14f      	bne.n	8002546 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	f023 0206 	bic.w	r2, r3, #6
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80024d2:	e002      	b.n	80024da <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	4a20      	ldr	r2, [pc, #128]	@ (8002560 <HAL_ADC_Start_DMA+0xfc>)
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_ADC_Start_DMA+0x100>)
 80024e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_ADC_Start_DMA+0x104>)
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	221c      	movs	r2, #28
 80024f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0210 	orr.w	r2, r2, #16
 8002510:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3340      	adds	r3, #64	@ 0x40
 800252c:	4619      	mov	r1, r3
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f001 f8b7 	bl	80036a4 <HAL_DMA_Start_IT>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe09 	bl	8002156 <LL_ADC_REG_StartConversion>
 8002544:	e006      	b.n	8002554 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800254e:	e001      	b.n	8002554 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002550:	2302      	movs	r3, #2
 8002552:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002554:	7dfb      	ldrb	r3, [r7, #23]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	080031a9 	.word	0x080031a9
 8002564:	08003281 	.word	0x08003281
 8002568:	0800329d 	.word	0x0800329d

0800256c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d017      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x56>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 feb3 	bl	8003320 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_IRQHandler+0x6a>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05d      	beq.n	800269c <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d058      	beq.n	800269c <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fc81 	bl	8001f0e <LL_ADC_REG_IsTriggerSourceSWStart>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03d      	beq.n	800268e <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002620:	d035      	beq.n	800268e <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b08      	cmp	r3, #8
 800262e:	d12e      	bne.n	800268e <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fda2 	bl	800217e <LL_ADC_REG_IsConversionOngoing>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11a      	bne.n	8002676 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 020c 	bic.w	r2, r2, #12
 800264e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d112      	bne.n	800268e <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
 8002674:	e00b      	b.n	800268e <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f922 	bl	80028d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	220c      	movs	r2, #12
 800269a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_IRQHandler+0x144>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d074      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d06f      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fc61 	bl	8001fa8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026e6:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fc0e 	bl	8001f0e <LL_ADC_REG_IsTriggerSourceSWStart>
 80026f2:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d049      	beq.n	8002796 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_ADC_IRQHandler+0x1b0>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d041      	beq.n	8002796 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002718:	2b00      	cmp	r3, #0
 800271a:	d13c      	bne.n	8002796 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b40      	cmp	r3, #64	@ 0x40
 8002728:	d135      	bne.n	8002796 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12e      	bne.n	8002796 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fd31 	bl	80021a4 <LL_ADC_INJ_IsConversionOngoing>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11a      	bne.n	800277e <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002756:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d112      	bne.n	8002796 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	@ 0x54
 800277c:	e00b      	b.n	8002796 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fd9a 	bl	80032d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2260      	movs	r2, #96	@ 0x60
 80027a2:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d011      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x266>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00c      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f89b 	bl	8002900 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_ADC_IRQHandler+0x296>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fd80 	bl	80032f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_ADC_IRQHandler+0x2c6>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fd72 	bl	800330c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02b      	beq.n	8002894 <HAL_ADC_IRQHandler+0x328>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d026      	beq.n	8002894 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800284e:	2301      	movs	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e009      	b.n	8002868 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fb97 	bl	8001f8c <LL_ADC_REG_GetDMATransfer>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002864:	2301      	movs	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10e      	bne.n	800288c <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002872:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f844 	bl	8002914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x364>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f043 0208 	orr.w	r2, r3, #8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028c8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fd0a 	bl	80032e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80028d0:	bf00      	nop
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0b6      	sub	sp, #216	@ 0xd8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_ADC_ConfigChannel+0x22>
 8002946:	2302      	movs	r3, #2
 8002948:	e39f      	b.n	800308a <HAL_ADC_ConfigChannel+0x762>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fc11 	bl	800217e <LL_ADC_REG_IsConversionOngoing>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8384 	bne.w	800306c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	f7ff fadf 	bl	8001f34 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fbff 	bl	800217e <LL_ADC_REG_IsConversionOngoing>
 8002980:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fc0b 	bl	80021a4 <LL_ADC_INJ_IsConversionOngoing>
 800298e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002992:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 81a6 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800299c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 81a1 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff fb0b 	bl	8001fce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d00a      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6919      	ldr	r1, [r3, #16]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029ea:	f7ff fa3b 	bl	8001e64 <LL_ADC_SetOffset>
 80029ee:	e17b      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fa58 	bl	8001eac <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0xf4>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fa4d 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	f003 021f 	and.w	r2, r3, #31
 8002a1a:	e01e      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x132>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fa42 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e004      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x14a>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	e018      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x17c>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002a96:	2320      	movs	r3, #32
 8002a98:	e004      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fa11 	bl	8001ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f9f5 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1ba>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f9ea 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	e01e      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x1f8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f9df 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e004      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x210>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	e018      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x242>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e004      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d106      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f9ae 	bl	8001ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f992 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x280>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f987 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	f003 021f 	and.w	r2, r3, #31
 8002ba6:	e01e      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x2be>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f97c 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e004      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x2d6>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	e016      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x304>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002c10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2102      	movs	r1, #2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f94d 	bl	8001ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f931 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x342>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2103      	movs	r1, #3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f926 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	e017      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x372>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2103      	movs	r1, #3
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f91b 	bl	8001eac <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c84:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002c90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x38a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	e011      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x3ae>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e003      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f8f8 	bl	8001ed8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fa1f 	bl	8002130 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f040 81c2 	bne.w	800307e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f7ff f98c 	bl	8002024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a8e      	ldr	r2, [pc, #568]	@ (8002f4c <HAL_ADC_ConfigChannel+0x624>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f040 8130 	bne.w	8002f78 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x418>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2b09      	cmp	r3, #9
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e019      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x44c>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	bf94      	ite	ls
 8002d6e:	2301      	movls	r3, #1
 8002d70:	2300      	movhi	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d079      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x46c>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	069b      	lsls	r3, r3, #26
 8002d8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d92:	e015      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x498>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x4b8>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	e017      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x4e8>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	ea42 0103 	orr.w	r1, r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x50e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	051b      	lsls	r3, r3, #20
 8002e34:	e018      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x540>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	e080      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x560>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e86:	e015      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x58c>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e003      	b.n	8002eac <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	069b      	lsls	r3, r3, #26
 8002eb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ac>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	e017      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x5dc>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	ea42 0103 	orr.w	r1, r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x608>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	3b1e      	subs	r3, #30
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	e01d      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x644>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	613b      	str	r3, [r7, #16]
  return result;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e005      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x630>
 8002f4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f003 021f 	and.w	r2, r3, #31
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	3b1e      	subs	r3, #30
 8002f66:	051b      	lsls	r3, r3, #20
 8002f68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f6c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7ff f82b 	bl	8001fce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b45      	ldr	r3, [pc, #276]	@ (8003094 <HAL_ADC_ConfigChannel+0x76c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d07c      	beq.n	800307e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f84:	4844      	ldr	r0, [pc, #272]	@ (8003098 <HAL_ADC_ConfigChannel+0x770>)
 8002f86:	f7fe ff5f 	bl	8001e48 <LL_ADC_GetCommonPathInternalCh>
 8002f8a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8e:	4843      	ldr	r0, [pc, #268]	@ (800309c <HAL_ADC_ConfigChannel+0x774>)
 8002f90:	f7ff f8ce 	bl	8002130 <LL_ADC_IsEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d15e      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a40      	ldr	r2, [pc, #256]	@ (80030a0 <HAL_ADC_ConfigChannel+0x778>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d127      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x6cc>
 8002fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d121      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a39      	ldr	r2, [pc, #228]	@ (800309c <HAL_ADC_ConfigChannel+0x774>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d161      	bne.n	800307e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4834      	ldr	r0, [pc, #208]	@ (8003098 <HAL_ADC_ConfigChannel+0x770>)
 8002fc6:	f7fe ff2c 	bl	8001e22 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <HAL_ADC_ConfigChannel+0x77c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	4a35      	ldr	r2, [pc, #212]	@ (80030a8 <HAL_ADC_ConfigChannel+0x780>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002fe4:	e002      	b.n	8002fec <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f9      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff2:	e044      	b.n	800307e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <HAL_ADC_ConfigChannel+0x784>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x6fe>
 8002ffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003002:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a23      	ldr	r2, [pc, #140]	@ (800309c <HAL_ADC_ConfigChannel+0x774>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d134      	bne.n	800307e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301c:	4619      	mov	r1, r3
 800301e:	481e      	ldr	r0, [pc, #120]	@ (8003098 <HAL_ADC_ConfigChannel+0x770>)
 8003020:	f7fe feff 	bl	8001e22 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003024:	e02b      	b.n	800307e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a21      	ldr	r2, [pc, #132]	@ (80030b0 <HAL_ADC_ConfigChannel+0x788>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d126      	bne.n	800307e <HAL_ADC_ConfigChannel+0x756>
 8003030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d120      	bne.n	800307e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a16      	ldr	r2, [pc, #88]	@ (800309c <HAL_ADC_ConfigChannel+0x774>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d11b      	bne.n	800307e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800304a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800304e:	4619      	mov	r1, r3
 8003050:	4811      	ldr	r0, [pc, #68]	@ (8003098 <HAL_ADC_ConfigChannel+0x770>)
 8003052:	f7fe fee6 	bl	8001e22 <LL_ADC_SetCommonPathInternalCh>
 8003056:	e012      	b.n	800307e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800306a:	e008      	b.n	800307e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003086:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800308a:	4618      	mov	r0, r3
 800308c:	37d8      	adds	r7, #216	@ 0xd8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	80080000 	.word	0x80080000
 8003098:	50040300 	.word	0x50040300
 800309c:	50040000 	.word	0x50040000
 80030a0:	c7520000 	.word	0xc7520000
 80030a4:	20000010 	.word	0x20000010
 80030a8:	053e2d63 	.word	0x053e2d63
 80030ac:	cb840000 	.word	0xcb840000
 80030b0:	80000001 	.word	0x80000001

080030b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f833 	bl	8002130 <LL_ADC_IsEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d15e      	bne.n	800318e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <ADC_Enable+0xe4>)
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	f043 0210 	orr.w	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e04a      	b.n	8003190 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f802 	bl	8002108 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003104:	4825      	ldr	r0, [pc, #148]	@ (800319c <ADC_Enable+0xe8>)
 8003106:	f7fe fe9f 	bl	8001e48 <LL_ADC_GetCommonPathInternalCh>
 800310a:	4603      	mov	r3, r0
 800310c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00f      	beq.n	8003134 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003114:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <ADC_Enable+0xec>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <ADC_Enable+0xf0>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	3301      	adds	r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003126:	e002      	b.n	800312e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3b01      	subs	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003134:	f7fe fe26 	bl	8001d84 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800313a:	e021      	b.n	8003180 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fff5 	bl	8002130 <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe ffd9 	bl	8002108 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003156:	f7fe fe15 	bl	8001d84 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d90d      	bls.n	8003180 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d1d6      	bne.n	800313c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	8000003f 	.word	0x8000003f
 800319c:	50040300 	.word	0x50040300
 80031a0:	20000010 	.word	0x20000010
 80031a4:	053e2d63 	.word	0x053e2d63

080031a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d14b      	bne.n	800325a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d021      	beq.n	8003220 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fe94 	bl	8001f0e <LL_ADC_REG_IsTriggerSourceSWStart>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d032      	beq.n	8003252 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d12b      	bne.n	8003252 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11f      	bne.n	8003252 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
 800321e:	e018      	b.n	8003252 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d111      	bne.n	8003252 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff fb40 	bl	80028d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003258:	e00e      	b.n	8003278 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fb54 	bl	8002914 <HAL_ADC_ErrorCallback>
}
 800326c:	e004      	b.n	8003278 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff fb2c 	bl	80028ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fb26 	bl	8002914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800335c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <__NVIC_GetPriorityGrouping+0x18>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0307 	and.w	r3, r3, #7
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db0b      	blt.n	80033c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	4907      	ldr	r1, [pc, #28]	@ (80033d0 <__NVIC_EnableIRQ+0x38>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2001      	movs	r0, #1
 80033ba:	fa00 f202 	lsl.w	r2, r0, r2
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	@ (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	@ (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f7ff ff8e 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff29 	bl	8003334 <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff40 	bl	800337c <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff90 	bl	8003428 <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff5f 	bl	80033d4 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff33 	bl	8003398 <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffa4 	bl	8003490 <SysTick_Config>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e08e      	b.n	8003684 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b47      	ldr	r3, [pc, #284]	@ (800368c <HAL_DMA_Init+0x138>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d80f      	bhi.n	8003592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b45      	ldr	r3, [pc, #276]	@ (8003690 <HAL_DMA_Init+0x13c>)
 800357a:	4413      	add	r3, r2
 800357c:	4a45      	ldr	r2, [pc, #276]	@ (8003694 <HAL_DMA_Init+0x140>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a42      	ldr	r2, [pc, #264]	@ (8003698 <HAL_DMA_Init+0x144>)
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003590:	e00e      	b.n	80035b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b40      	ldr	r3, [pc, #256]	@ (800369c <HAL_DMA_Init+0x148>)
 800359a:	4413      	add	r3, r2
 800359c:	4a3d      	ldr	r2, [pc, #244]	@ (8003694 <HAL_DMA_Init+0x140>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a3c      	ldr	r2, [pc, #240]	@ (80036a0 <HAL_DMA_Init+0x14c>)
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa24 	bl	8003a50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003610:	d102      	bne.n	8003618 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003620:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003624:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800362e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_DMA_Init+0x106>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d80c      	bhi.n	800365a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa43 	bl	8003acc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	e008      	b.n	800366c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40020407 	.word	0x40020407
 8003690:	bffdfff8 	.word	0xbffdfff8
 8003694:	cccccccd 	.word	0xcccccccd
 8003698:	40020000 	.word	0x40020000
 800369c:	bffdfbf8 	.word	0xbffdfbf8
 80036a0:	40020400 	.word	0x40020400

080036a4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e066      	b.n	8003792 <HAL_DMA_Start_IT+0xee>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d155      	bne.n	8003784 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f968 	bl	80039d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 020e 	orr.w	r2, r2, #14
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 020a 	orr.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003758:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003770:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e005      	b.n	8003790 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800378c:	2302      	movs	r3, #2
 800378e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d005      	beq.n	80037be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	e047      	b.n	800384e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 020e 	bic.w	r2, r2, #14
 80037cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	f003 021c 	and.w	r2, r3, #28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800380a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00c      	beq.n	800382e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003822:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800382c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
    }
  }
  return status;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003874:	f003 031c 	and.w	r3, r3, #28
 8003878:	2204      	movs	r2, #4
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d026      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x7a>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d021      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f003 021c 	and.w	r2, r3, #28
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	2104      	movs	r1, #4
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d071      	beq.n	80039ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038d0:	e06c      	b.n	80039ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 031c 	and.w	r3, r3, #28
 80038da:	2202      	movs	r2, #2
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <HAL_DMA_IRQHandler+0xec>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d029      	beq.n	8003944 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 020a 	bic.w	r2, r2, #10
 800390c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f003 021c 	and.w	r2, r3, #28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2102      	movs	r1, #2
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d038      	beq.n	80039ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003942:	e033      	b.n	80039ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	f003 031c 	and.w	r3, r3, #28
 800394c:	2208      	movs	r2, #8
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02a      	beq.n	80039ae <HAL_DMA_IRQHandler+0x156>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d025      	beq.n	80039ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020e 	bic.w	r2, r2, #14
 8003970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f003 021c 	and.w	r2, r3, #28
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f202 	lsl.w	r2, r1, r2
 8003984:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
}
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039e8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039fa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	f003 021c 	and.w	r2, r3, #28
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d108      	bne.n	8003a32 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a30:	e007      	b.n	8003a42 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d80a      	bhi.n	8003a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a70:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a78:	e007      	b.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a84:	4413      	add	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3b08      	subs	r3, #8
 8003a92:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003aa0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40020407 	.word	0x40020407
 8003ac0:	4002081c 	.word	0x4002081c
 8003ac4:	cccccccd 	.word	0xcccccccd
 8003ac8:	40020880 	.word	0x40020880

08003acc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003adc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a09      	ldr	r2, [pc, #36]	@ (8003b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003af0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	1000823f 	.word	0x1000823f
 8003b14:	40020940 	.word	0x40020940

08003b18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b26:	e14c      	b.n	8003dc2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 813e 	beq.w	8003dbc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d005      	beq.n	8003b58 <HAL_GPIO_Init+0x40>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d130      	bne.n	8003bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b8e:	2201      	movs	r2, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0201 	and.w	r2, r3, #1
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d017      	beq.n	8003bf6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d123      	bne.n	8003c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3208      	adds	r2, #8
 8003c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	6939      	ldr	r1, [r7, #16]
 8003c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0203 	and.w	r2, r3, #3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8098 	beq.w	8003dbc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c8c:	4a54      	ldr	r2, [pc, #336]	@ (8003de0 <HAL_GPIO_Init+0x2c8>)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3302      	adds	r3, #2
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cb6:	d019      	beq.n	8003cec <HAL_GPIO_Init+0x1d4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <HAL_GPIO_Init+0x2cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_GPIO_Init+0x1d0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a49      	ldr	r2, [pc, #292]	@ (8003de8 <HAL_GPIO_Init+0x2d0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_GPIO_Init+0x1cc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a48      	ldr	r2, [pc, #288]	@ (8003dec <HAL_GPIO_Init+0x2d4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <HAL_GPIO_Init+0x1c8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a47      	ldr	r2, [pc, #284]	@ (8003df0 <HAL_GPIO_Init+0x2d8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <HAL_GPIO_Init+0x1c4>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	e008      	b.n	8003cee <HAL_GPIO_Init+0x1d6>
 8003cdc:	2307      	movs	r3, #7
 8003cde:	e006      	b.n	8003cee <HAL_GPIO_Init+0x1d6>
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e004      	b.n	8003cee <HAL_GPIO_Init+0x1d6>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e002      	b.n	8003cee <HAL_GPIO_Init+0x1d6>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_GPIO_Init+0x1d6>
 8003cec:	2300      	movs	r3, #0
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	f002 0203 	and.w	r2, r2, #3
 8003cf4:	0092      	lsls	r2, r2, #2
 8003cf6:	4093      	lsls	r3, r2
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cfe:	4938      	ldr	r1, [pc, #224]	@ (8003de0 <HAL_GPIO_Init+0x2c8>)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	3302      	adds	r3, #2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d0c:	4b39      	ldr	r3, [pc, #228]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d30:	4a30      	ldr	r2, [pc, #192]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d36:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d5a:	4a26      	ldr	r2, [pc, #152]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d60:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d86:	4a1b      	ldr	r2, [pc, #108]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003d8e:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003db4:	4a0f      	ldr	r2, [pc, #60]	@ (8003df4 <HAL_GPIO_Init+0x2dc>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f47f aeab 	bne.w	8003b28 <HAL_GPIO_Init+0x10>
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40010000 	.word	0x40010000
 8003de4:	48000400 	.word	0x48000400
 8003de8:	48000800 	.word	0x48000800
 8003dec:	48000c00 	.word	0x48000c00
 8003df0:	48001000 	.word	0x48001000
 8003df4:	58000800 	.word	0x58000800

08003df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
 8003e04:	4613      	mov	r3, r2
 8003e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e08:	787b      	ldrb	r3, [r7, #1]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e14:	e002      	b.n	8003e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d006      	beq.n	8003e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e3e:	4a05      	ldr	r2, [pc, #20]	@ (8003e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f806 	bl	8003e58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	58000800 	.word	0x58000800

08003e58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e08d      	b.n	8003f9c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd fb31 	bl	80014fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2224      	movs	r2, #36	@ 0x24
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ebe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ece:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	e006      	b.n	8003ef6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d108      	bne.n	8003f10 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e007      	b.n	8003f20 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f32:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69d9      	ldr	r1, [r3, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1a      	ldr	r2, [r3, #32]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	09db      	lsrs	r3, r3, #7
 8004000:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400c:	f043 0201 	orr.w	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800401c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	0a9b      	lsrs	r3, r3, #10
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d010      	beq.n	800404c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	09db      	lsrs	r3, r3, #7
 800402e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	f043 0208 	orr.w	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800404a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	0a5b      	lsrs	r3, r3, #9
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	09db      	lsrs	r3, r3, #7
 800405c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004068:	f043 0202 	orr.w	r2, r3, #2
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004078:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 030b 	and.w	r3, r3, #11
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fbeb 	bl	8004868 <I2C_ITError>
  }
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
 80040ce:	4613      	mov	r3, r2
 80040d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <I2C_Slave_ISR_IT+0x24>
 800413a:	2302      	movs	r3, #2
 800413c:	e0ed      	b.n	800431a <I2C_Slave_ISR_IT+0x200>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800415e:	6939      	ldr	r1, [r7, #16]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f9c1 	bl	80044e8 <I2C_ITSlaveCplt>
 8004166:	e0d3      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d04d      	beq.n	8004210 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800417c:	2b00      	cmp	r3, #0
 800417e:	d047      	beq.n	8004210 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d128      	bne.n	80041dc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b28      	cmp	r3, #40	@ 0x28
 8004194:	d108      	bne.n	80041a8 <I2C_Slave_ISR_IT+0x8e>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800419c:	d104      	bne.n	80041a8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fb0b 	bl	80047bc <I2C_ITListenCplt>
 80041a6:	e032      	b.n	800420e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b29      	cmp	r3, #41	@ 0x29
 80041b2:	d10e      	bne.n	80041d2 <I2C_Slave_ISR_IT+0xb8>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041ba:	d00a      	beq.n	80041d2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2210      	movs	r2, #16
 80041c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fc66 	bl	8004a96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f92d 	bl	800442a <I2C_ITSlaveSeqCplt>
 80041d0:	e01d      	b.n	800420e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2210      	movs	r2, #16
 80041d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80041da:	e096      	b.n	800430a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2210      	movs	r2, #16
 80041e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e8:	f043 0204 	orr.w	r2, r3, #4
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <I2C_Slave_ISR_IT+0xe6>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041fc:	f040 8085 	bne.w	800430a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004204:	4619      	mov	r1, r3
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fb2e 	bl	8004868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800420c:	e07d      	b.n	800430a <I2C_Slave_ISR_IT+0x1f0>
 800420e:	e07c      	b.n	800430a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d030      	beq.n	800427e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004224:	2b00      	cmp	r3, #0
 8004226:	d02a      	beq.n	800427e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d14f      	bne.n	800430e <I2C_Slave_ISR_IT+0x1f4>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004274:	d04b      	beq.n	800430e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f8d7 	bl	800442a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800427c:	e047      	b.n	800430e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	08db      	lsrs	r3, r3, #3
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004296:	6939      	ldr	r1, [r7, #16]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f842 	bl	8004322 <I2C_ITAddrCplt>
 800429e:	e037      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d031      	beq.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02b      	beq.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d018      	beq.n	80042f4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80042f2:	e00d      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042fa:	d002      	beq.n	8004302 <I2C_Slave_ISR_IT+0x1e8>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f891 	bl	800442a <I2C_ITSlaveSeqCplt>
 8004308:	e002      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800430e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004338:	2b28      	cmp	r3, #40	@ 0x28
 800433a:	d16a      	bne.n	8004412 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	b29b      	uxth	r3, r3
 8004356:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800435a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004368:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004376:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d138      	bne.n	80043f2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	09db      	lsrs	r3, r3, #7
 8004384:	b29a      	uxth	r2, r3
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	4053      	eors	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	f003 0306 	and.w	r3, r3, #6
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11c      	bne.n	80043ce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d13b      	bne.n	8004422 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2208      	movs	r2, #8
 80043b6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043c0:	89ba      	ldrh	r2, [r7, #12]
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fe7b 	bl	80040c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043cc:	e029      	b.n	8004422 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80043ce:	893b      	ldrh	r3, [r7, #8]
 80043d0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb9f 	bl	8004b1a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043e4:	89ba      	ldrh	r2, [r7, #12]
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fe69 	bl	80040c2 <HAL_I2C_AddrCallback>
}
 80043f0:	e017      	b.n	8004422 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fb8f 	bl	8004b1a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004404:	89ba      	ldrh	r2, [r7, #12]
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fe59 	bl	80040c2 <HAL_I2C_AddrCallback>
}
 8004410:	e007      	b.n	8004422 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2208      	movs	r2, #8
 8004418:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0b9b      	lsrs	r3, r3, #14
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00d      	b.n	800447c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0bdb      	lsrs	r3, r3, #15
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800447a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b29      	cmp	r3, #41	@ 0x29
 8004486:	d112      	bne.n	80044ae <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2228      	movs	r2, #40	@ 0x28
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2221      	movs	r2, #33	@ 0x21
 8004494:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004496:	2101      	movs	r1, #1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fb3e 	bl	8004b1a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fdf7 	bl	800409a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044ac:	e017      	b.n	80044de <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044b8:	d111      	bne.n	80044de <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2228      	movs	r2, #40	@ 0x28
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2222      	movs	r2, #34	@ 0x22
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044c8:	2102      	movs	r1, #2
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fb25 	bl	8004b1a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fde8 	bl	80040ae <HAL_I2C_SlaveRxCpltCallback>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2220      	movs	r2, #32
 8004512:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004514:	7afb      	ldrb	r3, [r7, #11]
 8004516:	2b21      	cmp	r3, #33	@ 0x21
 8004518:	d002      	beq.n	8004520 <I2C_ITSlaveCplt+0x38>
 800451a:	7afb      	ldrb	r3, [r7, #11]
 800451c:	2b29      	cmp	r3, #41	@ 0x29
 800451e:	d108      	bne.n	8004532 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004520:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 faf8 	bl	8004b1a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2221      	movs	r2, #33	@ 0x21
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004530:	e019      	b.n	8004566 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004532:	7afb      	ldrb	r3, [r7, #11]
 8004534:	2b22      	cmp	r3, #34	@ 0x22
 8004536:	d002      	beq.n	800453e <I2C_ITSlaveCplt+0x56>
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	2b2a      	cmp	r3, #42	@ 0x2a
 800453c:	d108      	bne.n	8004550 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800453e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fae9 	bl	8004b1a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2222      	movs	r2, #34	@ 0x22
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
 800454e:	e00a      	b.n	8004566 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004550:	7afb      	ldrb	r3, [r7, #11]
 8004552:	2b28      	cmp	r3, #40	@ 0x28
 8004554:	d107      	bne.n	8004566 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004556:	f248 0103 	movw	r1, #32771	@ 0x8003
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fadd 	bl	8004b1a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004574:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b8c      	ldr	r3, [pc, #560]	@ (80047b4 <I2C_ITSlaveCplt+0x2cc>)
 8004582:	400b      	ands	r3, r1
 8004584:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa85 	bl	8004a96 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	0b9b      	lsrs	r3, r3, #14
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045be:	e018      	b.n	80045f2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	0bdb      	lsrs	r3, r3, #15
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d012      	beq.n	80045f2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d020      	beq.n	8004640 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04a      	beq.n	80046f8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800466a:	2b00      	cmp	r3, #0
 800466c:	d044      	beq.n	80046f8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d128      	bne.n	80046ca <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b28      	cmp	r3, #40	@ 0x28
 8004682:	d108      	bne.n	8004696 <I2C_ITSlaveCplt+0x1ae>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800468a:	d104      	bne.n	8004696 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800468c:	6979      	ldr	r1, [r7, #20]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f894 	bl	80047bc <I2C_ITListenCplt>
 8004694:	e030      	b.n	80046f8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b29      	cmp	r3, #41	@ 0x29
 80046a0:	d10e      	bne.n	80046c0 <I2C_ITSlaveCplt+0x1d8>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a8:	d00a      	beq.n	80046c0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9ef 	bl	8004a96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff feb6 	bl	800442a <I2C_ITSlaveSeqCplt>
 80046be:	e01b      	b.n	80046f8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2210      	movs	r2, #16
 80046c6:	61da      	str	r2, [r3, #28]
 80046c8:	e016      	b.n	80046f8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2210      	movs	r2, #16
 80046d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0204 	orr.w	r2, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <I2C_ITSlaveCplt+0x204>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ea:	d105      	bne.n	80046f8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8b8 	bl	8004868 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	2b00      	cmp	r3, #0
 800470c:	d010      	beq.n	8004730 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8a7 	bl	8004868 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b28      	cmp	r3, #40	@ 0x28
 8004724:	d141      	bne.n	80047aa <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f847 	bl	80047bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800472e:	e03c      	b.n	80047aa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004738:	d014      	beq.n	8004764 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe75 	bl	800442a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <I2C_ITSlaveCplt+0x2d0>)
 8004744:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff fcbe 	bl	80040de <HAL_I2C_ListenCpltCallback>
}
 8004762:	e022      	b.n	80047aa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b22      	cmp	r3, #34	@ 0x22
 800476e:	d10e      	bne.n	800478e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fc91 	bl	80040ae <HAL_I2C_SlaveRxCpltCallback>
}
 800478c:	e00d      	b.n	80047aa <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fc78 	bl	800409a <HAL_I2C_SlaveTxCpltCallback>
}
 80047aa:	bf00      	nop
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	fe00e800 	.word	0xfe00e800
 80047b8:	ffff0000 	.word	0xffff0000

080047bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a26      	ldr	r2, [pc, #152]	@ (8004864 <I2C_ITListenCplt+0xa8>)
 80047ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d022      	beq.n	800483a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800483a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f96b 	bl	8004b1a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2210      	movs	r2, #16
 800484a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fc42 	bl	80040de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	ffff0000 	.word	0xffff0000

08004868 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004878:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a6d      	ldr	r2, [pc, #436]	@ (8004a3c <I2C_ITError+0x1d4>)
 8004886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b28      	cmp	r3, #40	@ 0x28
 800489e:	d005      	beq.n	80048ac <I2C_ITError+0x44>
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b29      	cmp	r3, #41	@ 0x29
 80048a4:	d002      	beq.n	80048ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048aa:	d10b      	bne.n	80048c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048ac:	2103      	movs	r1, #3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f933 	bl	8004b1a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2228      	movs	r2, #40	@ 0x28
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a60      	ldr	r2, [pc, #384]	@ (8004a40 <I2C_ITError+0x1d8>)
 80048c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80048c2:	e030      	b.n	8004926 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048c4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f926 	bl	8004b1a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8e1 	bl	8004a96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b60      	cmp	r3, #96	@ 0x60
 80048de:	d01f      	beq.n	8004920 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d114      	bne.n	8004920 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b10      	cmp	r3, #16
 8004902:	d109      	bne.n	8004918 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2210      	movs	r2, #16
 800490a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	f043 0204 	orr.w	r2, r3, #4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2220      	movs	r2, #32
 800491e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d039      	beq.n	80049a8 <I2C_ITError+0x140>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b11      	cmp	r3, #17
 8004938:	d002      	beq.n	8004940 <I2C_ITError+0xd8>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b21      	cmp	r3, #33	@ 0x21
 800493e:	d133      	bne.n	80049a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800494e:	d107      	bne.n	8004960 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800495e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff f826 	bl	80039b6 <HAL_DMA_GetState>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d017      	beq.n	80049a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004974:	4a33      	ldr	r2, [pc, #204]	@ (8004a44 <I2C_ITError+0x1dc>)
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe ff08 	bl	800379a <HAL_DMA_Abort_IT>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d04d      	beq.n	8004a2c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800499a:	4610      	mov	r0, r2
 800499c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800499e:	e045      	b.n	8004a2c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f851 	bl	8004a48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049a6:	e041      	b.n	8004a2c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d039      	beq.n	8004a24 <I2C_ITError+0x1bc>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b12      	cmp	r3, #18
 80049b4:	d002      	beq.n	80049bc <I2C_ITError+0x154>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b22      	cmp	r3, #34	@ 0x22
 80049ba:	d133      	bne.n	8004a24 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ca:	d107      	bne.n	80049dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fe ffe8 	bl	80039b6 <HAL_DMA_GetState>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d017      	beq.n	8004a1c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f0:	4a14      	ldr	r2, [pc, #80]	@ (8004a44 <I2C_ITError+0x1dc>)
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe feca 	bl	800379a <HAL_DMA_Abort_IT>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d011      	beq.n	8004a30 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a16:	4610      	mov	r0, r2
 8004a18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a1a:	e009      	b.n	8004a30 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f813 	bl	8004a48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a22:	e005      	b.n	8004a30 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f80f 	bl	8004a48 <I2C_TreatErrorCallback>
  }
}
 8004a2a:	e002      	b.n	8004a32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a2c:	bf00      	nop
 8004a2e:	e000      	b.n	8004a32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a30:	bf00      	nop
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	ffff0000 	.word	0xffff0000
 8004a40:	0800411b 	.word	0x0800411b
 8004a44:	08004adf 	.word	0x08004adf

08004a48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b60      	cmp	r3, #96	@ 0x60
 8004a5a:	d10e      	bne.n	8004a7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fb47 	bl	8004106 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a78:	e009      	b.n	8004a8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fb32 	bl	80040f2 <HAL_I2C_ErrorCallback>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d103      	bne.n	8004ab4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d007      	beq.n	8004ad2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	619a      	str	r2, [r3, #24]
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af8:	2200      	movs	r2, #0
 8004afa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b08:	2200      	movs	r2, #0
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ff9b 	bl	8004a48 <I2C_TreatErrorCallback>
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00f      	beq.n	8004b54 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004b3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b48:	2b28      	cmp	r3, #40	@ 0x28
 8004b4a:	d003      	beq.n	8004b54 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004b52:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00f      	beq.n	8004b7e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004b64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b72:	2b28      	cmp	r3, #40	@ 0x28
 8004b74:	d003      	beq.n	8004b7e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004b7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da03      	bge.n	8004b8e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d103      	bne.n	8004b9c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d103      	bne.n	8004baa <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f043 0320 	orr.w	r3, r3, #32
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d103      	bne.n	8004bb8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d138      	bne.n	8004c5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e032      	b.n	8004c60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2224      	movs	r2, #36	@ 0x24
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d139      	bne.n	8004cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e033      	b.n	8004cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	@ 0x24
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e000      	b.n	8004cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
  }
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0c0      	b.n	8004e98 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f008 fc90 	bl	800d650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2203      	movs	r2, #3
 8004d34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 fc47 	bl	80095d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e03e      	b.n	8004dc6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	3311      	adds	r3, #17
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	3310      	adds	r3, #16
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3313      	adds	r3, #19
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	3320      	adds	r3, #32
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	440b      	add	r3, r1
 8004da6:	3324      	adds	r3, #36	@ 0x24
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	440b      	add	r3, r1
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d3bb      	bcc.n	8004d48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	e044      	b.n	8004e60 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dd6:	7bfa      	ldrb	r2, [r7, #15]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	440b      	add	r3, r1
 8004de4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e2e:	7bfa      	ldrb	r2, [r7, #15]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	791b      	ldrb	r3, [r3, #4]
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3b5      	bcc.n	8004dd6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e76:	f004 fbc6 	bl	8009606 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	7a9b      	ldrb	r3, [r3, #10]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d102      	bne.n	8004e96 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 fc0e 	bl	80066b2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PCD_Start+0x16>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e012      	b.n	8004edc <HAL_PCD_Start+0x3c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f004 fb6d 	bl	80095a2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f006 f94b 	bl	800b168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f006 f950 	bl	800b196 <USB_ReadInterrupts>
 8004ef6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fb06 	bl	8005514 <PCD_EP_ISR_Handler>

    return;
 8004f08:	e110      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f26:	b292      	uxth	r2, r2
 8004f28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f008 fc24 	bl	800d77a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8fc 	bl	8005132 <HAL_PCD_SetAddress>

    return;
 8004f3a:	e0f7      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f5e:	e0e5      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f7c:	b292      	uxth	r2, r2
 8004f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f82:	e0d3      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d034      	beq.n	8004ff8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0204 	bic.w	r2, r2, #4
 8004fa0:	b292      	uxth	r2, r2
 8004fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0208 	bic.w	r2, r2, #8
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d107      	bne.n	8004fd8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f008 fdc6 	bl	800db64 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f008 fc07 	bl	800d7ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ff6:	e099      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d027      	beq.n	8005052 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800500a:	b29a      	uxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0208 	orr.w	r2, r2, #8
 8005014:	b292      	uxth	r2, r2
 8005016:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800502c:	b292      	uxth	r2, r2
 800502e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0204 	orr.w	r2, r2, #4
 8005044:	b292      	uxth	r2, r2
 8005046:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f008 fbb4 	bl	800d7b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005050:	e06c      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d040      	beq.n	80050de <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005064:	b29a      	uxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800506e:	b292      	uxth	r2, r2
 8005070:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d12b      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0204 	orr.w	r2, r2, #4
 8005090:	b292      	uxth	r2, r2
 8005092:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0208 	orr.w	r2, r2, #8
 80050a8:	b292      	uxth	r2, r2
 80050aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80050be:	b29b      	uxth	r3, r3
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050cc:	2101      	movs	r1, #1
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f008 fd48 	bl	800db64 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80050d4:	e02a      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f008 fb6e 	bl	800d7b8 <HAL_PCD_SuspendCallback>
    return;
 80050dc:	e026      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00f      	beq.n	8005108 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050fa:	b292      	uxth	r2, r2
 80050fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f008 fb2c 	bl	800d75e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005106:	e011      	b.n	800512c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00c      	beq.n	800512c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005124:	b292      	uxth	r2, r2
 8005126:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800512a:	bf00      	nop
  }
}
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_PCD_SetAddress+0x1a>
 8005148:	2302      	movs	r3, #2
 800514a:	e012      	b.n	8005172 <HAL_PCD_SetAddress+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f005 ffec 	bl	800b140 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	461a      	mov	r2, r3
 8005188:	4603      	mov	r3, r0
 800518a:	70fb      	strb	r3, [r7, #3]
 800518c:	460b      	mov	r3, r1
 800518e:	803b      	strh	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800519c:	2b00      	cmp	r3, #0
 800519e:	da0e      	bge.n	80051be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	3310      	adds	r3, #16
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	705a      	strb	r2, [r3, #1]
 80051bc:	e00e      	b.n	80051dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 0207 	and.w	r2, r3, #7
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80051e8:	883b      	ldrh	r3, [r7, #0]
 80051ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	78ba      	ldrb	r2, [r7, #2]
 80051f6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051f8:	78bb      	ldrb	r3, [r7, #2]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d102      	bne.n	8005204 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_PCD_EP_Open+0x98>
 800520e:	2302      	movs	r3, #2
 8005210:	e00e      	b.n	8005230 <HAL_PCD_EP_Open+0xb6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f004 fa0f 	bl	8009644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800522e:	7afb      	ldrb	r3, [r7, #11]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005248:	2b00      	cmp	r3, #0
 800524a:	da0e      	bge.n	800526a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	f003 0207 	and.w	r2, r3, #7
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	3310      	adds	r3, #16
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	705a      	strb	r2, [r3, #1]
 8005268:	e00e      	b.n	8005288 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	f003 0207 	and.w	r2, r3, #7
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	4413      	add	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_PCD_EP_Close+0x6a>
 800529e:	2302      	movs	r3, #2
 80052a0:	e00e      	b.n	80052c0 <HAL_PCD_EP_Close+0x88>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 feaf 	bl	800a014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	460b      	mov	r3, r1
 80052d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	f003 0207 	and.w	r2, r3, #7
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	b2da      	uxtb	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6979      	ldr	r1, [r7, #20]
 800531a:	4618      	mov	r0, r3
 800531c:	f005 f867 	bl	800a3ee <USB_EPStartXfer>

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 0207 	and.w	r2, r3, #7
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	440b      	add	r3, r1
 8005348:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800534c:	681b      	ldr	r3, [r3, #0]
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	460b      	mov	r3, r1
 8005368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800536a:	7afb      	ldrb	r3, [r7, #11]
 800536c:	f003 0207 	and.w	r2, r3, #7
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	3310      	adds	r3, #16
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2200      	movs	r2, #0
 800539e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2201      	movs	r2, #1
 80053a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a6:	7afb      	ldrb	r3, [r7, #11]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f005 f818 	bl	800a3ee <USB_EPStartXfer>

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	7912      	ldrb	r2, [r2, #4]
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e03e      	b.n	8005464 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da0e      	bge.n	800540c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 0207 	and.w	r2, r3, #7
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	3310      	adds	r3, #16
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	705a      	strb	r2, [r3, #1]
 800540a:	e00c      	b.n	8005426 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_PCD_EP_SetStall+0x7e>
 8005442:	2302      	movs	r3, #2
 8005444:	e00e      	b.n	8005464 <HAL_PCD_EP_SetStall+0x9c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	4618      	mov	r0, r3
 8005456:	f005 fd79 	bl	800af4c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	7912      	ldrb	r2, [r2, #4]
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e040      	b.n	800550c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800548a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548e:	2b00      	cmp	r3, #0
 8005490:	da0e      	bge.n	80054b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	f003 0207 	and.w	r2, r3, #7
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	3310      	adds	r3, #16
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	705a      	strb	r2, [r3, #1]
 80054ae:	e00e      	b.n	80054ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 0207 	and.w	r2, r3, #7
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_PCD_EP_ClrStall+0x82>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e00e      	b.n	800550c <HAL_PCD_EP_ClrStall+0xa0>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f005 fd76 	bl	800afee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b092      	sub	sp, #72	@ 0x48
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800551c:	e333      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005526:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005528:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005534:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 8108 	bne.w	800574e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800553e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d14c      	bne.n	80055e2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005558:	813b      	strh	r3, [r7, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	893b      	ldrh	r3, [r7, #8]
 8005560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3310      	adds	r3, #16
 8005570:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	4413      	add	r3, r2
 800558c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800559a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	441a      	add	r2, r3
 80055a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80055a8:	2100      	movs	r1, #0
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f008 f8bd 	bl	800d72a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7b1b      	ldrb	r3, [r3, #12]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 82e5 	beq.w	8005b86 <PCD_EP_ISR_Handler+0x672>
 80055bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 82e0 	bne.w	8005b86 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7b1b      	ldrb	r3, [r3, #12]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	731a      	strb	r2, [r3, #12]
 80055e0:	e2d1      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055e8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d032      	beq.n	8005662 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4413      	add	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	4413      	add	r3, r2
 8005616:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005622:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800562e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005630:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005634:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005636:	b29b      	uxth	r3, r3
 8005638:	f005 fe00 	bl	800b23c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29a      	uxth	r2, r3
 8005644:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005648:	4013      	ands	r3, r2
 800564a:	817b      	strh	r3, [r7, #10]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	897a      	ldrh	r2, [r7, #10]
 8005652:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005656:	b292      	uxth	r2, r2
 8005658:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f008 f838 	bl	800d6d0 <HAL_PCD_SetupStageCallback>
 8005660:	e291      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005662:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005666:	2b00      	cmp	r3, #0
 8005668:	f280 828d 	bge.w	8005b86 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29a      	uxth	r2, r3
 8005674:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005678:	4013      	ands	r3, r2
 800567a:	81fb      	strh	r3, [r7, #14]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	89fa      	ldrh	r2, [r7, #14]
 8005682:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005686:	b292      	uxth	r2, r2
 8005688:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	4413      	add	r3, r2
 80056a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80056b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <PCD_EP_ISR_Handler+0x1da>
 80056ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d015      	beq.n	80056ee <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c8:	6959      	ldr	r1, [r3, #20]
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f005 fdb2 	bl	800b23c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	441a      	add	r2, r3
 80056e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056e6:	2100      	movs	r1, #0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f008 f803 	bl	800d6f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80056f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 8242 	bne.w	8005b86 <PCD_EP_ISR_Handler+0x672>
 8005702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005704:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800570c:	f000 823b 	beq.w	8005b86 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800571c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005720:	81bb      	strh	r3, [r7, #12]
 8005722:	89bb      	ldrh	r3, [r7, #12]
 8005724:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005728:	81bb      	strh	r3, [r7, #12]
 800572a:	89bb      	ldrh	r3, [r7, #12]
 800572c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005730:	81bb      	strh	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	89bb      	ldrh	r3, [r7, #12]
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
 800574c:	e21b      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005760:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005764:	2b00      	cmp	r3, #0
 8005766:	f280 80f1 	bge.w	800594c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005780:	4013      	ands	r3, r2
 8005782:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005798:	b292      	uxth	r2, r2
 800579a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800579c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	4413      	add	r3, r2
 80057b0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80057b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b4:	7b1b      	ldrb	r3, [r3, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d123      	bne.n	8005802 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80057e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 808b 	beq.w	8005902 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f2:	6959      	ldr	r1, [r3, #20]
 80057f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f6:	88da      	ldrh	r2, [r3, #6]
 80057f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057fc:	f005 fd1e 	bl	800b23c <USB_ReadPMA>
 8005800:	e07f      	b.n	8005902 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005804:	78db      	ldrb	r3, [r3, #3]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d109      	bne.n	800581e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800580a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800580c:	461a      	mov	r2, r3
 800580e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f9c6 	bl	8005ba2 <HAL_PCD_EP_DB_Receive>
 8005816:	4603      	mov	r3, r0
 8005818:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800581c:	e071      	b.n	8005902 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005838:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005856:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d022      	beq.n	80058be <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	4413      	add	r3, r2
 8005892:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80058a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02c      	beq.n	8005902 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ae:	6959      	ldr	r1, [r3, #20]
 80058b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b2:	891a      	ldrh	r2, [r3, #8]
 80058b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058b8:	f005 fcc0 	bl	800b23c <USB_ReadPMA>
 80058bc:	e021      	b.n	8005902 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	4413      	add	r3, r2
 80058d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80058e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f8:	895a      	ldrh	r2, [r3, #10]
 80058fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058fe:	f005 fc9d 	bl	800b23c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800590a:	441a      	add	r2, r3
 800590c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005912:	695a      	ldr	r2, [r3, #20]
 8005914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005918:	441a      	add	r2, r3
 800591a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800591c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800591e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <PCD_EP_ISR_Handler+0x41e>
 8005926:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800592a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d206      	bcs.n	8005940 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f007 fedb 	bl	800d6f4 <HAL_PCD_DataOutStageCallback>
 800593e:	e005      	b.n	800594c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005946:	4618      	mov	r0, r3
 8005948:	f004 fd51 	bl	800a3ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800594c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800594e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8117 	beq.w	8005b86 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005958:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	3310      	adds	r3, #16
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80059a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a6:	78db      	ldrb	r3, [r3, #3]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	f040 80a1 	bne.w	8005af0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	2200      	movs	r2, #0
 80059b2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80059b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b6:	7b1b      	ldrb	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8092 	beq.w	8005ae2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d046      	beq.n	8005a56 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d126      	bne.n	8005a1e <PCD_EP_ISR_Handler+0x50a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	00da      	lsls	r2, r3, #3
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	4413      	add	r3, r2
 80059f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e061      	b.n	8005ae2 <PCD_EP_ISR_Handler+0x5ce>
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d15d      	bne.n	8005ae2 <PCD_EP_ISR_Handler+0x5ce>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	00da      	lsls	r2, r3, #3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2200      	movs	r2, #0
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	e045      	b.n	8005ae2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d126      	bne.n	8005ab2 <PCD_EP_ISR_Handler+0x59e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	4413      	add	r3, r2
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	00da      	lsls	r2, r3, #3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e017      	b.n	8005ae2 <PCD_EP_ISR_Handler+0x5ce>
 8005ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d113      	bne.n	8005ae2 <PCD_EP_ISR_Handler+0x5ce>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac8:	4413      	add	r3, r2
 8005aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	00da      	lsls	r2, r3, #3
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	2200      	movs	r2, #0
 8005ae0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f007 fe1e 	bl	800d72a <HAL_PCD_DataInStageCallback>
 8005aee:	e04a      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005af0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d13f      	bne.n	8005b7a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d906      	bls.n	8005b38 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	e002      	b.n	8005b3e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f007 fdec 	bl	800d72a <HAL_PCD_DataInStageCallback>
 8005b52:	e018      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b5a:	441a      	add	r2, r3
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b66:	441a      	add	r2, r3
 8005b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b6a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 fc3b 	bl	800a3ee <USB_EPStartXfer>
 8005b78:	e005      	b.n	8005b86 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005b7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f917 	bl	8005db4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	b21b      	sxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f6ff acc3 	blt.w	800551e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3748      	adds	r7, #72	@ 0x48
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b088      	sub	sp, #32
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	4613      	mov	r3, r2
 8005bae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d07c      	beq.n	8005cb4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	8b7b      	ldrh	r3, [r7, #26]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d306      	bcc.n	8005bf8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	8b7b      	ldrh	r3, [r7, #26]
 8005bf0:	1ad2      	subs	r2, r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	619a      	str	r2, [r3, #24]
 8005bf6:	e002      	b.n	8005bfe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d123      	bne.n	8005c4e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c20:	833b      	strh	r3, [r7, #24]
 8005c22:	8b3b      	ldrh	r3, [r7, #24]
 8005c24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c28:	833b      	strh	r3, [r7, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	8b3b      	ldrh	r3, [r7, #24]
 8005c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01f      	beq.n	8005c98 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c72:	82fb      	strh	r3, [r7, #22]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	8afb      	ldrh	r3, [r7, #22]
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c98:	8b7b      	ldrh	r3, [r7, #26]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 8085 	beq.w	8005daa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6959      	ldr	r1, [r3, #20]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	891a      	ldrh	r2, [r3, #8]
 8005cac:	8b7b      	ldrh	r3, [r7, #26]
 8005cae:	f005 fac5 	bl	800b23c <USB_ReadPMA>
 8005cb2:	e07a      	b.n	8005daa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	8b7b      	ldrh	r3, [r7, #26]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d306      	bcc.n	8005cf2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	8b7b      	ldrh	r3, [r7, #26]
 8005cea:	1ad2      	subs	r2, r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	619a      	str	r2, [r3, #24]
 8005cf0:	e002      	b.n	8005cf8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d123      	bne.n	8005d48 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	83fb      	strh	r3, [r7, #30]
 8005d1c:	8bfb      	ldrh	r3, [r7, #30]
 8005d1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d22:	83fb      	strh	r3, [r7, #30]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	8bfb      	ldrh	r3, [r7, #30]
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d11f      	bne.n	8005d92 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6c:	83bb      	strh	r3, [r7, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	441a      	add	r2, r3
 8005d7c:	8bbb      	ldrh	r3, [r7, #28]
 8005d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d92:	8b7b      	ldrh	r3, [r7, #26]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6959      	ldr	r1, [r3, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	895a      	ldrh	r2, [r3, #10]
 8005da4:	8b7b      	ldrh	r3, [r7, #26]
 8005da6:	f005 fa49 	bl	800b23c <USB_ReadPMA>
    }
  }

  return count;
 8005daa:	8b7b      	ldrh	r3, [r7, #26]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b0a6      	sub	sp, #152	@ 0x98
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 81f7 	beq.w	80061bc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d907      	bls.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	619a      	str	r2, [r3, #24]
 8005e10:	e002      	b.n	8005e18 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f040 80e1 	bne.w	8005fe4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d126      	bne.n	8005e78 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	4413      	add	r3, r2
 8005e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	00da      	lsls	r2, r3, #3
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	e01a      	b.n	8005eae <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d116      	bne.n	8005eae <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	4413      	add	r3, r2
 8005e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d126      	bne.n	8005f0a <HAL_PCD_EP_DB_Transmit+0x156>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	e017      	b.n	8005f3a <HAL_PCD_EP_DB_Transmit+0x186>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d113      	bne.n	8005f3a <HAL_PCD_EP_DB_Transmit+0x186>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	4413      	add	r3, r2
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	00da      	lsls	r2, r3, #3
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	2200      	movs	r2, #0
 8005f38:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	78db      	ldrb	r3, [r3, #3]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d123      	bne.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5c:	837b      	strh	r3, [r7, #26]
 8005f5e:	8b7b      	ldrh	r3, [r7, #26]
 8005f60:	f083 0320 	eor.w	r3, r3, #32
 8005f64:	837b      	strh	r3, [r7, #26]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	8b7b      	ldrh	r3, [r7, #26]
 8005f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f007 fbca 	bl	800d72a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01f      	beq.n	8005fe0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	833b      	strh	r3, [r7, #24]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	8b3b      	ldrh	r3, [r7, #24]
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e31f      	b.n	8006624 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d021      	beq.n	8006032 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006008:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006026:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800602a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 82ca 	bne.w	80065d2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006046:	441a      	add	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006054:	441a      	add	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6a1a      	ldr	r2, [r3, #32]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	d309      	bcc.n	800607a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006072:	1ad2      	subs	r2, r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	621a      	str	r2, [r3, #32]
 8006078:	e015      	b.n	80060a6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006082:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006086:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006090:	e009      	b.n	80060a6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d15f      	bne.n	800616e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c2:	4413      	add	r3, r2
 80060c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	00da      	lsls	r2, r3, #3
 80060cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <HAL_PCD_EP_DB_Transmit+0x34e>
 80060ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e051      	b.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006104:	2b3e      	cmp	r3, #62	@ 0x3e
 8006106:	d816      	bhi.n	8006136 <HAL_PCD_EP_DB_Transmit+0x382>
 8006108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	653b      	str	r3, [r7, #80]	@ 0x50
 800610e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_PCD_EP_DB_Transmit+0x36a>
 8006118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800611a:	3301      	adds	r3, #1
 800611c:	653b      	str	r3, [r7, #80]	@ 0x50
 800611e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29a      	uxth	r2, r3
 8006124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	029b      	lsls	r3, r3, #10
 800612a:	b29b      	uxth	r3, r3
 800612c:	4313      	orrs	r3, r2
 800612e:	b29a      	uxth	r2, r3
 8006130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	e037      	b.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	653b      	str	r3, [r7, #80]	@ 0x50
 800613c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <HAL_PCD_EP_DB_Transmit+0x398>
 8006146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006148:	3b01      	subs	r3, #1
 800614a:	653b      	str	r3, [r7, #80]	@ 0x50
 800614c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29a      	uxth	r2, r3
 8006152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	b29b      	uxth	r3, r3
 800615a:	4313      	orrs	r3, r2
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006166:	b29a      	uxth	r2, r3
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e01b      	b.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d117      	bne.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006184:	b29b      	uxth	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618a:	4413      	add	r3, r2
 800618c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	00da      	lsls	r2, r3, #3
 8006194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006196:	4413      	add	r3, r2
 8006198:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800619c:	647b      	str	r3, [r7, #68]	@ 0x44
 800619e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6959      	ldr	r1, [r3, #20]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	891a      	ldrh	r2, [r3, #8]
 80061b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f004 fffe 	bl	800b1b6 <USB_WritePMA>
 80061ba:	e20a      	b.n	80065d2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4413      	add	r3, r2
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d307      	bcc.n	8006200 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	619a      	str	r2, [r3, #24]
 80061fe:	e002      	b.n	8006206 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2200      	movs	r2, #0
 8006204:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80f6 	bne.w	80063fc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d126      	bne.n	8006266 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	677b      	str	r3, [r7, #116]	@ 0x74
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006226:	b29b      	uxth	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800622c:	4413      	add	r3, r2
 800622e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	00da      	lsls	r2, r3, #3
 8006236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006238:	4413      	add	r3, r2
 800623a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800623e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800624a:	b29a      	uxth	r2, r3
 800624c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625e:	b29a      	uxth	r2, r3
 8006260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e01a      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d116      	bne.n	800629c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006282:	4413      	add	r3, r2
 8006284:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	00da      	lsls	r2, r3, #3
 800628c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800628e:	4413      	add	r3, r2
 8006290:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006296:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006298:	2200      	movs	r2, #0
 800629a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d12f      	bne.n	800630c <HAL_PCD_EP_DB_Transmit+0x558>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062bc:	b29b      	uxth	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c4:	4413      	add	r3, r2
 80062c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	00da      	lsls	r2, r3, #3
 80062d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	b29a      	uxth	r2, r3
 8006304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e01c      	b.n	8006346 <HAL_PCD_EP_DB_Transmit+0x592>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d118      	bne.n	8006346 <HAL_PCD_EP_DB_Transmit+0x592>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631c:	b29b      	uxth	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006324:	4413      	add	r3, r2
 8006326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	00da      	lsls	r2, r3, #3
 8006330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006334:	4413      	add	r3, r2
 8006336:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800633a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800633e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006342:	2200      	movs	r2, #0
 8006344:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	78db      	ldrb	r3, [r3, #3]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d127      	bne.n	800639e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006368:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800636c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006370:	f083 0320 	eor.w	r3, r3, #32
 8006374:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f007 f9c0 	bl	800d72a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d121      	bne.n	80063f8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ce:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e113      	b.n	8006624 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d121      	bne.n	800644a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800641c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006420:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800643e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 80be 	bne.w	80065d2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800645e:	441a      	add	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800646c:	441a      	add	r2, r3
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d309      	bcc.n	8006492 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	621a      	str	r2, [r3, #32]
 8006490:	e015      	b.n	80064be <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d107      	bne.n	80064aa <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800649a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800649e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064a8:	e009      	b.n	80064be <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d15f      	bne.n	800658c <HAL_PCD_EP_DB_Transmit+0x7d8>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064e0:	4413      	add	r3, r2
 80064e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	00da      	lsls	r2, r3, #3
 80064ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ec:	4413      	add	r3, r2
 80064ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80064f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_PCD_EP_DB_Transmit+0x76c>
 800650a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006518:	b29a      	uxth	r2, r3
 800651a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e04e      	b.n	80065be <HAL_PCD_EP_DB_Transmit+0x80a>
 8006520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006522:	2b3e      	cmp	r3, #62	@ 0x3e
 8006524:	d816      	bhi.n	8006554 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	663b      	str	r3, [r7, #96]	@ 0x60
 800652c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_PCD_EP_DB_Transmit+0x788>
 8006536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006538:	3301      	adds	r3, #1
 800653a:	663b      	str	r3, [r7, #96]	@ 0x60
 800653c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29a      	uxth	r2, r3
 8006542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29b      	uxth	r3, r3
 800654a:	4313      	orrs	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e034      	b.n	80065be <HAL_PCD_EP_DB_Transmit+0x80a>
 8006554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	663b      	str	r3, [r7, #96]	@ 0x60
 800655a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006566:	3b01      	subs	r3, #1
 8006568:	663b      	str	r3, [r7, #96]	@ 0x60
 800656a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29a      	uxth	r2, r3
 8006570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006572:	b29b      	uxth	r3, r3
 8006574:	029b      	lsls	r3, r3, #10
 8006576:	b29b      	uxth	r3, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006584:	b29a      	uxth	r2, r3
 8006586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	e018      	b.n	80065be <HAL_PCD_EP_DB_Transmit+0x80a>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d114      	bne.n	80065be <HAL_PCD_EP_DB_Transmit+0x80a>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800659c:	b29b      	uxth	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065a2:	4413      	add	r3, r2
 80065a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	00da      	lsls	r2, r3, #3
 80065ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065ae:	4413      	add	r3, r2
 80065b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6959      	ldr	r1, [r3, #20]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	895a      	ldrh	r2, [r3, #10]
 80065ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f004 fdf2 	bl	800b1b6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ec:	82fb      	strh	r3, [r7, #22]
 80065ee:	8afb      	ldrh	r3, [r7, #22]
 80065f0:	f083 0310 	eor.w	r3, r3, #16
 80065f4:	82fb      	strh	r3, [r7, #22]
 80065f6:	8afb      	ldrh	r3, [r7, #22]
 80065f8:	f083 0320 	eor.w	r3, r3, #32
 80065fc:	82fb      	strh	r3, [r7, #22]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8afb      	ldrh	r3, [r7, #22]
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3798      	adds	r7, #152	@ 0x98
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	817b      	strh	r3, [r7, #10]
 800663a:	4613      	mov	r3, r2
 800663c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	f003 0207 	and.w	r2, r3, #7
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	3310      	adds	r3, #16
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e009      	b.n	8006676 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006662:	897a      	ldrh	r2, [r7, #10]
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006676:	893b      	ldrh	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d107      	bne.n	800668c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2200      	movs	r2, #0
 8006680:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	b29a      	uxth	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	80da      	strh	r2, [r3, #6]
 800668a:	e00b      	b.n	80066a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2201      	movs	r2, #1
 8006690:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	b29a      	uxth	r2, r3
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	b29a      	uxth	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800670c:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a04      	ldr	r2, [pc, #16]	@ (8006724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006716:	6013      	str	r3, [r2, #0]
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	58000400 	.word	0x58000400

08006728 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800672c:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <HAL_PWREx_GetVoltageRange+0x18>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	58000400 	.word	0x58000400

08006744 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006748:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a04      	ldr	r2, [pc, #16]	@ (8006760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800674e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006752:	6053      	str	r3, [r2, #4]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	58000400 	.word	0x58000400

08006764 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006776:	d101      	bne.n	800677c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800678c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679a:	6013      	str	r3, [r2, #0]
}
 800679c:	bf00      	nop
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80067a6:	b480      	push	{r7}
 80067a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80067aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b8:	6013      	str	r3, [r2, #0]
}
 80067ba:	bf00      	nop
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80067c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d6:	d101      	bne.n	80067dc <LL_RCC_HSE_IsReady+0x18>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <LL_RCC_HSE_IsReady+0x1a>
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80067ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fa:	6013      	str	r3, [r2, #0]
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006806:	b480      	push	{r7}
 8006808:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006818:	6013      	str	r3, [r2, #0]
}
 800681a:	bf00      	nop
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006836:	d101      	bne.n	800683c <LL_RCC_HSI_IsReady+0x18>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <LL_RCC_HSI_IsReady+0x1a>
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006862:	4313      	orrs	r3, r2
 8006864:	604b      	str	r3, [r1, #4]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006872:	b480      	push	{r7}
 8006874:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800687a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800687e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800688a:	bf00      	nop
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800689c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80068ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d101      	bne.n	80068ce <LL_RCC_HSI48_IsReady+0x18>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <LL_RCC_HSI48_IsReady+0x1a>
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80068da:	b480      	push	{r7}
 80068dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80068f2:	bf00      	nop
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800691e:	b480      	push	{r7}
 8006920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800692e:	f043 0304 	orr.w	r3, r3, #4
 8006932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006936:	bf00      	nop
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006950:	f023 0304 	bic.w	r3, r3, #4
 8006954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006958:	bf00      	nop
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006962:	b480      	push	{r7}
 8006964:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b02      	cmp	r3, #2
 8006974:	d101      	bne.n	800697a <LL_RCC_LSE_IsReady+0x18>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <LL_RCC_LSE_IsReady+0x1a>
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006986:	b480      	push	{r7}
 8006988:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800698a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800698e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006992:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800699e:	bf00      	nop
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80069ca:	b480      	push	{r7}
 80069cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d101      	bne.n	80069e2 <LL_RCC_LSI1_IsReady+0x18>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <LL_RCC_LSI1_IsReady+0x1a>
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80069ee:	b480      	push	{r7}
 80069f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80069f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069fe:	f043 0304 	orr.w	r3, r3, #4
 8006a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006a06:	bf00      	nop
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006a32:	b480      	push	{r7}
 8006a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d101      	bne.n	8006a4a <LL_RCC_LSI2_IsReady+0x18>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <LL_RCC_LSI2_IsReady+0x1a>
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6013      	str	r3, [r2, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	6013      	str	r3, [r2, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d101      	bne.n	8006ad6 <LL_RCC_MSI_IsReady+0x16>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <LL_RCC_MSI_IsReady+0x18>
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006af4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006b20:	d901      	bls.n	8006b26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006b22:	23b0      	movs	r3, #176	@ 0xb0
 8006b24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006b26:	687b      	ldr	r3, [r7, #4]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	604b      	str	r3, [r1, #4]
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f023 0203 	bic.w	r2, r3, #3
 8006b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006b86:	b480      	push	{r7}
 8006b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 030c 	and.w	r3, r3, #12
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006bd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c02:	f023 020f 	bic.w	r2, r3, #15
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	091b      	lsrs	r3, r3, #4
 8006c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	608b      	str	r3, [r1, #8]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ce6:	6013      	str	r3, [r2, #0]
}
 8006ce8:	bf00      	nop
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d04:	6013      	str	r3, [r2, #0]
}
 8006d06:	bf00      	nop
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d22:	d101      	bne.n	8006d28 <LL_RCC_PLL_IsReady+0x18>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <LL_RCC_PLL_IsReady+0x1a>
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0303 	and.w	r3, r3, #3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006d96:	b480      	push	{r7}
 8006d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da8:	d101      	bne.n	8006dae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dce:	d101      	bne.n	8006dd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df4:	d101      	bne.n	8006dfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006e06:	b480      	push	{r7}
 8006e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e18:	d101      	bne.n	8006e1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e3c:	d101      	bne.n	8006e42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b08d      	sub	sp, #52	@ 0x34
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e363      	b.n	800752a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 808d 	beq.w	8006f8a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e70:	f7ff fe89 	bl	8006b86 <LL_RCC_GetSysClkSource>
 8006e74:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e76:	f7ff ff82 	bl	8006d7e <LL_RCC_PLL_GetMainSource>
 8006e7a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <HAL_RCC_OscConfig+0x3e>
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	2b0c      	cmp	r3, #12
 8006e86:	d147      	bne.n	8006f18 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d144      	bne.n	8006f18 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e347      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006e9e:	f7ff fe34 	bl	8006b0a <LL_RCC_MSI_GetRange>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	d914      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fd2f 	bl	8007910 <RCC_SetFlashLatencyFromMSIRange>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e336      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fe0e 	bl	8006ae2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fe32 	bl	8006b34 <LL_RCC_MSI_SetCalibTrimming>
 8006ed0:	e013      	b.n	8006efa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fe03 	bl	8006ae2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fe27 	bl	8006b34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fd10 	bl	8007910 <RCC_SetFlashLatencyFromMSIRange>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e317      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006efa:	f000 fcc9 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4aa4      	ldr	r2, [pc, #656]	@ (8007194 <HAL_RCC_OscConfig+0x344>)
 8006f02:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f04:	4ba4      	ldr	r3, [pc, #656]	@ (8007198 <HAL_RCC_OscConfig+0x348>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fa feed 	bl	8001ce8 <HAL_InitTick>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d039      	beq.n	8006f88 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e308      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01e      	beq.n	8006f5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f20:	f7ff fdb0 	bl	8006a84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f24:	f7fa ff2e 	bl	8001d84 <HAL_GetTick>
 8006f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f2c:	f7fa ff2a 	bl	8001d84 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e2f5      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f3e:	f7ff fdbf 	bl	8006ac0 <LL_RCC_MSI_IsReady>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f1      	beq.n	8006f2c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff fdc8 	bl	8006ae2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fdec 	bl	8006b34 <LL_RCC_MSI_SetCalibTrimming>
 8006f5c:	e015      	b.n	8006f8a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f5e:	f7ff fda0 	bl	8006aa2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f62:	f7fa ff0f 	bl	8001d84 <HAL_GetTick>
 8006f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f6a:	f7fa ff0b 	bl	8001d84 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e2d6      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f7c:	f7ff fda0 	bl	8006ac0 <LL_RCC_MSI_IsReady>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f1      	bne.n	8006f6a <HAL_RCC_OscConfig+0x11a>
 8006f86:	e000      	b.n	8006f8a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d047      	beq.n	8007026 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f96:	f7ff fdf6 	bl	8006b86 <LL_RCC_GetSysClkSource>
 8006f9a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f9c:	f7ff feef 	bl	8006d7e <LL_RCC_PLL_GetMainSource>
 8006fa0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x164>
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b0c      	cmp	r3, #12
 8006fac:	d108      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d134      	bne.n	8007026 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e2b4      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x180>
 8006fca:	f7ff fbdd 	bl	8006788 <LL_RCC_HSE_Enable>
 8006fce:	e001      	b.n	8006fd4 <HAL_RCC_OscConfig+0x184>
 8006fd0:	f7ff fbe9 	bl	80067a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d012      	beq.n	8007002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fa fed2 	bl	8001d84 <HAL_GetTick>
 8006fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe4:	f7fa fece 	bl	8001d84 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b64      	cmp	r3, #100	@ 0x64
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e299      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006ff6:	f7ff fbe5 	bl	80067c4 <LL_RCC_HSE_IsReady>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f1      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x194>
 8007000:	e011      	b.n	8007026 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007002:	f7fa febf 	bl	8001d84 <HAL_GetTick>
 8007006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007008:	e008      	b.n	800701c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800700a:	f7fa febb 	bl	8001d84 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b64      	cmp	r3, #100	@ 0x64
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e286      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800701c:	f7ff fbd2 	bl	80067c4 <LL_RCC_HSE_IsReady>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f1      	bne.n	800700a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04c      	beq.n	80070cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007032:	f7ff fda8 	bl	8006b86 <LL_RCC_GetSysClkSource>
 8007036:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007038:	f7ff fea1 	bl	8006d7e <LL_RCC_PLL_GetMainSource>
 800703c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b04      	cmp	r3, #4
 8007042:	d005      	beq.n	8007050 <HAL_RCC_OscConfig+0x200>
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b0c      	cmp	r3, #12
 8007048:	d10e      	bne.n	8007068 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d10b      	bne.n	8007068 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e266      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fbf1 	bl	8006848 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007066:	e031      	b.n	80070cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d019      	beq.n	80070a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007070:	f7ff fbba 	bl	80067e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fa fe86 	bl	8001d84 <HAL_GetTick>
 8007078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800707c:	f7fa fe82 	bl	8001d84 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e24d      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800708e:	f7ff fbc9 	bl	8006824 <LL_RCC_HSI_IsReady>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f1      	beq.n	800707c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff fbd3 	bl	8006848 <LL_RCC_HSI_SetCalibTrimming>
 80070a2:	e013      	b.n	80070cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a4:	f7ff fbaf 	bl	8006806 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fa fe6c 	bl	8001d84 <HAL_GetTick>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b0:	f7fa fe68 	bl	8001d84 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e233      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80070c2:	f7ff fbaf 	bl	8006824 <LL_RCC_HSI_IsReady>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f1      	bne.n	80070b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 80a3 	beq.w	800722c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d076      	beq.n	80071dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d046      	beq.n	8007188 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80070fa:	f7ff fc66 	bl	80069ca <LL_RCC_LSI1_IsReady>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d113      	bne.n	800712c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007104:	f7ff fc3f 	bl	8006986 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007108:	f7fa fe3c 	bl	8001d84 <HAL_GetTick>
 800710c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007110:	f7fa fe38 	bl	8001d84 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e203      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007122:	f7ff fc52 	bl	80069ca <LL_RCC_LSI1_IsReady>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f1      	beq.n	8007110 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800712c:	f7ff fc5f 	bl	80069ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fa fe28 	bl	8001d84 <HAL_GetTick>
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007138:	f7fa fe24 	bl	8001d84 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e1ef      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800714a:	f7ff fc72 	bl	8006a32 <LL_RCC_LSI2_IsReady>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f1      	beq.n	8007138 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fc7c 	bl	8006a56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800715e:	f7ff fc23 	bl	80069a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007162:	f7fa fe0f 	bl	8001d84 <HAL_GetTick>
 8007166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007168:	e008      	b.n	800717c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800716a:	f7fa fe0b 	bl	8001d84 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e1d6      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800717c:	f7ff fc25 	bl	80069ca <LL_RCC_LSI1_IsReady>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f1      	bne.n	800716a <HAL_RCC_OscConfig+0x31a>
 8007186:	e051      	b.n	800722c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007188:	f7ff fbfd 	bl	8006986 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fa fdfa 	bl	8001d84 <HAL_GetTick>
 8007190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007192:	e00c      	b.n	80071ae <HAL_RCC_OscConfig+0x35e>
 8007194:	20000010 	.word	0x20000010
 8007198:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800719c:	f7fa fdf2 	bl	8001d84 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e1bd      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80071ae:	f7ff fc0c 	bl	80069ca <LL_RCC_LSI1_IsReady>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f1      	beq.n	800719c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80071b8:	f7ff fc2a 	bl	8006a10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80071be:	f7fa fde1 	bl	8001d84 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e1ac      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80071d0:	f7ff fc2f 	bl	8006a32 <LL_RCC_LSI2_IsReady>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f1      	bne.n	80071be <HAL_RCC_OscConfig+0x36e>
 80071da:	e027      	b.n	800722c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80071dc:	f7ff fc18 	bl	8006a10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fa fdd0 	bl	8001d84 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80071e8:	f7fa fdcc 	bl	8001d84 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e197      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80071fa:	f7ff fc1a 	bl	8006a32 <LL_RCC_LSI2_IsReady>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f1      	bne.n	80071e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007204:	f7ff fbd0 	bl	80069a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fa fdbc 	bl	8001d84 <HAL_GetTick>
 800720c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007210:	f7fa fdb8 	bl	8001d84 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e183      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007222:	f7ff fbd2 	bl	80069ca <LL_RCC_LSI1_IsReady>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f1      	bne.n	8007210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d05b      	beq.n	80072f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007238:	4ba7      	ldr	r3, [pc, #668]	@ (80074d8 <HAL_RCC_OscConfig+0x688>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d114      	bne.n	800726e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007244:	f7ff fa60 	bl	8006708 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007248:	f7fa fd9c 	bl	8001d84 <HAL_GetTick>
 800724c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007250:	f7fa fd98 	bl	8001d84 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e163      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007262:	4b9d      	ldr	r3, [pc, #628]	@ (80074d8 <HAL_RCC_OscConfig+0x688>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d102      	bne.n	800727c <HAL_RCC_OscConfig+0x42c>
 8007276:	f7ff fb30 	bl	80068da <LL_RCC_LSE_Enable>
 800727a:	e00c      	b.n	8007296 <HAL_RCC_OscConfig+0x446>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b05      	cmp	r3, #5
 8007282:	d104      	bne.n	800728e <HAL_RCC_OscConfig+0x43e>
 8007284:	f7ff fb4b 	bl	800691e <LL_RCC_LSE_EnableBypass>
 8007288:	f7ff fb27 	bl	80068da <LL_RCC_LSE_Enable>
 800728c:	e003      	b.n	8007296 <HAL_RCC_OscConfig+0x446>
 800728e:	f7ff fb35 	bl	80068fc <LL_RCC_LSE_Disable>
 8007292:	f7ff fb55 	bl	8006940 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d014      	beq.n	80072c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fa fd71 	bl	8001d84 <HAL_GetTick>
 80072a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fa fd6d 	bl	8001d84 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e136      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80072bc:	f7ff fb51 	bl	8006962 <LL_RCC_LSE_IsReady>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0ef      	beq.n	80072a6 <HAL_RCC_OscConfig+0x456>
 80072c6:	e013      	b.n	80072f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c8:	f7fa fd5c 	bl	8001d84 <HAL_GetTick>
 80072cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80072ce:	e00a      	b.n	80072e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d0:	f7fa fd58 	bl	8001d84 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e121      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80072e6:	f7ff fb3c 	bl	8006962 <LL_RCC_LSE_IsReady>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1ef      	bne.n	80072d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02c      	beq.n	8007356 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d014      	beq.n	800732e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007304:	f7ff fab5 	bl	8006872 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007308:	f7fa fd3c 	bl	8001d84 <HAL_GetTick>
 800730c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007310:	f7fa fd38 	bl	8001d84 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e103      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007322:	f7ff fac8 	bl	80068b6 <LL_RCC_HSI48_IsReady>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0f1      	beq.n	8007310 <HAL_RCC_OscConfig+0x4c0>
 800732c:	e013      	b.n	8007356 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800732e:	f7ff fab1 	bl	8006894 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007332:	f7fa fd27 	bl	8001d84 <HAL_GetTick>
 8007336:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800733a:	f7fa fd23 	bl	8001d84 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0ee      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800734c:	f7ff fab3 	bl	80068b6 <LL_RCC_HSI48_IsReady>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f1      	bne.n	800733a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80e4 	beq.w	8007528 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007360:	f7ff fc11 	bl	8006b86 <LL_RCC_GetSysClkSource>
 8007364:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007372:	2b02      	cmp	r3, #2
 8007374:	f040 80b4 	bne.w	80074e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0203 	and.w	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007382:	429a      	cmp	r2, r3
 8007384:	d123      	bne.n	80073ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007390:	429a      	cmp	r2, r3
 8007392:	d11c      	bne.n	80073ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d114      	bne.n	80073ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d10d      	bne.n	80073ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073bc:	429a      	cmp	r2, r3
 80073be:	d106      	bne.n	80073ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d05d      	beq.n	800748a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	d058      	beq.n	8007486 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80073d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e0a1      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80073e6:	f7ff fc84 	bl	8006cf2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073ea:	f7fa fccb 	bl	8001d84 <HAL_GetTick>
 80073ee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f2:	f7fa fcc7 	bl	8001d84 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e092      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1ef      	bne.n	80073f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	4b30      	ldr	r3, [pc, #192]	@ (80074dc <HAL_RCC_OscConfig+0x68c>)
 800741a:	4013      	ands	r3, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007424:	4311      	orrs	r1, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800742a:	0212      	lsls	r2, r2, #8
 800742c:	4311      	orrs	r1, r2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007432:	4311      	orrs	r1, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007438:	4311      	orrs	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800743e:	430a      	orrs	r2, r1
 8007440:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007444:	4313      	orrs	r3, r2
 8007446:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007448:	f7ff fc44 	bl	8006cd4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800745a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800745c:	f7fa fc92 	bl	8001d84 <HAL_GetTick>
 8007460:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007464:	f7fa fc8e 	bl	8001d84 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e059      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ef      	beq.n	8007464 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007484:	e050      	b.n	8007528 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e04f      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800748a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d147      	bne.n	8007528 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007498:	f7ff fc1c 	bl	8006cd4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800749c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80074ac:	f7fa fc6a 	bl	8001d84 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fa fc66 	bl	8001d84 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e031      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0ef      	beq.n	80074b4 <HAL_RCC_OscConfig+0x664>
 80074d4:	e028      	b.n	8007528 <HAL_RCC_OscConfig+0x6d8>
 80074d6:	bf00      	nop
 80074d8:	58000400 	.word	0x58000400
 80074dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	d01e      	beq.n	8007524 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e6:	f7ff fc04 	bl	8006cf2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ea:	f7fa fc4b 	bl	8001d84 <HAL_GetTick>
 80074ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f2:	f7fa fc47 	bl	8001d84 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e012      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1ef      	bne.n	80074f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800751c:	4b05      	ldr	r3, [pc, #20]	@ (8007534 <HAL_RCC_OscConfig+0x6e4>)
 800751e:	4013      	ands	r3, r2
 8007520:	60cb      	str	r3, [r1, #12]
 8007522:	e001      	b.n	8007528 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3734      	adds	r7, #52	@ 0x34
 800752e:	46bd      	mov	sp, r7
 8007530:	bd90      	pop	{r4, r7, pc}
 8007532:	bf00      	nop
 8007534:	eefefffc 	.word	0xeefefffc

08007538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e12d      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800754c:	4b98      	ldr	r3, [pc, #608]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d91b      	bls.n	8007592 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800755a:	4b95      	ldr	r3, [pc, #596]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f023 0207 	bic.w	r2, r3, #7
 8007562:	4993      	ldr	r1, [pc, #588]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	4313      	orrs	r3, r2
 8007568:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756a:	f7fa fc0b 	bl	8001d84 <HAL_GetTick>
 800756e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007570:	e008      	b.n	8007584 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007572:	f7fa fc07 	bl	8001d84 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e111      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007584:	4b8a      	ldr	r3, [pc, #552]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d1ef      	bne.n	8007572 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fafb 	bl	8006b9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075a8:	f7fa fbec 	bl	8001d84 <HAL_GetTick>
 80075ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075b0:	f7fa fbe8 	bl	8001d84 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e0f2      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075c2:	f7ff fbe8 	bl	8006d96 <LL_RCC_IsActiveFlag_HPRE>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f1      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d016      	beq.n	8007606 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff faf2 	bl	8006bc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075e2:	f7fa fbcf 	bl	8001d84 <HAL_GetTick>
 80075e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075ea:	f7fa fbcb 	bl	8001d84 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e0d5      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80075fc:	f7ff fbdd 	bl	8006dba <LL_RCC_IsActiveFlag_C2HPRE>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f1      	beq.n	80075ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d016      	beq.n	8007640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff faeb 	bl	8006bf2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800761c:	f7fa fbb2 	bl	8001d84 <HAL_GetTick>
 8007620:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007622:	e008      	b.n	8007636 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007624:	f7fa fbae 	bl	8001d84 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e0b8      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007636:	f7ff fbd3 	bl	8006de0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0f1      	beq.n	8007624 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d016      	beq.n	800767a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fae5 	bl	8006c20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007656:	f7fa fb95 	bl	8001d84 <HAL_GetTick>
 800765a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800765c:	e008      	b.n	8007670 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800765e:	f7fa fb91 	bl	8001d84 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e09b      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007670:	f7ff fbc9 	bl	8006e06 <LL_RCC_IsActiveFlag_PPRE1>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f1      	beq.n	800765e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff fadb 	bl	8006c48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007692:	f7fa fb77 	bl	8001d84 <HAL_GetTick>
 8007696:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007698:	e008      	b.n	80076ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800769a:	f7fa fb73 	bl	8001d84 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e07d      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80076ac:	f7ff fbbd 	bl	8006e2a <LL_RCC_IsActiveFlag_PPRE2>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f1      	beq.n	800769a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d043      	beq.n	800774a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d106      	bne.n	80076d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80076ca:	f7ff f87b 	bl	80067c4 <LL_RCC_HSE_IsReady>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d11e      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e067      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d106      	bne.n	80076ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80076e0:	f7ff fb16 	bl	8006d10 <LL_RCC_PLL_IsReady>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d113      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e05c      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80076f6:	f7ff f9e3 	bl	8006ac0 <LL_RCC_MSI_IsReady>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d108      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e051      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007704:	f7ff f88e 	bl	8006824 <LL_RCC_HSI_IsReady>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e04a      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fa21 	bl	8006b5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800771c:	f7fa fb32 	bl	8001d84 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007722:	e00a      	b.n	800773a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007724:	f7fa fb2e 	bl	8001d84 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007732:	4293      	cmp	r3, r2
 8007734:	d901      	bls.n	800773a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e036      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773a:	f7ff fa24 	bl	8006b86 <LL_RCC_GetSysClkSource>
 800773e:	4602      	mov	r2, r0
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	429a      	cmp	r2, r3
 8007748:	d1ec      	bne.n	8007724 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800774a:	4b19      	ldr	r3, [pc, #100]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d21b      	bcs.n	8007790 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007758:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f023 0207 	bic.w	r2, r3, #7
 8007760:	4913      	ldr	r1, [pc, #76]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	4313      	orrs	r3, r2
 8007766:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007768:	f7fa fb0c 	bl	8001d84 <HAL_GetTick>
 800776c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800776e:	e008      	b.n	8007782 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007770:	f7fa fb08 	bl	8001d84 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e012      	b.n	80077a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <HAL_RCC_ClockConfig+0x278>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d1ef      	bne.n	8007770 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007790:	f000 f87e 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 8007794:	4603      	mov	r3, r0
 8007796:	4a07      	ldr	r2, [pc, #28]	@ (80077b4 <HAL_RCC_ClockConfig+0x27c>)
 8007798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800779a:	f7fa faff 	bl	8001d9c <HAL_GetTickPrio>
 800779e:	4603      	mov	r3, r0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa faa1 	bl	8001ce8 <HAL_InitTick>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	58004000 	.word	0x58004000
 80077b4:	20000010 	.word	0x20000010

080077b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077be:	f7ff f9e2 	bl	8006b86 <LL_RCC_GetSysClkSource>
 80077c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80077ca:	f7ff f99e 	bl	8006b0a <LL_RCC_MSI_GetRange>
 80077ce:	4603      	mov	r3, r0
 80077d0:	091b      	lsrs	r3, r3, #4
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007884 <HAL_RCC_GetSysClockFreq+0xcc>)
 80077d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	e04b      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d102      	bne.n	80077ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077e6:	4b28      	ldr	r3, [pc, #160]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xd0>)
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e045      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d10a      	bne.n	8007808 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80077f2:	f7fe ffb7 	bl	8006764 <LL_RCC_HSE_IsEnabledDiv2>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d102      	bne.n	8007802 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80077fc:	4b22      	ldr	r3, [pc, #136]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xd0>)
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e03a      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007802:	4b22      	ldr	r3, [pc, #136]	@ (800788c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e037      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007808:	f7ff fab9 	bl	8006d7e <LL_RCC_PLL_GetMainSource>
 800780c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d003      	beq.n	800781c <HAL_RCC_GetSysClockFreq+0x64>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d003      	beq.n	8007822 <HAL_RCC_GetSysClockFreq+0x6a>
 800781a:	e00d      	b.n	8007838 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800781c:	4b1a      	ldr	r3, [pc, #104]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xd0>)
 800781e:	60bb      	str	r3, [r7, #8]
        break;
 8007820:	e015      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007822:	f7fe ff9f 	bl	8006764 <LL_RCC_HSE_IsEnabledDiv2>
 8007826:	4603      	mov	r3, r0
 8007828:	2b01      	cmp	r3, #1
 800782a:	d102      	bne.n	8007832 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800782c:	4b16      	ldr	r3, [pc, #88]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xd0>)
 800782e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007830:	e00d      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007832:	4b16      	ldr	r3, [pc, #88]	@ (800788c <HAL_RCC_GetSysClockFreq+0xd4>)
 8007834:	60bb      	str	r3, [r7, #8]
        break;
 8007836:	e00a      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007838:	f7ff f967 	bl	8006b0a <LL_RCC_MSI_GetRange>
 800783c:	4603      	mov	r3, r0
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	4a0f      	ldr	r2, [pc, #60]	@ (8007884 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784a:	60bb      	str	r3, [r7, #8]
        break;
 800784c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800784e:	f7ff fa71 	bl	8006d34 <LL_RCC_PLL_GetN>
 8007852:	4602      	mov	r2, r0
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	fb03 f402 	mul.w	r4, r3, r2
 800785a:	f7ff fa84 	bl	8006d66 <LL_RCC_PLL_GetDivider>
 800785e:	4603      	mov	r3, r0
 8007860:	091b      	lsrs	r3, r3, #4
 8007862:	3301      	adds	r3, #1
 8007864:	fbb4 f4f3 	udiv	r4, r4, r3
 8007868:	f7ff fa71 	bl	8006d4e <LL_RCC_PLL_GetR>
 800786c:	4603      	mov	r3, r0
 800786e:	0f5b      	lsrs	r3, r3, #29
 8007870:	3301      	adds	r3, #1
 8007872:	fbb4 f3f3 	udiv	r3, r4, r3
 8007876:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007878:	68fb      	ldr	r3, [r7, #12]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	bd90      	pop	{r4, r7, pc}
 8007882:	bf00      	nop
 8007884:	0801072c 	.word	0x0801072c
 8007888:	00f42400 	.word	0x00f42400
 800788c:	01e84800 	.word	0x01e84800

08007890 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007890:	b598      	push	{r3, r4, r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007894:	f7ff ff90 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8007898:	4604      	mov	r4, r0
 800789a:	f7ff f9e9 	bl	8006c70 <LL_RCC_GetAHBPrescaler>
 800789e:	4603      	mov	r3, r0
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	4a03      	ldr	r2, [pc, #12]	@ (80078b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80078a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	bd98      	pop	{r3, r4, r7, pc}
 80078b4:	080106cc 	.word	0x080106cc

080078b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b8:	b598      	push	{r3, r4, r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80078bc:	f7ff ffe8 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 80078c0:	4604      	mov	r4, r0
 80078c2:	f7ff f9ef 	bl	8006ca4 <LL_RCC_GetAPB1Prescaler>
 80078c6:	4603      	mov	r3, r0
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	4a04      	ldr	r2, [pc, #16]	@ (80078e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80078dc:	4618      	mov	r0, r3
 80078de:	bd98      	pop	{r3, r4, r7, pc}
 80078e0:	0801070c 	.word	0x0801070c

080078e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e4:	b598      	push	{r3, r4, r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80078e8:	f7ff ffd2 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 80078ec:	4604      	mov	r4, r0
 80078ee:	f7ff f9e5 	bl	8006cbc <LL_RCC_GetAPB2Prescaler>
 80078f2:	4603      	mov	r3, r0
 80078f4:	0adb      	lsrs	r3, r3, #11
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	4a04      	ldr	r2, [pc, #16]	@ (800790c <HAL_RCC_GetPCLK2Freq+0x28>)
 80078fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007900:	f003 031f 	and.w	r3, r3, #31
 8007904:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd98      	pop	{r3, r4, r7, pc}
 800790c:	0801070c 	.word	0x0801070c

08007910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007910:	b590      	push	{r4, r7, lr}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2bb0      	cmp	r3, #176	@ 0xb0
 800791c:	d903      	bls.n	8007926 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800791e:	4b15      	ldr	r3, [pc, #84]	@ (8007974 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e007      	b.n	8007936 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	091b      	lsrs	r3, r3, #4
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	4a11      	ldr	r2, [pc, #68]	@ (8007974 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007936:	f7ff f9a7 	bl	8006c88 <LL_RCC_GetAHB4Prescaler>
 800793a:	4603      	mov	r3, r0
 800793c:	091b      	lsrs	r3, r3, #4
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	4a0d      	ldr	r2, [pc, #52]	@ (8007978 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4a0a      	ldr	r2, [pc, #40]	@ (800797c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007954:	fba2 2303 	umull	r2, r3, r2, r3
 8007958:	0c9c      	lsrs	r4, r3, #18
 800795a:	f7fe fee5 	bl	8006728 <HAL_PWREx_GetVoltageRange>
 800795e:	4603      	mov	r3, r0
 8007960:	4619      	mov	r1, r3
 8007962:	4620      	mov	r0, r4
 8007964:	f000 f80c 	bl	8007980 <RCC_SetFlashLatency>
 8007968:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	bd90      	pop	{r4, r7, pc}
 8007972:	bf00      	nop
 8007974:	0801072c 	.word	0x0801072c
 8007978:	080106cc 	.word	0x080106cc
 800797c:	431bde83 	.word	0x431bde83

08007980 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b093      	sub	sp, #76	@ 0x4c
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800798a:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <RCC_SetFlashLatency+0xe8>)
 800798c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007996:	4a35      	ldr	r2, [pc, #212]	@ (8007a6c <RCC_SetFlashLatency+0xec>)
 8007998:	f107 031c 	add.w	r3, r7, #28
 800799c:	ca07      	ldmia	r2, {r0, r1, r2}
 800799e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80079a2:	4b33      	ldr	r3, [pc, #204]	@ (8007a70 <RCC_SetFlashLatency+0xf0>)
 80079a4:	f107 040c 	add.w	r4, r7, #12
 80079a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80079ae:	2300      	movs	r3, #0
 80079b0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b8:	d11a      	bne.n	80079f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80079be:	e013      	b.n	80079e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80079c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	3348      	adds	r3, #72	@ 0x48
 80079c6:	443b      	add	r3, r7
 80079c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d807      	bhi.n	80079e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	3348      	adds	r3, #72	@ 0x48
 80079d8:	443b      	add	r3, r7
 80079da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80079de:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80079e0:	e020      	b.n	8007a24 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80079e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079e4:	3301      	adds	r3, #1
 80079e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80079e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d9e8      	bls.n	80079c0 <RCC_SetFlashLatency+0x40>
 80079ee:	e019      	b.n	8007a24 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079f4:	e013      	b.n	8007a1e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80079f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	3348      	adds	r3, #72	@ 0x48
 80079fc:	443b      	add	r3, r7
 80079fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d807      	bhi.n	8007a18 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	3348      	adds	r3, #72	@ 0x48
 8007a0e:	443b      	add	r3, r7
 8007a10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007a14:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007a16:	e005      	b.n	8007a24 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d9e8      	bls.n	80079f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007a24:	4b13      	ldr	r3, [pc, #76]	@ (8007a74 <RCC_SetFlashLatency+0xf4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f023 0207 	bic.w	r2, r3, #7
 8007a2c:	4911      	ldr	r1, [pc, #68]	@ (8007a74 <RCC_SetFlashLatency+0xf4>)
 8007a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a30:	4313      	orrs	r3, r2
 8007a32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a34:	f7fa f9a6 	bl	8001d84 <HAL_GetTick>
 8007a38:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a3a:	e008      	b.n	8007a4e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a3c:	f7fa f9a2 	bl	8001d84 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e007      	b.n	8007a5e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a4e:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <RCC_SetFlashLatency+0xf4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d1ef      	bne.n	8007a3c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	374c      	adds	r7, #76	@ 0x4c
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd90      	pop	{r4, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	08010620 	.word	0x08010620
 8007a6c:	08010630 	.word	0x08010630
 8007a70:	0801063c 	.word	0x0801063c
 8007a74:	58004000 	.word	0x58004000

08007a78 <LL_RCC_LSE_IsEnabled>:
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <LL_RCC_LSE_IsEnabled+0x18>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e000      	b.n	8007a92 <LL_RCC_LSE_IsEnabled+0x1a>
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <LL_RCC_LSE_IsReady>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d101      	bne.n	8007ab4 <LL_RCC_LSE_IsReady+0x18>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <LL_RCC_LSE_IsReady+0x1a>
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <LL_RCC_SetRFWKPClockSource>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ad0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ad4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <LL_RCC_SetSMPSClockSource>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	f023 0203 	bic.w	r2, r3, #3
 8007afe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <LL_RCC_SetSMPSPrescaler>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <LL_RCC_SetUSARTClockSource>:
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4c:	f023 0203 	bic.w	r2, r3, #3
 8007b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <LL_RCC_SetLPUARTClockSource>:
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <LL_RCC_SetI2CClockSource>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ba0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007bac:	43db      	mvns	r3, r3
 8007bae:	401a      	ands	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007bb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <LL_RCC_SetLPTIMClockSource>:
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <LL_RCC_SetSAIClockSource>:
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <LL_RCC_SetRNGClockSource>:
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <LL_RCC_SetCLK48ClockSource>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <LL_RCC_SetUSBClockSource>:
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ffe3 	bl	8007c5a <LL_RCC_SetCLK48ClockSource>
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <LL_RCC_SetADCClockSource>:
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007cb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <LL_RCC_SetRTCClockSource>:
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <LL_RCC_GetRTCClockSource>:
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <LL_RCC_ForceBackupDomainReset>:
{
 8007d0e:	b480      	push	{r7}
 8007d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <LL_RCC_PLLSAI1_Enable>:
{
 8007d52:	b480      	push	{r7}
 8007d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d64:	6013      	str	r3, [r2, #0]
}
 8007d66:	bf00      	nop
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <LL_RCC_PLLSAI1_Disable>:
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d82:	6013      	str	r3, [r2, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <LL_RCC_PLLSAI1_IsReady>:
{
 8007d8e:	b480      	push	{r7}
 8007d90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007da0:	d101      	bne.n	8007da6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007dba:	2300      	movs	r3, #0
 8007dbc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d034      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007dd6:	d021      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007dd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ddc:	d81b      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007de2:	d01d      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007de4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007de8:	d815      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007df2:	d110      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e02:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007e04:	e00d      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f947 	bl	800809e <RCCEx_PLLSAI1_ConfigNP>
 8007e10:	4603      	mov	r3, r0
 8007e12:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007e14:	e005      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	77fb      	strb	r3, [r7, #31]
        break;
 8007e1a:	e002      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007e1c:	bf00      	nop
 8007e1e:	e000      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e22:	7ffb      	ldrb	r3, [r7, #31]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d105      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff fee8 	bl	8007c02 <LL_RCC_SetSAIClockSource>
 8007e32:	e001      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	7ffb      	ldrb	r3, [r7, #31]
 8007e36:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d046      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007e44:	f7ff ff56 	bl	8007cf4 <LL_RCC_GetRTCClockSource>
 8007e48:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d03c      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007e54:	f7fe fc58 	bl	8006708 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d105      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff ff30 	bl	8007cc8 <LL_RCC_SetRTCClockSource>
 8007e68:	e02e      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e72:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007e74:	f7ff ff4b 	bl	8007d0e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007e78:	f7ff ff5a 	bl	8007d30 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007e94:	f7ff fdf0 	bl	8007a78 <LL_RCC_LSE_IsEnabled>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d114      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e9e:	f7f9 ff71 	bl	8001d84 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007ea4:	e00b      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea6:	f7f9 ff6d 	bl	8001d84 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d902      	bls.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	77fb      	strb	r3, [r7, #31]
              break;
 8007ebc:	e004      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007ebe:	f7ff fded 	bl	8007a9c <LL_RCC_LSE_IsReady>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d1ee      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007ec8:	7ffb      	ldrb	r3, [r7, #31]
 8007eca:	77bb      	strb	r3, [r7, #30]
 8007ecc:	e001      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	7ffb      	ldrb	r3, [r7, #31]
 8007ed0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fe2a 	bl	8007b3c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fe35 	bl	8007b68 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fe5d 	bl	8007bce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff fe52 	bl	8007bce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fe2a 	bl	8007b94 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fe1f 	bl	8007b94 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d022      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fe8d 	bl	8007c86 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f74:	d107      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f84:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f8dd 	bl	8008154 <RCCEx_PLLSAI1_ConfigNQ>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007f9e:	7ffb      	ldrb	r3, [r7, #31]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007fa4:	7ffb      	ldrb	r3, [r7, #31]
 8007fa6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02b      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fbc:	d008      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fc6:	d003      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fe2a 	bl	8007c2e <LL_RCC_SetRNGClockSource>
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f7ff fe21 	bl	8007c2e <LL_RCC_SetRNGClockSource>
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fe34 	bl	8007c5a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007ffa:	d107      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800800a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008014:	2b00      	cmp	r3, #0
 8008016:	d022      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff fe3d 	bl	8007c9c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800802a:	d107      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800802c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800803a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008044:	d10b      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f8dd 	bl	800820a <RCCEx_PLLSAI1_ConfigNR>
 8008050:	4603      	mov	r3, r0
 8008052:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008054:	7ffb      	ldrb	r3, [r7, #31]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800805a:	7ffb      	ldrb	r3, [r7, #31]
 800805c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fd26 	bl	8007ac0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff fd45 	bl	8007b14 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fd2c 	bl	8007aec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008094:	7fbb      	ldrb	r3, [r7, #30]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80080aa:	f7ff fe61 	bl	8007d70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080ae:	f7f9 fe69 	bl	8001d84 <HAL_GetTick>
 80080b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80080b4:	e009      	b.n	80080ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080b6:	f7f9 fe65 	bl	8001d84 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d902      	bls.n	80080ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e004      	b.n	80080d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80080ca:	f7ff fe60 	bl	8007d8e <LL_RCC_PLLSAI1_IsReady>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f0      	bne.n	80080b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d137      	bne.n	800814a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80080da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080ee:	4313      	orrs	r3, r2
 80080f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80080f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008104:	4313      	orrs	r3, r2
 8008106:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008108:	f7ff fe23 	bl	8007d52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810c:	f7f9 fe3a 	bl	8001d84 <HAL_GetTick>
 8008110:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008112:	e009      	b.n	8008128 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008114:	f7f9 fe36 	bl	8001d84 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d902      	bls.n	8008128 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
        break;
 8008126:	e004      	b.n	8008132 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008128:	f7ff fe31 	bl	8007d8e <LL_RCC_PLLSAI1_IsReady>
 800812c:	4603      	mov	r3, r0
 800812e:	2b01      	cmp	r3, #1
 8008130:	d1f0      	bne.n	8008114 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008146:	4313      	orrs	r3, r2
 8008148:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008160:	f7ff fe06 	bl	8007d70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008164:	f7f9 fe0e 	bl	8001d84 <HAL_GetTick>
 8008168:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800816a:	e009      	b.n	8008180 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800816c:	f7f9 fe0a 	bl	8001d84 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d902      	bls.n	8008180 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	73fb      	strb	r3, [r7, #15]
      break;
 800817e:	e004      	b.n	800818a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008180:	f7ff fe05 	bl	8007d8e <LL_RCC_PLLSAI1_IsReady>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d137      	bne.n	8008200 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081a4:	4313      	orrs	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081ba:	4313      	orrs	r3, r2
 80081bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80081be:	f7ff fdc8 	bl	8007d52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c2:	f7f9 fddf 	bl	8001d84 <HAL_GetTick>
 80081c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80081c8:	e009      	b.n	80081de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081ca:	f7f9 fddb 	bl	8001d84 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d902      	bls.n	80081de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
        break;
 80081dc:	e004      	b.n	80081e8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80081de:	f7ff fdd6 	bl	8007d8e <LL_RCC_PLLSAI1_IsReady>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d1f0      	bne.n	80081ca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d108      	bne.n	8008200 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80081ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081fc:	4313      	orrs	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008216:	f7ff fdab 	bl	8007d70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800821a:	f7f9 fdb3 	bl	8001d84 <HAL_GetTick>
 800821e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008220:	e009      	b.n	8008236 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008222:	f7f9 fdaf 	bl	8001d84 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d902      	bls.n	8008236 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	e004      	b.n	8008240 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008236:	f7ff fdaa 	bl	8007d8e <LL_RCC_PLLSAI1_IsReady>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f0      	bne.n	8008222 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d137      	bne.n	80082b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800825a:	4313      	orrs	r3, r2
 800825c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800825e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008270:	4313      	orrs	r3, r2
 8008272:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008274:	f7ff fd6d 	bl	8007d52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008278:	f7f9 fd84 	bl	8001d84 <HAL_GetTick>
 800827c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800827e:	e009      	b.n	8008294 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008280:	f7f9 fd80 	bl	8001d84 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d902      	bls.n	8008294 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
        break;
 8008292:	e004      	b.n	800829e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008294:	f7ff fd7b 	bl	8007d8e <LL_RCC_PLLSAI1_IsReady>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d1f0      	bne.n	8008280 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80082a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082b2:	4313      	orrs	r3, r2
 80082b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e049      	b.n	8008366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7f9 f960 	bl	80015ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f000 fa7c 	bl	80087fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b01      	cmp	r3, #1
 8008382:	d001      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e036      	b.n	80083f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0201 	orr.w	r2, r2, #1
 800839e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a17      	ldr	r2, [pc, #92]	@ (8008404 <HAL_TIM_Base_Start_IT+0x94>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d004      	beq.n	80083b4 <HAL_TIM_Base_Start_IT+0x44>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b2:	d115      	bne.n	80083e0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	4b13      	ldr	r3, [pc, #76]	@ (8008408 <HAL_TIM_Base_Start_IT+0x98>)
 80083bc:	4013      	ands	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b06      	cmp	r3, #6
 80083c4:	d015      	beq.n	80083f2 <HAL_TIM_Base_Start_IT+0x82>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083cc:	d011      	beq.n	80083f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	e008      	b.n	80083f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	e000      	b.n	80083f4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40012c00 	.word	0x40012c00
 8008408:	00010007 	.word	0x00010007

0800840c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0202 	mvn.w	r2, #2
 8008440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9b2 	bl	80087c0 <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9a4 	bl	80087ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f9b5 	bl	80087d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d020      	beq.n	80084bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0204 	mvn.w	r2, #4
 800848c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2202      	movs	r2, #2
 8008492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f98c 	bl	80087c0 <HAL_TIM_IC_CaptureCallback>
 80084a8:	e005      	b.n	80084b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f97e 	bl	80087ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f98f 	bl	80087d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d020      	beq.n	8008508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01b      	beq.n	8008508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0208 	mvn.w	r2, #8
 80084d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2204      	movs	r2, #4
 80084de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f966 	bl	80087c0 <HAL_TIM_IC_CaptureCallback>
 80084f4:	e005      	b.n	8008502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f958 	bl	80087ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f969 	bl	80087d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b00      	cmp	r3, #0
 8008510:	d020      	beq.n	8008554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f06f 0210 	mvn.w	r2, #16
 8008524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2208      	movs	r2, #8
 800852a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f940 	bl	80087c0 <HAL_TIM_IC_CaptureCallback>
 8008540:	e005      	b.n	800854e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f932 	bl	80087ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f943 	bl	80087d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0201 	mvn.w	r2, #1
 8008570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7f8 fcb8 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d104      	bne.n	800858c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800859e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa9b 	bl	8008adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00c      	beq.n	80085ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa93 	bl	8008af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f8fd 	bl	80087e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f06f 0220 	mvn.w	r2, #32
 800860a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa5b 	bl	8008ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_TIM_ConfigClockSource+0x1c>
 8008632:	2302      	movs	r3, #2
 8008634:	e0b6      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x18a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2202      	movs	r2, #2
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008654:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008658:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008660:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008672:	d03e      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0xd8>
 8008674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008678:	f200 8087 	bhi.w	800878a <HAL_TIM_ConfigClockSource+0x170>
 800867c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008680:	f000 8086 	beq.w	8008790 <HAL_TIM_ConfigClockSource+0x176>
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008688:	d87f      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 800868a:	2b70      	cmp	r3, #112	@ 0x70
 800868c:	d01a      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0xaa>
 800868e:	2b70      	cmp	r3, #112	@ 0x70
 8008690:	d87b      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 8008692:	2b60      	cmp	r3, #96	@ 0x60
 8008694:	d050      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0x11e>
 8008696:	2b60      	cmp	r3, #96	@ 0x60
 8008698:	d877      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 800869a:	2b50      	cmp	r3, #80	@ 0x50
 800869c:	d03c      	beq.n	8008718 <HAL_TIM_ConfigClockSource+0xfe>
 800869e:	2b50      	cmp	r3, #80	@ 0x50
 80086a0:	d873      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 80086a2:	2b40      	cmp	r3, #64	@ 0x40
 80086a4:	d058      	beq.n	8008758 <HAL_TIM_ConfigClockSource+0x13e>
 80086a6:	2b40      	cmp	r3, #64	@ 0x40
 80086a8:	d86f      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 80086aa:	2b30      	cmp	r3, #48	@ 0x30
 80086ac:	d064      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15e>
 80086ae:	2b30      	cmp	r3, #48	@ 0x30
 80086b0:	d86b      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d060      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15e>
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d867      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x170>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d05c      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15e>
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d05a      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15e>
 80086c2:	e062      	b.n	800878a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086d4:	f000 f978 	bl	80089c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	609a      	str	r2, [r3, #8]
      break;
 80086f0:	e04f      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008702:	f000 f961 	bl	80089c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008714:	609a      	str	r2, [r3, #8]
      break;
 8008716:	e03c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008724:	461a      	mov	r2, r3
 8008726:	f000 f8d3 	bl	80088d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2150      	movs	r1, #80	@ 0x50
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f92c 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 8008736:	e02c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008744:	461a      	mov	r2, r3
 8008746:	f000 f8f2 	bl	800892e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2160      	movs	r1, #96	@ 0x60
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f91c 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 8008756:	e01c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008764:	461a      	mov	r2, r3
 8008766:	f000 f8b3 	bl	80088d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2140      	movs	r1, #64	@ 0x40
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f90c 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 8008776:	e00c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f000 f903 	bl	800898e <TIM_ITRx_SetConfig>
      break;
 8008788:	e003      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
      break;
 800878e:	e000      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a2d      	ldr	r2, [pc, #180]	@ (80088c4 <TIM_Base_SetConfig+0xc8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_Base_SetConfig+0x20>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881a:	d108      	bne.n	800882e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a24      	ldr	r2, [pc, #144]	@ (80088c4 <TIM_Base_SetConfig+0xc8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00b      	beq.n	800884e <TIM_Base_SetConfig+0x52>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800883c:	d007      	beq.n	800884e <TIM_Base_SetConfig+0x52>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a21      	ldr	r2, [pc, #132]	@ (80088c8 <TIM_Base_SetConfig+0xcc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_Base_SetConfig+0x52>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a20      	ldr	r2, [pc, #128]	@ (80088cc <TIM_Base_SetConfig+0xd0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d108      	bne.n	8008860 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a10      	ldr	r2, [pc, #64]	@ (80088c4 <TIM_Base_SetConfig+0xc8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d007      	beq.n	8008896 <TIM_Base_SetConfig+0x9a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a0f      	ldr	r2, [pc, #60]	@ (80088c8 <TIM_Base_SetConfig+0xcc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_Base_SetConfig+0x9a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a0e      	ldr	r2, [pc, #56]	@ (80088cc <TIM_Base_SetConfig+0xd0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d103      	bne.n	800889e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f043 0204 	orr.w	r2, r3, #4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	601a      	str	r2, [r3, #0]
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800

080088d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f023 0201 	bic.w	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 030a 	bic.w	r3, r3, #10
 800890c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	621a      	str	r2, [r3, #32]
}
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	f023 0210 	bic.w	r2, r3, #16
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	031b      	lsls	r3, r3, #12
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800896a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80089a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f043 0307 	orr.w	r3, r3, #7
 80089b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	609a      	str	r2, [r3, #8]
}
 80089bc:	bf00      	nop
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	021a      	lsls	r2, r3, #8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e04a      	b.n	8008ab6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a1f      	ldr	r2, [pc, #124]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d108      	bne.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a12      	ldr	r2, [pc, #72]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a88:	d10c      	bne.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40012c00 	.word	0x40012c00

08008ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <LL_RCC_GetUSARTClockSource>:
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4013      	ands	r3, r2
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <LL_RCC_GetLPUARTClockSource>:
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4013      	ands	r3, r2
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e042      	b.n	8008bdc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f83b 	bl	8008be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2224      	movs	r2, #36	@ 0x24
 8008b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fae8 	bl	8009164 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f8bd 	bl	8008d14 <UART_SetConfig>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e01b      	b.n	8008bdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0201 	orr.w	r2, r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fb67 	bl	80092a8 <UART_CheckIdleState>
 8008bda:	4603      	mov	r3, r0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	@ 0x28
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	4613      	mov	r3, r2
 8008c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d17b      	bne.n	8008d0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <HAL_UART_Transmit+0x26>
 8008c18:	88fb      	ldrh	r3, [r7, #6]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e074      	b.n	8008d0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2221      	movs	r2, #33	@ 0x21
 8008c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c32:	f7f9 f8a7 	bl	8001d84 <HAL_GetTick>
 8008c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	88fa      	ldrh	r2, [r7, #6]
 8008c3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	88fa      	ldrh	r2, [r7, #6]
 8008c44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c50:	d108      	bne.n	8008c64 <HAL_UART_Transmit+0x6c>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d104      	bne.n	8008c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	e003      	b.n	8008c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c6c:	e030      	b.n	8008cd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2200      	movs	r2, #0
 8008c76:	2180      	movs	r1, #128	@ 0x80
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fbbf 	bl	80093fc <UART_WaitOnFlagUntilTimeout>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e03d      	b.n	8008d0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10b      	bne.n	8008cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ca4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	3302      	adds	r3, #2
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	e007      	b.n	8008cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1c8      	bne.n	8008c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2140      	movs	r1, #64	@ 0x40
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 fb88 	bl	80093fc <UART_WaitOnFlagUntilTimeout>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e006      	b.n	8008d0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e000      	b.n	8008d0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008d0a:	2302      	movs	r3, #2
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d18:	b08c      	sub	sp, #48	@ 0x30
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	431a      	orrs	r2, r3
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4baf      	ldr	r3, [pc, #700]	@ (8009000 <UART_SetConfig+0x2ec>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4aa4      	ldr	r2, [pc, #656]	@ (8009004 <UART_SetConfig+0x2f0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	6812      	ldr	r2, [r2, #0]
 8008d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9e:	f023 010f 	bic.w	r1, r3, #15
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a95      	ldr	r2, [pc, #596]	@ (8009008 <UART_SetConfig+0x2f4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d125      	bne.n	8008e04 <UART_SetConfig+0xf0>
 8008db8:	2003      	movs	r0, #3
 8008dba:	f7ff fea3 	bl	8008b04 <LL_RCC_GetUSARTClockSource>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d81b      	bhi.n	8008dfc <UART_SetConfig+0xe8>
 8008dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dcc <UART_SetConfig+0xb8>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008ddd 	.word	0x08008ddd
 8008dd0:	08008ded 	.word	0x08008ded
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008df5 	.word	0x08008df5
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de2:	e042      	b.n	8008e6a <UART_SetConfig+0x156>
 8008de4:	2302      	movs	r3, #2
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dea:	e03e      	b.n	8008e6a <UART_SetConfig+0x156>
 8008dec:	2304      	movs	r3, #4
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df2:	e03a      	b.n	8008e6a <UART_SetConfig+0x156>
 8008df4:	2308      	movs	r3, #8
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dfa:	e036      	b.n	8008e6a <UART_SetConfig+0x156>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e02:	e032      	b.n	8008e6a <UART_SetConfig+0x156>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a7e      	ldr	r2, [pc, #504]	@ (8009004 <UART_SetConfig+0x2f0>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d12a      	bne.n	8008e64 <UART_SetConfig+0x150>
 8008e0e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008e12:	f7ff fe87 	bl	8008b24 <LL_RCC_GetLPUARTClockSource>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e1c:	d01a      	beq.n	8008e54 <UART_SetConfig+0x140>
 8008e1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e22:	d81b      	bhi.n	8008e5c <UART_SetConfig+0x148>
 8008e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e28:	d00c      	beq.n	8008e44 <UART_SetConfig+0x130>
 8008e2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e2e:	d815      	bhi.n	8008e5c <UART_SetConfig+0x148>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <UART_SetConfig+0x128>
 8008e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e38:	d008      	beq.n	8008e4c <UART_SetConfig+0x138>
 8008e3a:	e00f      	b.n	8008e5c <UART_SetConfig+0x148>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e42:	e012      	b.n	8008e6a <UART_SetConfig+0x156>
 8008e44:	2302      	movs	r3, #2
 8008e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4a:	e00e      	b.n	8008e6a <UART_SetConfig+0x156>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e52:	e00a      	b.n	8008e6a <UART_SetConfig+0x156>
 8008e54:	2308      	movs	r3, #8
 8008e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e5a:	e006      	b.n	8008e6a <UART_SetConfig+0x156>
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e62:	e002      	b.n	8008e6a <UART_SetConfig+0x156>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a65      	ldr	r2, [pc, #404]	@ (8009004 <UART_SetConfig+0x2f0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	f040 8097 	bne.w	8008fa4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	d823      	bhi.n	8008ec6 <UART_SetConfig+0x1b2>
 8008e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <UART_SetConfig+0x170>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ea9 	.word	0x08008ea9
 8008e88:	08008ec7 	.word	0x08008ec7
 8008e8c:	08008eb1 	.word	0x08008eb1
 8008e90:	08008ec7 	.word	0x08008ec7
 8008e94:	08008eb7 	.word	0x08008eb7
 8008e98:	08008ec7 	.word	0x08008ec7
 8008e9c:	08008ec7 	.word	0x08008ec7
 8008ea0:	08008ec7 	.word	0x08008ec7
 8008ea4:	08008ebf 	.word	0x08008ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea8:	f7fe fd06 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 8008eac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eae:	e010      	b.n	8008ed2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eb0:	4b56      	ldr	r3, [pc, #344]	@ (800900c <UART_SetConfig+0x2f8>)
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb4:	e00d      	b.n	8008ed2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eb6:	f7fe fc7f 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8008eba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ebc:	e009      	b.n	8008ed2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ec4:	e005      	b.n	8008ed2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 812b 	beq.w	8009130 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	4a4c      	ldr	r2, [pc, #304]	@ (8009010 <UART_SetConfig+0x2fc>)
 8008ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4413      	add	r3, r2
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d305      	bcc.n	8008f0a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d903      	bls.n	8008f12 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f10:	e10e      	b.n	8009130 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	2200      	movs	r2, #0
 8008f16:	60bb      	str	r3, [r7, #8]
 8008f18:	60fa      	str	r2, [r7, #12]
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8009010 <UART_SetConfig+0x2fc>)
 8008f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2200      	movs	r2, #0
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f34:	f7f7 fe10 	bl	8000b58 <__aeabi_uldivmod>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4619      	mov	r1, r3
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	020b      	lsls	r3, r1, #8
 8008f4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f4e:	0202      	lsls	r2, r0, #8
 8008f50:	6979      	ldr	r1, [r7, #20]
 8008f52:	6849      	ldr	r1, [r1, #4]
 8008f54:	0849      	lsrs	r1, r1, #1
 8008f56:	2000      	movs	r0, #0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	eb12 0804 	adds.w	r8, r2, r4
 8008f60:	eb43 0905 	adc.w	r9, r3, r5
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	469a      	mov	sl, r3
 8008f6c:	4693      	mov	fp, r2
 8008f6e:	4652      	mov	r2, sl
 8008f70:	465b      	mov	r3, fp
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 fdef 	bl	8000b58 <__aeabi_uldivmod>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4613      	mov	r3, r2
 8008f80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f88:	d308      	bcc.n	8008f9c <UART_SetConfig+0x288>
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f90:	d204      	bcs.n	8008f9c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a3a      	ldr	r2, [r7, #32]
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	e0c9      	b.n	8009130 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fa2:	e0c5      	b.n	8009130 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fac:	d16d      	bne.n	800908a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008fae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	2b07      	cmp	r3, #7
 8008fb6:	d82d      	bhi.n	8009014 <UART_SetConfig+0x300>
 8008fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc0 <UART_SetConfig+0x2ac>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	08008fe1 	.word	0x08008fe1
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08009015 	.word	0x08009015
 8008fcc:	08008fef 	.word	0x08008fef
 8008fd0:	08009015 	.word	0x08009015
 8008fd4:	08009015 	.word	0x08009015
 8008fd8:	08009015 	.word	0x08009015
 8008fdc:	08008ff7 	.word	0x08008ff7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fe0:	f7fe fc80 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 8008fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fe6:	e01b      	b.n	8009020 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fe8:	4b08      	ldr	r3, [pc, #32]	@ (800900c <UART_SetConfig+0x2f8>)
 8008fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fec:	e018      	b.n	8009020 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fee:	f7fe fbe3 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8008ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ff4:	e014      	b.n	8009020 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ffc:	e010      	b.n	8009020 <UART_SetConfig+0x30c>
 8008ffe:	bf00      	nop
 8009000:	cfff69f3 	.word	0xcfff69f3
 8009004:	40008000 	.word	0x40008000
 8009008:	40013800 	.word	0x40013800
 800900c:	00f42400 	.word	0x00f42400
 8009010:	08010780 	.word	0x08010780
      default:
        pclk = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800901e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8084 	beq.w	8009130 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	4a4b      	ldr	r2, [pc, #300]	@ (800915c <UART_SetConfig+0x448>)
 800902e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009032:	461a      	mov	r2, r3
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	fbb3 f3f2 	udiv	r3, r3, r2
 800903a:	005a      	lsls	r2, r3, #1
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	441a      	add	r2, r3
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	fbb2 f3f3 	udiv	r3, r2, r3
 800904c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	2b0f      	cmp	r3, #15
 8009052:	d916      	bls.n	8009082 <UART_SetConfig+0x36e>
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800905a:	d212      	bcs.n	8009082 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	b29b      	uxth	r3, r3
 8009060:	f023 030f 	bic.w	r3, r3, #15
 8009064:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	085b      	lsrs	r3, r3, #1
 800906a:	b29b      	uxth	r3, r3
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	b29a      	uxth	r2, r3
 8009072:	8bfb      	ldrh	r3, [r7, #30]
 8009074:	4313      	orrs	r3, r2
 8009076:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	8bfa      	ldrh	r2, [r7, #30]
 800907e:	60da      	str	r2, [r3, #12]
 8009080:	e056      	b.n	8009130 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009088:	e052      	b.n	8009130 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800908a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800908e:	3b01      	subs	r3, #1
 8009090:	2b07      	cmp	r3, #7
 8009092:	d822      	bhi.n	80090da <UART_SetConfig+0x3c6>
 8009094:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <UART_SetConfig+0x388>)
 8009096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909a:	bf00      	nop
 800909c:	080090bd 	.word	0x080090bd
 80090a0:	080090c5 	.word	0x080090c5
 80090a4:	080090db 	.word	0x080090db
 80090a8:	080090cb 	.word	0x080090cb
 80090ac:	080090db 	.word	0x080090db
 80090b0:	080090db 	.word	0x080090db
 80090b4:	080090db 	.word	0x080090db
 80090b8:	080090d3 	.word	0x080090d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7fe fc12 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 80090c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090c2:	e010      	b.n	80090e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b26      	ldr	r3, [pc, #152]	@ (8009160 <UART_SetConfig+0x44c>)
 80090c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090c8:	e00d      	b.n	80090e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ca:	f7fe fb75 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 80090ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090d0:	e009      	b.n	80090e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090d8:	e005      	b.n	80090e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090e4:	bf00      	nop
    }

    if (pclk != 0U)
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d021      	beq.n	8009130 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f0:	4a1a      	ldr	r2, [pc, #104]	@ (800915c <UART_SetConfig+0x448>)
 80090f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	441a      	add	r2, r3
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	fbb2 f3f3 	udiv	r3, r2, r3
 800910e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	2b0f      	cmp	r3, #15
 8009114:	d909      	bls.n	800912a <UART_SetConfig+0x416>
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800911c:	d205      	bcs.n	800912a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	b29a      	uxth	r2, r3
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60da      	str	r2, [r3, #12]
 8009128:	e002      	b.n	8009130 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2201      	movs	r2, #1
 8009134:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2201      	movs	r2, #1
 800913c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2200      	movs	r2, #0
 8009144:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2200      	movs	r2, #0
 800914a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800914c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009150:	4618      	mov	r0, r3
 8009152:	3730      	adds	r7, #48	@ 0x30
 8009154:	46bd      	mov	sp, r7
 8009156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800915a:	bf00      	nop
 800915c:	08010780 	.word	0x08010780
 8009160:	00f42400 	.word	0x00f42400

08009164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00a      	beq.n	80091d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d6:	f003 0304 	and.w	r3, r3, #4
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01a      	beq.n	800927a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800925e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009262:	d10a      	bne.n	800927a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	605a      	str	r2, [r3, #4]
  }
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b098      	sub	sp, #96	@ 0x60
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092b8:	f7f8 fd64 	bl	8001d84 <HAL_GetTick>
 80092bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0308 	and.w	r3, r3, #8
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d12f      	bne.n	800932c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d4:	2200      	movs	r2, #0
 80092d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f88e 	bl	80093fc <UART_WaitOnFlagUntilTimeout>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d022      	beq.n	800932c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009304:	647b      	str	r3, [r7, #68]	@ 0x44
 8009306:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800930a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e6      	bne.n	80092e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e063      	b.n	80093f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0304 	and.w	r3, r3, #4
 8009336:	2b04      	cmp	r3, #4
 8009338:	d149      	bne.n	80093ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800933a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009342:	2200      	movs	r2, #0
 8009344:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f857 	bl	80093fc <UART_WaitOnFlagUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d03c      	beq.n	80093ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	e853 3f00 	ldrex	r3, [r3]
 8009360:	623b      	str	r3, [r7, #32]
   return(result);
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009372:	633b      	str	r3, [r7, #48]	@ 0x30
 8009374:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e6      	bne.n	8009354 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3308      	adds	r3, #8
 800938c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	60fb      	str	r3, [r7, #12]
   return(result);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f023 0301 	bic.w	r3, r3, #1
 800939c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093a6:	61fa      	str	r2, [r7, #28]
 80093a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	69b9      	ldr	r1, [r7, #24]
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	617b      	str	r3, [r7, #20]
   return(result);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e5      	bne.n	8009386 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e012      	b.n	80093f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3758      	adds	r7, #88	@ 0x58
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800940c:	e04f      	b.n	80094ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009414:	d04b      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009416:	f7f8 fcb5 	bl	8001d84 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	429a      	cmp	r2, r3
 8009424:	d302      	bcc.n	800942c <UART_WaitOnFlagUntilTimeout+0x30>
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e04e      	b.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	d037      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b80      	cmp	r3, #128	@ 0x80
 8009442:	d034      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b40      	cmp	r3, #64	@ 0x40
 8009448:	d031      	beq.n	80094ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f003 0308 	and.w	r3, r3, #8
 8009454:	2b08      	cmp	r3, #8
 8009456:	d110      	bne.n	800947a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2208      	movs	r2, #8
 800945e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f838 	bl	80094d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2208      	movs	r2, #8
 800946a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e029      	b.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009488:	d111      	bne.n	80094ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f81e 	bl	80094d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e00f      	b.n	80094ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69da      	ldr	r2, [r3, #28]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4013      	ands	r3, r2
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	bf0c      	ite	eq
 80094be:	2301      	moveq	r3, #1
 80094c0:	2300      	movne	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d0a0      	beq.n	800940e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b095      	sub	sp, #84	@ 0x54
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80094fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e6      	bne.n	80094de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009526:	f023 0301 	bic.w	r3, r3, #1
 800952a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3308      	adds	r3, #8
 8009532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800953a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e3      	bne.n	8009510 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d118      	bne.n	8009582 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	60bb      	str	r3, [r7, #8]
   return(result);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f023 0310 	bic.w	r3, r3, #16
 8009564:	647b      	str	r3, [r7, #68]	@ 0x44
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800956e:	61bb      	str	r3, [r7, #24]
 8009570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6979      	ldr	r1, [r7, #20]
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	613b      	str	r3, [r7, #16]
   return(result);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e6      	bne.n	8009550 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009596:	bf00      	nop
 8009598:	3754      	adds	r7, #84	@ 0x54
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095b2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80095b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095d8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80095dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	43db      	mvns	r3, r3
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	4013      	ands	r3, r2
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
	...

08009644 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009644:	b480      	push	{r7}
 8009646:	b0a7      	sub	sp, #156	@ 0x9c
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	2b03      	cmp	r3, #3
 8009674:	d81f      	bhi.n	80096b6 <USB_ActivateEndpoint+0x72>
 8009676:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <USB_ActivateEndpoint+0x38>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800968d 	.word	0x0800968d
 8009680:	080096a9 	.word	0x080096a9
 8009684:	080096bf 	.word	0x080096bf
 8009688:	0800969b 	.word	0x0800969b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800968c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009690:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009694:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009698:	e012      	b.n	80096c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800969a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800969e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80096a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80096a6:	e00b      	b.n	80096c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80096ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80096b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80096b4:	e004      	b.n	80096c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80096bc:	e000      	b.n	80096c0 <USB_ActivateEndpoint+0x7c>
      break;
 80096be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	441a      	add	r2, r3
 80096ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80096ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096de:	b29b      	uxth	r3, r3
 80096e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	b21b      	sxth	r3, r3
 80096f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096fa:	b21a      	sxth	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	b21b      	sxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	b21b      	sxth	r3, r3
 8009706:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	441a      	add	r2, r3
 8009714:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800971c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009728:	b29b      	uxth	r3, r3
 800972a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	7b1b      	ldrb	r3, [r3, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f040 8180 	bne.w	8009a36 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	785b      	ldrb	r3, [r3, #1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 8084 	beq.w	8009848 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	61bb      	str	r3, [r7, #24]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800974a:	b29b      	uxth	r3, r3
 800974c:	461a      	mov	r2, r3
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	4413      	add	r3, r2
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	00da      	lsls	r2, r3, #3
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	88db      	ldrh	r3, [r3, #6]
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	b29b      	uxth	r3, r3
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	827b      	strh	r3, [r7, #18]
 8009782:	8a7b      	ldrh	r3, [r7, #18]
 8009784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01b      	beq.n	80097c4 <USB_ActivateEndpoint+0x180>
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800979e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a2:	823b      	strh	r3, [r7, #16]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	441a      	add	r2, r3
 80097ae:	8a3b      	ldrh	r3, [r7, #16]
 80097b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	78db      	ldrb	r3, [r3, #3]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d020      	beq.n	800980e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e2:	81bb      	strh	r3, [r7, #12]
 80097e4:	89bb      	ldrh	r3, [r7, #12]
 80097e6:	f083 0320 	eor.w	r3, r3, #32
 80097ea:	81bb      	strh	r3, [r7, #12]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	441a      	add	r2, r3
 80097f6:	89bb      	ldrh	r3, [r7, #12]
 80097f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009808:	b29b      	uxth	r3, r3
 800980a:	8013      	strh	r3, [r2, #0]
 800980c:	e3f9      	b.n	800a002 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009824:	81fb      	strh	r3, [r7, #14]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	441a      	add	r2, r3
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800983a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800983e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009842:	b29b      	uxth	r3, r3
 8009844:	8013      	strh	r3, [r2, #0]
 8009846:	e3dc      	b.n	800a002 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	633b      	str	r3, [r7, #48]	@ 0x30
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009852:	b29b      	uxth	r3, r3
 8009854:	461a      	mov	r2, r3
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	4413      	add	r3, r2
 800985a:	633b      	str	r3, [r7, #48]	@ 0x30
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	00da      	lsls	r2, r3, #3
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	4413      	add	r3, r2
 8009866:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800986a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	88db      	ldrh	r3, [r3, #6]
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	b29b      	uxth	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009886:	b29b      	uxth	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	4413      	add	r3, r2
 800988e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	00da      	lsls	r2, r3, #3
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	4413      	add	r3, r2
 800989a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10a      	bne.n	80098ce <USB_ActivateEndpoint+0x28a>
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e041      	b.n	8009952 <USB_ActivateEndpoint+0x30e>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80098d4:	d81c      	bhi.n	8009910 <USB_ActivateEndpoint+0x2cc>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <USB_ActivateEndpoint+0x2b2>
 80098ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80098f0:	3301      	adds	r3, #1
 80098f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009900:	b29b      	uxth	r3, r3
 8009902:	029b      	lsls	r3, r3, #10
 8009904:	b29b      	uxth	r3, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	e020      	b.n	8009952 <USB_ActivateEndpoint+0x30e>
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 031f 	and.w	r3, r3, #31
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <USB_ActivateEndpoint+0x2ec>
 8009926:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800992a:	3b01      	subs	r3, #1
 800992c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29a      	uxth	r2, r3
 8009936:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800993a:	b29b      	uxth	r3, r3
 800993c:	029b      	lsls	r3, r3, #10
 800993e:	b29b      	uxth	r3, r3
 8009940:	4313      	orrs	r3, r2
 8009942:	b29b      	uxth	r3, r3
 8009944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994c:	b29a      	uxth	r2, r3
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009960:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01b      	beq.n	80099a2 <USB_ActivateEndpoint+0x35e>
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009980:	843b      	strh	r3, [r7, #32]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	441a      	add	r2, r3
 800998c:	8c3b      	ldrh	r3, [r7, #32]
 800998e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800999a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800999e:	b29b      	uxth	r3, r3
 80099a0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d124      	bne.n	80099f4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c0:	83bb      	strh	r3, [r7, #28]
 80099c2:	8bbb      	ldrh	r3, [r7, #28]
 80099c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80099c8:	83bb      	strh	r3, [r7, #28]
 80099ca:	8bbb      	ldrh	r3, [r7, #28]
 80099cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80099d0:	83bb      	strh	r3, [r7, #28]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	441a      	add	r2, r3
 80099dc:	8bbb      	ldrh	r3, [r7, #28]
 80099de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	8013      	strh	r3, [r2, #0]
 80099f2:	e306      	b.n	800a002 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a0a:	83fb      	strh	r3, [r7, #30]
 8009a0c:	8bfb      	ldrh	r3, [r7, #30]
 8009a0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a12:	83fb      	strh	r3, [r7, #30]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	441a      	add	r2, r3
 8009a1e:	8bfb      	ldrh	r3, [r7, #30]
 8009a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	8013      	strh	r3, [r2, #0]
 8009a34:	e2e5      	b.n	800a002 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	78db      	ldrb	r3, [r3, #3]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d11e      	bne.n	8009a7c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a54:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	441a      	add	r2, r3
 8009a62:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a6e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	8013      	strh	r3, [r2, #0]
 8009a7a:	e01d      	b.n	8009ab8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a92:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	441a      	add	r2, r3
 8009aa0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ac8:	4413      	add	r3, r2
 8009aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	00da      	lsls	r2, r3, #3
 8009ad2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ada:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	891b      	ldrh	r3, [r3, #8]
 8009ae0:	085b      	lsrs	r3, r3, #1
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aea:	801a      	strh	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	677b      	str	r3, [r7, #116]	@ 0x74
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009afc:	4413      	add	r3, r2
 8009afe:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	00da      	lsls	r2, r3, #3
 8009b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b08:	4413      	add	r3, r2
 8009b0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009b0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	895b      	ldrh	r3, [r3, #10]
 8009b14:	085b      	lsrs	r3, r3, #1
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 81af 	bne.w	8009e88 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8009b3a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d01d      	beq.n	8009b82 <USB_ActivateEndpoint+0x53e>
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	441a      	add	r2, r3
 8009b6a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009b92:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d01d      	beq.n	8009bda <USB_ActivateEndpoint+0x596>
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	441a      	add	r2, r3
 8009bc2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d16b      	bne.n	8009cba <USB_ActivateEndpoint+0x676>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf2:	4413      	add	r3, r2
 8009bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	00da      	lsls	r2, r3, #3
 8009bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bfe:	4413      	add	r3, r2
 8009c00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <USB_ActivateEndpoint+0x5f0>
 8009c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c30:	801a      	strh	r2, [r3, #0]
 8009c32:	e05d      	b.n	8009cf0 <USB_ActivateEndpoint+0x6ac>
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c3a:	d81c      	bhi.n	8009c76 <USB_ActivateEndpoint+0x632>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <USB_ActivateEndpoint+0x618>
 8009c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c56:	3301      	adds	r3, #1
 8009c58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	029b      	lsls	r3, r3, #10
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	e03c      	b.n	8009cf0 <USB_ActivateEndpoint+0x6ac>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	f003 031f 	and.w	r3, r3, #31
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <USB_ActivateEndpoint+0x652>
 8009c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c90:	3b01      	subs	r3, #1
 8009c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	029b      	lsls	r3, r3, #10
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e01a      	b.n	8009cf0 <USB_ActivateEndpoint+0x6ac>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d116      	bne.n	8009cf0 <USB_ActivateEndpoint+0x6ac>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd2:	4413      	add	r3, r2
 8009cd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	00da      	lsls	r2, r3, #3
 8009cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ce4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cee:	801a      	strh	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d16b      	bne.n	8009dd4 <USB_ActivateEndpoint+0x790>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0c:	4413      	add	r3, r2
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	00da      	lsls	r2, r3, #3
 8009d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d18:	4413      	add	r3, r2
 8009d1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	801a      	strh	r2, [r3, #0]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <USB_ActivateEndpoint+0x70a>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4a:	801a      	strh	r2, [r3, #0]
 8009d4c:	e05b      	b.n	8009e06 <USB_ActivateEndpoint+0x7c2>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d54:	d81c      	bhi.n	8009d90 <USB_ActivateEndpoint+0x74c>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	085b      	lsrs	r3, r3, #1
 8009d5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d004      	beq.n	8009d76 <USB_ActivateEndpoint+0x732>
 8009d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d70:	3301      	adds	r3, #1
 8009d72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	029b      	lsls	r3, r3, #10
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	e03a      	b.n	8009e06 <USB_ActivateEndpoint+0x7c2>
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	095b      	lsrs	r3, r3, #5
 8009d96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 031f 	and.w	r3, r3, #31
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d104      	bne.n	8009db0 <USB_ActivateEndpoint+0x76c>
 8009da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009daa:	3b01      	subs	r3, #1
 8009dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	029b      	lsls	r3, r3, #10
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd0:	801a      	strh	r2, [r3, #0]
 8009dd2:	e018      	b.n	8009e06 <USB_ActivateEndpoint+0x7c2>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	785b      	ldrb	r3, [r3, #1]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d114      	bne.n	8009e06 <USB_ActivateEndpoint+0x7c2>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de8:	4413      	add	r3, r2
 8009dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	00da      	lsls	r2, r3, #3
 8009df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009df4:	4413      	add	r3, r2
 8009df6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e04:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009e1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009e24:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009e26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009e2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	441a      	add	r2, r3
 8009e38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e64:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	441a      	add	r2, r3
 8009e70:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	8013      	strh	r3, [r2, #0]
 8009e86:	e0bc      	b.n	800a002 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009e98:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01d      	beq.n	8009ee0 <USB_ActivateEndpoint+0x89c>
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	441a      	add	r2, r3
 8009ec8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009ef0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01d      	beq.n	8009f38 <USB_ActivateEndpoint+0x8f4>
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f12:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	441a      	add	r2, r3
 8009f20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	78db      	ldrb	r3, [r3, #3]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d024      	beq.n	8009f8a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f56:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009f5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009f5e:	f083 0320 	eor.w	r3, r3, #32
 8009f62:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	441a      	add	r2, r3
 8009f70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	8013      	strh	r3, [r2, #0]
 8009f88:	e01d      	b.n	8009fc6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fa0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	441a      	add	r2, r3
 8009fae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fdc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	441a      	add	r2, r3
 8009fea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a002:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800a006:	4618      	mov	r0, r3
 800a008:	379c      	adds	r7, #156	@ 0x9c
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop

0800a014 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a014:	b480      	push	{r7}
 800a016:	b08d      	sub	sp, #52	@ 0x34
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	7b1b      	ldrb	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f040 808e 	bne.w	800a144 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d044      	beq.n	800a0ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	881b      	ldrh	r3, [r3, #0]
 800a03c:	81bb      	strh	r3, [r7, #12]
 800a03e:	89bb      	ldrh	r3, [r7, #12]
 800a040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01b      	beq.n	800a080 <USB_DeactivateEndpoint+0x6c>
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	b29b      	uxth	r3, r3
 800a056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a05a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a05e:	817b      	strh	r3, [r7, #10]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	441a      	add	r2, r3
 800a06a:	897b      	ldrh	r3, [r7, #10]
 800a06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a078:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a096:	813b      	strh	r3, [r7, #8]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]
 800a0b8:	e192      	b.n	800a3e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	827b      	strh	r3, [r7, #18]
 800a0c8:	8a7b      	ldrh	r3, [r7, #18]
 800a0ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d01b      	beq.n	800a10a <USB_DeactivateEndpoint+0xf6>
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e8:	823b      	strh	r3, [r7, #16]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	441a      	add	r2, r3
 800a0f4:	8a3b      	ldrh	r3, [r7, #16]
 800a0f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a106:	b29b      	uxth	r3, r3
 800a108:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a11c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a120:	81fb      	strh	r3, [r7, #14]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	89fb      	ldrh	r3, [r7, #14]
 800a12e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a13e:	b29b      	uxth	r3, r3
 800a140:	8013      	strh	r3, [r2, #0]
 800a142:	e14d      	b.n	800a3e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 80a5 	bne.w	800a298 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	843b      	strh	r3, [r7, #32]
 800a15c:	8c3b      	ldrh	r3, [r7, #32]
 800a15e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01b      	beq.n	800a19e <USB_DeactivateEndpoint+0x18a>
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	b29b      	uxth	r3, r3
 800a174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17c:	83fb      	strh	r3, [r7, #30]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	441a      	add	r2, r3
 800a188:	8bfb      	ldrh	r3, [r7, #30]
 800a18a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a18e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a192:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	83bb      	strh	r3, [r7, #28]
 800a1ac:	8bbb      	ldrh	r3, [r7, #28]
 800a1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01b      	beq.n	800a1ee <USB_DeactivateEndpoint+0x1da>
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1cc:	837b      	strh	r3, [r7, #26]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	441a      	add	r2, r3
 800a1d8:	8b7b      	ldrh	r3, [r7, #26]
 800a1da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a204:	833b      	strh	r3, [r7, #24]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	441a      	add	r2, r3
 800a210:	8b3b      	ldrh	r3, [r7, #24]
 800a212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a21a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a21e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a222:	b29b      	uxth	r3, r3
 800a224:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23c:	82fb      	strh	r3, [r7, #22]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	441a      	add	r2, r3
 800a248:	8afb      	ldrh	r3, [r7, #22]
 800a24a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a24e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a274:	82bb      	strh	r3, [r7, #20]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	441a      	add	r2, r3
 800a280:	8abb      	ldrh	r3, [r7, #20]
 800a282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a28a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a292:	b29b      	uxth	r3, r3
 800a294:	8013      	strh	r3, [r2, #0]
 800a296:	e0a3      	b.n	800a3e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a2a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a2a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01b      	beq.n	800a2e8 <USB_DeactivateEndpoint+0x2d4>
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	441a      	add	r2, r3
 800a2d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a2d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a2f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01b      	beq.n	800a338 <USB_DeactivateEndpoint+0x324>
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a316:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	441a      	add	r2, r3
 800a322:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a32c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a330:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a334:	b29b      	uxth	r3, r3
 800a336:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	b29b      	uxth	r3, r3
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a34e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	441a      	add	r2, r3
 800a35a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a35c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a364:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a386:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a39c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3be:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	441a      	add	r2, r3
 800a3ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a3cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3734      	adds	r7, #52	@ 0x34
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b0ac      	sub	sp, #176	@ 0xb0
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	785b      	ldrb	r3, [r3, #1]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	f040 84ca 	bne.w	800ad96 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d904      	bls.n	800a418 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a416:	e003      	b.n	800a420 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	7b1b      	ldrb	r3, [r3, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d122      	bne.n	800a46e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	6959      	ldr	r1, [r3, #20]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	88da      	ldrh	r2, [r3, #6]
 800a430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a434:	b29b      	uxth	r3, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 febd 	bl	800b1b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a446:	b29b      	uxth	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	4413      	add	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	00da      	lsls	r2, r3, #3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	4413      	add	r3, r2
 800a45a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a464:	b29a      	uxth	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	801a      	strh	r2, [r3, #0]
 800a46a:	f000 bc6f 	b.w	800ad4c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	78db      	ldrb	r3, [r3, #3]
 800a472:	2b02      	cmp	r3, #2
 800a474:	f040 831e 	bne.w	800aab4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	6a1a      	ldr	r2, [r3, #32]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	429a      	cmp	r2, r3
 800a482:	f240 82cf 	bls.w	800aa24 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	b29b      	uxth	r3, r3
 800a494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a49c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	441a      	add	r2, r3
 800a4aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a4ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4b6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	6a1a      	ldr	r2, [r3, #32]
 800a4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ca:	1ad2      	subs	r2, r2, r3
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 814f 	beq.w	800a786 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d16b      	bne.n	800a5cc <USB_EPStartXfer+0x1de>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	4413      	add	r3, r2
 800a506:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	00da      	lsls	r2, r3, #3
 800a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a510:	4413      	add	r3, r2
 800a512:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a516:	627b      	str	r3, [r7, #36]	@ 0x24
 800a518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a522:	b29a      	uxth	r2, r3
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	801a      	strh	r2, [r3, #0]
 800a528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10a      	bne.n	800a546 <USB_EPStartXfer+0x158>
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	b29b      	uxth	r3, r3
 800a536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a53a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a53e:	b29a      	uxth	r2, r3
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a542:	801a      	strh	r2, [r3, #0]
 800a544:	e05b      	b.n	800a5fe <USB_EPStartXfer+0x210>
 800a546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a54a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a54c:	d81c      	bhi.n	800a588 <USB_EPStartXfer+0x19a>
 800a54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <USB_EPStartXfer+0x180>
 800a564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a568:	3301      	adds	r3, #1
 800a56a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	b29a      	uxth	r2, r3
 800a574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a578:	b29b      	uxth	r3, r3
 800a57a:	029b      	lsls	r3, r3, #10
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	4313      	orrs	r3, r2
 800a580:	b29a      	uxth	r2, r3
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	801a      	strh	r2, [r3, #0]
 800a586:	e03a      	b.n	800a5fe <USB_EPStartXfer+0x210>
 800a588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a596:	f003 031f 	and.w	r3, r3, #31
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <USB_EPStartXfer+0x1ba>
 800a59e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	801a      	strh	r2, [r3, #0]
 800a5ca:	e018      	b.n	800a5fe <USB_EPStartXfer+0x210>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d114      	bne.n	800a5fe <USB_EPStartXfer+0x210>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	461a      	mov	r2, r3
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	4413      	add	r3, r2
 800a5e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	00da      	lsls	r2, r3, #3
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	895b      	ldrh	r3, [r3, #10]
 800a602:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6959      	ldr	r1, [r3, #20]
 800a60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a60e:	b29b      	uxth	r3, r3
 800a610:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fdce 	bl	800b1b6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	695a      	ldr	r2, [r3, #20]
 800a61e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a622:	441a      	add	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6a1a      	ldr	r2, [r3, #32]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	429a      	cmp	r2, r3
 800a632:	d907      	bls.n	800a644 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	6a1a      	ldr	r2, [r3, #32]
 800a638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a63c:	1ad2      	subs	r2, r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	621a      	str	r2, [r3, #32]
 800a642:	e006      	b.n	800a652 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2200      	movs	r2, #0
 800a650:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	785b      	ldrb	r3, [r3, #1]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d16b      	bne.n	800a732 <USB_EPStartXfer+0x344>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	61bb      	str	r3, [r7, #24]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a664:	b29b      	uxth	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	4413      	add	r3, r2
 800a66c:	61bb      	str	r3, [r7, #24]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	00da      	lsls	r2, r3, #3
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	4413      	add	r3, r2
 800a678:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	b29b      	uxth	r3, r3
 800a684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a688:	b29a      	uxth	r2, r3
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	801a      	strh	r2, [r3, #0]
 800a68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <USB_EPStartXfer+0x2be>
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	801a      	strh	r2, [r3, #0]
 800a6aa:	e05d      	b.n	800a768 <USB_EPStartXfer+0x37a>
 800a6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6b2:	d81c      	bhi.n	800a6ee <USB_EPStartXfer+0x300>
 800a6b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6b8:	085b      	lsrs	r3, r3, #1
 800a6ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d004      	beq.n	800a6d4 <USB_EPStartXfer+0x2e6>
 800a6ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	029b      	lsls	r3, r3, #10
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	e03c      	b.n	800a768 <USB_EPStartXfer+0x37a>
 800a6ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6fc:	f003 031f 	and.w	r3, r3, #31
 800a700:	2b00      	cmp	r3, #0
 800a702:	d104      	bne.n	800a70e <USB_EPStartXfer+0x320>
 800a704:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a708:	3b01      	subs	r3, #1
 800a70a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	b29a      	uxth	r2, r3
 800a714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a718:	b29b      	uxth	r3, r3
 800a71a:	029b      	lsls	r3, r3, #10
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	4313      	orrs	r3, r2
 800a720:	b29b      	uxth	r3, r3
 800a722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	e01a      	b.n	800a768 <USB_EPStartXfer+0x37a>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	785b      	ldrb	r3, [r3, #1]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d116      	bne.n	800a768 <USB_EPStartXfer+0x37a>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	623b      	str	r3, [r7, #32]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a744:	b29b      	uxth	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	4413      	add	r3, r2
 800a74c:	623b      	str	r3, [r7, #32]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	00da      	lsls	r2, r3, #3
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	4413      	add	r3, r2
 800a758:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a762:	b29a      	uxth	r2, r3
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	891b      	ldrh	r3, [r3, #8]
 800a76c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	6959      	ldr	r1, [r3, #20]
 800a774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fd19 	bl	800b1b6 <USB_WritePMA>
 800a784:	e2e2      	b.n	800ad4c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d16b      	bne.n	800a866 <USB_EPStartXfer+0x478>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a798:	b29b      	uxth	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a79e:	4413      	add	r3, r2
 800a7a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	00da      	lsls	r2, r3, #3
 800a7a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c0:	801a      	strh	r2, [r3, #0]
 800a7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <USB_EPStartXfer+0x3f2>
 800a7ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	e05d      	b.n	800a89c <USB_EPStartXfer+0x4ae>
 800a7e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7e6:	d81c      	bhi.n	800a822 <USB_EPStartXfer+0x434>
 800a7e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7ec:	085b      	lsrs	r3, r3, #1
 800a7ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <USB_EPStartXfer+0x41a>
 800a7fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a802:	3301      	adds	r3, #1
 800a804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a812:	b29b      	uxth	r3, r3
 800a814:	029b      	lsls	r3, r3, #10
 800a816:	b29b      	uxth	r3, r3
 800a818:	4313      	orrs	r3, r2
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81e:	801a      	strh	r2, [r3, #0]
 800a820:	e03c      	b.n	800a89c <USB_EPStartXfer+0x4ae>
 800a822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a826:	095b      	lsrs	r3, r3, #5
 800a828:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a82c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a830:	f003 031f 	and.w	r3, r3, #31
 800a834:	2b00      	cmp	r3, #0
 800a836:	d104      	bne.n	800a842 <USB_EPStartXfer+0x454>
 800a838:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a83c:	3b01      	subs	r3, #1
 800a83e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29a      	uxth	r2, r3
 800a848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	029b      	lsls	r3, r3, #10
 800a850:	b29b      	uxth	r3, r3
 800a852:	4313      	orrs	r3, r2
 800a854:	b29b      	uxth	r3, r3
 800a856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a85a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a85e:	b29a      	uxth	r2, r3
 800a860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a862:	801a      	strh	r2, [r3, #0]
 800a864:	e01a      	b.n	800a89c <USB_EPStartXfer+0x4ae>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d116      	bne.n	800a89c <USB_EPStartXfer+0x4ae>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	653b      	str	r3, [r7, #80]	@ 0x50
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a878:	b29b      	uxth	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87e:	4413      	add	r3, r2
 800a880:	653b      	str	r3, [r7, #80]	@ 0x50
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	00da      	lsls	r2, r3, #3
 800a888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a88a:	4413      	add	r3, r2
 800a88c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a896:	b29a      	uxth	r2, r3
 800a898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a89a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	891b      	ldrh	r3, [r3, #8]
 800a8a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6959      	ldr	r1, [r3, #20]
 800a8a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fc7f 	bl	800b1b6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	695a      	ldr	r2, [r3, #20]
 800a8bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8c0:	441a      	add	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	6a1a      	ldr	r2, [r3, #32]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d907      	bls.n	800a8e2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	6a1a      	ldr	r2, [r3, #32]
 800a8d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	621a      	str	r2, [r3, #32]
 800a8e0:	e006      	b.n	800a8f0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d16b      	bne.n	800a9d4 <USB_EPStartXfer+0x5e6>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a906:	b29b      	uxth	r3, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90c:	4413      	add	r3, r2
 800a90e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	00da      	lsls	r2, r3, #3
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	4413      	add	r3, r2
 800a91a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92e:	801a      	strh	r2, [r3, #0]
 800a930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <USB_EPStartXfer+0x560>
 800a938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a946:	b29a      	uxth	r2, r3
 800a948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	e05b      	b.n	800aa06 <USB_EPStartXfer+0x618>
 800a94e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a952:	2b3e      	cmp	r3, #62	@ 0x3e
 800a954:	d81c      	bhi.n	800a990 <USB_EPStartXfer+0x5a2>
 800a956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <USB_EPStartXfer+0x588>
 800a96c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a970:	3301      	adds	r3, #1
 800a972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a980:	b29b      	uxth	r3, r3
 800a982:	029b      	lsls	r3, r3, #10
 800a984:	b29b      	uxth	r3, r3
 800a986:	4313      	orrs	r3, r2
 800a988:	b29a      	uxth	r2, r3
 800a98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98c:	801a      	strh	r2, [r3, #0]
 800a98e:	e03a      	b.n	800aa06 <USB_EPStartXfer+0x618>
 800a990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a99e:	f003 031f 	and.w	r3, r3, #31
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d104      	bne.n	800a9b0 <USB_EPStartXfer+0x5c2>
 800a9a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	029b      	lsls	r3, r3, #10
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	e018      	b.n	800aa06 <USB_EPStartXfer+0x618>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	785b      	ldrb	r3, [r3, #1]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d114      	bne.n	800aa06 <USB_EPStartXfer+0x618>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e8:	4413      	add	r3, r2
 800a9ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	00da      	lsls	r2, r3, #3
 800a9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	895b      	ldrh	r3, [r3, #10]
 800aa0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	6959      	ldr	r1, [r3, #20]
 800aa12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fbca 	bl	800b1b6 <USB_WritePMA>
 800aa22:	e193      	b.n	800ad4c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa42:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	441a      	add	r2, r3
 800aa50:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800aa54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa78:	4413      	add	r3, r2
 800aa7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	00da      	lsls	r2, r3, #3
 800aa82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa84:	4413      	add	r3, r2
 800aa86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	891b      	ldrh	r3, [r3, #8]
 800aa9a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	6959      	ldr	r1, [r3, #20]
 800aaa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fb82 	bl	800b1b6 <USB_WritePMA>
 800aab2:	e14b      	b.n	800ad4c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	6a1a      	ldr	r2, [r3, #32]
 800aab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aabc:	1ad2      	subs	r2, r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 809a 	beq.w	800ac0e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	673b      	str	r3, [r7, #112]	@ 0x70
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	785b      	ldrb	r3, [r3, #1]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d16b      	bne.n	800abbe <USB_EPStartXfer+0x7d0>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aaf6:	4413      	add	r3, r2
 800aaf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	00da      	lsls	r2, r3, #3
 800ab00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab02:	4413      	add	r3, r2
 800ab04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab08:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab18:	801a      	strh	r2, [r3, #0]
 800ab1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <USB_EPStartXfer+0x74a>
 800ab22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab34:	801a      	strh	r2, [r3, #0]
 800ab36:	e05b      	b.n	800abf0 <USB_EPStartXfer+0x802>
 800ab38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab3e:	d81c      	bhi.n	800ab7a <USB_EPStartXfer+0x78c>
 800ab40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab44:	085b      	lsrs	r3, r3, #1
 800ab46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <USB_EPStartXfer+0x772>
 800ab56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	029b      	lsls	r3, r3, #10
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4313      	orrs	r3, r2
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab76:	801a      	strh	r2, [r3, #0]
 800ab78:	e03a      	b.n	800abf0 <USB_EPStartXfer+0x802>
 800ab7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d104      	bne.n	800ab9a <USB_EPStartXfer+0x7ac>
 800ab90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab94:	3b01      	subs	r3, #1
 800ab96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	029b      	lsls	r3, r3, #10
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	4313      	orrs	r3, r2
 800abac:	b29b      	uxth	r3, r3
 800abae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abba:	801a      	strh	r2, [r3, #0]
 800abbc:	e018      	b.n	800abf0 <USB_EPStartXfer+0x802>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	785b      	ldrb	r3, [r3, #1]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d114      	bne.n	800abf0 <USB_EPStartXfer+0x802>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abcc:	b29b      	uxth	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abd2:	4413      	add	r3, r2
 800abd4:	673b      	str	r3, [r7, #112]	@ 0x70
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	00da      	lsls	r2, r3, #3
 800abdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abde:	4413      	add	r3, r2
 800abe0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800abe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abea:	b29a      	uxth	r2, r3
 800abec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	895b      	ldrh	r3, [r3, #10]
 800abf4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	6959      	ldr	r1, [r3, #20]
 800abfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fad5 	bl	800b1b6 <USB_WritePMA>
 800ac0c:	e09e      	b.n	800ad4c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d16b      	bne.n	800acee <USB_EPStartXfer+0x900>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac26:	4413      	add	r3, r2
 800ac28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	00da      	lsls	r2, r3, #3
 800ac30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac38:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10a      	bne.n	800ac68 <USB_EPStartXfer+0x87a>
 800ac52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac64:	801a      	strh	r2, [r3, #0]
 800ac66:	e063      	b.n	800ad30 <USB_EPStartXfer+0x942>
 800ac68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac6c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac6e:	d81c      	bhi.n	800acaa <USB_EPStartXfer+0x8bc>
 800ac70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac74:	085b      	lsrs	r3, r3, #1
 800ac76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <USB_EPStartXfer+0x8a2>
 800ac86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	029b      	lsls	r3, r3, #10
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	4313      	orrs	r3, r2
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e042      	b.n	800ad30 <USB_EPStartXfer+0x942>
 800acaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acae:	095b      	lsrs	r3, r3, #5
 800acb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acb8:	f003 031f 	and.w	r3, r3, #31
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <USB_EPStartXfer+0x8dc>
 800acc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800acc4:	3b01      	subs	r3, #1
 800acc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29a      	uxth	r2, r3
 800acd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	029b      	lsls	r3, r3, #10
 800acd8:	b29b      	uxth	r3, r3
 800acda:	4313      	orrs	r3, r2
 800acdc:	b29b      	uxth	r3, r3
 800acde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acea:	801a      	strh	r2, [r3, #0]
 800acec:	e020      	b.n	800ad30 <USB_EPStartXfer+0x942>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	785b      	ldrb	r3, [r3, #1]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d11c      	bne.n	800ad30 <USB_EPStartXfer+0x942>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	461a      	mov	r2, r3
 800ad06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	00da      	lsls	r2, r3, #3
 800ad16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	891b      	ldrh	r3, [r3, #8]
 800ad34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	6959      	ldr	r1, [r3, #20]
 800ad3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fa35 	bl	800b1b6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad62:	817b      	strh	r3, [r7, #10]
 800ad64:	897b      	ldrh	r3, [r7, #10]
 800ad66:	f083 0310 	eor.w	r3, r3, #16
 800ad6a:	817b      	strh	r3, [r7, #10]
 800ad6c:	897b      	ldrh	r3, [r7, #10]
 800ad6e:	f083 0320 	eor.w	r3, r3, #32
 800ad72:	817b      	strh	r3, [r7, #10]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	441a      	add	r2, r3
 800ad7e:	897b      	ldrh	r3, [r7, #10]
 800ad80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	8013      	strh	r3, [r2, #0]
 800ad94:	e0d5      	b.n	800af42 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	7b1b      	ldrb	r3, [r3, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d156      	bne.n	800ae4c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d122      	bne.n	800adec <USB_EPStartXfer+0x9fe>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	78db      	ldrb	r3, [r3, #3]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d11e      	bne.n	800adec <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adc4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	441a      	add	r2, r3
 800add2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800add6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adde:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ade2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	8013      	strh	r3, [r2, #0]
 800adea:	e01d      	b.n	800ae28 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800adfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae02:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	441a      	add	r2, r3
 800ae10:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ae14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	699a      	ldr	r2, [r3, #24]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d907      	bls.n	800ae44 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	699a      	ldr	r2, [r3, #24]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	1ad2      	subs	r2, r2, r3
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	619a      	str	r2, [r3, #24]
 800ae42:	e054      	b.n	800aeee <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2200      	movs	r2, #0
 800ae48:	619a      	str	r2, [r3, #24]
 800ae4a:	e050      	b.n	800aeee <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	78db      	ldrb	r3, [r3, #3]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d142      	bne.n	800aeda <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d048      	beq.n	800aeee <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <USB_EPStartXfer+0xa96>
 800ae78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10b      	bne.n	800ae9c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ae84:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d12e      	bne.n	800aeee <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ae90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d128      	bne.n	800aeee <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeb2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	441a      	add	r2, r3
 800aec0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800aec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aed0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	8013      	strh	r3, [r2, #0]
 800aed8:	e009      	b.n	800aeee <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	78db      	ldrb	r3, [r3, #3]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d103      	bne.n	800aeea <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2200      	movs	r2, #0
 800aee6:	619a      	str	r2, [r3, #24]
 800aee8:	e001      	b.n	800aeee <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e02a      	b.n	800af44 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800af08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800af0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800af14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800af18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	441a      	add	r2, r3
 800af2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800af2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af3e:	b29b      	uxth	r3, r3
 800af40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	37b0      	adds	r7, #176	@ 0xb0
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	785b      	ldrb	r3, [r3, #1]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d020      	beq.n	800afa0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af74:	81bb      	strh	r3, [r7, #12]
 800af76:	89bb      	ldrh	r3, [r7, #12]
 800af78:	f083 0310 	eor.w	r3, r3, #16
 800af7c:	81bb      	strh	r3, [r7, #12]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	441a      	add	r2, r3
 800af88:	89bb      	ldrh	r3, [r7, #12]
 800af8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	8013      	strh	r3, [r2, #0]
 800af9e:	e01f      	b.n	800afe0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	b29b      	uxth	r3, r3
 800afae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afb6:	81fb      	strh	r3, [r7, #14]
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800afbe:	81fb      	strh	r3, [r7, #14]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	441a      	add	r2, r3
 800afca:	89fb      	ldrh	r3, [r7, #14]
 800afcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afdc:	b29b      	uxth	r3, r3
 800afde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afee:	b480      	push	{r7}
 800aff0:	b087      	sub	sp, #28
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d04c      	beq.n	800b09a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	823b      	strh	r3, [r7, #16]
 800b00e:	8a3b      	ldrh	r3, [r7, #16]
 800b010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01b      	beq.n	800b050 <USB_EPClearStall+0x62>
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b02e:	81fb      	strh	r3, [r7, #14]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	441a      	add	r2, r3
 800b03a:	89fb      	ldrh	r3, [r7, #14]
 800b03c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b048:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	78db      	ldrb	r3, [r3, #3]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d06c      	beq.n	800b132 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29b      	uxth	r3, r3
 800b066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b06a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b06e:	81bb      	strh	r3, [r7, #12]
 800b070:	89bb      	ldrh	r3, [r7, #12]
 800b072:	f083 0320 	eor.w	r3, r3, #32
 800b076:	81bb      	strh	r3, [r7, #12]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	441a      	add	r2, r3
 800b082:	89bb      	ldrh	r3, [r7, #12]
 800b084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b08c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b094:	b29b      	uxth	r3, r3
 800b096:	8013      	strh	r3, [r2, #0]
 800b098:	e04b      	b.n	800b132 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	82fb      	strh	r3, [r7, #22]
 800b0a8:	8afb      	ldrh	r3, [r7, #22]
 800b0aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01b      	beq.n	800b0ea <USB_EPClearStall+0xfc>
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c8:	82bb      	strh	r3, [r7, #20]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	441a      	add	r2, r3
 800b0d4:	8abb      	ldrh	r3, [r7, #20]
 800b0d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b100:	827b      	strh	r3, [r7, #18]
 800b102:	8a7b      	ldrh	r3, [r7, #18]
 800b104:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b108:	827b      	strh	r3, [r7, #18]
 800b10a:	8a7b      	ldrh	r3, [r7, #18]
 800b10c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b110:	827b      	strh	r3, [r7, #18]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	441a      	add	r2, r3
 800b11c:	8a7b      	ldrh	r3, [r7, #18]
 800b11e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b12e:	b29b      	uxth	r3, r3
 800b130:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	371c      	adds	r7, #28
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d103      	bne.n	800b15a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2280      	movs	r2, #128	@ 0x80
 800b156:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b176:	b29b      	uxth	r3, r3
 800b178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b17c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b180:	b29a      	uxth	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b08b      	sub	sp, #44	@ 0x2c
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	80fb      	strh	r3, [r7, #6]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b1cc:	88bb      	ldrh	r3, [r7, #4]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	085b      	lsrs	r3, r3, #1
 800b1d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1dc:	88fa      	ldrh	r2, [r7, #6]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1e6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ec:	e01c      	b.n	800b228 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	b21b      	sxth	r3, r3
 800b1fc:	021b      	lsls	r3, r3, #8
 800b1fe:	b21a      	sxth	r2, r3
 800b200:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b204:	4313      	orrs	r3, r2
 800b206:	b21b      	sxth	r3, r3
 800b208:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	8a7a      	ldrh	r2, [r7, #18]
 800b20e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	3302      	adds	r3, #2
 800b214:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	3301      	adds	r3, #1
 800b21a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	3301      	adds	r3, #1
 800b220:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	3b01      	subs	r3, #1
 800b226:	627b      	str	r3, [r7, #36]	@ 0x24
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1df      	bne.n	800b1ee <USB_WritePMA+0x38>
  }
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	372c      	adds	r7, #44	@ 0x2c
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b08b      	sub	sp, #44	@ 0x2c
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4611      	mov	r1, r2
 800b248:	461a      	mov	r2, r3
 800b24a:	460b      	mov	r3, r1
 800b24c:	80fb      	strh	r3, [r7, #6]
 800b24e:	4613      	mov	r3, r2
 800b250:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b252:	88bb      	ldrh	r3, [r7, #4]
 800b254:	085b      	lsrs	r3, r3, #1
 800b256:	b29b      	uxth	r3, r3
 800b258:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b262:	88fa      	ldrh	r2, [r7, #6]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b26c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	627b      	str	r3, [r7, #36]	@ 0x24
 800b272:	e018      	b.n	800b2a6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	3302      	adds	r3, #2
 800b280:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	b2da      	uxtb	r2, r3
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	3301      	adds	r3, #1
 800b28e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	0a1b      	lsrs	r3, r3, #8
 800b294:	b2da      	uxtb	r2, r3
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	3301      	adds	r3, #1
 800b29e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e3      	bne.n	800b274 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b2ac:	88bb      	ldrh	r3, [r7, #4]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d007      	beq.n	800b2c8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	701a      	strb	r2, [r3, #0]
  }
}
 800b2c8:	bf00      	nop
 800b2ca:	372c      	adds	r7, #44	@ 0x2c
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b2e4:	f002 fc74 	bl	800dbd0 <USBD_static_malloc>
 800b2e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d109      	bne.n	800b304 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	32b0      	adds	r2, #176	@ 0xb0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b300:	2302      	movs	r3, #2
 800b302:	e0d4      	b.n	800b4ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b304:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b308:	2100      	movs	r1, #0
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f003 fab4 	bl	800e878 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	32b0      	adds	r2, #176	@ 0xb0
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	32b0      	adds	r2, #176	@ 0xb0
 800b32a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	7c1b      	ldrb	r3, [r3, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d138      	bne.n	800b3ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b33c:	4b5e      	ldr	r3, [pc, #376]	@ (800b4b8 <USBD_CDC_Init+0x1e4>)
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b344:	2202      	movs	r2, #2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f002 fae9 	bl	800d91e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b34c:	4b5a      	ldr	r3, [pc, #360]	@ (800b4b8 <USBD_CDC_Init+0x1e4>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 020f 	and.w	r2, r3, #15
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	4613      	mov	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	440b      	add	r3, r1
 800b360:	3324      	adds	r3, #36	@ 0x24
 800b362:	2201      	movs	r2, #1
 800b364:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b366:	4b55      	ldr	r3, [pc, #340]	@ (800b4bc <USBD_CDC_Init+0x1e8>)
 800b368:	7819      	ldrb	r1, [r3, #0]
 800b36a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b36e:	2202      	movs	r2, #2
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f002 fad4 	bl	800d91e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b376:	4b51      	ldr	r3, [pc, #324]	@ (800b4bc <USBD_CDC_Init+0x1e8>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	f003 020f 	and.w	r2, r3, #15
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	440b      	add	r3, r1
 800b38a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b38e:	2201      	movs	r2, #1
 800b390:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b392:	4b4b      	ldr	r3, [pc, #300]	@ (800b4c0 <USBD_CDC_Init+0x1ec>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	f003 020f 	and.w	r2, r3, #15
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	3326      	adds	r3, #38	@ 0x26
 800b3a8:	2210      	movs	r2, #16
 800b3aa:	801a      	strh	r2, [r3, #0]
 800b3ac:	e035      	b.n	800b41a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b3ae:	4b42      	ldr	r3, [pc, #264]	@ (800b4b8 <USBD_CDC_Init+0x1e4>)
 800b3b0:	7819      	ldrb	r1, [r3, #0]
 800b3b2:	2340      	movs	r3, #64	@ 0x40
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f002 fab1 	bl	800d91e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b3bc:	4b3e      	ldr	r3, [pc, #248]	@ (800b4b8 <USBD_CDC_Init+0x1e4>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 020f 	and.w	r2, r3, #15
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	440b      	add	r3, r1
 800b3d0:	3324      	adds	r3, #36	@ 0x24
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b3d6:	4b39      	ldr	r3, [pc, #228]	@ (800b4bc <USBD_CDC_Init+0x1e8>)
 800b3d8:	7819      	ldrb	r1, [r3, #0]
 800b3da:	2340      	movs	r3, #64	@ 0x40
 800b3dc:	2202      	movs	r2, #2
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f002 fa9d 	bl	800d91e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b3e4:	4b35      	ldr	r3, [pc, #212]	@ (800b4bc <USBD_CDC_Init+0x1e8>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 020f 	and.w	r2, r3, #15
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	440b      	add	r3, r1
 800b3f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b400:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c0 <USBD_CDC_Init+0x1ec>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 020f 	and.w	r2, r3, #15
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	3326      	adds	r3, #38	@ 0x26
 800b416:	2210      	movs	r2, #16
 800b418:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b41a:	4b29      	ldr	r3, [pc, #164]	@ (800b4c0 <USBD_CDC_Init+0x1ec>)
 800b41c:	7819      	ldrb	r1, [r3, #0]
 800b41e:	2308      	movs	r3, #8
 800b420:	2203      	movs	r2, #3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f002 fa7b 	bl	800d91e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b428:	4b25      	ldr	r3, [pc, #148]	@ (800b4c0 <USBD_CDC_Init+0x1ec>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	f003 020f 	and.w	r2, r3, #15
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	440b      	add	r3, r1
 800b43c:	3324      	adds	r3, #36	@ 0x24
 800b43e:	2201      	movs	r2, #1
 800b440:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	33b0      	adds	r3, #176	@ 0xb0
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b478:	2302      	movs	r3, #2
 800b47a:	e018      	b.n	800b4ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7c1b      	ldrb	r3, [r3, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b484:	4b0d      	ldr	r3, [pc, #52]	@ (800b4bc <USBD_CDC_Init+0x1e8>)
 800b486:	7819      	ldrb	r1, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b48e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f002 fb32 	bl	800dafc <USBD_LL_PrepareReceive>
 800b498:	e008      	b.n	800b4ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b49a:	4b08      	ldr	r3, [pc, #32]	@ (800b4bc <USBD_CDC_Init+0x1e8>)
 800b49c:	7819      	ldrb	r1, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4a4:	2340      	movs	r3, #64	@ 0x40
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f002 fb28 	bl	800dafc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200000bf 	.word	0x200000bf
 800b4bc:	200000c0 	.word	0x200000c0
 800b4c0:	200000c1 	.word	0x200000c1

0800b4c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b4d0:	4b3a      	ldr	r3, [pc, #232]	@ (800b5bc <USBD_CDC_DeInit+0xf8>)
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f002 fa47 	bl	800d96a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b4dc:	4b37      	ldr	r3, [pc, #220]	@ (800b5bc <USBD_CDC_DeInit+0xf8>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	f003 020f 	and.w	r2, r3, #15
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	440b      	add	r3, r1
 800b4f0:	3324      	adds	r3, #36	@ 0x24
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b4f6:	4b32      	ldr	r3, [pc, #200]	@ (800b5c0 <USBD_CDC_DeInit+0xfc>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f002 fa34 	bl	800d96a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b502:	4b2f      	ldr	r3, [pc, #188]	@ (800b5c0 <USBD_CDC_DeInit+0xfc>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	f003 020f 	and.w	r2, r3, #15
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4613      	mov	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	440b      	add	r3, r1
 800b516:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b51a:	2200      	movs	r2, #0
 800b51c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b51e:	4b29      	ldr	r3, [pc, #164]	@ (800b5c4 <USBD_CDC_DeInit+0x100>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f002 fa20 	bl	800d96a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b52a:	4b26      	ldr	r3, [pc, #152]	@ (800b5c4 <USBD_CDC_DeInit+0x100>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f003 020f 	and.w	r2, r3, #15
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	4613      	mov	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	440b      	add	r3, r1
 800b53e:	3324      	adds	r3, #36	@ 0x24
 800b540:	2200      	movs	r2, #0
 800b542:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b544:	4b1f      	ldr	r3, [pc, #124]	@ (800b5c4 <USBD_CDC_DeInit+0x100>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f003 020f 	and.w	r2, r3, #15
 800b54c:	6879      	ldr	r1, [r7, #4]
 800b54e:	4613      	mov	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	440b      	add	r3, r1
 800b558:	3326      	adds	r3, #38	@ 0x26
 800b55a:	2200      	movs	r2, #0
 800b55c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	32b0      	adds	r2, #176	@ 0xb0
 800b568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01f      	beq.n	800b5b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	33b0      	adds	r3, #176	@ 0xb0
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	32b0      	adds	r2, #176	@ 0xb0
 800b58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b592:	4618      	mov	r0, r3
 800b594:	f002 fb2a 	bl	800dbec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	32b0      	adds	r2, #176	@ 0xb0
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200000bf 	.word	0x200000bf
 800b5c0:	200000c0 	.word	0x200000c0
 800b5c4:	200000c1 	.word	0x200000c1

0800b5c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	32b0      	adds	r2, #176	@ 0xb0
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e0bf      	b.n	800b778 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b600:	2b00      	cmp	r3, #0
 800b602:	d050      	beq.n	800b6a6 <USBD_CDC_Setup+0xde>
 800b604:	2b20      	cmp	r3, #32
 800b606:	f040 80af 	bne.w	800b768 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	88db      	ldrh	r3, [r3, #6]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d03a      	beq.n	800b688 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	b25b      	sxtb	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da1b      	bge.n	800b654 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	33b0      	adds	r3, #176	@ 0xb0
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b632:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	88d2      	ldrh	r2, [r2, #6]
 800b638:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b07      	cmp	r3, #7
 800b640:	bf28      	it	cs
 800b642:	2307      	movcs	r3, #7
 800b644:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	89fa      	ldrh	r2, [r7, #14]
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f001 fd47 	bl	800d0e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b652:	e090      	b.n	800b776 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	785a      	ldrb	r2, [r3, #1]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	88db      	ldrh	r3, [r3, #6]
 800b662:	2b3f      	cmp	r3, #63	@ 0x3f
 800b664:	d803      	bhi.n	800b66e <USBD_CDC_Setup+0xa6>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	88db      	ldrh	r3, [r3, #6]
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	e000      	b.n	800b670 <USBD_CDC_Setup+0xa8>
 800b66e:	2240      	movs	r2, #64	@ 0x40
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b676:	6939      	ldr	r1, [r7, #16]
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b67e:	461a      	mov	r2, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f001 fd59 	bl	800d138 <USBD_CtlPrepareRx>
      break;
 800b686:	e076      	b.n	800b776 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	33b0      	adds	r3, #176	@ 0xb0
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	7850      	ldrb	r0, [r2, #1]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	4798      	blx	r3
      break;
 800b6a4:	e067      	b.n	800b776 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	2b0b      	cmp	r3, #11
 800b6ac:	d851      	bhi.n	800b752 <USBD_CDC_Setup+0x18a>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <USBD_CDC_Setup+0xec>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6e5 	.word	0x0800b6e5
 800b6b8:	0800b761 	.word	0x0800b761
 800b6bc:	0800b753 	.word	0x0800b753
 800b6c0:	0800b753 	.word	0x0800b753
 800b6c4:	0800b753 	.word	0x0800b753
 800b6c8:	0800b753 	.word	0x0800b753
 800b6cc:	0800b753 	.word	0x0800b753
 800b6d0:	0800b753 	.word	0x0800b753
 800b6d4:	0800b753 	.word	0x0800b753
 800b6d8:	0800b753 	.word	0x0800b753
 800b6dc:	0800b70f 	.word	0x0800b70f
 800b6e0:	0800b739 	.word	0x0800b739
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d107      	bne.n	800b700 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b6f0:	f107 030a 	add.w	r3, r7, #10
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f001 fcf1 	bl	800d0e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6fe:	e032      	b.n	800b766 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f001 fc6f 	bl	800cfe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b708:	2303      	movs	r3, #3
 800b70a:	75fb      	strb	r3, [r7, #23]
          break;
 800b70c:	e02b      	b.n	800b766 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b03      	cmp	r3, #3
 800b718:	d107      	bne.n	800b72a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b71a:	f107 030d 	add.w	r3, r7, #13
 800b71e:	2201      	movs	r2, #1
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 fcdc 	bl	800d0e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b728:	e01d      	b.n	800b766 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 fc5a 	bl	800cfe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b732:	2303      	movs	r3, #3
 800b734:	75fb      	strb	r3, [r7, #23]
          break;
 800b736:	e016      	b.n	800b766 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b03      	cmp	r3, #3
 800b742:	d00f      	beq.n	800b764 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 fc4d 	bl	800cfe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b74c:	2303      	movs	r3, #3
 800b74e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b750:	e008      	b.n	800b764 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 fc46 	bl	800cfe6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b75a:	2303      	movs	r3, #3
 800b75c:	75fb      	strb	r3, [r7, #23]
          break;
 800b75e:	e002      	b.n	800b766 <USBD_CDC_Setup+0x19e>
          break;
 800b760:	bf00      	nop
 800b762:	e008      	b.n	800b776 <USBD_CDC_Setup+0x1ae>
          break;
 800b764:	bf00      	nop
      }
      break;
 800b766:	e006      	b.n	800b776 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 fc3b 	bl	800cfe6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b770:	2303      	movs	r3, #3
 800b772:	75fb      	strb	r3, [r7, #23]
      break;
 800b774:	bf00      	nop
  }

  return (uint8_t)ret;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b792:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	32b0      	adds	r2, #176	@ 0xb0
 800b79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e065      	b.n	800b876 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	32b0      	adds	r2, #176	@ 0xb0
 800b7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b7ba:	78fb      	ldrb	r3, [r7, #3]
 800b7bc:	f003 020f 	and.w	r2, r3, #15
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	440b      	add	r3, r1
 800b7cc:	3318      	adds	r3, #24
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d02f      	beq.n	800b834 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	f003 020f 	and.w	r2, r3, #15
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	f003 010f 	and.w	r1, r3, #15
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	440b      	add	r3, r1
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	4403      	add	r3, r0
 800b7fc:	3320      	adds	r3, #32
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	fbb2 f1f3 	udiv	r1, r2, r3
 800b804:	fb01 f303 	mul.w	r3, r1, r3
 800b808:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d112      	bne.n	800b834 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	f003 020f 	and.w	r2, r3, #15
 800b814:	6879      	ldr	r1, [r7, #4]
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	440b      	add	r3, r1
 800b820:	3318      	adds	r3, #24
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b826:	78f9      	ldrb	r1, [r7, #3]
 800b828:	2300      	movs	r3, #0
 800b82a:	2200      	movs	r2, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f002 f944 	bl	800daba <USBD_LL_Transmit>
 800b832:	e01f      	b.n	800b874 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2200      	movs	r2, #0
 800b838:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	33b0      	adds	r3, #176	@ 0xb0
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d010      	beq.n	800b874 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	33b0      	adds	r3, #176	@ 0xb0
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	460b      	mov	r3, r1
 800b888:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	32b0      	adds	r2, #176	@ 0xb0
 800b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b898:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	32b0      	adds	r2, #176	@ 0xb0
 800b8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e01a      	b.n	800b8e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f002 f942 	bl	800db3e <USBD_LL_GetRxDataSize>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	33b0      	adds	r3, #176	@ 0xb0
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	32b0      	adds	r2, #176	@ 0xb0
 800b900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b904:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e024      	b.n	800b95a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	33b0      	adds	r3, #176	@ 0xb0
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d019      	beq.n	800b958 <USBD_CDC_EP0_RxReady+0x6a>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b92a:	2bff      	cmp	r3, #255	@ 0xff
 800b92c:	d014      	beq.n	800b958 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	33b0      	adds	r3, #176	@ 0xb0
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b946:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b94e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	22ff      	movs	r2, #255	@ 0xff
 800b954:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
	...

0800b964 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b96c:	2182      	movs	r1, #130	@ 0x82
 800b96e:	4818      	ldr	r0, [pc, #96]	@ (800b9d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b970:	f000 fcd9 	bl	800c326 <USBD_GetEpDesc>
 800b974:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b976:	2101      	movs	r1, #1
 800b978:	4815      	ldr	r0, [pc, #84]	@ (800b9d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b97a:	f000 fcd4 	bl	800c326 <USBD_GetEpDesc>
 800b97e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b980:	2181      	movs	r1, #129	@ 0x81
 800b982:	4813      	ldr	r0, [pc, #76]	@ (800b9d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b984:	f000 fccf 	bl	800c326 <USBD_GetEpDesc>
 800b988:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2210      	movs	r2, #16
 800b994:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d006      	beq.n	800b9aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9a4:	711a      	strb	r2, [r3, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9b8:	711a      	strb	r2, [r3, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2243      	movs	r2, #67	@ 0x43
 800b9c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9c4:	4b02      	ldr	r3, [pc, #8]	@ (800b9d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	2000007c 	.word	0x2000007c

0800b9d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9dc:	2182      	movs	r1, #130	@ 0x82
 800b9de:	4818      	ldr	r0, [pc, #96]	@ (800ba40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9e0:	f000 fca1 	bl	800c326 <USBD_GetEpDesc>
 800b9e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	4815      	ldr	r0, [pc, #84]	@ (800ba40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9ea:	f000 fc9c 	bl	800c326 <USBD_GetEpDesc>
 800b9ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9f0:	2181      	movs	r1, #129	@ 0x81
 800b9f2:	4813      	ldr	r0, [pc, #76]	@ (800ba40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9f4:	f000 fc97 	bl	800c326 <USBD_GetEpDesc>
 800b9f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2210      	movs	r2, #16
 800ba04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d006      	beq.n	800ba1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	711a      	strb	r2, [r3, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f042 0202 	orr.w	r2, r2, #2
 800ba18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d006      	beq.n	800ba2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	711a      	strb	r2, [r3, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f042 0202 	orr.w	r2, r2, #2
 800ba2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2243      	movs	r2, #67	@ 0x43
 800ba32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba34:	4b02      	ldr	r3, [pc, #8]	@ (800ba40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	2000007c 	.word	0x2000007c

0800ba44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ba4c:	2182      	movs	r1, #130	@ 0x82
 800ba4e:	4818      	ldr	r0, [pc, #96]	@ (800bab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba50:	f000 fc69 	bl	800c326 <USBD_GetEpDesc>
 800ba54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ba56:	2101      	movs	r1, #1
 800ba58:	4815      	ldr	r0, [pc, #84]	@ (800bab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba5a:	f000 fc64 	bl	800c326 <USBD_GetEpDesc>
 800ba5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba60:	2181      	movs	r1, #129	@ 0x81
 800ba62:	4813      	ldr	r0, [pc, #76]	@ (800bab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba64:	f000 fc5f 	bl	800c326 <USBD_GetEpDesc>
 800ba68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2210      	movs	r2, #16
 800ba74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d006      	beq.n	800ba8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba84:	711a      	strb	r2, [r3, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d006      	beq.n	800ba9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba98:	711a      	strb	r2, [r3, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2243      	movs	r2, #67	@ 0x43
 800baa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800baa4:	4b02      	ldr	r3, [pc, #8]	@ (800bab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	2000007c 	.word	0x2000007c

0800bab4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	220a      	movs	r2, #10
 800bac0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bac2:	4b03      	ldr	r3, [pc, #12]	@ (800bad0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	20000038 	.word	0x20000038

0800bad4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bae4:	2303      	movs	r3, #3
 800bae6:	e009      	b.n	800bafc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	33b0      	adds	r3, #176	@ 0xb0
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b087      	sub	sp, #28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	32b0      	adds	r2, #176	@ 0xb0
 800bb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb22:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e008      	b.n	800bb40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	32b0      	adds	r2, #176	@ 0xb0
 800bb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	e004      	b.n	800bb7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
	...

0800bb88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	32b0      	adds	r2, #176	@ 0xb0
 800bb9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bba0:	2301      	movs	r3, #1
 800bba2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e025      	b.n	800bbfa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d11f      	bne.n	800bbf8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bbc0:	4b10      	ldr	r3, [pc, #64]	@ (800bc04 <USBD_CDC_TransmitPacket+0x7c>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	f003 020f 	and.w	r2, r3, #15
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4403      	add	r3, r0
 800bbda:	3318      	adds	r3, #24
 800bbdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bbde:	4b09      	ldr	r3, [pc, #36]	@ (800bc04 <USBD_CDC_TransmitPacket+0x7c>)
 800bbe0:	7819      	ldrb	r1, [r3, #0]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f001 ff63 	bl	800daba <USBD_LL_Transmit>

    ret = USBD_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	200000bf 	.word	0x200000bf

0800bc08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	32b0      	adds	r2, #176	@ 0xb0
 800bc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	32b0      	adds	r2, #176	@ 0xb0
 800bc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bc32:	2303      	movs	r3, #3
 800bc34:	e018      	b.n	800bc68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	7c1b      	ldrb	r3, [r3, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc70 <USBD_CDC_ReceivePacket+0x68>)
 800bc40:	7819      	ldrb	r1, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f001 ff55 	bl	800dafc <USBD_LL_PrepareReceive>
 800bc52:	e008      	b.n	800bc66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc54:	4b06      	ldr	r3, [pc, #24]	@ (800bc70 <USBD_CDC_ReceivePacket+0x68>)
 800bc56:	7819      	ldrb	r1, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc5e:	2340      	movs	r3, #64	@ 0x40
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 ff4b 	bl	800dafc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	200000c0 	.word	0x200000c0

0800bc74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800bc88:	4817      	ldr	r0, [pc, #92]	@ (800bce8 <USBD_Init+0x74>)
 800bc8a:	f002 fd03 	bl	800e694 <iprintf>
 800bc8e:	4817      	ldr	r0, [pc, #92]	@ (800bcec <USBD_Init+0x78>)
 800bc90:	f002 fd00 	bl	800e694 <iprintf>
 800bc94:	200a      	movs	r0, #10
 800bc96:	f002 fd0f 	bl	800e6b8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e01f      	b.n	800bcde <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	79fa      	ldrb	r2, [r7, #7]
 800bcd0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f001 fda6 	bl	800d824 <USBD_LL_Init>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	0801064c 	.word	0x0801064c
 800bcec:	08010654 	.word	0x08010654

0800bcf0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800bd04:	481a      	ldr	r0, [pc, #104]	@ (800bd70 <USBD_RegisterClass+0x80>)
 800bd06:	f002 fcc5 	bl	800e694 <iprintf>
 800bd0a:	481a      	ldr	r0, [pc, #104]	@ (800bd74 <USBD_RegisterClass+0x84>)
 800bd0c:	f002 fcc2 	bl	800e694 <iprintf>
 800bd10:	200a      	movs	r0, #10
 800bd12:	f002 fcd1 	bl	800e6b8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e025      	b.n	800bd66 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	32ae      	adds	r2, #174	@ 0xae
 800bd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00f      	beq.n	800bd56 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	32ae      	adds	r2, #174	@ 0xae
 800bd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd46:	f107 020e 	add.w	r2, r7, #14
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4798      	blx	r3
 800bd4e:	4602      	mov	r2, r0
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	0801064c 	.word	0x0801064c
 800bd74:	0801066c 	.word	0x0801066c

0800bd78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 fdb1 	bl	800d8e8 <USBD_LL_Start>
 800bd86:	4603      	mov	r3, r0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b084      	sub	sp, #16
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	460b      	mov	r3, r1
 800bdb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d009      	beq.n	800bdd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	78fa      	ldrb	r2, [r7, #3]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	4798      	blx	r3
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be08:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	4618      	mov	r0, r3
 800be26:	f001 f8a4 	bl	800cf72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800be38:	461a      	mov	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be46:	f003 031f 	and.w	r3, r3, #31
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d01a      	beq.n	800be84 <USBD_LL_SetupStage+0x72>
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d822      	bhi.n	800be98 <USBD_LL_SetupStage+0x86>
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <USBD_LL_SetupStage+0x4a>
 800be56:	2b01      	cmp	r3, #1
 800be58:	d00a      	beq.n	800be70 <USBD_LL_SetupStage+0x5e>
 800be5a:	e01d      	b.n	800be98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fad1 	bl	800c40c <USBD_StdDevReq>
 800be6a:	4603      	mov	r3, r0
 800be6c:	73fb      	strb	r3, [r7, #15]
      break;
 800be6e:	e020      	b.n	800beb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fb39 	bl	800c4f0 <USBD_StdItfReq>
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]
      break;
 800be82:	e016      	b.n	800beb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fb9b 	bl	800c5c8 <USBD_StdEPReq>
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]
      break;
 800be96:	e00c      	b.n	800beb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f001 fd7e 	bl	800d9a8 <USBD_LL_StallEP>
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]
      break;
 800beb0:	bf00      	nop
  }

  return ret;
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	460b      	mov	r3, r1
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bece:	7afb      	ldrb	r3, [r7, #11]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d16e      	bne.n	800bfb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800beda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	f040 8098 	bne.w	800c018 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	689a      	ldr	r2, [r3, #8]
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d913      	bls.n	800bf1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	1ad2      	subs	r2, r2, r3
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	bf28      	it	cs
 800bf0e:	4613      	movcs	r3, r2
 800bf10:	461a      	mov	r2, r3
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f001 f92c 	bl	800d172 <USBD_CtlContinueRx>
 800bf1a:	e07d      	b.n	800c018 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf22:	f003 031f 	and.w	r3, r3, #31
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d014      	beq.n	800bf54 <USBD_LL_DataOutStage+0x98>
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d81d      	bhi.n	800bf6a <USBD_LL_DataOutStage+0xae>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <USBD_LL_DataOutStage+0x7c>
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d003      	beq.n	800bf3e <USBD_LL_DataOutStage+0x82>
 800bf36:	e018      	b.n	800bf6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	75bb      	strb	r3, [r7, #22]
            break;
 800bf3c:	e018      	b.n	800bf70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	4619      	mov	r1, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f9d2 	bl	800c2f2 <USBD_CoreFindIF>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75bb      	strb	r3, [r7, #22]
            break;
 800bf52:	e00d      	b.n	800bf70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f000 f9d4 	bl	800c30c <USBD_CoreFindEP>
 800bf64:	4603      	mov	r3, r0
 800bf66:	75bb      	strb	r3, [r7, #22]
            break;
 800bf68:	e002      	b.n	800bf70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	75bb      	strb	r3, [r7, #22]
            break;
 800bf6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bf70:	7dbb      	ldrb	r3, [r7, #22]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d119      	bne.n	800bfaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d113      	bne.n	800bfaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bf82:	7dba      	ldrb	r2, [r7, #22]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	32ae      	adds	r2, #174	@ 0xae
 800bf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00b      	beq.n	800bfaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bf92:	7dba      	ldrb	r2, [r7, #22]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bf9a:	7dba      	ldrb	r2, [r7, #22]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	32ae      	adds	r2, #174	@ 0xae
 800bfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f001 f8f2 	bl	800d194 <USBD_CtlSendStatus>
 800bfb0:	e032      	b.n	800c018 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bfb2:	7afb      	ldrb	r3, [r7, #11]
 800bfb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 f9a5 	bl	800c30c <USBD_CoreFindEP>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfc6:	7dbb      	ldrb	r3, [r7, #22]
 800bfc8:	2bff      	cmp	r3, #255	@ 0xff
 800bfca:	d025      	beq.n	800c018 <USBD_LL_DataOutStage+0x15c>
 800bfcc:	7dbb      	ldrb	r3, [r7, #22]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d122      	bne.n	800c018 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d117      	bne.n	800c00e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bfde:	7dba      	ldrb	r2, [r7, #22]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	32ae      	adds	r2, #174	@ 0xae
 800bfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00f      	beq.n	800c00e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bfee:	7dba      	ldrb	r2, [r7, #22]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bff6:	7dba      	ldrb	r2, [r7, #22]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	32ae      	adds	r2, #174	@ 0xae
 800bffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	7afa      	ldrb	r2, [r7, #11]
 800c004:	4611      	mov	r1, r2
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	4798      	blx	r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	e000      	b.n	800c01a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	60f8      	str	r0, [r7, #12]
 800c02a:	460b      	mov	r3, r1
 800c02c:	607a      	str	r2, [r7, #4]
 800c02e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c030:	7afb      	ldrb	r3, [r7, #11]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d16f      	bne.n	800c116 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3314      	adds	r3, #20
 800c03a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c042:	2b02      	cmp	r3, #2
 800c044:	d15a      	bne.n	800c0fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	689a      	ldr	r2, [r3, #8]
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d914      	bls.n	800c07c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	1ad2      	subs	r2, r2, r3
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	461a      	mov	r2, r3
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f001 f854 	bl	800d116 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c06e:	2300      	movs	r3, #0
 800c070:	2200      	movs	r2, #0
 800c072:	2100      	movs	r1, #0
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f001 fd41 	bl	800dafc <USBD_LL_PrepareReceive>
 800c07a:	e03f      	b.n	800c0fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	68da      	ldr	r2, [r3, #12]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	429a      	cmp	r2, r3
 800c086:	d11c      	bne.n	800c0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c090:	429a      	cmp	r2, r3
 800c092:	d316      	bcc.n	800c0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d20f      	bcs.n	800c0c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f001 f835 	bl	800d116 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f001 fd1e 	bl	800dafc <USBD_LL_PrepareReceive>
 800c0c0:	e01c      	b.n	800c0fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d10f      	bne.n	800c0ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d009      	beq.n	800c0ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ee:	2180      	movs	r1, #128	@ 0x80
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f001 fc59 	bl	800d9a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f001 f85f 	bl	800d1ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d03a      	beq.n	800c17c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7ff fe42 	bl	800bd90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c114:	e032      	b.n	800c17c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c116:	7afb      	ldrb	r3, [r7, #11]
 800c118:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f8f3 	bl	800c30c <USBD_CoreFindEP>
 800c126:	4603      	mov	r3, r0
 800c128:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	2bff      	cmp	r3, #255	@ 0xff
 800c12e:	d025      	beq.n	800c17c <USBD_LL_DataInStage+0x15a>
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d122      	bne.n	800c17c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d11c      	bne.n	800c17c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c142:	7dfa      	ldrb	r2, [r7, #23]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	32ae      	adds	r2, #174	@ 0xae
 800c148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d014      	beq.n	800c17c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c152:	7dfa      	ldrb	r2, [r7, #23]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c15a:	7dfa      	ldrb	r2, [r7, #23]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	32ae      	adds	r2, #174	@ 0xae
 800c160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	7afa      	ldrb	r2, [r7, #11]
 800c168:	4611      	mov	r1, r2
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	4798      	blx	r3
 800c16e:	4603      	mov	r3, r0
 800c170:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c172:	7dbb      	ldrb	r3, [r7, #22]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c178:	7dbb      	ldrb	r3, [r7, #22]
 800c17a:	e000      	b.n	800c17e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d014      	beq.n	800c1ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00e      	beq.n	800c1ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	6852      	ldr	r2, [r2, #4]
 800c1da:	b2d2      	uxtb	r2, r2
 800c1dc:	4611      	mov	r1, r2
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1ec:	2340      	movs	r3, #64	@ 0x40
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f001 fb93 	bl	800d91e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2240      	movs	r2, #64	@ 0x40
 800c204:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c208:	2340      	movs	r3, #64	@ 0x40
 800c20a:	2200      	movs	r2, #0
 800c20c:	2180      	movs	r1, #128	@ 0x80
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fb85 	bl	800d91e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2240      	movs	r2, #64	@ 0x40
 800c21e:	621a      	str	r2, [r3, #32]

  return ret;
 800c220:	7bfb      	ldrb	r3, [r7, #15]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	78fa      	ldrb	r2, [r7, #3]
 800c23a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b083      	sub	sp, #12
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b04      	cmp	r3, #4
 800c25c:	d006      	beq.n	800c26c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c264:	b2da      	uxtb	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2204      	movs	r2, #4
 800c270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c282:	b480      	push	{r7}
 800c284:	b083      	sub	sp, #12
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b04      	cmp	r3, #4
 800c294:	d106      	bne.n	800c2a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b082      	sub	sp, #8
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d110      	bne.n	800c2e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00b      	beq.n	800c2e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d005      	beq.n	800c2e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2e2:	69db      	ldr	r3, [r3, #28]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b083      	sub	sp, #12
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b086      	sub	sp, #24
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	460b      	mov	r3, r1
 800c330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	885b      	ldrh	r3, [r3, #2]
 800c342:	b29b      	uxth	r3, r3
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	7812      	ldrb	r2, [r2, #0]
 800c348:	4293      	cmp	r3, r2
 800c34a:	d91f      	bls.n	800c38c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c352:	e013      	b.n	800c37c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c354:	f107 030a 	add.w	r3, r7, #10
 800c358:	4619      	mov	r1, r3
 800c35a:	6978      	ldr	r0, [r7, #20]
 800c35c:	f000 f81b 	bl	800c396 <USBD_GetNextDesc>
 800c360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	2b05      	cmp	r3, #5
 800c368:	d108      	bne.n	800c37c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	789b      	ldrb	r3, [r3, #2]
 800c372:	78fa      	ldrb	r2, [r7, #3]
 800c374:	429a      	cmp	r2, r3
 800c376:	d008      	beq.n	800c38a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c378:	2300      	movs	r3, #0
 800c37a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	885b      	ldrh	r3, [r3, #2]
 800c380:	b29a      	uxth	r2, r3
 800c382:	897b      	ldrh	r3, [r7, #10]
 800c384:	429a      	cmp	r2, r3
 800c386:	d8e5      	bhi.n	800c354 <USBD_GetEpDesc+0x2e>
 800c388:	e000      	b.n	800c38c <USBD_GetEpDesc+0x66>
          break;
 800c38a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c38c:	693b      	ldr	r3, [r7, #16]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c396:	b480      	push	{r7}
 800c398:	b085      	sub	sp, #20
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	7812      	ldrb	r2, [r2, #0]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b087      	sub	sp, #28
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	b21a      	sxth	r2, r3
 800c3f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	b21b      	sxth	r3, r3
 800c3fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3fe:	89fb      	ldrh	r3, [r7, #14]
}
 800c400:	4618      	mov	r0, r3
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c422:	2b40      	cmp	r3, #64	@ 0x40
 800c424:	d005      	beq.n	800c432 <USBD_StdDevReq+0x26>
 800c426:	2b40      	cmp	r3, #64	@ 0x40
 800c428:	d857      	bhi.n	800c4da <USBD_StdDevReq+0xce>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00f      	beq.n	800c44e <USBD_StdDevReq+0x42>
 800c42e:	2b20      	cmp	r3, #32
 800c430:	d153      	bne.n	800c4da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	32ae      	adds	r2, #174	@ 0xae
 800c43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	4798      	blx	r3
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]
      break;
 800c44c:	e04a      	b.n	800c4e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	785b      	ldrb	r3, [r3, #1]
 800c452:	2b09      	cmp	r3, #9
 800c454:	d83b      	bhi.n	800c4ce <USBD_StdDevReq+0xc2>
 800c456:	a201      	add	r2, pc, #4	@ (adr r2, 800c45c <USBD_StdDevReq+0x50>)
 800c458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45c:	0800c4b1 	.word	0x0800c4b1
 800c460:	0800c4c5 	.word	0x0800c4c5
 800c464:	0800c4cf 	.word	0x0800c4cf
 800c468:	0800c4bb 	.word	0x0800c4bb
 800c46c:	0800c4cf 	.word	0x0800c4cf
 800c470:	0800c48f 	.word	0x0800c48f
 800c474:	0800c485 	.word	0x0800c485
 800c478:	0800c4cf 	.word	0x0800c4cf
 800c47c:	0800c4a7 	.word	0x0800c4a7
 800c480:	0800c499 	.word	0x0800c499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fa3c 	bl	800c904 <USBD_GetDescriptor>
          break;
 800c48c:	e024      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fbcb 	bl	800cc2c <USBD_SetAddress>
          break;
 800c496:	e01f      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fc0a 	bl	800ccb4 <USBD_SetConfig>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	73fb      	strb	r3, [r7, #15]
          break;
 800c4a4:	e018      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fcad 	bl	800ce08 <USBD_GetConfig>
          break;
 800c4ae:	e013      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fcde 	bl	800ce74 <USBD_GetStatus>
          break;
 800c4b8:	e00e      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fd0d 	bl	800cedc <USBD_SetFeature>
          break;
 800c4c2:	e009      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fd31 	bl	800cf2e <USBD_ClrFeature>
          break;
 800c4cc:	e004      	b.n	800c4d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fd88 	bl	800cfe6 <USBD_CtlError>
          break;
 800c4d6:	bf00      	nop
      }
      break;
 800c4d8:	e004      	b.n	800c4e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fd82 	bl	800cfe6 <USBD_CtlError>
      break;
 800c4e2:	bf00      	nop
  }

  return ret;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop

0800c4f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c506:	2b40      	cmp	r3, #64	@ 0x40
 800c508:	d005      	beq.n	800c516 <USBD_StdItfReq+0x26>
 800c50a:	2b40      	cmp	r3, #64	@ 0x40
 800c50c:	d852      	bhi.n	800c5b4 <USBD_StdItfReq+0xc4>
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <USBD_StdItfReq+0x26>
 800c512:	2b20      	cmp	r3, #32
 800c514:	d14e      	bne.n	800c5b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	3b01      	subs	r3, #1
 800c520:	2b02      	cmp	r3, #2
 800c522:	d840      	bhi.n	800c5a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	889b      	ldrh	r3, [r3, #4]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d836      	bhi.n	800c59c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	889b      	ldrh	r3, [r3, #4]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fedb 	bl	800c2f2 <USBD_CoreFindIF>
 800c53c:	4603      	mov	r3, r0
 800c53e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	2bff      	cmp	r3, #255	@ 0xff
 800c544:	d01d      	beq.n	800c582 <USBD_StdItfReq+0x92>
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d11a      	bne.n	800c582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c54c:	7bba      	ldrb	r2, [r7, #14]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	32ae      	adds	r2, #174	@ 0xae
 800c552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00f      	beq.n	800c57c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c55c:	7bba      	ldrb	r2, [r7, #14]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c564:	7bba      	ldrb	r2, [r7, #14]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	32ae      	adds	r2, #174	@ 0xae
 800c56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	4798      	blx	r3
 800c576:	4603      	mov	r3, r0
 800c578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c57a:	e004      	b.n	800c586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c57c:	2303      	movs	r3, #3
 800c57e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c580:	e001      	b.n	800c586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c582:	2303      	movs	r3, #3
 800c584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	88db      	ldrh	r3, [r3, #6]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d110      	bne.n	800c5b0 <USBD_StdItfReq+0xc0>
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fdfd 	bl	800d194 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c59a:	e009      	b.n	800c5b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fd21 	bl	800cfe6 <USBD_CtlError>
          break;
 800c5a4:	e004      	b.n	800c5b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fd1c 	bl	800cfe6 <USBD_CtlError>
          break;
 800c5ae:	e000      	b.n	800c5b2 <USBD_StdItfReq+0xc2>
          break;
 800c5b0:	bf00      	nop
      }
      break;
 800c5b2:	e004      	b.n	800c5be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fd15 	bl	800cfe6 <USBD_CtlError>
      break;
 800c5bc:	bf00      	nop
  }

  return ret;
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	889b      	ldrh	r3, [r3, #4]
 800c5da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5e4:	2b40      	cmp	r3, #64	@ 0x40
 800c5e6:	d007      	beq.n	800c5f8 <USBD_StdEPReq+0x30>
 800c5e8:	2b40      	cmp	r3, #64	@ 0x40
 800c5ea:	f200 817f 	bhi.w	800c8ec <USBD_StdEPReq+0x324>
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d02a      	beq.n	800c648 <USBD_StdEPReq+0x80>
 800c5f2:	2b20      	cmp	r3, #32
 800c5f4:	f040 817a 	bne.w	800c8ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff fe85 	bl	800c30c <USBD_CoreFindEP>
 800c602:	4603      	mov	r3, r0
 800c604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c606:	7b7b      	ldrb	r3, [r7, #13]
 800c608:	2bff      	cmp	r3, #255	@ 0xff
 800c60a:	f000 8174 	beq.w	800c8f6 <USBD_StdEPReq+0x32e>
 800c60e:	7b7b      	ldrb	r3, [r7, #13]
 800c610:	2b00      	cmp	r3, #0
 800c612:	f040 8170 	bne.w	800c8f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c616:	7b7a      	ldrb	r2, [r7, #13]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c61e:	7b7a      	ldrb	r2, [r7, #13]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	32ae      	adds	r2, #174	@ 0xae
 800c624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 8163 	beq.w	800c8f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c630:	7b7a      	ldrb	r2, [r7, #13]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	32ae      	adds	r2, #174	@ 0xae
 800c636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	4798      	blx	r3
 800c642:	4603      	mov	r3, r0
 800c644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c646:	e156      	b.n	800c8f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	785b      	ldrb	r3, [r3, #1]
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d008      	beq.n	800c662 <USBD_StdEPReq+0x9a>
 800c650:	2b03      	cmp	r3, #3
 800c652:	f300 8145 	bgt.w	800c8e0 <USBD_StdEPReq+0x318>
 800c656:	2b00      	cmp	r3, #0
 800c658:	f000 809b 	beq.w	800c792 <USBD_StdEPReq+0x1ca>
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d03c      	beq.n	800c6da <USBD_StdEPReq+0x112>
 800c660:	e13e      	b.n	800c8e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d002      	beq.n	800c674 <USBD_StdEPReq+0xac>
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d016      	beq.n	800c6a0 <USBD_StdEPReq+0xd8>
 800c672:	e02c      	b.n	800c6ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00d      	beq.n	800c696 <USBD_StdEPReq+0xce>
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	2b80      	cmp	r3, #128	@ 0x80
 800c67e:	d00a      	beq.n	800c696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 f98f 	bl	800d9a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c68a:	2180      	movs	r1, #128	@ 0x80
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 f98b 	bl	800d9a8 <USBD_LL_StallEP>
 800c692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c694:	e020      	b.n	800c6d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fca4 	bl	800cfe6 <USBD_CtlError>
              break;
 800c69e:	e01b      	b.n	800c6d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	885b      	ldrh	r3, [r3, #2]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10e      	bne.n	800c6c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <USBD_StdEPReq+0xfe>
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	2b80      	cmp	r3, #128	@ 0x80
 800c6b2:	d008      	beq.n	800c6c6 <USBD_StdEPReq+0xfe>
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	88db      	ldrh	r3, [r3, #6]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d104      	bne.n	800c6c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f001 f971 	bl	800d9a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fd64 	bl	800d194 <USBD_CtlSendStatus>

              break;
 800c6cc:	e004      	b.n	800c6d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fc88 	bl	800cfe6 <USBD_CtlError>
              break;
 800c6d6:	bf00      	nop
          }
          break;
 800c6d8:	e107      	b.n	800c8ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d002      	beq.n	800c6ec <USBD_StdEPReq+0x124>
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d016      	beq.n	800c718 <USBD_StdEPReq+0x150>
 800c6ea:	e04b      	b.n	800c784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6ec:	7bbb      	ldrb	r3, [r7, #14]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00d      	beq.n	800c70e <USBD_StdEPReq+0x146>
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	2b80      	cmp	r3, #128	@ 0x80
 800c6f6:	d00a      	beq.n	800c70e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f001 f953 	bl	800d9a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c702:	2180      	movs	r1, #128	@ 0x80
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f001 f94f 	bl	800d9a8 <USBD_LL_StallEP>
 800c70a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c70c:	e040      	b.n	800c790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fc68 	bl	800cfe6 <USBD_CtlError>
              break;
 800c716:	e03b      	b.n	800c790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	885b      	ldrh	r3, [r3, #2]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d136      	bne.n	800c78e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c720:	7bbb      	ldrb	r3, [r7, #14]
 800c722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c726:	2b00      	cmp	r3, #0
 800c728:	d004      	beq.n	800c734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f001 f959 	bl	800d9e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fd2d 	bl	800d194 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c73a:	7bbb      	ldrb	r3, [r7, #14]
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff fde4 	bl	800c30c <USBD_CoreFindEP>
 800c744:	4603      	mov	r3, r0
 800c746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c748:	7b7b      	ldrb	r3, [r7, #13]
 800c74a:	2bff      	cmp	r3, #255	@ 0xff
 800c74c:	d01f      	beq.n	800c78e <USBD_StdEPReq+0x1c6>
 800c74e:	7b7b      	ldrb	r3, [r7, #13]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d11c      	bne.n	800c78e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c754:	7b7a      	ldrb	r2, [r7, #13]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c75c:	7b7a      	ldrb	r2, [r7, #13]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	32ae      	adds	r2, #174	@ 0xae
 800c762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d010      	beq.n	800c78e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c76c:	7b7a      	ldrb	r2, [r7, #13]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	32ae      	adds	r2, #174	@ 0xae
 800c772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	4798      	blx	r3
 800c77e:	4603      	mov	r3, r0
 800c780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c782:	e004      	b.n	800c78e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fc2d 	bl	800cfe6 <USBD_CtlError>
              break;
 800c78c:	e000      	b.n	800c790 <USBD_StdEPReq+0x1c8>
              break;
 800c78e:	bf00      	nop
          }
          break;
 800c790:	e0ab      	b.n	800c8ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d002      	beq.n	800c7a4 <USBD_StdEPReq+0x1dc>
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d032      	beq.n	800c808 <USBD_StdEPReq+0x240>
 800c7a2:	e097      	b.n	800c8d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d007      	beq.n	800c7ba <USBD_StdEPReq+0x1f2>
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	2b80      	cmp	r3, #128	@ 0x80
 800c7ae:	d004      	beq.n	800c7ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fc17 	bl	800cfe6 <USBD_CtlError>
                break;
 800c7b8:	e091      	b.n	800c8de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	da0b      	bge.n	800c7da <USBD_StdEPReq+0x212>
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	3310      	adds	r3, #16
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	e00b      	b.n	800c7f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fc6d 	bl	800d0e0 <USBD_CtlSendData>
              break;
 800c806:	e06a      	b.n	800c8de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	da11      	bge.n	800c834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	f003 020f 	and.w	r2, r3, #15
 800c816:	6879      	ldr	r1, [r7, #4]
 800c818:	4613      	mov	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	440b      	add	r3, r1
 800c822:	3324      	adds	r3, #36	@ 0x24
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d117      	bne.n	800c85a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fbda 	bl	800cfe6 <USBD_CtlError>
                  break;
 800c832:	e054      	b.n	800c8de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	f003 020f 	and.w	r2, r3, #15
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	4613      	mov	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	440b      	add	r3, r1
 800c846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c84a:	881b      	ldrh	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d104      	bne.n	800c85a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fbc7 	bl	800cfe6 <USBD_CtlError>
                  break;
 800c858:	e041      	b.n	800c8de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c85a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	da0b      	bge.n	800c87a <USBD_StdEPReq+0x2b2>
 800c862:	7bbb      	ldrb	r3, [r7, #14]
 800c864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c868:	4613      	mov	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	3310      	adds	r3, #16
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	4413      	add	r3, r2
 800c876:	3304      	adds	r3, #4
 800c878:	e00b      	b.n	800c892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c87a:	7bbb      	ldrb	r3, [r7, #14]
 800c87c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c880:	4613      	mov	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	4413      	add	r3, r2
 800c890:	3304      	adds	r3, #4
 800c892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c894:	7bbb      	ldrb	r3, [r7, #14]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <USBD_StdEPReq+0x2d8>
 800c89a:	7bbb      	ldrb	r3, [r7, #14]
 800c89c:	2b80      	cmp	r3, #128	@ 0x80
 800c89e:	d103      	bne.n	800c8a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	e00e      	b.n	800c8c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 f8b9 	bl	800da24 <USBD_LL_IsStallEP>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	e002      	b.n	800c8c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	2202      	movs	r2, #2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fc07 	bl	800d0e0 <USBD_CtlSendData>
              break;
 800c8d2:	e004      	b.n	800c8de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fb85 	bl	800cfe6 <USBD_CtlError>
              break;
 800c8dc:	bf00      	nop
          }
          break;
 800c8de:	e004      	b.n	800c8ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fb7f 	bl	800cfe6 <USBD_CtlError>
          break;
 800c8e8:	bf00      	nop
      }
      break;
 800c8ea:	e005      	b.n	800c8f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fb79 	bl	800cfe6 <USBD_CtlError>
      break;
 800c8f4:	e000      	b.n	800c8f8 <USBD_StdEPReq+0x330>
      break;
 800c8f6:	bf00      	nop
  }

  return ret;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	885b      	ldrh	r3, [r3, #2]
 800c91e:	0a1b      	lsrs	r3, r3, #8
 800c920:	b29b      	uxth	r3, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	2b0e      	cmp	r3, #14
 800c926:	f200 8152 	bhi.w	800cbce <USBD_GetDescriptor+0x2ca>
 800c92a:	a201      	add	r2, pc, #4	@ (adr r2, 800c930 <USBD_GetDescriptor+0x2c>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c9a1 	.word	0x0800c9a1
 800c934:	0800c9b9 	.word	0x0800c9b9
 800c938:	0800c9f9 	.word	0x0800c9f9
 800c93c:	0800cbcf 	.word	0x0800cbcf
 800c940:	0800cbcf 	.word	0x0800cbcf
 800c944:	0800cb6f 	.word	0x0800cb6f
 800c948:	0800cb9b 	.word	0x0800cb9b
 800c94c:	0800cbcf 	.word	0x0800cbcf
 800c950:	0800cbcf 	.word	0x0800cbcf
 800c954:	0800cbcf 	.word	0x0800cbcf
 800c958:	0800cbcf 	.word	0x0800cbcf
 800c95c:	0800cbcf 	.word	0x0800cbcf
 800c960:	0800cbcf 	.word	0x0800cbcf
 800c964:	0800cbcf 	.word	0x0800cbcf
 800c968:	0800c96d 	.word	0x0800c96d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	7c12      	ldrb	r2, [r2, #16]
 800c984:	f107 0108 	add.w	r1, r7, #8
 800c988:	4610      	mov	r0, r2
 800c98a:	4798      	blx	r3
 800c98c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c98e:	e126      	b.n	800cbde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fb27 	bl	800cfe6 <USBD_CtlError>
        err++;
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	3301      	adds	r3, #1
 800c99c:	72fb      	strb	r3, [r7, #11]
      break;
 800c99e:	e11e      	b.n	800cbde <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	7c12      	ldrb	r2, [r2, #16]
 800c9ac:	f107 0108 	add.w	r1, r7, #8
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	4798      	blx	r3
 800c9b4:	60f8      	str	r0, [r7, #12]
      break;
 800c9b6:	e112      	b.n	800cbde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	7c1b      	ldrb	r3, [r3, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10d      	bne.n	800c9dc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c8:	f107 0208 	add.w	r2, r7, #8
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	4798      	blx	r3
 800c9d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9da:	e100      	b.n	800cbde <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e4:	f107 0208 	add.w	r2, r7, #8
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4798      	blx	r3
 800c9ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	2202      	movs	r2, #2
 800c9f4:	701a      	strb	r2, [r3, #0]
      break;
 800c9f6:	e0f2      	b.n	800cbde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	885b      	ldrh	r3, [r3, #2]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b05      	cmp	r3, #5
 800ca00:	f200 80ac 	bhi.w	800cb5c <USBD_GetDescriptor+0x258>
 800ca04:	a201      	add	r2, pc, #4	@ (adr r2, 800ca0c <USBD_GetDescriptor+0x108>)
 800ca06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0a:	bf00      	nop
 800ca0c:	0800ca25 	.word	0x0800ca25
 800ca10:	0800ca59 	.word	0x0800ca59
 800ca14:	0800ca8d 	.word	0x0800ca8d
 800ca18:	0800cac1 	.word	0x0800cac1
 800ca1c:	0800caf5 	.word	0x0800caf5
 800ca20:	0800cb29 	.word	0x0800cb29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00b      	beq.n	800ca48 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	7c12      	ldrb	r2, [r2, #16]
 800ca3c:	f107 0108 	add.w	r1, r7, #8
 800ca40:	4610      	mov	r0, r2
 800ca42:	4798      	blx	r3
 800ca44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca46:	e091      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 facb 	bl	800cfe6 <USBD_CtlError>
            err++;
 800ca50:	7afb      	ldrb	r3, [r7, #11]
 800ca52:	3301      	adds	r3, #1
 800ca54:	72fb      	strb	r3, [r7, #11]
          break;
 800ca56:	e089      	b.n	800cb6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00b      	beq.n	800ca7c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	7c12      	ldrb	r2, [r2, #16]
 800ca70:	f107 0108 	add.w	r1, r7, #8
 800ca74:	4610      	mov	r0, r2
 800ca76:	4798      	blx	r3
 800ca78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca7a:	e077      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fab1 	bl	800cfe6 <USBD_CtlError>
            err++;
 800ca84:	7afb      	ldrb	r3, [r7, #11]
 800ca86:	3301      	adds	r3, #1
 800ca88:	72fb      	strb	r3, [r7, #11]
          break;
 800ca8a:	e06f      	b.n	800cb6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00b      	beq.n	800cab0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	7c12      	ldrb	r2, [r2, #16]
 800caa4:	f107 0108 	add.w	r1, r7, #8
 800caa8:	4610      	mov	r0, r2
 800caaa:	4798      	blx	r3
 800caac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caae:	e05d      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa97 	bl	800cfe6 <USBD_CtlError>
            err++;
 800cab8:	7afb      	ldrb	r3, [r7, #11]
 800caba:	3301      	adds	r3, #1
 800cabc:	72fb      	strb	r3, [r7, #11]
          break;
 800cabe:	e055      	b.n	800cb6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	7c12      	ldrb	r2, [r2, #16]
 800cad8:	f107 0108 	add.w	r1, r7, #8
 800cadc:	4610      	mov	r0, r2
 800cade:	4798      	blx	r3
 800cae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cae2:	e043      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa7d 	bl	800cfe6 <USBD_CtlError>
            err++;
 800caec:	7afb      	ldrb	r3, [r7, #11]
 800caee:	3301      	adds	r3, #1
 800caf0:	72fb      	strb	r3, [r7, #11]
          break;
 800caf2:	e03b      	b.n	800cb6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb06:	695b      	ldr	r3, [r3, #20]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	7c12      	ldrb	r2, [r2, #16]
 800cb0c:	f107 0108 	add.w	r1, r7, #8
 800cb10:	4610      	mov	r0, r2
 800cb12:	4798      	blx	r3
 800cb14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb16:	e029      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa63 	bl	800cfe6 <USBD_CtlError>
            err++;
 800cb20:	7afb      	ldrb	r3, [r7, #11]
 800cb22:	3301      	adds	r3, #1
 800cb24:	72fb      	strb	r3, [r7, #11]
          break;
 800cb26:	e021      	b.n	800cb6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00b      	beq.n	800cb4c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	7c12      	ldrb	r2, [r2, #16]
 800cb40:	f107 0108 	add.w	r1, r7, #8
 800cb44:	4610      	mov	r0, r2
 800cb46:	4798      	blx	r3
 800cb48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb4a:	e00f      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fa49 	bl	800cfe6 <USBD_CtlError>
            err++;
 800cb54:	7afb      	ldrb	r3, [r7, #11]
 800cb56:	3301      	adds	r3, #1
 800cb58:	72fb      	strb	r3, [r7, #11]
          break;
 800cb5a:	e007      	b.n	800cb6c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fa41 	bl	800cfe6 <USBD_CtlError>
          err++;
 800cb64:	7afb      	ldrb	r3, [r7, #11]
 800cb66:	3301      	adds	r3, #1
 800cb68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cb6a:	bf00      	nop
      }
      break;
 800cb6c:	e037      	b.n	800cbde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	7c1b      	ldrb	r3, [r3, #16]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d109      	bne.n	800cb8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb7e:	f107 0208 	add.w	r2, r7, #8
 800cb82:	4610      	mov	r0, r2
 800cb84:	4798      	blx	r3
 800cb86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb88:	e029      	b.n	800cbde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fa2a 	bl	800cfe6 <USBD_CtlError>
        err++;
 800cb92:	7afb      	ldrb	r3, [r7, #11]
 800cb94:	3301      	adds	r3, #1
 800cb96:	72fb      	strb	r3, [r7, #11]
      break;
 800cb98:	e021      	b.n	800cbde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	7c1b      	ldrb	r3, [r3, #16]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10d      	bne.n	800cbbe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbaa:	f107 0208 	add.w	r2, r7, #8
 800cbae:	4610      	mov	r0, r2
 800cbb0:	4798      	blx	r3
 800cbb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	2207      	movs	r2, #7
 800cbba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbbc:	e00f      	b.n	800cbde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fa10 	bl	800cfe6 <USBD_CtlError>
        err++;
 800cbc6:	7afb      	ldrb	r3, [r7, #11]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	72fb      	strb	r3, [r7, #11]
      break;
 800cbcc:	e007      	b.n	800cbde <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fa08 	bl	800cfe6 <USBD_CtlError>
      err++;
 800cbd6:	7afb      	ldrb	r3, [r7, #11]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	72fb      	strb	r3, [r7, #11]
      break;
 800cbdc:	bf00      	nop
  }

  if (err != 0U)
 800cbde:	7afb      	ldrb	r3, [r7, #11]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d11e      	bne.n	800cc22 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	88db      	ldrh	r3, [r3, #6]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d016      	beq.n	800cc1a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cbec:	893b      	ldrh	r3, [r7, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00e      	beq.n	800cc10 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	88da      	ldrh	r2, [r3, #6]
 800cbf6:	893b      	ldrh	r3, [r7, #8]
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	bf28      	it	cs
 800cbfc:	4613      	movcs	r3, r2
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc02:	893b      	ldrh	r3, [r7, #8]
 800cc04:	461a      	mov	r2, r3
 800cc06:	68f9      	ldr	r1, [r7, #12]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fa69 	bl	800d0e0 <USBD_CtlSendData>
 800cc0e:	e009      	b.n	800cc24 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc10:	6839      	ldr	r1, [r7, #0]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f9e7 	bl	800cfe6 <USBD_CtlError>
 800cc18:	e004      	b.n	800cc24 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 faba 	bl	800d194 <USBD_CtlSendStatus>
 800cc20:	e000      	b.n	800cc24 <USBD_GetDescriptor+0x320>
    return;
 800cc22:	bf00      	nop
  }
}
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop

0800cc2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	889b      	ldrh	r3, [r3, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d131      	bne.n	800cca2 <USBD_SetAddress+0x76>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	88db      	ldrh	r3, [r3, #6]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d12d      	bne.n	800cca2 <USBD_SetAddress+0x76>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	885b      	ldrh	r3, [r3, #2]
 800cc4a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc4c:	d829      	bhi.n	800cca2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	885b      	ldrh	r3, [r3, #2]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d104      	bne.n	800cc70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 f9bc 	bl	800cfe6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc6e:	e01d      	b.n	800ccac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7bfa      	ldrb	r2, [r7, #15]
 800cc74:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fefd 	bl	800da7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fa86 	bl	800d194 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d004      	beq.n	800cc98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2202      	movs	r2, #2
 800cc92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc96:	e009      	b.n	800ccac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cca0:	e004      	b.n	800ccac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f99e 	bl	800cfe6 <USBD_CtlError>
  }
}
 800ccaa:	bf00      	nop
 800ccac:	bf00      	nop
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	885b      	ldrh	r3, [r3, #2]
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	4b4e      	ldr	r3, [pc, #312]	@ (800ce04 <USBD_SetConfig+0x150>)
 800ccca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cccc:	4b4d      	ldr	r3, [pc, #308]	@ (800ce04 <USBD_SetConfig+0x150>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d905      	bls.n	800cce0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f985 	bl	800cfe6 <USBD_CtlError>
    return USBD_FAIL;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e08c      	b.n	800cdfa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d002      	beq.n	800ccf2 <USBD_SetConfig+0x3e>
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d029      	beq.n	800cd44 <USBD_SetConfig+0x90>
 800ccf0:	e075      	b.n	800cdde <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ccf2:	4b44      	ldr	r3, [pc, #272]	@ (800ce04 <USBD_SetConfig+0x150>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d020      	beq.n	800cd3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ccfa:	4b42      	ldr	r3, [pc, #264]	@ (800ce04 <USBD_SetConfig+0x150>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd04:	4b3f      	ldr	r3, [pc, #252]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff f84b 	bl	800bda6 <USBD_SetClassConfig>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d008      	beq.n	800cd2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f962 	bl	800cfe6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2202      	movs	r2, #2
 800cd26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd2a:	e065      	b.n	800cdf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fa31 	bl	800d194 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2203      	movs	r2, #3
 800cd36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd3a:	e05d      	b.n	800cdf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fa29 	bl	800d194 <USBD_CtlSendStatus>
      break;
 800cd42:	e059      	b.n	800cdf8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd44:	4b2f      	ldr	r3, [pc, #188]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d112      	bne.n	800cd72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2202      	movs	r2, #2
 800cd50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cd54:	4b2b      	ldr	r3, [pc, #172]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd5e:	4b29      	ldr	r3, [pc, #164]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff f83a 	bl	800bdde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa12 	bl	800d194 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd70:	e042      	b.n	800cdf8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cd72:	4b24      	ldr	r3, [pc, #144]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d02a      	beq.n	800cdd6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff f828 	bl	800bdde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd98:	4b1a      	ldr	r3, [pc, #104]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff f801 	bl	800bda6 <USBD_SetClassConfig>
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00f      	beq.n	800cdce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f918 	bl	800cfe6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff f80d 	bl	800bdde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cdcc:	e014      	b.n	800cdf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f9e0 	bl	800d194 <USBD_CtlSendStatus>
      break;
 800cdd4:	e010      	b.n	800cdf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f9dc 	bl	800d194 <USBD_CtlSendStatus>
      break;
 800cddc:	e00c      	b.n	800cdf8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f900 	bl	800cfe6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cde6:	4b07      	ldr	r3, [pc, #28]	@ (800ce04 <USBD_SetConfig+0x150>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7fe fff6 	bl	800bdde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf6:	bf00      	nop
  }

  return ret;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	200006c4 	.word	0x200006c4

0800ce08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	88db      	ldrh	r3, [r3, #6]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d004      	beq.n	800ce24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f8e2 	bl	800cfe6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce22:	e023      	b.n	800ce6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	dc02      	bgt.n	800ce36 <USBD_GetConfig+0x2e>
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	dc03      	bgt.n	800ce3c <USBD_GetConfig+0x34>
 800ce34:	e015      	b.n	800ce62 <USBD_GetConfig+0x5a>
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d00b      	beq.n	800ce52 <USBD_GetConfig+0x4a>
 800ce3a:	e012      	b.n	800ce62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3308      	adds	r3, #8
 800ce46:	2201      	movs	r2, #1
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f948 	bl	800d0e0 <USBD_CtlSendData>
        break;
 800ce50:	e00c      	b.n	800ce6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3304      	adds	r3, #4
 800ce56:	2201      	movs	r2, #1
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f940 	bl	800d0e0 <USBD_CtlSendData>
        break;
 800ce60:	e004      	b.n	800ce6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f8be 	bl	800cfe6 <USBD_CtlError>
        break;
 800ce6a:	bf00      	nop
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	3b01      	subs	r3, #1
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d81e      	bhi.n	800ceca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	88db      	ldrh	r3, [r3, #6]
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d004      	beq.n	800ce9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f8a5 	bl	800cfe6 <USBD_CtlError>
        break;
 800ce9c:	e01a      	b.n	800ced4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d005      	beq.n	800ceba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	f043 0202 	orr.w	r2, r3, #2
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	330c      	adds	r3, #12
 800cebe:	2202      	movs	r2, #2
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f90c 	bl	800d0e0 <USBD_CtlSendData>
      break;
 800cec8:	e004      	b.n	800ced4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ceca:	6839      	ldr	r1, [r7, #0]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f88a 	bl	800cfe6 <USBD_CtlError>
      break;
 800ced2:	bf00      	nop
  }
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	885b      	ldrh	r3, [r3, #2]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d107      	bne.n	800cefe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f94c 	bl	800d194 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cefc:	e013      	b.n	800cf26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	885b      	ldrh	r3, [r3, #2]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d10b      	bne.n	800cf1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	889b      	ldrh	r3, [r3, #4]
 800cf0a:	0a1b      	lsrs	r3, r3, #8
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f93c 	bl	800d194 <USBD_CtlSendStatus>
}
 800cf1c:	e003      	b.n	800cf26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f860 	bl	800cfe6 <USBD_CtlError>
}
 800cf26:	bf00      	nop
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
 800cf36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	3b01      	subs	r3, #1
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d80b      	bhi.n	800cf5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	885b      	ldrh	r3, [r3, #2]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d10c      	bne.n	800cf68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f91c 	bl	800d194 <USBD_CtlSendStatus>
      }
      break;
 800cf5c:	e004      	b.n	800cf68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf5e:	6839      	ldr	r1, [r7, #0]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 f840 	bl	800cfe6 <USBD_CtlError>
      break;
 800cf66:	e000      	b.n	800cf6a <USBD_ClrFeature+0x3c>
      break;
 800cf68:	bf00      	nop
  }
}
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	781a      	ldrb	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f7ff fa16 	bl	800c3ce <SWAPBYTE>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	3301      	adds	r3, #1
 800cfae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7ff fa09 	bl	800c3ce <SWAPBYTE>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff f9fc 	bl	800c3ce <SWAPBYTE>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	461a      	mov	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	80da      	strh	r2, [r3, #6]
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cff0:	2180      	movs	r1, #128	@ 0x80
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fcd8 	bl	800d9a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cff8:	2100      	movs	r1, #0
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fcd4 	bl	800d9a8 <USBD_LL_StallEP>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d014:	2300      	movs	r3, #0
 800d016:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d042      	beq.n	800d0a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d022:	6938      	ldr	r0, [r7, #16]
 800d024:	f000 f842 	bl	800d0ac <USBD_GetLen>
 800d028:	4603      	mov	r3, r0
 800d02a:	3301      	adds	r3, #1
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d032:	d808      	bhi.n	800d046 <USBD_GetString+0x3e>
 800d034:	6938      	ldr	r0, [r7, #16]
 800d036:	f000 f839 	bl	800d0ac <USBD_GetLen>
 800d03a:	4603      	mov	r3, r0
 800d03c:	3301      	adds	r3, #1
 800d03e:	b29b      	uxth	r3, r3
 800d040:	005b      	lsls	r3, r3, #1
 800d042:	b29a      	uxth	r2, r3
 800d044:	e001      	b.n	800d04a <USBD_GetString+0x42>
 800d046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	4413      	add	r3, r2
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	7812      	ldrb	r2, [r2, #0]
 800d058:	701a      	strb	r2, [r3, #0]
  idx++;
 800d05a:	7dfb      	ldrb	r3, [r7, #23]
 800d05c:	3301      	adds	r3, #1
 800d05e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d060:	7dfb      	ldrb	r3, [r7, #23]
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	4413      	add	r3, r2
 800d066:	2203      	movs	r2, #3
 800d068:	701a      	strb	r2, [r3, #0]
  idx++;
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	3301      	adds	r3, #1
 800d06e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d070:	e013      	b.n	800d09a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	4413      	add	r3, r2
 800d078:	693a      	ldr	r2, [r7, #16]
 800d07a:	7812      	ldrb	r2, [r2, #0]
 800d07c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	3301      	adds	r3, #1
 800d082:	613b      	str	r3, [r7, #16]
    idx++;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
 800d086:	3301      	adds	r3, #1
 800d088:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	68ba      	ldr	r2, [r7, #8]
 800d08e:	4413      	add	r3, r2
 800d090:	2200      	movs	r2, #0
 800d092:	701a      	strb	r2, [r3, #0]
    idx++;
 800d094:	7dfb      	ldrb	r3, [r7, #23]
 800d096:	3301      	adds	r3, #1
 800d098:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1e7      	bne.n	800d072 <USBD_GetString+0x6a>
 800d0a2:	e000      	b.n	800d0a6 <USBD_GetString+0x9e>
    return;
 800d0a4:	bf00      	nop
  }
}
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0bc:	e005      	b.n	800d0ca <USBD_GetLen+0x1e>
  {
    len++;
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1f5      	bne.n	800d0be <USBD_GetLen+0x12>
  }

  return len;
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	2100      	movs	r1, #0
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 fcd7 	bl	800daba <USBD_LL_Transmit>

  return USBD_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	60f8      	str	r0, [r7, #12]
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	2100      	movs	r1, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 fcc6 	bl	800daba <USBD_LL_Transmit>

  return USBD_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2203      	movs	r2, #3
 800d148:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	2100      	movs	r1, #0
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f000 fcca 	bl	800dafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	60f8      	str	r0, [r7, #12]
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	2100      	movs	r1, #0
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 fcb9 	bl	800dafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2204      	movs	r2, #4
 800d1a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fc85 	bl	800daba <USBD_LL_Transmit>

  return USBD_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2205      	movs	r2, #5
 800d1c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fc93 	bl	800dafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	4912      	ldr	r1, [pc, #72]	@ (800d230 <MX_USB_Device_Init+0x50>)
 800d1e8:	4812      	ldr	r0, [pc, #72]	@ (800d234 <MX_USB_Device_Init+0x54>)
 800d1ea:	f7fe fd43 	bl	800bc74 <USBD_Init>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d1f4:	f7f4 f8df 	bl	80013b6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d1f8:	490f      	ldr	r1, [pc, #60]	@ (800d238 <MX_USB_Device_Init+0x58>)
 800d1fa:	480e      	ldr	r0, [pc, #56]	@ (800d234 <MX_USB_Device_Init+0x54>)
 800d1fc:	f7fe fd78 	bl	800bcf0 <USBD_RegisterClass>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d206:	f7f4 f8d6 	bl	80013b6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d20a:	490c      	ldr	r1, [pc, #48]	@ (800d23c <MX_USB_Device_Init+0x5c>)
 800d20c:	4809      	ldr	r0, [pc, #36]	@ (800d234 <MX_USB_Device_Init+0x54>)
 800d20e:	f7fe fc61 	bl	800bad4 <USBD_CDC_RegisterInterface>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d218:	f7f4 f8cd 	bl	80013b6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d21c:	4805      	ldr	r0, [pc, #20]	@ (800d234 <MX_USB_Device_Init+0x54>)
 800d21e:	f7fe fdab 	bl	800bd78 <USBD_Start>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d228:	f7f4 f8c5 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d22c:	bf00      	nop
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	200000d8 	.word	0x200000d8
 800d234:	200006c8 	.word	0x200006c8
 800d238:	20000044 	.word	0x20000044
 800d23c:	200000c4 	.word	0x200000c4

0800d240 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d244:	2200      	movs	r2, #0
 800d246:	4905      	ldr	r1, [pc, #20]	@ (800d25c <CDC_Init_FS+0x1c>)
 800d248:	4805      	ldr	r0, [pc, #20]	@ (800d260 <CDC_Init_FS+0x20>)
 800d24a:	f7fe fc5d 	bl	800bb08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d24e:	4905      	ldr	r1, [pc, #20]	@ (800d264 <CDC_Init_FS+0x24>)
 800d250:	4803      	ldr	r0, [pc, #12]	@ (800d260 <CDC_Init_FS+0x20>)
 800d252:	f7fe fc7b 	bl	800bb4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d256:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d258:	4618      	mov	r0, r3
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	200011a4 	.word	0x200011a4
 800d260:	200006c8 	.word	0x200006c8
 800d264:	200009a4 	.word	0x200009a4

0800d268 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d26c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d26e:	4618      	mov	r0, r3
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	6039      	str	r1, [r7, #0]
 800d282:	71fb      	strb	r3, [r7, #7]
 800d284:	4613      	mov	r3, r2
 800d286:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	2b23      	cmp	r3, #35	@ 0x23
 800d28c:	d84a      	bhi.n	800d324 <CDC_Control_FS+0xac>
 800d28e:	a201      	add	r2, pc, #4	@ (adr r2, 800d294 <CDC_Control_FS+0x1c>)
 800d290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d294:	0800d325 	.word	0x0800d325
 800d298:	0800d325 	.word	0x0800d325
 800d29c:	0800d325 	.word	0x0800d325
 800d2a0:	0800d325 	.word	0x0800d325
 800d2a4:	0800d325 	.word	0x0800d325
 800d2a8:	0800d325 	.word	0x0800d325
 800d2ac:	0800d325 	.word	0x0800d325
 800d2b0:	0800d325 	.word	0x0800d325
 800d2b4:	0800d325 	.word	0x0800d325
 800d2b8:	0800d325 	.word	0x0800d325
 800d2bc:	0800d325 	.word	0x0800d325
 800d2c0:	0800d325 	.word	0x0800d325
 800d2c4:	0800d325 	.word	0x0800d325
 800d2c8:	0800d325 	.word	0x0800d325
 800d2cc:	0800d325 	.word	0x0800d325
 800d2d0:	0800d325 	.word	0x0800d325
 800d2d4:	0800d325 	.word	0x0800d325
 800d2d8:	0800d325 	.word	0x0800d325
 800d2dc:	0800d325 	.word	0x0800d325
 800d2e0:	0800d325 	.word	0x0800d325
 800d2e4:	0800d325 	.word	0x0800d325
 800d2e8:	0800d325 	.word	0x0800d325
 800d2ec:	0800d325 	.word	0x0800d325
 800d2f0:	0800d325 	.word	0x0800d325
 800d2f4:	0800d325 	.word	0x0800d325
 800d2f8:	0800d325 	.word	0x0800d325
 800d2fc:	0800d325 	.word	0x0800d325
 800d300:	0800d325 	.word	0x0800d325
 800d304:	0800d325 	.word	0x0800d325
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d325 	.word	0x0800d325
 800d310:	0800d325 	.word	0x0800d325
 800d314:	0800d325 	.word	0x0800d325
 800d318:	0800d325 	.word	0x0800d325
 800d31c:	0800d325 	.word	0x0800d325
 800d320:	0800d325 	.word	0x0800d325
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d324:	bf00      	nop
  }

  return (USBD_OK);
 800d326:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d328:	4618      	mov	r0, r3
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	4805      	ldr	r0, [pc, #20]	@ (800d358 <CDC_Receive_FS+0x24>)
 800d342:	f7fe fc03 	bl	800bb4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d346:	4804      	ldr	r0, [pc, #16]	@ (800d358 <CDC_Receive_FS+0x24>)
 800d348:	f7fe fc5e 	bl	800bc08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d34c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	200006c8 	.word	0x200006c8

0800d35c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d36c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a4 <CDC_Transmit_FS+0x48>)
 800d36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d372:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d37e:	2301      	movs	r3, #1
 800d380:	e00b      	b.n	800d39a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d382:	887b      	ldrh	r3, [r7, #2]
 800d384:	461a      	mov	r2, r3
 800d386:	6879      	ldr	r1, [r7, #4]
 800d388:	4806      	ldr	r0, [pc, #24]	@ (800d3a4 <CDC_Transmit_FS+0x48>)
 800d38a:	f7fe fbbd 	bl	800bb08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d38e:	4805      	ldr	r0, [pc, #20]	@ (800d3a4 <CDC_Transmit_FS+0x48>)
 800d390:	f7fe fbfa 	bl	800bb88 <USBD_CDC_TransmitPacket>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d398:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	200006c8 	.word	0x200006c8

0800d3a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
	...

0800d3cc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	6039      	str	r1, [r7, #0]
 800d3d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2212      	movs	r2, #18
 800d3dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d3de:	4b03      	ldr	r3, [pc, #12]	@ (800d3ec <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	200000f8 	.word	0x200000f8

0800d3f0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	6039      	str	r1, [r7, #0]
 800d3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2204      	movs	r2, #4
 800d400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d402:	4b03      	ldr	r3, [pc, #12]	@ (800d410 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	2000010c 	.word	0x2000010c

0800d414 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	4603      	mov	r3, r0
 800d41c:	6039      	str	r1, [r7, #0]
 800d41e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d105      	bne.n	800d432 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	4907      	ldr	r1, [pc, #28]	@ (800d448 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d42a:	4808      	ldr	r0, [pc, #32]	@ (800d44c <USBD_CDC_ProductStrDescriptor+0x38>)
 800d42c:	f7ff fdec 	bl	800d008 <USBD_GetString>
 800d430:	e004      	b.n	800d43c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d432:	683a      	ldr	r2, [r7, #0]
 800d434:	4904      	ldr	r1, [pc, #16]	@ (800d448 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d436:	4805      	ldr	r0, [pc, #20]	@ (800d44c <USBD_CDC_ProductStrDescriptor+0x38>)
 800d438:	f7ff fde6 	bl	800d008 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d43c:	4b02      	ldr	r3, [pc, #8]	@ (800d448 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	200019a4 	.word	0x200019a4
 800d44c:	08010684 	.word	0x08010684

0800d450 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	6039      	str	r1, [r7, #0]
 800d45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	4904      	ldr	r1, [pc, #16]	@ (800d470 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d460:	4804      	ldr	r0, [pc, #16]	@ (800d474 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d462:	f7ff fdd1 	bl	800d008 <USBD_GetString>
  return USBD_StrDesc;
 800d466:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	200019a4 	.word	0x200019a4
 800d474:	0801069c 	.word	0x0801069c

0800d478 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	6039      	str	r1, [r7, #0]
 800d482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	221a      	movs	r2, #26
 800d488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d48a:	f000 f843 	bl	800d514 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d48e:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000110 	.word	0x20000110

0800d49c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	6039      	str	r1, [r7, #0]
 800d4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d105      	bne.n	800d4ba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	4907      	ldr	r1, [pc, #28]	@ (800d4d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d4b2:	4808      	ldr	r0, [pc, #32]	@ (800d4d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d4b4:	f7ff fda8 	bl	800d008 <USBD_GetString>
 800d4b8:	e004      	b.n	800d4c4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	4904      	ldr	r1, [pc, #16]	@ (800d4d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d4be:	4805      	ldr	r0, [pc, #20]	@ (800d4d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d4c0:	f7ff fda2 	bl	800d008 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4c4:	4b02      	ldr	r3, [pc, #8]	@ (800d4d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200019a4 	.word	0x200019a4
 800d4d4:	080106b0 	.word	0x080106b0

0800d4d8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	6039      	str	r1, [r7, #0]
 800d4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d105      	bne.n	800d4f6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	4907      	ldr	r1, [pc, #28]	@ (800d50c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d4ee:	4808      	ldr	r0, [pc, #32]	@ (800d510 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d4f0:	f7ff fd8a 	bl	800d008 <USBD_GetString>
 800d4f4:	e004      	b.n	800d500 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	4904      	ldr	r1, [pc, #16]	@ (800d50c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d4fa:	4805      	ldr	r0, [pc, #20]	@ (800d510 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d4fc:	f7ff fd84 	bl	800d008 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d500:	4b02      	ldr	r3, [pc, #8]	@ (800d50c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	200019a4 	.word	0x200019a4
 800d510:	080106bc 	.word	0x080106bc

0800d514 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d51a:	4b0f      	ldr	r3, [pc, #60]	@ (800d558 <Get_SerialNum+0x44>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d520:	4b0e      	ldr	r3, [pc, #56]	@ (800d55c <Get_SerialNum+0x48>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d526:	4b0e      	ldr	r3, [pc, #56]	@ (800d560 <Get_SerialNum+0x4c>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4413      	add	r3, r2
 800d532:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d009      	beq.n	800d54e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d53a:	2208      	movs	r2, #8
 800d53c:	4909      	ldr	r1, [pc, #36]	@ (800d564 <Get_SerialNum+0x50>)
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 f814 	bl	800d56c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d544:	2204      	movs	r2, #4
 800d546:	4908      	ldr	r1, [pc, #32]	@ (800d568 <Get_SerialNum+0x54>)
 800d548:	68b8      	ldr	r0, [r7, #8]
 800d54a:	f000 f80f 	bl	800d56c <IntToUnicode>
  }
}
 800d54e:	bf00      	nop
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	1fff7590 	.word	0x1fff7590
 800d55c:	1fff7594 	.word	0x1fff7594
 800d560:	1fff7598 	.word	0x1fff7598
 800d564:	20000112 	.word	0x20000112
 800d568:	20000122 	.word	0x20000122

0800d56c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b087      	sub	sp, #28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	4613      	mov	r3, r2
 800d578:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d57e:	2300      	movs	r3, #0
 800d580:	75fb      	strb	r3, [r7, #23]
 800d582:	e027      	b.n	800d5d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	0f1b      	lsrs	r3, r3, #28
 800d588:	2b09      	cmp	r3, #9
 800d58a:	d80b      	bhi.n	800d5a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	0f1b      	lsrs	r3, r3, #28
 800d590:	b2da      	uxtb	r2, r3
 800d592:	7dfb      	ldrb	r3, [r7, #23]
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	4619      	mov	r1, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	440b      	add	r3, r1
 800d59c:	3230      	adds	r2, #48	@ 0x30
 800d59e:	b2d2      	uxtb	r2, r2
 800d5a0:	701a      	strb	r2, [r3, #0]
 800d5a2:	e00a      	b.n	800d5ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	0f1b      	lsrs	r3, r3, #28
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	440b      	add	r3, r1
 800d5b4:	3237      	adds	r2, #55	@ 0x37
 800d5b6:	b2d2      	uxtb	r2, r2
 800d5b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	011b      	lsls	r3, r3, #4
 800d5be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d5c0:	7dfb      	ldrb	r3, [r7, #23]
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	75fb      	strb	r3, [r7, #23]
 800d5d4:	7dfa      	ldrb	r2, [r7, #23]
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d3d3      	bcc.n	800d584 <IntToUnicode+0x18>
  }
}
 800d5dc:	bf00      	nop
 800d5de:	bf00      	nop
 800d5e0:	371c      	adds	r7, #28
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <LL_AHB2_GRP1_EnableClock>:
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b085      	sub	sp, #20
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d5f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4013      	ands	r3, r2
 800d60c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d60e:	68fb      	ldr	r3, [r7, #12]
}
 800d610:	bf00      	nop
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <LL_APB1_GRP1_EnableClock>:
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800d624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d628:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d62a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4313      	orrs	r3, r2
 800d632:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800d634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d638:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4013      	ands	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d640:	68fb      	ldr	r3, [r7, #12]
}
 800d642:	bf00      	nop
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
	...

0800d650 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b088      	sub	sp, #32
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d658:	f107 030c 	add.w	r3, r7, #12
 800d65c:	2200      	movs	r2, #0
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	605a      	str	r2, [r3, #4]
 800d662:	609a      	str	r2, [r3, #8]
 800d664:	60da      	str	r2, [r3, #12]
 800d666:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a17      	ldr	r2, [pc, #92]	@ (800d6cc <HAL_PCD_MspInit+0x7c>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d128      	bne.n	800d6c4 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d672:	2001      	movs	r0, #1
 800d674:	f7ff ffb9 	bl	800d5ea <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800d678:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d67c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d67e:	2302      	movs	r3, #2
 800d680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d682:	2300      	movs	r3, #0
 800d684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d686:	2300      	movs	r3, #0
 800d688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800d68a:	230a      	movs	r3, #10
 800d68c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d68e:	f107 030c 	add.w	r3, r7, #12
 800d692:	4619      	mov	r1, r3
 800d694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d698:	f7f6 fa3e 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d69c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800d6a0:	f7ff ffbc 	bl	800d61c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	2013      	movs	r0, #19
 800d6aa:	f7f5 ff1e 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800d6ae:	2013      	movs	r0, #19
 800d6b0:	f7f5 ff35 	bl	800351e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	2014      	movs	r0, #20
 800d6ba:	f7f5 ff16 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d6be:	2014      	movs	r0, #20
 800d6c0:	f7f5 ff2d 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	3720      	adds	r7, #32
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	40006800 	.word	0x40006800

0800d6d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f7fe fb93 	bl	800be12 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d706:	78fa      	ldrb	r2, [r7, #3]
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	4613      	mov	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	440b      	add	r3, r1
 800d714:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	78fb      	ldrb	r3, [r7, #3]
 800d71c:	4619      	mov	r1, r3
 800d71e:	f7fe fbcd 	bl	800bebc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	460b      	mov	r3, r1
 800d734:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d73c:	78fa      	ldrb	r2, [r7, #3]
 800d73e:	6879      	ldr	r1, [r7, #4]
 800d740:	4613      	mov	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	00db      	lsls	r3, r3, #3
 800d748:	440b      	add	r3, r1
 800d74a:	3324      	adds	r3, #36	@ 0x24
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	78fb      	ldrb	r3, [r7, #3]
 800d750:	4619      	mov	r1, r3
 800d752:	f7fe fc66 	bl	800c022 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d756:	bf00      	nop
 800d758:	3708      	adds	r7, #8
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe fda0 	bl	800c2b2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b084      	sub	sp, #16
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d782:	2301      	movs	r3, #1
 800d784:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	795b      	ldrb	r3, [r3, #5]
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d001      	beq.n	800d792 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d78e:	f7f3 fe12 	bl	80013b6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d798:	7bfa      	ldrb	r2, [r7, #15]
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe fd44 	bl	800c22a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fe fcec 	bl	800c186 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d7ae:	bf00      	nop
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe fd3f 	bl	800c24a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	7a5b      	ldrb	r3, [r3, #9]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d005      	beq.n	800d7e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7d4:	4b04      	ldr	r3, [pc, #16]	@ (800d7e8 <HAL_PCD_SuspendCallback+0x30>)
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	4a03      	ldr	r2, [pc, #12]	@ (800d7e8 <HAL_PCD_SuspendCallback+0x30>)
 800d7da:	f043 0306 	orr.w	r3, r3, #6
 800d7de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	e000ed00 	.word	0xe000ed00

0800d7ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7a5b      	ldrb	r3, [r3, #9]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d007      	beq.n	800d80c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7fc:	4b08      	ldr	r3, [pc, #32]	@ (800d820 <HAL_PCD_ResumeCallback+0x34>)
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	4a07      	ldr	r2, [pc, #28]	@ (800d820 <HAL_PCD_ResumeCallback+0x34>)
 800d802:	f023 0306 	bic.w	r3, r3, #6
 800d806:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d808:	f000 f9fa 	bl	800dc00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe fd35 	bl	800c282 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	e000ed00 	.word	0xe000ed00

0800d824 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d82c:	4a2c      	ldr	r2, [pc, #176]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a2a      	ldr	r2, [pc, #168]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d838:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d83c:	f7f8 ff82 	bl	8006744 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800d840:	4b27      	ldr	r3, [pc, #156]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d842:	4a28      	ldr	r2, [pc, #160]	@ (800d8e4 <USBD_LL_Init+0xc0>)
 800d844:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d846:	4b26      	ldr	r3, [pc, #152]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d848:	2208      	movs	r2, #8
 800d84a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d84c:	4b24      	ldr	r3, [pc, #144]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d84e:	2202      	movs	r2, #2
 800d850:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d852:	4b23      	ldr	r3, [pc, #140]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d854:	2202      	movs	r2, #2
 800d856:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d858:	4b21      	ldr	r3, [pc, #132]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d85e:	4b20      	ldr	r3, [pc, #128]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d860:	2200      	movs	r2, #0
 800d862:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d864:	4b1e      	ldr	r3, [pc, #120]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d866:	2200      	movs	r2, #0
 800d868:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d86a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d870:	481b      	ldr	r0, [pc, #108]	@ (800d8e0 <USBD_LL_Init+0xbc>)
 800d872:	f7f7 fa47 	bl	8004d04 <HAL_PCD_Init>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d87c:	f7f3 fd9b 	bl	80013b6 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d886:	2318      	movs	r3, #24
 800d888:	2200      	movs	r2, #0
 800d88a:	2100      	movs	r1, #0
 800d88c:	f7f8 fece 	bl	800662c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d896:	2358      	movs	r3, #88	@ 0x58
 800d898:	2200      	movs	r2, #0
 800d89a:	2180      	movs	r1, #128	@ 0x80
 800d89c:	f7f8 fec6 	bl	800662c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8a6:	23c0      	movs	r3, #192	@ 0xc0
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2181      	movs	r1, #129	@ 0x81
 800d8ac:	f7f8 febe 	bl	800662c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8b6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	2101      	movs	r1, #1
 800d8be:	f7f8 feb5 	bl	800662c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2182      	movs	r1, #130	@ 0x82
 800d8d0:	f7f8 feac 	bl	800662c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20001ba4 	.word	0x20001ba4
 800d8e4:	40006800 	.word	0x40006800

0800d8e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f7 face 	bl	8004ea0 <HAL_PCD_Start>
 800d904:	4603      	mov	r3, r0
 800d906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 f97e 	bl	800dc0c <USBD_Get_USB_Status>
 800d910:	4603      	mov	r3, r0
 800d912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d914:	7bbb      	ldrb	r3, [r7, #14]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	4608      	mov	r0, r1
 800d928:	4611      	mov	r1, r2
 800d92a:	461a      	mov	r2, r3
 800d92c:	4603      	mov	r3, r0
 800d92e:	70fb      	strb	r3, [r7, #3]
 800d930:	460b      	mov	r3, r1
 800d932:	70bb      	strb	r3, [r7, #2]
 800d934:	4613      	mov	r3, r2
 800d936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d938:	2300      	movs	r3, #0
 800d93a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d946:	78bb      	ldrb	r3, [r7, #2]
 800d948:	883a      	ldrh	r2, [r7, #0]
 800d94a:	78f9      	ldrb	r1, [r7, #3]
 800d94c:	f7f7 fc15 	bl	800517a <HAL_PCD_EP_Open>
 800d950:	4603      	mov	r3, r0
 800d952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d954:	7bfb      	ldrb	r3, [r7, #15]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f958 	bl	800dc0c <USBD_Get_USB_Status>
 800d95c:	4603      	mov	r3, r0
 800d95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d960:	7bbb      	ldrb	r3, [r7, #14]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b084      	sub	sp, #16
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
 800d972:	460b      	mov	r3, r1
 800d974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d97a:	2300      	movs	r3, #0
 800d97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d984:	78fa      	ldrb	r2, [r7, #3]
 800d986:	4611      	mov	r1, r2
 800d988:	4618      	mov	r0, r3
 800d98a:	f7f7 fc55 	bl	8005238 <HAL_PCD_EP_Close>
 800d98e:	4603      	mov	r3, r0
 800d990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d992:	7bfb      	ldrb	r3, [r7, #15]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f939 	bl	800dc0c <USBD_Get_USB_Status>
 800d99a:	4603      	mov	r3, r0
 800d99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9c2:	78fa      	ldrb	r2, [r7, #3]
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7f7 fcfe 	bl	80053c8 <HAL_PCD_EP_SetStall>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f91a 	bl	800dc0c <USBD_Get_USB_Status>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da00:	78fa      	ldrb	r2, [r7, #3]
 800da02:	4611      	mov	r1, r2
 800da04:	4618      	mov	r0, r3
 800da06:	f7f7 fd31 	bl	800546c <HAL_PCD_EP_ClrStall>
 800da0a:	4603      	mov	r3, r0
 800da0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	4618      	mov	r0, r3
 800da12:	f000 f8fb 	bl	800dc0c <USBD_Get_USB_Status>
 800da16:	4603      	mov	r3, r0
 800da18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	da0b      	bge.n	800da58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da46:	68f9      	ldr	r1, [r7, #12]
 800da48:	4613      	mov	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	00db      	lsls	r3, r3, #3
 800da50:	440b      	add	r3, r1
 800da52:	3312      	adds	r3, #18
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	e00b      	b.n	800da70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da58:	78fb      	ldrb	r3, [r7, #3]
 800da5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	4613      	mov	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4413      	add	r3, r2
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	440b      	add	r3, r1
 800da6a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800da6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da70:	4618      	mov	r0, r3
 800da72:	3714      	adds	r7, #20
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da8c:	2300      	movs	r3, #0
 800da8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da96:	78fa      	ldrb	r2, [r7, #3]
 800da98:	4611      	mov	r1, r2
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7f7 fb49 	bl	8005132 <HAL_PCD_SetAddress>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 f8b0 	bl	800dc0c <USBD_Get_USB_Status>
 800daac:	4603      	mov	r3, r0
 800daae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dab0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b086      	sub	sp, #24
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
 800dac6:	460b      	mov	r3, r1
 800dac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dad8:	7af9      	ldrb	r1, [r7, #11]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	f7f7 fc3c 	bl	800535a <HAL_PCD_EP_Transmit>
 800dae2:	4603      	mov	r3, r0
 800dae4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 f88f 	bl	800dc0c <USBD_Get_USB_Status>
 800daee:	4603      	mov	r3, r0
 800daf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	607a      	str	r2, [r7, #4]
 800db06:	603b      	str	r3, [r7, #0]
 800db08:	460b      	mov	r3, r1
 800db0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db1a:	7af9      	ldrb	r1, [r7, #11]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	f7f7 fbd2 	bl	80052c8 <HAL_PCD_EP_Receive>
 800db24:	4603      	mov	r3, r0
 800db26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db28:	7dfb      	ldrb	r3, [r7, #23]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 f86e 	bl	800dc0c <USBD_Get_USB_Status>
 800db30:	4603      	mov	r3, r0
 800db32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db34:	7dbb      	ldrb	r3, [r7, #22]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b082      	sub	sp, #8
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	460b      	mov	r3, r1
 800db48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db50:	78fa      	ldrb	r2, [r7, #3]
 800db52:	4611      	mov	r1, r2
 800db54:	4618      	mov	r0, r3
 800db56:	f7f7 fbe8 	bl	800532a <HAL_PCD_EP_GetRxCount>
 800db5a:	4603      	mov	r3, r0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	460b      	mov	r3, r1
 800db6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800db70:	78fb      	ldrb	r3, [r7, #3]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d002      	beq.n	800db7c <HAL_PCDEx_LPM_Callback+0x18>
 800db76:	2b01      	cmp	r3, #1
 800db78:	d013      	beq.n	800dba2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800db7a:	e023      	b.n	800dbc4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7a5b      	ldrb	r3, [r3, #9]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d007      	beq.n	800db94 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800db84:	f000 f83c 	bl	800dc00 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db88:	4b10      	ldr	r3, [pc, #64]	@ (800dbcc <HAL_PCDEx_LPM_Callback+0x68>)
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	4a0f      	ldr	r2, [pc, #60]	@ (800dbcc <HAL_PCDEx_LPM_Callback+0x68>)
 800db8e:	f023 0306 	bic.w	r3, r3, #6
 800db92:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fe fb71 	bl	800c282 <USBD_LL_Resume>
    break;
 800dba0:	e010      	b.n	800dbc4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fb4e 	bl	800c24a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	7a5b      	ldrb	r3, [r3, #9]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d005      	beq.n	800dbc2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbb6:	4b05      	ldr	r3, [pc, #20]	@ (800dbcc <HAL_PCDEx_LPM_Callback+0x68>)
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	4a04      	ldr	r2, [pc, #16]	@ (800dbcc <HAL_PCDEx_LPM_Callback+0x68>)
 800dbbc:	f043 0306 	orr.w	r3, r3, #6
 800dbc0:	6113      	str	r3, [r2, #16]
    break;
 800dbc2:	bf00      	nop
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	e000ed00 	.word	0xe000ed00

0800dbd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dbd8:	4b03      	ldr	r3, [pc, #12]	@ (800dbe8 <USBD_static_malloc+0x18>)
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	20001e80 	.word	0x20001e80

0800dbec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800dbf4:	bf00      	nop
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dc04:	f7f3 fa30 	bl	8001068 <SystemClock_Config>
}
 800dc08:	bf00      	nop
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc1a:	79fb      	ldrb	r3, [r7, #7]
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	d817      	bhi.n	800dc50 <USBD_Get_USB_Status+0x44>
 800dc20:	a201      	add	r2, pc, #4	@ (adr r2, 800dc28 <USBD_Get_USB_Status+0x1c>)
 800dc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc26:	bf00      	nop
 800dc28:	0800dc39 	.word	0x0800dc39
 800dc2c:	0800dc3f 	.word	0x0800dc3f
 800dc30:	0800dc45 	.word	0x0800dc45
 800dc34:	0800dc4b 	.word	0x0800dc4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc3c:	e00b      	b.n	800dc56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc3e:	2303      	movs	r3, #3
 800dc40:	73fb      	strb	r3, [r7, #15]
    break;
 800dc42:	e008      	b.n	800dc56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc44:	2301      	movs	r3, #1
 800dc46:	73fb      	strb	r3, [r7, #15]
    break;
 800dc48:	e005      	b.n	800dc56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc4e:	e002      	b.n	800dc56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc50:	2303      	movs	r3, #3
 800dc52:	73fb      	strb	r3, [r7, #15]
    break;
 800dc54:	bf00      	nop
  }
  return usb_status;
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <__cvt>:
 800dc64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	ec57 6b10 	vmov	r6, r7, d0
 800dc6c:	2f00      	cmp	r7, #0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	4619      	mov	r1, r3
 800dc72:	463b      	mov	r3, r7
 800dc74:	bfbb      	ittet	lt
 800dc76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dc7a:	461f      	movlt	r7, r3
 800dc7c:	2300      	movge	r3, #0
 800dc7e:	232d      	movlt	r3, #45	@ 0x2d
 800dc80:	700b      	strb	r3, [r1, #0]
 800dc82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dc88:	4691      	mov	r9, r2
 800dc8a:	f023 0820 	bic.w	r8, r3, #32
 800dc8e:	bfbc      	itt	lt
 800dc90:	4632      	movlt	r2, r6
 800dc92:	4616      	movlt	r6, r2
 800dc94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc98:	d005      	beq.n	800dca6 <__cvt+0x42>
 800dc9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dc9e:	d100      	bne.n	800dca2 <__cvt+0x3e>
 800dca0:	3401      	adds	r4, #1
 800dca2:	2102      	movs	r1, #2
 800dca4:	e000      	b.n	800dca8 <__cvt+0x44>
 800dca6:	2103      	movs	r1, #3
 800dca8:	ab03      	add	r3, sp, #12
 800dcaa:	9301      	str	r3, [sp, #4]
 800dcac:	ab02      	add	r3, sp, #8
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	ec47 6b10 	vmov	d0, r6, r7
 800dcb4:	4653      	mov	r3, sl
 800dcb6:	4622      	mov	r2, r4
 800dcb8:	f000 fef6 	bl	800eaa8 <_dtoa_r>
 800dcbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	d119      	bne.n	800dcf8 <__cvt+0x94>
 800dcc4:	f019 0f01 	tst.w	r9, #1
 800dcc8:	d00e      	beq.n	800dce8 <__cvt+0x84>
 800dcca:	eb00 0904 	add.w	r9, r0, r4
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 fecf 	bl	8000a78 <__aeabi_dcmpeq>
 800dcda:	b108      	cbz	r0, 800dce0 <__cvt+0x7c>
 800dcdc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dce0:	2230      	movs	r2, #48	@ 0x30
 800dce2:	9b03      	ldr	r3, [sp, #12]
 800dce4:	454b      	cmp	r3, r9
 800dce6:	d31e      	bcc.n	800dd26 <__cvt+0xc2>
 800dce8:	9b03      	ldr	r3, [sp, #12]
 800dcea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcec:	1b5b      	subs	r3, r3, r5
 800dcee:	4628      	mov	r0, r5
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	b004      	add	sp, #16
 800dcf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dcfc:	eb00 0904 	add.w	r9, r0, r4
 800dd00:	d1e5      	bne.n	800dcce <__cvt+0x6a>
 800dd02:	7803      	ldrb	r3, [r0, #0]
 800dd04:	2b30      	cmp	r3, #48	@ 0x30
 800dd06:	d10a      	bne.n	800dd1e <__cvt+0xba>
 800dd08:	2200      	movs	r2, #0
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	4639      	mov	r1, r7
 800dd10:	f7f2 feb2 	bl	8000a78 <__aeabi_dcmpeq>
 800dd14:	b918      	cbnz	r0, 800dd1e <__cvt+0xba>
 800dd16:	f1c4 0401 	rsb	r4, r4, #1
 800dd1a:	f8ca 4000 	str.w	r4, [sl]
 800dd1e:	f8da 3000 	ldr.w	r3, [sl]
 800dd22:	4499      	add	r9, r3
 800dd24:	e7d3      	b.n	800dcce <__cvt+0x6a>
 800dd26:	1c59      	adds	r1, r3, #1
 800dd28:	9103      	str	r1, [sp, #12]
 800dd2a:	701a      	strb	r2, [r3, #0]
 800dd2c:	e7d9      	b.n	800dce2 <__cvt+0x7e>

0800dd2e <__exponent>:
 800dd2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd30:	2900      	cmp	r1, #0
 800dd32:	bfba      	itte	lt
 800dd34:	4249      	neglt	r1, r1
 800dd36:	232d      	movlt	r3, #45	@ 0x2d
 800dd38:	232b      	movge	r3, #43	@ 0x2b
 800dd3a:	2909      	cmp	r1, #9
 800dd3c:	7002      	strb	r2, [r0, #0]
 800dd3e:	7043      	strb	r3, [r0, #1]
 800dd40:	dd29      	ble.n	800dd96 <__exponent+0x68>
 800dd42:	f10d 0307 	add.w	r3, sp, #7
 800dd46:	461d      	mov	r5, r3
 800dd48:	270a      	movs	r7, #10
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	fbb1 f6f7 	udiv	r6, r1, r7
 800dd50:	fb07 1416 	mls	r4, r7, r6, r1
 800dd54:	3430      	adds	r4, #48	@ 0x30
 800dd56:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	2c63      	cmp	r4, #99	@ 0x63
 800dd5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd62:	4631      	mov	r1, r6
 800dd64:	dcf1      	bgt.n	800dd4a <__exponent+0x1c>
 800dd66:	3130      	adds	r1, #48	@ 0x30
 800dd68:	1e94      	subs	r4, r2, #2
 800dd6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd6e:	1c41      	adds	r1, r0, #1
 800dd70:	4623      	mov	r3, r4
 800dd72:	42ab      	cmp	r3, r5
 800dd74:	d30a      	bcc.n	800dd8c <__exponent+0x5e>
 800dd76:	f10d 0309 	add.w	r3, sp, #9
 800dd7a:	1a9b      	subs	r3, r3, r2
 800dd7c:	42ac      	cmp	r4, r5
 800dd7e:	bf88      	it	hi
 800dd80:	2300      	movhi	r3, #0
 800dd82:	3302      	adds	r3, #2
 800dd84:	4403      	add	r3, r0
 800dd86:	1a18      	subs	r0, r3, r0
 800dd88:	b003      	add	sp, #12
 800dd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dd90:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dd94:	e7ed      	b.n	800dd72 <__exponent+0x44>
 800dd96:	2330      	movs	r3, #48	@ 0x30
 800dd98:	3130      	adds	r1, #48	@ 0x30
 800dd9a:	7083      	strb	r3, [r0, #2]
 800dd9c:	70c1      	strb	r1, [r0, #3]
 800dd9e:	1d03      	adds	r3, r0, #4
 800dda0:	e7f1      	b.n	800dd86 <__exponent+0x58>
	...

0800dda4 <_printf_float>:
 800dda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda8:	b08d      	sub	sp, #52	@ 0x34
 800ddaa:	460c      	mov	r4, r1
 800ddac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ddb0:	4616      	mov	r6, r2
 800ddb2:	461f      	mov	r7, r3
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	f000 fd67 	bl	800e888 <_localeconv_r>
 800ddba:	6803      	ldr	r3, [r0, #0]
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7f2 fa2e 	bl	8000220 <strlen>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddc8:	f8d8 3000 	ldr.w	r3, [r8]
 800ddcc:	9005      	str	r0, [sp, #20]
 800ddce:	3307      	adds	r3, #7
 800ddd0:	f023 0307 	bic.w	r3, r3, #7
 800ddd4:	f103 0208 	add.w	r2, r3, #8
 800ddd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dddc:	f8d4 b000 	ldr.w	fp, [r4]
 800dde0:	f8c8 2000 	str.w	r2, [r8]
 800dde4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dde8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ddec:	9307      	str	r3, [sp, #28]
 800ddee:	f8cd 8018 	str.w	r8, [sp, #24]
 800ddf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ddf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddfa:	4b9c      	ldr	r3, [pc, #624]	@ (800e06c <_printf_float+0x2c8>)
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295
 800de00:	f7f2 fe6c 	bl	8000adc <__aeabi_dcmpun>
 800de04:	bb70      	cbnz	r0, 800de64 <_printf_float+0xc0>
 800de06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de0a:	4b98      	ldr	r3, [pc, #608]	@ (800e06c <_printf_float+0x2c8>)
 800de0c:	f04f 32ff 	mov.w	r2, #4294967295
 800de10:	f7f2 fe46 	bl	8000aa0 <__aeabi_dcmple>
 800de14:	bb30      	cbnz	r0, 800de64 <_printf_float+0xc0>
 800de16:	2200      	movs	r2, #0
 800de18:	2300      	movs	r3, #0
 800de1a:	4640      	mov	r0, r8
 800de1c:	4649      	mov	r1, r9
 800de1e:	f7f2 fe35 	bl	8000a8c <__aeabi_dcmplt>
 800de22:	b110      	cbz	r0, 800de2a <_printf_float+0x86>
 800de24:	232d      	movs	r3, #45	@ 0x2d
 800de26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de2a:	4a91      	ldr	r2, [pc, #580]	@ (800e070 <_printf_float+0x2cc>)
 800de2c:	4b91      	ldr	r3, [pc, #580]	@ (800e074 <_printf_float+0x2d0>)
 800de2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de32:	bf8c      	ite	hi
 800de34:	4690      	movhi	r8, r2
 800de36:	4698      	movls	r8, r3
 800de38:	2303      	movs	r3, #3
 800de3a:	6123      	str	r3, [r4, #16]
 800de3c:	f02b 0304 	bic.w	r3, fp, #4
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	f04f 0900 	mov.w	r9, #0
 800de46:	9700      	str	r7, [sp, #0]
 800de48:	4633      	mov	r3, r6
 800de4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800de4c:	4621      	mov	r1, r4
 800de4e:	4628      	mov	r0, r5
 800de50:	f000 f9d2 	bl	800e1f8 <_printf_common>
 800de54:	3001      	adds	r0, #1
 800de56:	f040 808d 	bne.w	800df74 <_printf_float+0x1d0>
 800de5a:	f04f 30ff 	mov.w	r0, #4294967295
 800de5e:	b00d      	add	sp, #52	@ 0x34
 800de60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de64:	4642      	mov	r2, r8
 800de66:	464b      	mov	r3, r9
 800de68:	4640      	mov	r0, r8
 800de6a:	4649      	mov	r1, r9
 800de6c:	f7f2 fe36 	bl	8000adc <__aeabi_dcmpun>
 800de70:	b140      	cbz	r0, 800de84 <_printf_float+0xe0>
 800de72:	464b      	mov	r3, r9
 800de74:	2b00      	cmp	r3, #0
 800de76:	bfbc      	itt	lt
 800de78:	232d      	movlt	r3, #45	@ 0x2d
 800de7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800de7e:	4a7e      	ldr	r2, [pc, #504]	@ (800e078 <_printf_float+0x2d4>)
 800de80:	4b7e      	ldr	r3, [pc, #504]	@ (800e07c <_printf_float+0x2d8>)
 800de82:	e7d4      	b.n	800de2e <_printf_float+0x8a>
 800de84:	6863      	ldr	r3, [r4, #4]
 800de86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800de8a:	9206      	str	r2, [sp, #24]
 800de8c:	1c5a      	adds	r2, r3, #1
 800de8e:	d13b      	bne.n	800df08 <_printf_float+0x164>
 800de90:	2306      	movs	r3, #6
 800de92:	6063      	str	r3, [r4, #4]
 800de94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800de98:	2300      	movs	r3, #0
 800de9a:	6022      	str	r2, [r4, #0]
 800de9c:	9303      	str	r3, [sp, #12]
 800de9e:	ab0a      	add	r3, sp, #40	@ 0x28
 800dea0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dea4:	ab09      	add	r3, sp, #36	@ 0x24
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	6861      	ldr	r1, [r4, #4]
 800deaa:	ec49 8b10 	vmov	d0, r8, r9
 800deae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800deb2:	4628      	mov	r0, r5
 800deb4:	f7ff fed6 	bl	800dc64 <__cvt>
 800deb8:	9b06      	ldr	r3, [sp, #24]
 800deba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800debc:	2b47      	cmp	r3, #71	@ 0x47
 800debe:	4680      	mov	r8, r0
 800dec0:	d129      	bne.n	800df16 <_printf_float+0x172>
 800dec2:	1cc8      	adds	r0, r1, #3
 800dec4:	db02      	blt.n	800decc <_printf_float+0x128>
 800dec6:	6863      	ldr	r3, [r4, #4]
 800dec8:	4299      	cmp	r1, r3
 800deca:	dd41      	ble.n	800df50 <_printf_float+0x1ac>
 800decc:	f1aa 0a02 	sub.w	sl, sl, #2
 800ded0:	fa5f fa8a 	uxtb.w	sl, sl
 800ded4:	3901      	subs	r1, #1
 800ded6:	4652      	mov	r2, sl
 800ded8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dedc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dede:	f7ff ff26 	bl	800dd2e <__exponent>
 800dee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dee4:	1813      	adds	r3, r2, r0
 800dee6:	2a01      	cmp	r2, #1
 800dee8:	4681      	mov	r9, r0
 800deea:	6123      	str	r3, [r4, #16]
 800deec:	dc02      	bgt.n	800def4 <_printf_float+0x150>
 800deee:	6822      	ldr	r2, [r4, #0]
 800def0:	07d2      	lsls	r2, r2, #31
 800def2:	d501      	bpl.n	800def8 <_printf_float+0x154>
 800def4:	3301      	adds	r3, #1
 800def6:	6123      	str	r3, [r4, #16]
 800def8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800defc:	2b00      	cmp	r3, #0
 800defe:	d0a2      	beq.n	800de46 <_printf_float+0xa2>
 800df00:	232d      	movs	r3, #45	@ 0x2d
 800df02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df06:	e79e      	b.n	800de46 <_printf_float+0xa2>
 800df08:	9a06      	ldr	r2, [sp, #24]
 800df0a:	2a47      	cmp	r2, #71	@ 0x47
 800df0c:	d1c2      	bne.n	800de94 <_printf_float+0xf0>
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1c0      	bne.n	800de94 <_printf_float+0xf0>
 800df12:	2301      	movs	r3, #1
 800df14:	e7bd      	b.n	800de92 <_printf_float+0xee>
 800df16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800df1a:	d9db      	bls.n	800ded4 <_printf_float+0x130>
 800df1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800df20:	d118      	bne.n	800df54 <_printf_float+0x1b0>
 800df22:	2900      	cmp	r1, #0
 800df24:	6863      	ldr	r3, [r4, #4]
 800df26:	dd0b      	ble.n	800df40 <_printf_float+0x19c>
 800df28:	6121      	str	r1, [r4, #16]
 800df2a:	b913      	cbnz	r3, 800df32 <_printf_float+0x18e>
 800df2c:	6822      	ldr	r2, [r4, #0]
 800df2e:	07d0      	lsls	r0, r2, #31
 800df30:	d502      	bpl.n	800df38 <_printf_float+0x194>
 800df32:	3301      	adds	r3, #1
 800df34:	440b      	add	r3, r1
 800df36:	6123      	str	r3, [r4, #16]
 800df38:	65a1      	str	r1, [r4, #88]	@ 0x58
 800df3a:	f04f 0900 	mov.w	r9, #0
 800df3e:	e7db      	b.n	800def8 <_printf_float+0x154>
 800df40:	b913      	cbnz	r3, 800df48 <_printf_float+0x1a4>
 800df42:	6822      	ldr	r2, [r4, #0]
 800df44:	07d2      	lsls	r2, r2, #31
 800df46:	d501      	bpl.n	800df4c <_printf_float+0x1a8>
 800df48:	3302      	adds	r3, #2
 800df4a:	e7f4      	b.n	800df36 <_printf_float+0x192>
 800df4c:	2301      	movs	r3, #1
 800df4e:	e7f2      	b.n	800df36 <_printf_float+0x192>
 800df50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800df54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df56:	4299      	cmp	r1, r3
 800df58:	db05      	blt.n	800df66 <_printf_float+0x1c2>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	6121      	str	r1, [r4, #16]
 800df5e:	07d8      	lsls	r0, r3, #31
 800df60:	d5ea      	bpl.n	800df38 <_printf_float+0x194>
 800df62:	1c4b      	adds	r3, r1, #1
 800df64:	e7e7      	b.n	800df36 <_printf_float+0x192>
 800df66:	2900      	cmp	r1, #0
 800df68:	bfd4      	ite	le
 800df6a:	f1c1 0202 	rsble	r2, r1, #2
 800df6e:	2201      	movgt	r2, #1
 800df70:	4413      	add	r3, r2
 800df72:	e7e0      	b.n	800df36 <_printf_float+0x192>
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	055a      	lsls	r2, r3, #21
 800df78:	d407      	bmi.n	800df8a <_printf_float+0x1e6>
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	4642      	mov	r2, r8
 800df7e:	4631      	mov	r1, r6
 800df80:	4628      	mov	r0, r5
 800df82:	47b8      	blx	r7
 800df84:	3001      	adds	r0, #1
 800df86:	d12b      	bne.n	800dfe0 <_printf_float+0x23c>
 800df88:	e767      	b.n	800de5a <_printf_float+0xb6>
 800df8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800df8e:	f240 80dd 	bls.w	800e14c <_printf_float+0x3a8>
 800df92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df96:	2200      	movs	r2, #0
 800df98:	2300      	movs	r3, #0
 800df9a:	f7f2 fd6d 	bl	8000a78 <__aeabi_dcmpeq>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d033      	beq.n	800e00a <_printf_float+0x266>
 800dfa2:	4a37      	ldr	r2, [pc, #220]	@ (800e080 <_printf_float+0x2dc>)
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b8      	blx	r7
 800dfac:	3001      	adds	r0, #1
 800dfae:	f43f af54 	beq.w	800de5a <_printf_float+0xb6>
 800dfb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dfb6:	4543      	cmp	r3, r8
 800dfb8:	db02      	blt.n	800dfc0 <_printf_float+0x21c>
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	07d8      	lsls	r0, r3, #31
 800dfbe:	d50f      	bpl.n	800dfe0 <_printf_float+0x23c>
 800dfc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	47b8      	blx	r7
 800dfca:	3001      	adds	r0, #1
 800dfcc:	f43f af45 	beq.w	800de5a <_printf_float+0xb6>
 800dfd0:	f04f 0900 	mov.w	r9, #0
 800dfd4:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfd8:	f104 0a1a 	add.w	sl, r4, #26
 800dfdc:	45c8      	cmp	r8, r9
 800dfde:	dc09      	bgt.n	800dff4 <_printf_float+0x250>
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	079b      	lsls	r3, r3, #30
 800dfe4:	f100 8103 	bmi.w	800e1ee <_printf_float+0x44a>
 800dfe8:	68e0      	ldr	r0, [r4, #12]
 800dfea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfec:	4298      	cmp	r0, r3
 800dfee:	bfb8      	it	lt
 800dff0:	4618      	movlt	r0, r3
 800dff2:	e734      	b.n	800de5e <_printf_float+0xba>
 800dff4:	2301      	movs	r3, #1
 800dff6:	4652      	mov	r2, sl
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f43f af2b 	beq.w	800de5a <_printf_float+0xb6>
 800e004:	f109 0901 	add.w	r9, r9, #1
 800e008:	e7e8      	b.n	800dfdc <_printf_float+0x238>
 800e00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dc39      	bgt.n	800e084 <_printf_float+0x2e0>
 800e010:	4a1b      	ldr	r2, [pc, #108]	@ (800e080 <_printf_float+0x2dc>)
 800e012:	2301      	movs	r3, #1
 800e014:	4631      	mov	r1, r6
 800e016:	4628      	mov	r0, r5
 800e018:	47b8      	blx	r7
 800e01a:	3001      	adds	r0, #1
 800e01c:	f43f af1d 	beq.w	800de5a <_printf_float+0xb6>
 800e020:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e024:	ea59 0303 	orrs.w	r3, r9, r3
 800e028:	d102      	bne.n	800e030 <_printf_float+0x28c>
 800e02a:	6823      	ldr	r3, [r4, #0]
 800e02c:	07d9      	lsls	r1, r3, #31
 800e02e:	d5d7      	bpl.n	800dfe0 <_printf_float+0x23c>
 800e030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e034:	4631      	mov	r1, r6
 800e036:	4628      	mov	r0, r5
 800e038:	47b8      	blx	r7
 800e03a:	3001      	adds	r0, #1
 800e03c:	f43f af0d 	beq.w	800de5a <_printf_float+0xb6>
 800e040:	f04f 0a00 	mov.w	sl, #0
 800e044:	f104 0b1a 	add.w	fp, r4, #26
 800e048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e04a:	425b      	negs	r3, r3
 800e04c:	4553      	cmp	r3, sl
 800e04e:	dc01      	bgt.n	800e054 <_printf_float+0x2b0>
 800e050:	464b      	mov	r3, r9
 800e052:	e793      	b.n	800df7c <_printf_float+0x1d8>
 800e054:	2301      	movs	r3, #1
 800e056:	465a      	mov	r2, fp
 800e058:	4631      	mov	r1, r6
 800e05a:	4628      	mov	r0, r5
 800e05c:	47b8      	blx	r7
 800e05e:	3001      	adds	r0, #1
 800e060:	f43f aefb 	beq.w	800de5a <_printf_float+0xb6>
 800e064:	f10a 0a01 	add.w	sl, sl, #1
 800e068:	e7ee      	b.n	800e048 <_printf_float+0x2a4>
 800e06a:	bf00      	nop
 800e06c:	7fefffff 	.word	0x7fefffff
 800e070:	0801079c 	.word	0x0801079c
 800e074:	08010798 	.word	0x08010798
 800e078:	080107a4 	.word	0x080107a4
 800e07c:	080107a0 	.word	0x080107a0
 800e080:	080107a8 	.word	0x080107a8
 800e084:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e086:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e08a:	4553      	cmp	r3, sl
 800e08c:	bfa8      	it	ge
 800e08e:	4653      	movge	r3, sl
 800e090:	2b00      	cmp	r3, #0
 800e092:	4699      	mov	r9, r3
 800e094:	dc36      	bgt.n	800e104 <_printf_float+0x360>
 800e096:	f04f 0b00 	mov.w	fp, #0
 800e09a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e09e:	f104 021a 	add.w	r2, r4, #26
 800e0a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e0a4:	9306      	str	r3, [sp, #24]
 800e0a6:	eba3 0309 	sub.w	r3, r3, r9
 800e0aa:	455b      	cmp	r3, fp
 800e0ac:	dc31      	bgt.n	800e112 <_printf_float+0x36e>
 800e0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b0:	459a      	cmp	sl, r3
 800e0b2:	dc3a      	bgt.n	800e12a <_printf_float+0x386>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	07da      	lsls	r2, r3, #31
 800e0b8:	d437      	bmi.n	800e12a <_printf_float+0x386>
 800e0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0bc:	ebaa 0903 	sub.w	r9, sl, r3
 800e0c0:	9b06      	ldr	r3, [sp, #24]
 800e0c2:	ebaa 0303 	sub.w	r3, sl, r3
 800e0c6:	4599      	cmp	r9, r3
 800e0c8:	bfa8      	it	ge
 800e0ca:	4699      	movge	r9, r3
 800e0cc:	f1b9 0f00 	cmp.w	r9, #0
 800e0d0:	dc33      	bgt.n	800e13a <_printf_float+0x396>
 800e0d2:	f04f 0800 	mov.w	r8, #0
 800e0d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0da:	f104 0b1a 	add.w	fp, r4, #26
 800e0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e0:	ebaa 0303 	sub.w	r3, sl, r3
 800e0e4:	eba3 0309 	sub.w	r3, r3, r9
 800e0e8:	4543      	cmp	r3, r8
 800e0ea:	f77f af79 	ble.w	800dfe0 <_printf_float+0x23c>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	465a      	mov	r2, fp
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	47b8      	blx	r7
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	f43f aeae 	beq.w	800de5a <_printf_float+0xb6>
 800e0fe:	f108 0801 	add.w	r8, r8, #1
 800e102:	e7ec      	b.n	800e0de <_printf_float+0x33a>
 800e104:	4642      	mov	r2, r8
 800e106:	4631      	mov	r1, r6
 800e108:	4628      	mov	r0, r5
 800e10a:	47b8      	blx	r7
 800e10c:	3001      	adds	r0, #1
 800e10e:	d1c2      	bne.n	800e096 <_printf_float+0x2f2>
 800e110:	e6a3      	b.n	800de5a <_printf_float+0xb6>
 800e112:	2301      	movs	r3, #1
 800e114:	4631      	mov	r1, r6
 800e116:	4628      	mov	r0, r5
 800e118:	9206      	str	r2, [sp, #24]
 800e11a:	47b8      	blx	r7
 800e11c:	3001      	adds	r0, #1
 800e11e:	f43f ae9c 	beq.w	800de5a <_printf_float+0xb6>
 800e122:	9a06      	ldr	r2, [sp, #24]
 800e124:	f10b 0b01 	add.w	fp, fp, #1
 800e128:	e7bb      	b.n	800e0a2 <_printf_float+0x2fe>
 800e12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e12e:	4631      	mov	r1, r6
 800e130:	4628      	mov	r0, r5
 800e132:	47b8      	blx	r7
 800e134:	3001      	adds	r0, #1
 800e136:	d1c0      	bne.n	800e0ba <_printf_float+0x316>
 800e138:	e68f      	b.n	800de5a <_printf_float+0xb6>
 800e13a:	9a06      	ldr	r2, [sp, #24]
 800e13c:	464b      	mov	r3, r9
 800e13e:	4442      	add	r2, r8
 800e140:	4631      	mov	r1, r6
 800e142:	4628      	mov	r0, r5
 800e144:	47b8      	blx	r7
 800e146:	3001      	adds	r0, #1
 800e148:	d1c3      	bne.n	800e0d2 <_printf_float+0x32e>
 800e14a:	e686      	b.n	800de5a <_printf_float+0xb6>
 800e14c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e150:	f1ba 0f01 	cmp.w	sl, #1
 800e154:	dc01      	bgt.n	800e15a <_printf_float+0x3b6>
 800e156:	07db      	lsls	r3, r3, #31
 800e158:	d536      	bpl.n	800e1c8 <_printf_float+0x424>
 800e15a:	2301      	movs	r3, #1
 800e15c:	4642      	mov	r2, r8
 800e15e:	4631      	mov	r1, r6
 800e160:	4628      	mov	r0, r5
 800e162:	47b8      	blx	r7
 800e164:	3001      	adds	r0, #1
 800e166:	f43f ae78 	beq.w	800de5a <_printf_float+0xb6>
 800e16a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e16e:	4631      	mov	r1, r6
 800e170:	4628      	mov	r0, r5
 800e172:	47b8      	blx	r7
 800e174:	3001      	adds	r0, #1
 800e176:	f43f ae70 	beq.w	800de5a <_printf_float+0xb6>
 800e17a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e17e:	2200      	movs	r2, #0
 800e180:	2300      	movs	r3, #0
 800e182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e186:	f7f2 fc77 	bl	8000a78 <__aeabi_dcmpeq>
 800e18a:	b9c0      	cbnz	r0, 800e1be <_printf_float+0x41a>
 800e18c:	4653      	mov	r3, sl
 800e18e:	f108 0201 	add.w	r2, r8, #1
 800e192:	4631      	mov	r1, r6
 800e194:	4628      	mov	r0, r5
 800e196:	47b8      	blx	r7
 800e198:	3001      	adds	r0, #1
 800e19a:	d10c      	bne.n	800e1b6 <_printf_float+0x412>
 800e19c:	e65d      	b.n	800de5a <_printf_float+0xb6>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	465a      	mov	r2, fp
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	47b8      	blx	r7
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	f43f ae56 	beq.w	800de5a <_printf_float+0xb6>
 800e1ae:	f108 0801 	add.w	r8, r8, #1
 800e1b2:	45d0      	cmp	r8, sl
 800e1b4:	dbf3      	blt.n	800e19e <_printf_float+0x3fa>
 800e1b6:	464b      	mov	r3, r9
 800e1b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e1bc:	e6df      	b.n	800df7e <_printf_float+0x1da>
 800e1be:	f04f 0800 	mov.w	r8, #0
 800e1c2:	f104 0b1a 	add.w	fp, r4, #26
 800e1c6:	e7f4      	b.n	800e1b2 <_printf_float+0x40e>
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	4642      	mov	r2, r8
 800e1cc:	e7e1      	b.n	800e192 <_printf_float+0x3ee>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	464a      	mov	r2, r9
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	47b8      	blx	r7
 800e1d8:	3001      	adds	r0, #1
 800e1da:	f43f ae3e 	beq.w	800de5a <_printf_float+0xb6>
 800e1de:	f108 0801 	add.w	r8, r8, #1
 800e1e2:	68e3      	ldr	r3, [r4, #12]
 800e1e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1e6:	1a5b      	subs	r3, r3, r1
 800e1e8:	4543      	cmp	r3, r8
 800e1ea:	dcf0      	bgt.n	800e1ce <_printf_float+0x42a>
 800e1ec:	e6fc      	b.n	800dfe8 <_printf_float+0x244>
 800e1ee:	f04f 0800 	mov.w	r8, #0
 800e1f2:	f104 0919 	add.w	r9, r4, #25
 800e1f6:	e7f4      	b.n	800e1e2 <_printf_float+0x43e>

0800e1f8 <_printf_common>:
 800e1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1fc:	4616      	mov	r6, r2
 800e1fe:	4698      	mov	r8, r3
 800e200:	688a      	ldr	r2, [r1, #8]
 800e202:	690b      	ldr	r3, [r1, #16]
 800e204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e208:	4293      	cmp	r3, r2
 800e20a:	bfb8      	it	lt
 800e20c:	4613      	movlt	r3, r2
 800e20e:	6033      	str	r3, [r6, #0]
 800e210:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e214:	4607      	mov	r7, r0
 800e216:	460c      	mov	r4, r1
 800e218:	b10a      	cbz	r2, 800e21e <_printf_common+0x26>
 800e21a:	3301      	adds	r3, #1
 800e21c:	6033      	str	r3, [r6, #0]
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	0699      	lsls	r1, r3, #26
 800e222:	bf42      	ittt	mi
 800e224:	6833      	ldrmi	r3, [r6, #0]
 800e226:	3302      	addmi	r3, #2
 800e228:	6033      	strmi	r3, [r6, #0]
 800e22a:	6825      	ldr	r5, [r4, #0]
 800e22c:	f015 0506 	ands.w	r5, r5, #6
 800e230:	d106      	bne.n	800e240 <_printf_common+0x48>
 800e232:	f104 0a19 	add.w	sl, r4, #25
 800e236:	68e3      	ldr	r3, [r4, #12]
 800e238:	6832      	ldr	r2, [r6, #0]
 800e23a:	1a9b      	subs	r3, r3, r2
 800e23c:	42ab      	cmp	r3, r5
 800e23e:	dc26      	bgt.n	800e28e <_printf_common+0x96>
 800e240:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e244:	6822      	ldr	r2, [r4, #0]
 800e246:	3b00      	subs	r3, #0
 800e248:	bf18      	it	ne
 800e24a:	2301      	movne	r3, #1
 800e24c:	0692      	lsls	r2, r2, #26
 800e24e:	d42b      	bmi.n	800e2a8 <_printf_common+0xb0>
 800e250:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e254:	4641      	mov	r1, r8
 800e256:	4638      	mov	r0, r7
 800e258:	47c8      	blx	r9
 800e25a:	3001      	adds	r0, #1
 800e25c:	d01e      	beq.n	800e29c <_printf_common+0xa4>
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	6922      	ldr	r2, [r4, #16]
 800e262:	f003 0306 	and.w	r3, r3, #6
 800e266:	2b04      	cmp	r3, #4
 800e268:	bf02      	ittt	eq
 800e26a:	68e5      	ldreq	r5, [r4, #12]
 800e26c:	6833      	ldreq	r3, [r6, #0]
 800e26e:	1aed      	subeq	r5, r5, r3
 800e270:	68a3      	ldr	r3, [r4, #8]
 800e272:	bf0c      	ite	eq
 800e274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e278:	2500      	movne	r5, #0
 800e27a:	4293      	cmp	r3, r2
 800e27c:	bfc4      	itt	gt
 800e27e:	1a9b      	subgt	r3, r3, r2
 800e280:	18ed      	addgt	r5, r5, r3
 800e282:	2600      	movs	r6, #0
 800e284:	341a      	adds	r4, #26
 800e286:	42b5      	cmp	r5, r6
 800e288:	d11a      	bne.n	800e2c0 <_printf_common+0xc8>
 800e28a:	2000      	movs	r0, #0
 800e28c:	e008      	b.n	800e2a0 <_printf_common+0xa8>
 800e28e:	2301      	movs	r3, #1
 800e290:	4652      	mov	r2, sl
 800e292:	4641      	mov	r1, r8
 800e294:	4638      	mov	r0, r7
 800e296:	47c8      	blx	r9
 800e298:	3001      	adds	r0, #1
 800e29a:	d103      	bne.n	800e2a4 <_printf_common+0xac>
 800e29c:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a4:	3501      	adds	r5, #1
 800e2a6:	e7c6      	b.n	800e236 <_printf_common+0x3e>
 800e2a8:	18e1      	adds	r1, r4, r3
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	2030      	movs	r0, #48	@ 0x30
 800e2ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2b2:	4422      	add	r2, r4
 800e2b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2bc:	3302      	adds	r3, #2
 800e2be:	e7c7      	b.n	800e250 <_printf_common+0x58>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	4641      	mov	r1, r8
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	47c8      	blx	r9
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	d0e6      	beq.n	800e29c <_printf_common+0xa4>
 800e2ce:	3601      	adds	r6, #1
 800e2d0:	e7d9      	b.n	800e286 <_printf_common+0x8e>
	...

0800e2d4 <_printf_i>:
 800e2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d8:	7e0f      	ldrb	r7, [r1, #24]
 800e2da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2dc:	2f78      	cmp	r7, #120	@ 0x78
 800e2de:	4691      	mov	r9, r2
 800e2e0:	4680      	mov	r8, r0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	469a      	mov	sl, r3
 800e2e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2ea:	d807      	bhi.n	800e2fc <_printf_i+0x28>
 800e2ec:	2f62      	cmp	r7, #98	@ 0x62
 800e2ee:	d80a      	bhi.n	800e306 <_printf_i+0x32>
 800e2f0:	2f00      	cmp	r7, #0
 800e2f2:	f000 80d1 	beq.w	800e498 <_printf_i+0x1c4>
 800e2f6:	2f58      	cmp	r7, #88	@ 0x58
 800e2f8:	f000 80b8 	beq.w	800e46c <_printf_i+0x198>
 800e2fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e300:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e304:	e03a      	b.n	800e37c <_printf_i+0xa8>
 800e306:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e30a:	2b15      	cmp	r3, #21
 800e30c:	d8f6      	bhi.n	800e2fc <_printf_i+0x28>
 800e30e:	a101      	add	r1, pc, #4	@ (adr r1, 800e314 <_printf_i+0x40>)
 800e310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e314:	0800e36d 	.word	0x0800e36d
 800e318:	0800e381 	.word	0x0800e381
 800e31c:	0800e2fd 	.word	0x0800e2fd
 800e320:	0800e2fd 	.word	0x0800e2fd
 800e324:	0800e2fd 	.word	0x0800e2fd
 800e328:	0800e2fd 	.word	0x0800e2fd
 800e32c:	0800e381 	.word	0x0800e381
 800e330:	0800e2fd 	.word	0x0800e2fd
 800e334:	0800e2fd 	.word	0x0800e2fd
 800e338:	0800e2fd 	.word	0x0800e2fd
 800e33c:	0800e2fd 	.word	0x0800e2fd
 800e340:	0800e47f 	.word	0x0800e47f
 800e344:	0800e3ab 	.word	0x0800e3ab
 800e348:	0800e439 	.word	0x0800e439
 800e34c:	0800e2fd 	.word	0x0800e2fd
 800e350:	0800e2fd 	.word	0x0800e2fd
 800e354:	0800e4a1 	.word	0x0800e4a1
 800e358:	0800e2fd 	.word	0x0800e2fd
 800e35c:	0800e3ab 	.word	0x0800e3ab
 800e360:	0800e2fd 	.word	0x0800e2fd
 800e364:	0800e2fd 	.word	0x0800e2fd
 800e368:	0800e441 	.word	0x0800e441
 800e36c:	6833      	ldr	r3, [r6, #0]
 800e36e:	1d1a      	adds	r2, r3, #4
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6032      	str	r2, [r6, #0]
 800e374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e378:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e37c:	2301      	movs	r3, #1
 800e37e:	e09c      	b.n	800e4ba <_printf_i+0x1e6>
 800e380:	6833      	ldr	r3, [r6, #0]
 800e382:	6820      	ldr	r0, [r4, #0]
 800e384:	1d19      	adds	r1, r3, #4
 800e386:	6031      	str	r1, [r6, #0]
 800e388:	0606      	lsls	r6, r0, #24
 800e38a:	d501      	bpl.n	800e390 <_printf_i+0xbc>
 800e38c:	681d      	ldr	r5, [r3, #0]
 800e38e:	e003      	b.n	800e398 <_printf_i+0xc4>
 800e390:	0645      	lsls	r5, r0, #25
 800e392:	d5fb      	bpl.n	800e38c <_printf_i+0xb8>
 800e394:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e398:	2d00      	cmp	r5, #0
 800e39a:	da03      	bge.n	800e3a4 <_printf_i+0xd0>
 800e39c:	232d      	movs	r3, #45	@ 0x2d
 800e39e:	426d      	negs	r5, r5
 800e3a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3a4:	4858      	ldr	r0, [pc, #352]	@ (800e508 <_printf_i+0x234>)
 800e3a6:	230a      	movs	r3, #10
 800e3a8:	e011      	b.n	800e3ce <_printf_i+0xfa>
 800e3aa:	6821      	ldr	r1, [r4, #0]
 800e3ac:	6833      	ldr	r3, [r6, #0]
 800e3ae:	0608      	lsls	r0, r1, #24
 800e3b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3b4:	d402      	bmi.n	800e3bc <_printf_i+0xe8>
 800e3b6:	0649      	lsls	r1, r1, #25
 800e3b8:	bf48      	it	mi
 800e3ba:	b2ad      	uxthmi	r5, r5
 800e3bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3be:	4852      	ldr	r0, [pc, #328]	@ (800e508 <_printf_i+0x234>)
 800e3c0:	6033      	str	r3, [r6, #0]
 800e3c2:	bf14      	ite	ne
 800e3c4:	230a      	movne	r3, #10
 800e3c6:	2308      	moveq	r3, #8
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3ce:	6866      	ldr	r6, [r4, #4]
 800e3d0:	60a6      	str	r6, [r4, #8]
 800e3d2:	2e00      	cmp	r6, #0
 800e3d4:	db05      	blt.n	800e3e2 <_printf_i+0x10e>
 800e3d6:	6821      	ldr	r1, [r4, #0]
 800e3d8:	432e      	orrs	r6, r5
 800e3da:	f021 0104 	bic.w	r1, r1, #4
 800e3de:	6021      	str	r1, [r4, #0]
 800e3e0:	d04b      	beq.n	800e47a <_printf_i+0x1a6>
 800e3e2:	4616      	mov	r6, r2
 800e3e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3e8:	fb03 5711 	mls	r7, r3, r1, r5
 800e3ec:	5dc7      	ldrb	r7, [r0, r7]
 800e3ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3f2:	462f      	mov	r7, r5
 800e3f4:	42bb      	cmp	r3, r7
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	d9f4      	bls.n	800e3e4 <_printf_i+0x110>
 800e3fa:	2b08      	cmp	r3, #8
 800e3fc:	d10b      	bne.n	800e416 <_printf_i+0x142>
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	07df      	lsls	r7, r3, #31
 800e402:	d508      	bpl.n	800e416 <_printf_i+0x142>
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	6861      	ldr	r1, [r4, #4]
 800e408:	4299      	cmp	r1, r3
 800e40a:	bfde      	ittt	le
 800e40c:	2330      	movle	r3, #48	@ 0x30
 800e40e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e412:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e416:	1b92      	subs	r2, r2, r6
 800e418:	6122      	str	r2, [r4, #16]
 800e41a:	f8cd a000 	str.w	sl, [sp]
 800e41e:	464b      	mov	r3, r9
 800e420:	aa03      	add	r2, sp, #12
 800e422:	4621      	mov	r1, r4
 800e424:	4640      	mov	r0, r8
 800e426:	f7ff fee7 	bl	800e1f8 <_printf_common>
 800e42a:	3001      	adds	r0, #1
 800e42c:	d14a      	bne.n	800e4c4 <_printf_i+0x1f0>
 800e42e:	f04f 30ff 	mov.w	r0, #4294967295
 800e432:	b004      	add	sp, #16
 800e434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	f043 0320 	orr.w	r3, r3, #32
 800e43e:	6023      	str	r3, [r4, #0]
 800e440:	4832      	ldr	r0, [pc, #200]	@ (800e50c <_printf_i+0x238>)
 800e442:	2778      	movs	r7, #120	@ 0x78
 800e444:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	6831      	ldr	r1, [r6, #0]
 800e44c:	061f      	lsls	r7, r3, #24
 800e44e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e452:	d402      	bmi.n	800e45a <_printf_i+0x186>
 800e454:	065f      	lsls	r7, r3, #25
 800e456:	bf48      	it	mi
 800e458:	b2ad      	uxthmi	r5, r5
 800e45a:	6031      	str	r1, [r6, #0]
 800e45c:	07d9      	lsls	r1, r3, #31
 800e45e:	bf44      	itt	mi
 800e460:	f043 0320 	orrmi.w	r3, r3, #32
 800e464:	6023      	strmi	r3, [r4, #0]
 800e466:	b11d      	cbz	r5, 800e470 <_printf_i+0x19c>
 800e468:	2310      	movs	r3, #16
 800e46a:	e7ad      	b.n	800e3c8 <_printf_i+0xf4>
 800e46c:	4826      	ldr	r0, [pc, #152]	@ (800e508 <_printf_i+0x234>)
 800e46e:	e7e9      	b.n	800e444 <_printf_i+0x170>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	f023 0320 	bic.w	r3, r3, #32
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	e7f6      	b.n	800e468 <_printf_i+0x194>
 800e47a:	4616      	mov	r6, r2
 800e47c:	e7bd      	b.n	800e3fa <_printf_i+0x126>
 800e47e:	6833      	ldr	r3, [r6, #0]
 800e480:	6825      	ldr	r5, [r4, #0]
 800e482:	6961      	ldr	r1, [r4, #20]
 800e484:	1d18      	adds	r0, r3, #4
 800e486:	6030      	str	r0, [r6, #0]
 800e488:	062e      	lsls	r6, r5, #24
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	d501      	bpl.n	800e492 <_printf_i+0x1be>
 800e48e:	6019      	str	r1, [r3, #0]
 800e490:	e002      	b.n	800e498 <_printf_i+0x1c4>
 800e492:	0668      	lsls	r0, r5, #25
 800e494:	d5fb      	bpl.n	800e48e <_printf_i+0x1ba>
 800e496:	8019      	strh	r1, [r3, #0]
 800e498:	2300      	movs	r3, #0
 800e49a:	6123      	str	r3, [r4, #16]
 800e49c:	4616      	mov	r6, r2
 800e49e:	e7bc      	b.n	800e41a <_printf_i+0x146>
 800e4a0:	6833      	ldr	r3, [r6, #0]
 800e4a2:	1d1a      	adds	r2, r3, #4
 800e4a4:	6032      	str	r2, [r6, #0]
 800e4a6:	681e      	ldr	r6, [r3, #0]
 800e4a8:	6862      	ldr	r2, [r4, #4]
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7f1 fe67 	bl	8000180 <memchr>
 800e4b2:	b108      	cbz	r0, 800e4b8 <_printf_i+0x1e4>
 800e4b4:	1b80      	subs	r0, r0, r6
 800e4b6:	6060      	str	r0, [r4, #4]
 800e4b8:	6863      	ldr	r3, [r4, #4]
 800e4ba:	6123      	str	r3, [r4, #16]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4c2:	e7aa      	b.n	800e41a <_printf_i+0x146>
 800e4c4:	6923      	ldr	r3, [r4, #16]
 800e4c6:	4632      	mov	r2, r6
 800e4c8:	4649      	mov	r1, r9
 800e4ca:	4640      	mov	r0, r8
 800e4cc:	47d0      	blx	sl
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	d0ad      	beq.n	800e42e <_printf_i+0x15a>
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	079b      	lsls	r3, r3, #30
 800e4d6:	d413      	bmi.n	800e500 <_printf_i+0x22c>
 800e4d8:	68e0      	ldr	r0, [r4, #12]
 800e4da:	9b03      	ldr	r3, [sp, #12]
 800e4dc:	4298      	cmp	r0, r3
 800e4de:	bfb8      	it	lt
 800e4e0:	4618      	movlt	r0, r3
 800e4e2:	e7a6      	b.n	800e432 <_printf_i+0x15e>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	4632      	mov	r2, r6
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	47d0      	blx	sl
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	d09d      	beq.n	800e42e <_printf_i+0x15a>
 800e4f2:	3501      	adds	r5, #1
 800e4f4:	68e3      	ldr	r3, [r4, #12]
 800e4f6:	9903      	ldr	r1, [sp, #12]
 800e4f8:	1a5b      	subs	r3, r3, r1
 800e4fa:	42ab      	cmp	r3, r5
 800e4fc:	dcf2      	bgt.n	800e4e4 <_printf_i+0x210>
 800e4fe:	e7eb      	b.n	800e4d8 <_printf_i+0x204>
 800e500:	2500      	movs	r5, #0
 800e502:	f104 0619 	add.w	r6, r4, #25
 800e506:	e7f5      	b.n	800e4f4 <_printf_i+0x220>
 800e508:	080107aa 	.word	0x080107aa
 800e50c:	080107bb 	.word	0x080107bb

0800e510 <std>:
 800e510:	2300      	movs	r3, #0
 800e512:	b510      	push	{r4, lr}
 800e514:	4604      	mov	r4, r0
 800e516:	e9c0 3300 	strd	r3, r3, [r0]
 800e51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e51e:	6083      	str	r3, [r0, #8]
 800e520:	8181      	strh	r1, [r0, #12]
 800e522:	6643      	str	r3, [r0, #100]	@ 0x64
 800e524:	81c2      	strh	r2, [r0, #14]
 800e526:	6183      	str	r3, [r0, #24]
 800e528:	4619      	mov	r1, r3
 800e52a:	2208      	movs	r2, #8
 800e52c:	305c      	adds	r0, #92	@ 0x5c
 800e52e:	f000 f9a3 	bl	800e878 <memset>
 800e532:	4b0d      	ldr	r3, [pc, #52]	@ (800e568 <std+0x58>)
 800e534:	6263      	str	r3, [r4, #36]	@ 0x24
 800e536:	4b0d      	ldr	r3, [pc, #52]	@ (800e56c <std+0x5c>)
 800e538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e53a:	4b0d      	ldr	r3, [pc, #52]	@ (800e570 <std+0x60>)
 800e53c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e53e:	4b0d      	ldr	r3, [pc, #52]	@ (800e574 <std+0x64>)
 800e540:	6323      	str	r3, [r4, #48]	@ 0x30
 800e542:	4b0d      	ldr	r3, [pc, #52]	@ (800e578 <std+0x68>)
 800e544:	6224      	str	r4, [r4, #32]
 800e546:	429c      	cmp	r4, r3
 800e548:	d006      	beq.n	800e558 <std+0x48>
 800e54a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e54e:	4294      	cmp	r4, r2
 800e550:	d002      	beq.n	800e558 <std+0x48>
 800e552:	33d0      	adds	r3, #208	@ 0xd0
 800e554:	429c      	cmp	r4, r3
 800e556:	d105      	bne.n	800e564 <std+0x54>
 800e558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e560:	f000 ba06 	b.w	800e970 <__retarget_lock_init_recursive>
 800e564:	bd10      	pop	{r4, pc}
 800e566:	bf00      	nop
 800e568:	0800e6c9 	.word	0x0800e6c9
 800e56c:	0800e6eb 	.word	0x0800e6eb
 800e570:	0800e723 	.word	0x0800e723
 800e574:	0800e747 	.word	0x0800e747
 800e578:	200020a0 	.word	0x200020a0

0800e57c <stdio_exit_handler>:
 800e57c:	4a02      	ldr	r2, [pc, #8]	@ (800e588 <stdio_exit_handler+0xc>)
 800e57e:	4903      	ldr	r1, [pc, #12]	@ (800e58c <stdio_exit_handler+0x10>)
 800e580:	4803      	ldr	r0, [pc, #12]	@ (800e590 <stdio_exit_handler+0x14>)
 800e582:	f000 b869 	b.w	800e658 <_fwalk_sglue>
 800e586:	bf00      	nop
 800e588:	2000012c 	.word	0x2000012c
 800e58c:	080102c9 	.word	0x080102c9
 800e590:	2000013c 	.word	0x2000013c

0800e594 <cleanup_stdio>:
 800e594:	6841      	ldr	r1, [r0, #4]
 800e596:	4b0c      	ldr	r3, [pc, #48]	@ (800e5c8 <cleanup_stdio+0x34>)
 800e598:	4299      	cmp	r1, r3
 800e59a:	b510      	push	{r4, lr}
 800e59c:	4604      	mov	r4, r0
 800e59e:	d001      	beq.n	800e5a4 <cleanup_stdio+0x10>
 800e5a0:	f001 fe92 	bl	80102c8 <_fflush_r>
 800e5a4:	68a1      	ldr	r1, [r4, #8]
 800e5a6:	4b09      	ldr	r3, [pc, #36]	@ (800e5cc <cleanup_stdio+0x38>)
 800e5a8:	4299      	cmp	r1, r3
 800e5aa:	d002      	beq.n	800e5b2 <cleanup_stdio+0x1e>
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f001 fe8b 	bl	80102c8 <_fflush_r>
 800e5b2:	68e1      	ldr	r1, [r4, #12]
 800e5b4:	4b06      	ldr	r3, [pc, #24]	@ (800e5d0 <cleanup_stdio+0x3c>)
 800e5b6:	4299      	cmp	r1, r3
 800e5b8:	d004      	beq.n	800e5c4 <cleanup_stdio+0x30>
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c0:	f001 be82 	b.w	80102c8 <_fflush_r>
 800e5c4:	bd10      	pop	{r4, pc}
 800e5c6:	bf00      	nop
 800e5c8:	200020a0 	.word	0x200020a0
 800e5cc:	20002108 	.word	0x20002108
 800e5d0:	20002170 	.word	0x20002170

0800e5d4 <global_stdio_init.part.0>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e604 <global_stdio_init.part.0+0x30>)
 800e5d8:	4c0b      	ldr	r4, [pc, #44]	@ (800e608 <global_stdio_init.part.0+0x34>)
 800e5da:	4a0c      	ldr	r2, [pc, #48]	@ (800e60c <global_stdio_init.part.0+0x38>)
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	4620      	mov	r0, r4
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	2104      	movs	r1, #4
 800e5e4:	f7ff ff94 	bl	800e510 <std>
 800e5e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	2109      	movs	r1, #9
 800e5f0:	f7ff ff8e 	bl	800e510 <std>
 800e5f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5fe:	2112      	movs	r1, #18
 800e600:	f7ff bf86 	b.w	800e510 <std>
 800e604:	200021d8 	.word	0x200021d8
 800e608:	200020a0 	.word	0x200020a0
 800e60c:	0800e57d 	.word	0x0800e57d

0800e610 <__sfp_lock_acquire>:
 800e610:	4801      	ldr	r0, [pc, #4]	@ (800e618 <__sfp_lock_acquire+0x8>)
 800e612:	f000 b9ae 	b.w	800e972 <__retarget_lock_acquire_recursive>
 800e616:	bf00      	nop
 800e618:	200021e1 	.word	0x200021e1

0800e61c <__sfp_lock_release>:
 800e61c:	4801      	ldr	r0, [pc, #4]	@ (800e624 <__sfp_lock_release+0x8>)
 800e61e:	f000 b9a9 	b.w	800e974 <__retarget_lock_release_recursive>
 800e622:	bf00      	nop
 800e624:	200021e1 	.word	0x200021e1

0800e628 <__sinit>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	f7ff fff0 	bl	800e610 <__sfp_lock_acquire>
 800e630:	6a23      	ldr	r3, [r4, #32]
 800e632:	b11b      	cbz	r3, 800e63c <__sinit+0x14>
 800e634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e638:	f7ff bff0 	b.w	800e61c <__sfp_lock_release>
 800e63c:	4b04      	ldr	r3, [pc, #16]	@ (800e650 <__sinit+0x28>)
 800e63e:	6223      	str	r3, [r4, #32]
 800e640:	4b04      	ldr	r3, [pc, #16]	@ (800e654 <__sinit+0x2c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1f5      	bne.n	800e634 <__sinit+0xc>
 800e648:	f7ff ffc4 	bl	800e5d4 <global_stdio_init.part.0>
 800e64c:	e7f2      	b.n	800e634 <__sinit+0xc>
 800e64e:	bf00      	nop
 800e650:	0800e595 	.word	0x0800e595
 800e654:	200021d8 	.word	0x200021d8

0800e658 <_fwalk_sglue>:
 800e658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e65c:	4607      	mov	r7, r0
 800e65e:	4688      	mov	r8, r1
 800e660:	4614      	mov	r4, r2
 800e662:	2600      	movs	r6, #0
 800e664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e668:	f1b9 0901 	subs.w	r9, r9, #1
 800e66c:	d505      	bpl.n	800e67a <_fwalk_sglue+0x22>
 800e66e:	6824      	ldr	r4, [r4, #0]
 800e670:	2c00      	cmp	r4, #0
 800e672:	d1f7      	bne.n	800e664 <_fwalk_sglue+0xc>
 800e674:	4630      	mov	r0, r6
 800e676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e67a:	89ab      	ldrh	r3, [r5, #12]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d907      	bls.n	800e690 <_fwalk_sglue+0x38>
 800e680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e684:	3301      	adds	r3, #1
 800e686:	d003      	beq.n	800e690 <_fwalk_sglue+0x38>
 800e688:	4629      	mov	r1, r5
 800e68a:	4638      	mov	r0, r7
 800e68c:	47c0      	blx	r8
 800e68e:	4306      	orrs	r6, r0
 800e690:	3568      	adds	r5, #104	@ 0x68
 800e692:	e7e9      	b.n	800e668 <_fwalk_sglue+0x10>

0800e694 <iprintf>:
 800e694:	b40f      	push	{r0, r1, r2, r3}
 800e696:	b507      	push	{r0, r1, r2, lr}
 800e698:	4906      	ldr	r1, [pc, #24]	@ (800e6b4 <iprintf+0x20>)
 800e69a:	ab04      	add	r3, sp, #16
 800e69c:	6808      	ldr	r0, [r1, #0]
 800e69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a2:	6881      	ldr	r1, [r0, #8]
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	f001 fc73 	bl	800ff90 <_vfiprintf_r>
 800e6aa:	b003      	add	sp, #12
 800e6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b0:	b004      	add	sp, #16
 800e6b2:	4770      	bx	lr
 800e6b4:	20000138 	.word	0x20000138

0800e6b8 <putchar>:
 800e6b8:	4b02      	ldr	r3, [pc, #8]	@ (800e6c4 <putchar+0xc>)
 800e6ba:	4601      	mov	r1, r0
 800e6bc:	6818      	ldr	r0, [r3, #0]
 800e6be:	6882      	ldr	r2, [r0, #8]
 800e6c0:	f001 be8c 	b.w	80103dc <_putc_r>
 800e6c4:	20000138 	.word	0x20000138

0800e6c8 <__sread>:
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d0:	f000 f900 	bl	800e8d4 <_read_r>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	bfab      	itete	ge
 800e6d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6da:	89a3      	ldrhlt	r3, [r4, #12]
 800e6dc:	181b      	addge	r3, r3, r0
 800e6de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6e2:	bfac      	ite	ge
 800e6e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6e6:	81a3      	strhlt	r3, [r4, #12]
 800e6e8:	bd10      	pop	{r4, pc}

0800e6ea <__swrite>:
 800e6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ee:	461f      	mov	r7, r3
 800e6f0:	898b      	ldrh	r3, [r1, #12]
 800e6f2:	05db      	lsls	r3, r3, #23
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	4616      	mov	r6, r2
 800e6fa:	d505      	bpl.n	800e708 <__swrite+0x1e>
 800e6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e700:	2302      	movs	r3, #2
 800e702:	2200      	movs	r2, #0
 800e704:	f000 f8d4 	bl	800e8b0 <_lseek_r>
 800e708:	89a3      	ldrh	r3, [r4, #12]
 800e70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e70e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e712:	81a3      	strh	r3, [r4, #12]
 800e714:	4632      	mov	r2, r6
 800e716:	463b      	mov	r3, r7
 800e718:	4628      	mov	r0, r5
 800e71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e71e:	f000 b8eb 	b.w	800e8f8 <_write_r>

0800e722 <__sseek>:
 800e722:	b510      	push	{r4, lr}
 800e724:	460c      	mov	r4, r1
 800e726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72a:	f000 f8c1 	bl	800e8b0 <_lseek_r>
 800e72e:	1c43      	adds	r3, r0, #1
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	bf15      	itete	ne
 800e734:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e73a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e73e:	81a3      	strheq	r3, [r4, #12]
 800e740:	bf18      	it	ne
 800e742:	81a3      	strhne	r3, [r4, #12]
 800e744:	bd10      	pop	{r4, pc}

0800e746 <__sclose>:
 800e746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e74a:	f000 b8a1 	b.w	800e890 <_close_r>

0800e74e <__swbuf_r>:
 800e74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e750:	460e      	mov	r6, r1
 800e752:	4614      	mov	r4, r2
 800e754:	4605      	mov	r5, r0
 800e756:	b118      	cbz	r0, 800e760 <__swbuf_r+0x12>
 800e758:	6a03      	ldr	r3, [r0, #32]
 800e75a:	b90b      	cbnz	r3, 800e760 <__swbuf_r+0x12>
 800e75c:	f7ff ff64 	bl	800e628 <__sinit>
 800e760:	69a3      	ldr	r3, [r4, #24]
 800e762:	60a3      	str	r3, [r4, #8]
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	071a      	lsls	r2, r3, #28
 800e768:	d501      	bpl.n	800e76e <__swbuf_r+0x20>
 800e76a:	6923      	ldr	r3, [r4, #16]
 800e76c:	b943      	cbnz	r3, 800e780 <__swbuf_r+0x32>
 800e76e:	4621      	mov	r1, r4
 800e770:	4628      	mov	r0, r5
 800e772:	f000 f82b 	bl	800e7cc <__swsetup_r>
 800e776:	b118      	cbz	r0, 800e780 <__swbuf_r+0x32>
 800e778:	f04f 37ff 	mov.w	r7, #4294967295
 800e77c:	4638      	mov	r0, r7
 800e77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e780:	6823      	ldr	r3, [r4, #0]
 800e782:	6922      	ldr	r2, [r4, #16]
 800e784:	1a98      	subs	r0, r3, r2
 800e786:	6963      	ldr	r3, [r4, #20]
 800e788:	b2f6      	uxtb	r6, r6
 800e78a:	4283      	cmp	r3, r0
 800e78c:	4637      	mov	r7, r6
 800e78e:	dc05      	bgt.n	800e79c <__swbuf_r+0x4e>
 800e790:	4621      	mov	r1, r4
 800e792:	4628      	mov	r0, r5
 800e794:	f001 fd98 	bl	80102c8 <_fflush_r>
 800e798:	2800      	cmp	r0, #0
 800e79a:	d1ed      	bne.n	800e778 <__swbuf_r+0x2a>
 800e79c:	68a3      	ldr	r3, [r4, #8]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	60a3      	str	r3, [r4, #8]
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	6022      	str	r2, [r4, #0]
 800e7a8:	701e      	strb	r6, [r3, #0]
 800e7aa:	6962      	ldr	r2, [r4, #20]
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d004      	beq.n	800e7bc <__swbuf_r+0x6e>
 800e7b2:	89a3      	ldrh	r3, [r4, #12]
 800e7b4:	07db      	lsls	r3, r3, #31
 800e7b6:	d5e1      	bpl.n	800e77c <__swbuf_r+0x2e>
 800e7b8:	2e0a      	cmp	r6, #10
 800e7ba:	d1df      	bne.n	800e77c <__swbuf_r+0x2e>
 800e7bc:	4621      	mov	r1, r4
 800e7be:	4628      	mov	r0, r5
 800e7c0:	f001 fd82 	bl	80102c8 <_fflush_r>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d0d9      	beq.n	800e77c <__swbuf_r+0x2e>
 800e7c8:	e7d6      	b.n	800e778 <__swbuf_r+0x2a>
	...

0800e7cc <__swsetup_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4b29      	ldr	r3, [pc, #164]	@ (800e874 <__swsetup_r+0xa8>)
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	6818      	ldr	r0, [r3, #0]
 800e7d4:	460c      	mov	r4, r1
 800e7d6:	b118      	cbz	r0, 800e7e0 <__swsetup_r+0x14>
 800e7d8:	6a03      	ldr	r3, [r0, #32]
 800e7da:	b90b      	cbnz	r3, 800e7e0 <__swsetup_r+0x14>
 800e7dc:	f7ff ff24 	bl	800e628 <__sinit>
 800e7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e4:	0719      	lsls	r1, r3, #28
 800e7e6:	d422      	bmi.n	800e82e <__swsetup_r+0x62>
 800e7e8:	06da      	lsls	r2, r3, #27
 800e7ea:	d407      	bmi.n	800e7fc <__swsetup_r+0x30>
 800e7ec:	2209      	movs	r2, #9
 800e7ee:	602a      	str	r2, [r5, #0]
 800e7f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7f4:	81a3      	strh	r3, [r4, #12]
 800e7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fa:	e033      	b.n	800e864 <__swsetup_r+0x98>
 800e7fc:	0758      	lsls	r0, r3, #29
 800e7fe:	d512      	bpl.n	800e826 <__swsetup_r+0x5a>
 800e800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e802:	b141      	cbz	r1, 800e816 <__swsetup_r+0x4a>
 800e804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e808:	4299      	cmp	r1, r3
 800e80a:	d002      	beq.n	800e812 <__swsetup_r+0x46>
 800e80c:	4628      	mov	r0, r5
 800e80e:	f000 ff1b 	bl	800f648 <_free_r>
 800e812:	2300      	movs	r3, #0
 800e814:	6363      	str	r3, [r4, #52]	@ 0x34
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	2300      	movs	r3, #0
 800e820:	6063      	str	r3, [r4, #4]
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	f043 0308 	orr.w	r3, r3, #8
 800e82c:	81a3      	strh	r3, [r4, #12]
 800e82e:	6923      	ldr	r3, [r4, #16]
 800e830:	b94b      	cbnz	r3, 800e846 <__swsetup_r+0x7a>
 800e832:	89a3      	ldrh	r3, [r4, #12]
 800e834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e83c:	d003      	beq.n	800e846 <__swsetup_r+0x7a>
 800e83e:	4621      	mov	r1, r4
 800e840:	4628      	mov	r0, r5
 800e842:	f001 fd8f 	bl	8010364 <__smakebuf_r>
 800e846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e84a:	f013 0201 	ands.w	r2, r3, #1
 800e84e:	d00a      	beq.n	800e866 <__swsetup_r+0x9a>
 800e850:	2200      	movs	r2, #0
 800e852:	60a2      	str	r2, [r4, #8]
 800e854:	6962      	ldr	r2, [r4, #20]
 800e856:	4252      	negs	r2, r2
 800e858:	61a2      	str	r2, [r4, #24]
 800e85a:	6922      	ldr	r2, [r4, #16]
 800e85c:	b942      	cbnz	r2, 800e870 <__swsetup_r+0xa4>
 800e85e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e862:	d1c5      	bne.n	800e7f0 <__swsetup_r+0x24>
 800e864:	bd38      	pop	{r3, r4, r5, pc}
 800e866:	0799      	lsls	r1, r3, #30
 800e868:	bf58      	it	pl
 800e86a:	6962      	ldrpl	r2, [r4, #20]
 800e86c:	60a2      	str	r2, [r4, #8]
 800e86e:	e7f4      	b.n	800e85a <__swsetup_r+0x8e>
 800e870:	2000      	movs	r0, #0
 800e872:	e7f7      	b.n	800e864 <__swsetup_r+0x98>
 800e874:	20000138 	.word	0x20000138

0800e878 <memset>:
 800e878:	4402      	add	r2, r0
 800e87a:	4603      	mov	r3, r0
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d100      	bne.n	800e882 <memset+0xa>
 800e880:	4770      	bx	lr
 800e882:	f803 1b01 	strb.w	r1, [r3], #1
 800e886:	e7f9      	b.n	800e87c <memset+0x4>

0800e888 <_localeconv_r>:
 800e888:	4800      	ldr	r0, [pc, #0]	@ (800e88c <_localeconv_r+0x4>)
 800e88a:	4770      	bx	lr
 800e88c:	20000278 	.word	0x20000278

0800e890 <_close_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4d06      	ldr	r5, [pc, #24]	@ (800e8ac <_close_r+0x1c>)
 800e894:	2300      	movs	r3, #0
 800e896:	4604      	mov	r4, r0
 800e898:	4608      	mov	r0, r1
 800e89a:	602b      	str	r3, [r5, #0]
 800e89c:	f7f2 ff84 	bl	80017a8 <_close>
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d102      	bne.n	800e8aa <_close_r+0x1a>
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	b103      	cbz	r3, 800e8aa <_close_r+0x1a>
 800e8a8:	6023      	str	r3, [r4, #0]
 800e8aa:	bd38      	pop	{r3, r4, r5, pc}
 800e8ac:	200021dc 	.word	0x200021dc

0800e8b0 <_lseek_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4d07      	ldr	r5, [pc, #28]	@ (800e8d0 <_lseek_r+0x20>)
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	4608      	mov	r0, r1
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	602a      	str	r2, [r5, #0]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	f7f2 ff99 	bl	80017f6 <_lseek>
 800e8c4:	1c43      	adds	r3, r0, #1
 800e8c6:	d102      	bne.n	800e8ce <_lseek_r+0x1e>
 800e8c8:	682b      	ldr	r3, [r5, #0]
 800e8ca:	b103      	cbz	r3, 800e8ce <_lseek_r+0x1e>
 800e8cc:	6023      	str	r3, [r4, #0]
 800e8ce:	bd38      	pop	{r3, r4, r5, pc}
 800e8d0:	200021dc 	.word	0x200021dc

0800e8d4 <_read_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	4d07      	ldr	r5, [pc, #28]	@ (800e8f4 <_read_r+0x20>)
 800e8d8:	4604      	mov	r4, r0
 800e8da:	4608      	mov	r0, r1
 800e8dc:	4611      	mov	r1, r2
 800e8de:	2200      	movs	r2, #0
 800e8e0:	602a      	str	r2, [r5, #0]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	f7f2 ff27 	bl	8001736 <_read>
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	d102      	bne.n	800e8f2 <_read_r+0x1e>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	b103      	cbz	r3, 800e8f2 <_read_r+0x1e>
 800e8f0:	6023      	str	r3, [r4, #0]
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	200021dc 	.word	0x200021dc

0800e8f8 <_write_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4d07      	ldr	r5, [pc, #28]	@ (800e918 <_write_r+0x20>)
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	4608      	mov	r0, r1
 800e900:	4611      	mov	r1, r2
 800e902:	2200      	movs	r2, #0
 800e904:	602a      	str	r2, [r5, #0]
 800e906:	461a      	mov	r2, r3
 800e908:	f7f2 ff32 	bl	8001770 <_write>
 800e90c:	1c43      	adds	r3, r0, #1
 800e90e:	d102      	bne.n	800e916 <_write_r+0x1e>
 800e910:	682b      	ldr	r3, [r5, #0]
 800e912:	b103      	cbz	r3, 800e916 <_write_r+0x1e>
 800e914:	6023      	str	r3, [r4, #0]
 800e916:	bd38      	pop	{r3, r4, r5, pc}
 800e918:	200021dc 	.word	0x200021dc

0800e91c <__errno>:
 800e91c:	4b01      	ldr	r3, [pc, #4]	@ (800e924 <__errno+0x8>)
 800e91e:	6818      	ldr	r0, [r3, #0]
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20000138 	.word	0x20000138

0800e928 <__libc_init_array>:
 800e928:	b570      	push	{r4, r5, r6, lr}
 800e92a:	4d0d      	ldr	r5, [pc, #52]	@ (800e960 <__libc_init_array+0x38>)
 800e92c:	4c0d      	ldr	r4, [pc, #52]	@ (800e964 <__libc_init_array+0x3c>)
 800e92e:	1b64      	subs	r4, r4, r5
 800e930:	10a4      	asrs	r4, r4, #2
 800e932:	2600      	movs	r6, #0
 800e934:	42a6      	cmp	r6, r4
 800e936:	d109      	bne.n	800e94c <__libc_init_array+0x24>
 800e938:	4d0b      	ldr	r5, [pc, #44]	@ (800e968 <__libc_init_array+0x40>)
 800e93a:	4c0c      	ldr	r4, [pc, #48]	@ (800e96c <__libc_init_array+0x44>)
 800e93c:	f001 fe64 	bl	8010608 <_init>
 800e940:	1b64      	subs	r4, r4, r5
 800e942:	10a4      	asrs	r4, r4, #2
 800e944:	2600      	movs	r6, #0
 800e946:	42a6      	cmp	r6, r4
 800e948:	d105      	bne.n	800e956 <__libc_init_array+0x2e>
 800e94a:	bd70      	pop	{r4, r5, r6, pc}
 800e94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e950:	4798      	blx	r3
 800e952:	3601      	adds	r6, #1
 800e954:	e7ee      	b.n	800e934 <__libc_init_array+0xc>
 800e956:	f855 3b04 	ldr.w	r3, [r5], #4
 800e95a:	4798      	blx	r3
 800e95c:	3601      	adds	r6, #1
 800e95e:	e7f2      	b.n	800e946 <__libc_init_array+0x1e>
 800e960:	08010b14 	.word	0x08010b14
 800e964:	08010b14 	.word	0x08010b14
 800e968:	08010b14 	.word	0x08010b14
 800e96c:	08010b18 	.word	0x08010b18

0800e970 <__retarget_lock_init_recursive>:
 800e970:	4770      	bx	lr

0800e972 <__retarget_lock_acquire_recursive>:
 800e972:	4770      	bx	lr

0800e974 <__retarget_lock_release_recursive>:
 800e974:	4770      	bx	lr

0800e976 <memcpy>:
 800e976:	440a      	add	r2, r1
 800e978:	4291      	cmp	r1, r2
 800e97a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e97e:	d100      	bne.n	800e982 <memcpy+0xc>
 800e980:	4770      	bx	lr
 800e982:	b510      	push	{r4, lr}
 800e984:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e988:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e98c:	4291      	cmp	r1, r2
 800e98e:	d1f9      	bne.n	800e984 <memcpy+0xe>
 800e990:	bd10      	pop	{r4, pc}

0800e992 <quorem>:
 800e992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e996:	6903      	ldr	r3, [r0, #16]
 800e998:	690c      	ldr	r4, [r1, #16]
 800e99a:	42a3      	cmp	r3, r4
 800e99c:	4607      	mov	r7, r0
 800e99e:	db7e      	blt.n	800ea9e <quorem+0x10c>
 800e9a0:	3c01      	subs	r4, #1
 800e9a2:	f101 0814 	add.w	r8, r1, #20
 800e9a6:	00a3      	lsls	r3, r4, #2
 800e9a8:	f100 0514 	add.w	r5, r0, #20
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e9b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e9c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e9c8:	d32e      	bcc.n	800ea28 <quorem+0x96>
 800e9ca:	f04f 0a00 	mov.w	sl, #0
 800e9ce:	46c4      	mov	ip, r8
 800e9d0:	46ae      	mov	lr, r5
 800e9d2:	46d3      	mov	fp, sl
 800e9d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e9d8:	b298      	uxth	r0, r3
 800e9da:	fb06 a000 	mla	r0, r6, r0, sl
 800e9de:	0c02      	lsrs	r2, r0, #16
 800e9e0:	0c1b      	lsrs	r3, r3, #16
 800e9e2:	fb06 2303 	mla	r3, r6, r3, r2
 800e9e6:	f8de 2000 	ldr.w	r2, [lr]
 800e9ea:	b280      	uxth	r0, r0
 800e9ec:	b292      	uxth	r2, r2
 800e9ee:	1a12      	subs	r2, r2, r0
 800e9f0:	445a      	add	r2, fp
 800e9f2:	f8de 0000 	ldr.w	r0, [lr]
 800e9f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ea00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ea04:	b292      	uxth	r2, r2
 800ea06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ea0a:	45e1      	cmp	r9, ip
 800ea0c:	f84e 2b04 	str.w	r2, [lr], #4
 800ea10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ea14:	d2de      	bcs.n	800e9d4 <quorem+0x42>
 800ea16:	9b00      	ldr	r3, [sp, #0]
 800ea18:	58eb      	ldr	r3, [r5, r3]
 800ea1a:	b92b      	cbnz	r3, 800ea28 <quorem+0x96>
 800ea1c:	9b01      	ldr	r3, [sp, #4]
 800ea1e:	3b04      	subs	r3, #4
 800ea20:	429d      	cmp	r5, r3
 800ea22:	461a      	mov	r2, r3
 800ea24:	d32f      	bcc.n	800ea86 <quorem+0xf4>
 800ea26:	613c      	str	r4, [r7, #16]
 800ea28:	4638      	mov	r0, r7
 800ea2a:	f001 f97f 	bl	800fd2c <__mcmp>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	db25      	blt.n	800ea7e <quorem+0xec>
 800ea32:	4629      	mov	r1, r5
 800ea34:	2000      	movs	r0, #0
 800ea36:	f858 2b04 	ldr.w	r2, [r8], #4
 800ea3a:	f8d1 c000 	ldr.w	ip, [r1]
 800ea3e:	fa1f fe82 	uxth.w	lr, r2
 800ea42:	fa1f f38c 	uxth.w	r3, ip
 800ea46:	eba3 030e 	sub.w	r3, r3, lr
 800ea4a:	4403      	add	r3, r0
 800ea4c:	0c12      	lsrs	r2, r2, #16
 800ea4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ea52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea5c:	45c1      	cmp	r9, r8
 800ea5e:	f841 3b04 	str.w	r3, [r1], #4
 800ea62:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ea66:	d2e6      	bcs.n	800ea36 <quorem+0xa4>
 800ea68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea70:	b922      	cbnz	r2, 800ea7c <quorem+0xea>
 800ea72:	3b04      	subs	r3, #4
 800ea74:	429d      	cmp	r5, r3
 800ea76:	461a      	mov	r2, r3
 800ea78:	d30b      	bcc.n	800ea92 <quorem+0x100>
 800ea7a:	613c      	str	r4, [r7, #16]
 800ea7c:	3601      	adds	r6, #1
 800ea7e:	4630      	mov	r0, r6
 800ea80:	b003      	add	sp, #12
 800ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea86:	6812      	ldr	r2, [r2, #0]
 800ea88:	3b04      	subs	r3, #4
 800ea8a:	2a00      	cmp	r2, #0
 800ea8c:	d1cb      	bne.n	800ea26 <quorem+0x94>
 800ea8e:	3c01      	subs	r4, #1
 800ea90:	e7c6      	b.n	800ea20 <quorem+0x8e>
 800ea92:	6812      	ldr	r2, [r2, #0]
 800ea94:	3b04      	subs	r3, #4
 800ea96:	2a00      	cmp	r2, #0
 800ea98:	d1ef      	bne.n	800ea7a <quorem+0xe8>
 800ea9a:	3c01      	subs	r4, #1
 800ea9c:	e7ea      	b.n	800ea74 <quorem+0xe2>
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	e7ee      	b.n	800ea80 <quorem+0xee>
 800eaa2:	0000      	movs	r0, r0
 800eaa4:	0000      	movs	r0, r0
	...

0800eaa8 <_dtoa_r>:
 800eaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaac:	69c7      	ldr	r7, [r0, #28]
 800eaae:	b097      	sub	sp, #92	@ 0x5c
 800eab0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800eab4:	ec55 4b10 	vmov	r4, r5, d0
 800eab8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800eaba:	9107      	str	r1, [sp, #28]
 800eabc:	4681      	mov	r9, r0
 800eabe:	920c      	str	r2, [sp, #48]	@ 0x30
 800eac0:	9311      	str	r3, [sp, #68]	@ 0x44
 800eac2:	b97f      	cbnz	r7, 800eae4 <_dtoa_r+0x3c>
 800eac4:	2010      	movs	r0, #16
 800eac6:	f000 fe09 	bl	800f6dc <malloc>
 800eaca:	4602      	mov	r2, r0
 800eacc:	f8c9 001c 	str.w	r0, [r9, #28]
 800ead0:	b920      	cbnz	r0, 800eadc <_dtoa_r+0x34>
 800ead2:	4ba9      	ldr	r3, [pc, #676]	@ (800ed78 <_dtoa_r+0x2d0>)
 800ead4:	21ef      	movs	r1, #239	@ 0xef
 800ead6:	48a9      	ldr	r0, [pc, #676]	@ (800ed7c <_dtoa_r+0x2d4>)
 800ead8:	f001 fce6 	bl	80104a8 <__assert_func>
 800eadc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eae0:	6007      	str	r7, [r0, #0]
 800eae2:	60c7      	str	r7, [r0, #12]
 800eae4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eae8:	6819      	ldr	r1, [r3, #0]
 800eaea:	b159      	cbz	r1, 800eb04 <_dtoa_r+0x5c>
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	604a      	str	r2, [r1, #4]
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	4093      	lsls	r3, r2
 800eaf4:	608b      	str	r3, [r1, #8]
 800eaf6:	4648      	mov	r0, r9
 800eaf8:	f000 fee6 	bl	800f8c8 <_Bfree>
 800eafc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eb00:	2200      	movs	r2, #0
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	1e2b      	subs	r3, r5, #0
 800eb06:	bfb9      	ittee	lt
 800eb08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eb0c:	9305      	strlt	r3, [sp, #20]
 800eb0e:	2300      	movge	r3, #0
 800eb10:	6033      	strge	r3, [r6, #0]
 800eb12:	9f05      	ldr	r7, [sp, #20]
 800eb14:	4b9a      	ldr	r3, [pc, #616]	@ (800ed80 <_dtoa_r+0x2d8>)
 800eb16:	bfbc      	itt	lt
 800eb18:	2201      	movlt	r2, #1
 800eb1a:	6032      	strlt	r2, [r6, #0]
 800eb1c:	43bb      	bics	r3, r7
 800eb1e:	d112      	bne.n	800eb46 <_dtoa_r+0x9e>
 800eb20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eb22:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eb26:	6013      	str	r3, [r2, #0]
 800eb28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb2c:	4323      	orrs	r3, r4
 800eb2e:	f000 855a 	beq.w	800f5e6 <_dtoa_r+0xb3e>
 800eb32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ed94 <_dtoa_r+0x2ec>
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	f000 855c 	beq.w	800f5f6 <_dtoa_r+0xb4e>
 800eb3e:	f10a 0303 	add.w	r3, sl, #3
 800eb42:	f000 bd56 	b.w	800f5f2 <_dtoa_r+0xb4a>
 800eb46:	ed9d 7b04 	vldr	d7, [sp, #16]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	ec51 0b17 	vmov	r0, r1, d7
 800eb50:	2300      	movs	r3, #0
 800eb52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800eb56:	f7f1 ff8f 	bl	8000a78 <__aeabi_dcmpeq>
 800eb5a:	4680      	mov	r8, r0
 800eb5c:	b158      	cbz	r0, 800eb76 <_dtoa_r+0xce>
 800eb5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eb60:	2301      	movs	r3, #1
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb66:	b113      	cbz	r3, 800eb6e <_dtoa_r+0xc6>
 800eb68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb6a:	4b86      	ldr	r3, [pc, #536]	@ (800ed84 <_dtoa_r+0x2dc>)
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ed98 <_dtoa_r+0x2f0>
 800eb72:	f000 bd40 	b.w	800f5f6 <_dtoa_r+0xb4e>
 800eb76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800eb7a:	aa14      	add	r2, sp, #80	@ 0x50
 800eb7c:	a915      	add	r1, sp, #84	@ 0x54
 800eb7e:	4648      	mov	r0, r9
 800eb80:	f001 f984 	bl	800fe8c <__d2b>
 800eb84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eb88:	9002      	str	r0, [sp, #8]
 800eb8a:	2e00      	cmp	r6, #0
 800eb8c:	d078      	beq.n	800ec80 <_dtoa_r+0x1d8>
 800eb8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800eb94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eb9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eba0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eba4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eba8:	4619      	mov	r1, r3
 800ebaa:	2200      	movs	r2, #0
 800ebac:	4b76      	ldr	r3, [pc, #472]	@ (800ed88 <_dtoa_r+0x2e0>)
 800ebae:	f7f1 fb43 	bl	8000238 <__aeabi_dsub>
 800ebb2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ed60 <_dtoa_r+0x2b8>)
 800ebb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb8:	f7f1 fcf6 	bl	80005a8 <__aeabi_dmul>
 800ebbc:	a36a      	add	r3, pc, #424	@ (adr r3, 800ed68 <_dtoa_r+0x2c0>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb3b 	bl	800023c <__adddf3>
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	4630      	mov	r0, r6
 800ebca:	460d      	mov	r5, r1
 800ebcc:	f7f1 fc82 	bl	80004d4 <__aeabi_i2d>
 800ebd0:	a367      	add	r3, pc, #412	@ (adr r3, 800ed70 <_dtoa_r+0x2c8>)
 800ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd6:	f7f1 fce7 	bl	80005a8 <__aeabi_dmul>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	460b      	mov	r3, r1
 800ebde:	4620      	mov	r0, r4
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	f7f1 fb2b 	bl	800023c <__adddf3>
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	460d      	mov	r5, r1
 800ebea:	f7f1 ff8d 	bl	8000b08 <__aeabi_d2iz>
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4607      	mov	r7, r0
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	f7f1 ff48 	bl	8000a8c <__aeabi_dcmplt>
 800ebfc:	b140      	cbz	r0, 800ec10 <_dtoa_r+0x168>
 800ebfe:	4638      	mov	r0, r7
 800ec00:	f7f1 fc68 	bl	80004d4 <__aeabi_i2d>
 800ec04:	4622      	mov	r2, r4
 800ec06:	462b      	mov	r3, r5
 800ec08:	f7f1 ff36 	bl	8000a78 <__aeabi_dcmpeq>
 800ec0c:	b900      	cbnz	r0, 800ec10 <_dtoa_r+0x168>
 800ec0e:	3f01      	subs	r7, #1
 800ec10:	2f16      	cmp	r7, #22
 800ec12:	d852      	bhi.n	800ecba <_dtoa_r+0x212>
 800ec14:	4b5d      	ldr	r3, [pc, #372]	@ (800ed8c <_dtoa_r+0x2e4>)
 800ec16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ec22:	f7f1 ff33 	bl	8000a8c <__aeabi_dcmplt>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d049      	beq.n	800ecbe <_dtoa_r+0x216>
 800ec2a:	3f01      	subs	r7, #1
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec32:	1b9b      	subs	r3, r3, r6
 800ec34:	1e5a      	subs	r2, r3, #1
 800ec36:	bf45      	ittet	mi
 800ec38:	f1c3 0301 	rsbmi	r3, r3, #1
 800ec3c:	9300      	strmi	r3, [sp, #0]
 800ec3e:	2300      	movpl	r3, #0
 800ec40:	2300      	movmi	r3, #0
 800ec42:	9206      	str	r2, [sp, #24]
 800ec44:	bf54      	ite	pl
 800ec46:	9300      	strpl	r3, [sp, #0]
 800ec48:	9306      	strmi	r3, [sp, #24]
 800ec4a:	2f00      	cmp	r7, #0
 800ec4c:	db39      	blt.n	800ecc2 <_dtoa_r+0x21a>
 800ec4e:	9b06      	ldr	r3, [sp, #24]
 800ec50:	970d      	str	r7, [sp, #52]	@ 0x34
 800ec52:	443b      	add	r3, r7
 800ec54:	9306      	str	r3, [sp, #24]
 800ec56:	2300      	movs	r3, #0
 800ec58:	9308      	str	r3, [sp, #32]
 800ec5a:	9b07      	ldr	r3, [sp, #28]
 800ec5c:	2b09      	cmp	r3, #9
 800ec5e:	d863      	bhi.n	800ed28 <_dtoa_r+0x280>
 800ec60:	2b05      	cmp	r3, #5
 800ec62:	bfc4      	itt	gt
 800ec64:	3b04      	subgt	r3, #4
 800ec66:	9307      	strgt	r3, [sp, #28]
 800ec68:	9b07      	ldr	r3, [sp, #28]
 800ec6a:	f1a3 0302 	sub.w	r3, r3, #2
 800ec6e:	bfcc      	ite	gt
 800ec70:	2400      	movgt	r4, #0
 800ec72:	2401      	movle	r4, #1
 800ec74:	2b03      	cmp	r3, #3
 800ec76:	d863      	bhi.n	800ed40 <_dtoa_r+0x298>
 800ec78:	e8df f003 	tbb	[pc, r3]
 800ec7c:	2b375452 	.word	0x2b375452
 800ec80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ec84:	441e      	add	r6, r3
 800ec86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ec8a:	2b20      	cmp	r3, #32
 800ec8c:	bfc1      	itttt	gt
 800ec8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ec92:	409f      	lslgt	r7, r3
 800ec94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ec98:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ec9c:	bfd6      	itet	le
 800ec9e:	f1c3 0320 	rsble	r3, r3, #32
 800eca2:	ea47 0003 	orrgt.w	r0, r7, r3
 800eca6:	fa04 f003 	lslle.w	r0, r4, r3
 800ecaa:	f7f1 fc03 	bl	80004b4 <__aeabi_ui2d>
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ecb4:	3e01      	subs	r6, #1
 800ecb6:	9212      	str	r2, [sp, #72]	@ 0x48
 800ecb8:	e776      	b.n	800eba8 <_dtoa_r+0x100>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	e7b7      	b.n	800ec2e <_dtoa_r+0x186>
 800ecbe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ecc0:	e7b6      	b.n	800ec30 <_dtoa_r+0x188>
 800ecc2:	9b00      	ldr	r3, [sp, #0]
 800ecc4:	1bdb      	subs	r3, r3, r7
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	427b      	negs	r3, r7
 800ecca:	9308      	str	r3, [sp, #32]
 800eccc:	2300      	movs	r3, #0
 800ecce:	930d      	str	r3, [sp, #52]	@ 0x34
 800ecd0:	e7c3      	b.n	800ec5a <_dtoa_r+0x1b2>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecd8:	eb07 0b03 	add.w	fp, r7, r3
 800ecdc:	f10b 0301 	add.w	r3, fp, #1
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	9303      	str	r3, [sp, #12]
 800ece4:	bfb8      	it	lt
 800ece6:	2301      	movlt	r3, #1
 800ece8:	e006      	b.n	800ecf8 <_dtoa_r+0x250>
 800ecea:	2301      	movs	r3, #1
 800ecec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	dd28      	ble.n	800ed46 <_dtoa_r+0x29e>
 800ecf4:	469b      	mov	fp, r3
 800ecf6:	9303      	str	r3, [sp, #12]
 800ecf8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	2204      	movs	r2, #4
 800ed00:	f102 0514 	add.w	r5, r2, #20
 800ed04:	429d      	cmp	r5, r3
 800ed06:	d926      	bls.n	800ed56 <_dtoa_r+0x2ae>
 800ed08:	6041      	str	r1, [r0, #4]
 800ed0a:	4648      	mov	r0, r9
 800ed0c:	f000 fd9c 	bl	800f848 <_Balloc>
 800ed10:	4682      	mov	sl, r0
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d142      	bne.n	800ed9c <_dtoa_r+0x2f4>
 800ed16:	4b1e      	ldr	r3, [pc, #120]	@ (800ed90 <_dtoa_r+0x2e8>)
 800ed18:	4602      	mov	r2, r0
 800ed1a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ed1e:	e6da      	b.n	800ead6 <_dtoa_r+0x2e>
 800ed20:	2300      	movs	r3, #0
 800ed22:	e7e3      	b.n	800ecec <_dtoa_r+0x244>
 800ed24:	2300      	movs	r3, #0
 800ed26:	e7d5      	b.n	800ecd4 <_dtoa_r+0x22c>
 800ed28:	2401      	movs	r4, #1
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	9307      	str	r3, [sp, #28]
 800ed2e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ed30:	f04f 3bff 	mov.w	fp, #4294967295
 800ed34:	2200      	movs	r2, #0
 800ed36:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed3a:	2312      	movs	r3, #18
 800ed3c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed3e:	e7db      	b.n	800ecf8 <_dtoa_r+0x250>
 800ed40:	2301      	movs	r3, #1
 800ed42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed44:	e7f4      	b.n	800ed30 <_dtoa_r+0x288>
 800ed46:	f04f 0b01 	mov.w	fp, #1
 800ed4a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed4e:	465b      	mov	r3, fp
 800ed50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ed54:	e7d0      	b.n	800ecf8 <_dtoa_r+0x250>
 800ed56:	3101      	adds	r1, #1
 800ed58:	0052      	lsls	r2, r2, #1
 800ed5a:	e7d1      	b.n	800ed00 <_dtoa_r+0x258>
 800ed5c:	f3af 8000 	nop.w
 800ed60:	636f4361 	.word	0x636f4361
 800ed64:	3fd287a7 	.word	0x3fd287a7
 800ed68:	8b60c8b3 	.word	0x8b60c8b3
 800ed6c:	3fc68a28 	.word	0x3fc68a28
 800ed70:	509f79fb 	.word	0x509f79fb
 800ed74:	3fd34413 	.word	0x3fd34413
 800ed78:	080107d9 	.word	0x080107d9
 800ed7c:	080107f0 	.word	0x080107f0
 800ed80:	7ff00000 	.word	0x7ff00000
 800ed84:	080107a9 	.word	0x080107a9
 800ed88:	3ff80000 	.word	0x3ff80000
 800ed8c:	08010940 	.word	0x08010940
 800ed90:	08010848 	.word	0x08010848
 800ed94:	080107d5 	.word	0x080107d5
 800ed98:	080107a8 	.word	0x080107a8
 800ed9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eda0:	6018      	str	r0, [r3, #0]
 800eda2:	9b03      	ldr	r3, [sp, #12]
 800eda4:	2b0e      	cmp	r3, #14
 800eda6:	f200 80a1 	bhi.w	800eeec <_dtoa_r+0x444>
 800edaa:	2c00      	cmp	r4, #0
 800edac:	f000 809e 	beq.w	800eeec <_dtoa_r+0x444>
 800edb0:	2f00      	cmp	r7, #0
 800edb2:	dd33      	ble.n	800ee1c <_dtoa_r+0x374>
 800edb4:	4b9c      	ldr	r3, [pc, #624]	@ (800f028 <_dtoa_r+0x580>)
 800edb6:	f007 020f 	and.w	r2, r7, #15
 800edba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edbe:	ed93 7b00 	vldr	d7, [r3]
 800edc2:	05f8      	lsls	r0, r7, #23
 800edc4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800edc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800edcc:	d516      	bpl.n	800edfc <_dtoa_r+0x354>
 800edce:	4b97      	ldr	r3, [pc, #604]	@ (800f02c <_dtoa_r+0x584>)
 800edd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800edd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800edd8:	f7f1 fd10 	bl	80007fc <__aeabi_ddiv>
 800eddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ede0:	f004 040f 	and.w	r4, r4, #15
 800ede4:	2603      	movs	r6, #3
 800ede6:	4d91      	ldr	r5, [pc, #580]	@ (800f02c <_dtoa_r+0x584>)
 800ede8:	b954      	cbnz	r4, 800ee00 <_dtoa_r+0x358>
 800edea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800edee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800edf2:	f7f1 fd03 	bl	80007fc <__aeabi_ddiv>
 800edf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edfa:	e028      	b.n	800ee4e <_dtoa_r+0x3a6>
 800edfc:	2602      	movs	r6, #2
 800edfe:	e7f2      	b.n	800ede6 <_dtoa_r+0x33e>
 800ee00:	07e1      	lsls	r1, r4, #31
 800ee02:	d508      	bpl.n	800ee16 <_dtoa_r+0x36e>
 800ee04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ee08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee0c:	f7f1 fbcc 	bl	80005a8 <__aeabi_dmul>
 800ee10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee14:	3601      	adds	r6, #1
 800ee16:	1064      	asrs	r4, r4, #1
 800ee18:	3508      	adds	r5, #8
 800ee1a:	e7e5      	b.n	800ede8 <_dtoa_r+0x340>
 800ee1c:	f000 80af 	beq.w	800ef7e <_dtoa_r+0x4d6>
 800ee20:	427c      	negs	r4, r7
 800ee22:	4b81      	ldr	r3, [pc, #516]	@ (800f028 <_dtoa_r+0x580>)
 800ee24:	4d81      	ldr	r5, [pc, #516]	@ (800f02c <_dtoa_r+0x584>)
 800ee26:	f004 020f 	and.w	r2, r4, #15
 800ee2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee36:	f7f1 fbb7 	bl	80005a8 <__aeabi_dmul>
 800ee3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee3e:	1124      	asrs	r4, r4, #4
 800ee40:	2300      	movs	r3, #0
 800ee42:	2602      	movs	r6, #2
 800ee44:	2c00      	cmp	r4, #0
 800ee46:	f040 808f 	bne.w	800ef68 <_dtoa_r+0x4c0>
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d1d3      	bne.n	800edf6 <_dtoa_r+0x34e>
 800ee4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 8094 	beq.w	800ef82 <_dtoa_r+0x4da>
 800ee5a:	4b75      	ldr	r3, [pc, #468]	@ (800f030 <_dtoa_r+0x588>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4620      	mov	r0, r4
 800ee60:	4629      	mov	r1, r5
 800ee62:	f7f1 fe13 	bl	8000a8c <__aeabi_dcmplt>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	f000 808b 	beq.w	800ef82 <_dtoa_r+0x4da>
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f000 8087 	beq.w	800ef82 <_dtoa_r+0x4da>
 800ee74:	f1bb 0f00 	cmp.w	fp, #0
 800ee78:	dd34      	ble.n	800eee4 <_dtoa_r+0x43c>
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	4b6d      	ldr	r3, [pc, #436]	@ (800f034 <_dtoa_r+0x58c>)
 800ee7e:	2200      	movs	r2, #0
 800ee80:	4629      	mov	r1, r5
 800ee82:	f7f1 fb91 	bl	80005a8 <__aeabi_dmul>
 800ee86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee8a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee8e:	3601      	adds	r6, #1
 800ee90:	465c      	mov	r4, fp
 800ee92:	4630      	mov	r0, r6
 800ee94:	f7f1 fb1e 	bl	80004d4 <__aeabi_i2d>
 800ee98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee9c:	f7f1 fb84 	bl	80005a8 <__aeabi_dmul>
 800eea0:	4b65      	ldr	r3, [pc, #404]	@ (800f038 <_dtoa_r+0x590>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	f7f1 f9ca 	bl	800023c <__adddf3>
 800eea8:	4605      	mov	r5, r0
 800eeaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800eeae:	2c00      	cmp	r4, #0
 800eeb0:	d16a      	bne.n	800ef88 <_dtoa_r+0x4e0>
 800eeb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeb6:	4b61      	ldr	r3, [pc, #388]	@ (800f03c <_dtoa_r+0x594>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f7f1 f9bd 	bl	8000238 <__aeabi_dsub>
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eec6:	462a      	mov	r2, r5
 800eec8:	4633      	mov	r3, r6
 800eeca:	f7f1 fdfd 	bl	8000ac8 <__aeabi_dcmpgt>
 800eece:	2800      	cmp	r0, #0
 800eed0:	f040 8298 	bne.w	800f404 <_dtoa_r+0x95c>
 800eed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eed8:	462a      	mov	r2, r5
 800eeda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800eede:	f7f1 fdd5 	bl	8000a8c <__aeabi_dcmplt>
 800eee2:	bb38      	cbnz	r0, 800ef34 <_dtoa_r+0x48c>
 800eee4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800eee8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eeec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f2c0 8157 	blt.w	800f1a2 <_dtoa_r+0x6fa>
 800eef4:	2f0e      	cmp	r7, #14
 800eef6:	f300 8154 	bgt.w	800f1a2 <_dtoa_r+0x6fa>
 800eefa:	4b4b      	ldr	r3, [pc, #300]	@ (800f028 <_dtoa_r+0x580>)
 800eefc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef00:	ed93 7b00 	vldr	d7, [r3]
 800ef04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	ed8d 7b00 	vstr	d7, [sp]
 800ef0c:	f280 80e5 	bge.w	800f0da <_dtoa_r+0x632>
 800ef10:	9b03      	ldr	r3, [sp, #12]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f300 80e1 	bgt.w	800f0da <_dtoa_r+0x632>
 800ef18:	d10c      	bne.n	800ef34 <_dtoa_r+0x48c>
 800ef1a:	4b48      	ldr	r3, [pc, #288]	@ (800f03c <_dtoa_r+0x594>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	ec51 0b17 	vmov	r0, r1, d7
 800ef22:	f7f1 fb41 	bl	80005a8 <__aeabi_dmul>
 800ef26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef2a:	f7f1 fdc3 	bl	8000ab4 <__aeabi_dcmpge>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	f000 8266 	beq.w	800f400 <_dtoa_r+0x958>
 800ef34:	2400      	movs	r4, #0
 800ef36:	4625      	mov	r5, r4
 800ef38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef3a:	4656      	mov	r6, sl
 800ef3c:	ea6f 0803 	mvn.w	r8, r3
 800ef40:	2700      	movs	r7, #0
 800ef42:	4621      	mov	r1, r4
 800ef44:	4648      	mov	r0, r9
 800ef46:	f000 fcbf 	bl	800f8c8 <_Bfree>
 800ef4a:	2d00      	cmp	r5, #0
 800ef4c:	f000 80bd 	beq.w	800f0ca <_dtoa_r+0x622>
 800ef50:	b12f      	cbz	r7, 800ef5e <_dtoa_r+0x4b6>
 800ef52:	42af      	cmp	r7, r5
 800ef54:	d003      	beq.n	800ef5e <_dtoa_r+0x4b6>
 800ef56:	4639      	mov	r1, r7
 800ef58:	4648      	mov	r0, r9
 800ef5a:	f000 fcb5 	bl	800f8c8 <_Bfree>
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4648      	mov	r0, r9
 800ef62:	f000 fcb1 	bl	800f8c8 <_Bfree>
 800ef66:	e0b0      	b.n	800f0ca <_dtoa_r+0x622>
 800ef68:	07e2      	lsls	r2, r4, #31
 800ef6a:	d505      	bpl.n	800ef78 <_dtoa_r+0x4d0>
 800ef6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef70:	f7f1 fb1a 	bl	80005a8 <__aeabi_dmul>
 800ef74:	3601      	adds	r6, #1
 800ef76:	2301      	movs	r3, #1
 800ef78:	1064      	asrs	r4, r4, #1
 800ef7a:	3508      	adds	r5, #8
 800ef7c:	e762      	b.n	800ee44 <_dtoa_r+0x39c>
 800ef7e:	2602      	movs	r6, #2
 800ef80:	e765      	b.n	800ee4e <_dtoa_r+0x3a6>
 800ef82:	9c03      	ldr	r4, [sp, #12]
 800ef84:	46b8      	mov	r8, r7
 800ef86:	e784      	b.n	800ee92 <_dtoa_r+0x3ea>
 800ef88:	4b27      	ldr	r3, [pc, #156]	@ (800f028 <_dtoa_r+0x580>)
 800ef8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef94:	4454      	add	r4, sl
 800ef96:	2900      	cmp	r1, #0
 800ef98:	d054      	beq.n	800f044 <_dtoa_r+0x59c>
 800ef9a:	4929      	ldr	r1, [pc, #164]	@ (800f040 <_dtoa_r+0x598>)
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	f7f1 fc2d 	bl	80007fc <__aeabi_ddiv>
 800efa2:	4633      	mov	r3, r6
 800efa4:	462a      	mov	r2, r5
 800efa6:	f7f1 f947 	bl	8000238 <__aeabi_dsub>
 800efaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800efae:	4656      	mov	r6, sl
 800efb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efb4:	f7f1 fda8 	bl	8000b08 <__aeabi_d2iz>
 800efb8:	4605      	mov	r5, r0
 800efba:	f7f1 fa8b 	bl	80004d4 <__aeabi_i2d>
 800efbe:	4602      	mov	r2, r0
 800efc0:	460b      	mov	r3, r1
 800efc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efc6:	f7f1 f937 	bl	8000238 <__aeabi_dsub>
 800efca:	3530      	adds	r5, #48	@ 0x30
 800efcc:	4602      	mov	r2, r0
 800efce:	460b      	mov	r3, r1
 800efd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800efd4:	f806 5b01 	strb.w	r5, [r6], #1
 800efd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800efdc:	f7f1 fd56 	bl	8000a8c <__aeabi_dcmplt>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d172      	bne.n	800f0ca <_dtoa_r+0x622>
 800efe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efe8:	4911      	ldr	r1, [pc, #68]	@ (800f030 <_dtoa_r+0x588>)
 800efea:	2000      	movs	r0, #0
 800efec:	f7f1 f924 	bl	8000238 <__aeabi_dsub>
 800eff0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eff4:	f7f1 fd4a 	bl	8000a8c <__aeabi_dcmplt>
 800eff8:	2800      	cmp	r0, #0
 800effa:	f040 80b4 	bne.w	800f166 <_dtoa_r+0x6be>
 800effe:	42a6      	cmp	r6, r4
 800f000:	f43f af70 	beq.w	800eee4 <_dtoa_r+0x43c>
 800f004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f008:	4b0a      	ldr	r3, [pc, #40]	@ (800f034 <_dtoa_r+0x58c>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	f7f1 facc 	bl	80005a8 <__aeabi_dmul>
 800f010:	4b08      	ldr	r3, [pc, #32]	@ (800f034 <_dtoa_r+0x58c>)
 800f012:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f016:	2200      	movs	r2, #0
 800f018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f01c:	f7f1 fac4 	bl	80005a8 <__aeabi_dmul>
 800f020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f024:	e7c4      	b.n	800efb0 <_dtoa_r+0x508>
 800f026:	bf00      	nop
 800f028:	08010940 	.word	0x08010940
 800f02c:	08010918 	.word	0x08010918
 800f030:	3ff00000 	.word	0x3ff00000
 800f034:	40240000 	.word	0x40240000
 800f038:	401c0000 	.word	0x401c0000
 800f03c:	40140000 	.word	0x40140000
 800f040:	3fe00000 	.word	0x3fe00000
 800f044:	4631      	mov	r1, r6
 800f046:	4628      	mov	r0, r5
 800f048:	f7f1 faae 	bl	80005a8 <__aeabi_dmul>
 800f04c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f050:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f052:	4656      	mov	r6, sl
 800f054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f058:	f7f1 fd56 	bl	8000b08 <__aeabi_d2iz>
 800f05c:	4605      	mov	r5, r0
 800f05e:	f7f1 fa39 	bl	80004d4 <__aeabi_i2d>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f06a:	f7f1 f8e5 	bl	8000238 <__aeabi_dsub>
 800f06e:	3530      	adds	r5, #48	@ 0x30
 800f070:	f806 5b01 	strb.w	r5, [r6], #1
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	42a6      	cmp	r6, r4
 800f07a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f07e:	f04f 0200 	mov.w	r2, #0
 800f082:	d124      	bne.n	800f0ce <_dtoa_r+0x626>
 800f084:	4baf      	ldr	r3, [pc, #700]	@ (800f344 <_dtoa_r+0x89c>)
 800f086:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f08a:	f7f1 f8d7 	bl	800023c <__adddf3>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f096:	f7f1 fd17 	bl	8000ac8 <__aeabi_dcmpgt>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d163      	bne.n	800f166 <_dtoa_r+0x6be>
 800f09e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0a2:	49a8      	ldr	r1, [pc, #672]	@ (800f344 <_dtoa_r+0x89c>)
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	f7f1 f8c7 	bl	8000238 <__aeabi_dsub>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0b2:	f7f1 fceb 	bl	8000a8c <__aeabi_dcmplt>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	f43f af14 	beq.w	800eee4 <_dtoa_r+0x43c>
 800f0bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f0be:	1e73      	subs	r3, r6, #1
 800f0c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0c6:	2b30      	cmp	r3, #48	@ 0x30
 800f0c8:	d0f8      	beq.n	800f0bc <_dtoa_r+0x614>
 800f0ca:	4647      	mov	r7, r8
 800f0cc:	e03b      	b.n	800f146 <_dtoa_r+0x69e>
 800f0ce:	4b9e      	ldr	r3, [pc, #632]	@ (800f348 <_dtoa_r+0x8a0>)
 800f0d0:	f7f1 fa6a 	bl	80005a8 <__aeabi_dmul>
 800f0d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0d8:	e7bc      	b.n	800f054 <_dtoa_r+0x5ac>
 800f0da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f0de:	4656      	mov	r6, sl
 800f0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	f7f1 fb88 	bl	80007fc <__aeabi_ddiv>
 800f0ec:	f7f1 fd0c 	bl	8000b08 <__aeabi_d2iz>
 800f0f0:	4680      	mov	r8, r0
 800f0f2:	f7f1 f9ef 	bl	80004d4 <__aeabi_i2d>
 800f0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0fa:	f7f1 fa55 	bl	80005a8 <__aeabi_dmul>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	4620      	mov	r0, r4
 800f104:	4629      	mov	r1, r5
 800f106:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f10a:	f7f1 f895 	bl	8000238 <__aeabi_dsub>
 800f10e:	f806 4b01 	strb.w	r4, [r6], #1
 800f112:	9d03      	ldr	r5, [sp, #12]
 800f114:	eba6 040a 	sub.w	r4, r6, sl
 800f118:	42a5      	cmp	r5, r4
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	d133      	bne.n	800f188 <_dtoa_r+0x6e0>
 800f120:	f7f1 f88c 	bl	800023c <__adddf3>
 800f124:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f128:	4604      	mov	r4, r0
 800f12a:	460d      	mov	r5, r1
 800f12c:	f7f1 fccc 	bl	8000ac8 <__aeabi_dcmpgt>
 800f130:	b9c0      	cbnz	r0, 800f164 <_dtoa_r+0x6bc>
 800f132:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f136:	4620      	mov	r0, r4
 800f138:	4629      	mov	r1, r5
 800f13a:	f7f1 fc9d 	bl	8000a78 <__aeabi_dcmpeq>
 800f13e:	b110      	cbz	r0, 800f146 <_dtoa_r+0x69e>
 800f140:	f018 0f01 	tst.w	r8, #1
 800f144:	d10e      	bne.n	800f164 <_dtoa_r+0x6bc>
 800f146:	9902      	ldr	r1, [sp, #8]
 800f148:	4648      	mov	r0, r9
 800f14a:	f000 fbbd 	bl	800f8c8 <_Bfree>
 800f14e:	2300      	movs	r3, #0
 800f150:	7033      	strb	r3, [r6, #0]
 800f152:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f154:	3701      	adds	r7, #1
 800f156:	601f      	str	r7, [r3, #0]
 800f158:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 824b 	beq.w	800f5f6 <_dtoa_r+0xb4e>
 800f160:	601e      	str	r6, [r3, #0]
 800f162:	e248      	b.n	800f5f6 <_dtoa_r+0xb4e>
 800f164:	46b8      	mov	r8, r7
 800f166:	4633      	mov	r3, r6
 800f168:	461e      	mov	r6, r3
 800f16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f16e:	2a39      	cmp	r2, #57	@ 0x39
 800f170:	d106      	bne.n	800f180 <_dtoa_r+0x6d8>
 800f172:	459a      	cmp	sl, r3
 800f174:	d1f8      	bne.n	800f168 <_dtoa_r+0x6c0>
 800f176:	2230      	movs	r2, #48	@ 0x30
 800f178:	f108 0801 	add.w	r8, r8, #1
 800f17c:	f88a 2000 	strb.w	r2, [sl]
 800f180:	781a      	ldrb	r2, [r3, #0]
 800f182:	3201      	adds	r2, #1
 800f184:	701a      	strb	r2, [r3, #0]
 800f186:	e7a0      	b.n	800f0ca <_dtoa_r+0x622>
 800f188:	4b6f      	ldr	r3, [pc, #444]	@ (800f348 <_dtoa_r+0x8a0>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	f7f1 fa0c 	bl	80005a8 <__aeabi_dmul>
 800f190:	2200      	movs	r2, #0
 800f192:	2300      	movs	r3, #0
 800f194:	4604      	mov	r4, r0
 800f196:	460d      	mov	r5, r1
 800f198:	f7f1 fc6e 	bl	8000a78 <__aeabi_dcmpeq>
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d09f      	beq.n	800f0e0 <_dtoa_r+0x638>
 800f1a0:	e7d1      	b.n	800f146 <_dtoa_r+0x69e>
 800f1a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1a4:	2a00      	cmp	r2, #0
 800f1a6:	f000 80ea 	beq.w	800f37e <_dtoa_r+0x8d6>
 800f1aa:	9a07      	ldr	r2, [sp, #28]
 800f1ac:	2a01      	cmp	r2, #1
 800f1ae:	f300 80cd 	bgt.w	800f34c <_dtoa_r+0x8a4>
 800f1b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	f000 80c1 	beq.w	800f33c <_dtoa_r+0x894>
 800f1ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f1be:	9c08      	ldr	r4, [sp, #32]
 800f1c0:	9e00      	ldr	r6, [sp, #0]
 800f1c2:	9a00      	ldr	r2, [sp, #0]
 800f1c4:	441a      	add	r2, r3
 800f1c6:	9200      	str	r2, [sp, #0]
 800f1c8:	9a06      	ldr	r2, [sp, #24]
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	441a      	add	r2, r3
 800f1ce:	4648      	mov	r0, r9
 800f1d0:	9206      	str	r2, [sp, #24]
 800f1d2:	f000 fc2d 	bl	800fa30 <__i2b>
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	b166      	cbz	r6, 800f1f4 <_dtoa_r+0x74c>
 800f1da:	9b06      	ldr	r3, [sp, #24]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	dd09      	ble.n	800f1f4 <_dtoa_r+0x74c>
 800f1e0:	42b3      	cmp	r3, r6
 800f1e2:	9a00      	ldr	r2, [sp, #0]
 800f1e4:	bfa8      	it	ge
 800f1e6:	4633      	movge	r3, r6
 800f1e8:	1ad2      	subs	r2, r2, r3
 800f1ea:	9200      	str	r2, [sp, #0]
 800f1ec:	9a06      	ldr	r2, [sp, #24]
 800f1ee:	1af6      	subs	r6, r6, r3
 800f1f0:	1ad3      	subs	r3, r2, r3
 800f1f2:	9306      	str	r3, [sp, #24]
 800f1f4:	9b08      	ldr	r3, [sp, #32]
 800f1f6:	b30b      	cbz	r3, 800f23c <_dtoa_r+0x794>
 800f1f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 80c6 	beq.w	800f38c <_dtoa_r+0x8e4>
 800f200:	2c00      	cmp	r4, #0
 800f202:	f000 80c0 	beq.w	800f386 <_dtoa_r+0x8de>
 800f206:	4629      	mov	r1, r5
 800f208:	4622      	mov	r2, r4
 800f20a:	4648      	mov	r0, r9
 800f20c:	f000 fcc8 	bl	800fba0 <__pow5mult>
 800f210:	9a02      	ldr	r2, [sp, #8]
 800f212:	4601      	mov	r1, r0
 800f214:	4605      	mov	r5, r0
 800f216:	4648      	mov	r0, r9
 800f218:	f000 fc20 	bl	800fa5c <__multiply>
 800f21c:	9902      	ldr	r1, [sp, #8]
 800f21e:	4680      	mov	r8, r0
 800f220:	4648      	mov	r0, r9
 800f222:	f000 fb51 	bl	800f8c8 <_Bfree>
 800f226:	9b08      	ldr	r3, [sp, #32]
 800f228:	1b1b      	subs	r3, r3, r4
 800f22a:	9308      	str	r3, [sp, #32]
 800f22c:	f000 80b1 	beq.w	800f392 <_dtoa_r+0x8ea>
 800f230:	9a08      	ldr	r2, [sp, #32]
 800f232:	4641      	mov	r1, r8
 800f234:	4648      	mov	r0, r9
 800f236:	f000 fcb3 	bl	800fba0 <__pow5mult>
 800f23a:	9002      	str	r0, [sp, #8]
 800f23c:	2101      	movs	r1, #1
 800f23e:	4648      	mov	r0, r9
 800f240:	f000 fbf6 	bl	800fa30 <__i2b>
 800f244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f246:	4604      	mov	r4, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f000 81d8 	beq.w	800f5fe <_dtoa_r+0xb56>
 800f24e:	461a      	mov	r2, r3
 800f250:	4601      	mov	r1, r0
 800f252:	4648      	mov	r0, r9
 800f254:	f000 fca4 	bl	800fba0 <__pow5mult>
 800f258:	9b07      	ldr	r3, [sp, #28]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	4604      	mov	r4, r0
 800f25e:	f300 809f 	bgt.w	800f3a0 <_dtoa_r+0x8f8>
 800f262:	9b04      	ldr	r3, [sp, #16]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f040 8097 	bne.w	800f398 <_dtoa_r+0x8f0>
 800f26a:	9b05      	ldr	r3, [sp, #20]
 800f26c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f270:	2b00      	cmp	r3, #0
 800f272:	f040 8093 	bne.w	800f39c <_dtoa_r+0x8f4>
 800f276:	9b05      	ldr	r3, [sp, #20]
 800f278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f27c:	0d1b      	lsrs	r3, r3, #20
 800f27e:	051b      	lsls	r3, r3, #20
 800f280:	b133      	cbz	r3, 800f290 <_dtoa_r+0x7e8>
 800f282:	9b00      	ldr	r3, [sp, #0]
 800f284:	3301      	adds	r3, #1
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	9b06      	ldr	r3, [sp, #24]
 800f28a:	3301      	adds	r3, #1
 800f28c:	9306      	str	r3, [sp, #24]
 800f28e:	2301      	movs	r3, #1
 800f290:	9308      	str	r3, [sp, #32]
 800f292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 81b8 	beq.w	800f60a <_dtoa_r+0xb62>
 800f29a:	6923      	ldr	r3, [r4, #16]
 800f29c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2a0:	6918      	ldr	r0, [r3, #16]
 800f2a2:	f000 fb79 	bl	800f998 <__hi0bits>
 800f2a6:	f1c0 0020 	rsb	r0, r0, #32
 800f2aa:	9b06      	ldr	r3, [sp, #24]
 800f2ac:	4418      	add	r0, r3
 800f2ae:	f010 001f 	ands.w	r0, r0, #31
 800f2b2:	f000 8082 	beq.w	800f3ba <_dtoa_r+0x912>
 800f2b6:	f1c0 0320 	rsb	r3, r0, #32
 800f2ba:	2b04      	cmp	r3, #4
 800f2bc:	dd73      	ble.n	800f3a6 <_dtoa_r+0x8fe>
 800f2be:	9b00      	ldr	r3, [sp, #0]
 800f2c0:	f1c0 001c 	rsb	r0, r0, #28
 800f2c4:	4403      	add	r3, r0
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	9b06      	ldr	r3, [sp, #24]
 800f2ca:	4403      	add	r3, r0
 800f2cc:	4406      	add	r6, r0
 800f2ce:	9306      	str	r3, [sp, #24]
 800f2d0:	9b00      	ldr	r3, [sp, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	dd05      	ble.n	800f2e2 <_dtoa_r+0x83a>
 800f2d6:	9902      	ldr	r1, [sp, #8]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4648      	mov	r0, r9
 800f2dc:	f000 fcba 	bl	800fc54 <__lshift>
 800f2e0:	9002      	str	r0, [sp, #8]
 800f2e2:	9b06      	ldr	r3, [sp, #24]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	dd05      	ble.n	800f2f4 <_dtoa_r+0x84c>
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	4648      	mov	r0, r9
 800f2ee:	f000 fcb1 	bl	800fc54 <__lshift>
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d061      	beq.n	800f3be <_dtoa_r+0x916>
 800f2fa:	9802      	ldr	r0, [sp, #8]
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f000 fd15 	bl	800fd2c <__mcmp>
 800f302:	2800      	cmp	r0, #0
 800f304:	da5b      	bge.n	800f3be <_dtoa_r+0x916>
 800f306:	2300      	movs	r3, #0
 800f308:	9902      	ldr	r1, [sp, #8]
 800f30a:	220a      	movs	r2, #10
 800f30c:	4648      	mov	r0, r9
 800f30e:	f000 fafd 	bl	800f90c <__multadd>
 800f312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f314:	9002      	str	r0, [sp, #8]
 800f316:	f107 38ff 	add.w	r8, r7, #4294967295
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f000 8177 	beq.w	800f60e <_dtoa_r+0xb66>
 800f320:	4629      	mov	r1, r5
 800f322:	2300      	movs	r3, #0
 800f324:	220a      	movs	r2, #10
 800f326:	4648      	mov	r0, r9
 800f328:	f000 faf0 	bl	800f90c <__multadd>
 800f32c:	f1bb 0f00 	cmp.w	fp, #0
 800f330:	4605      	mov	r5, r0
 800f332:	dc6f      	bgt.n	800f414 <_dtoa_r+0x96c>
 800f334:	9b07      	ldr	r3, [sp, #28]
 800f336:	2b02      	cmp	r3, #2
 800f338:	dc49      	bgt.n	800f3ce <_dtoa_r+0x926>
 800f33a:	e06b      	b.n	800f414 <_dtoa_r+0x96c>
 800f33c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f33e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f342:	e73c      	b.n	800f1be <_dtoa_r+0x716>
 800f344:	3fe00000 	.word	0x3fe00000
 800f348:	40240000 	.word	0x40240000
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	1e5c      	subs	r4, r3, #1
 800f350:	9b08      	ldr	r3, [sp, #32]
 800f352:	42a3      	cmp	r3, r4
 800f354:	db09      	blt.n	800f36a <_dtoa_r+0x8c2>
 800f356:	1b1c      	subs	r4, r3, r4
 800f358:	9b03      	ldr	r3, [sp, #12]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f6bf af30 	bge.w	800f1c0 <_dtoa_r+0x718>
 800f360:	9b00      	ldr	r3, [sp, #0]
 800f362:	9a03      	ldr	r2, [sp, #12]
 800f364:	1a9e      	subs	r6, r3, r2
 800f366:	2300      	movs	r3, #0
 800f368:	e72b      	b.n	800f1c2 <_dtoa_r+0x71a>
 800f36a:	9b08      	ldr	r3, [sp, #32]
 800f36c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f36e:	9408      	str	r4, [sp, #32]
 800f370:	1ae3      	subs	r3, r4, r3
 800f372:	441a      	add	r2, r3
 800f374:	9e00      	ldr	r6, [sp, #0]
 800f376:	9b03      	ldr	r3, [sp, #12]
 800f378:	920d      	str	r2, [sp, #52]	@ 0x34
 800f37a:	2400      	movs	r4, #0
 800f37c:	e721      	b.n	800f1c2 <_dtoa_r+0x71a>
 800f37e:	9c08      	ldr	r4, [sp, #32]
 800f380:	9e00      	ldr	r6, [sp, #0]
 800f382:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f384:	e728      	b.n	800f1d8 <_dtoa_r+0x730>
 800f386:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f38a:	e751      	b.n	800f230 <_dtoa_r+0x788>
 800f38c:	9a08      	ldr	r2, [sp, #32]
 800f38e:	9902      	ldr	r1, [sp, #8]
 800f390:	e750      	b.n	800f234 <_dtoa_r+0x78c>
 800f392:	f8cd 8008 	str.w	r8, [sp, #8]
 800f396:	e751      	b.n	800f23c <_dtoa_r+0x794>
 800f398:	2300      	movs	r3, #0
 800f39a:	e779      	b.n	800f290 <_dtoa_r+0x7e8>
 800f39c:	9b04      	ldr	r3, [sp, #16]
 800f39e:	e777      	b.n	800f290 <_dtoa_r+0x7e8>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9308      	str	r3, [sp, #32]
 800f3a4:	e779      	b.n	800f29a <_dtoa_r+0x7f2>
 800f3a6:	d093      	beq.n	800f2d0 <_dtoa_r+0x828>
 800f3a8:	9a00      	ldr	r2, [sp, #0]
 800f3aa:	331c      	adds	r3, #28
 800f3ac:	441a      	add	r2, r3
 800f3ae:	9200      	str	r2, [sp, #0]
 800f3b0:	9a06      	ldr	r2, [sp, #24]
 800f3b2:	441a      	add	r2, r3
 800f3b4:	441e      	add	r6, r3
 800f3b6:	9206      	str	r2, [sp, #24]
 800f3b8:	e78a      	b.n	800f2d0 <_dtoa_r+0x828>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	e7f4      	b.n	800f3a8 <_dtoa_r+0x900>
 800f3be:	9b03      	ldr	r3, [sp, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	46b8      	mov	r8, r7
 800f3c4:	dc20      	bgt.n	800f408 <_dtoa_r+0x960>
 800f3c6:	469b      	mov	fp, r3
 800f3c8:	9b07      	ldr	r3, [sp, #28]
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	dd1e      	ble.n	800f40c <_dtoa_r+0x964>
 800f3ce:	f1bb 0f00 	cmp.w	fp, #0
 800f3d2:	f47f adb1 	bne.w	800ef38 <_dtoa_r+0x490>
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	465b      	mov	r3, fp
 800f3da:	2205      	movs	r2, #5
 800f3dc:	4648      	mov	r0, r9
 800f3de:	f000 fa95 	bl	800f90c <__multadd>
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	9802      	ldr	r0, [sp, #8]
 800f3e8:	f000 fca0 	bl	800fd2c <__mcmp>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	f77f ada3 	ble.w	800ef38 <_dtoa_r+0x490>
 800f3f2:	4656      	mov	r6, sl
 800f3f4:	2331      	movs	r3, #49	@ 0x31
 800f3f6:	f806 3b01 	strb.w	r3, [r6], #1
 800f3fa:	f108 0801 	add.w	r8, r8, #1
 800f3fe:	e59f      	b.n	800ef40 <_dtoa_r+0x498>
 800f400:	9c03      	ldr	r4, [sp, #12]
 800f402:	46b8      	mov	r8, r7
 800f404:	4625      	mov	r5, r4
 800f406:	e7f4      	b.n	800f3f2 <_dtoa_r+0x94a>
 800f408:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f40e:	2b00      	cmp	r3, #0
 800f410:	f000 8101 	beq.w	800f616 <_dtoa_r+0xb6e>
 800f414:	2e00      	cmp	r6, #0
 800f416:	dd05      	ble.n	800f424 <_dtoa_r+0x97c>
 800f418:	4629      	mov	r1, r5
 800f41a:	4632      	mov	r2, r6
 800f41c:	4648      	mov	r0, r9
 800f41e:	f000 fc19 	bl	800fc54 <__lshift>
 800f422:	4605      	mov	r5, r0
 800f424:	9b08      	ldr	r3, [sp, #32]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d05c      	beq.n	800f4e4 <_dtoa_r+0xa3c>
 800f42a:	6869      	ldr	r1, [r5, #4]
 800f42c:	4648      	mov	r0, r9
 800f42e:	f000 fa0b 	bl	800f848 <_Balloc>
 800f432:	4606      	mov	r6, r0
 800f434:	b928      	cbnz	r0, 800f442 <_dtoa_r+0x99a>
 800f436:	4b82      	ldr	r3, [pc, #520]	@ (800f640 <_dtoa_r+0xb98>)
 800f438:	4602      	mov	r2, r0
 800f43a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f43e:	f7ff bb4a 	b.w	800ead6 <_dtoa_r+0x2e>
 800f442:	692a      	ldr	r2, [r5, #16]
 800f444:	3202      	adds	r2, #2
 800f446:	0092      	lsls	r2, r2, #2
 800f448:	f105 010c 	add.w	r1, r5, #12
 800f44c:	300c      	adds	r0, #12
 800f44e:	f7ff fa92 	bl	800e976 <memcpy>
 800f452:	2201      	movs	r2, #1
 800f454:	4631      	mov	r1, r6
 800f456:	4648      	mov	r0, r9
 800f458:	f000 fbfc 	bl	800fc54 <__lshift>
 800f45c:	f10a 0301 	add.w	r3, sl, #1
 800f460:	9300      	str	r3, [sp, #0]
 800f462:	eb0a 030b 	add.w	r3, sl, fp
 800f466:	9308      	str	r3, [sp, #32]
 800f468:	9b04      	ldr	r3, [sp, #16]
 800f46a:	f003 0301 	and.w	r3, r3, #1
 800f46e:	462f      	mov	r7, r5
 800f470:	9306      	str	r3, [sp, #24]
 800f472:	4605      	mov	r5, r0
 800f474:	9b00      	ldr	r3, [sp, #0]
 800f476:	9802      	ldr	r0, [sp, #8]
 800f478:	4621      	mov	r1, r4
 800f47a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f47e:	f7ff fa88 	bl	800e992 <quorem>
 800f482:	4603      	mov	r3, r0
 800f484:	3330      	adds	r3, #48	@ 0x30
 800f486:	9003      	str	r0, [sp, #12]
 800f488:	4639      	mov	r1, r7
 800f48a:	9802      	ldr	r0, [sp, #8]
 800f48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f48e:	f000 fc4d 	bl	800fd2c <__mcmp>
 800f492:	462a      	mov	r2, r5
 800f494:	9004      	str	r0, [sp, #16]
 800f496:	4621      	mov	r1, r4
 800f498:	4648      	mov	r0, r9
 800f49a:	f000 fc63 	bl	800fd64 <__mdiff>
 800f49e:	68c2      	ldr	r2, [r0, #12]
 800f4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	bb02      	cbnz	r2, 800f4e8 <_dtoa_r+0xa40>
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	9802      	ldr	r0, [sp, #8]
 800f4aa:	f000 fc3f 	bl	800fd2c <__mcmp>
 800f4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4648      	mov	r0, r9
 800f4b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f4b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4ba:	f000 fa05 	bl	800f8c8 <_Bfree>
 800f4be:	9b07      	ldr	r3, [sp, #28]
 800f4c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f4c2:	9e00      	ldr	r6, [sp, #0]
 800f4c4:	ea42 0103 	orr.w	r1, r2, r3
 800f4c8:	9b06      	ldr	r3, [sp, #24]
 800f4ca:	4319      	orrs	r1, r3
 800f4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ce:	d10d      	bne.n	800f4ec <_dtoa_r+0xa44>
 800f4d0:	2b39      	cmp	r3, #57	@ 0x39
 800f4d2:	d027      	beq.n	800f524 <_dtoa_r+0xa7c>
 800f4d4:	9a04      	ldr	r2, [sp, #16]
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	dd01      	ble.n	800f4de <_dtoa_r+0xa36>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	3331      	adds	r3, #49	@ 0x31
 800f4de:	f88b 3000 	strb.w	r3, [fp]
 800f4e2:	e52e      	b.n	800ef42 <_dtoa_r+0x49a>
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	e7b9      	b.n	800f45c <_dtoa_r+0x9b4>
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	e7e2      	b.n	800f4b2 <_dtoa_r+0xa0a>
 800f4ec:	9904      	ldr	r1, [sp, #16]
 800f4ee:	2900      	cmp	r1, #0
 800f4f0:	db04      	blt.n	800f4fc <_dtoa_r+0xa54>
 800f4f2:	9807      	ldr	r0, [sp, #28]
 800f4f4:	4301      	orrs	r1, r0
 800f4f6:	9806      	ldr	r0, [sp, #24]
 800f4f8:	4301      	orrs	r1, r0
 800f4fa:	d120      	bne.n	800f53e <_dtoa_r+0xa96>
 800f4fc:	2a00      	cmp	r2, #0
 800f4fe:	ddee      	ble.n	800f4de <_dtoa_r+0xa36>
 800f500:	9902      	ldr	r1, [sp, #8]
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	2201      	movs	r2, #1
 800f506:	4648      	mov	r0, r9
 800f508:	f000 fba4 	bl	800fc54 <__lshift>
 800f50c:	4621      	mov	r1, r4
 800f50e:	9002      	str	r0, [sp, #8]
 800f510:	f000 fc0c 	bl	800fd2c <__mcmp>
 800f514:	2800      	cmp	r0, #0
 800f516:	9b00      	ldr	r3, [sp, #0]
 800f518:	dc02      	bgt.n	800f520 <_dtoa_r+0xa78>
 800f51a:	d1e0      	bne.n	800f4de <_dtoa_r+0xa36>
 800f51c:	07da      	lsls	r2, r3, #31
 800f51e:	d5de      	bpl.n	800f4de <_dtoa_r+0xa36>
 800f520:	2b39      	cmp	r3, #57	@ 0x39
 800f522:	d1da      	bne.n	800f4da <_dtoa_r+0xa32>
 800f524:	2339      	movs	r3, #57	@ 0x39
 800f526:	f88b 3000 	strb.w	r3, [fp]
 800f52a:	4633      	mov	r3, r6
 800f52c:	461e      	mov	r6, r3
 800f52e:	3b01      	subs	r3, #1
 800f530:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f534:	2a39      	cmp	r2, #57	@ 0x39
 800f536:	d04e      	beq.n	800f5d6 <_dtoa_r+0xb2e>
 800f538:	3201      	adds	r2, #1
 800f53a:	701a      	strb	r2, [r3, #0]
 800f53c:	e501      	b.n	800ef42 <_dtoa_r+0x49a>
 800f53e:	2a00      	cmp	r2, #0
 800f540:	dd03      	ble.n	800f54a <_dtoa_r+0xaa2>
 800f542:	2b39      	cmp	r3, #57	@ 0x39
 800f544:	d0ee      	beq.n	800f524 <_dtoa_r+0xa7c>
 800f546:	3301      	adds	r3, #1
 800f548:	e7c9      	b.n	800f4de <_dtoa_r+0xa36>
 800f54a:	9a00      	ldr	r2, [sp, #0]
 800f54c:	9908      	ldr	r1, [sp, #32]
 800f54e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f552:	428a      	cmp	r2, r1
 800f554:	d028      	beq.n	800f5a8 <_dtoa_r+0xb00>
 800f556:	9902      	ldr	r1, [sp, #8]
 800f558:	2300      	movs	r3, #0
 800f55a:	220a      	movs	r2, #10
 800f55c:	4648      	mov	r0, r9
 800f55e:	f000 f9d5 	bl	800f90c <__multadd>
 800f562:	42af      	cmp	r7, r5
 800f564:	9002      	str	r0, [sp, #8]
 800f566:	f04f 0300 	mov.w	r3, #0
 800f56a:	f04f 020a 	mov.w	r2, #10
 800f56e:	4639      	mov	r1, r7
 800f570:	4648      	mov	r0, r9
 800f572:	d107      	bne.n	800f584 <_dtoa_r+0xadc>
 800f574:	f000 f9ca 	bl	800f90c <__multadd>
 800f578:	4607      	mov	r7, r0
 800f57a:	4605      	mov	r5, r0
 800f57c:	9b00      	ldr	r3, [sp, #0]
 800f57e:	3301      	adds	r3, #1
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	e777      	b.n	800f474 <_dtoa_r+0x9cc>
 800f584:	f000 f9c2 	bl	800f90c <__multadd>
 800f588:	4629      	mov	r1, r5
 800f58a:	4607      	mov	r7, r0
 800f58c:	2300      	movs	r3, #0
 800f58e:	220a      	movs	r2, #10
 800f590:	4648      	mov	r0, r9
 800f592:	f000 f9bb 	bl	800f90c <__multadd>
 800f596:	4605      	mov	r5, r0
 800f598:	e7f0      	b.n	800f57c <_dtoa_r+0xad4>
 800f59a:	f1bb 0f00 	cmp.w	fp, #0
 800f59e:	bfcc      	ite	gt
 800f5a0:	465e      	movgt	r6, fp
 800f5a2:	2601      	movle	r6, #1
 800f5a4:	4456      	add	r6, sl
 800f5a6:	2700      	movs	r7, #0
 800f5a8:	9902      	ldr	r1, [sp, #8]
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	4648      	mov	r0, r9
 800f5b0:	f000 fb50 	bl	800fc54 <__lshift>
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	9002      	str	r0, [sp, #8]
 800f5b8:	f000 fbb8 	bl	800fd2c <__mcmp>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	dcb4      	bgt.n	800f52a <_dtoa_r+0xa82>
 800f5c0:	d102      	bne.n	800f5c8 <_dtoa_r+0xb20>
 800f5c2:	9b00      	ldr	r3, [sp, #0]
 800f5c4:	07db      	lsls	r3, r3, #31
 800f5c6:	d4b0      	bmi.n	800f52a <_dtoa_r+0xa82>
 800f5c8:	4633      	mov	r3, r6
 800f5ca:	461e      	mov	r6, r3
 800f5cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5d0:	2a30      	cmp	r2, #48	@ 0x30
 800f5d2:	d0fa      	beq.n	800f5ca <_dtoa_r+0xb22>
 800f5d4:	e4b5      	b.n	800ef42 <_dtoa_r+0x49a>
 800f5d6:	459a      	cmp	sl, r3
 800f5d8:	d1a8      	bne.n	800f52c <_dtoa_r+0xa84>
 800f5da:	2331      	movs	r3, #49	@ 0x31
 800f5dc:	f108 0801 	add.w	r8, r8, #1
 800f5e0:	f88a 3000 	strb.w	r3, [sl]
 800f5e4:	e4ad      	b.n	800ef42 <_dtoa_r+0x49a>
 800f5e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f5e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f644 <_dtoa_r+0xb9c>
 800f5ec:	b11b      	cbz	r3, 800f5f6 <_dtoa_r+0xb4e>
 800f5ee:	f10a 0308 	add.w	r3, sl, #8
 800f5f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	4650      	mov	r0, sl
 800f5f8:	b017      	add	sp, #92	@ 0x5c
 800f5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fe:	9b07      	ldr	r3, [sp, #28]
 800f600:	2b01      	cmp	r3, #1
 800f602:	f77f ae2e 	ble.w	800f262 <_dtoa_r+0x7ba>
 800f606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f608:	9308      	str	r3, [sp, #32]
 800f60a:	2001      	movs	r0, #1
 800f60c:	e64d      	b.n	800f2aa <_dtoa_r+0x802>
 800f60e:	f1bb 0f00 	cmp.w	fp, #0
 800f612:	f77f aed9 	ble.w	800f3c8 <_dtoa_r+0x920>
 800f616:	4656      	mov	r6, sl
 800f618:	9802      	ldr	r0, [sp, #8]
 800f61a:	4621      	mov	r1, r4
 800f61c:	f7ff f9b9 	bl	800e992 <quorem>
 800f620:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f624:	f806 3b01 	strb.w	r3, [r6], #1
 800f628:	eba6 020a 	sub.w	r2, r6, sl
 800f62c:	4593      	cmp	fp, r2
 800f62e:	ddb4      	ble.n	800f59a <_dtoa_r+0xaf2>
 800f630:	9902      	ldr	r1, [sp, #8]
 800f632:	2300      	movs	r3, #0
 800f634:	220a      	movs	r2, #10
 800f636:	4648      	mov	r0, r9
 800f638:	f000 f968 	bl	800f90c <__multadd>
 800f63c:	9002      	str	r0, [sp, #8]
 800f63e:	e7eb      	b.n	800f618 <_dtoa_r+0xb70>
 800f640:	08010848 	.word	0x08010848
 800f644:	080107cc 	.word	0x080107cc

0800f648 <_free_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4605      	mov	r5, r0
 800f64c:	2900      	cmp	r1, #0
 800f64e:	d041      	beq.n	800f6d4 <_free_r+0x8c>
 800f650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f654:	1f0c      	subs	r4, r1, #4
 800f656:	2b00      	cmp	r3, #0
 800f658:	bfb8      	it	lt
 800f65a:	18e4      	addlt	r4, r4, r3
 800f65c:	f000 f8e8 	bl	800f830 <__malloc_lock>
 800f660:	4a1d      	ldr	r2, [pc, #116]	@ (800f6d8 <_free_r+0x90>)
 800f662:	6813      	ldr	r3, [r2, #0]
 800f664:	b933      	cbnz	r3, 800f674 <_free_r+0x2c>
 800f666:	6063      	str	r3, [r4, #4]
 800f668:	6014      	str	r4, [r2, #0]
 800f66a:	4628      	mov	r0, r5
 800f66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f670:	f000 b8e4 	b.w	800f83c <__malloc_unlock>
 800f674:	42a3      	cmp	r3, r4
 800f676:	d908      	bls.n	800f68a <_free_r+0x42>
 800f678:	6820      	ldr	r0, [r4, #0]
 800f67a:	1821      	adds	r1, r4, r0
 800f67c:	428b      	cmp	r3, r1
 800f67e:	bf01      	itttt	eq
 800f680:	6819      	ldreq	r1, [r3, #0]
 800f682:	685b      	ldreq	r3, [r3, #4]
 800f684:	1809      	addeq	r1, r1, r0
 800f686:	6021      	streq	r1, [r4, #0]
 800f688:	e7ed      	b.n	800f666 <_free_r+0x1e>
 800f68a:	461a      	mov	r2, r3
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	b10b      	cbz	r3, 800f694 <_free_r+0x4c>
 800f690:	42a3      	cmp	r3, r4
 800f692:	d9fa      	bls.n	800f68a <_free_r+0x42>
 800f694:	6811      	ldr	r1, [r2, #0]
 800f696:	1850      	adds	r0, r2, r1
 800f698:	42a0      	cmp	r0, r4
 800f69a:	d10b      	bne.n	800f6b4 <_free_r+0x6c>
 800f69c:	6820      	ldr	r0, [r4, #0]
 800f69e:	4401      	add	r1, r0
 800f6a0:	1850      	adds	r0, r2, r1
 800f6a2:	4283      	cmp	r3, r0
 800f6a4:	6011      	str	r1, [r2, #0]
 800f6a6:	d1e0      	bne.n	800f66a <_free_r+0x22>
 800f6a8:	6818      	ldr	r0, [r3, #0]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	6053      	str	r3, [r2, #4]
 800f6ae:	4408      	add	r0, r1
 800f6b0:	6010      	str	r0, [r2, #0]
 800f6b2:	e7da      	b.n	800f66a <_free_r+0x22>
 800f6b4:	d902      	bls.n	800f6bc <_free_r+0x74>
 800f6b6:	230c      	movs	r3, #12
 800f6b8:	602b      	str	r3, [r5, #0]
 800f6ba:	e7d6      	b.n	800f66a <_free_r+0x22>
 800f6bc:	6820      	ldr	r0, [r4, #0]
 800f6be:	1821      	adds	r1, r4, r0
 800f6c0:	428b      	cmp	r3, r1
 800f6c2:	bf04      	itt	eq
 800f6c4:	6819      	ldreq	r1, [r3, #0]
 800f6c6:	685b      	ldreq	r3, [r3, #4]
 800f6c8:	6063      	str	r3, [r4, #4]
 800f6ca:	bf04      	itt	eq
 800f6cc:	1809      	addeq	r1, r1, r0
 800f6ce:	6021      	streq	r1, [r4, #0]
 800f6d0:	6054      	str	r4, [r2, #4]
 800f6d2:	e7ca      	b.n	800f66a <_free_r+0x22>
 800f6d4:	bd38      	pop	{r3, r4, r5, pc}
 800f6d6:	bf00      	nop
 800f6d8:	200021e8 	.word	0x200021e8

0800f6dc <malloc>:
 800f6dc:	4b02      	ldr	r3, [pc, #8]	@ (800f6e8 <malloc+0xc>)
 800f6de:	4601      	mov	r1, r0
 800f6e0:	6818      	ldr	r0, [r3, #0]
 800f6e2:	f000 b825 	b.w	800f730 <_malloc_r>
 800f6e6:	bf00      	nop
 800f6e8:	20000138 	.word	0x20000138

0800f6ec <sbrk_aligned>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	4e0f      	ldr	r6, [pc, #60]	@ (800f72c <sbrk_aligned+0x40>)
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	6831      	ldr	r1, [r6, #0]
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	b911      	cbnz	r1, 800f6fe <sbrk_aligned+0x12>
 800f6f8:	f000 fec6 	bl	8010488 <_sbrk_r>
 800f6fc:	6030      	str	r0, [r6, #0]
 800f6fe:	4621      	mov	r1, r4
 800f700:	4628      	mov	r0, r5
 800f702:	f000 fec1 	bl	8010488 <_sbrk_r>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	d103      	bne.n	800f712 <sbrk_aligned+0x26>
 800f70a:	f04f 34ff 	mov.w	r4, #4294967295
 800f70e:	4620      	mov	r0, r4
 800f710:	bd70      	pop	{r4, r5, r6, pc}
 800f712:	1cc4      	adds	r4, r0, #3
 800f714:	f024 0403 	bic.w	r4, r4, #3
 800f718:	42a0      	cmp	r0, r4
 800f71a:	d0f8      	beq.n	800f70e <sbrk_aligned+0x22>
 800f71c:	1a21      	subs	r1, r4, r0
 800f71e:	4628      	mov	r0, r5
 800f720:	f000 feb2 	bl	8010488 <_sbrk_r>
 800f724:	3001      	adds	r0, #1
 800f726:	d1f2      	bne.n	800f70e <sbrk_aligned+0x22>
 800f728:	e7ef      	b.n	800f70a <sbrk_aligned+0x1e>
 800f72a:	bf00      	nop
 800f72c:	200021e4 	.word	0x200021e4

0800f730 <_malloc_r>:
 800f730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f734:	1ccd      	adds	r5, r1, #3
 800f736:	f025 0503 	bic.w	r5, r5, #3
 800f73a:	3508      	adds	r5, #8
 800f73c:	2d0c      	cmp	r5, #12
 800f73e:	bf38      	it	cc
 800f740:	250c      	movcc	r5, #12
 800f742:	2d00      	cmp	r5, #0
 800f744:	4606      	mov	r6, r0
 800f746:	db01      	blt.n	800f74c <_malloc_r+0x1c>
 800f748:	42a9      	cmp	r1, r5
 800f74a:	d904      	bls.n	800f756 <_malloc_r+0x26>
 800f74c:	230c      	movs	r3, #12
 800f74e:	6033      	str	r3, [r6, #0]
 800f750:	2000      	movs	r0, #0
 800f752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f82c <_malloc_r+0xfc>
 800f75a:	f000 f869 	bl	800f830 <__malloc_lock>
 800f75e:	f8d8 3000 	ldr.w	r3, [r8]
 800f762:	461c      	mov	r4, r3
 800f764:	bb44      	cbnz	r4, 800f7b8 <_malloc_r+0x88>
 800f766:	4629      	mov	r1, r5
 800f768:	4630      	mov	r0, r6
 800f76a:	f7ff ffbf 	bl	800f6ec <sbrk_aligned>
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	4604      	mov	r4, r0
 800f772:	d158      	bne.n	800f826 <_malloc_r+0xf6>
 800f774:	f8d8 4000 	ldr.w	r4, [r8]
 800f778:	4627      	mov	r7, r4
 800f77a:	2f00      	cmp	r7, #0
 800f77c:	d143      	bne.n	800f806 <_malloc_r+0xd6>
 800f77e:	2c00      	cmp	r4, #0
 800f780:	d04b      	beq.n	800f81a <_malloc_r+0xea>
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	4639      	mov	r1, r7
 800f786:	4630      	mov	r0, r6
 800f788:	eb04 0903 	add.w	r9, r4, r3
 800f78c:	f000 fe7c 	bl	8010488 <_sbrk_r>
 800f790:	4581      	cmp	r9, r0
 800f792:	d142      	bne.n	800f81a <_malloc_r+0xea>
 800f794:	6821      	ldr	r1, [r4, #0]
 800f796:	1a6d      	subs	r5, r5, r1
 800f798:	4629      	mov	r1, r5
 800f79a:	4630      	mov	r0, r6
 800f79c:	f7ff ffa6 	bl	800f6ec <sbrk_aligned>
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d03a      	beq.n	800f81a <_malloc_r+0xea>
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	442b      	add	r3, r5
 800f7a8:	6023      	str	r3, [r4, #0]
 800f7aa:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	bb62      	cbnz	r2, 800f80c <_malloc_r+0xdc>
 800f7b2:	f8c8 7000 	str.w	r7, [r8]
 800f7b6:	e00f      	b.n	800f7d8 <_malloc_r+0xa8>
 800f7b8:	6822      	ldr	r2, [r4, #0]
 800f7ba:	1b52      	subs	r2, r2, r5
 800f7bc:	d420      	bmi.n	800f800 <_malloc_r+0xd0>
 800f7be:	2a0b      	cmp	r2, #11
 800f7c0:	d917      	bls.n	800f7f2 <_malloc_r+0xc2>
 800f7c2:	1961      	adds	r1, r4, r5
 800f7c4:	42a3      	cmp	r3, r4
 800f7c6:	6025      	str	r5, [r4, #0]
 800f7c8:	bf18      	it	ne
 800f7ca:	6059      	strne	r1, [r3, #4]
 800f7cc:	6863      	ldr	r3, [r4, #4]
 800f7ce:	bf08      	it	eq
 800f7d0:	f8c8 1000 	streq.w	r1, [r8]
 800f7d4:	5162      	str	r2, [r4, r5]
 800f7d6:	604b      	str	r3, [r1, #4]
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f000 f82f 	bl	800f83c <__malloc_unlock>
 800f7de:	f104 000b 	add.w	r0, r4, #11
 800f7e2:	1d23      	adds	r3, r4, #4
 800f7e4:	f020 0007 	bic.w	r0, r0, #7
 800f7e8:	1ac2      	subs	r2, r0, r3
 800f7ea:	bf1c      	itt	ne
 800f7ec:	1a1b      	subne	r3, r3, r0
 800f7ee:	50a3      	strne	r3, [r4, r2]
 800f7f0:	e7af      	b.n	800f752 <_malloc_r+0x22>
 800f7f2:	6862      	ldr	r2, [r4, #4]
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	bf0c      	ite	eq
 800f7f8:	f8c8 2000 	streq.w	r2, [r8]
 800f7fc:	605a      	strne	r2, [r3, #4]
 800f7fe:	e7eb      	b.n	800f7d8 <_malloc_r+0xa8>
 800f800:	4623      	mov	r3, r4
 800f802:	6864      	ldr	r4, [r4, #4]
 800f804:	e7ae      	b.n	800f764 <_malloc_r+0x34>
 800f806:	463c      	mov	r4, r7
 800f808:	687f      	ldr	r7, [r7, #4]
 800f80a:	e7b6      	b.n	800f77a <_malloc_r+0x4a>
 800f80c:	461a      	mov	r2, r3
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	42a3      	cmp	r3, r4
 800f812:	d1fb      	bne.n	800f80c <_malloc_r+0xdc>
 800f814:	2300      	movs	r3, #0
 800f816:	6053      	str	r3, [r2, #4]
 800f818:	e7de      	b.n	800f7d8 <_malloc_r+0xa8>
 800f81a:	230c      	movs	r3, #12
 800f81c:	6033      	str	r3, [r6, #0]
 800f81e:	4630      	mov	r0, r6
 800f820:	f000 f80c 	bl	800f83c <__malloc_unlock>
 800f824:	e794      	b.n	800f750 <_malloc_r+0x20>
 800f826:	6005      	str	r5, [r0, #0]
 800f828:	e7d6      	b.n	800f7d8 <_malloc_r+0xa8>
 800f82a:	bf00      	nop
 800f82c:	200021e8 	.word	0x200021e8

0800f830 <__malloc_lock>:
 800f830:	4801      	ldr	r0, [pc, #4]	@ (800f838 <__malloc_lock+0x8>)
 800f832:	f7ff b89e 	b.w	800e972 <__retarget_lock_acquire_recursive>
 800f836:	bf00      	nop
 800f838:	200021e0 	.word	0x200021e0

0800f83c <__malloc_unlock>:
 800f83c:	4801      	ldr	r0, [pc, #4]	@ (800f844 <__malloc_unlock+0x8>)
 800f83e:	f7ff b899 	b.w	800e974 <__retarget_lock_release_recursive>
 800f842:	bf00      	nop
 800f844:	200021e0 	.word	0x200021e0

0800f848 <_Balloc>:
 800f848:	b570      	push	{r4, r5, r6, lr}
 800f84a:	69c6      	ldr	r6, [r0, #28]
 800f84c:	4604      	mov	r4, r0
 800f84e:	460d      	mov	r5, r1
 800f850:	b976      	cbnz	r6, 800f870 <_Balloc+0x28>
 800f852:	2010      	movs	r0, #16
 800f854:	f7ff ff42 	bl	800f6dc <malloc>
 800f858:	4602      	mov	r2, r0
 800f85a:	61e0      	str	r0, [r4, #28]
 800f85c:	b920      	cbnz	r0, 800f868 <_Balloc+0x20>
 800f85e:	4b18      	ldr	r3, [pc, #96]	@ (800f8c0 <_Balloc+0x78>)
 800f860:	4818      	ldr	r0, [pc, #96]	@ (800f8c4 <_Balloc+0x7c>)
 800f862:	216b      	movs	r1, #107	@ 0x6b
 800f864:	f000 fe20 	bl	80104a8 <__assert_func>
 800f868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f86c:	6006      	str	r6, [r0, #0]
 800f86e:	60c6      	str	r6, [r0, #12]
 800f870:	69e6      	ldr	r6, [r4, #28]
 800f872:	68f3      	ldr	r3, [r6, #12]
 800f874:	b183      	cbz	r3, 800f898 <_Balloc+0x50>
 800f876:	69e3      	ldr	r3, [r4, #28]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f87e:	b9b8      	cbnz	r0, 800f8b0 <_Balloc+0x68>
 800f880:	2101      	movs	r1, #1
 800f882:	fa01 f605 	lsl.w	r6, r1, r5
 800f886:	1d72      	adds	r2, r6, #5
 800f888:	0092      	lsls	r2, r2, #2
 800f88a:	4620      	mov	r0, r4
 800f88c:	f000 fe2a 	bl	80104e4 <_calloc_r>
 800f890:	b160      	cbz	r0, 800f8ac <_Balloc+0x64>
 800f892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f896:	e00e      	b.n	800f8b6 <_Balloc+0x6e>
 800f898:	2221      	movs	r2, #33	@ 0x21
 800f89a:	2104      	movs	r1, #4
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fe21 	bl	80104e4 <_calloc_r>
 800f8a2:	69e3      	ldr	r3, [r4, #28]
 800f8a4:	60f0      	str	r0, [r6, #12]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1e4      	bne.n	800f876 <_Balloc+0x2e>
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	6802      	ldr	r2, [r0, #0]
 800f8b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8bc:	e7f7      	b.n	800f8ae <_Balloc+0x66>
 800f8be:	bf00      	nop
 800f8c0:	080107d9 	.word	0x080107d9
 800f8c4:	08010859 	.word	0x08010859

0800f8c8 <_Bfree>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	69c6      	ldr	r6, [r0, #28]
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	b976      	cbnz	r6, 800f8f0 <_Bfree+0x28>
 800f8d2:	2010      	movs	r0, #16
 800f8d4:	f7ff ff02 	bl	800f6dc <malloc>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	61e8      	str	r0, [r5, #28]
 800f8dc:	b920      	cbnz	r0, 800f8e8 <_Bfree+0x20>
 800f8de:	4b09      	ldr	r3, [pc, #36]	@ (800f904 <_Bfree+0x3c>)
 800f8e0:	4809      	ldr	r0, [pc, #36]	@ (800f908 <_Bfree+0x40>)
 800f8e2:	218f      	movs	r1, #143	@ 0x8f
 800f8e4:	f000 fde0 	bl	80104a8 <__assert_func>
 800f8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8ec:	6006      	str	r6, [r0, #0]
 800f8ee:	60c6      	str	r6, [r0, #12]
 800f8f0:	b13c      	cbz	r4, 800f902 <_Bfree+0x3a>
 800f8f2:	69eb      	ldr	r3, [r5, #28]
 800f8f4:	6862      	ldr	r2, [r4, #4]
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8fc:	6021      	str	r1, [r4, #0]
 800f8fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	080107d9 	.word	0x080107d9
 800f908:	08010859 	.word	0x08010859

0800f90c <__multadd>:
 800f90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f910:	690d      	ldr	r5, [r1, #16]
 800f912:	4607      	mov	r7, r0
 800f914:	460c      	mov	r4, r1
 800f916:	461e      	mov	r6, r3
 800f918:	f101 0c14 	add.w	ip, r1, #20
 800f91c:	2000      	movs	r0, #0
 800f91e:	f8dc 3000 	ldr.w	r3, [ip]
 800f922:	b299      	uxth	r1, r3
 800f924:	fb02 6101 	mla	r1, r2, r1, r6
 800f928:	0c1e      	lsrs	r6, r3, #16
 800f92a:	0c0b      	lsrs	r3, r1, #16
 800f92c:	fb02 3306 	mla	r3, r2, r6, r3
 800f930:	b289      	uxth	r1, r1
 800f932:	3001      	adds	r0, #1
 800f934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f938:	4285      	cmp	r5, r0
 800f93a:	f84c 1b04 	str.w	r1, [ip], #4
 800f93e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f942:	dcec      	bgt.n	800f91e <__multadd+0x12>
 800f944:	b30e      	cbz	r6, 800f98a <__multadd+0x7e>
 800f946:	68a3      	ldr	r3, [r4, #8]
 800f948:	42ab      	cmp	r3, r5
 800f94a:	dc19      	bgt.n	800f980 <__multadd+0x74>
 800f94c:	6861      	ldr	r1, [r4, #4]
 800f94e:	4638      	mov	r0, r7
 800f950:	3101      	adds	r1, #1
 800f952:	f7ff ff79 	bl	800f848 <_Balloc>
 800f956:	4680      	mov	r8, r0
 800f958:	b928      	cbnz	r0, 800f966 <__multadd+0x5a>
 800f95a:	4602      	mov	r2, r0
 800f95c:	4b0c      	ldr	r3, [pc, #48]	@ (800f990 <__multadd+0x84>)
 800f95e:	480d      	ldr	r0, [pc, #52]	@ (800f994 <__multadd+0x88>)
 800f960:	21ba      	movs	r1, #186	@ 0xba
 800f962:	f000 fda1 	bl	80104a8 <__assert_func>
 800f966:	6922      	ldr	r2, [r4, #16]
 800f968:	3202      	adds	r2, #2
 800f96a:	f104 010c 	add.w	r1, r4, #12
 800f96e:	0092      	lsls	r2, r2, #2
 800f970:	300c      	adds	r0, #12
 800f972:	f7ff f800 	bl	800e976 <memcpy>
 800f976:	4621      	mov	r1, r4
 800f978:	4638      	mov	r0, r7
 800f97a:	f7ff ffa5 	bl	800f8c8 <_Bfree>
 800f97e:	4644      	mov	r4, r8
 800f980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f984:	3501      	adds	r5, #1
 800f986:	615e      	str	r6, [r3, #20]
 800f988:	6125      	str	r5, [r4, #16]
 800f98a:	4620      	mov	r0, r4
 800f98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f990:	08010848 	.word	0x08010848
 800f994:	08010859 	.word	0x08010859

0800f998 <__hi0bits>:
 800f998:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f99c:	4603      	mov	r3, r0
 800f99e:	bf36      	itet	cc
 800f9a0:	0403      	lslcc	r3, r0, #16
 800f9a2:	2000      	movcs	r0, #0
 800f9a4:	2010      	movcc	r0, #16
 800f9a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9aa:	bf3c      	itt	cc
 800f9ac:	021b      	lslcc	r3, r3, #8
 800f9ae:	3008      	addcc	r0, #8
 800f9b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9b4:	bf3c      	itt	cc
 800f9b6:	011b      	lslcc	r3, r3, #4
 800f9b8:	3004      	addcc	r0, #4
 800f9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9be:	bf3c      	itt	cc
 800f9c0:	009b      	lslcc	r3, r3, #2
 800f9c2:	3002      	addcc	r0, #2
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	db05      	blt.n	800f9d4 <__hi0bits+0x3c>
 800f9c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f9cc:	f100 0001 	add.w	r0, r0, #1
 800f9d0:	bf08      	it	eq
 800f9d2:	2020      	moveq	r0, #32
 800f9d4:	4770      	bx	lr

0800f9d6 <__lo0bits>:
 800f9d6:	6803      	ldr	r3, [r0, #0]
 800f9d8:	4602      	mov	r2, r0
 800f9da:	f013 0007 	ands.w	r0, r3, #7
 800f9de:	d00b      	beq.n	800f9f8 <__lo0bits+0x22>
 800f9e0:	07d9      	lsls	r1, r3, #31
 800f9e2:	d421      	bmi.n	800fa28 <__lo0bits+0x52>
 800f9e4:	0798      	lsls	r0, r3, #30
 800f9e6:	bf49      	itett	mi
 800f9e8:	085b      	lsrmi	r3, r3, #1
 800f9ea:	089b      	lsrpl	r3, r3, #2
 800f9ec:	2001      	movmi	r0, #1
 800f9ee:	6013      	strmi	r3, [r2, #0]
 800f9f0:	bf5c      	itt	pl
 800f9f2:	6013      	strpl	r3, [r2, #0]
 800f9f4:	2002      	movpl	r0, #2
 800f9f6:	4770      	bx	lr
 800f9f8:	b299      	uxth	r1, r3
 800f9fa:	b909      	cbnz	r1, 800fa00 <__lo0bits+0x2a>
 800f9fc:	0c1b      	lsrs	r3, r3, #16
 800f9fe:	2010      	movs	r0, #16
 800fa00:	b2d9      	uxtb	r1, r3
 800fa02:	b909      	cbnz	r1, 800fa08 <__lo0bits+0x32>
 800fa04:	3008      	adds	r0, #8
 800fa06:	0a1b      	lsrs	r3, r3, #8
 800fa08:	0719      	lsls	r1, r3, #28
 800fa0a:	bf04      	itt	eq
 800fa0c:	091b      	lsreq	r3, r3, #4
 800fa0e:	3004      	addeq	r0, #4
 800fa10:	0799      	lsls	r1, r3, #30
 800fa12:	bf04      	itt	eq
 800fa14:	089b      	lsreq	r3, r3, #2
 800fa16:	3002      	addeq	r0, #2
 800fa18:	07d9      	lsls	r1, r3, #31
 800fa1a:	d403      	bmi.n	800fa24 <__lo0bits+0x4e>
 800fa1c:	085b      	lsrs	r3, r3, #1
 800fa1e:	f100 0001 	add.w	r0, r0, #1
 800fa22:	d003      	beq.n	800fa2c <__lo0bits+0x56>
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	4770      	bx	lr
 800fa28:	2000      	movs	r0, #0
 800fa2a:	4770      	bx	lr
 800fa2c:	2020      	movs	r0, #32
 800fa2e:	4770      	bx	lr

0800fa30 <__i2b>:
 800fa30:	b510      	push	{r4, lr}
 800fa32:	460c      	mov	r4, r1
 800fa34:	2101      	movs	r1, #1
 800fa36:	f7ff ff07 	bl	800f848 <_Balloc>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	b928      	cbnz	r0, 800fa4a <__i2b+0x1a>
 800fa3e:	4b05      	ldr	r3, [pc, #20]	@ (800fa54 <__i2b+0x24>)
 800fa40:	4805      	ldr	r0, [pc, #20]	@ (800fa58 <__i2b+0x28>)
 800fa42:	f240 1145 	movw	r1, #325	@ 0x145
 800fa46:	f000 fd2f 	bl	80104a8 <__assert_func>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	6144      	str	r4, [r0, #20]
 800fa4e:	6103      	str	r3, [r0, #16]
 800fa50:	bd10      	pop	{r4, pc}
 800fa52:	bf00      	nop
 800fa54:	08010848 	.word	0x08010848
 800fa58:	08010859 	.word	0x08010859

0800fa5c <__multiply>:
 800fa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa60:	4617      	mov	r7, r2
 800fa62:	690a      	ldr	r2, [r1, #16]
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	bfa8      	it	ge
 800fa6a:	463b      	movge	r3, r7
 800fa6c:	4689      	mov	r9, r1
 800fa6e:	bfa4      	itt	ge
 800fa70:	460f      	movge	r7, r1
 800fa72:	4699      	movge	r9, r3
 800fa74:	693d      	ldr	r5, [r7, #16]
 800fa76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	6879      	ldr	r1, [r7, #4]
 800fa7e:	eb05 060a 	add.w	r6, r5, sl
 800fa82:	42b3      	cmp	r3, r6
 800fa84:	b085      	sub	sp, #20
 800fa86:	bfb8      	it	lt
 800fa88:	3101      	addlt	r1, #1
 800fa8a:	f7ff fedd 	bl	800f848 <_Balloc>
 800fa8e:	b930      	cbnz	r0, 800fa9e <__multiply+0x42>
 800fa90:	4602      	mov	r2, r0
 800fa92:	4b41      	ldr	r3, [pc, #260]	@ (800fb98 <__multiply+0x13c>)
 800fa94:	4841      	ldr	r0, [pc, #260]	@ (800fb9c <__multiply+0x140>)
 800fa96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fa9a:	f000 fd05 	bl	80104a8 <__assert_func>
 800fa9e:	f100 0414 	add.w	r4, r0, #20
 800faa2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800faa6:	4623      	mov	r3, r4
 800faa8:	2200      	movs	r2, #0
 800faaa:	4573      	cmp	r3, lr
 800faac:	d320      	bcc.n	800faf0 <__multiply+0x94>
 800faae:	f107 0814 	add.w	r8, r7, #20
 800fab2:	f109 0114 	add.w	r1, r9, #20
 800fab6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800faba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fabe:	9302      	str	r3, [sp, #8]
 800fac0:	1beb      	subs	r3, r5, r7
 800fac2:	3b15      	subs	r3, #21
 800fac4:	f023 0303 	bic.w	r3, r3, #3
 800fac8:	3304      	adds	r3, #4
 800faca:	3715      	adds	r7, #21
 800facc:	42bd      	cmp	r5, r7
 800face:	bf38      	it	cc
 800fad0:	2304      	movcc	r3, #4
 800fad2:	9301      	str	r3, [sp, #4]
 800fad4:	9b02      	ldr	r3, [sp, #8]
 800fad6:	9103      	str	r1, [sp, #12]
 800fad8:	428b      	cmp	r3, r1
 800fada:	d80c      	bhi.n	800faf6 <__multiply+0x9a>
 800fadc:	2e00      	cmp	r6, #0
 800fade:	dd03      	ble.n	800fae8 <__multiply+0x8c>
 800fae0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d055      	beq.n	800fb94 <__multiply+0x138>
 800fae8:	6106      	str	r6, [r0, #16]
 800faea:	b005      	add	sp, #20
 800faec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf0:	f843 2b04 	str.w	r2, [r3], #4
 800faf4:	e7d9      	b.n	800faaa <__multiply+0x4e>
 800faf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800fafa:	f1ba 0f00 	cmp.w	sl, #0
 800fafe:	d01f      	beq.n	800fb40 <__multiply+0xe4>
 800fb00:	46c4      	mov	ip, r8
 800fb02:	46a1      	mov	r9, r4
 800fb04:	2700      	movs	r7, #0
 800fb06:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb0a:	f8d9 3000 	ldr.w	r3, [r9]
 800fb0e:	fa1f fb82 	uxth.w	fp, r2
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb18:	443b      	add	r3, r7
 800fb1a:	f8d9 7000 	ldr.w	r7, [r9]
 800fb1e:	0c12      	lsrs	r2, r2, #16
 800fb20:	0c3f      	lsrs	r7, r7, #16
 800fb22:	fb0a 7202 	mla	r2, sl, r2, r7
 800fb26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb30:	4565      	cmp	r5, ip
 800fb32:	f849 3b04 	str.w	r3, [r9], #4
 800fb36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fb3a:	d8e4      	bhi.n	800fb06 <__multiply+0xaa>
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	50e7      	str	r7, [r4, r3]
 800fb40:	9b03      	ldr	r3, [sp, #12]
 800fb42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb46:	3104      	adds	r1, #4
 800fb48:	f1b9 0f00 	cmp.w	r9, #0
 800fb4c:	d020      	beq.n	800fb90 <__multiply+0x134>
 800fb4e:	6823      	ldr	r3, [r4, #0]
 800fb50:	4647      	mov	r7, r8
 800fb52:	46a4      	mov	ip, r4
 800fb54:	f04f 0a00 	mov.w	sl, #0
 800fb58:	f8b7 b000 	ldrh.w	fp, [r7]
 800fb5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fb60:	fb09 220b 	mla	r2, r9, fp, r2
 800fb64:	4452      	add	r2, sl
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb6c:	f84c 3b04 	str.w	r3, [ip], #4
 800fb70:	f857 3b04 	ldr.w	r3, [r7], #4
 800fb74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb78:	f8bc 3000 	ldrh.w	r3, [ip]
 800fb7c:	fb09 330a 	mla	r3, r9, sl, r3
 800fb80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fb84:	42bd      	cmp	r5, r7
 800fb86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb8a:	d8e5      	bhi.n	800fb58 <__multiply+0xfc>
 800fb8c:	9a01      	ldr	r2, [sp, #4]
 800fb8e:	50a3      	str	r3, [r4, r2]
 800fb90:	3404      	adds	r4, #4
 800fb92:	e79f      	b.n	800fad4 <__multiply+0x78>
 800fb94:	3e01      	subs	r6, #1
 800fb96:	e7a1      	b.n	800fadc <__multiply+0x80>
 800fb98:	08010848 	.word	0x08010848
 800fb9c:	08010859 	.word	0x08010859

0800fba0 <__pow5mult>:
 800fba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fba4:	4615      	mov	r5, r2
 800fba6:	f012 0203 	ands.w	r2, r2, #3
 800fbaa:	4607      	mov	r7, r0
 800fbac:	460e      	mov	r6, r1
 800fbae:	d007      	beq.n	800fbc0 <__pow5mult+0x20>
 800fbb0:	4c25      	ldr	r4, [pc, #148]	@ (800fc48 <__pow5mult+0xa8>)
 800fbb2:	3a01      	subs	r2, #1
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbba:	f7ff fea7 	bl	800f90c <__multadd>
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	10ad      	asrs	r5, r5, #2
 800fbc2:	d03d      	beq.n	800fc40 <__pow5mult+0xa0>
 800fbc4:	69fc      	ldr	r4, [r7, #28]
 800fbc6:	b97c      	cbnz	r4, 800fbe8 <__pow5mult+0x48>
 800fbc8:	2010      	movs	r0, #16
 800fbca:	f7ff fd87 	bl	800f6dc <malloc>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	61f8      	str	r0, [r7, #28]
 800fbd2:	b928      	cbnz	r0, 800fbe0 <__pow5mult+0x40>
 800fbd4:	4b1d      	ldr	r3, [pc, #116]	@ (800fc4c <__pow5mult+0xac>)
 800fbd6:	481e      	ldr	r0, [pc, #120]	@ (800fc50 <__pow5mult+0xb0>)
 800fbd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fbdc:	f000 fc64 	bl	80104a8 <__assert_func>
 800fbe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbe4:	6004      	str	r4, [r0, #0]
 800fbe6:	60c4      	str	r4, [r0, #12]
 800fbe8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fbec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbf0:	b94c      	cbnz	r4, 800fc06 <__pow5mult+0x66>
 800fbf2:	f240 2171 	movw	r1, #625	@ 0x271
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	f7ff ff1a 	bl	800fa30 <__i2b>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc02:	4604      	mov	r4, r0
 800fc04:	6003      	str	r3, [r0, #0]
 800fc06:	f04f 0900 	mov.w	r9, #0
 800fc0a:	07eb      	lsls	r3, r5, #31
 800fc0c:	d50a      	bpl.n	800fc24 <__pow5mult+0x84>
 800fc0e:	4631      	mov	r1, r6
 800fc10:	4622      	mov	r2, r4
 800fc12:	4638      	mov	r0, r7
 800fc14:	f7ff ff22 	bl	800fa5c <__multiply>
 800fc18:	4631      	mov	r1, r6
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f7ff fe53 	bl	800f8c8 <_Bfree>
 800fc22:	4646      	mov	r6, r8
 800fc24:	106d      	asrs	r5, r5, #1
 800fc26:	d00b      	beq.n	800fc40 <__pow5mult+0xa0>
 800fc28:	6820      	ldr	r0, [r4, #0]
 800fc2a:	b938      	cbnz	r0, 800fc3c <__pow5mult+0x9c>
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	4621      	mov	r1, r4
 800fc30:	4638      	mov	r0, r7
 800fc32:	f7ff ff13 	bl	800fa5c <__multiply>
 800fc36:	6020      	str	r0, [r4, #0]
 800fc38:	f8c0 9000 	str.w	r9, [r0]
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	e7e4      	b.n	800fc0a <__pow5mult+0x6a>
 800fc40:	4630      	mov	r0, r6
 800fc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc46:	bf00      	nop
 800fc48:	0801090c 	.word	0x0801090c
 800fc4c:	080107d9 	.word	0x080107d9
 800fc50:	08010859 	.word	0x08010859

0800fc54 <__lshift>:
 800fc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc58:	460c      	mov	r4, r1
 800fc5a:	6849      	ldr	r1, [r1, #4]
 800fc5c:	6923      	ldr	r3, [r4, #16]
 800fc5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc62:	68a3      	ldr	r3, [r4, #8]
 800fc64:	4607      	mov	r7, r0
 800fc66:	4691      	mov	r9, r2
 800fc68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc6c:	f108 0601 	add.w	r6, r8, #1
 800fc70:	42b3      	cmp	r3, r6
 800fc72:	db0b      	blt.n	800fc8c <__lshift+0x38>
 800fc74:	4638      	mov	r0, r7
 800fc76:	f7ff fde7 	bl	800f848 <_Balloc>
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	b948      	cbnz	r0, 800fc92 <__lshift+0x3e>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	4b28      	ldr	r3, [pc, #160]	@ (800fd24 <__lshift+0xd0>)
 800fc82:	4829      	ldr	r0, [pc, #164]	@ (800fd28 <__lshift+0xd4>)
 800fc84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fc88:	f000 fc0e 	bl	80104a8 <__assert_func>
 800fc8c:	3101      	adds	r1, #1
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	e7ee      	b.n	800fc70 <__lshift+0x1c>
 800fc92:	2300      	movs	r3, #0
 800fc94:	f100 0114 	add.w	r1, r0, #20
 800fc98:	f100 0210 	add.w	r2, r0, #16
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	4553      	cmp	r3, sl
 800fca0:	db33      	blt.n	800fd0a <__lshift+0xb6>
 800fca2:	6920      	ldr	r0, [r4, #16]
 800fca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fca8:	f104 0314 	add.w	r3, r4, #20
 800fcac:	f019 091f 	ands.w	r9, r9, #31
 800fcb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcb8:	d02b      	beq.n	800fd12 <__lshift+0xbe>
 800fcba:	f1c9 0e20 	rsb	lr, r9, #32
 800fcbe:	468a      	mov	sl, r1
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	6818      	ldr	r0, [r3, #0]
 800fcc4:	fa00 f009 	lsl.w	r0, r0, r9
 800fcc8:	4310      	orrs	r0, r2
 800fcca:	f84a 0b04 	str.w	r0, [sl], #4
 800fcce:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcd2:	459c      	cmp	ip, r3
 800fcd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fcd8:	d8f3      	bhi.n	800fcc2 <__lshift+0x6e>
 800fcda:	ebac 0304 	sub.w	r3, ip, r4
 800fcde:	3b15      	subs	r3, #21
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	3304      	adds	r3, #4
 800fce6:	f104 0015 	add.w	r0, r4, #21
 800fcea:	4560      	cmp	r0, ip
 800fcec:	bf88      	it	hi
 800fcee:	2304      	movhi	r3, #4
 800fcf0:	50ca      	str	r2, [r1, r3]
 800fcf2:	b10a      	cbz	r2, 800fcf8 <__lshift+0xa4>
 800fcf4:	f108 0602 	add.w	r6, r8, #2
 800fcf8:	3e01      	subs	r6, #1
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	612e      	str	r6, [r5, #16]
 800fcfe:	4621      	mov	r1, r4
 800fd00:	f7ff fde2 	bl	800f8c8 <_Bfree>
 800fd04:	4628      	mov	r0, r5
 800fd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd0e:	3301      	adds	r3, #1
 800fd10:	e7c5      	b.n	800fc9e <__lshift+0x4a>
 800fd12:	3904      	subs	r1, #4
 800fd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd18:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd1c:	459c      	cmp	ip, r3
 800fd1e:	d8f9      	bhi.n	800fd14 <__lshift+0xc0>
 800fd20:	e7ea      	b.n	800fcf8 <__lshift+0xa4>
 800fd22:	bf00      	nop
 800fd24:	08010848 	.word	0x08010848
 800fd28:	08010859 	.word	0x08010859

0800fd2c <__mcmp>:
 800fd2c:	690a      	ldr	r2, [r1, #16]
 800fd2e:	4603      	mov	r3, r0
 800fd30:	6900      	ldr	r0, [r0, #16]
 800fd32:	1a80      	subs	r0, r0, r2
 800fd34:	b530      	push	{r4, r5, lr}
 800fd36:	d10e      	bne.n	800fd56 <__mcmp+0x2a>
 800fd38:	3314      	adds	r3, #20
 800fd3a:	3114      	adds	r1, #20
 800fd3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd4c:	4295      	cmp	r5, r2
 800fd4e:	d003      	beq.n	800fd58 <__mcmp+0x2c>
 800fd50:	d205      	bcs.n	800fd5e <__mcmp+0x32>
 800fd52:	f04f 30ff 	mov.w	r0, #4294967295
 800fd56:	bd30      	pop	{r4, r5, pc}
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	d3f3      	bcc.n	800fd44 <__mcmp+0x18>
 800fd5c:	e7fb      	b.n	800fd56 <__mcmp+0x2a>
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e7f9      	b.n	800fd56 <__mcmp+0x2a>
	...

0800fd64 <__mdiff>:
 800fd64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	4689      	mov	r9, r1
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4648      	mov	r0, r9
 800fd70:	4614      	mov	r4, r2
 800fd72:	f7ff ffdb 	bl	800fd2c <__mcmp>
 800fd76:	1e05      	subs	r5, r0, #0
 800fd78:	d112      	bne.n	800fda0 <__mdiff+0x3c>
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7ff fd63 	bl	800f848 <_Balloc>
 800fd82:	4602      	mov	r2, r0
 800fd84:	b928      	cbnz	r0, 800fd92 <__mdiff+0x2e>
 800fd86:	4b3f      	ldr	r3, [pc, #252]	@ (800fe84 <__mdiff+0x120>)
 800fd88:	f240 2137 	movw	r1, #567	@ 0x237
 800fd8c:	483e      	ldr	r0, [pc, #248]	@ (800fe88 <__mdiff+0x124>)
 800fd8e:	f000 fb8b 	bl	80104a8 <__assert_func>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd98:	4610      	mov	r0, r2
 800fd9a:	b003      	add	sp, #12
 800fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda0:	bfbc      	itt	lt
 800fda2:	464b      	movlt	r3, r9
 800fda4:	46a1      	movlt	r9, r4
 800fda6:	4630      	mov	r0, r6
 800fda8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fdac:	bfba      	itte	lt
 800fdae:	461c      	movlt	r4, r3
 800fdb0:	2501      	movlt	r5, #1
 800fdb2:	2500      	movge	r5, #0
 800fdb4:	f7ff fd48 	bl	800f848 <_Balloc>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	b918      	cbnz	r0, 800fdc4 <__mdiff+0x60>
 800fdbc:	4b31      	ldr	r3, [pc, #196]	@ (800fe84 <__mdiff+0x120>)
 800fdbe:	f240 2145 	movw	r1, #581	@ 0x245
 800fdc2:	e7e3      	b.n	800fd8c <__mdiff+0x28>
 800fdc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fdc8:	6926      	ldr	r6, [r4, #16]
 800fdca:	60c5      	str	r5, [r0, #12]
 800fdcc:	f109 0310 	add.w	r3, r9, #16
 800fdd0:	f109 0514 	add.w	r5, r9, #20
 800fdd4:	f104 0e14 	add.w	lr, r4, #20
 800fdd8:	f100 0b14 	add.w	fp, r0, #20
 800fddc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fde0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	46d9      	mov	r9, fp
 800fde8:	f04f 0c00 	mov.w	ip, #0
 800fdec:	9b01      	ldr	r3, [sp, #4]
 800fdee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fdf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	fa1f f38a 	uxth.w	r3, sl
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	b283      	uxth	r3, r0
 800fe00:	1acb      	subs	r3, r1, r3
 800fe02:	0c00      	lsrs	r0, r0, #16
 800fe04:	4463      	add	r3, ip
 800fe06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe14:	4576      	cmp	r6, lr
 800fe16:	f849 3b04 	str.w	r3, [r9], #4
 800fe1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe1e:	d8e5      	bhi.n	800fdec <__mdiff+0x88>
 800fe20:	1b33      	subs	r3, r6, r4
 800fe22:	3b15      	subs	r3, #21
 800fe24:	f023 0303 	bic.w	r3, r3, #3
 800fe28:	3415      	adds	r4, #21
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	42a6      	cmp	r6, r4
 800fe2e:	bf38      	it	cc
 800fe30:	2304      	movcc	r3, #4
 800fe32:	441d      	add	r5, r3
 800fe34:	445b      	add	r3, fp
 800fe36:	461e      	mov	r6, r3
 800fe38:	462c      	mov	r4, r5
 800fe3a:	4544      	cmp	r4, r8
 800fe3c:	d30e      	bcc.n	800fe5c <__mdiff+0xf8>
 800fe3e:	f108 0103 	add.w	r1, r8, #3
 800fe42:	1b49      	subs	r1, r1, r5
 800fe44:	f021 0103 	bic.w	r1, r1, #3
 800fe48:	3d03      	subs	r5, #3
 800fe4a:	45a8      	cmp	r8, r5
 800fe4c:	bf38      	it	cc
 800fe4e:	2100      	movcc	r1, #0
 800fe50:	440b      	add	r3, r1
 800fe52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe56:	b191      	cbz	r1, 800fe7e <__mdiff+0x11a>
 800fe58:	6117      	str	r7, [r2, #16]
 800fe5a:	e79d      	b.n	800fd98 <__mdiff+0x34>
 800fe5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fe60:	46e6      	mov	lr, ip
 800fe62:	0c08      	lsrs	r0, r1, #16
 800fe64:	fa1c fc81 	uxtah	ip, ip, r1
 800fe68:	4471      	add	r1, lr
 800fe6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fe6e:	b289      	uxth	r1, r1
 800fe70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fe74:	f846 1b04 	str.w	r1, [r6], #4
 800fe78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe7c:	e7dd      	b.n	800fe3a <__mdiff+0xd6>
 800fe7e:	3f01      	subs	r7, #1
 800fe80:	e7e7      	b.n	800fe52 <__mdiff+0xee>
 800fe82:	bf00      	nop
 800fe84:	08010848 	.word	0x08010848
 800fe88:	08010859 	.word	0x08010859

0800fe8c <__d2b>:
 800fe8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe90:	460f      	mov	r7, r1
 800fe92:	2101      	movs	r1, #1
 800fe94:	ec59 8b10 	vmov	r8, r9, d0
 800fe98:	4616      	mov	r6, r2
 800fe9a:	f7ff fcd5 	bl	800f848 <_Balloc>
 800fe9e:	4604      	mov	r4, r0
 800fea0:	b930      	cbnz	r0, 800feb0 <__d2b+0x24>
 800fea2:	4602      	mov	r2, r0
 800fea4:	4b23      	ldr	r3, [pc, #140]	@ (800ff34 <__d2b+0xa8>)
 800fea6:	4824      	ldr	r0, [pc, #144]	@ (800ff38 <__d2b+0xac>)
 800fea8:	f240 310f 	movw	r1, #783	@ 0x30f
 800feac:	f000 fafc 	bl	80104a8 <__assert_func>
 800feb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800feb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800feb8:	b10d      	cbz	r5, 800febe <__d2b+0x32>
 800feba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	f1b8 0300 	subs.w	r3, r8, #0
 800fec4:	d023      	beq.n	800ff0e <__d2b+0x82>
 800fec6:	4668      	mov	r0, sp
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	f7ff fd84 	bl	800f9d6 <__lo0bits>
 800fece:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fed2:	b1d0      	cbz	r0, 800ff0a <__d2b+0x7e>
 800fed4:	f1c0 0320 	rsb	r3, r0, #32
 800fed8:	fa02 f303 	lsl.w	r3, r2, r3
 800fedc:	430b      	orrs	r3, r1
 800fede:	40c2      	lsrs	r2, r0
 800fee0:	6163      	str	r3, [r4, #20]
 800fee2:	9201      	str	r2, [sp, #4]
 800fee4:	9b01      	ldr	r3, [sp, #4]
 800fee6:	61a3      	str	r3, [r4, #24]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	bf0c      	ite	eq
 800feec:	2201      	moveq	r2, #1
 800feee:	2202      	movne	r2, #2
 800fef0:	6122      	str	r2, [r4, #16]
 800fef2:	b1a5      	cbz	r5, 800ff1e <__d2b+0x92>
 800fef4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fef8:	4405      	add	r5, r0
 800fefa:	603d      	str	r5, [r7, #0]
 800fefc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ff00:	6030      	str	r0, [r6, #0]
 800ff02:	4620      	mov	r0, r4
 800ff04:	b003      	add	sp, #12
 800ff06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff0a:	6161      	str	r1, [r4, #20]
 800ff0c:	e7ea      	b.n	800fee4 <__d2b+0x58>
 800ff0e:	a801      	add	r0, sp, #4
 800ff10:	f7ff fd61 	bl	800f9d6 <__lo0bits>
 800ff14:	9b01      	ldr	r3, [sp, #4]
 800ff16:	6163      	str	r3, [r4, #20]
 800ff18:	3020      	adds	r0, #32
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	e7e8      	b.n	800fef0 <__d2b+0x64>
 800ff1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ff26:	6038      	str	r0, [r7, #0]
 800ff28:	6918      	ldr	r0, [r3, #16]
 800ff2a:	f7ff fd35 	bl	800f998 <__hi0bits>
 800ff2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff32:	e7e5      	b.n	800ff00 <__d2b+0x74>
 800ff34:	08010848 	.word	0x08010848
 800ff38:	08010859 	.word	0x08010859

0800ff3c <__sfputc_r>:
 800ff3c:	6893      	ldr	r3, [r2, #8]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	b410      	push	{r4}
 800ff44:	6093      	str	r3, [r2, #8]
 800ff46:	da08      	bge.n	800ff5a <__sfputc_r+0x1e>
 800ff48:	6994      	ldr	r4, [r2, #24]
 800ff4a:	42a3      	cmp	r3, r4
 800ff4c:	db01      	blt.n	800ff52 <__sfputc_r+0x16>
 800ff4e:	290a      	cmp	r1, #10
 800ff50:	d103      	bne.n	800ff5a <__sfputc_r+0x1e>
 800ff52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff56:	f7fe bbfa 	b.w	800e74e <__swbuf_r>
 800ff5a:	6813      	ldr	r3, [r2, #0]
 800ff5c:	1c58      	adds	r0, r3, #1
 800ff5e:	6010      	str	r0, [r2, #0]
 800ff60:	7019      	strb	r1, [r3, #0]
 800ff62:	4608      	mov	r0, r1
 800ff64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff68:	4770      	bx	lr

0800ff6a <__sfputs_r>:
 800ff6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	460f      	mov	r7, r1
 800ff70:	4614      	mov	r4, r2
 800ff72:	18d5      	adds	r5, r2, r3
 800ff74:	42ac      	cmp	r4, r5
 800ff76:	d101      	bne.n	800ff7c <__sfputs_r+0x12>
 800ff78:	2000      	movs	r0, #0
 800ff7a:	e007      	b.n	800ff8c <__sfputs_r+0x22>
 800ff7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff80:	463a      	mov	r2, r7
 800ff82:	4630      	mov	r0, r6
 800ff84:	f7ff ffda 	bl	800ff3c <__sfputc_r>
 800ff88:	1c43      	adds	r3, r0, #1
 800ff8a:	d1f3      	bne.n	800ff74 <__sfputs_r+0xa>
 800ff8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff90 <_vfiprintf_r>:
 800ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff94:	460d      	mov	r5, r1
 800ff96:	b09d      	sub	sp, #116	@ 0x74
 800ff98:	4614      	mov	r4, r2
 800ff9a:	4698      	mov	r8, r3
 800ff9c:	4606      	mov	r6, r0
 800ff9e:	b118      	cbz	r0, 800ffa8 <_vfiprintf_r+0x18>
 800ffa0:	6a03      	ldr	r3, [r0, #32]
 800ffa2:	b90b      	cbnz	r3, 800ffa8 <_vfiprintf_r+0x18>
 800ffa4:	f7fe fb40 	bl	800e628 <__sinit>
 800ffa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffaa:	07d9      	lsls	r1, r3, #31
 800ffac:	d405      	bmi.n	800ffba <_vfiprintf_r+0x2a>
 800ffae:	89ab      	ldrh	r3, [r5, #12]
 800ffb0:	059a      	lsls	r2, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_vfiprintf_r+0x2a>
 800ffb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffb6:	f7fe fcdc 	bl	800e972 <__retarget_lock_acquire_recursive>
 800ffba:	89ab      	ldrh	r3, [r5, #12]
 800ffbc:	071b      	lsls	r3, r3, #28
 800ffbe:	d501      	bpl.n	800ffc4 <_vfiprintf_r+0x34>
 800ffc0:	692b      	ldr	r3, [r5, #16]
 800ffc2:	b99b      	cbnz	r3, 800ffec <_vfiprintf_r+0x5c>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	f7fe fc00 	bl	800e7cc <__swsetup_r>
 800ffcc:	b170      	cbz	r0, 800ffec <_vfiprintf_r+0x5c>
 800ffce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffd0:	07dc      	lsls	r4, r3, #31
 800ffd2:	d504      	bpl.n	800ffde <_vfiprintf_r+0x4e>
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd8:	b01d      	add	sp, #116	@ 0x74
 800ffda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffde:	89ab      	ldrh	r3, [r5, #12]
 800ffe0:	0598      	lsls	r0, r3, #22
 800ffe2:	d4f7      	bmi.n	800ffd4 <_vfiprintf_r+0x44>
 800ffe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffe6:	f7fe fcc5 	bl	800e974 <__retarget_lock_release_recursive>
 800ffea:	e7f3      	b.n	800ffd4 <_vfiprintf_r+0x44>
 800ffec:	2300      	movs	r3, #0
 800ffee:	9309      	str	r3, [sp, #36]	@ 0x24
 800fff0:	2320      	movs	r3, #32
 800fff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fff6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fffa:	2330      	movs	r3, #48	@ 0x30
 800fffc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80101ac <_vfiprintf_r+0x21c>
 8010000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010004:	f04f 0901 	mov.w	r9, #1
 8010008:	4623      	mov	r3, r4
 801000a:	469a      	mov	sl, r3
 801000c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010010:	b10a      	cbz	r2, 8010016 <_vfiprintf_r+0x86>
 8010012:	2a25      	cmp	r2, #37	@ 0x25
 8010014:	d1f9      	bne.n	801000a <_vfiprintf_r+0x7a>
 8010016:	ebba 0b04 	subs.w	fp, sl, r4
 801001a:	d00b      	beq.n	8010034 <_vfiprintf_r+0xa4>
 801001c:	465b      	mov	r3, fp
 801001e:	4622      	mov	r2, r4
 8010020:	4629      	mov	r1, r5
 8010022:	4630      	mov	r0, r6
 8010024:	f7ff ffa1 	bl	800ff6a <__sfputs_r>
 8010028:	3001      	adds	r0, #1
 801002a:	f000 80a7 	beq.w	801017c <_vfiprintf_r+0x1ec>
 801002e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010030:	445a      	add	r2, fp
 8010032:	9209      	str	r2, [sp, #36]	@ 0x24
 8010034:	f89a 3000 	ldrb.w	r3, [sl]
 8010038:	2b00      	cmp	r3, #0
 801003a:	f000 809f 	beq.w	801017c <_vfiprintf_r+0x1ec>
 801003e:	2300      	movs	r3, #0
 8010040:	f04f 32ff 	mov.w	r2, #4294967295
 8010044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010048:	f10a 0a01 	add.w	sl, sl, #1
 801004c:	9304      	str	r3, [sp, #16]
 801004e:	9307      	str	r3, [sp, #28]
 8010050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010054:	931a      	str	r3, [sp, #104]	@ 0x68
 8010056:	4654      	mov	r4, sl
 8010058:	2205      	movs	r2, #5
 801005a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801005e:	4853      	ldr	r0, [pc, #332]	@ (80101ac <_vfiprintf_r+0x21c>)
 8010060:	f7f0 f88e 	bl	8000180 <memchr>
 8010064:	9a04      	ldr	r2, [sp, #16]
 8010066:	b9d8      	cbnz	r0, 80100a0 <_vfiprintf_r+0x110>
 8010068:	06d1      	lsls	r1, r2, #27
 801006a:	bf44      	itt	mi
 801006c:	2320      	movmi	r3, #32
 801006e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010072:	0713      	lsls	r3, r2, #28
 8010074:	bf44      	itt	mi
 8010076:	232b      	movmi	r3, #43	@ 0x2b
 8010078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801007c:	f89a 3000 	ldrb.w	r3, [sl]
 8010080:	2b2a      	cmp	r3, #42	@ 0x2a
 8010082:	d015      	beq.n	80100b0 <_vfiprintf_r+0x120>
 8010084:	9a07      	ldr	r2, [sp, #28]
 8010086:	4654      	mov	r4, sl
 8010088:	2000      	movs	r0, #0
 801008a:	f04f 0c0a 	mov.w	ip, #10
 801008e:	4621      	mov	r1, r4
 8010090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010094:	3b30      	subs	r3, #48	@ 0x30
 8010096:	2b09      	cmp	r3, #9
 8010098:	d94b      	bls.n	8010132 <_vfiprintf_r+0x1a2>
 801009a:	b1b0      	cbz	r0, 80100ca <_vfiprintf_r+0x13a>
 801009c:	9207      	str	r2, [sp, #28]
 801009e:	e014      	b.n	80100ca <_vfiprintf_r+0x13a>
 80100a0:	eba0 0308 	sub.w	r3, r0, r8
 80100a4:	fa09 f303 	lsl.w	r3, r9, r3
 80100a8:	4313      	orrs	r3, r2
 80100aa:	9304      	str	r3, [sp, #16]
 80100ac:	46a2      	mov	sl, r4
 80100ae:	e7d2      	b.n	8010056 <_vfiprintf_r+0xc6>
 80100b0:	9b03      	ldr	r3, [sp, #12]
 80100b2:	1d19      	adds	r1, r3, #4
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	9103      	str	r1, [sp, #12]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	bfbb      	ittet	lt
 80100bc:	425b      	neglt	r3, r3
 80100be:	f042 0202 	orrlt.w	r2, r2, #2
 80100c2:	9307      	strge	r3, [sp, #28]
 80100c4:	9307      	strlt	r3, [sp, #28]
 80100c6:	bfb8      	it	lt
 80100c8:	9204      	strlt	r2, [sp, #16]
 80100ca:	7823      	ldrb	r3, [r4, #0]
 80100cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80100ce:	d10a      	bne.n	80100e6 <_vfiprintf_r+0x156>
 80100d0:	7863      	ldrb	r3, [r4, #1]
 80100d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80100d4:	d132      	bne.n	801013c <_vfiprintf_r+0x1ac>
 80100d6:	9b03      	ldr	r3, [sp, #12]
 80100d8:	1d1a      	adds	r2, r3, #4
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	9203      	str	r2, [sp, #12]
 80100de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100e2:	3402      	adds	r4, #2
 80100e4:	9305      	str	r3, [sp, #20]
 80100e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80101bc <_vfiprintf_r+0x22c>
 80100ea:	7821      	ldrb	r1, [r4, #0]
 80100ec:	2203      	movs	r2, #3
 80100ee:	4650      	mov	r0, sl
 80100f0:	f7f0 f846 	bl	8000180 <memchr>
 80100f4:	b138      	cbz	r0, 8010106 <_vfiprintf_r+0x176>
 80100f6:	9b04      	ldr	r3, [sp, #16]
 80100f8:	eba0 000a 	sub.w	r0, r0, sl
 80100fc:	2240      	movs	r2, #64	@ 0x40
 80100fe:	4082      	lsls	r2, r0
 8010100:	4313      	orrs	r3, r2
 8010102:	3401      	adds	r4, #1
 8010104:	9304      	str	r3, [sp, #16]
 8010106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801010a:	4829      	ldr	r0, [pc, #164]	@ (80101b0 <_vfiprintf_r+0x220>)
 801010c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010110:	2206      	movs	r2, #6
 8010112:	f7f0 f835 	bl	8000180 <memchr>
 8010116:	2800      	cmp	r0, #0
 8010118:	d03f      	beq.n	801019a <_vfiprintf_r+0x20a>
 801011a:	4b26      	ldr	r3, [pc, #152]	@ (80101b4 <_vfiprintf_r+0x224>)
 801011c:	bb1b      	cbnz	r3, 8010166 <_vfiprintf_r+0x1d6>
 801011e:	9b03      	ldr	r3, [sp, #12]
 8010120:	3307      	adds	r3, #7
 8010122:	f023 0307 	bic.w	r3, r3, #7
 8010126:	3308      	adds	r3, #8
 8010128:	9303      	str	r3, [sp, #12]
 801012a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801012c:	443b      	add	r3, r7
 801012e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010130:	e76a      	b.n	8010008 <_vfiprintf_r+0x78>
 8010132:	fb0c 3202 	mla	r2, ip, r2, r3
 8010136:	460c      	mov	r4, r1
 8010138:	2001      	movs	r0, #1
 801013a:	e7a8      	b.n	801008e <_vfiprintf_r+0xfe>
 801013c:	2300      	movs	r3, #0
 801013e:	3401      	adds	r4, #1
 8010140:	9305      	str	r3, [sp, #20]
 8010142:	4619      	mov	r1, r3
 8010144:	f04f 0c0a 	mov.w	ip, #10
 8010148:	4620      	mov	r0, r4
 801014a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801014e:	3a30      	subs	r2, #48	@ 0x30
 8010150:	2a09      	cmp	r2, #9
 8010152:	d903      	bls.n	801015c <_vfiprintf_r+0x1cc>
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0c6      	beq.n	80100e6 <_vfiprintf_r+0x156>
 8010158:	9105      	str	r1, [sp, #20]
 801015a:	e7c4      	b.n	80100e6 <_vfiprintf_r+0x156>
 801015c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010160:	4604      	mov	r4, r0
 8010162:	2301      	movs	r3, #1
 8010164:	e7f0      	b.n	8010148 <_vfiprintf_r+0x1b8>
 8010166:	ab03      	add	r3, sp, #12
 8010168:	9300      	str	r3, [sp, #0]
 801016a:	462a      	mov	r2, r5
 801016c:	4b12      	ldr	r3, [pc, #72]	@ (80101b8 <_vfiprintf_r+0x228>)
 801016e:	a904      	add	r1, sp, #16
 8010170:	4630      	mov	r0, r6
 8010172:	f7fd fe17 	bl	800dda4 <_printf_float>
 8010176:	4607      	mov	r7, r0
 8010178:	1c78      	adds	r0, r7, #1
 801017a:	d1d6      	bne.n	801012a <_vfiprintf_r+0x19a>
 801017c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801017e:	07d9      	lsls	r1, r3, #31
 8010180:	d405      	bmi.n	801018e <_vfiprintf_r+0x1fe>
 8010182:	89ab      	ldrh	r3, [r5, #12]
 8010184:	059a      	lsls	r2, r3, #22
 8010186:	d402      	bmi.n	801018e <_vfiprintf_r+0x1fe>
 8010188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801018a:	f7fe fbf3 	bl	800e974 <__retarget_lock_release_recursive>
 801018e:	89ab      	ldrh	r3, [r5, #12]
 8010190:	065b      	lsls	r3, r3, #25
 8010192:	f53f af1f 	bmi.w	800ffd4 <_vfiprintf_r+0x44>
 8010196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010198:	e71e      	b.n	800ffd8 <_vfiprintf_r+0x48>
 801019a:	ab03      	add	r3, sp, #12
 801019c:	9300      	str	r3, [sp, #0]
 801019e:	462a      	mov	r2, r5
 80101a0:	4b05      	ldr	r3, [pc, #20]	@ (80101b8 <_vfiprintf_r+0x228>)
 80101a2:	a904      	add	r1, sp, #16
 80101a4:	4630      	mov	r0, r6
 80101a6:	f7fe f895 	bl	800e2d4 <_printf_i>
 80101aa:	e7e4      	b.n	8010176 <_vfiprintf_r+0x1e6>
 80101ac:	080108b2 	.word	0x080108b2
 80101b0:	080108bc 	.word	0x080108bc
 80101b4:	0800dda5 	.word	0x0800dda5
 80101b8:	0800ff6b 	.word	0x0800ff6b
 80101bc:	080108b8 	.word	0x080108b8

080101c0 <__sflush_r>:
 80101c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c8:	0716      	lsls	r6, r2, #28
 80101ca:	4605      	mov	r5, r0
 80101cc:	460c      	mov	r4, r1
 80101ce:	d454      	bmi.n	801027a <__sflush_r+0xba>
 80101d0:	684b      	ldr	r3, [r1, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	dc02      	bgt.n	80101dc <__sflush_r+0x1c>
 80101d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80101d8:	2b00      	cmp	r3, #0
 80101da:	dd48      	ble.n	801026e <__sflush_r+0xae>
 80101dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101de:	2e00      	cmp	r6, #0
 80101e0:	d045      	beq.n	801026e <__sflush_r+0xae>
 80101e2:	2300      	movs	r3, #0
 80101e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80101e8:	682f      	ldr	r7, [r5, #0]
 80101ea:	6a21      	ldr	r1, [r4, #32]
 80101ec:	602b      	str	r3, [r5, #0]
 80101ee:	d030      	beq.n	8010252 <__sflush_r+0x92>
 80101f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	0759      	lsls	r1, r3, #29
 80101f6:	d505      	bpl.n	8010204 <__sflush_r+0x44>
 80101f8:	6863      	ldr	r3, [r4, #4]
 80101fa:	1ad2      	subs	r2, r2, r3
 80101fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80101fe:	b10b      	cbz	r3, 8010204 <__sflush_r+0x44>
 8010200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010202:	1ad2      	subs	r2, r2, r3
 8010204:	2300      	movs	r3, #0
 8010206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010208:	6a21      	ldr	r1, [r4, #32]
 801020a:	4628      	mov	r0, r5
 801020c:	47b0      	blx	r6
 801020e:	1c43      	adds	r3, r0, #1
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	d106      	bne.n	8010222 <__sflush_r+0x62>
 8010214:	6829      	ldr	r1, [r5, #0]
 8010216:	291d      	cmp	r1, #29
 8010218:	d82b      	bhi.n	8010272 <__sflush_r+0xb2>
 801021a:	4a2a      	ldr	r2, [pc, #168]	@ (80102c4 <__sflush_r+0x104>)
 801021c:	40ca      	lsrs	r2, r1
 801021e:	07d6      	lsls	r6, r2, #31
 8010220:	d527      	bpl.n	8010272 <__sflush_r+0xb2>
 8010222:	2200      	movs	r2, #0
 8010224:	6062      	str	r2, [r4, #4]
 8010226:	04d9      	lsls	r1, r3, #19
 8010228:	6922      	ldr	r2, [r4, #16]
 801022a:	6022      	str	r2, [r4, #0]
 801022c:	d504      	bpl.n	8010238 <__sflush_r+0x78>
 801022e:	1c42      	adds	r2, r0, #1
 8010230:	d101      	bne.n	8010236 <__sflush_r+0x76>
 8010232:	682b      	ldr	r3, [r5, #0]
 8010234:	b903      	cbnz	r3, 8010238 <__sflush_r+0x78>
 8010236:	6560      	str	r0, [r4, #84]	@ 0x54
 8010238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801023a:	602f      	str	r7, [r5, #0]
 801023c:	b1b9      	cbz	r1, 801026e <__sflush_r+0xae>
 801023e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010242:	4299      	cmp	r1, r3
 8010244:	d002      	beq.n	801024c <__sflush_r+0x8c>
 8010246:	4628      	mov	r0, r5
 8010248:	f7ff f9fe 	bl	800f648 <_free_r>
 801024c:	2300      	movs	r3, #0
 801024e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010250:	e00d      	b.n	801026e <__sflush_r+0xae>
 8010252:	2301      	movs	r3, #1
 8010254:	4628      	mov	r0, r5
 8010256:	47b0      	blx	r6
 8010258:	4602      	mov	r2, r0
 801025a:	1c50      	adds	r0, r2, #1
 801025c:	d1c9      	bne.n	80101f2 <__sflush_r+0x32>
 801025e:	682b      	ldr	r3, [r5, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0c6      	beq.n	80101f2 <__sflush_r+0x32>
 8010264:	2b1d      	cmp	r3, #29
 8010266:	d001      	beq.n	801026c <__sflush_r+0xac>
 8010268:	2b16      	cmp	r3, #22
 801026a:	d11e      	bne.n	80102aa <__sflush_r+0xea>
 801026c:	602f      	str	r7, [r5, #0]
 801026e:	2000      	movs	r0, #0
 8010270:	e022      	b.n	80102b8 <__sflush_r+0xf8>
 8010272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010276:	b21b      	sxth	r3, r3
 8010278:	e01b      	b.n	80102b2 <__sflush_r+0xf2>
 801027a:	690f      	ldr	r7, [r1, #16]
 801027c:	2f00      	cmp	r7, #0
 801027e:	d0f6      	beq.n	801026e <__sflush_r+0xae>
 8010280:	0793      	lsls	r3, r2, #30
 8010282:	680e      	ldr	r6, [r1, #0]
 8010284:	bf08      	it	eq
 8010286:	694b      	ldreq	r3, [r1, #20]
 8010288:	600f      	str	r7, [r1, #0]
 801028a:	bf18      	it	ne
 801028c:	2300      	movne	r3, #0
 801028e:	eba6 0807 	sub.w	r8, r6, r7
 8010292:	608b      	str	r3, [r1, #8]
 8010294:	f1b8 0f00 	cmp.w	r8, #0
 8010298:	dde9      	ble.n	801026e <__sflush_r+0xae>
 801029a:	6a21      	ldr	r1, [r4, #32]
 801029c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801029e:	4643      	mov	r3, r8
 80102a0:	463a      	mov	r2, r7
 80102a2:	4628      	mov	r0, r5
 80102a4:	47b0      	blx	r6
 80102a6:	2800      	cmp	r0, #0
 80102a8:	dc08      	bgt.n	80102bc <__sflush_r+0xfc>
 80102aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102b2:	81a3      	strh	r3, [r4, #12]
 80102b4:	f04f 30ff 	mov.w	r0, #4294967295
 80102b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102bc:	4407      	add	r7, r0
 80102be:	eba8 0800 	sub.w	r8, r8, r0
 80102c2:	e7e7      	b.n	8010294 <__sflush_r+0xd4>
 80102c4:	20400001 	.word	0x20400001

080102c8 <_fflush_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	690b      	ldr	r3, [r1, #16]
 80102cc:	4605      	mov	r5, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	b913      	cbnz	r3, 80102d8 <_fflush_r+0x10>
 80102d2:	2500      	movs	r5, #0
 80102d4:	4628      	mov	r0, r5
 80102d6:	bd38      	pop	{r3, r4, r5, pc}
 80102d8:	b118      	cbz	r0, 80102e2 <_fflush_r+0x1a>
 80102da:	6a03      	ldr	r3, [r0, #32]
 80102dc:	b90b      	cbnz	r3, 80102e2 <_fflush_r+0x1a>
 80102de:	f7fe f9a3 	bl	800e628 <__sinit>
 80102e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d0f3      	beq.n	80102d2 <_fflush_r+0xa>
 80102ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80102ec:	07d0      	lsls	r0, r2, #31
 80102ee:	d404      	bmi.n	80102fa <_fflush_r+0x32>
 80102f0:	0599      	lsls	r1, r3, #22
 80102f2:	d402      	bmi.n	80102fa <_fflush_r+0x32>
 80102f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102f6:	f7fe fb3c 	bl	800e972 <__retarget_lock_acquire_recursive>
 80102fa:	4628      	mov	r0, r5
 80102fc:	4621      	mov	r1, r4
 80102fe:	f7ff ff5f 	bl	80101c0 <__sflush_r>
 8010302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010304:	07da      	lsls	r2, r3, #31
 8010306:	4605      	mov	r5, r0
 8010308:	d4e4      	bmi.n	80102d4 <_fflush_r+0xc>
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	059b      	lsls	r3, r3, #22
 801030e:	d4e1      	bmi.n	80102d4 <_fflush_r+0xc>
 8010310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010312:	f7fe fb2f 	bl	800e974 <__retarget_lock_release_recursive>
 8010316:	e7dd      	b.n	80102d4 <_fflush_r+0xc>

08010318 <__swhatbuf_r>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	460c      	mov	r4, r1
 801031c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010320:	2900      	cmp	r1, #0
 8010322:	b096      	sub	sp, #88	@ 0x58
 8010324:	4615      	mov	r5, r2
 8010326:	461e      	mov	r6, r3
 8010328:	da0d      	bge.n	8010346 <__swhatbuf_r+0x2e>
 801032a:	89a3      	ldrh	r3, [r4, #12]
 801032c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010330:	f04f 0100 	mov.w	r1, #0
 8010334:	bf14      	ite	ne
 8010336:	2340      	movne	r3, #64	@ 0x40
 8010338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801033c:	2000      	movs	r0, #0
 801033e:	6031      	str	r1, [r6, #0]
 8010340:	602b      	str	r3, [r5, #0]
 8010342:	b016      	add	sp, #88	@ 0x58
 8010344:	bd70      	pop	{r4, r5, r6, pc}
 8010346:	466a      	mov	r2, sp
 8010348:	f000 f87c 	bl	8010444 <_fstat_r>
 801034c:	2800      	cmp	r0, #0
 801034e:	dbec      	blt.n	801032a <__swhatbuf_r+0x12>
 8010350:	9901      	ldr	r1, [sp, #4]
 8010352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801035a:	4259      	negs	r1, r3
 801035c:	4159      	adcs	r1, r3
 801035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010362:	e7eb      	b.n	801033c <__swhatbuf_r+0x24>

08010364 <__smakebuf_r>:
 8010364:	898b      	ldrh	r3, [r1, #12]
 8010366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010368:	079d      	lsls	r5, r3, #30
 801036a:	4606      	mov	r6, r0
 801036c:	460c      	mov	r4, r1
 801036e:	d507      	bpl.n	8010380 <__smakebuf_r+0x1c>
 8010370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	6123      	str	r3, [r4, #16]
 8010378:	2301      	movs	r3, #1
 801037a:	6163      	str	r3, [r4, #20]
 801037c:	b003      	add	sp, #12
 801037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010380:	ab01      	add	r3, sp, #4
 8010382:	466a      	mov	r2, sp
 8010384:	f7ff ffc8 	bl	8010318 <__swhatbuf_r>
 8010388:	9f00      	ldr	r7, [sp, #0]
 801038a:	4605      	mov	r5, r0
 801038c:	4639      	mov	r1, r7
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff f9ce 	bl	800f730 <_malloc_r>
 8010394:	b948      	cbnz	r0, 80103aa <__smakebuf_r+0x46>
 8010396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801039a:	059a      	lsls	r2, r3, #22
 801039c:	d4ee      	bmi.n	801037c <__smakebuf_r+0x18>
 801039e:	f023 0303 	bic.w	r3, r3, #3
 80103a2:	f043 0302 	orr.w	r3, r3, #2
 80103a6:	81a3      	strh	r3, [r4, #12]
 80103a8:	e7e2      	b.n	8010370 <__smakebuf_r+0xc>
 80103aa:	89a3      	ldrh	r3, [r4, #12]
 80103ac:	6020      	str	r0, [r4, #0]
 80103ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	9b01      	ldr	r3, [sp, #4]
 80103b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80103ba:	b15b      	cbz	r3, 80103d4 <__smakebuf_r+0x70>
 80103bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103c0:	4630      	mov	r0, r6
 80103c2:	f000 f851 	bl	8010468 <_isatty_r>
 80103c6:	b128      	cbz	r0, 80103d4 <__smakebuf_r+0x70>
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	f023 0303 	bic.w	r3, r3, #3
 80103ce:	f043 0301 	orr.w	r3, r3, #1
 80103d2:	81a3      	strh	r3, [r4, #12]
 80103d4:	89a3      	ldrh	r3, [r4, #12]
 80103d6:	431d      	orrs	r5, r3
 80103d8:	81a5      	strh	r5, [r4, #12]
 80103da:	e7cf      	b.n	801037c <__smakebuf_r+0x18>

080103dc <_putc_r>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	460d      	mov	r5, r1
 80103e0:	4614      	mov	r4, r2
 80103e2:	4606      	mov	r6, r0
 80103e4:	b118      	cbz	r0, 80103ee <_putc_r+0x12>
 80103e6:	6a03      	ldr	r3, [r0, #32]
 80103e8:	b90b      	cbnz	r3, 80103ee <_putc_r+0x12>
 80103ea:	f7fe f91d 	bl	800e628 <__sinit>
 80103ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80103f0:	07d8      	lsls	r0, r3, #31
 80103f2:	d405      	bmi.n	8010400 <_putc_r+0x24>
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	0599      	lsls	r1, r3, #22
 80103f8:	d402      	bmi.n	8010400 <_putc_r+0x24>
 80103fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103fc:	f7fe fab9 	bl	800e972 <__retarget_lock_acquire_recursive>
 8010400:	68a3      	ldr	r3, [r4, #8]
 8010402:	3b01      	subs	r3, #1
 8010404:	2b00      	cmp	r3, #0
 8010406:	60a3      	str	r3, [r4, #8]
 8010408:	da05      	bge.n	8010416 <_putc_r+0x3a>
 801040a:	69a2      	ldr	r2, [r4, #24]
 801040c:	4293      	cmp	r3, r2
 801040e:	db12      	blt.n	8010436 <_putc_r+0x5a>
 8010410:	b2eb      	uxtb	r3, r5
 8010412:	2b0a      	cmp	r3, #10
 8010414:	d00f      	beq.n	8010436 <_putc_r+0x5a>
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	1c5a      	adds	r2, r3, #1
 801041a:	6022      	str	r2, [r4, #0]
 801041c:	701d      	strb	r5, [r3, #0]
 801041e:	b2ed      	uxtb	r5, r5
 8010420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010422:	07da      	lsls	r2, r3, #31
 8010424:	d405      	bmi.n	8010432 <_putc_r+0x56>
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	059b      	lsls	r3, r3, #22
 801042a:	d402      	bmi.n	8010432 <_putc_r+0x56>
 801042c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801042e:	f7fe faa1 	bl	800e974 <__retarget_lock_release_recursive>
 8010432:	4628      	mov	r0, r5
 8010434:	bd70      	pop	{r4, r5, r6, pc}
 8010436:	4629      	mov	r1, r5
 8010438:	4622      	mov	r2, r4
 801043a:	4630      	mov	r0, r6
 801043c:	f7fe f987 	bl	800e74e <__swbuf_r>
 8010440:	4605      	mov	r5, r0
 8010442:	e7ed      	b.n	8010420 <_putc_r+0x44>

08010444 <_fstat_r>:
 8010444:	b538      	push	{r3, r4, r5, lr}
 8010446:	4d07      	ldr	r5, [pc, #28]	@ (8010464 <_fstat_r+0x20>)
 8010448:	2300      	movs	r3, #0
 801044a:	4604      	mov	r4, r0
 801044c:	4608      	mov	r0, r1
 801044e:	4611      	mov	r1, r2
 8010450:	602b      	str	r3, [r5, #0]
 8010452:	f7f1 f9b5 	bl	80017c0 <_fstat>
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	d102      	bne.n	8010460 <_fstat_r+0x1c>
 801045a:	682b      	ldr	r3, [r5, #0]
 801045c:	b103      	cbz	r3, 8010460 <_fstat_r+0x1c>
 801045e:	6023      	str	r3, [r4, #0]
 8010460:	bd38      	pop	{r3, r4, r5, pc}
 8010462:	bf00      	nop
 8010464:	200021dc 	.word	0x200021dc

08010468 <_isatty_r>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	4d06      	ldr	r5, [pc, #24]	@ (8010484 <_isatty_r+0x1c>)
 801046c:	2300      	movs	r3, #0
 801046e:	4604      	mov	r4, r0
 8010470:	4608      	mov	r0, r1
 8010472:	602b      	str	r3, [r5, #0]
 8010474:	f7f1 f9b4 	bl	80017e0 <_isatty>
 8010478:	1c43      	adds	r3, r0, #1
 801047a:	d102      	bne.n	8010482 <_isatty_r+0x1a>
 801047c:	682b      	ldr	r3, [r5, #0]
 801047e:	b103      	cbz	r3, 8010482 <_isatty_r+0x1a>
 8010480:	6023      	str	r3, [r4, #0]
 8010482:	bd38      	pop	{r3, r4, r5, pc}
 8010484:	200021dc 	.word	0x200021dc

08010488 <_sbrk_r>:
 8010488:	b538      	push	{r3, r4, r5, lr}
 801048a:	4d06      	ldr	r5, [pc, #24]	@ (80104a4 <_sbrk_r+0x1c>)
 801048c:	2300      	movs	r3, #0
 801048e:	4604      	mov	r4, r0
 8010490:	4608      	mov	r0, r1
 8010492:	602b      	str	r3, [r5, #0]
 8010494:	f7f1 f9bc 	bl	8001810 <_sbrk>
 8010498:	1c43      	adds	r3, r0, #1
 801049a:	d102      	bne.n	80104a2 <_sbrk_r+0x1a>
 801049c:	682b      	ldr	r3, [r5, #0]
 801049e:	b103      	cbz	r3, 80104a2 <_sbrk_r+0x1a>
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
 80104a4:	200021dc 	.word	0x200021dc

080104a8 <__assert_func>:
 80104a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104aa:	4614      	mov	r4, r2
 80104ac:	461a      	mov	r2, r3
 80104ae:	4b09      	ldr	r3, [pc, #36]	@ (80104d4 <__assert_func+0x2c>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4605      	mov	r5, r0
 80104b4:	68d8      	ldr	r0, [r3, #12]
 80104b6:	b14c      	cbz	r4, 80104cc <__assert_func+0x24>
 80104b8:	4b07      	ldr	r3, [pc, #28]	@ (80104d8 <__assert_func+0x30>)
 80104ba:	9100      	str	r1, [sp, #0]
 80104bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104c0:	4906      	ldr	r1, [pc, #24]	@ (80104dc <__assert_func+0x34>)
 80104c2:	462b      	mov	r3, r5
 80104c4:	f000 f842 	bl	801054c <fiprintf>
 80104c8:	f000 f852 	bl	8010570 <abort>
 80104cc:	4b04      	ldr	r3, [pc, #16]	@ (80104e0 <__assert_func+0x38>)
 80104ce:	461c      	mov	r4, r3
 80104d0:	e7f3      	b.n	80104ba <__assert_func+0x12>
 80104d2:	bf00      	nop
 80104d4:	20000138 	.word	0x20000138
 80104d8:	080108cd 	.word	0x080108cd
 80104dc:	080108da 	.word	0x080108da
 80104e0:	08010908 	.word	0x08010908

080104e4 <_calloc_r>:
 80104e4:	b570      	push	{r4, r5, r6, lr}
 80104e6:	fba1 5402 	umull	r5, r4, r1, r2
 80104ea:	b934      	cbnz	r4, 80104fa <_calloc_r+0x16>
 80104ec:	4629      	mov	r1, r5
 80104ee:	f7ff f91f 	bl	800f730 <_malloc_r>
 80104f2:	4606      	mov	r6, r0
 80104f4:	b928      	cbnz	r0, 8010502 <_calloc_r+0x1e>
 80104f6:	4630      	mov	r0, r6
 80104f8:	bd70      	pop	{r4, r5, r6, pc}
 80104fa:	220c      	movs	r2, #12
 80104fc:	6002      	str	r2, [r0, #0]
 80104fe:	2600      	movs	r6, #0
 8010500:	e7f9      	b.n	80104f6 <_calloc_r+0x12>
 8010502:	462a      	mov	r2, r5
 8010504:	4621      	mov	r1, r4
 8010506:	f7fe f9b7 	bl	800e878 <memset>
 801050a:	e7f4      	b.n	80104f6 <_calloc_r+0x12>

0801050c <__ascii_mbtowc>:
 801050c:	b082      	sub	sp, #8
 801050e:	b901      	cbnz	r1, 8010512 <__ascii_mbtowc+0x6>
 8010510:	a901      	add	r1, sp, #4
 8010512:	b142      	cbz	r2, 8010526 <__ascii_mbtowc+0x1a>
 8010514:	b14b      	cbz	r3, 801052a <__ascii_mbtowc+0x1e>
 8010516:	7813      	ldrb	r3, [r2, #0]
 8010518:	600b      	str	r3, [r1, #0]
 801051a:	7812      	ldrb	r2, [r2, #0]
 801051c:	1e10      	subs	r0, r2, #0
 801051e:	bf18      	it	ne
 8010520:	2001      	movne	r0, #1
 8010522:	b002      	add	sp, #8
 8010524:	4770      	bx	lr
 8010526:	4610      	mov	r0, r2
 8010528:	e7fb      	b.n	8010522 <__ascii_mbtowc+0x16>
 801052a:	f06f 0001 	mvn.w	r0, #1
 801052e:	e7f8      	b.n	8010522 <__ascii_mbtowc+0x16>

08010530 <__ascii_wctomb>:
 8010530:	4603      	mov	r3, r0
 8010532:	4608      	mov	r0, r1
 8010534:	b141      	cbz	r1, 8010548 <__ascii_wctomb+0x18>
 8010536:	2aff      	cmp	r2, #255	@ 0xff
 8010538:	d904      	bls.n	8010544 <__ascii_wctomb+0x14>
 801053a:	228a      	movs	r2, #138	@ 0x8a
 801053c:	601a      	str	r2, [r3, #0]
 801053e:	f04f 30ff 	mov.w	r0, #4294967295
 8010542:	4770      	bx	lr
 8010544:	700a      	strb	r2, [r1, #0]
 8010546:	2001      	movs	r0, #1
 8010548:	4770      	bx	lr
	...

0801054c <fiprintf>:
 801054c:	b40e      	push	{r1, r2, r3}
 801054e:	b503      	push	{r0, r1, lr}
 8010550:	4601      	mov	r1, r0
 8010552:	ab03      	add	r3, sp, #12
 8010554:	4805      	ldr	r0, [pc, #20]	@ (801056c <fiprintf+0x20>)
 8010556:	f853 2b04 	ldr.w	r2, [r3], #4
 801055a:	6800      	ldr	r0, [r0, #0]
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	f7ff fd17 	bl	800ff90 <_vfiprintf_r>
 8010562:	b002      	add	sp, #8
 8010564:	f85d eb04 	ldr.w	lr, [sp], #4
 8010568:	b003      	add	sp, #12
 801056a:	4770      	bx	lr
 801056c:	20000138 	.word	0x20000138

08010570 <abort>:
 8010570:	b508      	push	{r3, lr}
 8010572:	2006      	movs	r0, #6
 8010574:	f000 f82c 	bl	80105d0 <raise>
 8010578:	2001      	movs	r0, #1
 801057a:	f7f1 f8d1 	bl	8001720 <_exit>

0801057e <_raise_r>:
 801057e:	291f      	cmp	r1, #31
 8010580:	b538      	push	{r3, r4, r5, lr}
 8010582:	4605      	mov	r5, r0
 8010584:	460c      	mov	r4, r1
 8010586:	d904      	bls.n	8010592 <_raise_r+0x14>
 8010588:	2316      	movs	r3, #22
 801058a:	6003      	str	r3, [r0, #0]
 801058c:	f04f 30ff 	mov.w	r0, #4294967295
 8010590:	bd38      	pop	{r3, r4, r5, pc}
 8010592:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010594:	b112      	cbz	r2, 801059c <_raise_r+0x1e>
 8010596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801059a:	b94b      	cbnz	r3, 80105b0 <_raise_r+0x32>
 801059c:	4628      	mov	r0, r5
 801059e:	f000 f831 	bl	8010604 <_getpid_r>
 80105a2:	4622      	mov	r2, r4
 80105a4:	4601      	mov	r1, r0
 80105a6:	4628      	mov	r0, r5
 80105a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105ac:	f000 b818 	b.w	80105e0 <_kill_r>
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d00a      	beq.n	80105ca <_raise_r+0x4c>
 80105b4:	1c59      	adds	r1, r3, #1
 80105b6:	d103      	bne.n	80105c0 <_raise_r+0x42>
 80105b8:	2316      	movs	r3, #22
 80105ba:	6003      	str	r3, [r0, #0]
 80105bc:	2001      	movs	r0, #1
 80105be:	e7e7      	b.n	8010590 <_raise_r+0x12>
 80105c0:	2100      	movs	r1, #0
 80105c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105c6:	4620      	mov	r0, r4
 80105c8:	4798      	blx	r3
 80105ca:	2000      	movs	r0, #0
 80105cc:	e7e0      	b.n	8010590 <_raise_r+0x12>
	...

080105d0 <raise>:
 80105d0:	4b02      	ldr	r3, [pc, #8]	@ (80105dc <raise+0xc>)
 80105d2:	4601      	mov	r1, r0
 80105d4:	6818      	ldr	r0, [r3, #0]
 80105d6:	f7ff bfd2 	b.w	801057e <_raise_r>
 80105da:	bf00      	nop
 80105dc:	20000138 	.word	0x20000138

080105e0 <_kill_r>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	4d07      	ldr	r5, [pc, #28]	@ (8010600 <_kill_r+0x20>)
 80105e4:	2300      	movs	r3, #0
 80105e6:	4604      	mov	r4, r0
 80105e8:	4608      	mov	r0, r1
 80105ea:	4611      	mov	r1, r2
 80105ec:	602b      	str	r3, [r5, #0]
 80105ee:	f7f1 f887 	bl	8001700 <_kill>
 80105f2:	1c43      	adds	r3, r0, #1
 80105f4:	d102      	bne.n	80105fc <_kill_r+0x1c>
 80105f6:	682b      	ldr	r3, [r5, #0]
 80105f8:	b103      	cbz	r3, 80105fc <_kill_r+0x1c>
 80105fa:	6023      	str	r3, [r4, #0]
 80105fc:	bd38      	pop	{r3, r4, r5, pc}
 80105fe:	bf00      	nop
 8010600:	200021dc 	.word	0x200021dc

08010604 <_getpid_r>:
 8010604:	f7f1 b874 	b.w	80016f0 <_getpid>

08010608 <_init>:
 8010608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060a:	bf00      	nop
 801060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801060e:	bc08      	pop	{r3}
 8010610:	469e      	mov	lr, r3
 8010612:	4770      	bx	lr

08010614 <_fini>:
 8010614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010616:	bf00      	nop
 8010618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801061a:	bc08      	pop	{r3}
 801061c:	469e      	mov	lr, r3
 801061e:	4770      	bx	lr
