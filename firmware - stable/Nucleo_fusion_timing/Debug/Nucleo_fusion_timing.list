
Nucleo_fusion_timing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190fc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034e0  08019240  08019240  0001a240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c720  0801c720  0001d720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c728  0801c728  0001d728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c72c  0801c72c  0001d72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000300  20000008  0801c730  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021d4  20000308  0801ca30  0001e308  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200024dc  0801ca30  0001e4dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001e308  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003851a  00000000  00000000  0001e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ef7  00000000  00000000  00056852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003370  00000000  00000000  0005c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000280a  00000000  00000000  0005fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002bedd  00000000  00000000  000622ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003638f  00000000  00000000  0008e1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010bf96  00000000  00000000  000c4536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d04cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f2b0  00000000  00000000  001d0510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  001df7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	08019224 	.word	0x08019224

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	08019224 	.word	0x08019224

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8000f30:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe0 <bmi2_sec_init+0xbc>)
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 ff75 	bl	8002e30 <null_ptr_check>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d140      	bne.n	8000fd4 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7a5b      	ldrb	r3, [r3, #9]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d108      	bne.n	8000f74 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f62:	f107 010e 	add.w	r1, r7, #14
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f83a 	bl	8000fe4 <bmi2_get_regs>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d12b      	bne.n	8000fd4 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f7c:	f107 010e 	add.w	r1, r7, #14
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f82d 	bl	8000fe4 <bmi2_get_regs>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11e      	bne.n	8000fd4 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d114      	bne.n	8000fca <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3328      	adds	r3, #40	@ 0x28
 8000fb0:	f107 0208 	add.w	r2, r7, #8
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	6018      	str	r0, [r3, #0]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f906 	bl	80011d0 <bmi2_soft_reset>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e004      	b.n	8000fd4 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 8000fca:	7bba      	ldrb	r2, [r7, #14]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 8000fd0:	23fd      	movs	r3, #253	@ 0xfd
 8000fd2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08019240 	.word	0x08019240

08000fe4 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b0a7      	sub	sp, #156	@ 0x9c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 ff17 	bl	8002e30 <null_ptr_check>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8001008:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800100c:	2b00      	cmp	r3, #0
 800100e:	d153      	bne.n	80010b8 <bmi2_get_regs+0xd4>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d050      	beq.n	80010b8 <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001024:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	7ad2      	ldrb	r2, [r2, #11]
 8001030:	4413      	add	r3, r2
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f107 0114 	add.w	r1, r7, #20
 800103c:	7bf8      	ldrb	r0, [r7, #15]
 800103e:	47a0      	blx	r4
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800104e:	2b01      	cmp	r3, #1
 8001050:	d108      	bne.n	8001064 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6852      	ldr	r2, [r2, #4]
 800105a:	4611      	mov	r1, r2
 800105c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001060:	4798      	blx	r3
 8001062:	e006      	b.n	8001072 <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6852      	ldr	r2, [r2, #4]
 800106c:	4611      	mov	r1, r2
 800106e:	2002      	movs	r0, #2
 8001070:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d119      	bne.n	80010b0 <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 800107c:	e012      	b.n	80010a4 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 800107e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	7ad2      	ldrb	r2, [r2, #11]
 8001086:	441a      	add	r2, r3
 8001088:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	440b      	add	r3, r1
 8001090:	3298      	adds	r2, #152	@ 0x98
 8001092:	443a      	add	r2, r7
 8001094:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001098:	701a      	strb	r2, [r3, #0]
                index++;
 800109a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800109e:	3301      	adds	r3, #1
 80010a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 80010a4:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80010a8:	89bb      	ldrh	r3, [r7, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3e7      	bcc.n	800107e <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 80010ae:	e006      	b.n	80010be <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 80010b0:	23fe      	movs	r3, #254	@ 0xfe
 80010b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 80010b6:	e002      	b.n	80010be <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80010b8:	23ff      	movs	r3, #255	@ 0xff
 80010ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 80010be:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	379c      	adds	r7, #156	@ 0x9c
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}

080010ca <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 80010ca:	b590      	push	{r4, r7, lr}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	4613      	mov	r3, r2
 80010da:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f001 fea7 	bl	8002e30 <null_ptr_check>
 80010e2:	4603      	mov	r3, r0
 80010e4:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 80010e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d168      	bne.n	80011c0 <bmi2_set_regs+0xf6>
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d065      	beq.n	80011c0 <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7a5b      	ldrb	r3, [r3, #9]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001102:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800110a:	2b01      	cmp	r3, #1
 800110c:	d129      	bne.n	8001162 <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 800110e:	2300      	movs	r3, #0
 8001110:	82bb      	strh	r3, [r7, #20]
 8001112:	e021      	b.n	8001158 <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001118:	8abb      	ldrh	r3, [r7, #20]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4413      	add	r3, r2
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	8abb      	ldrh	r3, [r7, #20]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	18d1      	adds	r1, r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	47a0      	blx	r4
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6852      	ldr	r2, [r2, #4]
 8001140:	4611      	mov	r1, r2
 8001142:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001146:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11b      	bne.n	800118a <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8001152:	8abb      	ldrh	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	82bb      	strh	r3, [r7, #20]
 8001158:	8aba      	ldrh	r2, [r7, #20]
 800115a:	89bb      	ldrh	r3, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3d9      	bcc.n	8001114 <bmi2_set_regs+0x4a>
 8001160:	e014      	b.n	800118c <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001166:	89ba      	ldrh	r2, [r7, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	7bf8      	ldrb	r0, [r7, #15]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	47a0      	blx	r4
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6852      	ldr	r2, [r2, #4]
 8001182:	4611      	mov	r1, r2
 8001184:	2002      	movs	r0, #2
 8001186:	4798      	blx	r3
 8001188:	e000      	b.n	800118c <bmi2_set_regs+0xc2>
                    break;
 800118a:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b7c      	cmp	r3, #124	@ 0x7c
 8001190:	d10e      	bne.n	80011b0 <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80011a6:	e003      	b.n	80011b0 <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 80011ba:	23fe      	movs	r3, #254	@ 0xfe
 80011bc:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 80011be:	e001      	b.n	80011c4 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80011c0:	23ff      	movs	r3, #255	@ 0xff
 80011c2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80011c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 80011d8:	23b6      	movs	r3, #182	@ 0xb6
 80011da:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 fe25 	bl	8002e30 <null_ptr_check>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d139      	bne.n	8001266 <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 80011f2:	f107 010e 	add.w	r1, r7, #14
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	207e      	movs	r0, #126	@ 0x7e
 80011fc:	f7ff ff65 	bl	80010ca <bmi2_set_regs>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6852      	ldr	r2, [r2, #4]
 800120c:	4611      	mov	r1, r2
 800120e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001212:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10c      	bne.n	800123e <bmi2_soft_reset+0x6e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7a5b      	ldrb	r3, [r3, #9]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 800122c:	f107 010d 	add.w	r1, r7, #13
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fed5 	bl	8000fe4 <bmi2_get_regs>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f85f 	bl	800130a <bmi2_write_config_file>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d106      	bne.n	8001266 <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	6039      	str	r1, [r7, #0]
 800127c:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f001 fdd4 	bl	8002e30 <null_ptr_check>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d134      	bne.n	80012fe <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8001294:	f107 010e 	add.w	r1, r7, #14
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	207c      	movs	r0, #124	@ 0x7c
 800129e:	f7ff fea1 	bl	8000fe4 <bmi2_get_regs>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d127      	bne.n	80012fe <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 80012ca:	f107 010e 	add.w	r1, r7, #14
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	207c      	movs	r0, #124	@ 0x7c
 80012d4:	f7ff fef9 	bl	80010ca <bmi2_set_regs>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 80012e4:	23f3      	movs	r3, #243	@ 0xf3
 80012e6:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d106      	bne.n	80012fe <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f001 fd8a 	bl	8002e30 <null_ptr_check>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d13b      	bne.n	80013a0 <bmi2_write_config_file+0x96>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800132e:	2b00      	cmp	r3, #0
 8001330:	d036      	beq.n	80013a0 <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	89db      	ldrh	r3, [r3, #14]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	89db      	ldrh	r3, [r3, #14]
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	89db      	ldrh	r3, [r3, #14]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d802      	bhi.n	800135a <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2202      	movs	r2, #2
 8001358:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fcab 	bl	8001cb6 <write_config_file>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d11c      	bne.n	80013a6 <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 800136c:	f107 030e 	add.w	r3, r7, #14
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fbae 	bl	8001ad4 <bmi2_get_internal_status>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	b2db      	uxtb	r3, r3
 8001384:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d108      	bne.n	80013a6 <bmi2_write_config_file+0x9c>
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d005      	beq.n	80013a6 <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 800139a:	23f7      	movs	r3, #247	@ 0xf7
 800139c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800139e:	e002      	b.n	80013a6 <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80013a0:	23ff      	movs	r3, #255	@ 0xff
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e000      	b.n	80013a8 <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 80013a6:	bf00      	nop
    }

    return rslt;
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <bmi2_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi2_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	460b      	mov	r3, r1
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 fd2e 	bl	8002e30 <null_ptr_check>
 80013d4:	4603      	mov	r3, r0
 80013d6:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 80013d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d117      	bne.n	8001410 <bmi2_sensor_enable+0x5c>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d014      	beq.n	8001410 <bmi2_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 80013e6:	f107 0210 	add.w	r2, r7, #16
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f001 fe5e 	bl	80030b0 <select_sensor>
 80013f4:	4603      	mov	r3, r0
 80013f6:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80013f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <bmi2_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 8001400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	f001 feae 	bl	8003166 <sensor_enable>
 800140a:	4603      	mov	r3, r0
 800140c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800140e:	e001      	b.n	8001414 <bmi2_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001410:	23ff      	movs	r3, #255	@ 0xff
 8001412:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001414:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	460b      	mov	r3, r1
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f001 fcfc 	bl	8002e30 <null_ptr_check>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 800143c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 8099 	bne.w	8001578 <bmi2_set_sensor_config+0x158>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8095 	beq.w	8001578 <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001454:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8001456:	2300      	movs	r3, #0
 8001458:	75bb      	strb	r3, [r7, #22]
 800145a:	e079      	b.n	8001550 <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 800145c:	7d7b      	ldrb	r3, [r7, #21]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff ff04 	bl	8001272 <bmi2_set_adv_power_save>
 800146a:	4603      	mov	r3, r0
 800146c:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 800146e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d165      	bne.n	8001542 <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 8001476:	7dba      	ldrb	r2, [r7, #22]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d857      	bhi.n	800153c <bmi2_set_sensor_config+0x11c>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <bmi2_set_sensor_config+0x74>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014dd 	.word	0x080014dd
 800149c:	080014fd 	.word	0x080014fd
 80014a0:	0800153d 	.word	0x0800153d
 80014a4:	0800153d 	.word	0x0800153d
 80014a8:	0800153d 	.word	0x0800153d
 80014ac:	0800153d 	.word	0x0800153d
 80014b0:	0800153d 	.word	0x0800153d
 80014b4:	0800153d 	.word	0x0800153d
 80014b8:	0800151d 	.word	0x0800151d
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 80014bc:	7dba      	ldrb	r2, [r7, #22]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	3304      	adds	r3, #4
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fbb0 	bl	8002c36 <set_accel_config>
 80014d6:	4603      	mov	r3, r0
 80014d8:	75fb      	strb	r3, [r7, #23]
                        break;
 80014da:	e032      	b.n	8001542 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80014dc:	7dba      	ldrb	r2, [r7, #22]
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	3304      	adds	r3, #4
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fc17 	bl	8002d24 <set_gyro_config>
 80014f6:	4603      	mov	r3, r0
 80014f8:	75fb      	strb	r3, [r7, #23]
                        break;
 80014fa:	e022      	b.n	8001542 <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 80014fc:	7dba      	ldrb	r2, [r7, #22]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fdc9 	bl	80020a8 <set_aux_config>
 8001516:	4603      	mov	r3, r0
 8001518:	75fb      	strb	r3, [r7, #23]
                        break;
 800151a:	e012      	b.n	8001542 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 800151c:	7dba      	ldrb	r2, [r7, #22]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	3304      	adds	r3, #4
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fde8 	bl	8002106 <set_gyro_user_gain_config>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
                        break;
 800153a:	e002      	b.n	8001542 <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 800153c:	23f8      	movs	r3, #248	@ 0xf8
 800153e:	75fb      	strb	r3, [r7, #23]
                        break;
 8001540:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 8001542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d107      	bne.n	800155a <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 800154a:	7dbb      	ldrb	r3, [r7, #22]
 800154c:	3301      	adds	r3, #1
 800154e:	75bb      	strb	r3, [r7, #22]
 8001550:	7dba      	ldrb	r2, [r7, #22]
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	429a      	cmp	r2, r3
 8001556:	d381      	bcc.n	800145c <bmi2_set_sensor_config+0x3c>
 8001558:	e000      	b.n	800155c <bmi2_set_sensor_config+0x13c>
            {
                break;
 800155a:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800155c:	7d7b      	ldrb	r3, [r7, #21]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d10d      	bne.n	800157e <bmi2_set_sensor_config+0x15e>
 8001562:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fe80 	bl	8001272 <bmi2_set_adv_power_save>
 8001572:	4603      	mov	r3, r0
 8001574:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001576:	e002      	b.n	800157e <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	75fb      	strb	r3, [r7, #23]
 800157c:	e000      	b.n	8001580 <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800157e:	bf00      	nop
    }

    return rslt;
 8001580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <bmi2_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi2_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	460b      	mov	r3, r1
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f001 fc46 	bl	8002e30 <null_ptr_check>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 80b0 	bne.w	8001712 <bmi2_get_sensor_config+0x186>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ac 	beq.w	8001712 <bmi2_get_sensor_config+0x186>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80015c0:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	75bb      	strb	r3, [r7, #22]
 80015c6:	e08f      	b.n	80016e8 <bmi2_get_sensor_config+0x15c>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 80015c8:	7dba      	ldrb	r2, [r7, #22]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d80a      	bhi.n	80015f4 <bmi2_get_sensor_config+0x68>
 80015de:	7dba      	ldrb	r2, [r7, #22]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d108      	bne.n	8001606 <bmi2_get_sensor_config+0x7a>
            {

                if (aps_stat == BMI2_ENABLE)
 80015f4:	7d7b      	ldrb	r3, [r7, #21]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <bmi2_get_sensor_config+0x7a>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fe38 	bl	8001272 <bmi2_set_adv_power_save>
 8001602:	4603      	mov	r3, r0
 8001604:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8001606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d165      	bne.n	80016da <bmi2_get_sensor_config+0x14e>
            {
                switch (sens_cfg[loop].type)
 800160e:	7dba      	ldrb	r2, [r7, #22]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	461a      	mov	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d857      	bhi.n	80016d4 <bmi2_get_sensor_config+0x148>
 8001624:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <bmi2_get_sensor_config+0xa0>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	08001655 	.word	0x08001655
 8001630:	08001675 	.word	0x08001675
 8001634:	08001695 	.word	0x08001695
 8001638:	080016d5 	.word	0x080016d5
 800163c:	080016d5 	.word	0x080016d5
 8001640:	080016d5 	.word	0x080016d5
 8001644:	080016d5 	.word	0x080016d5
 8001648:	080016d5 	.word	0x080016d5
 800164c:	080016d5 	.word	0x080016d5
 8001650:	080016b5 	.word	0x080016b5
                {
                    /* Get accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001654:	7dba      	ldrb	r2, [r7, #22]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	3304      	adds	r3, #4
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 ff79 	bl	8002560 <get_accel_config>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]
                        break;
 8001672:	e032      	b.n	80016da <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8001674:	7dba      	ldrb	r2, [r7, #22]
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	1a9b      	subs	r3, r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	3304      	adds	r3, #4
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 ffab 	bl	80025e4 <get_gyro_config>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
                        break;
 8001692:	e022      	b.n	80016da <bmi2_get_sensor_config+0x14e>

                    /* Get auxiliary configuration */
                    case BMI2_AUX:
                        rslt = get_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8001694:	7dba      	ldrb	r2, [r7, #22]
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 ffed 	bl	8002688 <get_aux_config>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]
                        break;
 80016b2:	e012      	b.n	80016da <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = get_gyro_gain_update_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 80016b4:	7dba      	ldrb	r2, [r7, #22]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	3304      	adds	r3, #4
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f813 	bl	80026f4 <get_gyro_gain_update_config>
 80016ce:	4603      	mov	r3, r0
 80016d0:	75fb      	strb	r3, [r7, #23]
                        break;
 80016d2:	e002      	b.n	80016da <bmi2_get_sensor_config+0x14e>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80016d4:	23f8      	movs	r3, #248	@ 0xf8
 80016d6:	75fb      	strb	r3, [r7, #23]
                        break;
 80016d8:	bf00      	nop
                }
            }

            /* Return error if any of the get configurations fail */
            if (rslt != BMI2_OK)
 80016da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <bmi2_get_sensor_config+0x168>
        for (loop = 0; loop < n_sens; loop++)
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	3301      	adds	r3, #1
 80016e6:	75bb      	strb	r3, [r7, #22]
 80016e8:	7dba      	ldrb	r2, [r7, #22]
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f4ff af6b 	bcc.w	80015c8 <bmi2_get_sensor_config+0x3c>
 80016f2:	e000      	b.n	80016f6 <bmi2_get_sensor_config+0x16a>
            {
                break;
 80016f4:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10d      	bne.n	8001718 <bmi2_get_sensor_config+0x18c>
 80016fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <bmi2_get_sensor_config+0x18c>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fdb3 	bl	8001272 <bmi2_set_adv_power_save>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001710:	e002      	b.n	8001718 <bmi2_get_sensor_config+0x18c>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001712:	23ff      	movs	r3, #255	@ 0xff
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	e000      	b.n	800171a <bmi2_get_sensor_config+0x18e>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001718:	bf00      	nop
    }

    return rslt;
 800171a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop

08001728 <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	460b      	mov	r3, r1
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f001 fb78 	bl	8002e30 <null_ptr_check>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8001744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d15c      	bne.n	8001806 <bmi2_get_feature_data+0xde>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d059      	beq.n	8001806 <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001758:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 800175a:	2300      	movs	r3, #0
 800175c:	75bb      	strb	r3, [r7, #22]
 800175e:	e04b      	b.n	80017f8 <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 8001760:	7dbb      	ldrb	r3, [r7, #22]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d908      	bls.n	8001780 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 800176e:	7d7b      	ldrb	r3, [r7, #21]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fd7b 	bl	8001272 <bmi2_set_adv_power_save>
 800177c:	4603      	mov	r3, r0
 800177e:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8001780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d127      	bne.n	80017d8 <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 8001788:	7dbb      	ldrb	r3, [r7, #22]
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d00d      	beq.n	80017b2 <bmi2_get_feature_data+0x8a>
 8001796:	2b29      	cmp	r3, #41	@ 0x29
 8001798:	d117      	bne.n	80017ca <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 800179a:	7dbb      	ldrb	r3, [r7, #22]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	3304      	adds	r3, #4
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fbfc 	bl	8002fa4 <get_gyro_cross_sense>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75fb      	strb	r3, [r7, #23]
                        break;
 80017b0:	e00e      	b.n	80017d0 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 80017b2:	7dbb      	ldrb	r3, [r7, #22]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	3304      	adds	r3, #4
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fb55 	bl	8002e6e <get_gyro_gain_update_status>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]
                        break;
 80017c8:	e002      	b.n	80017d0 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80017ca:	23f8      	movs	r3, #248	@ 0xf8
 80017cc:	75fb      	strb	r3, [r7, #23]
                        break;
 80017ce:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 80017d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d114      	bne.n	8001802 <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80017d8:	7d7b      	ldrb	r3, [r7, #21]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d109      	bne.n	80017f2 <bmi2_get_feature_data+0xca>
 80017de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fd42 	bl	8001272 <bmi2_set_adv_power_save>
 80017ee:	4603      	mov	r3, r0
 80017f0:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
 80017f4:	3301      	adds	r3, #1
 80017f6:	75bb      	strb	r3, [r7, #22]
 80017f8:	7dba      	ldrb	r2, [r7, #22]
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3af      	bcc.n	8001760 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8001800:	e003      	b.n	800180a <bmi2_get_feature_data+0xe2>
                    break;
 8001802:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8001804:	e001      	b.n	800180a <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001806:	23ff      	movs	r3, #255	@ 0xff
 8001808:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800180a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <bmi2_get_sensor_data>:
/*!
 * @brief This API gets the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_get_sensor_data(struct bmi2_sens_data *data, struct bmi2_dev *dev)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b08a      	sub	sp, #40	@ 0x28
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]

    /* Array to hold register sensor data */
    uint8_t sensor_data[BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES];

    /* Null-pointer check */
    if (data != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d018      	beq.n	8001858 <bmi2_get_sensor_data+0x42>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, sensor_data, BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES, dev);
 8001826:	f107 010c 	add.w	r1, r7, #12
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2218      	movs	r2, #24
 800182e:	2003      	movs	r0, #3
 8001830:	f7ff fbd8 	bl	8000fe4 <bmi2_get_regs>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI2_OK)
 800183a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <bmi2_get_sensor_data+0x48>
        {
            rslt = bmi2_parse_sensor_data(sensor_data, data, dev);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f80d 	bl	800186a <bmi2_parse_sensor_data>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001856:	e002      	b.n	800185e <bmi2_get_sensor_data+0x48>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800185e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001862:	4618      	mov	r0, r3
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <bmi2_parse_sensor_data>:
/*!
 * @brief This API parses the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_parse_sensor_data(const uint8_t *sensor_data, struct bmi2_sens_data *data, const struct bmi2_dev *dev)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b088      	sub	sp, #32
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variables to define loop */
    uint8_t count = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	77bb      	strb	r3, [r7, #30]

    uint8_t index = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	777b      	strb	r3, [r7, #29]

    uint32_t sensor_time_byte3 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
    uint16_t sensor_time_byte2 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	82fb      	strh	r3, [r7, #22]
    uint8_t sensor_time_byte1 = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f001 fad0 	bl	8002e30 <null_ptr_check>
 8001890:	4603      	mov	r3, r0
 8001892:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMI2_OK) && (data != NULL))
 8001894:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d156      	bne.n	800194a <bmi2_parse_sensor_data+0xe0>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d053      	beq.n	800194a <bmi2_parse_sensor_data+0xe0>
    {
        /* Update auxiliary sensor data length */
        index = BMI2_AUX_START_INDEX;
 80018a2:	2301      	movs	r3, #1
 80018a4:	777b      	strb	r3, [r7, #29]

        /* Get the 8 bytes of auxiliary data */
        do
        {
            *(data->aux_data + count++) = (sensor_data[index++]);
 80018a6:	7f7b      	ldrb	r3, [r7, #29]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	777a      	strb	r2, [r7, #29]
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	441a      	add	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f103 0118 	add.w	r1, r3, #24
 80018b8:	7fbb      	ldrb	r3, [r7, #30]
 80018ba:	1c58      	adds	r0, r3, #1
 80018bc:	77b8      	strb	r0, [r7, #30]
 80018be:	440b      	add	r3, r1
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	701a      	strb	r2, [r3, #0]
        } while (count < BMI2_AUX_NUM_BYTES);
 80018c4:	7fbb      	ldrb	r3, [r7, #30]
 80018c6:	2b07      	cmp	r3, #7
 80018c8:	d9ed      	bls.n	80018a6 <bmi2_parse_sensor_data+0x3c>

        /* Update accelerometer sensor data length */
        index = BMI2_ACC_START_INDEX;
 80018ca:	2309      	movs	r3, #9
 80018cc:	777b      	strb	r3, [r7, #29]

        /* Get accelerometer data from the register */
        get_acc_gyr_data(&data->acc, &sensor_data[index]);
 80018ce:	68b8      	ldr	r0, [r7, #8]
 80018d0:	7f7b      	ldrb	r3, [r7, #29]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f001 f836 	bl	8002948 <get_acc_gyr_data>

        /* Get the re-mapped accelerometer data */
        get_remapped_data(&data->acc, dev);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f895 	bl	8002a10 <get_remapped_data>

        /* Update gyroscope sensor data length */
        index = BMI2_GYR_START_INDEX;
 80018e6:	230f      	movs	r3, #15
 80018e8:	777b      	strb	r3, [r7, #29]

        /* Get gyroscope data from the register */
        get_acc_gyr_data(&data->gyr, &sensor_data[index]);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f103 000c 	add.w	r0, r3, #12
 80018f0:	7f7b      	ldrb	r3, [r7, #29]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 f826 	bl	8002948 <get_acc_gyr_data>

        /* Get the compensated gyroscope data */
        comp_gyro_cross_axis_sensitivity(&data->gyr, dev);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	330c      	adds	r3, #12
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f001 f937 	bl	8002b76 <comp_gyro_cross_axis_sensitivity>

        /* Get the re-mapped gyroscope data */
        get_remapped_data(&data->gyr, dev);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	330c      	adds	r3, #12
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f87e 	bl	8002a10 <get_remapped_data>

        sensor_time_byte3 = sensor_data[BMI2_PARSE_SENSOR_TIME_MSB_BYTE] << 16;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3317      	adds	r3, #23
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	61bb      	str	r3, [r7, #24]
        sensor_time_byte2 = sensor_data[BMI2_PARSE_SENSOR_TIME_XLSB_BYTE] << 8;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3316      	adds	r3, #22
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	82fb      	strh	r3, [r7, #22]
        sensor_time_byte1 = sensor_data[BMI2_PARSE_SENSOR_TIME_LSB_BYTE];
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3315      	adds	r3, #21
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	757b      	strb	r3, [r7, #21]

        data->sens_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
 8001930:	8afa      	ldrh	r2, [r7, #22]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	431a      	orrs	r2, r3
 8001936:	7d7b      	ldrb	r3, [r7, #21]
 8001938:	431a      	orrs	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	621a      	str	r2, [r3, #32]

        /* Store status register value in structure */
        data->status = sensor_data[BMI2_STATUS_INDEX];
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001948:	e001      	b.n	800194e <bmi2_parse_sensor_data+0xe4>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800194a:	23ff      	movs	r3, #255	@ 0xff
 800194c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800194e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f001 fa63 	bl	8002e30 <null_ptr_check>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10b      	bne.n	800198e <bmi2_get_status+0x34>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	2003      	movs	r0, #3
 8001984:	f7ff fb2e 	bl	8000fe4 <bmi2_get_regs>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800198e:	23ff      	movs	r3, #255	@ 0xff
 8001990:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <bmi2_map_data_int>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi2_map_data_int(uint8_t data_int, enum bmi2_hw_int_pin int_pin, struct bmi2_dev *dev)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	603a      	str	r2, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	460b      	mov	r3, r1
 80019ae:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to mask interrupt pin 1 - lower nibble */
    uint8_t int1_mask = data_int;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	73bb      	strb	r3, [r7, #14]

    /* Variable to mask interrupt pin 2 - higher nibble */
    uint8_t int2_mask = (uint8_t)(data_int << 4);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	737b      	strb	r3, [r7, #13]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	733b      	strb	r3, [r7, #12]

    /* Read interrupt map1 and map2 and register */
    rslt = bmi2_get_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 80019be:	f107 010c 	add.w	r1, r7, #12
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	2058      	movs	r0, #88	@ 0x58
 80019c8:	f7ff fb0c 	bl	8000fe4 <bmi2_get_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d141      	bne.n	8001a5c <bmi2_map_data_int+0xbc>
    {
        if (int_pin < BMI2_INT_PIN_MAX)
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d83c      	bhi.n	8001a58 <bmi2_map_data_int+0xb8>
        {
            switch (int_pin)
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d82e      	bhi.n	8001a42 <bmi2_map_data_int+0xa2>
 80019e4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ec <bmi2_map_data_int+0x4c>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a19 	.word	0x08001a19
 80019f4:	08001a25 	.word	0x08001a25
 80019f8:	08001a31 	.word	0x08001a31
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data &= ~(int1_mask | int2_mask);
 80019fc:	7bba      	ldrb	r2, [r7, #14]
 80019fe:	7b7b      	ldrb	r3, [r7, #13]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	7b3b      	ldrb	r3, [r7, #12]
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	733b      	strb	r3, [r7, #12]
                    break;
 8001a16:	e015      	b.n	8001a44 <bmi2_map_data_int+0xa4>
                case BMI2_INT1:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 1
                     */
                    reg_data |= int1_mask;
 8001a18:	7b3a      	ldrb	r2, [r7, #12]
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	733b      	strb	r3, [r7, #12]
                    break;
 8001a22:	e00f      	b.n	8001a44 <bmi2_map_data_int+0xa4>
                case BMI2_INT2:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 2
                     */
                    reg_data |= int2_mask;
 8001a24:	7b3a      	ldrb	r2, [r7, #12]
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	733b      	strb	r3, [r7, #12]
                    break;
 8001a2e:	e009      	b.n	8001a44 <bmi2_map_data_int+0xa4>
                case BMI2_INT_BOTH:

                    /* Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data |= (int1_mask | int2_mask);
 8001a30:	7bba      	ldrb	r2, [r7, #14]
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	733b      	strb	r3, [r7, #12]
                    break;
 8001a40:	e000      	b.n	8001a44 <bmi2_map_data_int+0xa4>
                default:
                    break;
 8001a42:	bf00      	nop
            }

            /* Set the interrupts in the map register */
            rslt = bmi2_set_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 8001a44:	f107 010c 	add.w	r1, r7, #12
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2058      	movs	r0, #88	@ 0x58
 8001a4e:	f7ff fb3c 	bl	80010ca <bmi2_set_regs>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e001      	b.n	8001a5c <bmi2_map_data_int+0xbc>
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 8001a58:	23f4      	movs	r3, #244	@ 0xf4
 8001a5a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d020      	beq.n	8001ac4 <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f001 f9d4 	bl	8002e30 <null_ptr_check>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8001a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d114      	bne.n	8001abe <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 8001a94:	2329      	movs	r3, #41	@ 0x29
 8001a96:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fe41 	bl	8001728 <bmi2_get_feature_data>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8001aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 8001ab2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001abc:	e004      	b.n	8001ac8 <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8001abe:	23ff      	movs	r3, #255	@ 0xff
 8001ac0:	77fb      	strb	r3, [r7, #31]
 8001ac2:	e001      	b.n	8001ac8 <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8001ac4:	23f8      	movs	r3, #248	@ 0xf8
 8001ac6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001ac8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f001 f9a6 	bl	8002e30 <null_ptr_check>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d113      	bne.n	8001b18 <bmi2_get_internal_status+0x44>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d010      	beq.n	8001b18 <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	4611      	mov	r1, r2
 8001b00:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001b04:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	2021      	movs	r0, #33	@ 0x21
 8001b0e:	f7ff fa69 	bl	8000fe4 <bmi2_get_regs>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e001      	b.n	8001b1c <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001b18:	23ff      	movs	r3, #255	@ 0xff
 8001b1a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 8001b36:	2310      	movs	r3, #16
 8001b38:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 8001b3e:	2330      	movs	r3, #48	@ 0x30
 8001b40:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <bmi2_get_feat_config+0x2a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 8001b52:	23ff      	movs	r3, #255	@ 0xff
 8001b54:	75fb      	strb	r3, [r7, #23]
 8001b56:	e073      	b.n	8001c40 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e1a      	ldrb	r2, [r3, #24]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d96c      	bls.n	8001c3c <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 8001b62:	f107 010f 	add.w	r1, r7, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	202f      	movs	r0, #47	@ 0x2f
 8001b6c:	f7ff faad 	bl	80010ca <bmi2_set_regs>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d152      	bne.n	8001c22 <bmi2_get_feat_config+0xfa>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	89db      	ldrh	r3, [r3, #14]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d84e      	bhi.n	8001c22 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	89db      	ldrh	r3, [r3, #14]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d041      	beq.n	8001c16 <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	89db      	ldrh	r3, [r3, #14]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8001b9e:	e03a      	b.n	8001c16 <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8001ba0:	7dbb      	ldrb	r3, [r7, #22]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	89db      	ldrh	r3, [r3, #14]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d31d      	bcc.n	8001be8 <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	18d1      	adds	r1, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	89da      	ldrh	r2, [r3, #14]
 8001bb6:	7d38      	ldrb	r0, [r7, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f7ff fa13 	bl	8000fe4 <bmi2_get_regs>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	89db      	ldrh	r3, [r3, #14]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	4413      	add	r3, r2
 8001bcc:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	89db      	ldrh	r3, [r3, #14]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	7d3b      	ldrb	r3, [r7, #20]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	89db      	ldrh	r3, [r3, #14]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7d7b      	ldrb	r3, [r7, #21]
 8001be2:	4413      	add	r3, r2
 8001be4:	757b      	strb	r3, [r7, #21]
 8001be6:	e00e      	b.n	8001c06 <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	18d1      	adds	r1, r2, r3
 8001bee:	7dbb      	ldrb	r3, [r7, #22]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	7d38      	ldrb	r0, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f7ff f9f5 	bl	8000fe4 <bmi2_get_regs>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 8001bfe:	7d7a      	ldrb	r2, [r7, #21]
 8001c00:	7dbb      	ldrb	r3, [r7, #22]
 8001c02:	4413      	add	r3, r2
 8001c04:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 8001c06:	7d7b      	ldrb	r3, [r7, #21]
 8001c08:	f1c3 0310 	rsb	r3, r3, #16
 8001c0c:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 8001c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1c1      	bne.n	8001ba0 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001c1c:	e010      	b.n	8001c40 <bmi2_get_feat_config+0x118>
                    {
                        break;
 8001c1e:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001c20:	e00e      	b.n	8001c40 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 8001c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	2030      	movs	r0, #48	@ 0x30
 8001c32:	f7ff f9d7 	bl	8000fe4 <bmi2_get_regs>
 8001c36:	4603      	mov	r3, r0
 8001c38:	75fb      	strb	r3, [r7, #23]
 8001c3a:	e001      	b.n	8001c40 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 8001c3c:	23f6      	movs	r3, #246	@ 0xf6
 8001c3e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	460b      	mov	r3, r1
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 8001c62:	e01c      	b.n	8001c9e <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a19      	ldr	r1, [r3, #32]
 8001c68:	7dfa      	ldrb	r2, [r7, #23]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	7afa      	ldrb	r2, [r7, #11]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d10e      	bne.n	8001c98 <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a19      	ldr	r1, [r3, #32]
 8001c7e:	7dfa      	ldrb	r2, [r7, #23]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	18ca      	adds	r2, r1, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8811      	ldrh	r1, [r2, #0]
 8001c8c:	7892      	ldrb	r2, [r2, #2]
 8001c8e:	8019      	strh	r1, [r3, #0]
 8001c90:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75bb      	strb	r3, [r7, #22]
            break;
 8001c96:	e007      	b.n	8001ca8 <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7e5b      	ldrb	r3, [r3, #25]
 8001ca2:	7dfa      	ldrb	r2, [r7, #23]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3dd      	bcc.n	8001c64 <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8001ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001cc8:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	89da      	ldrh	r2, [r3, #14]
 8001cce:	8a7b      	ldrh	r3, [r7, #18]
 8001cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cd4:	fb01 f202 	mul.w	r2, r1, r2
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fac2 	bl	8001272 <bmi2_set_adv_power_save>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8088 	bne.w	8001e0c <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f000 f88a 	bl	8001e18 <set_config_load>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8001d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d17d      	bne.n	8001e0c <write_config_file+0x156>
        {
            if (!remain)
 8001d10:	7c7b      	ldrb	r3, [r7, #17]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11c      	bne.n	8001d50 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001d16:	2300      	movs	r3, #0
 8001d18:	82bb      	strh	r3, [r7, #20]
 8001d1a:	e010      	b.n	8001d3e <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	8abb      	ldrh	r3, [r7, #20]
 8001d22:	18d0      	adds	r0, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	89da      	ldrh	r2, [r3, #14]
 8001d28:	8ab9      	ldrh	r1, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f000 f8a6 	bl	8001e7c <upload_file>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	89da      	ldrh	r2, [r3, #14]
 8001d38:	8abb      	ldrh	r3, [r7, #20]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	82bb      	strh	r3, [r7, #20]
 8001d3e:	8aba      	ldrh	r2, [r7, #20]
 8001d40:	8a7b      	ldrh	r3, [r7, #18]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d24e      	bcs.n	8001de4 <write_config_file+0x12e>
 8001d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0e6      	beq.n	8001d1c <write_config_file+0x66>
 8001d4e:	e049      	b.n	8001de4 <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8001d50:	7c7b      	ldrb	r3, [r7, #17]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	8a7a      	ldrh	r2, [r7, #18]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	82bb      	strh	r3, [r7, #20]
 8001d5e:	e010      	b.n	8001d82 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	8abb      	ldrh	r3, [r7, #20]
 8001d66:	18d0      	adds	r0, r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	89da      	ldrh	r2, [r3, #14]
 8001d6c:	8ab9      	ldrh	r1, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f000 f884 	bl	8001e7c <upload_file>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	89da      	ldrh	r2, [r3, #14]
 8001d7c:	8abb      	ldrh	r3, [r7, #20]
 8001d7e:	4413      	add	r3, r2
 8001d80:	82bb      	strh	r3, [r7, #20]
 8001d82:	8aba      	ldrh	r2, [r7, #20]
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d203      	bcs.n	8001d92 <write_config_file+0xdc>
 8001d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0e6      	beq.n	8001d60 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 8001d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d124      	bne.n	8001de4 <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	89db      	ldrh	r3, [r3, #14]
 8001d9e:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 8001da6:	89fb      	ldrh	r3, [r7, #14]
 8001da8:	82bb      	strh	r3, [r7, #20]
 8001daa:	e010      	b.n	8001dce <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	8abb      	ldrh	r3, [r7, #20]
 8001db2:	18d0      	adds	r0, r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	89da      	ldrh	r2, [r3, #14]
 8001db8:	8ab9      	ldrh	r1, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f000 f85e 	bl	8001e7c <upload_file>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	89da      	ldrh	r2, [r3, #14]
 8001dc8:	8abb      	ldrh	r3, [r7, #20]
 8001dca:	4413      	add	r3, r2
 8001dcc:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 8001dce:	8aba      	ldrh	r2, [r7, #20]
 8001dd0:	8a7b      	ldrh	r3, [r7, #18]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d203      	bcs.n	8001dde <write_config_file+0x128>
 8001dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0e6      	beq.n	8001dac <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	89ba      	ldrh	r2, [r7, #12]
 8001de2:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 8001de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10f      	bne.n	8001e0c <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f812 	bl	8001e18 <set_config_load>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 8001df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff fa35 	bl	8001272 <bmi2_set_adv_power_save>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8001e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001e28:	f107 010e 	add.w	r1, r7, #14
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2059      	movs	r0, #89	@ 0x59
 8001e32:	f7ff f8d7 	bl	8000fe4 <bmi2_get_regs>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8001e42:	7bbb      	ldrb	r3, [r7, #14]
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	b25a      	sxtb	r2, r3
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001e5e:	f107 010e 	add.w	r1, r7, #14
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	2059      	movs	r0, #89	@ 0x59
 8001e68:	f7ff f92f 	bl	80010ca <bmi2_set_regs>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 8001e8e:	2300      	movs	r3, #0
 8001e90:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d024      	beq.n	8001ee2 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 8001ea8:	897b      	ldrh	r3, [r7, #10]
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 8001eb6:	f107 0114 	add.w	r1, r7, #20
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	205b      	movs	r0, #91	@ 0x5b
 8001ec0:	f7ff f903 	bl	80010ca <bmi2_set_regs>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8001ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 8001ed0:	893a      	ldrh	r2, [r7, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	205e      	movs	r0, #94	@ 0x5e
 8001ed8:	f7ff f8f7 	bl	80010ca <bmi2_set_regs>
 8001edc:	4603      	mov	r3, r0
 8001ede:	75fb      	strb	r3, [r7, #23]
 8001ee0:	e001      	b.n	8001ee6 <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001ee2:	23ff      	movs	r3, #255	@ 0xff
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	2100      	movs	r1, #0
 8001f04:	68b8      	ldr	r0, [r7, #8]
 8001f06:	f000 fe5f 	bl	8002bc8 <check_boundary_val>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d114      	bne.n	8001f40 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	2100      	movs	r1, #0
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fe4f 	bl	8002bc8 <check_boundary_val>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	e007      	b.n	8001f40 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2207      	movs	r2, #7
 8001f34:	2100      	movs	r1, #0
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fe46 	bl	8002bc8 <check_boundary_val>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fe32 	bl	8002bc8 <check_boundary_val>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	2100      	movs	r1, #0
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f000 fe26 	bl	8002bc8 <check_boundary_val>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	1c98      	adds	r0, r3, #2
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	f000 fe12 	bl	8002bc8 <check_boundary_val>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13b      	bne.n	8002028 <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1c58      	adds	r0, r3, #1
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	2100      	movs	r1, #0
 8001fba:	f000 fe05 	bl	8002bc8 <check_boundary_val>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d12e      	bne.n	8002028 <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	1d58      	adds	r0, r3, #5
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f000 fdf8 	bl	8002bc8 <check_boundary_val>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8001fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d121      	bne.n	8002028 <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	220d      	movs	r2, #13
 8001fea:	2106      	movs	r1, #6
 8001fec:	f000 fdec 	bl	8002bc8 <check_boundary_val>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8001ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d115      	bne.n	8002028 <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1cd8      	adds	r0, r3, #3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2201      	movs	r2, #1
 8002004:	2100      	movs	r1, #0
 8002006:	f000 fddf 	bl	8002bc8 <check_boundary_val>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1d18      	adds	r0, r3, #4
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2204      	movs	r2, #4
 800201e:	2100      	movs	r1, #0
 8002020:	f000 fdd2 	bl	8002bc8 <check_boundary_val>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 800203c:	f107 010e 	add.w	r1, r7, #14
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	201b      	movs	r0, #27
 8002046:	f7fe ffcd 	bl	8000fe4 <bmi2_get_regs>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d121      	bne.n	800209a <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	109b      	asrs	r3, r3, #2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	b2db      	uxtb	r3, r3
 8002062:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d816      	bhi.n	8002098 <cfg_error_status+0x64>
 800206a:	a201      	add	r2, pc, #4	@ (adr r2, 8002070 <cfg_error_status+0x3c>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	08002081 	.word	0x08002081
 8002074:	08002087 	.word	0x08002087
 8002078:	0800208d 	.word	0x0800208d
 800207c:	08002093 	.word	0x08002093
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
                break;
 8002084:	e009      	b.n	800209a <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 8002086:	23fb      	movs	r3, #251	@ 0xfb
 8002088:	73fb      	strb	r3, [r7, #15]
                break;
 800208a:	e006      	b.n	800209a <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 800208c:	23fa      	movs	r3, #250	@ 0xfa
 800208e:	73fb      	strb	r3, [r7, #15]
                break;
 8002090:	e003      	b.n	800209a <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 8002092:	23f9      	movs	r3, #249	@ 0xf9
 8002094:	73fb      	strb	r3, [r7, #15]
                break;
 8002096:	e000      	b.n	800209a <cfg_error_status+0x66>
            default:
                break;
 8002098:	bf00      	nop
        }
    }

    return rslt;
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop

080020a8 <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fa3f 	bl	8002538 <validate_aux_config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d119      	bne.n	80020fa <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f8f7 	bl	80022bc <set_aux_interface>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f91f 	bl	8002320 <config_aux_interface>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f9db 	bl	80024ac <config_aux>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b08a      	sub	sp, #40	@ 0x28
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 800212a:	2300      	movs	r3, #0
 800212c:	723b      	strb	r3, [r7, #8]
 800212e:	2300      	movs	r3, #0
 8002130:	727b      	strb	r3, [r7, #9]
 8002132:	2300      	movs	r3, #0
 8002134:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	2109      	movs	r1, #9
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fd81 	bl	8001c4c <bmi2_extract_input_feat_config>
 800214a:	4603      	mov	r3, r0
 800214c:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80aa 	beq.w	80022aa <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8002156:	7a7b      	ldrb	r3, [r7, #9]
 8002158:	f107 010c 	add.w	r1, r7, #12
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fce2 	bl	8001b28 <bmi2_get_feat_config>
 8002164:	4603      	mov	r3, r0
 8002166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800216a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 809e 	bne.w	80022b0 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8002174:	7abb      	ldrb	r3, [r7, #10]
 8002176:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800217a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 8002184:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	4413      	add	r3, r2
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b21b      	sxth	r3, r3
 8002192:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002196:	f023 0307 	bic.w	r3, r3, #7
 800219a:	b21a      	sxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b219      	sxth	r1, r3
 80021ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	6a3a      	ldr	r2, [r7, #32]
 80021b4:	4413      	add	r3, r2
 80021b6:	b28a      	uxth	r2, r1
 80021b8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 80021ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021be:	3301      	adds	r3, #1
 80021c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 80021c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	6a3a      	ldr	r2, [r7, #32]
 80021cc:	4413      	add	r3, r2
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021d6:	f023 0307 	bic.w	r3, r3, #7
 80021da:	b21a      	sxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	885b      	ldrh	r3, [r3, #2]
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b219      	sxth	r1, r3
 80021ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	6a3a      	ldr	r2, [r7, #32]
 80021f4:	4413      	add	r3, r2
 80021f6:	b28a      	uxth	r2, r1
 80021f8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 80021fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021fe:	3301      	adds	r3, #1
 8002200:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 8002204:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	6a3a      	ldr	r2, [r7, #32]
 800220c:	4413      	add	r3, r2
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b21b      	sxth	r3, r3
 8002212:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	b21a      	sxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	b21b      	sxth	r3, r3
 8002222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b219      	sxth	r1, r3
 800222c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	6a3a      	ldr	r2, [r7, #32]
 8002234:	4413      	add	r3, r2
 8002236:	b28a      	uxth	r2, r1
 8002238:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 800223a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800223e:	3301      	adds	r3, #1
 8002240:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 8002244:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	7abb      	ldrb	r3, [r7, #10]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800225a:	e015      	b.n	8002288 <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	461a      	mov	r2, r3
 8002260:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002264:	4413      	add	r3, r2
 8002266:	6a3a      	ldr	r2, [r7, #32]
 8002268:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 800226a:	7abb      	ldrb	r3, [r7, #10]
 800226c:	4619      	mov	r1, r3
 800226e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002272:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	3328      	adds	r3, #40	@ 0x28
 8002278:	443b      	add	r3, r7
 800227a:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 800227e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002282:	3301      	adds	r3, #1
 8002284:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002288:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800228c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002290:	429a      	cmp	r2, r3
 8002292:	d3e3      	bcc.n	800225c <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8002294:	f107 010c 	add.w	r1, r7, #12
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2210      	movs	r2, #16
 800229c:	2030      	movs	r0, #48	@ 0x30
 800229e:	f7fe ff14 	bl	80010ca <bmi2_set_regs>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022a8:	e002      	b.n	80022b0 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80022aa:	23f8      	movs	r3, #248	@ 0xf8
 80022ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80022b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3728      	adds	r7, #40	@ 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80022c6:	f107 010e 	add.w	r1, r7, #14
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	206b      	movs	r0, #107	@ 0x6b
 80022d0:	f7fe fe88 	bl	8000fe4 <bmi2_get_regs>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d119      	bne.n	8002314 <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	f023 0320 	bic.w	r3, r3, #32
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	015b      	lsls	r3, r3, #5
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8002302:	f107 010e 	add.w	r1, r7, #14
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	206b      	movs	r0, #107	@ 0x6b
 800230c:	f7fe fedd 	bl	80010ca <bmi2_set_regs>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 800232a:	2300      	movs	r3, #0
 800232c:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8002336:	f107 010c 	add.w	r1, r7, #12
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2202      	movs	r2, #2
 800233e:	204b      	movs	r0, #75	@ 0x4b
 8002340:	f7fe fe50 	bl	8000fe4 <bmi2_get_regs>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 80a7 	bne.w	80024a0 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 8002352:	7b3b      	ldrb	r3, [r7, #12]
 8002354:	b25b      	sxtb	r3, r3
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	b25a      	sxtb	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	79db      	ldrb	r3, [r3, #7]
 8002360:	b25b      	sxtb	r3, r3
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	b25b      	sxtb	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b25b      	sxtb	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 800236e:	7b7b      	ldrb	r3, [r7, #13]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002376:	b25a      	sxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	b25b      	sxtb	r3, r3
 800237e:	01db      	lsls	r3, r3, #7
 8002380:	b25b      	sxtb	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	b25b      	sxtb	r3, r3
 800238e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002392:	b25a      	sxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	b25b      	sxtb	r3, r3
 800239a:	019b      	lsls	r3, r3, #6
 800239c:	b25b      	sxtb	r3, r3
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 80023ac:	7b7b      	ldrb	r3, [r7, #13]
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	f023 030c 	bic.w	r3, r3, #12
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 80023ce:	7b7b      	ldrb	r3, [r7, #13]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	b25a      	sxtb	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 80023ec:	f107 030b 	add.w	r3, r7, #11
 80023f0:	6839      	ldr	r1, [r7, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fab1 	bl	800195a <bmi2_get_status>
 80023f8:	4603      	mov	r3, r0
 80023fa:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d13b      	bne.n	800247c <config_aux_interface+0x15c>
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d136      	bne.n	800247c <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 800240e:	f107 010c 	add.w	r1, r7, #12
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2202      	movs	r2, #2
 8002416:	204b      	movs	r0, #75	@ 0x4b
 8002418:	f7fe fe57 	bl	80010ca <bmi2_set_regs>
 800241c:	4603      	mov	r3, r0
 800241e:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	6852      	ldr	r2, [r2, #4]
 8002428:	4611      	mov	r1, r2
 800242a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800242e:	4798      	blx	r3
                if (rslt == BMI2_OK)
 8002430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d132      	bne.n	800249e <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d115      	bne.n	800246c <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0108 	add.w	r1, r3, #8
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	204d      	movs	r0, #77	@ 0x4d
 8002452:	f7fe fe3a 	bl	80010ca <bmi2_set_regs>
 8002456:	4603      	mov	r3, r0
 8002458:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6852      	ldr	r2, [r2, #4]
 8002462:	4611      	mov	r1, r2
 8002464:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002468:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 800246a:	e018      	b.n	800249e <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	78da      	ldrb	r2, [r3, #3]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	771a      	strb	r2, [r3, #28]
                break;
 800247a:	e010      	b.n	800249e <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6852      	ldr	r2, [r2, #4]
 8002484:	4611      	mov	r1, r2
 8002486:	f242 7010 	movw	r0, #10000	@ 0x2710
 800248a:	4798      	blx	r3
            count++;
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	3301      	adds	r3, #1
 8002490:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	2b14      	cmp	r3, #20
 8002496:	d9a9      	bls.n	80023ec <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 8002498:	23f1      	movs	r3, #241	@ 0xf1
 800249a:	73fb      	strb	r3, [r7, #15]
                break;
 800249c:	e000      	b.n	80024a0 <config_aux_interface+0x180>
                break;
 800249e:	bf00      	nop
            }
        }
    }

    return rslt;
 80024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80024b6:	f107 010e 	add.w	r1, r7, #14
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	2044      	movs	r0, #68	@ 0x44
 80024c0:	f7fe fd90 	bl	8000fe4 <bmi2_get_regs>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80024c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d12d      	bne.n	800252c <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	799b      	ldrb	r3, [r3, #6]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	f023 030f 	bic.w	r3, r3, #15
 80024f4:	b25a      	sxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	795b      	ldrb	r3, [r3, #5]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	b25b      	sxtb	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b25b      	sxtb	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 800250a:	f107 010e 	add.w	r1, r7, #14
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2201      	movs	r2, #1
 8002512:	2044      	movs	r0, #68	@ 0x44
 8002514:	f7fe fdd9 	bl	80010ca <bmi2_set_regs>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	6852      	ldr	r2, [r2, #4]
 8002524:	4611      	mov	r1, r2
 8002526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800252a:	4798      	blx	r3
    }

    return rslt;
 800252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1d58      	adds	r0, r3, #5
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	220b      	movs	r2, #11
 800254a:	2101      	movs	r1, #1
 800254c:	f000 fb3c 	bl	8002bc8 <check_boundary_val>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8002554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t get_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 800256a:	2300      	movs	r3, #0
 800256c:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800256e:	6838      	ldr	r0, [r7, #0]
 8002570:	f000 fc5e 	bl	8002e30 <null_ptr_check>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8002578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d129      	bne.n	80025d4 <get_accel_config+0x74>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d026      	beq.n	80025d4 <get_accel_config+0x74>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8002586:	f107 010c 	add.w	r1, r7, #12
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2202      	movs	r2, #2
 800258e:	2040      	movs	r0, #64	@ 0x40
 8002590:	f7fe fd28 	bl	8000fe4 <bmi2_get_regs>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11b      	bne.n	80025d8 <get_accel_config+0x78>
        {
            /* Get accelerometer performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE);
 80025a0:	7b3b      	ldrb	r3, [r7, #12]
 80025a2:	09db      	lsrs	r3, r3, #7
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	709a      	strb	r2, [r3, #2]

            /* Get accelerometer bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_ACC_BW_PARAM);
 80025aa:	7b3b      	ldrb	r3, [r7, #12]
 80025ac:	111b      	asrs	r3, r3, #4
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	705a      	strb	r2, [r3, #1]

            /* Get accelerometer ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_ACC_ODR);
 80025ba:	7b3b      	ldrb	r3, [r7, #12]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_ACC_RANGE);
 80025c6:	7b7b      	ldrb	r3, [r7, #13]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	70da      	strb	r2, [r3, #3]
        if (rslt == BMI2_OK)
 80025d2:	e001      	b.n	80025d8 <get_accel_config+0x78>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80025d4:	23ff      	movs	r3, #255	@ 0xff
 80025d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range.
 */
static int8_t get_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80025ee:	2300      	movs	r3, #0
 80025f0:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f000 fc1c 	bl	8002e30 <null_ptr_check>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d139      	bne.n	8002678 <get_gyro_config+0x94>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <get_gyro_config+0x94>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 800260a:	f107 010c 	add.w	r1, r7, #12
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2202      	movs	r2, #2
 8002612:	2042      	movs	r0, #66	@ 0x42
 8002614:	f7fe fce6 	bl	8000fe4 <bmi2_get_regs>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d12b      	bne.n	800267c <get_gyro_config+0x98>
        {
            /* Get gyroscope performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE);
 8002624:	7b3b      	ldrb	r3, [r7, #12]
 8002626:	09db      	lsrs	r3, r3, #7
 8002628:	b2da      	uxtb	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	709a      	strb	r2, [r3, #2]

            /* Get gyroscope noise performance mode */
            config->noise_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_NOISE_PERF_MODE);
 800262e:	7b3b      	ldrb	r3, [r7, #12]
 8002630:	119b      	asrs	r3, r3, #6
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	715a      	strb	r2, [r3, #5]

            /* Get gyroscope bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_GYR_BW_PARAM);
 800263e:	7b3b      	ldrb	r3, [r7, #12]
 8002640:	111b      	asrs	r3, r3, #4
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	b2da      	uxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	705a      	strb	r2, [r3, #1]

            /* Get gyroscope ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_GYR_ODR);
 800264e:	7b3b      	ldrb	r3, [r7, #12]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	701a      	strb	r2, [r3, #0]

            /* Get gyroscope OIS range */
            config->ois_range = BMI2_GET_BITS(data_array[1], BMI2_GYR_OIS_RANGE);
 800265a:	7b7b      	ldrb	r3, [r7, #13]
 800265c:	10db      	asrs	r3, r3, #3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	70da      	strb	r2, [r3, #3]

            /* Get gyroscope range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_GYR_RANGE);
 800266a:	7b7b      	ldrb	r3, [r7, #13]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	b2da      	uxtb	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	711a      	strb	r2, [r3, #4]
        if (rslt == BMI2_OK)
 8002676:	e001      	b.n	800267c <get_gyro_config+0x98>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8002678:	23ff      	movs	r3, #255	@ 0xff
 800267a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800267c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <get_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3) Gets ODR and offset.
 */
static int8_t get_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002692:	6838      	ldr	r0, [r7, #0]
 8002694:	f000 fbcc 	bl	8002e30 <null_ptr_check>
 8002698:	4603      	mov	r3, r0
 800269a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 800269c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11d      	bne.n	80026e0 <get_aux_config+0x58>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01a      	beq.n	80026e0 <get_aux_config+0x58>
    {
        /* Get enable status of auxiliary interface */
        rslt = get_aux_interface(config, dev);
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f8c0 	bl	8002832 <get_aux_interface>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d113      	bne.n	80026e6 <get_aux_config+0x5e>
        {
            /* Get the auxiliary interface configurations */
            rslt = get_aux_interface_config(config, dev);
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8d6 	bl	8002872 <get_aux_interface_config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <get_aux_config+0x5e>
            {
                /* Get read out offset and ODR */
                rslt = get_aux_cfg(config, dev);
 80026d2:	6839      	ldr	r1, [r7, #0]
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f914 	bl	8002902 <get_aux_cfg>
 80026da:	4603      	mov	r3, r0
 80026dc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80026de:	e002      	b.n	80026e6 <get_aux_config+0x5e>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80026e0:	23ff      	movs	r3, #255	@ 0xff
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e000      	b.n	80026e8 <get_aux_config+0x60>
        if (rslt == BMI2_OK)
 80026e6:	bf00      	nop
    }

    return rslt;
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <get_gyro_gain_update_config>:
/*!
 * @brief This internal API gets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t get_gyro_gain_update_config(struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	@ 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 800271e:	2300      	movs	r3, #0
 8002720:	723b      	strb	r3, [r7, #8]
 8002722:	2300      	movs	r3, #0
 8002724:	727b      	strb	r3, [r7, #9]
 8002726:	2300      	movs	r3, #0
 8002728:	72bb      	strb	r3, [r7, #10]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	2109      	movs	r1, #9
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fa8a 	bl	8001c4c <bmi2_extract_input_feat_config>
 8002738:	4603      	mov	r3, r0
 800273a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06e      	beq.n	8002820 <get_gyro_gain_update_config+0x12c>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8002742:	7a7b      	ldrb	r3, [r7, #9]
 8002744:	f107 010c 	add.w	r1, r7, #12
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f9ec 	bl	8001b28 <bmi2_get_feat_config>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8002756:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800275a:	2b00      	cmp	r3, #0
 800275c:	d163      	bne.n	8002826 <get_gyro_gain_update_config+0x132>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 800275e:	7abb      	ldrb	r3, [r7, #10]
 8002760:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate ratio_x */
            lsb = (uint16_t) feat_config[idx++];
 8002764:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800276e:	3328      	adds	r3, #40	@ 0x28
 8002770:	443b      	add	r3, r7
 8002772:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002776:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8002778:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002782:	3328      	adds	r3, #40	@ 0x28
 8002784:	443b      	add	r3, r7
 8002786:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 800278e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002790:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002792:	4313      	orrs	r3, r2
 8002794:	843b      	strh	r3, [r7, #32]

            /* Get ratio_x */
            config->ratio_x = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_X_MASK;
 8002796:	8c3b      	ldrh	r3, [r7, #32]
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	b29a      	uxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	801a      	strh	r2, [r3, #0]

            /* Get word to calculate ratio_y */
            lsb = (uint16_t) feat_config[idx++];
 80027a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80027ac:	3328      	adds	r3, #40	@ 0x28
 80027ae:	443b      	add	r3, r7
 80027b0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80027b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80027c0:	3328      	adds	r3, #40	@ 0x28
 80027c2:	443b      	add	r3, r7
 80027c4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80027cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027d0:	4313      	orrs	r3, r2
 80027d2:	843b      	strh	r3, [r7, #32]

            /* Get ratio_y */
            config->ratio_y = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Y_MASK;
 80027d4:	8c3b      	ldrh	r3, [r7, #32]
 80027d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	805a      	strh	r2, [r3, #2]

            /* Get word to calculate ratio_z */
            lsb = (uint16_t) feat_config[idx++];
 80027e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80027ea:	3328      	adds	r3, #40	@ 0x28
 80027ec:	443b      	add	r3, r7
 80027ee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80027f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80027fe:	3328      	adds	r3, #40	@ 0x28
 8002800:	443b      	add	r3, r7
 8002802:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 800280a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800280c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800280e:	4313      	orrs	r3, r2
 8002810:	843b      	strh	r3, [r7, #32]

            /* Get ratio_z */
            config->ratio_z = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Z_MASK;
 8002812:	8c3b      	ldrh	r3, [r7, #32]
 8002814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	809a      	strh	r2, [r3, #4]
 800281e:	e002      	b.n	8002826 <get_gyro_gain_update_config+0x132>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002820:	23f8      	movs	r3, #248	@ 0xf8
 8002822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8002826:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800282a:	4618      	mov	r0, r3
 800282c:	3728      	adds	r7, #40	@ 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <get_aux_interface>:

/*!
 * @brief This internal API gets the enable status of auxiliary interface.
 */
static int8_t get_aux_interface(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get the enable status of auxiliary interface */
    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 800283c:	f107 010e 	add.w	r1, r7, #14
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	206b      	movs	r0, #107	@ 0x6b
 8002846:	f7fe fbcd 	bl	8000fe4 <bmi2_get_regs>
 800284a:	4603      	mov	r3, r0
 800284c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <get_aux_interface+0x34>
    {
        config->aux_en = BMI2_GET_BITS(reg_data, BMI2_AUX_IF_EN);
 8002856:	7bbb      	ldrb	r3, [r7, #14]
 8002858:	115b      	asrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <get_aux_interface_config>:
/*!
 * @brief This internal API gets auxiliary configurations like manual/auto mode
 * FCU write command enable and read burst length for both data and manual mode.
 */
static int8_t get_aux_interface_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 800287c:	2300      	movs	r3, #0
 800287e:	81bb      	strh	r3, [r7, #12]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8002880:	f107 010c 	add.w	r1, r7, #12
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	204b      	movs	r0, #75	@ 0x4b
 800288a:	f7fe fbab 	bl	8000fe4 <bmi2_get_regs>
 800288e:	4603      	mov	r3, r0
 8002890:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12d      	bne.n	80028f6 <get_aux_interface_config+0x84>
    {
        /* Get I2C address for auxiliary sensor */
        config->i2c_device_addr = BMI2_GET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR);
 800289a:	7b3b      	ldrb	r3, [r7, #12]
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	71da      	strb	r2, [r3, #7]

        /* Get the AUX IF to either manual or auto mode */
        config->manual_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN);
 80028a4:	7b7b      	ldrb	r3, [r7, #13]
 80028a6:	09db      	lsrs	r3, r3, #7
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	705a      	strb	r2, [r3, #1]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        config->fcu_write_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN);
 80028ae:	7b7b      	ldrb	r3, [r7, #13]
 80028b0:	119b      	asrs	r3, r3, #6
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	709a      	strb	r2, [r3, #2]

        /* Get the burst read length for manual mode */
        config->man_rd_burst = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST);
 80028be:	7b7b      	ldrb	r3, [r7, #13]
 80028c0:	109b      	asrs	r3, r3, #2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	70da      	strb	r2, [r3, #3]

        /* Get the burst read length for data mode */
        config->aux_rd_burst = BMI2_GET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST);
 80028ce:	7b7b      	ldrb	r3, [r7, #13]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	711a      	strb	r2, [r3, #4]

        /* If data mode, get the read address of the auxiliary sensor from where data is to be read */
        if (!config->manual_en)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <get_aux_interface_config+0x84>
        {
            rslt = bmi2_get_regs(BMI2_AUX_RD_ADDR, &config->read_addr, 1, dev);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f103 0108 	add.w	r1, r3, #8
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	204d      	movs	r0, #77	@ 0x4d
 80028ee:	f7fe fb79 	bl	8000fe4 <bmi2_get_regs>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <get_aux_cfg>:
/*!
 * @brief This internal API gets read out offset and ODR of the auxiliary
 * sensor.
 */
static int8_t get_aux_cfg(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 800290c:	f107 010e 	add.w	r1, r7, #14
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	2044      	movs	r0, #68	@ 0x44
 8002916:	f7fe fb65 	bl	8000fe4 <bmi2_get_regs>
 800291a:	4603      	mov	r3, r0
 800291c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <get_aux_cfg+0x3a>
    {
        /* Get read out offset */
        config->offset = BMI2_GET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT);
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	719a      	strb	r2, [r3, #6]

        /* Get ODR */
        config->odr = BMI2_GET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN);
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	b2da      	uxtb	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	715a      	strb	r2, [r3, #5]
    }

    return rslt;
 800293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <get_acc_gyr_data>:

/*!
 * @brief This internal API gets the accelerometer/gyroscope data.
 */
static void get_acc_gyr_data(struct bmi2_sens_axes_data *data, const uint8_t *reg_data)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]

    /* Variables to store both msb and lsb value */
    uint16_t msb_lsb;

    /* Variables to define index */
    uint8_t index = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]

    /* Read x-axis data */
    lsb = reg_data[index++];
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	73fa      	strb	r2, [r7, #15]
 800295c:	461a      	mov	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	73fa      	strb	r2, [r7, #15]
 800296c:	461a      	mov	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8002976:	7b7b      	ldrb	r3, [r7, #13]
 8002978:	b21b      	sxth	r3, r3
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	7bbb      	ldrb	r3, [r7, #14]
 8002980:	b21b      	sxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b21b      	sxth	r3, r3
 8002986:	817b      	strh	r3, [r7, #10]
    data->x = (int16_t) msb_lsb;
 8002988:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	801a      	strh	r2, [r3, #0]

    /* Read y-axis data */
    lsb = reg_data[index++];
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	73fa      	strb	r2, [r7, #15]
 8002996:	461a      	mov	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	73fa      	strb	r2, [r7, #15]
 80029a6:	461a      	mov	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80029b0:	7b7b      	ldrb	r3, [r7, #13]
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	b21b      	sxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b21b      	sxth	r3, r3
 80029c0:	817b      	strh	r3, [r7, #10]
    data->y = (int16_t) msb_lsb;
 80029c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	805a      	strh	r2, [r3, #2]

    /* Read z-axis data */
    lsb = reg_data[index++];
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	73fa      	strb	r2, [r7, #15]
 80029d0:	461a      	mov	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	73fa      	strb	r2, [r7, #15]
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80029ea:	7b7b      	ldrb	r3, [r7, #13]
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b21b      	sxth	r3, r3
 80029fa:	817b      	strh	r3, [r7, #10]
    data->z = (int16_t) msb_lsb;
 80029fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	809a      	strh	r2, [r3, #4]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <get_remapped_data>:

/*!
 * @brief This internal API gets the re-mapped accelerometer/gyroscope data.
 */
static void get_remapped_data(struct bmi2_sens_axes_data *data, const struct bmi2_dev *dev)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    /* Array to defined the re-mapped sensor data */
    int16_t remap_data[3] = { 0 };
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	809a      	strh	r2, [r3, #4]
    int16_t pos_multiplier = INT16_C(1);
 8002a24:	2301      	movs	r3, #1
 8002a26:	82fb      	strh	r3, [r7, #22]
    int16_t neg_multiplier = INT16_C(-1);
 8002a28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a2c:	82bb      	strh	r3, [r7, #20]

    /* Fill the array with the un-mapped sensor data */
    remap_data[0] = data->x;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a34:	81bb      	strh	r3, [r7, #12]
    remap_data[1] = data->y;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a3c:	81fb      	strh	r3, [r7, #14]
    remap_data[2] = data->z;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a44:	823b      	strh	r3, [r7, #16]

    /* Get the re-mapped x axis data */
    if (dev->remap.x_axis_sign == BMI2_POS_SIGN)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d110      	bne.n	8002a72 <get_remapped_data+0x62>
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * pos_multiplier);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	3318      	adds	r3, #24
 8002a5a:	443b      	add	r3, r7
 8002a5c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	8afb      	ldrh	r3, [r7, #22]
 8002a64:	fb12 f303 	smulbb	r3, r2, r3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	e00f      	b.n	8002a92 <get_remapped_data+0x82>
    }
    else
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * neg_multiplier);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	443b      	add	r3, r7
 8002a7e:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	8abb      	ldrh	r3, [r7, #20]
 8002a86:	fb12 f303 	smulbb	r3, r2, r3
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	801a      	strh	r2, [r3, #0]
    }

    /* Get the re-mapped y axis data */
    if (dev->remap.y_axis_sign == BMI2_POS_SIGN)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d110      	bne.n	8002abe <get_remapped_data+0xae>
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * pos_multiplier);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	443b      	add	r3, r7
 8002aa8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	8afb      	ldrh	r3, [r7, #22]
 8002ab0:	fb12 f303 	smulbb	r3, r2, r3
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	805a      	strh	r2, [r3, #2]
 8002abc:	e00f      	b.n	8002ade <get_remapped_data+0xce>
    }
    else
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * neg_multiplier);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	3318      	adds	r3, #24
 8002ac8:	443b      	add	r3, r7
 8002aca:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	8abb      	ldrh	r3, [r7, #20]
 8002ad2:	fb12 f303 	smulbb	r3, r2, r3
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b21a      	sxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	805a      	strh	r2, [r3, #2]
    }

    /* Get the re-mapped z axis data */
    if (dev->remap.z_axis_sign == BMI2_POS_SIGN)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d110      	bne.n	8002b0a <get_remapped_data+0xfa>
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * pos_multiplier);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	3318      	adds	r3, #24
 8002af2:	443b      	add	r3, r7
 8002af4:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	8afb      	ldrh	r3, [r7, #22]
 8002afc:	fb12 f303 	smulbb	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
    }
}
 8002b08:	e00f      	b.n	8002b2a <get_remapped_data+0x11a>
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	3318      	adds	r3, #24
 8002b14:	443b      	add	r3, r7
 8002b16:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	8abb      	ldrh	r3, [r7, #20]
 8002b1e:	fb12 f303 	smulbb	r3, r2, r3
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	809a      	strh	r2, [r3, #4]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <saturate>:

/*!
 * @brief This internal API clips the gyroscope cross-axis sensitivity within signed 16-bit limit
 */
static int16_t saturate(int32_t value, uint16_t saturation_val)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]
    int16_t retval = (int16_t)value;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	81fb      	strh	r3, [r7, #14]

    if (value > (int32_t)saturation_val)
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dd02      	ble.n	8002b54 <saturate+0x1e>
    {
        retval = (int16_t)saturation_val;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	81fb      	strh	r3, [r7, #14]
 8002b52:	e008      	b.n	8002b66 <saturate+0x30>
    }
    else if (value < (-(int32_t)saturation_val - 1))
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	da03      	bge.n	8002b66 <saturate+0x30>
    {
        retval = -(int16_t)saturation_val - 1;
 8002b5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	81fb      	strh	r3, [r7, #14]
    }

    return retval;
 8002b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <comp_gyro_cross_axis_sensitivity>:
/*!
 * @brief This internal API corrects the gyroscope cross-axis sensitivity
 * between the z and the x axis.
 */
static void comp_gyro_cross_axis_sensitivity(struct bmi2_sens_axes_data *gyr_data, const struct bmi2_dev *dev)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
    uint16_t int16_max = UINT16_C(32767);
 8002b80:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002b84:	81fb      	strh	r3, [r7, #14]

    /* Get the compensated gyroscope x-axis */
    gyr_data->x =
        saturate((int32_t)(gyr_data->x - (int16_t)(((int32_t) dev->gyr_cross_sens_zx * (int32_t) gyr_data->z) / 512)),
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8002b94:	4619      	mov	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	da01      	bge.n	8002ba8 <comp_gyro_cross_axis_sensitivity+0x32>
 8002ba4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002ba8:	125b      	asrs	r3, r3, #9
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	89fa      	ldrh	r2, [r7, #14]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ffbf 	bl	8002b36 <saturate>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
    gyr_data->x =
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	801a      	strh	r2, [r3, #0]
                 int16_max);
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	72fb      	strb	r3, [r7, #11]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01e      	beq.n	8002c22 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	7afa      	ldrb	r2, [r7, #11]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d909      	bls.n	8002c02 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	7afa      	ldrb	r2, [r7, #11]
 8002bf2:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7a1b      	ldrb	r3, [r3, #8]
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	7aba      	ldrb	r2, [r7, #10]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d20c      	bcs.n	8002c26 <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	7aba      	ldrb	r2, [r7, #10]
 8002c10:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7a1b      	ldrb	r3, [r3, #8]
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	721a      	strb	r2, [r3, #8]
 8002c20:	e001      	b.n	8002c26 <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8002c22:	23ff      	movs	r3, #255	@ 0xff
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8002c40:	2300      	movs	r3, #0
 8002c42:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1c58      	adds	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7ff f94f 	bl	8001ef2 <validate_bw_perf_mode>
 8002c54:	4603      	mov	r3, r0
 8002c56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d15b      	bne.n	8002d18 <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3303      	adds	r3, #3
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7ff f96f 	bl	8001f4c <validate_odr_range>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d14e      	bne.n	8002d18 <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 8002c7a:	7b3b      	ldrb	r3, [r7, #12]
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c82:	b25a      	sxtb	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	01db      	lsls	r3, r3, #7
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8002c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9c:	b25a      	sxtb	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 8002cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb8:	f023 030f 	bic.w	r3, r3, #15
 8002cbc:	b25a      	sxtb	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 8002cd0:	7bbb      	ldrb	r3, [r7, #14]
 8002cd2:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 8002cd4:	7b7b      	ldrb	r3, [r7, #13]
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	f023 0303 	bic.w	r3, r3, #3
 8002cdc:	b25a      	sxtb	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	78db      	ldrb	r3, [r3, #3]
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 8002cf0:	7bbb      	ldrb	r3, [r7, #14]
 8002cf2:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8002cf4:	f107 010c 	add.w	r1, r7, #12
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	2040      	movs	r0, #64	@ 0x40
 8002cfe:	f7fe f9e4 	bl	80010ca <bmi2_set_regs>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f7ff f990 	bl	8002034 <cfg_error_status>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 8002d2e:	2300      	movs	r3, #0
 8002d30:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff f929 	bl	8001f8c <validate_gyro_config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d16e      	bne.n	8002e24 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8002d46:	7b3b      	ldrb	r3, [r7, #12]
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d4e:	b25a      	sxtb	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	789b      	ldrb	r3, [r3, #2]
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	01db      	lsls	r3, r3, #7
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8002d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d68:	b25a      	sxtb	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	795b      	ldrb	r3, [r3, #5]
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 8002d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d84:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d88:	b25a      	sxtb	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d98:	b25b      	sxtb	r3, r3
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 8002da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002da4:	f023 030f 	bic.w	r3, r3, #15
 8002da8:	b25a      	sxtb	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 8002dc0:	7b7b      	ldrb	r3, [r7, #13]
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	f023 0308 	bic.w	r3, r3, #8
 8002dc8:	b25a      	sxtb	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	78db      	ldrb	r3, [r3, #3]
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 8002de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	b25a      	sxtb	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	791b      	ldrb	r3, [r3, #4]
 8002dee:	b25b      	sxtb	r3, r3
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 8002dfc:	7bbb      	ldrb	r3, [r7, #14]
 8002dfe:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8002e00:	f107 010c 	add.w	r1, r7, #12
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2202      	movs	r2, #2
 8002e08:	2042      	movs	r0, #66	@ 0x42
 8002e0a:	f7fe f95e 	bl	80010ca <bmi2_set_regs>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 8002e1a:	6838      	ldr	r0, [r7, #0]
 8002e1c:	f7ff f90a 	bl	8002034 <cfg_error_status>
 8002e20:	4603      	mov	r3, r0
 8002e22:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <null_ptr_check+0x2a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <null_ptr_check+0x2a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <null_ptr_check+0x2a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8002e5a:	23ff      	movs	r3, #255	@ 0xff
 8002e5c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b088      	sub	sp, #32
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	723b      	strb	r3, [r7, #8]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	727b      	strb	r3, [r7, #9]
 8002e92:	2300      	movs	r3, #0
 8002e94:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	2109      	movs	r1, #9
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f84b 	bl	8002f3a <extract_output_feat_config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8002ea8:	7f7b      	ldrb	r3, [r7, #29]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03d      	beq.n	8002f2a <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 8002eae:	7a7b      	ldrb	r3, [r7, #9]
 8002eb0:	f107 010c 	add.w	r1, r7, #12
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fe36 	bl	8001b28 <bmi2_get_feat_config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8002ec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d132      	bne.n	8002f2e <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 8002ec8:	7abb      	ldrb	r3, [r7, #10]
 8002eca:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 8002ecc:	7fbb      	ldrb	r3, [r7, #30]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	443b      	add	r3, r7
 8002ed2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8002ee0:	7fbb      	ldrb	r3, [r7, #30]
 8002ee2:	3320      	adds	r3, #32
 8002ee4:	443b      	add	r3, r7
 8002ee6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002eea:	105b      	asrs	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 8002ef8:	7fbb      	ldrb	r3, [r7, #30]
 8002efa:	3320      	adds	r3, #32
 8002efc:	443b      	add	r3, r7
 8002efe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002f02:	109b      	asrs	r3, r3, #2
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8002f10:	7fbb      	ldrb	r3, [r7, #30]
 8002f12:	3320      	adds	r3, #32
 8002f14:	443b      	add	r3, r7
 8002f16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002f1a:	10db      	asrs	r3, r3, #3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	70da      	strb	r2, [r3, #3]
 8002f28:	e001      	b.n	8002f2e <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002f2a:	23f8      	movs	r3, #248	@ 0xf8
 8002f2c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002f2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b087      	sub	sp, #28
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	460b      	mov	r3, r1
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8002f50:	e01c      	b.n	8002f8c <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f56:	7dfa      	ldrb	r2, [r7, #23]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	440b      	add	r3, r1
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	7afa      	ldrb	r2, [r7, #11]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d10e      	bne.n	8002f86 <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f6c:	7dfa      	ldrb	r2, [r7, #23]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	18ca      	adds	r2, r1, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8811      	ldrh	r1, [r2, #0]
 8002f7a:	7892      	ldrb	r2, [r2, #2]
 8002f7c:	8019      	strh	r1, [r3, #0]
 8002f7e:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75bb      	strb	r3, [r7, #22]
            break;
 8002f84:	e007      	b.n	8002f96 <extract_output_feat_config+0x5c>
        }

        loop++;
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e9b      	ldrb	r3, [r3, #26]
 8002f90:	7dfa      	ldrb	r2, [r7, #23]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3dd      	bcc.n	8002f52 <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8002f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002fae:	f107 030c 	add.w	r3, r7, #12
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	723b      	strb	r3, [r7, #8]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	727b      	strb	r3, [r7, #9]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01d      	beq.n	8003016 <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 8002fda:	f107 010b 	add.w	r1, r7, #11
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	201e      	movs	r0, #30
 8002fe4:	f7fd fffe 	bl	8000fe4 <bmi2_get_regs>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8002fec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d157      	bne.n	80030a4 <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	3b80      	subs	r3, #128	@ 0x80
 8003002:	b29b      	uxth	r3, r3
 8003004:	b21a      	sxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	e04b      	b.n	80030a4 <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	b21a      	sxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	e046      	b.n	80030a4 <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	2129      	movs	r1, #41	@ 0x29
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff8b 	bl	8002f3a <extract_output_feat_config>
 8003024:	4603      	mov	r3, r0
 8003026:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8003028:	7f7b      	ldrb	r3, [r7, #29]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d038      	beq.n	80030a0 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 800302e:	7a7b      	ldrb	r3, [r7, #9]
 8003030:	f107 010c 	add.w	r1, r7, #12
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fd76 	bl	8001b28 <bmi2_get_feat_config>
 800303c:	4603      	mov	r3, r0
 800303e:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8003040:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d12d      	bne.n	80030a4 <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8003048:	7abb      	ldrb	r3, [r7, #10]
 800304a:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 800304c:	7fbb      	ldrb	r3, [r7, #30]
 800304e:	3320      	adds	r3, #32
 8003050:	443b      	add	r3, r7
 8003052:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003056:	7fbb      	ldrb	r3, [r7, #30]
 8003058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	3320      	adds	r3, #32
 8003060:	443b      	add	r3, r7
 8003062:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8003066:	7fbb      	ldrb	r3, [r7, #30]
 8003068:	3320      	adds	r3, #32
 800306a:	443b      	add	r3, r7
 800306c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 8003078:	7fbb      	ldrb	r3, [r7, #30]
 800307a:	3320      	adds	r3, #32
 800307c:	443b      	add	r3, r7
 800307e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003082:	3b80      	subs	r3, #128	@ 0x80
 8003084:	b29b      	uxth	r3, r3
 8003086:	b21a      	sxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e00a      	b.n	80030a4 <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 800308e:	7fbb      	ldrb	r3, [r7, #30]
 8003090:	3320      	adds	r3, #32
 8003092:	443b      	add	r3, r7
 8003094:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003098:	b21a      	sxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e001      	b.n	80030a4 <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 80030a0:	23f8      	movs	r3, #248	@ 0xf8
 80030a2:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80030a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 80030b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80030b4:	b089      	sub	sp, #36	@ 0x24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6178      	str	r0, [r7, #20]
 80030ba:	460b      	mov	r3, r1
 80030bc:	60fa      	str	r2, [r7, #12]
 80030be:	74fb      	strb	r3, [r7, #19]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	77bb      	strb	r3, [r7, #30]
 80030c8:	e041      	b.n	800314e <select_sensor+0x9e>
    {
        switch (sens_list[count])
 80030ca:	7fbb      	ldrb	r3, [r7, #30]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d028      	beq.n	8003128 <select_sensor+0x78>
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	dc33      	bgt.n	8003142 <select_sensor+0x92>
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d01a      	beq.n	8003114 <select_sensor+0x64>
 80030de:	2b02      	cmp	r3, #2
 80030e0:	dc2f      	bgt.n	8003142 <select_sensor+0x92>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <select_sensor+0x3c>
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d00a      	beq.n	8003100 <select_sensor+0x50>
 80030ea:	e02a      	b.n	8003142 <select_sensor+0x92>
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f042 0401 	orr.w	r4, r2, #1
 80030f6:	461d      	mov	r5, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 80030fe:	e023      	b.n	8003148 <select_sensor+0x98>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f042 0802 	orr.w	r8, r2, #2
 800310a:	4699      	mov	r9, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 8003112:	e019      	b.n	8003148 <select_sensor+0x98>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f042 0a04 	orr.w	sl, r2, #4
 800311e:	469b      	mov	fp, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8003126:	e00f      	b.n	8003148 <select_sensor+0x98>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	603a      	str	r2, [r7, #0]
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	e9d7 1200 	ldrd	r1, r2, [r7]
 800313c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8003140:	e002      	b.n	8003148 <select_sensor+0x98>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8003142:	23f8      	movs	r3, #248	@ 0xf8
 8003144:	77fb      	strb	r3, [r7, #31]
                break;
 8003146:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 8003148:	7fbb      	ldrb	r3, [r7, #30]
 800314a:	3301      	adds	r3, #1
 800314c:	77bb      	strb	r3, [r7, #30]
 800314e:	7fba      	ldrb	r2, [r7, #30]
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3b9      	bcc.n	80030ca <select_sensor+0x1a>
        }
    }

    return rslt;
 8003156:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	@ 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003164:	4770      	bx	lr

08003166 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8003166:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316a:	b08a      	sub	sp, #40	@ 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003172:	617a      	str	r2, [r7, #20]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 800317a:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2201      	movs	r2, #1
 8003182:	207d      	movs	r0, #125	@ 0x7d
 8003184:	f7fd ff2e 	bl	8000fe4 <bmi2_get_regs>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI2_OK)
 800318e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003192:	2b00      	cmp	r3, #0
 8003194:	d158      	bne.n	8003248 <sensor_enable+0xe2>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 8003196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319a:	f002 0301 	and.w	r3, r2, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80031a8:	460b      	mov	r3, r1
 80031aa:	4313      	orrs	r3, r2
 80031ac:	d006      	beq.n	80031bc <sensor_enable+0x56>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 80031ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 80031bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c0:	f002 0302 	and.w	r3, r2, #2
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031ce:	460b      	mov	r3, r1
 80031d0:	4313      	orrs	r3, r2
 80031d2:	d006      	beq.n	80031e2 <sensor_enable+0x7c>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 80031d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 80031e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e6:	f002 0a04 	and.w	sl, r2, #4
 80031ea:	f04f 0b00 	mov.w	fp, #0
 80031ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80031f2:	d006      	beq.n	8003202 <sensor_enable+0x9c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 80031f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 8003202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003206:	f04f 0800 	mov.w	r8, #0
 800320a:	f003 0901 	and.w	r9, r3, #1
 800320e:	ea58 0309 	orrs.w	r3, r8, r9
 8003212:	d006      	beq.n	8003222 <sensor_enable+0xbc>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 8003214:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 8003222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003226:	f002 0407 	and.w	r4, r2, #7
 800322a:	f003 0501 	and.w	r5, r3, #1
 800322e:	ea54 0305 	orrs.w	r3, r4, r5
 8003232:	d009      	beq.n	8003248 <sensor_enable+0xe2>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8003234:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2201      	movs	r2, #1
 800323c:	207d      	movs	r0, #125	@ 0x7d
 800323e:	f7fd ff44 	bl	80010ca <bmi2_set_regs>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8003248:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	@ 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003258 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8e5 	bl	8003430 <null_ptr_check>
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d141      	bne.n	80032f6 <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	@ 0x24
 8003276:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800327e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2203      	movs	r2, #3
 8003286:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7a5b      	ldrb	r3, [r3, #9]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	72da      	strb	r2, [r3, #11]
 8003298:	e002      	b.n	80032a0 <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <bmi270_init+0xac>)
 80032ac:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fe38 	bl	8000f24 <bmi2_sec_init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11a      	bne.n	80032f6 <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <bmi270_init+0xb0>)
 80032c4:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a10      	ldr	r2, [pc, #64]	@ (800330c <bmi270_init+0xb4>)
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2208      	movs	r2, #8
 80032d0:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2211      	movs	r2, #17
 80032d6:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2207      	movs	r2, #7
 80032dc:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <bmi270_init+0xb8>)
 80032e2:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2208      	movs	r2, #8
 80032e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fe fbbb 	bl	8001a68 <bmi2_get_gyro_cross_sense>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	0801a23c 	.word	0x0801a23c
 8003308:	0801c23c 	.word	0x0801c23c
 800330c:	0801c270 	.word	0x0801c270
 8003310:	20000008 	.word	0x20000008

08003314 <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	460b      	mov	r3, r1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f882 	bl	8003430 <null_ptr_check>
 800332c:	4603      	mov	r3, r0
 800332e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8003330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d171      	bne.n	800341c <bmi270_set_sensor_config+0x108>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d06e      	beq.n	800341c <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003344:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8003346:	2300      	movs	r3, #0
 8003348:	75bb      	strb	r3, [r7, #22]
 800334a:	e053      	b.n	80033f4 <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 800334c:	7dba      	ldrb	r2, [r7, #22]
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <bmi270_set_sensor_config+0x90>
 8003362:	7dba      	ldrb	r2, [r7, #22]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	461a      	mov	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d015      	beq.n	80033a4 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8003378:	7dba      	ldrb	r2, [r7, #22]
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 800338a:	2b02      	cmp	r3, #2
 800338c:	d00a      	beq.n	80033a4 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 800338e:	7dba      	ldrb	r2, [r7, #22]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	d10f      	bne.n	80033c4 <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 80033a4:	7dba      	ldrb	r2, [r7, #22]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	2101      	movs	r1, #1
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe f831 	bl	8001420 <bmi2_set_sensor_config>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	e014      	b.n	80033ee <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 80033c4:	7d7b      	ldrb	r3, [r7, #21]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd ff50 	bl	8001272 <bmi2_set_adv_power_save>
 80033d2:	4603      	mov	r3, r0
 80033d4:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 80033d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 80033de:	7dbb      	ldrb	r3, [r7, #22]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4619      	mov	r1, r3
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fdf7 	bl	8003fd8 <set_feat_config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80033ee:	7dbb      	ldrb	r3, [r7, #22]
 80033f0:	3301      	adds	r3, #1
 80033f2:	75bb      	strb	r3, [r7, #22]
 80033f4:	7dba      	ldrb	r2, [r7, #22]
 80033f6:	7afb      	ldrb	r3, [r7, #11]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3a7      	bcc.n	800334c <bmi270_set_sensor_config+0x38>
 80033fc:	e000      	b.n	8003400 <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 80033fe:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003400:	7d7b      	ldrb	r3, [r7, #21]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10d      	bne.n	8003422 <bmi270_set_sensor_config+0x10e>
 8003406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	2001      	movs	r0, #1
 8003412:	f7fd ff2e 	bl	8001272 <bmi2_set_adv_power_save>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800341a:	e002      	b.n	8003422 <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800341c:	23ff      	movs	r3, #255	@ 0xff
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	e000      	b.n	8003424 <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8003422:	bf00      	nop
    }

    return rslt;
 8003424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <null_ptr_check+0x2a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <null_ptr_check+0x2a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <null_ptr_check+0x2a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 800345a:	23ff      	movs	r3, #255	@ 0xff
 800345c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800345e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b08a      	sub	sp, #40	@ 0x28
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8003492:	2300      	movs	r3, #0
 8003494:	723b      	strb	r3, [r7, #8]
 8003496:	2300      	movs	r3, #0
 8003498:	727b      	strb	r3, [r7, #9]
 800349a:	2300      	movs	r3, #0
 800349c:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800349e:	f107 030c 	add.w	r3, r7, #12
 80034a2:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	2104      	movs	r1, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fbcd 	bl	8001c4c <bmi2_extract_input_feat_config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80d8 	beq.w	800366e <set_any_motion_config+0x200>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 80034be:	7a7b      	ldrb	r3, [r7, #9]
 80034c0:	f107 010c 	add.w	r1, r7, #12
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fb2e 	bl	8001b28 <bmi2_get_feat_config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80034d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 80cc 	bne.w	8003674 <set_any_motion_config+0x206>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 80034dc:	7abb      	ldrb	r3, [r7, #10]
 80034de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80034e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 80034ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	6a3a      	ldr	r2, [r7, #32]
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80034fe:	f023 031f 	bic.w	r3, r3, #31
 8003502:	b21a      	sxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b21b      	sxth	r3, r3
 800350a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800350e:	b21b      	sxth	r3, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	b219      	sxth	r1, r3
 8003514:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	4413      	add	r3, r2
 800351e:	b28a      	uxth	r2, r1
 8003520:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8003522:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b21b      	sxth	r3, r3
 8003530:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003534:	b21a      	sxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	b21b      	sxth	r3, r3
 800353c:	035b      	lsls	r3, r3, #13
 800353e:	b21b      	sxth	r3, r3
 8003540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003544:	b21b      	sxth	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b219      	sxth	r1, r3
 800354a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	4413      	add	r3, r2
 8003554:	b28a      	uxth	r2, r1
 8003556:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8003558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	4413      	add	r3, r2
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b21b      	sxth	r3, r3
 8003566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800356a:	b21a      	sxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	88db      	ldrh	r3, [r3, #6]
 8003570:	b21b      	sxth	r3, r3
 8003572:	039b      	lsls	r3, r3, #14
 8003574:	b21b      	sxth	r3, r3
 8003576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357a:	b21b      	sxth	r3, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	b219      	sxth	r1, r3
 8003580:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	4413      	add	r3, r2
 800358a:	b28a      	uxth	r2, r1
 800358c:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 800358e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	4413      	add	r3, r2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b21b      	sxth	r3, r3
 800359c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035a0:	b21a      	sxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	891b      	ldrh	r3, [r3, #8]
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	03db      	lsls	r3, r3, #15
 80035aa:	b21b      	sxth	r3, r3
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b219      	sxth	r1, r3
 80035b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	4413      	add	r3, r2
 80035ba:	b28a      	uxth	r2, r1
 80035bc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 80035be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035c2:	3301      	adds	r3, #1
 80035c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 80035c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b21b      	sxth	r3, r3
 80035d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	b21a      	sxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	885b      	ldrh	r3, [r3, #2]
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	b219      	sxth	r1, r3
 80035f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	6a3a      	ldr	r2, [r7, #32]
 80035f8:	4413      	add	r3, r2
 80035fa:	b28a      	uxth	r2, r1
 80035fc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80035fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003602:	3301      	adds	r3, #1
 8003604:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 8003608:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	7abb      	ldrb	r3, [r7, #10]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800361e:	e015      	b.n	800364c <set_any_motion_config+0x1de>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8003620:	7abb      	ldrb	r3, [r7, #10]
 8003622:	461a      	mov	r2, r3
 8003624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003628:	4413      	add	r3, r2
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 800362e:	7abb      	ldrb	r3, [r7, #10]
 8003630:	4619      	mov	r1, r3
 8003632:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003636:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	3328      	adds	r3, #40	@ 0x28
 800363c:	443b      	add	r3, r7
 800363e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003642:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003646:	3301      	adds	r3, #1
 8003648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800364c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003650:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003654:	429a      	cmp	r2, r3
 8003656:	d3e3      	bcc.n	8003620 <set_any_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003658:	f107 010c 	add.w	r1, r7, #12
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2210      	movs	r2, #16
 8003660:	2030      	movs	r0, #48	@ 0x30
 8003662:	f7fd fd32 	bl	80010ca <bmi2_set_regs>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800366c:	e002      	b.n	8003674 <set_any_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800366e:	23f8      	movs	r3, #248	@ 0xf8
 8003670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003674:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	@ 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 80036a4:	2300      	movs	r3, #0
 80036a6:	723b      	strb	r3, [r7, #8]
 80036a8:	2300      	movs	r3, #0
 80036aa:	727b      	strb	r3, [r7, #9]
 80036ac:	2300      	movs	r3, #0
 80036ae:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	2105      	movs	r1, #5
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fac4 	bl	8001c4c <bmi2_extract_input_feat_config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80d8 	beq.w	8003880 <set_no_motion_config+0x200>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 80036d0:	7a7b      	ldrb	r3, [r7, #9]
 80036d2:	f107 010c 	add.w	r1, r7, #12
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fa25 	bl	8001b28 <bmi2_get_feat_config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80036e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 80cc 	bne.w	8003886 <set_no_motion_config+0x206>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 80036ee:	7abb      	ldrb	r3, [r7, #10]
 80036f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80036f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 80036fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	4413      	add	r3, r2
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b21b      	sxth	r3, r3
 800370c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003710:	f023 031f 	bic.w	r3, r3, #31
 8003714:	b21a      	sxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b21b      	sxth	r3, r3
 800371c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003720:	b21b      	sxth	r3, r3
 8003722:	4313      	orrs	r3, r2
 8003724:	b219      	sxth	r1, r3
 8003726:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	4413      	add	r3, r2
 8003730:	b28a      	uxth	r2, r1
 8003732:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8003734:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b21b      	sxth	r3, r3
 8003742:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003746:	b21a      	sxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	889b      	ldrh	r3, [r3, #4]
 800374c:	b21b      	sxth	r3, r3
 800374e:	035b      	lsls	r3, r3, #13
 8003750:	b21b      	sxth	r3, r3
 8003752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003756:	b21b      	sxth	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	b219      	sxth	r1, r3
 800375c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	4413      	add	r3, r2
 8003766:	b28a      	uxth	r2, r1
 8003768:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 800376a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	4413      	add	r3, r2
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b21b      	sxth	r3, r3
 8003778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800377c:	b21a      	sxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	88db      	ldrh	r3, [r3, #6]
 8003782:	b21b      	sxth	r3, r3
 8003784:	039b      	lsls	r3, r3, #14
 8003786:	b21b      	sxth	r3, r3
 8003788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800378c:	b21b      	sxth	r3, r3
 800378e:	4313      	orrs	r3, r2
 8003790:	b219      	sxth	r1, r3
 8003792:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	4413      	add	r3, r2
 800379c:	b28a      	uxth	r2, r1
 800379e:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 80037a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	6a3a      	ldr	r2, [r7, #32]
 80037a8:	4413      	add	r3, r2
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037b2:	b21a      	sxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	891b      	ldrh	r3, [r3, #8]
 80037b8:	b21b      	sxth	r3, r3
 80037ba:	03db      	lsls	r3, r3, #15
 80037bc:	b21b      	sxth	r3, r3
 80037be:	4313      	orrs	r3, r2
 80037c0:	b219      	sxth	r1, r3
 80037c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	4413      	add	r3, r2
 80037cc:	b28a      	uxth	r2, r1
 80037ce:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 80037d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037d4:	3301      	adds	r3, #1
 80037d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 80037da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	4413      	add	r3, r2
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b21b      	sxth	r3, r3
 80037e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037ec:	f023 0307 	bic.w	r3, r3, #7
 80037f0:	b21a      	sxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	885b      	ldrh	r3, [r3, #2]
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	b219      	sxth	r1, r3
 8003802:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	4413      	add	r3, r2
 800380c:	b28a      	uxth	r2, r1
 800380e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003810:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003814:	3301      	adds	r3, #1
 8003816:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 800381a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	7abb      	ldrb	r3, [r7, #10]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800382a:	2300      	movs	r3, #0
 800382c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003830:	e015      	b.n	800385e <set_no_motion_config+0x1de>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8003832:	7abb      	ldrb	r3, [r7, #10]
 8003834:	461a      	mov	r2, r3
 8003836:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800383a:	4413      	add	r3, r2
 800383c:	6a3a      	ldr	r2, [r7, #32]
 800383e:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 8003840:	7abb      	ldrb	r3, [r7, #10]
 8003842:	4619      	mov	r1, r3
 8003844:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003848:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 800384a:	7812      	ldrb	r2, [r2, #0]
 800384c:	3328      	adds	r3, #40	@ 0x28
 800384e:	443b      	add	r3, r7
 8003850:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003854:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003858:	3301      	adds	r3, #1
 800385a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800385e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003862:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003866:	429a      	cmp	r2, r3
 8003868:	d3e3      	bcc.n	8003832 <set_no_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800386a:	f107 010c 	add.w	r1, r7, #12
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	2030      	movs	r0, #48	@ 0x30
 8003874:	f7fd fc29 	bl	80010ca <bmi2_set_regs>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800387e:	e002      	b.n	8003886 <set_no_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003880:	23f8      	movs	r3, #248	@ 0xf8
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003886:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800388a:	4618      	mov	r0, r3
 800388c:	3728      	adds	r7, #40	@ 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b08a      	sub	sp, #40	@ 0x28
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 80038b6:	2300      	movs	r3, #0
 80038b8:	723b      	strb	r3, [r7, #8]
 80038ba:	2300      	movs	r3, #0
 80038bc:	727b      	strb	r3, [r7, #9]
 80038be:	2300      	movs	r3, #0
 80038c0:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 80038c8:	f107 0308 	add.w	r3, r7, #8
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	2103      	movs	r1, #3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe f9bb 	bl	8001c4c <bmi2_extract_input_feat_config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80038da:	7ffb      	ldrb	r3, [r7, #31]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d055      	beq.n	800398c <set_sig_motion_config+0xfa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 80038e0:	7a7b      	ldrb	r3, [r7, #9]
 80038e2:	f107 010c 	add.w	r1, r7, #12
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe f91d 	bl	8001b28 <bmi2_get_feat_config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80038f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d14a      	bne.n	8003992 <set_sig_motion_config+0x100>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 80038fc:	7abb      	ldrb	r3, [r7, #10]
 80038fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003902:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 800390c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	4413      	add	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 800391c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003920:	3301      	adds	r3, #1
 8003922:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 8003926:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	7abb      	ldrb	r3, [r7, #10]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003936:	2300      	movs	r3, #0
 8003938:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800393c:	e015      	b.n	800396a <set_sig_motion_config+0xd8>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 800393e:	7abb      	ldrb	r3, [r7, #10]
 8003940:	461a      	mov	r2, r3
 8003942:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003946:	4413      	add	r3, r2
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 800394c:	7abb      	ldrb	r3, [r7, #10]
 800394e:	4619      	mov	r1, r3
 8003950:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003954:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	3328      	adds	r3, #40	@ 0x28
 800395a:	443b      	add	r3, r7
 800395c:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003960:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003964:	3301      	adds	r3, #1
 8003966:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800396a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800396e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003972:	429a      	cmp	r2, r3
 8003974:	d3e3      	bcc.n	800393e <set_sig_motion_config+0xac>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003976:	f107 010c 	add.w	r1, r7, #12
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2210      	movs	r2, #16
 800397e:	2030      	movs	r0, #48	@ 0x30
 8003980:	f7fd fba3 	bl	80010ca <bmi2_set_regs>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800398a:	e002      	b.n	8003992 <set_sig_motion_config+0x100>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800398c:	23f8      	movs	r3, #248	@ 0xf8
 800398e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003992:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003996:	4618      	mov	r0, r3
 8003998:	3728      	adds	r7, #40	@ 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b08c      	sub	sp, #48	@ 0x30
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t index = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 80039c2:	2300      	movs	r3, #0
 80039c4:	723b      	strb	r3, [r7, #8]
 80039c6:	2300      	movs	r3, #0
 80039c8:	727b      	strb	r3, [r7, #9]
 80039ca:	2300      	movs	r3, #0
 80039cc:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 80039ce:	2332      	movs	r3, #50	@ 0x32
 80039d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 80039d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 80039de:	2308      	movs	r3, #8
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 80039f0:	f107 0308 	add.w	r3, r7, #8
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	211d      	movs	r1, #29
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe f927 	bl	8001c4c <bmi2_extract_input_feat_config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8099 	beq.w	8003b3c <set_step_count_params_config+0x19e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 8003a0a:	7a7b      	ldrb	r3, [r7, #9]
 8003a0c:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 8003a0e:	7fba      	ldrb	r2, [r7, #30]
 8003a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a14:	4413      	add	r3, r2
 8003a16:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 8003a18:	7abb      	ldrb	r3, [r7, #10]
 8003a1a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 8003a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a32:	4413      	add	r3, r2
 8003a34:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8003a36:	7fbb      	ldrb	r3, [r7, #30]
 8003a38:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003a3c:	e078      	b.n	8003b30 <set_step_count_params_config+0x192>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 8003a3e:	f107 010c 	add.w	r1, r7, #12
 8003a42:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe f86d 	bl	8001b28 <bmi2_get_feat_config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 8003a54:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d164      	bne.n	8003b26 <set_step_count_params_config+0x188>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8003a5c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003a60:	7fbb      	ldrb	r3, [r7, #30]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d902      	bls.n	8003a6c <set_step_count_params_config+0xce>
                {
                    start_addr = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 8003a6c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003a70:	7f7b      	ldrb	r3, [r7, #29]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d103      	bne.n	8003a7e <set_step_count_params_config+0xe0>
                {
                    max_len = (remain_len / 2);
 8003a76:	7f3b      	ldrb	r3, [r7, #28]
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 8003a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 8003a88:	e015      	b.n	8003ab6 <set_step_count_params_config+0x118>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 8003a8a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	441a      	add	r2, r3
 8003a94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	6a39      	ldr	r1, [r7, #32]
 8003a9c:	440b      	add	r3, r1
 8003a9e:	8812      	ldrh	r2, [r2, #0]
 8003aa0:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 8003aa2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 8003aac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 8003ab6:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8003aba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d3e3      	bcc.n	8003a8a <set_step_count_params_config+0xec>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 8003ac2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	7abb      	ldrb	r3, [r7, #10]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003ad8:	e015      	b.n	8003b06 <set_step_count_params_config+0x168>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8003ada:	7abb      	ldrb	r3, [r7, #10]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ae2:	4413      	add	r3, r2
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 8003ae8:	7abb      	ldrb	r3, [r7, #10]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003af0:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	3330      	adds	r3, #48	@ 0x30
 8003af6:	443b      	add	r3, r7
 8003af8:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 8003afc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b00:	3301      	adds	r3, #1
 8003b02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003b06:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003b0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d3e3      	bcc.n	8003ada <set_step_count_params_config+0x13c>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003b12:	f107 010c 	add.w	r1, r7, #12
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	2030      	movs	r0, #48	@ 0x30
 8003b1c:	f7fd fad5 	bl	80010ca <bmi2_set_regs>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8003b26:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003b30:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003b34:	7f7b      	ldrb	r3, [r7, #29]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d981      	bls.n	8003a3e <set_step_count_params_config+0xa0>
 8003b3a:	e002      	b.n	8003b42 <set_step_count_params_config+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003b3c:	23f8      	movs	r3, #248	@ 0xf8
 8003b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003b42:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3730      	adds	r7, #48	@ 0x30
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b08a      	sub	sp, #40	@ 0x28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8003b72:	2300      	movs	r3, #0
 8003b74:	723b      	strb	r3, [r7, #8]
 8003b76:	2300      	movs	r3, #0
 8003b78:	727b      	strb	r3, [r7, #9]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	2107      	movs	r1, #7
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe f85d 	bl	8001c4c <bmi2_extract_input_feat_config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8084 	beq.w	8003ca6 <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8003b9e:	7a7b      	ldrb	r3, [r7, #9]
 8003ba0:	f107 010c 	add.w	r1, r7, #12
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd ffbe 	bl	8001b28 <bmi2_get_feat_config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003bb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d178      	bne.n	8003cac <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 8003bba:	7abb      	ldrb	r3, [r7, #10]
 8003bbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003bc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 8003bca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bdc:	f023 0303 	bic.w	r3, r3, #3
 8003be0:	b21a      	sxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bec:	b21b      	sxth	r3, r3
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	b219      	sxth	r1, r3
 8003bf2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b28a      	uxth	r2, r1
 8003bfe:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 8003c00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c12:	b21a      	sxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	885b      	ldrh	r3, [r3, #2]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b219      	sxth	r1, r3
 8003c28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	6a3a      	ldr	r2, [r7, #32]
 8003c30:	4413      	add	r3, r2
 8003c32:	b28a      	uxth	r2, r1
 8003c34:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 8003c36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 8003c40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	7abb      	ldrb	r3, [r7, #10]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c56:	e015      	b.n	8003c84 <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003c58:	7abb      	ldrb	r3, [r7, #10]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c60:	4413      	add	r3, r2
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 8003c66:	7abb      	ldrb	r3, [r7, #10]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c6e:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	3328      	adds	r3, #40	@ 0x28
 8003c74:	443b      	add	r3, r7
 8003c76:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c84:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003c88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d3e3      	bcc.n	8003c58 <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003c90:	f107 010c 	add.w	r1, r7, #12
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	2030      	movs	r0, #48	@ 0x30
 8003c9a:	f7fd fa16 	bl	80010ca <bmi2_set_regs>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003ca4:	e002      	b.n	8003cac <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003ca6:	23f8      	movs	r3, #248	@ 0xf8
 8003ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3728      	adds	r7, #40	@ 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	@ 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
 8003cce:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8003cdc:	2300      	movs	r3, #0
 8003cde:	723b      	strb	r3, [r7, #8]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	727b      	strb	r3, [r7, #9]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003ce8:	f107 030c 	add.w	r3, r7, #12
 8003cec:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8003cee:	f107 0308 	add.w	r3, r7, #8
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	2113      	movs	r1, #19
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd ffa8 	bl	8001c4c <bmi2_extract_input_feat_config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8091 	beq.w	8003e2a <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 8003d08:	7a7b      	ldrb	r3, [r7, #9]
 8003d0a:	f107 010c 	add.w	r1, r7, #12
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd ff09 	bl	8001b28 <bmi2_get_feat_config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003d1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 8085 	bne.w	8003e30 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 8003d26:	7abb      	ldrb	r3, [r7, #10]
 8003d28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003d2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 8003d36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	b21b      	sxth	r3, r3
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b219      	sxth	r1, r3
 8003d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	4413      	add	r3, r2
 8003d68:	b28a      	uxth	r2, r1
 8003d6a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 8003d6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d70:	3301      	adds	r3, #1
 8003d72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 8003d76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	4413      	add	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	8852      	ldrh	r2, [r2, #2]
 8003d84:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 8003d86:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 8003d90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	6a3a      	ldr	r2, [r7, #32]
 8003d98:	4413      	add	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	8892      	ldrh	r2, [r2, #4]
 8003d9e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 8003da0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003da4:	3301      	adds	r3, #1
 8003da6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 8003daa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	4413      	add	r3, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	88d2      	ldrh	r2, [r2, #6]
 8003db8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003dba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 8003dc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	7abb      	ldrb	r3, [r7, #10]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003dda:	e015      	b.n	8003e08 <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8003ddc:	7abb      	ldrb	r3, [r7, #10]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003de4:	4413      	add	r3, r2
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 8003dea:	7abb      	ldrb	r3, [r7, #10]
 8003dec:	4619      	mov	r1, r3
 8003dee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003df2:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	3328      	adds	r3, #40	@ 0x28
 8003df8:	443b      	add	r3, r7
 8003dfa:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003dfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e02:	3301      	adds	r3, #1
 8003e04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003e08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003e0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3e3      	bcc.n	8003ddc <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003e14:	f107 010c 	add.w	r1, r7, #12
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	2030      	movs	r0, #48	@ 0x30
 8003e1e:	f7fd f954 	bl	80010ca <bmi2_set_regs>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003e28:	e002      	b.n	8003e30 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003e2a:	23f8      	movs	r3, #248	@ 0xf8
 8003e2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3728      	adds	r7, #40	@ 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8003e60:	2300      	movs	r3, #0
 8003e62:	723b      	strb	r3, [r7, #8]
 8003e64:	2300      	movs	r3, #0
 8003e66:	727b      	strb	r3, [r7, #9]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	2114      	movs	r1, #20
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fee6 	bl	8001c4c <bmi2_extract_input_feat_config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003e84:	7ffb      	ldrb	r3, [r7, #31]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 809d 	beq.w	8003fc6 <set_wrist_wear_wake_up_config+0x18a>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8003e8c:	7a7b      	ldrb	r3, [r7, #9]
 8003e8e:	f107 010c 	add.w	r1, r7, #12
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fe47 	bl	8001b28 <bmi2_get_feat_config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 8091 	bne.w	8003fcc <set_wrist_wear_wake_up_config+0x190>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 8003eaa:	7abb      	ldrb	r3, [r7, #10]
 8003eac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003eb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 8003eba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 8003ec4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	6a3a      	ldr	r2, [r7, #32]
 8003ecc:	4413      	add	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	8812      	ldrh	r2, [r2, #0]
 8003ed2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 8003ed4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 8003ede:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	8852      	ldrh	r2, [r2, #2]
 8003eec:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 8003eee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 8003ef8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	6a3a      	ldr	r2, [r7, #32]
 8003f00:	4413      	add	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	8892      	ldrh	r2, [r2, #4]
 8003f06:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 8003f08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 8003f12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	88d2      	ldrh	r2, [r2, #6]
 8003f20:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 8003f22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f26:	3301      	adds	r3, #1
 8003f28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 8003f2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	4413      	add	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	8912      	ldrh	r2, [r2, #8]
 8003f3a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 8003f3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f40:	3301      	adds	r3, #1
 8003f42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 8003f46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	4413      	add	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	8952      	ldrh	r2, [r2, #10]
 8003f54:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003f56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 8003f60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	7abb      	ldrb	r3, [r7, #10]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003f76:	e015      	b.n	8003fa4 <set_wrist_wear_wake_up_config+0x168>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003f78:	7abb      	ldrb	r3, [r7, #10]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f80:	4413      	add	r3, r2
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 8003f86:	7abb      	ldrb	r3, [r7, #10]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f8e:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	3328      	adds	r3, #40	@ 0x28
 8003f94:	443b      	add	r3, r7
 8003f96:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003fa4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003fa8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d3e3      	bcc.n	8003f78 <set_wrist_wear_wake_up_config+0x13c>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003fb0:	f107 010c 	add.w	r1, r7, #12
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	2030      	movs	r0, #48	@ 0x30
 8003fba:	f7fd f886 	bl	80010ca <bmi2_set_regs>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fc4:	e002      	b.n	8003fcc <set_wrist_wear_wake_up_config+0x190>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003fc6:	23f8      	movs	r3, #248	@ 0xf8
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3728      	adds	r7, #40	@ 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 8003fe6:	7afa      	ldrb	r2, [r7, #11]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	3b03      	subs	r3, #3
 8003ffa:	2b1a      	cmp	r3, #26
 8003ffc:	f200 80aa 	bhi.w	8004154 <set_feat_config+0x17c>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <set_feat_config+0x30>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	080040b5 	.word	0x080040b5
 800400c:	08004075 	.word	0x08004075
 8004010:	08004095 	.word	0x08004095
 8004014:	080040f5 	.word	0x080040f5
 8004018:	080040f5 	.word	0x080040f5
 800401c:	080040f5 	.word	0x080040f5
 8004020:	08004155 	.word	0x08004155
 8004024:	08004155 	.word	0x08004155
 8004028:	08004155 	.word	0x08004155
 800402c:	08004155 	.word	0x08004155
 8004030:	08004155 	.word	0x08004155
 8004034:	08004155 	.word	0x08004155
 8004038:	08004155 	.word	0x08004155
 800403c:	08004155 	.word	0x08004155
 8004040:	08004155 	.word	0x08004155
 8004044:	08004155 	.word	0x08004155
 8004048:	08004115 	.word	0x08004115
 800404c:	08004135 	.word	0x08004135
 8004050:	08004155 	.word	0x08004155
 8004054:	08004155 	.word	0x08004155
 8004058:	08004155 	.word	0x08004155
 800405c:	08004155 	.word	0x08004155
 8004060:	08004155 	.word	0x08004155
 8004064:	08004155 	.word	0x08004155
 8004068:	08004155 	.word	0x08004155
 800406c:	08004155 	.word	0x08004155
 8004070:	080040d5 	.word	0x080040d5
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8004074:	7afa      	ldrb	r2, [r7, #11]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff f9f0 	bl	800346e <set_any_motion_config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]
            break;
 8004092:	e062      	b.n	800415a <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8004094:	7afa      	ldrb	r2, [r7, #11]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fae9 	bl	8003680 <set_no_motion_config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	75fb      	strb	r3, [r7, #23]
            break;
 80040b2:	e052      	b.n	800415a <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80040b4:	7afa      	ldrb	r2, [r7, #11]
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fbe2 	bl	8003892 <set_sig_motion_config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	75fb      	strb	r3, [r7, #23]
            break;
 80040d2:	e042      	b.n	800415a <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 80040d4:	7afa      	ldrb	r2, [r7, #11]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fc58 	bl	800399e <set_step_count_params_config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]
            break;
 80040f2:	e032      	b.n	800415a <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 80040f4:	7afa      	ldrb	r2, [r7, #11]
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fd20 	bl	8003b4e <set_step_config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
            break;
 8004112:	e022      	b.n	800415a <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 8004114:	7afa      	ldrb	r2, [r7, #11]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fdc5 	bl	8003cb8 <set_wrist_gest_config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]
            break;
 8004132:	e012      	b.n	800415a <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 8004134:	7afa      	ldrb	r2, [r7, #11]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	3304      	adds	r3, #4
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fe77 	bl	8003e3c <set_wrist_wear_wake_up_config>
 800414e:	4603      	mov	r3, r0
 8004150:	75fb      	strb	r3, [r7, #23]
            break;
 8004152:	e002      	b.n	800415a <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 8004154:	23f8      	movs	r3, #248	@ 0xf8
 8004156:	75fb      	strb	r3, [r7, #23]
            break;
 8004158:	bf00      	nop
    }

    return rslt;
 800415a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop

08004168 <bmi2_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	8812      	ldrh	r2, [r2, #0]
 8004180:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Read(intf_info.bus, intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Read(intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
 8004182:	7d38      	ldrb	r0, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	b29b      	uxth	r3, r3
 8004188:	7bf9      	ldrb	r1, [r7, #15]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	f003 fdce 	bl	8007d2c <SensorAPI_I2Cx_Read>
 8004190:	4603      	mov	r3, r0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <bmi2_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Write(intf_info.bus, intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Write(intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
 80041b4:	7d38      	ldrb	r0, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	7bf9      	ldrb	r1, [r7, #15]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	f003 fdd7 	bl	8007d70 <SensorAPI_I2Cx_Write>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <bmi2_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bmi2_delay_us(uint32_t period, void *intf_ptr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	bmi160_delay_us(period);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f003 fd8e 	bl	8007cf8 <bmi160_delay_us>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <bmi2_interface_init>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t bmi2_interface_init(struct bmi2_dev *bmi, uint8_t intf)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMI2_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

    if (bmi != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d026      	beq.n	8004248 <bmi2_interface_init+0x64>
//
//            return COINES_E_UNABLE_OPEN_DEVICE;
//        }

        /* Bus configuration : I2C */
        if (intf == BMI2_I2C_INTF)
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10e      	bne.n	800421e <bmi2_interface_init+0x3a>
        {
            printf("I2C Interface \n");
 8004200:	4815      	ldr	r0, [pc, #84]	@ (8004258 <bmi2_interface_init+0x74>)
 8004202:	f012 f909 	bl	8016418 <puts>

            /* To initialize the user I2C function */
            dev_addr = BMI2_I2C_SEC_ADDR;
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <bmi2_interface_init+0x78>)
 8004208:	2269      	movs	r2, #105	@ 0x69
 800420a:	701a      	strb	r2, [r3, #0]
            bmi->intf = BMI2_I2C_INTF;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	725a      	strb	r2, [r3, #9]
            bmi->read = bmi2_i2c_read;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <bmi2_interface_init+0x7c>)
 8004216:	639a      	str	r2, [r3, #56]	@ 0x38
            bmi->write = bmi2_i2c_write;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a12      	ldr	r2, [pc, #72]	@ (8004264 <bmi2_interface_init+0x80>)
 800421c:	63da      	str	r2, [r3, #60]	@ 0x3c
//        }

//        if (COINES_SUCCESS == result)
//        {
            /* Assign device address and bus instance to interface pointer */
            intf_conf.bus = bus_inst;
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <bmi2_interface_init+0x84>)
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	4b12      	ldr	r3, [pc, #72]	@ (800426c <bmi2_interface_init+0x88>)
 8004224:	705a      	strb	r2, [r3, #1]
            intf_conf.dev_addr = dev_addr;
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <bmi2_interface_init+0x78>)
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <bmi2_interface_init+0x88>)
 800422c:	701a      	strb	r2, [r3, #0]
            bmi->intf_ptr = ((void *)&intf_conf);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0e      	ldr	r2, [pc, #56]	@ (800426c <bmi2_interface_init+0x88>)
 8004232:	605a      	str	r2, [r3, #4]

            /* Configure delay in microseconds */
            bmi->delay_us = bmi2_delay_us;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0e      	ldr	r2, [pc, #56]	@ (8004270 <bmi2_interface_init+0x8c>)
 8004238:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
            bmi->read_write_len = READ_WRITE_LEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	222e      	movs	r2, #46	@ 0x2e
 800423e:	81da      	strh	r2, [r3, #14]

            /* Assign to NULL to load the default config file. */
            bmi->config_file_ptr = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	615a      	str	r2, [r3, #20]
 8004246:	e001      	b.n	800424c <bmi2_interface_init+0x68>
//            rslt = COINES_E_COMM_INIT_FAILED;
//        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8004248:	23ff      	movs	r3, #255	@ 0xff
 800424a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800424c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	08019248 	.word	0x08019248
 800425c:	20000324 	.word	0x20000324
 8004260:	08004169 	.word	0x08004169
 8004264:	0800419b 	.word	0x0800419b
 8004268:	20000325 	.word	0x20000325
 800426c:	20000328 	.word	0x20000328
 8004270:	080041cd 	.word	0x080041cd

08004274 <bmi2_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi2_error_codes_print_result(int8_t rslt)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
    switch (rslt)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	3322      	adds	r3, #34	@ 0x22
 8004284:	2b24      	cmp	r3, #36	@ 0x24
 8004286:	f200 812d 	bhi.w	80044e4 <bmi2_error_codes_print_result+0x270>
 800428a:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <bmi2_error_codes_print_result+0x1c>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080044d7 	.word	0x080044d7
 8004294:	080044c9 	.word	0x080044c9
 8004298:	080044bb 	.word	0x080044bb
 800429c:	080044e5 	.word	0x080044e5
 80042a0:	080044ad 	.word	0x080044ad
 80042a4:	080044e5 	.word	0x080044e5
 80042a8:	080044e5 	.word	0x080044e5
 80042ac:	0800449f 	.word	0x0800449f
 80042b0:	08004491 	.word	0x08004491
 80042b4:	08004483 	.word	0x08004483
 80042b8:	08004475 	.word	0x08004475
 80042bc:	08004467 	.word	0x08004467
 80042c0:	08004459 	.word	0x08004459
 80042c4:	0800444b 	.word	0x0800444b
 80042c8:	0800443d 	.word	0x0800443d
 80042cc:	0800442f 	.word	0x0800442f
 80042d0:	08004421 	.word	0x08004421
 80042d4:	08004413 	.word	0x08004413
 80042d8:	08004379 	.word	0x08004379
 80042dc:	08004405 	.word	0x08004405
 80042e0:	080043f7 	.word	0x080043f7
 80042e4:	080043e9 	.word	0x080043e9
 80042e8:	08004387 	.word	0x08004387
 80042ec:	080044e5 	.word	0x080044e5
 80042f0:	080043db 	.word	0x080043db
 80042f4:	080043cd 	.word	0x080043cd
 80042f8:	0800436b 	.word	0x0800436b
 80042fc:	080043bf 	.word	0x080043bf
 8004300:	080043b1 	.word	0x080043b1
 8004304:	080043a3 	.word	0x080043a3
 8004308:	08004395 	.word	0x08004395
 800430c:	0800435d 	.word	0x0800435d
 8004310:	0800434f 	.word	0x0800434f
 8004314:	08004341 	.word	0x08004341
 8004318:	080044f3 	.word	0x080044f3
 800431c:	08004325 	.word	0x08004325
 8004320:	08004333 	.word	0x08004333

            /* Do nothing */
            break;

        case BMI2_W_FIFO_EMPTY:
            printf("Warning [%d] : FIFO empty\r\n", rslt);
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	4619      	mov	r1, r3
 800432a:	4874      	ldr	r0, [pc, #464]	@ (80044fc <bmi2_error_codes_print_result+0x288>)
 800432c:	f012 f804 	bl	8016338 <iprintf>
            break;
 8004330:	e0e0      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>
        case BMI2_W_PARTIAL_READ:
            printf("Warning [%d] : FIFO partial read\r\n", rslt);
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	4619      	mov	r1, r3
 8004338:	4871      	ldr	r0, [pc, #452]	@ (8004500 <bmi2_error_codes_print_result+0x28c>)
 800433a:	f011 fffd 	bl	8016338 <iprintf>
            break;
 800433e:	e0d9      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>
        case BMI2_E_NULL_PTR:
            printf(
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	4619      	mov	r1, r3
 8004346:	486f      	ldr	r0, [pc, #444]	@ (8004504 <bmi2_error_codes_print_result+0x290>)
 8004348:	f011 fff6 	bl	8016338 <iprintf>
                "Error [%d] : Null pointer error. It occurs when the user tries to assign value (not address) to a pointer," " which has been initialized to NULL.\r\n",
                rslt);
            break;
 800434c:	e0d2      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_COM_FAIL:
            printf(
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	4619      	mov	r1, r3
 8004354:	486c      	ldr	r0, [pc, #432]	@ (8004508 <bmi2_error_codes_print_result+0x294>)
 8004356:	f011 ffef 	bl	8016338 <iprintf>
                "Error [%d] : Communication failure error. It occurs due to read/write operation failure and also due " "to power failure during communication\r\n",
                rslt);
            break;
 800435a:	e0cb      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DEV_NOT_FOUND:
            printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	4619      	mov	r1, r3
 8004362:	486a      	ldr	r0, [pc, #424]	@ (800450c <bmi2_error_codes_print_result+0x298>)
 8004364:	f011 ffe8 	bl	8016338 <iprintf>
                   rslt);
            break;
 8004368:	e0c4      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_SENSOR:
            printf(
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	4619      	mov	r1, r3
 8004370:	4867      	ldr	r0, [pc, #412]	@ (8004510 <bmi2_error_codes_print_result+0x29c>)
 8004372:	f011 ffe1 	bl	8016338 <iprintf>
                "Error [%d] : Invalid sensor error. It occurs when there is a mismatch in the requested feature with the " "available one\r\n",
                rslt);
            break;
 8004376:	e0bd      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_FAIL:
            printf(
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	4619      	mov	r1, r3
 800437e:	4865      	ldr	r0, [pc, #404]	@ (8004514 <bmi2_error_codes_print_result+0x2a0>)
 8004380:	f011 ffda 	bl	8016338 <iprintf>
                "Error [%d] : Self-test failed error. It occurs when the validation of accel self-test data is " "not satisfied\r\n",
                rslt);
            break;
 8004384:	e0b6      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INT_PIN:
            printf(
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	4619      	mov	r1, r3
 800438c:	4862      	ldr	r0, [pc, #392]	@ (8004518 <bmi2_error_codes_print_result+0x2a4>)
 800438e:	f011 ffd3 	bl	8016338 <iprintf>
                "Error [%d] : Invalid interrupt pin error. It occurs when the user tries to configure interrupt pins " "apart from INT1 and INT2\r\n",
                rslt);
            break;
 8004392:	e0af      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_OUT_OF_RANGE:
            printf(
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	4619      	mov	r1, r3
 800439a:	4860      	ldr	r0, [pc, #384]	@ (800451c <bmi2_error_codes_print_result+0x2a8>)
 800439c:	f011 ffcc 	bl	8016338 <iprintf>
                "Error [%d] : Out of range error. It occurs when the data exceeds from filtered or unfiltered data from " "fifo and also when the range exceeds the maximum range for accel and gyro while performing FOC\r\n",
                rslt);
            break;
 80043a0:	e0a8      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_INVALID_CFG:
            printf(
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	4619      	mov	r1, r3
 80043a8:	485d      	ldr	r0, [pc, #372]	@ (8004520 <bmi2_error_codes_print_result+0x2ac>)
 80043aa:	f011 ffc5 	bl	8016338 <iprintf>
                "Error [%d] : Invalid Accel configuration error. It occurs when there is an error in accel configuration" " register which could be one among range, BW or filter performance in reg address 0x40\r\n",
                rslt);
            break;
 80043ae:	e0a1      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYRO_INVALID_CFG:
            printf(
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	4619      	mov	r1, r3
 80043b6:	485b      	ldr	r0, [pc, #364]	@ (8004524 <bmi2_error_codes_print_result+0x2b0>)
 80043b8:	f011 ffbe 	bl	8016338 <iprintf>
                "Error [%d] : Invalid Gyro configuration error. It occurs when there is a error in gyro configuration" "register which could be one among range, BW or filter performance in reg address 0x42\r\n",
                rslt);
            break;
 80043bc:	e09a      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_GYR_INVALID_CFG:
            printf(
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4858      	ldr	r0, [pc, #352]	@ (8004528 <bmi2_error_codes_print_result+0x2b4>)
 80043c6:	f011 ffb7 	bl	8016338 <iprintf>
                "Error [%d] : Invalid Accel-Gyro configuration error. It occurs when there is a error in accel and gyro" " configuration registers which could be one among range, BW or filter performance in reg address 0x40 " "and 0x42\r\n",
                rslt);
            break;
 80043ca:	e093      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CONFIG_LOAD:
            printf(
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d0:	4619      	mov	r1, r3
 80043d2:	4856      	ldr	r0, [pc, #344]	@ (800452c <bmi2_error_codes_print_result+0x2b8>)
 80043d4:	f011 ffb0 	bl	8016338 <iprintf>
                "Error [%d] : Configuration load error. It occurs when failure observed while loading the configuration " "into the sensor\r\n",
                rslt);
            break;
 80043d8:	e08c      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_PAGE:
            printf(
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	4619      	mov	r1, r3
 80043e0:	4853      	ldr	r0, [pc, #332]	@ (8004530 <bmi2_error_codes_print_result+0x2bc>)
 80043e2:	f011 ffa9 	bl	8016338 <iprintf>
                "Error [%d] : Invalid page error. It occurs due to failure in writing the correct feature configuration " "from selected page\r\n",
                rslt);
            break;
 80043e6:	e085      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SET_APS_FAIL:
            printf(
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	4619      	mov	r1, r3
 80043ee:	4851      	ldr	r0, [pc, #324]	@ (8004534 <bmi2_error_codes_print_result+0x2c0>)
 80043f0:	f011 ffa2 	bl	8016338 <iprintf>
                "Error [%d] : APS failure error. It occurs due to failure in write of advance power mode configuration " "register\r\n",
                rslt);
            break;
 80043f4:	e07e      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_INVALID_CFG:
            printf(
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	4619      	mov	r1, r3
 80043fc:	484e      	ldr	r0, [pc, #312]	@ (8004538 <bmi2_error_codes_print_result+0x2c4>)
 80043fe:	f011 ff9b 	bl	8016338 <iprintf>
                "Error [%d] : Invalid AUX configuration error. It occurs when the auxiliary interface settings are not " "enabled properly\r\n",
                rslt);
            break;
 8004402:	e077      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_BUSY:
            printf(
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	4619      	mov	r1, r3
 800440a:	484c      	ldr	r0, [pc, #304]	@ (800453c <bmi2_error_codes_print_result+0x2c8>)
 800440c:	f011 ff94 	bl	8016338 <iprintf>
                "Error [%d] : AUX busy error. It occurs when the auxiliary interface buses are engaged while configuring" " the AUX\r\n",
                rslt);
            break;
 8004410:	e070      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_REMAP_ERROR:
            printf(
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	4619      	mov	r1, r3
 8004418:	4849      	ldr	r0, [pc, #292]	@ (8004540 <bmi2_error_codes_print_result+0x2cc>)
 800441a:	f011 ff8d 	bl	8016338 <iprintf>
                "Error [%d] : Remap error. It occurs due to failure in assigning the remap axes data for all the axes " "after change in axis position\r\n",
                rslt);
            break;
 800441e:	e069      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYR_USER_GAIN_UPD_FAIL:
            printf(
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	4619      	mov	r1, r3
 8004426:	4847      	ldr	r0, [pc, #284]	@ (8004544 <bmi2_error_codes_print_result+0x2d0>)
 8004428:	f011 ff86 	bl	8016338 <iprintf>
                "Error [%d] : Gyro user gain update fail error. It occurs when the reading of user gain update status " "fails\r\n",
                rslt);
            break;
 800442c:	e062      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_NOT_DONE:
            printf(
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	4619      	mov	r1, r3
 8004434:	4844      	ldr	r0, [pc, #272]	@ (8004548 <bmi2_error_codes_print_result+0x2d4>)
 8004436:	f011 ff7f 	bl	8016338 <iprintf>
                "Error [%d] : Self-test not done error. It occurs when the self-test process is ongoing or not " "completed\r\n",
                rslt);
            break;
 800443a:	e05b      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INPUT:
            printf("Error [%d] : Invalid input error. It occurs when the sensor input validity fails\r\n", rslt);
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	4619      	mov	r1, r3
 8004442:	4842      	ldr	r0, [pc, #264]	@ (800454c <bmi2_error_codes_print_result+0x2d8>)
 8004444:	f011 ff78 	bl	8016338 <iprintf>
            break;
 8004448:	e054      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_STATUS:
            printf("Error [%d] : Invalid status error. It occurs when the feature/sensor validity fails\r\n", rslt);
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	4619      	mov	r1, r3
 8004450:	483f      	ldr	r0, [pc, #252]	@ (8004550 <bmi2_error_codes_print_result+0x2dc>)
 8004452:	f011 ff71 	bl	8016338 <iprintf>
            break;
 8004456:	e04d      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_ERROR:
            printf("Error [%d] : CRT error. It occurs when the CRT test has failed\r\n", rslt);
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4619      	mov	r1, r3
 800445e:	483d      	ldr	r0, [pc, #244]	@ (8004554 <bmi2_error_codes_print_result+0x2e0>)
 8004460:	f011 ff6a 	bl	8016338 <iprintf>
            break;
 8004464:	e046      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_ALREADY_RUNNING:
            printf(
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	4619      	mov	r1, r3
 800446c:	483a      	ldr	r0, [pc, #232]	@ (8004558 <bmi2_error_codes_print_result+0x2e4>)
 800446e:	f011 ff63 	bl	8016338 <iprintf>
                "Error [%d] : Self-test already running error. It occurs when the self-test is already running and " "another has been initiated\r\n",
                rslt);
            break;
 8004472:	e03f      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_READY_FOR_DL_FAIL_ABORT:
            printf(
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	4619      	mov	r1, r3
 800447a:	4838      	ldr	r0, [pc, #224]	@ (800455c <bmi2_error_codes_print_result+0x2e8>)
 800447c:	f011 ff5c 	bl	8016338 <iprintf>
                "Error [%d] : CRT ready for download fail abort error. It occurs when download in CRT fails due to wrong " "address location\r\n",
                rslt);
            break;
 8004480:	e038      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DL_ERROR:
            printf(
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	4619      	mov	r1, r3
 8004488:	4835      	ldr	r0, [pc, #212]	@ (8004560 <bmi2_error_codes_print_result+0x2ec>)
 800448a:	f011 ff55 	bl	8016338 <iprintf>
                "Error [%d] : Download error. It occurs when write length exceeds that of the maximum burst length\r\n",
                rslt);
            break;
 800448e:	e031      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_PRECON_ERROR:
            printf(
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4619      	mov	r1, r3
 8004496:	4833      	ldr	r0, [pc, #204]	@ (8004564 <bmi2_error_codes_print_result+0x2f0>)
 8004498:	f011 ff4e 	bl	8016338 <iprintf>
                "Error [%d] : Pre-conditional error. It occurs when precondition to start the feature was not " "completed\r\n",
                rslt);
            break;
 800449c:	e02a      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ABORT_ERROR:
            printf("Error [%d] : Abort error. It occurs when the device was shaken during CRT test\r\n", rslt);
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	4619      	mov	r1, r3
 80044a4:	4830      	ldr	r0, [pc, #192]	@ (8004568 <bmi2_error_codes_print_result+0x2f4>)
 80044a6:	f011 ff47 	bl	8016338 <iprintf>
            break;
 80044aa:	e023      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_WRITE_CYCLE_ONGOING:
            printf(
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	4619      	mov	r1, r3
 80044b2:	482e      	ldr	r0, [pc, #184]	@ (800456c <bmi2_error_codes_print_result+0x2f8>)
 80044b4:	f011 ff40 	bl	8016338 <iprintf>
                "Error [%d] : Write cycle ongoing error. It occurs when the write cycle is already running and another " "has been initiated\r\n",
                rslt);
            break;
 80044b8:	e01c      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_NOT_RUNING:
            printf(
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	4619      	mov	r1, r3
 80044c0:	482b      	ldr	r0, [pc, #172]	@ (8004570 <bmi2_error_codes_print_result+0x2fc>)
 80044c2:	f011 ff39 	bl	8016338 <iprintf>
                "Error [%d] : Self-test is not running error. It occurs when self-test running is disabled while it's " "running\r\n",
                rslt);
            break;
 80044c6:	e015      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DATA_RDY_INT_FAILED:
            printf(
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	4619      	mov	r1, r3
 80044ce:	4829      	ldr	r0, [pc, #164]	@ (8004574 <bmi2_error_codes_print_result+0x300>)
 80044d0:	f011 ff32 	bl	8016338 <iprintf>
                "Error [%d] : Data ready interrupt error. It occurs when the sample count exceeds the FOC sample limit " "and data ready status is not updated\r\n",
                rslt);
            break;
 80044d4:	e00e      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_FOC_POSITION:
            printf(
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	4619      	mov	r1, r3
 80044dc:	4826      	ldr	r0, [pc, #152]	@ (8004578 <bmi2_error_codes_print_result+0x304>)
 80044de:	f011 ff2b 	bl	8016338 <iprintf>
                "Error [%d] : Invalid FOC position error. It occurs when average FOC data is obtained for the wrong" " axes\r\n",
                rslt);
            break;
 80044e2:	e007      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>

        default:
            printf("Error [%d] : Unknown error code\r\n", rslt);
 80044e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e8:	4619      	mov	r1, r3
 80044ea:	4824      	ldr	r0, [pc, #144]	@ (800457c <bmi2_error_codes_print_result+0x308>)
 80044ec:	f011 ff24 	bl	8016338 <iprintf>
            break;
 80044f0:	e000      	b.n	80044f4 <bmi2_error_codes_print_result+0x280>
            break;
 80044f2:	bf00      	nop
    }
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	08019258 	.word	0x08019258
 8004500:	08019274 	.word	0x08019274
 8004504:	08019298 	.word	0x08019298
 8004508:	0801932c 	.word	0x0801932c
 800450c:	080193bc 	.word	0x080193bc
 8004510:	0801941c 	.word	0x0801941c
 8004514:	08019494 	.word	0x08019494
 8004518:	08019504 	.word	0x08019504
 800451c:	08019584 	.word	0x08019584
 8004520:	0801964c 	.word	0x0801964c
 8004524:	0801970c 	.word	0x0801970c
 8004528:	080197c8 	.word	0x080197c8
 800452c:	080198a0 	.word	0x080198a0
 8004530:	0801991c 	.word	0x0801991c
 8004534:	08019998 	.word	0x08019998
 8004538:	08019a0c 	.word	0x08019a0c
 800453c:	08019a88 	.word	0x08019a88
 8004540:	08019afc 	.word	0x08019afc
 8004544:	08019b84 	.word	0x08019b84
 8004548:	08019bf4 	.word	0x08019bf4
 800454c:	08019c60 	.word	0x08019c60
 8004550:	08019cb4 	.word	0x08019cb4
 8004554:	08019d0c 	.word	0x08019d0c
 8004558:	08019d50 	.word	0x08019d50
 800455c:	08019dd0 	.word	0x08019dd0
 8004560:	08019e4c 	.word	0x08019e4c
 8004564:	08019eb0 	.word	0x08019eb0
 8004568:	08019f1c 	.word	0x08019f1c
 800456c:	08019f70 	.word	0x08019f70
 8004570:	08019fec 	.word	0x08019fec
 8004574:	0801a05c 	.word	0x0801a05c
 8004578:	0801a0ec 	.word	0x0801a0ec
 800457c:	0801a158 	.word	0x0801a158

08004580 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	4613      	mov	r3, r2
 8004590:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <bmi160_get_regs+0x24>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 80045a4:	23ff      	movs	r3, #255	@ 0xff
 80045a6:	75fb      	strb	r3, [r7, #23]
 80045a8:	e017      	b.n	80045da <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 80045aa:	89bb      	ldrh	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80045b0:	23f4      	movs	r3, #244	@ 0xf4
 80045b2:	75fb      	strb	r3, [r7, #23]
 80045b4:	e011      	b.n	80045da <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	789b      	ldrb	r3, [r3, #2]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d103      	bne.n	80045c6 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045c4:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69dc      	ldr	r4, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7858      	ldrb	r0, [r3, #1]
 80045ce:	89bb      	ldrh	r3, [r7, #12]
 80045d0:	7bf9      	ldrb	r1, [r7, #15]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	47a0      	blx	r4
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80045da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}

080045e6 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80045e6:	b590      	push	{r4, r7, lr}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	4613      	mov	r3, r2
 80045f6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <bmi160_set_regs+0x28>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 800460e:	23ff      	movs	r3, #255	@ 0xff
 8004610:	75fb      	strb	r3, [r7, #23]
 8004612:	e045      	b.n	80046a0 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8004614:	89bb      	ldrh	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 800461a:	23f4      	movs	r3, #244	@ 0xf4
 800461c:	75fb      	strb	r3, [r7, #23]
 800461e:	e03f      	b.n	80046a0 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	789b      	ldrb	r3, [r3, #2]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d103      	bne.n	8004630 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800462e:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7a1b      	ldrb	r3, [r3, #8]
 8004634:	2b11      	cmp	r3, #17
 8004636:	d003      	beq.n	8004640 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 800463c:	2b15      	cmp	r3, #21
 800463e:	d124      	bne.n	800468a <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1c      	ldr	r4, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7858      	ldrb	r0, [r3, #1]
 8004648:	89bb      	ldrh	r3, [r7, #12]
 800464a:	7bf9      	ldrb	r1, [r7, #15]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	47a0      	blx	r4
 8004650:	4603      	mov	r3, r0
 8004652:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	2001      	movs	r0, #1
 800465a:	4798      	blx	r3
 800465c:	e01a      	b.n	8004694 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1c      	ldr	r4, [r3, #32]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7858      	ldrb	r0, [r3, #1]
 8004666:	7dbb      	ldrb	r3, [r7, #22]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	441a      	add	r2, r3
 800466c:	7bf9      	ldrb	r1, [r7, #15]
 800466e:	2301      	movs	r3, #1
 8004670:	47a0      	blx	r4
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	3301      	adds	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	2001      	movs	r0, #1
 8004682:	4798      	blx	r3
            for (; count < len; count++)
 8004684:	7dbb      	ldrb	r3, [r7, #22]
 8004686:	3301      	adds	r3, #1
 8004688:	75bb      	strb	r3, [r7, #22]
 800468a:	7dbb      	ldrb	r3, [r7, #22]
 800468c:	b29b      	uxth	r3, r3
 800468e:	89ba      	ldrh	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d8e4      	bhi.n	800465e <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8004694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 800469c:	23fe      	movs	r3, #254	@ 0xfe
 800469e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80046a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}

080046ac <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 80046b4:	2303      	movs	r3, #3
 80046b6:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fd3c 	bl	8005136 <null_ptr_check>
 80046be:	4603      	mov	r3, r0
 80046c0:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80046c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10c      	bne.n	80046e4 <bmi160_init+0x38>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	789b      	ldrb	r3, [r3, #2]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d108      	bne.n	80046e4 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80046d2:	f107 010d 	add.w	r1, r7, #13
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	207f      	movs	r0, #127	@ 0x7f
 80046dc:	f7ff ff50 	bl	8004580 <bmi160_get_regs>
 80046e0:	4603      	mov	r3, r0
 80046e2:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80046e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d127      	bne.n	800473c <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80046f2:	e007      	b.n	8004704 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	2024      	movs	r0, #36	@ 0x24
 80046fc:	f7ff ff40 	bl	8004580 <bmi160_get_regs>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	1e5a      	subs	r2, r3, #1
 8004708:	73ba      	strb	r2, [r7, #14]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <bmi160_init+0x6a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2bd1      	cmp	r3, #209	@ 0xd1
 8004714:	d1ee      	bne.n	80046f4 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8004716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <bmi160_init+0x8c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2bd1      	cmp	r3, #209	@ 0xd1
 8004724:	d108      	bne.n	8004738 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	22ff      	movs	r2, #255	@ 0xff
 800472a:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f80b 	bl	8004748 <bmi160_soft_reset>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e001      	b.n	800473c <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8004738:	23fd      	movs	r3, #253	@ 0xfd
 800473a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800473c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8004750:	23b6      	movs	r3, #182	@ 0xb6
 8004752:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <bmi160_soft_reset+0x1a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004762:	23ff      	movs	r3, #255	@ 0xff
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e024      	b.n	80047b2 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8004768:	f107 010e 	add.w	r1, r7, #14
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	207e      	movs	r0, #126	@ 0x7e
 8004772:	f7ff ff38 	bl	80045e6 <bmi160_set_regs>
 8004776:	4603      	mov	r3, r0
 8004778:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	2001      	movs	r0, #1
 8004780:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <bmi160_soft_reset+0x5c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004792:	f107 010e 	add.w	r1, r7, #14
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	207f      	movs	r0, #127	@ 0x7f
 800479c:	f7ff fef0 	bl	8004580 <bmi160_get_regs>
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 80047a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fce2 	bl	8005176 <default_param_settg>
        }
    }

    return rslt;
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <bmi160_set_sens_conf+0x1a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80047d8:	23ff      	movs	r3, #255	@ 0xff
 80047da:	73fb      	strb	r3, [r7, #15]
 80047dc:	e01f      	b.n	800481e <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fcf3 	bl	80051ca <set_accel_conf>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80047e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d116      	bne.n	800481e <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fe2f 	bl	8005454 <set_gyro_conf>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80047fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f811 	bl	800482a <bmi160_set_power_mode>
 8004808:	4603      	mov	r3, r0
 800480a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800480c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fde8 	bl	80053ea <check_invalid_settg>
 800481a:	4603      	mov	r3, r0
 800481c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <bmi160_set_power_mode+0x1a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004844:	23ff      	movs	r3, #255	@ 0xff
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e00d      	b.n	8004866 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 ff0c 	bl	8005668 <set_accel_pwr>
 8004850:	4603      	mov	r3, r0
 8004852:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 ff9a 	bl	8005796 <set_gyro_pwr>
 8004862:	4603      	mov	r3, r0
 8004864:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4603      	mov	r3, r0
 8004880:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8004892:	7d7b      	ldrb	r3, [r7, #21]
 8004894:	109b      	asrs	r3, r3, #2
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 800489e:	7d7b      	ldrb	r3, [r7, #21]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 80048a6:	7d3b      	ldrb	r3, [r7, #20]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 80048ac:	2303      	movs	r3, #3
 80048ae:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03c      	beq.n	8004930 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 80048b6:	7d7b      	ldrb	r3, [r7, #21]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d024      	beq.n	8004906 <bmi160_get_sensor_data+0x94>
 80048bc:	2b03      	cmp	r3, #3
 80048be:	dc34      	bgt.n	800492a <bmi160_get_sensor_data+0xb8>
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <bmi160_get_sensor_data+0x58>
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d00f      	beq.n	80048e8 <bmi160_get_sensor_data+0x76>
 80048c8:	e02f      	b.n	800492a <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 80048d0:	23ff      	movs	r3, #255	@ 0xff
 80048d2:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 80048d4:	e02e      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 80048d6:	7dbb      	ldrb	r3, [r7, #22]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 ff9e 	bl	800581e <get_accel_data>
 80048e2:	4603      	mov	r3, r0
 80048e4:	75fb      	strb	r3, [r7, #23]
                break;
 80048e6:	e025      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 80048ee:	23ff      	movs	r3, #255	@ 0xff
 80048f0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 80048f2:	e01f      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80048f4:	7dbb      	ldrb	r3, [r7, #22]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 f85b 	bl	80059b6 <get_gyro_data>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]
                break;
 8004904:	e016      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <bmi160_get_sensor_data+0xa0>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004912:	23ff      	movs	r3, #255	@ 0xff
 8004914:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8004916:	e00d      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8004918:	7db8      	ldrb	r0, [r7, #22]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	f001 f997 	bl	8005c52 <get_accel_gyro_data>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]
                break;
 8004928:	e004      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 800492a:	23fb      	movs	r3, #251	@ 0xfb
 800492c:	75fb      	strb	r3, [r7, #23]
                break;
 800492e:	e001      	b.n	8004934 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8004930:	23ff      	movs	r3, #255	@ 0xff
 8004932:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004934:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	2b0d      	cmp	r3, #13
 8004954:	d879      	bhi.n	8004a4a <bmi160_set_int_config+0x10a>
 8004956:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <bmi160_set_int_config+0x1c>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004995 	.word	0x08004995
 8004960:	080049a3 	.word	0x080049a3
 8004964:	080049cd 	.word	0x080049cd
 8004968:	080049bf 	.word	0x080049bf
 800496c:	080049bf 	.word	0x080049bf
 8004970:	080049db 	.word	0x080049db
 8004974:	080049e9 	.word	0x080049e9
 8004978:	08004a05 	.word	0x08004a05
 800497c:	080049f7 	.word	0x080049f7
 8004980:	080049b1 	.word	0x080049b1
 8004984:	08004a13 	.word	0x08004a13
 8004988:	08004a21 	.word	0x08004a21
 800498c:	08004a2f 	.word	0x08004a2f
 8004990:	08004a3d 	.word	0x08004a3d
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f963 	bl	8004c62 <set_accel_any_motion_int>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
            break;
 80049a0:	e054      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f9f6 	bl	8004d96 <set_accel_sig_motion_int>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]
            break;
 80049ae:	e04d      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa1d 	bl	8004df2 <set_accel_no_motion_int>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
            break;
 80049bc:	e046      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80049be:	6839      	ldr	r1, [r7, #0]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f97c 	bl	8004cbe <set_accel_tap_int>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73fb      	strb	r3, [r7, #15]
            break;
 80049ca:	e03f      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa3d 	bl	8004e4e <set_accel_step_detect_int>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
            break;
 80049d8:	e038      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80049da:	6839      	ldr	r1, [r7, #0]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa77 	bl	8004ed0 <set_accel_orientation_int>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]
            break;
 80049e6:	e031      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fab1 	bl	8004f52 <set_accel_flat_detect_int>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]
            break;
 80049f4:	e02a      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 faeb 	bl	8004fd4 <set_accel_low_g_int>
 80049fe:	4603      	mov	r3, r0
 8004a00:	73fb      	strb	r3, [r7, #15]
            break;
 8004a02:	e023      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fb2f 	bl	800506a <set_accel_high_g_int>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
            break;
 8004a10:	e01c      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f98b 	bl	8004d30 <set_accel_gyro_data_ready_int>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]
            break;
 8004a1e:	e015      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f002 fd7d 	bl	8007522 <set_fifo_full_int>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
            break;
 8004a2c:	e00e      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f002 fdde 	bl	80075f2 <set_fifo_watermark_int>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
            break;
 8004a3a:	e007      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fb5e 	bl	8005100 <set_intr_pin_config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73fb      	strb	r3, [r7, #15]
            break;
 8004a48:	e000      	b.n	8004a4c <bmi160_set_int_config+0x10c>
        default:
            break;
 8004a4a:	bf00      	nop
    }

    return rslt;
 8004a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb66 	bl	8005136 <null_ptr_check>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8004a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8004a76:	23ff      	movs	r3, #255	@ 0xff
 8004a78:	75fb      	strb	r3, [r7, #23]
 8004a7a:	e06b      	b.n	8004b54 <bmi160_start_foc+0xfc>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f002 fe3f 	bl	8007702 <configure_offset_enable>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8004a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d161      	bne.n	8004b54 <bmi160_start_foc+0xfc>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004a90:	f107 0116 	add.w	r1, r7, #22
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	2069      	movs	r0, #105	@ 0x69
 8004a9a:	f7ff fd71 	bl	8004580 <bmi160_get_regs>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8004aa2:	7dbb      	ldrb	r3, [r7, #22]
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aaa:	b25a      	sxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b25b      	sxtb	r3, r3
 8004ab2:	019b      	lsls	r3, r3, #6
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 8004ac4:	7dbb      	ldrb	r3, [r7, #22]
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004acc:	b25a      	sxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 8004ae6:	7dbb      	ldrb	r3, [r7, #22]
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	f023 030c 	bic.w	r3, r3, #12
 8004aee:	b25a      	sxtb	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	789b      	ldrb	r3, [r3, #2]
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	b25b      	sxtb	r3, r3
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	4313      	orrs	r3, r2
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 8004b08:	7dbb      	ldrb	r3, [r7, #22]
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	f023 0303 	bic.w	r3, r3, #3
 8004b10:	b25a      	sxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	78db      	ldrb	r3, [r3, #3]
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8004b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d112      	bne.n	8004b54 <bmi160_start_foc+0xfc>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004b2e:	f107 0116 	add.w	r1, r7, #22
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	2069      	movs	r0, #105	@ 0x69
 8004b38:	f7ff fd55 	bl	80045e6 <bmi160_set_regs>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8004b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <bmi160_start_foc+0xfc>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f002 fe25 	bl	800779a <trigger_foc>
 8004b50:	4603      	mov	r3, r0
 8004b52:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004b6a:	6838      	ldr	r0, [r7, #0]
 8004b6c:	f000 fae3 	bl	8005136 <null_ptr_check>
 8004b70:	4603      	mov	r3, r0
 8004b72:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004b74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004b7c:	23ff      	movs	r3, #255	@ 0xff
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e069      	b.n	8004c56 <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004b82:	f107 010c 	add.w	r1, r7, #12
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2207      	movs	r2, #7
 8004b8a:	2071      	movs	r0, #113	@ 0x71
 8004b8c:	f7ff fcf8 	bl	8004580 <bmi160_get_regs>
 8004b90:	4603      	mov	r3, r0
 8004b92:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004b94:	7b3b      	ldrb	r3, [r7, #12]
 8004b96:	b25a      	sxtb	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8004b9c:	7b7b      	ldrb	r3, [r7, #13]
 8004b9e:	b25a      	sxtb	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004ba4:	7bbb      	ldrb	r3, [r7, #14]
 8004ba6:	b25a      	sxtb	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004bb0:	7cbb      	ldrb	r3, [r7, #18]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004bb8:	7f7b      	ldrb	r3, [r7, #29]
 8004bba:	b21b      	sxth	r3, r3
 8004bbc:	039b      	lsls	r3, r3, #14
 8004bbe:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004bc0:	7fbb      	ldrb	r3, [r7, #30]
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004bc8:	8b7a      	ldrh	r2, [r7, #26]
 8004bca:	8b3b      	ldrh	r3, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8004bd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da00      	bge.n	8004bda <bmi160_get_offsets+0x7a>
 8004bd8:	333f      	adds	r3, #63	@ 0x3f
 8004bda:	119b      	asrs	r3, r3, #6
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8004be2:	7c3b      	ldrb	r3, [r7, #16]
 8004be4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8004be6:	7cbb      	ldrb	r3, [r7, #18]
 8004be8:	109b      	asrs	r3, r3, #2
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004bf2:	7f7b      	ldrb	r3, [r7, #29]
 8004bf4:	b21b      	sxth	r3, r3
 8004bf6:	039b      	lsls	r3, r3, #14
 8004bf8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004bfa:	7fbb      	ldrb	r3, [r7, #30]
 8004bfc:	b21b      	sxth	r3, r3
 8004bfe:	019b      	lsls	r3, r3, #6
 8004c00:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004c02:	8b7a      	ldrh	r2, [r7, #26]
 8004c04:	8b3b      	ldrh	r3, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8004c0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da00      	bge.n	8004c14 <bmi160_get_offsets+0xb4>
 8004c12:	333f      	adds	r3, #63	@ 0x3f
 8004c14:	119b      	asrs	r3, r3, #6
 8004c16:	b21a      	sxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8004c1c:	7c7b      	ldrb	r3, [r7, #17]
 8004c1e:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8004c20:	7cbb      	ldrb	r3, [r7, #18]
 8004c22:	111b      	asrs	r3, r3, #4
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004c2c:	7f7b      	ldrb	r3, [r7, #29]
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	039b      	lsls	r3, r3, #14
 8004c32:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004c3c:	8b7a      	ldrh	r2, [r7, #26]
 8004c3e:	8b3b      	ldrh	r3, [r7, #24]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004c44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	da00      	bge.n	8004c4e <bmi160_get_offsets+0xee>
 8004c4c:	333f      	adds	r3, #63	@ 0x3f
 8004c4e:	119b      	asrs	r3, r3, #6
 8004c50:	b21a      	sxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8004c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004c6c:	6838      	ldr	r0, [r7, #0]
 8004c6e:	f000 fa62 	bl	8005136 <null_ptr_check>
 8004c72:	4603      	mov	r3, r0
 8004c74:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <set_accel_any_motion_int+0x22>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004c84:	23ff      	movs	r3, #255	@ 0xff
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e013      	b.n	8004cb2 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f001 f920 	bl	8005ed8 <enable_accel_any_motion_int>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 fb4b 	bl	8006344 <config_any_motion_int_settg>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f000 fa34 	bl	8005136 <null_ptr_check>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <set_accel_tap_int+0x22>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ce0:	23ff      	movs	r3, #255	@ 0xff
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e01e      	b.n	8004d24 <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f001 fe8d 	bl	8006a10 <enable_tap_int>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d110      	bne.n	8004d24 <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f9fb 	bl	8005100 <set_intr_pin_config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 fecd 	bl	8006aba <config_tap_int_settg>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004d3a:	6838      	ldr	r0, [r7, #0]
 8004d3c:	f000 f9fb 	bl	8005136 <null_ptr_check>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <set_accel_gyro_data_ready_int+0x22>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004d52:	23ff      	movs	r3, #255	@ 0xff
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e018      	b.n	8004d8a <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8004d58:	6838      	ldr	r0, [r7, #0]
 8004d5a:	f001 fb2c 	bl	80063b6 <enable_data_ready_int>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10f      	bne.n	8004d8a <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9c7 	bl	8005100 <set_intr_pin_config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d105      	bne.n	8004d8a <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 f9df 	bl	8006144 <map_hardware_interrupt>
 8004d86:	4603      	mov	r3, r0
 8004d88:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004da0:	6838      	ldr	r0, [r7, #0]
 8004da2:	f000 f9c8 	bl	8005136 <null_ptr_check>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <set_accel_sig_motion_int+0x22>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004db8:	23ff      	movs	r3, #255	@ 0xff
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e013      	b.n	8004de6 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	68b8      	ldr	r0, [r7, #8]
 8004dc8:	f001 fc4d 	bl	8006666 <enable_sig_motion_int>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 fc83 	bl	80066e8 <config_sig_motion_int_settg>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004dfc:	6838      	ldr	r0, [r7, #0]
 8004dfe:	f000 f99a 	bl	8005136 <null_ptr_check>
 8004e02:	4603      	mov	r3, r0
 8004e04:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <set_accel_no_motion_int+0x22>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004e14:	23ff      	movs	r3, #255	@ 0xff
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e013      	b.n	8004e42 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	68b8      	ldr	r0, [r7, #8]
 8004e24:	f001 faf4 	bl	8006410 <enable_no_motion_int>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 fb3e 	bl	80064ba <config_no_motion_int_settg>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004e58:	6838      	ldr	r0, [r7, #0]
 8004e5a:	f000 f96c 	bl	8005136 <null_ptr_check>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <set_accel_step_detect_int+0x22>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004e70:	23ff      	movs	r3, #255	@ 0xff
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	e026      	b.n	8004ec4 <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	68b8      	ldr	r0, [r7, #8]
 8004e80:	f001 fd0b 	bl	800689a <enable_step_detect_int>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d119      	bne.n	8004ec4 <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f934 	bl	8005100 <set_intr_pin_config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 f8b8 	bl	800601c <map_feature_interrupt>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	68b8      	ldr	r0, [r7, #8]
 8004ebc:	f001 fd27 	bl	800690e <config_step_detect>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004eda:	6838      	ldr	r0, [r7, #0]
 8004edc:	f000 f92b 	bl	8005136 <null_ptr_check>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <set_accel_orientation_int+0x22>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ef2:	23ff      	movs	r3, #255	@ 0xff
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e026      	b.n	8004f46 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	68b8      	ldr	r0, [r7, #8]
 8004f02:	f001 fee1 	bl	8006cc8 <enable_orient_int>
 8004f06:	4603      	mov	r3, r0
 8004f08:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d119      	bne.n	8004f46 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8f3 	bl	8005100 <set_intr_pin_config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10f      	bne.n	8004f46 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 f877 	bl	800601c <map_feature_interrupt>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	68b8      	ldr	r0, [r7, #8]
 8004f3e:	f001 fefd 	bl	8006d3c <config_orient_int_settg>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004f5c:	6838      	ldr	r0, [r7, #0]
 8004f5e:	f000 f8ea 	bl	8005136 <null_ptr_check>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <set_accel_flat_detect_int+0x22>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004f74:	23ff      	movs	r3, #255	@ 0xff
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e026      	b.n	8004fc8 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	68b8      	ldr	r0, [r7, #8]
 8004f84:	f001 ff6d 	bl	8006e62 <enable_flat_int>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d119      	bne.n	8004fc8 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8b2 	bl	8005100 <set_intr_pin_config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 f836 	bl	800601c <map_feature_interrupt>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	68b8      	ldr	r0, [r7, #8]
 8004fc0:	f001 ff86 	bl	8006ed0 <config_flat_int_settg>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004fde:	6838      	ldr	r0, [r7, #0]
 8004fe0:	f000 f8a9 	bl	8005136 <null_ptr_check>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <set_accel_low_g_int+0x22>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ff6:	23ff      	movs	r3, #255	@ 0xff
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	e030      	b.n	800505e <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	68b8      	ldr	r0, [r7, #8]
 8005006:	f001 ffc0 	bl	8006f8a <enable_low_g_int>
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800500e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d123      	bne.n	800505e <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f871 	bl	8005100 <set_intr_pin_config>
 800501e:	4603      	mov	r3, r0
 8005020:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d119      	bne.n	800505e <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fff5 	bl	800601c <map_feature_interrupt>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8005036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	68b8      	ldr	r0, [r7, #8]
 8005042:	f001 ffdc 	bl	8006ffe <config_low_g_data_src>
 8005046:	4603      	mov	r3, r0
 8005048:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 800504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	68b8      	ldr	r0, [r7, #8]
 8005056:	f002 f809 	bl	800706c <config_low_g_int_settg>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800505e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8005074:	6838      	ldr	r0, [r7, #0]
 8005076:	f000 f85e 	bl	8005136 <null_ptr_check>
 800507a:	4603      	mov	r3, r0
 800507c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800507e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <set_accel_high_g_int+0x22>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800508c:	23ff      	movs	r3, #255	@ 0xff
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e030      	b.n	80050f4 <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f002 f83a 	bl	8007114 <enable_high_g_int>
 80050a0:	4603      	mov	r3, r0
 80050a2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80050a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d123      	bne.n	80050f4 <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f826 	bl	8005100 <set_intr_pin_config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80050b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d119      	bne.n	80050f4 <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 ffaa 	bl	800601c <map_feature_interrupt>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80050cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10f      	bne.n	80050f4 <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	68b8      	ldr	r0, [r7, #8]
 80050d8:	f002 f879 	bl	80071ce <config_high_g_data_src>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80050e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f002 f8a6 	bl	800723c <config_high_g_int_settg>
 80050f0:	4603      	mov	r3, r0
 80050f2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80050f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f002 f8d7 	bl	80072c0 <config_int_out_ctrl>
 8005112:	4603      	mov	r3, r0
 8005114:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f002 f999 	bl	8007458 <config_int_latch>
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800512a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <null_ptr_check+0x26>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <null_ptr_check+0x26>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <null_ptr_check+0x26>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 800515c:	23ff      	movs	r3, #255	@ 0xff
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	e001      	b.n	8005166 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2208      	movs	r2, #8
 8005188:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2210      	movs	r2, #16
 800518e:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2208      	movs	r2, #8
 80051a0:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2214      	movs	r2, #20
 80051a6:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6852      	ldr	r2, [r2, #4]
 80051b4:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68d2      	ldr	r2, [r2, #12]
 80051bc:	611a      	str	r2, [r3, #16]
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80051d2:	2300      	movs	r3, #0
 80051d4:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f833 	bl	8005248 <check_accel_config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80051e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d126      	bne.n	800523c <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80051ee:	f107 010c 	add.w	r1, r7, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	2040      	movs	r0, #64	@ 0x40
 80051f8:	f7ff f9f5 	bl	80045e6 <bmi160_set_regs>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d119      	bne.n	800523c <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	795a      	ldrb	r2, [r3, #5]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	79da      	ldrb	r2, [r3, #7]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	2041      	movs	r0, #65	@ 0x41
 8005224:	f7ff f9df 	bl	80045e6 <bmi160_set_regs>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	799a      	ldrb	r2, [r3, #6]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 800523c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2202      	movs	r2, #2
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	2040      	movs	r0, #64	@ 0x40
 800525a:	f7ff f991 	bl	8004580 <bmi160_get_regs>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11b      	bne.n	80052a2 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f81e 	bl	80052ae <process_accel_odr>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d111      	bne.n	80052a2 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f848 	bl	8005316 <process_accel_bw>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800528a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3301      	adds	r3, #1
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f872 	bl	8005382 <process_accel_range>
 800529e:	4603      	mov	r3, r0
 80052a0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80052a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	795b      	ldrb	r3, [r3, #5]
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d81a      	bhi.n	8005302 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	795a      	ldrb	r2, [r3, #5]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	7a5b      	ldrb	r3, [r3, #9]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d016      	beq.n	8005306 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	795b      	ldrb	r3, [r3, #5]
 80052dc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f023 030f 	bic.w	r3, r3, #15
 80052e6:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80052e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	b25a      	sxtb	r2, r3
 80052f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b25b      	sxtb	r3, r3
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e001      	b.n	8005306 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005302:	23fc      	movs	r3, #252	@ 0xfc
 8005304:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	79db      	ldrb	r3, [r3, #7]
 8005330:	2b07      	cmp	r3, #7
 8005332:	d81c      	bhi.n	800536e <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	79da      	ldrb	r2, [r3, #7]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	7adb      	ldrb	r3, [r3, #11]
 800533c:	429a      	cmp	r2, r3
 800533e:	d018      	beq.n	8005372 <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	79db      	ldrb	r3, [r3, #7]
 8005344:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8005350:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	b25b      	sxtb	r3, r3
 8005358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800535c:	b25a      	sxtb	r2, r3
 800535e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005362:	4313      	orrs	r3, r2
 8005364:	b25b      	sxtb	r3, r3
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e001      	b.n	8005372 <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800536e:	23fc      	movs	r3, #252	@ 0xfc
 8005370:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005372:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	799b      	ldrb	r3, [r3, #6]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d81a      	bhi.n	80053d6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	799a      	ldrb	r2, [r3, #6]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	7a9b      	ldrb	r3, [r3, #10]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d016      	beq.n	80053da <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	799b      	ldrb	r3, [r3, #6]
 80053b0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f023 030f 	bic.w	r3, r3, #15
 80053ba:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 80053bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	b25a      	sxtb	r2, r3
 80053c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e001      	b.n	80053da <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80053d6:	23fc      	movs	r3, #252	@ 0xfc
 80053d8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80053da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80053f6:	f107 010e 	add.w	r1, r7, #14
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	2002      	movs	r0, #2
 8005400:	f7ff f8be 	bl	8004580 <bmi160_get_regs>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8005408:	7bbb      	ldrb	r3, [r7, #14]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8005410:	7bbb      	ldrb	r3, [r7, #14]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	b2db      	uxtb	r3, r3
 8005418:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d102      	bne.n	8005426 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8005420:	23fa      	movs	r3, #250	@ 0xfa
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e010      	b.n	8005448 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d102      	bne.n	8005432 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 800542c:	23f9      	movs	r3, #249	@ 0xf9
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e00a      	b.n	8005448 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8005432:	7bbb      	ldrb	r3, [r7, #14]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d102      	bne.n	800543e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8005438:	23f8      	movs	r3, #248	@ 0xf8
 800543a:	73fb      	strb	r3, [r7, #15]
 800543c:	e004      	b.n	8005448 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800543e:	7bbb      	ldrb	r3, [r7, #14]
 8005440:	2b07      	cmp	r3, #7
 8005442:	d101      	bne.n	8005448 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8005444:	23f7      	movs	r3, #247	@ 0xf7
 8005446:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800545c:	2300      	movs	r3, #0
 800545e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8005460:	f107 030c 	add.w	r3, r7, #12
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f833 	bl	80054d2 <check_gyro_config>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d126      	bne.n	80054c6 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8005478:	f107 010c 	add.w	r1, r7, #12
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	2042      	movs	r0, #66	@ 0x42
 8005482:	f7ff f8b0 	bl	80045e6 <bmi160_set_regs>
 8005486:	4603      	mov	r3, r0
 8005488:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800548a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d119      	bne.n	80054c6 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	7b5a      	ldrb	r2, [r3, #13]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	7bda      	ldrb	r2, [r3, #15]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	2043      	movs	r0, #67	@ 0x43
 80054ae:	f7ff f89a 	bl	80045e6 <bmi160_set_regs>
 80054b2:	4603      	mov	r3, r0
 80054b4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80054b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7b9a      	ldrb	r2, [r3, #14]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2202      	movs	r2, #2
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	2042      	movs	r0, #66	@ 0x42
 80054e4:	f7ff f84c 	bl	8004580 <bmi160_get_regs>
 80054e8:	4603      	mov	r3, r0
 80054ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80054ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11b      	bne.n	800552c <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f81e 	bl	8005538 <process_gyro_odr>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d111      	bne.n	800552c <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f848 	bl	80055a0 <process_gyro_bw>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3301      	adds	r3, #1
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f86c 	bl	8005600 <process_gyro_range>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800552c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	7b5b      	ldrb	r3, [r3, #13]
 8005552:	2b0d      	cmp	r3, #13
 8005554:	d81a      	bhi.n	800558c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	7b5a      	ldrb	r2, [r3, #13]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	7c5b      	ldrb	r3, [r3, #17]
 800555e:	429a      	cmp	r2, r3
 8005560:	d016      	beq.n	8005590 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	7b5b      	ldrb	r3, [r3, #13]
 8005566:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f023 030f 	bic.w	r3, r3, #15
 8005570:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8005572:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	b25a      	sxtb	r2, r3
 800557c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005580:	4313      	orrs	r3, r2
 8005582:	b25b      	sxtb	r3, r3
 8005584:	b2da      	uxtb	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e001      	b.n	8005590 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800558c:	23fc      	movs	r3, #252	@ 0xfc
 800558e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	7bdb      	ldrb	r3, [r3, #15]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d816      	bhi.n	80055ec <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	7bdb      	ldrb	r3, [r3, #15]
 80055c2:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80055cc:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 80055ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055da:	b25a      	sxtb	r2, r3
 80055dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e001      	b.n	80055f0 <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80055ec:	23fc      	movs	r3, #252	@ 0xfc
 80055ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80055f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	7b9b      	ldrb	r3, [r3, #14]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d81a      	bhi.n	8005654 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	7b9a      	ldrb	r2, [r3, #14]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	7c9b      	ldrb	r3, [r3, #18]
 8005626:	429a      	cmp	r2, r3
 8005628:	d016      	beq.n	8005658 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	7b9b      	ldrb	r3, [r3, #14]
 800562e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f023 0307 	bic.w	r3, r3, #7
 8005638:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 800563a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	b25a      	sxtb	r2, r3
 8005644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005648:	4313      	orrs	r3, r2
 800564a:	b25b      	sxtb	r3, r3
 800564c:	b2da      	uxtb	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e001      	b.n	8005658 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005654:	23fc      	movs	r3, #252	@ 0xfc
 8005656:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	791b      	ldrb	r3, [r3, #4]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d92b      	bls.n	80056d8 <set_accel_pwr+0x70>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	791b      	ldrb	r3, [r3, #4]
 8005684:	2b12      	cmp	r3, #18
 8005686:	d827      	bhi.n	80056d8 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	791a      	ldrb	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7a1b      	ldrb	r3, [r3, #8]
 8005690:	429a      	cmp	r2, r3
 8005692:	d024      	beq.n	80056de <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8005694:	f107 030e 	add.w	r3, r7, #14
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f826 	bl	80056ec <process_under_sampling>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80056a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d118      	bne.n	80056de <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1d19      	adds	r1, r3, #4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	207e      	movs	r0, #126	@ 0x7e
 80056b6:	f7fe ff96 	bl	80045e6 <bmi160_set_regs>
 80056ba:	4603      	mov	r3, r0
 80056bc:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7a1b      	ldrb	r3, [r3, #8]
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d103      	bne.n	80056ce <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	2005      	movs	r0, #5
 80056cc:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	791a      	ldrb	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80056d6:	e002      	b.n	80056de <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80056d8:	23f3      	movs	r3, #243	@ 0xf3
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e000      	b.n	80056e0 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80056de:	bf00      	nop
    }

    return rslt;
 80056e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80056fa:	2300      	movs	r3, #0
 80056fc:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	2040      	movs	r0, #64	@ 0x40
 8005706:	f7fe ff3b 	bl	8004580 <bmi160_get_regs>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800570e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d139      	bne.n	800578a <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	791b      	ldrb	r3, [r3, #4]
 800571a:	2b12      	cmp	r3, #18
 800571c:	d120      	bne.n	8005760 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005726:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2201      	movs	r2, #1
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	2040      	movs	r0, #64	@ 0x40
 800573c:	f7fe ff53 	bl	80045e6 <bmi160_set_regs>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8005744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11e      	bne.n	800578a <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800574c:	f107 010c 	add.w	r1, r7, #12
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2202      	movs	r2, #2
 8005754:	2058      	movs	r0, #88	@ 0x58
 8005756:	f7fe ff46 	bl	80045e6 <bmi160_set_regs>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]
 800575e:	e014      	b.n	800578a <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b25b      	sxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	da0f      	bge.n	800578a <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005772:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	7bba      	ldrb	r2, [r7, #14]
 8005778:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	2040      	movs	r0, #64	@ 0x40
 8005782:	f7fe ff30 	bl	80045e6 <bmi160_set_regs>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7b1b      	ldrb	r3, [r3, #12]
 80057a6:	2b14      	cmp	r3, #20
 80057a8:	d007      	beq.n	80057ba <set_gyro_pwr+0x24>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7b1b      	ldrb	r3, [r3, #12]
 80057ae:	2b15      	cmp	r3, #21
 80057b0:	d003      	beq.n	80057ba <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80057b6:	2b17      	cmp	r3, #23
 80057b8:	d129      	bne.n	800580e <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7b1a      	ldrb	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7c1b      	ldrb	r3, [r3, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d025      	beq.n	8005812 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f103 010c 	add.w	r1, r3, #12
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	207e      	movs	r0, #126	@ 0x7e
 80057d2:	f7fe ff08 	bl	80045e6 <bmi160_set_regs>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7c1b      	ldrb	r3, [r3, #16]
 80057de:	2b14      	cmp	r3, #20
 80057e0:	d104      	bne.n	80057ec <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	2050      	movs	r0, #80	@ 0x50
 80057e8:	4798      	blx	r3
 80057ea:	e00b      	b.n	8005804 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c1b      	ldrb	r3, [r3, #16]
 80057f0:	2b17      	cmp	r3, #23
 80057f2:	d107      	bne.n	8005804 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80057f8:	2b15      	cmp	r3, #21
 80057fa:	d103      	bne.n	8005804 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	200a      	movs	r0, #10
 8005802:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7b1a      	ldrb	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800580c:	e001      	b.n	8005812 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800580e:	23f3      	movs	r3, #243	@ 0xf3
 8005810:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005812:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b08c      	sub	sp, #48	@ 0x30
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 8005832:	f107 0314 	add.w	r3, r7, #20
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	b29b      	uxth	r3, r3
 8005850:	3306      	adds	r3, #6
 8005852:	b29a      	uxth	r2, r3
 8005854:	f107 0114 	add.w	r1, r7, #20
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2012      	movs	r0, #18
 800585c:	f7fe fe90 	bl	8004580 <bmi160_get_regs>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005866:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 809a 	bne.w	80059a4 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8005870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800587a:	3330      	adds	r3, #48	@ 0x30
 800587c:	443b      	add	r3, r7
 800587e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005890:	3330      	adds	r3, #48	@ 0x30
 8005892:	443b      	add	r3, r7
 8005894:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800589c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	b21a      	sxth	r2, r3
 80058a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	8c3a      	ldrh	r2, [r7, #32]
 80058b4:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80058b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058c0:	3330      	adds	r3, #48	@ 0x30
 80058c2:	443b      	add	r3, r7
 80058c4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80058cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058d6:	3330      	adds	r3, #48	@ 0x30
 80058d8:	443b      	add	r3, r7
 80058da:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80058de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80058e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058e6:	b21b      	sxth	r3, r3
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	b21a      	sxth	r2, r3
 80058ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	8c3a      	ldrh	r2, [r7, #32]
 80058fa:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80058fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005906:	3330      	adds	r3, #48	@ 0x30
 8005908:	443b      	add	r3, r7
 800590a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005912:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800591c:	3330      	adds	r3, #48	@ 0x30
 800591e:	443b      	add	r3, r7
 8005920:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005928:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800592c:	b21b      	sxth	r3, r3
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	b21a      	sxth	r2, r3
 8005932:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005936:	b21b      	sxth	r3, r3
 8005938:	4313      	orrs	r3, r2
 800593a:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	8c3a      	ldrh	r2, [r7, #32]
 8005940:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d129      	bne.n	800599c <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 8005948:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005952:	3330      	adds	r3, #48	@ 0x30
 8005954:	443b      	add	r3, r7
 8005956:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800595a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800595e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005968:	3330      	adds	r3, #48	@ 0x30
 800596a:	443b      	add	r3, r7
 800596c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005974:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800597e:	3330      	adds	r3, #48	@ 0x30
 8005980:	443b      	add	r3, r7
 8005982:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800598a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	431a      	orrs	r2, r3
 8005990:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005994:	431a      	orrs	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	609a      	str	r2, [r3, #8]
 800599a:	e006      	b.n	80059aa <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
 80059a2:	e002      	b.n	80059aa <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80059a4:	23fe      	movs	r3, #254	@ 0xfe
 80059a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80059aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3730      	adds	r7, #48	@ 0x30
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b08c      	sub	sp, #48	@ 0x30
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	4603      	mov	r3, r0
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
 80059c2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 80059ca:	f107 0310 	add.w	r3, r7, #16
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d17e      	bne.n	8005aec <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80059ee:	f107 0110 	add.w	r1, r7, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2206      	movs	r2, #6
 80059f6:	200c      	movs	r0, #12
 80059f8:	f7fe fdc2 	bl	8004580 <bmi160_get_regs>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8005a02:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d16c      	bne.n	8005ae4 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8005a0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a14:	3330      	adds	r3, #48	@ 0x30
 8005a16:	443b      	add	r3, r7
 8005a18:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005a20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a2a:	3330      	adds	r3, #48	@ 0x30
 8005a2c:	443b      	add	r3, r7
 8005a2e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005a36:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	b21a      	sxth	r2, r3
 8005a40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	8c3a      	ldrh	r2, [r7, #32]
 8005a4e:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005a50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a5a:	3330      	adds	r3, #48	@ 0x30
 8005a5c:	443b      	add	r3, r7
 8005a5e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005a66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a70:	3330      	adds	r3, #48	@ 0x30
 8005a72:	443b      	add	r3, r7
 8005a74:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005a7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	b21a      	sxth	r2, r3
 8005a86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	8c3a      	ldrh	r2, [r7, #32]
 8005a94:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005a96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005aa0:	3330      	adds	r3, #48	@ 0x30
 8005aa2:	443b      	add	r3, r7
 8005aa4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005aac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ab6:	3330      	adds	r3, #48	@ 0x30
 8005ab8:	443b      	add	r3, r7
 8005aba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005abe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005ac2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	b21a      	sxth	r2, r3
 8005acc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ad0:	b21b      	sxth	r3, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	8c3a      	ldrh	r2, [r7, #32]
 8005ada:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	609a      	str	r2, [r3, #8]
 8005ae2:	e0b0      	b.n	8005c46 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005ae4:	23fe      	movs	r3, #254	@ 0xfe
 8005ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005aea:	e0ac      	b.n	8005c46 <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	330c      	adds	r3, #12
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f107 0110 	add.w	r1, r7, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	200c      	movs	r0, #12
 8005afc:	f7fe fd40 	bl	8004580 <bmi160_get_regs>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8005b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 8098 	bne.w	8005c40 <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8005b10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b1a:	3330      	adds	r3, #48	@ 0x30
 8005b1c:	443b      	add	r3, r7
 8005b1e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005b26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b30:	3330      	adds	r3, #48	@ 0x30
 8005b32:	443b      	add	r3, r7
 8005b34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005b3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b40:	b21b      	sxth	r3, r3
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	b21a      	sxth	r2, r3
 8005b46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	8c3a      	ldrh	r2, [r7, #32]
 8005b54:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005b56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b60:	3330      	adds	r3, #48	@ 0x30
 8005b62:	443b      	add	r3, r7
 8005b64:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005b6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b76:	3330      	adds	r3, #48	@ 0x30
 8005b78:	443b      	add	r3, r7
 8005b7a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b7e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005b82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b86:	b21b      	sxth	r3, r3
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	b21a      	sxth	r2, r3
 8005b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b90:	b21b      	sxth	r3, r3
 8005b92:	4313      	orrs	r3, r2
 8005b94:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	8c3a      	ldrh	r2, [r7, #32]
 8005b9a:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ba6:	3330      	adds	r3, #48	@ 0x30
 8005ba8:	443b      	add	r3, r7
 8005baa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005bb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005bbc:	3330      	adds	r3, #48	@ 0x30
 8005bbe:	443b      	add	r3, r7
 8005bc0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	b21a      	sxth	r2, r3
 8005bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bd6:	b21b      	sxth	r3, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	8c3a      	ldrh	r2, [r7, #32]
 8005be0:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8005be2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005be6:	3306      	adds	r3, #6
 8005be8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8005bec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005bf6:	3330      	adds	r3, #48	@ 0x30
 8005bf8:	443b      	add	r3, r7
 8005bfa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bfe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005c02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c0c:	3330      	adds	r3, #48	@ 0x30
 8005c0e:	443b      	add	r3, r7
 8005c10:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005c18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c22:	3330      	adds	r3, #48	@ 0x30
 8005c24:	443b      	add	r3, r7
 8005c26:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005c2e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	431a      	orrs	r2, r3
 8005c34:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	e002      	b.n	8005c46 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005c40:	23fe      	movs	r3, #254	@ 0xfe
 8005c42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 8005c46:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3730      	adds	r7, #48	@ 0x30
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b08c      	sub	sp, #48	@ 0x30
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005c68:	f107 0310 	add.w	r3, r7, #16
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f107 0110 	add.w	r1, r7, #16
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	200c      	movs	r0, #12
 8005c96:	f7fe fc73 	bl	8004580 <bmi160_get_regs>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005ca0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 810e 	bne.w	8005ec6 <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005caa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cb4:	3330      	adds	r3, #48	@ 0x30
 8005cb6:	443b      	add	r3, r7
 8005cb8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005cc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cca:	3330      	adds	r3, #48	@ 0x30
 8005ccc:	443b      	add	r3, r7
 8005cce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005cd2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005cd6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005cda:	b21b      	sxth	r3, r3
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b21a      	sxth	r2, r3
 8005ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ce4:	b21b      	sxth	r3, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8c3a      	ldrh	r2, [r7, #32]
 8005cee:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005cf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cfa:	3330      	adds	r3, #48	@ 0x30
 8005cfc:	443b      	add	r3, r7
 8005cfe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005d06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d10:	3330      	adds	r3, #48	@ 0x30
 8005d12:	443b      	add	r3, r7
 8005d14:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005d20:	b21b      	sxth	r3, r3
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	b21a      	sxth	r2, r3
 8005d26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	b21b      	sxth	r3, r3
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8c3a      	ldrh	r2, [r7, #32]
 8005d34:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005d36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d40:	3330      	adds	r3, #48	@ 0x30
 8005d42:	443b      	add	r3, r7
 8005d44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d56:	3330      	adds	r3, #48	@ 0x30
 8005d58:	443b      	add	r3, r7
 8005d5a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005d62:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005d66:	b21b      	sxth	r3, r3
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	b21a      	sxth	r2, r3
 8005d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d70:	b21b      	sxth	r3, r3
 8005d72:	4313      	orrs	r3, r2
 8005d74:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8c3a      	ldrh	r2, [r7, #32]
 8005d7a:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8005d7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d86:	3330      	adds	r3, #48	@ 0x30
 8005d88:	443b      	add	r3, r7
 8005d8a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005d92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d9c:	3330      	adds	r3, #48	@ 0x30
 8005d9e:	443b      	add	r3, r7
 8005da0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005da8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005dac:	b21b      	sxth	r3, r3
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	b21a      	sxth	r2, r3
 8005db2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005db6:	b21b      	sxth	r3, r3
 8005db8:	4313      	orrs	r3, r2
 8005dba:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	8c3a      	ldrh	r2, [r7, #32]
 8005dc0:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005dc2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005dcc:	3330      	adds	r3, #48	@ 0x30
 8005dce:	443b      	add	r3, r7
 8005dd0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005dd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005de2:	3330      	adds	r3, #48	@ 0x30
 8005de4:	443b      	add	r3, r7
 8005de6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005dea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005dee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	b21a      	sxth	r2, r3
 8005df8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dfc:	b21b      	sxth	r3, r3
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	8c3a      	ldrh	r2, [r7, #32]
 8005e06:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005e08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005e12:	3330      	adds	r3, #48	@ 0x30
 8005e14:	443b      	add	r3, r7
 8005e16:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005e28:	3330      	adds	r3, #48	@ 0x30
 8005e2a:	443b      	add	r3, r7
 8005e2c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005e34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	b21a      	sxth	r2, r3
 8005e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	8c3a      	ldrh	r2, [r7, #32]
 8005e4c:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d131      	bne.n	8005eb8 <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 8005e54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005e5e:	3330      	adds	r3, #48	@ 0x30
 8005e60:	443b      	add	r3, r7
 8005e62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005e74:	3330      	adds	r3, #48	@ 0x30
 8005e76:	443b      	add	r3, r7
 8005e78:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005e80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005e8a:	3330      	adds	r3, #48	@ 0x30
 8005e8c:	443b      	add	r3, r7
 8005e8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005e96:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005ea6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
 8005eb6:	e009      	b.n	8005ecc <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	e002      	b.n	8005ecc <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005ec6:	23fe      	movs	r3, #254	@ 0xfe
 8005ec8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3730      	adds	r7, #48	@ 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005eea:	f107 010d 	add.w	r1, r7, #13
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	2050      	movs	r0, #80	@ 0x50
 8005ef4:	f7fe fb44 	bl	8004580 <bmi160_get_regs>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d153      	bne.n	8005fac <enable_accel_any_motion_int+0xd4>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d03b      	beq.n	8005f8a <enable_accel_any_motion_int+0xb2>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 8005f12:	7b7b      	ldrb	r3, [r7, #13]
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 8005f2e:	7b7b      	ldrb	r3, [r7, #13]
 8005f30:	f023 0302 	bic.w	r3, r3, #2
 8005f34:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	b25a      	sxtb	r2, r3
 8005f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b25b      	sxtb	r3, r3
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8005f58:	7b7b      	ldrb	r3, [r7, #13]
 8005f5a:	f023 0304 	bic.w	r3, r3, #4
 8005f5e:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	b25b      	sxtb	r3, r3
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	b25a      	sxtb	r2, r3
 8005f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2200      	movs	r2, #0
 8005f86:	70da      	strb	r2, [r3, #3]
 8005f88:	e007      	b.n	8005f9a <enable_accel_any_motion_int+0xc2>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8005f8a:	7b7b      	ldrb	r3, [r7, #13]
 8005f8c:	f023 0307 	bic.w	r3, r3, #7
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	22ff      	movs	r2, #255	@ 0xff
 8005f98:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005f9a:	f107 010d 	add.w	r1, r7, #13
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2050      	movs	r0, #80	@ 0x50
 8005fa4:	f7fe fb1f 	bl	80045e6 <bmi160_set_regs>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005fc8:	f107 010d 	add.w	r1, r7, #13
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	2062      	movs	r0, #98	@ 0x62
 8005fd2:	f7fe fad5 	bl	8004580 <bmi160_get_regs>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d115      	bne.n	800600e <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8005fe2:	7b7b      	ldrb	r3, [r7, #13]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005ff0:	7b7b      	ldrb	r3, [r7, #13]
 8005ff2:	f023 0302 	bic.w	r3, r3, #2
 8005ff6:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005ffc:	f107 010d 	add.w	r1, r7, #13
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	2062      	movs	r0, #98	@ 0x62
 8006006:	f7fe faee 	bl	80045e6 <bmi160_set_regs>
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800600e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 8006026:	f107 030c 	add.w	r3, r7, #12
 800602a:	2100      	movs	r1, #0
 800602c:	460a      	mov	r2, r1
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	460a      	mov	r2, r1
 8006032:	709a      	strb	r2, [r3, #2]
    uint8_t temp[3] = { 0, 0, 0 };
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	2100      	movs	r1, #0
 800603a:	460a      	mov	r2, r1
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	460a      	mov	r2, r1
 8006040:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8006042:	f107 010c 	add.w	r1, r7, #12
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2203      	movs	r2, #3
 800604a:	2055      	movs	r0, #85	@ 0x55
 800604c:	f7fe fa98 	bl	8004580 <bmi160_get_regs>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d16a      	bne.n	8006132 <map_feature_interrupt+0x116>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800605c:	7b3b      	ldrb	r3, [r7, #12]
 800605e:	b25a      	sxtb	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	4619      	mov	r1, r3
 8006066:	4b36      	ldr	r3, [pc, #216]	@ (8006140 <map_feature_interrupt+0x124>)
 8006068:	5c5b      	ldrb	r3, [r3, r1]
 800606a:	b25b      	sxtb	r3, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	b25b      	sxtb	r3, r3
 8006070:	4013      	ands	r3, r2
 8006072:	b25b      	sxtb	r3, r3
 8006074:	b2db      	uxtb	r3, r3
 8006076:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	b25a      	sxtb	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	4619      	mov	r1, r3
 8006082:	4b2f      	ldr	r3, [pc, #188]	@ (8006140 <map_feature_interrupt+0x124>)
 8006084:	5c5b      	ldrb	r3, [r3, r1]
 8006086:	b25b      	sxtb	r3, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	b25b      	sxtb	r3, r3
 800608c:	4013      	ands	r3, r2
 800608e:	b25b      	sxtb	r3, r3
 8006090:	b2db      	uxtb	r3, r3
 8006092:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d83b      	bhi.n	8006114 <map_feature_interrupt+0xf8>
 800609c:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <map_feature_interrupt+0x88>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060bf 	.word	0x080060bf
 80060ac:	080060d7 	.word	0x080060d7
 80060b0:	080060ef 	.word	0x080060ef
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80060b4:	7a3b      	ldrb	r3, [r7, #8]
 80060b6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80060b8:	7abb      	ldrb	r3, [r7, #10]
 80060ba:	73bb      	strb	r3, [r7, #14]
                break;
 80060bc:	e02c      	b.n	8006118 <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80060be:	7a3a      	ldrb	r2, [r7, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006140 <map_feature_interrupt+0x124>)
 80060c8:	5c5b      	ldrb	r3, [r3, r1]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80060d0:	7abb      	ldrb	r3, [r7, #10]
 80060d2:	73bb      	strb	r3, [r7, #14]
                break;
 80060d4:	e020      	b.n	8006118 <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 80060d6:	7aba      	ldrb	r2, [r7, #10]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	4619      	mov	r1, r3
 80060de:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <map_feature_interrupt+0x124>)
 80060e0:	5c5b      	ldrb	r3, [r3, r1]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 80060e8:	7a3b      	ldrb	r3, [r7, #8]
 80060ea:	733b      	strb	r3, [r7, #12]
                break;
 80060ec:	e014      	b.n	8006118 <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80060ee:	7a3a      	ldrb	r2, [r7, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	4619      	mov	r1, r3
 80060f6:	4b12      	ldr	r3, [pc, #72]	@ (8006140 <map_feature_interrupt+0x124>)
 80060f8:	5c5b      	ldrb	r3, [r3, r1]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8006100:	7aba      	ldrb	r2, [r7, #10]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	4619      	mov	r1, r3
 8006108:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <map_feature_interrupt+0x124>)
 800610a:	5c5b      	ldrb	r3, [r3, r1]
 800610c:	4313      	orrs	r3, r2
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73bb      	strb	r3, [r7, #14]
                break;
 8006112:	e001      	b.n	8006118 <map_feature_interrupt+0xfc>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8006114:	23fc      	movs	r3, #252	@ 0xfc
 8006116:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8006118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d108      	bne.n	8006132 <map_feature_interrupt+0x116>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8006120:	f107 010c 	add.w	r1, r7, #12
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2203      	movs	r2, #3
 8006128:	2055      	movs	r0, #85	@ 0x55
 800612a:	f7fe fa5c 	bl	80045e6 <bmi160_set_regs>
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	0801c288 	.word	0x0801c288

08006144 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8006156:	f107 010d 	add.w	r1, r7, #13
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2201      	movs	r2, #1
 800615e:	2056      	movs	r0, #86	@ 0x56
 8006160:	f7fe fa0e 	bl	8004580 <bmi160_get_regs>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d168      	bne.n	8006242 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	461a      	mov	r2, r3
 8006176:	4b36      	ldr	r3, [pc, #216]	@ (8006250 <map_hardware_interrupt+0x10c>)
 8006178:	5c9b      	ldrb	r3, [r3, r2]
 800617a:	b25b      	sxtb	r3, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	b25a      	sxtb	r2, r3
 8006180:	7b7b      	ldrb	r3, [r7, #13]
 8006182:	b25b      	sxtb	r3, r3
 8006184:	4013      	ands	r3, r2
 8006186:	b25b      	sxtb	r3, r3
 8006188:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	785b      	ldrb	r3, [r3, #1]
 800618e:	461a      	mov	r2, r3
 8006190:	4b2f      	ldr	r3, [pc, #188]	@ (8006250 <map_hardware_interrupt+0x10c>)
 8006192:	5c9b      	ldrb	r3, [r3, r2]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	b2db      	uxtb	r3, r3
 8006198:	43db      	mvns	r3, r3
 800619a:	b2db      	uxtb	r3, r3
 800619c:	b25a      	sxtb	r2, r3
 800619e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a2:	4013      	ands	r3, r2
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d839      	bhi.n	8006224 <map_hardware_interrupt+0xe0>
 80061b0:	a201      	add	r2, pc, #4	@ (adr r2, 80061b8 <map_hardware_interrupt+0x74>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061cf 	.word	0x080061cf
 80061c0:	080061e7 	.word	0x080061e7
 80061c4:	080061fb 	.word	0x080061fb
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	737b      	strb	r3, [r7, #13]
                break;
 80061cc:	e02c      	b.n	8006228 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006250 <map_hardware_interrupt+0x10c>)
 80061d6:	5c9b      	ldrb	r3, [r3, r2]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	4313      	orrs	r3, r2
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	737b      	strb	r3, [r7, #13]
                break;
 80061e4:	e020      	b.n	8006228 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <map_hardware_interrupt+0x10c>)
 80061ee:	5c9a      	ldrb	r2, [r3, r2]
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	737b      	strb	r3, [r7, #13]
                break;
 80061f8:	e016      	b.n	8006228 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <map_hardware_interrupt+0x10c>)
 8006202:	5c9a      	ldrb	r2, [r3, r2]
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	4313      	orrs	r3, r2
 8006208:	b2db      	uxtb	r3, r3
 800620a:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	461a      	mov	r2, r3
 8006212:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <map_hardware_interrupt+0x10c>)
 8006214:	5c9b      	ldrb	r3, [r3, r2]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	b2da      	uxtb	r2, r3
 800621a:	7b7b      	ldrb	r3, [r7, #13]
 800621c:	4313      	orrs	r3, r2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	737b      	strb	r3, [r7, #13]
                break;
 8006222:	e001      	b.n	8006228 <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8006224:	23fc      	movs	r3, #252	@ 0xfc
 8006226:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8006228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d108      	bne.n	8006242 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8006230:	f107 010d 	add.w	r1, r7, #13
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	2056      	movs	r0, #86	@ 0x56
 800623a:	f7fe f9d4 	bl	80045e6 <bmi160_set_regs>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	0801c288 	.word	0x0801c288

08006254 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006266:	f107 010d 	add.w	r1, r7, #13
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	2059      	movs	r0, #89	@ 0x59
 8006270:	f7fe f986 	bl	8004580 <bmi160_get_regs>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d11a      	bne.n	80062b6 <config_any_motion_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8006280:	7b7b      	ldrb	r3, [r7, #13]
 8006282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006286:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006290:	b2db      	uxtb	r3, r3
 8006292:	b25b      	sxtb	r3, r3
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	b25a      	sxtb	r2, r3
 8006298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800629c:	4313      	orrs	r3, r2
 800629e:	b25b      	sxtb	r3, r3
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80062a4:	f107 010d 	add.w	r1, r7, #13
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	2059      	movs	r0, #89	@ 0x59
 80062ae:	f7fe f99a 	bl	80045e6 <bmi160_set_regs>
 80062b2:	4603      	mov	r3, r0
 80062b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80062b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 80062d4:	2300      	movs	r3, #0
 80062d6:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 80062d8:	f107 010c 	add.w	r1, r7, #12
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	205f      	movs	r0, #95	@ 0x5f
 80062e2:	f7fe f94d 	bl	8004580 <bmi160_get_regs>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80062ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d122      	bne.n	8006338 <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 80062fe:	7b3b      	ldrb	r3, [r7, #12]
 8006300:	f023 0303 	bic.w	r3, r3, #3
 8006304:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8006306:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800630a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800630e:	b25a      	sxtb	r2, r3
 8006310:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006314:	4313      	orrs	r3, r2
 8006316:	b25b      	sxtb	r3, r3
 8006318:	b2db      	uxtb	r3, r3
 800631a:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800631c:	7b3b      	ldrb	r3, [r7, #12]
 800631e:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8006326:	f107 0108 	add.w	r1, r7, #8
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2202      	movs	r2, #2
 800632e:	205f      	movs	r0, #95	@ 0x5f
 8006330:	f7fe f959 	bl	80045e6 <bmi160_set_regs>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7fe fed4 	bl	8005100 <set_intr_pin_config>
 8006358:	4603      	mov	r3, r0
 800635a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800635c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d122      	bne.n	80063aa <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff fe27 	bl	8005fb8 <disable_sig_motion_int>
 800636a:	4603      	mov	r3, r0
 800636c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800636e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d119      	bne.n	80063aa <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fe4f 	bl	800601c <map_feature_interrupt>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	68b8      	ldr	r0, [r7, #8]
 800638e:	f7ff ff61 	bl	8006254 <config_any_motion_src>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8006396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f7ff ff8e 	bl	80062c2 <config_any_dur_threshold>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80063aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80063c6:	f107 010d 	add.w	r1, r7, #13
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	2051      	movs	r0, #81	@ 0x51
 80063d0:	f7fe f8d6 	bl	8004580 <bmi160_get_regs>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80063d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d111      	bne.n	8006404 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 80063e0:	7b7b      	ldrb	r3, [r7, #13]
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	f043 0310 	orr.w	r3, r3, #16
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80063f2:	f107 010d 	add.w	r1, r7, #13
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	2051      	movs	r0, #81	@ 0x51
 80063fc:	f7fe f8f3 	bl	80045e6 <bmi160_set_regs>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8006422:	f107 010d 	add.w	r1, r7, #13
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2201      	movs	r2, #1
 800642a:	2052      	movs	r0, #82	@ 0x52
 800642c:	f7fe f8a8 	bl	8004580 <bmi160_get_regs>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d138      	bne.n	80064ae <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d008      	beq.n	800645c <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 800644a:	7b7b      	ldrb	r3, [r7, #13]
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 800646a:	7b7b      	ldrb	r3, [r7, #13]
 800646c:	f023 0302 	bic.w	r3, r3, #2
 8006470:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	b2db      	uxtb	r3, r3
 800647a:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 800648a:	7b7b      	ldrb	r3, [r7, #13]
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	f043 0304 	orr.w	r3, r3, #4
 8006498:	b2db      	uxtb	r3, r3
 800649a:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800649c:	f107 010d 	add.w	r1, r7, #13
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	2052      	movs	r0, #82	@ 0x52
 80064a6:	f7fe f89e 	bl	80045e6 <bmi160_set_regs>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80064ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7fe fe19 	bl	8005100 <set_intr_pin_config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80064d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d119      	bne.n	800650e <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fd9d 	bl	800601c <map_feature_interrupt>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80064e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	68b8      	ldr	r0, [r7, #8]
 80064f2:	f000 f812 	bl	800651a <config_no_motion_data_src>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80064fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f000 f83f 	bl	8006588 <config_no_motion_dur_thr>
 800650a:	4603      	mov	r3, r0
 800650c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800650e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800652c:	f107 010d 	add.w	r1, r7, #13
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2201      	movs	r2, #1
 8006534:	2059      	movs	r0, #89	@ 0x59
 8006536:	f7fe f823 	bl	8004580 <bmi160_get_regs>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800653e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11a      	bne.n	800657c <config_no_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8006546:	7b7b      	ldrb	r3, [r7, #13]
 8006548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800654c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006556:	b2db      	uxtb	r3, r3
 8006558:	b25b      	sxtb	r3, r3
 800655a:	01db      	lsls	r3, r3, #7
 800655c:	b25a      	sxtb	r2, r3
 800655e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006562:	4313      	orrs	r3, r2
 8006564:	b25b      	sxtb	r3, r3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800656a:	f107 010d 	add.w	r1, r7, #13
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2201      	movs	r2, #1
 8006572:	2059      	movs	r0, #89	@ 0x59
 8006574:	f7fe f837 	bl	80045e6 <bmi160_set_regs>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800657c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 800659e:	2300      	movs	r3, #0
 80065a0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 80065a2:	235f      	movs	r3, #95	@ 0x5f
 80065a4:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80065a6:	f107 010b 	add.w	r1, r7, #11
 80065aa:	7b38      	ldrb	r0, [r7, #12]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f7fd ffe6 	bl	8004580 <bmi160_get_regs>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80065b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d14c      	bne.n	800665a <config_no_motion_dur_thr+0xd2>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	b25b      	sxtb	r3, r3
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	b25a      	sxtb	r2, r3
 80065d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065dc:	4313      	orrs	r3, r2
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 80065e4:	f107 010b 	add.w	r1, r7, #11
 80065e8:	7b38      	ldrb	r0, [r7, #12]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f7fd fffa 	bl	80045e6 <bmi160_set_regs>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80065f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d12d      	bne.n	800665a <config_no_motion_dur_thr+0xd2>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 80065fe:	2362      	movs	r3, #98	@ 0x62
 8006600:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8006602:	f107 010b 	add.w	r1, r7, #11
 8006606:	7b38      	ldrb	r0, [r7, #12]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2201      	movs	r2, #1
 800660c:	f7fd ffb8 	bl	8004580 <bmi160_get_regs>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d11e      	bne.n	800665a <config_no_motion_dur_thr+0xd2>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8006630:	7bba      	ldrb	r2, [r7, #14]
 8006632:	7b7b      	ldrb	r3, [r7, #13]
 8006634:	4313      	orrs	r3, r2
 8006636:	b2db      	uxtb	r3, r3
 8006638:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	789b      	ldrb	r3, [r3, #2]
 8006642:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8006644:	2361      	movs	r3, #97	@ 0x61
 8006646:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8006648:	f107 0108 	add.w	r1, r7, #8
 800664c:	7b38      	ldrb	r0, [r7, #12]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2202      	movs	r2, #2
 8006652:	f7fd ffc8 	bl	80045e6 <bmi160_set_regs>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800665a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006678:	f107 010d 	add.w	r1, r7, #13
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2201      	movs	r2, #1
 8006680:	2050      	movs	r0, #80	@ 0x50
 8006682:	f7fd ff7d 	bl	8004580 <bmi160_get_regs>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d124      	bne.n	80066dc <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80066a0:	7b7b      	ldrb	r3, [r7, #13]
 80066a2:	f023 0307 	bic.w	r3, r3, #7
 80066a6:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	f043 0307 	orr.w	r3, r3, #7
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2201      	movs	r2, #1
 80066b6:	70da      	strb	r2, [r3, #3]
 80066b8:	e007      	b.n	80066ca <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80066ba:	7b7b      	ldrb	r3, [r7, #13]
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	22ff      	movs	r2, #255	@ 0xff
 80066c8:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80066ca:	f107 010d 	add.w	r1, r7, #13
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2201      	movs	r2, #1
 80066d2:	2050      	movs	r0, #80	@ 0x50
 80066d4:	f7fd ff87 	bl	80045e6 <bmi160_set_regs>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80066dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7fe fd02 	bl	8005100 <set_intr_pin_config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d119      	bne.n	800673c <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fc86 	bl	800601c <map_feature_interrupt>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10f      	bne.n	800673c <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	68b8      	ldr	r0, [r7, #8]
 8006720:	f000 f812 	bl	8006748 <config_sig_motion_data_src>
 8006724:	4603      	mov	r3, r0
 8006726:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f000 f83f 	bl	80067b6 <config_sig_dur_threshold>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800673c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800675a:	f107 010d 	add.w	r1, r7, #13
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	2059      	movs	r0, #89	@ 0x59
 8006764:	f7fd ff0c 	bl	8004580 <bmi160_get_regs>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800676c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11a      	bne.n	80067aa <config_sig_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8006774:	7b7b      	ldrb	r3, [r7, #13]
 8006776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	b25b      	sxtb	r3, r3
 8006788:	01db      	lsls	r3, r3, #7
 800678a:	b25a      	sxtb	r2, r3
 800678c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006790:	4313      	orrs	r3, r2
 8006792:	b25b      	sxtb	r3, r3
 8006794:	b2db      	uxtb	r3, r3
 8006796:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006798:	f107 010d 	add.w	r1, r7, #13
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2201      	movs	r2, #1
 80067a0:	2059      	movs	r0, #89	@ 0x59
 80067a2:	f7fd ff20 	bl	80045e6 <bmi160_set_regs>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80067aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 80067ca:	f107 010d 	add.w	r1, r7, #13
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2201      	movs	r2, #1
 80067d2:	2060      	movs	r0, #96	@ 0x60
 80067d4:	f7fd ff07 	bl	80045e6 <bmi160_set_regs>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80067dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d154      	bne.n	800688e <config_sig_dur_threshold+0xd8>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80067e4:	f107 010d 	add.w	r1, r7, #13
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	2062      	movs	r0, #98	@ 0x62
 80067ee:	f7fd fec7 	bl	8004580 <bmi160_get_regs>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80067f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d147      	bne.n	800688e <config_sig_dur_threshold+0xd8>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 80067fe:	7b7b      	ldrb	r3, [r7, #13]
 8006800:	f023 030c 	bic.w	r3, r3, #12
 8006804:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800680e:	b2db      	uxtb	r3, r3
 8006810:	b25b      	sxtb	r3, r3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	b25b      	sxtb	r3, r3
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	b25a      	sxtb	r2, r3
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	4313      	orrs	r3, r2
 8006822:	b25b      	sxtb	r3, r3
 8006824:	b2db      	uxtb	r3, r3
 8006826:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8006828:	7b7b      	ldrb	r3, [r7, #13]
 800682a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800682e:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006838:	b2db      	uxtb	r3, r3
 800683a:	b25b      	sxtb	r3, r3
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	b25b      	sxtb	r3, r3
 8006840:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006844:	b25a      	sxtb	r2, r3
 8006846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800684a:	4313      	orrs	r3, r2
 800684c:	b25b      	sxtb	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8006852:	7b7b      	ldrb	r3, [r7, #13]
 8006854:	f023 0302 	bic.w	r3, r3, #2
 8006858:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006862:	b2db      	uxtb	r3, r3
 8006864:	b25b      	sxtb	r3, r3
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	b25b      	sxtb	r3, r3
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	b25a      	sxtb	r2, r3
 8006870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006874:	4313      	orrs	r3, r2
 8006876:	b25b      	sxtb	r3, r3
 8006878:	b2db      	uxtb	r3, r3
 800687a:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 800687c:	f107 010d 	add.w	r1, r7, #13
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2201      	movs	r2, #1
 8006884:	2062      	movs	r0, #98	@ 0x62
 8006886:	f7fd feae 	bl	80045e6 <bmi160_set_regs>
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800688e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80068ac:	f107 010d 	add.w	r1, r7, #13
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	2052      	movs	r0, #82	@ 0x52
 80068b6:	f7fd fe63 	bl	8004580 <bmi160_get_regs>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80068be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11d      	bne.n	8006902 <enable_step_detect_int+0x68>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 80068c6:	7b7b      	ldrb	r3, [r7, #13]
 80068c8:	f023 0308 	bic.w	r3, r3, #8
 80068cc:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	b25b      	sxtb	r3, r3
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	b25a      	sxtb	r2, r3
 80068e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80068f0:	f107 010d 	add.w	r1, r7, #13
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2201      	movs	r2, #1
 80068f8:	2052      	movs	r0, #82	@ 0x52
 80068fa:	f7fd fe74 	bl	80045e6 <bmi160_set_regs>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 800691c:	2300      	movs	r3, #0
 800691e:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 800692e:	2315      	movs	r3, #21
 8006930:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8006932:	2303      	movs	r3, #3
 8006934:	737b      	strb	r3, [r7, #13]
 8006936:	e05c      	b.n	80069f2 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d104      	bne.n	8006950 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8006946:	232d      	movs	r3, #45	@ 0x2d
 8006948:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 800694a:	2300      	movs	r3, #0
 800694c:	737b      	strb	r3, [r7, #13]
 800694e:	e050      	b.n	80069f2 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b80      	cmp	r3, #128	@ 0x80
 800695c:	d104      	bne.n	8006968 <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 800695e:	231d      	movs	r3, #29
 8006960:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8006962:	2307      	movs	r3, #7
 8006964:	737b      	strb	r3, [r7, #13]
 8006966:	e044      	b.n	80069f2 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2bc0      	cmp	r3, #192	@ 0xc0
 8006974:	d13d      	bne.n	80069f2 <config_step_detect+0xe4>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8006976:	f107 010c 	add.w	r1, r7, #12
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2202      	movs	r2, #2
 800697e:	207a      	movs	r0, #122	@ 0x7a
 8006980:	f7fd fdfe 	bl	8004580 <bmi160_get_regs>
 8006984:	4603      	mov	r3, r0
 8006986:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8006988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d130      	bne.n	80069f2 <config_step_detect+0xe4>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8006990:	7b3b      	ldrb	r3, [r7, #12]
 8006992:	f023 0318 	bic.w	r3, r3, #24
 8006996:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	b25b      	sxtb	r3, r3
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	f003 0318 	and.w	r3, r3, #24
 80069ac:	b25a      	sxtb	r2, r3
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b25b      	sxtb	r3, r3
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 80069ba:	7b3b      	ldrb	r3, [r7, #12]
 80069bc:	f023 0307 	bic.w	r3, r3, #7
 80069c0:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 80069d6:	7b7b      	ldrb	r3, [r7, #13]
 80069d8:	f023 0307 	bic.w	r3, r3, #7
 80069dc:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 80069f2:	f107 010c 	add.w	r1, r7, #12
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2202      	movs	r2, #2
 80069fa:	207a      	movs	r0, #122	@ 0x7a
 80069fc:	f7fd fdf3 	bl	80045e6 <bmi160_set_regs>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8006a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006a24:	f107 0115 	add.w	r1, r7, #21
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	2050      	movs	r0, #80	@ 0x50
 8006a2e:	f7fd fda7 	bl	8004580 <bmi160_get_regs>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d137      	bne.n	8006aae <enable_tap_int+0x9e>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d115      	bne.n	8006a72 <enable_tap_int+0x62>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8006a46:	7d7b      	ldrb	r3, [r7, #21]
 8006a48:	f023 0320 	bic.w	r3, r3, #32
 8006a4c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	b25b      	sxtb	r3, r3
 8006a5a:	015b      	lsls	r3, r3, #5
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	b25a      	sxtb	r2, r3
 8006a64:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	757b      	strb	r3, [r7, #21]
 8006a70:	e014      	b.n	8006a9c <enable_tap_int+0x8c>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8006a72:	7d7b      	ldrb	r3, [r7, #21]
 8006a74:	f023 0310 	bic.w	r3, r3, #16
 8006a78:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	b25a      	sxtb	r2, r3
 8006a90:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	b25b      	sxtb	r3, r3
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006a9c:	f107 0115 	add.w	r1, r7, #21
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	2050      	movs	r0, #80	@ 0x50
 8006aa6:	f7fd fd9e 	bl	80045e6 <bmi160_set_regs>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7fe fb19 	bl	8005100 <set_intr_pin_config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d11a      	bne.n	8006b10 <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff fa9d 	bl	800601c <map_feature_interrupt>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d110      	bne.n	8006b10 <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	68b8      	ldr	r0, [r7, #8]
 8006af2:	f000 f813 	bl	8006b1c <config_tap_data_src>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f842 	bl	8006b90 <config_tap_param>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006b2e:	f107 010d 	add.w	r1, r7, #13
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2201      	movs	r2, #1
 8006b36:	2058      	movs	r0, #88	@ 0x58
 8006b38:	f7fd fd22 	bl	8004580 <bmi160_get_regs>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11d      	bne.n	8006b84 <config_tap_data_src+0x68>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8006b48:	7b7b      	ldrb	r3, [r7, #13]
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	b25b      	sxtb	r3, r3
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	b25a      	sxtb	r2, r3
 8006b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006b72:	f107 010d 	add.w	r1, r7, #13
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	2058      	movs	r0, #88	@ 0x58
 8006b7c:	f7fd fd33 	bl	80045e6 <bmi160_set_regs>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8006bac:	f107 0114 	add.w	r1, r7, #20
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	2063      	movs	r0, #99	@ 0x63
 8006bb6:	f7fd fce3 	bl	8004580 <bmi160_get_regs>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006bbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d17a      	bne.n	8006cbc <config_tap_param+0x12c>
    {
        data = data_array[count];
 8006bc6:	7f3b      	ldrb	r3, [r7, #28]
 8006bc8:	3320      	adds	r3, #32
 8006bca:	443b      	add	r3, r7
 8006bcc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006bd0:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d113      	bne.n	8006c02 <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8006be6:	7fbb      	ldrb	r3, [r7, #30]
 8006be8:	f023 0307 	bic.w	r3, r3, #7
 8006bec:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8006bee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	b25a      	sxtb	r2, r3
 8006bf8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8006c0e:	7fbb      	ldrb	r3, [r7, #30]
 8006c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c14:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8006c16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006c1a:	019b      	lsls	r3, r3, #6
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c22:	b25a      	sxtb	r2, r3
 8006c24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8006c3a:	7fbb      	ldrb	r3, [r7, #30]
 8006c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c40:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8006c42:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006c46:	01db      	lsls	r3, r3, #7
 8006c48:	b25a      	sxtb	r2, r3
 8006c4a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006c54:	7f3b      	ldrb	r3, [r7, #28]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	773a      	strb	r2, [r7, #28]
 8006c5a:	3320      	adds	r3, #32
 8006c5c:	443b      	add	r3, r7
 8006c5e:	7fba      	ldrb	r2, [r7, #30]
 8006c60:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8006c64:	7f3b      	ldrb	r3, [r7, #28]
 8006c66:	3320      	adds	r3, #32
 8006c68:	443b      	add	r3, r7
 8006c6a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006c6e:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8006c7c:	7fbb      	ldrb	r3, [r7, #30]
 8006c7e:	f023 031f 	bic.w	r3, r3, #31
 8006c82:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8006c84:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	b25a      	sxtb	r2, r3
 8006c8e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b25b      	sxtb	r3, r3
 8006c96:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006c98:	7f3b      	ldrb	r3, [r7, #28]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	773a      	strb	r2, [r7, #28]
 8006c9e:	3320      	adds	r3, #32
 8006ca0:	443b      	add	r3, r7
 8006ca2:	7fba      	ldrb	r2, [r7, #30]
 8006ca4:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8006ca8:	7f3b      	ldrb	r3, [r7, #28]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f107 0114 	add.w	r1, r7, #20
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2063      	movs	r0, #99	@ 0x63
 8006cb4:	f7fd fc97 	bl	80045e6 <bmi160_set_regs>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006cda:	f107 010d 	add.w	r1, r7, #13
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	2050      	movs	r0, #80	@ 0x50
 8006ce4:	f7fd fc4c 	bl	8004580 <bmi160_get_regs>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11d      	bne.n	8006d30 <enable_orient_int+0x68>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8006cf4:	7b7b      	ldrb	r3, [r7, #13]
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cfa:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	789b      	ldrb	r3, [r3, #2]
 8006d00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	b25b      	sxtb	r3, r3
 8006d08:	019b      	lsls	r3, r3, #6
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	b25a      	sxtb	r2, r3
 8006d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006d1e:	f107 010d 	add.w	r1, r7, #13
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	2050      	movs	r0, #80	@ 0x50
 8006d28:	f7fd fc5d 	bl	80045e6 <bmi160_set_regs>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006d4e:	2300      	movs	r3, #0
 8006d50:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006d52:	f107 0108 	add.w	r1, r7, #8
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	2065      	movs	r0, #101	@ 0x65
 8006d5c:	f7fd fc10 	bl	8004580 <bmi160_get_regs>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d174      	bne.n	8006e56 <config_orient_int_settg+0x11a>
    {
        data = data_array[0];
 8006d6c:	7a3b      	ldrb	r3, [r7, #8]
 8006d6e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	7b7b      	ldrb	r3, [r7, #13]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	f023 030c 	bic.w	r3, r3, #12
 8006d90:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	b25b      	sxtb	r3, r3
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	b25a      	sxtb	r2, r3
 8006da8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b25b      	sxtb	r3, r3
 8006db0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	b25a      	sxtb	r2, r3
 8006dca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	b25b      	sxtb	r3, r3
 8006dd2:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006dd8:	7a7b      	ldrb	r3, [r7, #9]
 8006dda:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006de2:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	7b7b      	ldrb	r3, [r7, #13]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfc:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	019b      	lsls	r3, r3, #6
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e12:	b25a      	sxtb	r2, r3
 8006e14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	b25b      	sxtb	r3, r3
 8006e1c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e24:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	01db      	lsls	r3, r3, #7
 8006e34:	b25a      	sxtb	r2, r3
 8006e36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b25b      	sxtb	r3, r3
 8006e3e:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	2065      	movs	r0, #101	@ 0x65
 8006e4e:	f7fd fbca 	bl	80045e6 <bmi160_set_regs>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006e74:	f107 010d 	add.w	r1, r7, #13
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	2050      	movs	r0, #80	@ 0x50
 8006e7e:	f7fd fb7f 	bl	8004580 <bmi160_get_regs>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d11a      	bne.n	8006ec4 <enable_flat_int+0x62>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8006e8e:	7b7b      	ldrb	r3, [r7, #13]
 8006e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e94:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	01db      	lsls	r3, r3, #7
 8006ea4:	b25a      	sxtb	r2, r3
 8006ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006eb2:	f107 010d 	add.w	r1, r7, #13
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2050      	movs	r0, #80	@ 0x50
 8006ebc:	f7fd fb93 	bl	80045e6 <bmi160_set_regs>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006ee6:	f107 0108 	add.w	r1, r7, #8
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2202      	movs	r2, #2
 8006eee:	2067      	movs	r0, #103	@ 0x67
 8006ef0:	f7fd fb46 	bl	8004580 <bmi160_get_regs>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d13e      	bne.n	8006f7e <config_flat_int_settg+0xae>
    {
        data = data_array[0];
 8006f00:	7a3b      	ldrb	r3, [r7, #8]
 8006f02:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f0a:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	7b7b      	ldrb	r3, [r7, #13]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006f22:	7a7b      	ldrb	r3, [r7, #9]
 8006f24:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006f2c:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	b25b      	sxtb	r3, r3
 8006f3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f42:	b25a      	sxtb	r2, r3
 8006f44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	b25b      	sxtb	r3, r3
 8006f4c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	7b7b      	ldrb	r3, [r7, #13]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2202      	movs	r2, #2
 8006f74:	2067      	movs	r0, #103	@ 0x67
 8006f76:	f7fd fb36 	bl	80045e6 <bmi160_set_regs>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006f9c:	f107 010d 	add.w	r1, r7, #13
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	2051      	movs	r0, #81	@ 0x51
 8006fa6:	f7fd faeb 	bl	8004580 <bmi160_get_regs>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d11d      	bne.n	8006ff2 <enable_low_g_int+0x68>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8006fb6:	7b7b      	ldrb	r3, [r7, #13]
 8006fb8:	f023 0308 	bic.w	r3, r3, #8
 8006fbc:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	789b      	ldrb	r3, [r3, #2]
 8006fc2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	b25b      	sxtb	r3, r3
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	b25b      	sxtb	r3, r3
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	b25a      	sxtb	r2, r3
 8006fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006fe0:	f107 010d 	add.w	r1, r7, #13
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	2051      	movs	r0, #81	@ 0x51
 8006fea:	f7fd fafc 	bl	80045e6 <bmi160_set_regs>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8007010:	f107 010d 	add.w	r1, r7, #13
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2201      	movs	r2, #1
 8007018:	2058      	movs	r0, #88	@ 0x58
 800701a:	f7fd fab1 	bl	8004580 <bmi160_get_regs>
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d11a      	bne.n	8007060 <config_low_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 800702a:	7b7b      	ldrb	r3, [r7, #13]
 800702c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007030:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	789b      	ldrb	r3, [r3, #2]
 8007036:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	b25b      	sxtb	r3, r3
 800703e:	01db      	lsls	r3, r3, #7
 8007040:	b25a      	sxtb	r2, r3
 8007042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007046:	4313      	orrs	r3, r2
 8007048:	b25b      	sxtb	r3, r3
 800704a:	b2db      	uxtb	r3, r3
 800704c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800704e:	f107 010d 	add.w	r1, r7, #13
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	2058      	movs	r0, #88	@ 0x58
 8007058:	f7fd fac5 	bl	80045e6 <bmi160_set_regs>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	2100      	movs	r1, #0
 8007080:	460a      	mov	r2, r1
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	460a      	mov	r2, r1
 8007086:	709a      	strb	r2, [r3, #2]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8007088:	f107 0308 	add.w	r3, r7, #8
 800708c:	1c99      	adds	r1, r3, #2
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2201      	movs	r2, #1
 8007092:	205c      	movs	r0, #92	@ 0x5c
 8007094:	f7fd fa74 	bl	8004580 <bmi160_get_regs>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800709c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d131      	bne.n	8007108 <config_low_g_int_settg+0x9c>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 80070a4:	7abb      	ldrb	r3, [r7, #10]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	789b      	ldrb	r3, [r3, #2]
 80070b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80070c0:	7abb      	ldrb	r3, [r7, #10]
 80070c2:	f023 0304 	bic.w	r3, r3, #4
 80070c6:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	789b      	ldrb	r3, [r3, #2]
 80070cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	b25a      	sxtb	r2, r3
 80070de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 80070f6:	f107 0108 	add.w	r1, r7, #8
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2203      	movs	r2, #3
 80070fe:	205a      	movs	r0, #90	@ 0x5a
 8007100:	f7fd fa71 	bl	80045e6 <bmi160_set_regs>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007108:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007126:	f107 010d 	add.w	r1, r7, #13
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2201      	movs	r2, #1
 800712e:	2051      	movs	r0, #81	@ 0x51
 8007130:	f7fd fa26 	bl	8004580 <bmi160_get_regs>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d140      	bne.n	80071c2 <enable_high_g_int+0xae>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8007140:	7b7b      	ldrb	r3, [r7, #13]
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	4313      	orrs	r3, r2
 8007158:	b2db      	uxtb	r3, r3
 800715a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800715c:	7b7b      	ldrb	r3, [r7, #13]
 800715e:	f023 0302 	bic.w	r3, r3, #2
 8007162:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800716c:	b2db      	uxtb	r3, r3
 800716e:	b25b      	sxtb	r3, r3
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	b25b      	sxtb	r3, r3
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	b25a      	sxtb	r2, r3
 800717a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717e:	4313      	orrs	r3, r2
 8007180:	b25b      	sxtb	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8007186:	7b7b      	ldrb	r3, [r7, #13]
 8007188:	f023 0304 	bic.w	r3, r3, #4
 800718c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007196:	b2db      	uxtb	r3, r3
 8007198:	b25b      	sxtb	r3, r3
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	b25b      	sxtb	r3, r3
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	b25a      	sxtb	r2, r3
 80071a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b25b      	sxtb	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80071b0:	f107 010d 	add.w	r1, r7, #13
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2201      	movs	r2, #1
 80071b8:	2051      	movs	r0, #81	@ 0x51
 80071ba:	f7fd fa14 	bl	80045e6 <bmi160_set_regs>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80071c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80071e0:	f107 010d 	add.w	r1, r7, #13
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2201      	movs	r2, #1
 80071e8:	2058      	movs	r0, #88	@ 0x58
 80071ea:	f7fd f9c9 	bl	8004580 <bmi160_get_regs>
 80071ee:	4603      	mov	r3, r0
 80071f0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80071f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d11a      	bne.n	8007230 <config_high_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80071fa:	7b7b      	ldrb	r3, [r7, #13]
 80071fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007200:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	b25b      	sxtb	r3, r3
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	b25a      	sxtb	r2, r3
 8007212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007216:	4313      	orrs	r3, r2
 8007218:	b25b      	sxtb	r3, r3
 800721a:	b2db      	uxtb	r3, r3
 800721c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800721e:	f107 010d 	add.w	r1, r7, #13
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2201      	movs	r2, #1
 8007226:	2058      	movs	r0, #88	@ 0x58
 8007228:	f7fd f9dd 	bl	80045e6 <bmi160_set_regs>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 800724a:	f107 0308 	add.w	r3, r7, #8
 800724e:	2100      	movs	r1, #0
 8007250:	460a      	mov	r2, r1
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	460a      	mov	r2, r1
 8007256:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2201      	movs	r2, #1
 8007260:	205c      	movs	r0, #92	@ 0x5c
 8007262:	f7fd f98d 	bl	8004580 <bmi160_get_regs>
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800726a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d120      	bne.n	80072b4 <config_high_g_int_settg+0x78>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8007272:	7a3b      	ldrb	r3, [r7, #8]
 8007274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007278:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007282:	b2db      	uxtb	r3, r3
 8007284:	b25b      	sxtb	r3, r3
 8007286:	019b      	lsls	r3, r3, #6
 8007288:	b25a      	sxtb	r2, r3
 800728a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800728e:	4313      	orrs	r3, r2
 8007290:	b25b      	sxtb	r3, r3
 8007292:	b2db      	uxtb	r3, r3
 8007294:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	789b      	ldrb	r3, [r3, #2]
 800729a:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 80072a2:	f107 0108 	add.w	r1, r7, #8
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2203      	movs	r2, #3
 80072aa:	205c      	movs	r0, #92	@ 0x5c
 80072ac:	f7fd f99b 	bl	80045e6 <bmi160_set_regs>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80072b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80072d2:	f107 010f 	add.w	r1, r7, #15
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2201      	movs	r2, #1
 80072da:	2053      	movs	r0, #83	@ 0x53
 80072dc:	f7fd f950 	bl	8004580 <bmi160_get_regs>
 80072e0:	4603      	mov	r3, r0
 80072e2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80072e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 80af 	bne.w	800744c <config_int_out_ctrl+0x18c>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3302      	adds	r3, #2
 80072f2:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d14d      	bne.n	8007398 <config_int_out_ctrl+0xd8>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	f023 0308 	bic.w	r3, r3, #8
 8007302:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	b25b      	sxtb	r3, r3
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	b25b      	sxtb	r3, r3
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	b25a      	sxtb	r2, r3
 800731a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800731e:	4313      	orrs	r3, r2
 8007320:	b25b      	sxtb	r3, r3
 8007322:	b2db      	uxtb	r3, r3
 8007324:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	f023 0304 	bic.w	r3, r3, #4
 800732c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007336:	b2db      	uxtb	r3, r3
 8007338:	b25b      	sxtb	r3, r3
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	b25b      	sxtb	r3, r3
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	b25a      	sxtb	r2, r3
 8007344:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007348:	4313      	orrs	r3, r2
 800734a:	b25b      	sxtb	r3, r3
 800734c:	b2db      	uxtb	r3, r3
 800734e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	f023 0302 	bic.w	r3, r3, #2
 8007356:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007360:	b2db      	uxtb	r3, r3
 8007362:	b25b      	sxtb	r3, r3
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	b25b      	sxtb	r3, r3
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	b25a      	sxtb	r2, r3
 800736e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007372:	4313      	orrs	r3, r2
 8007374:	b25b      	sxtb	r3, r3
 8007376:	b2db      	uxtb	r3, r3
 8007378:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	7dbb      	ldrb	r3, [r7, #22]
 8007390:	4313      	orrs	r3, r2
 8007392:	b2db      	uxtb	r3, r3
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e050      	b.n	800743a <config_int_out_ctrl+0x17a>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	01db      	lsls	r3, r3, #7
 80073ae:	b25a      	sxtb	r2, r3
 80073b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c2:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	b25b      	sxtb	r3, r3
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	b25b      	sxtb	r3, r3
 80073d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d8:	b25a      	sxtb	r2, r3
 80073da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80073de:	4313      	orrs	r3, r2
 80073e0:	b25b      	sxtb	r3, r3
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	f023 0320 	bic.w	r3, r3, #32
 80073ec:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	b25b      	sxtb	r3, r3
 80073fa:	015b      	lsls	r3, r3, #5
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	b25a      	sxtb	r2, r3
 8007404:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007408:	4313      	orrs	r3, r2
 800740a:	b25b      	sxtb	r3, r3
 800740c:	b2db      	uxtb	r3, r3
 800740e:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	f023 0310 	bic.w	r3, r3, #16
 8007416:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007420:	b2db      	uxtb	r3, r3
 8007422:	b25b      	sxtb	r3, r3
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	b25a      	sxtb	r2, r3
 800742e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007432:	4313      	orrs	r3, r2
 8007434:	b25b      	sxtb	r3, r3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 800743a:	f107 010f 	add.w	r1, r7, #15
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2201      	movs	r2, #1
 8007442:	2053      	movs	r0, #83	@ 0x53
 8007444:	f7fd f8cf 	bl	80045e6 <bmi160_set_regs>
 8007448:	4603      	mov	r3, r0
 800744a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800744c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 800746a:	f107 010f 	add.w	r1, r7, #15
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	2054      	movs	r0, #84	@ 0x54
 8007474:	f7fd f884 	bl	8004580 <bmi160_get_regs>
 8007478:	4603      	mov	r3, r0
 800747a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800747c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d148      	bne.n	8007516 <config_int_latch+0xbe>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3302      	adds	r3, #2
 8007488:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d115      	bne.n	80074be <config_int_latch+0x66>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	f023 0310 	bic.w	r3, r3, #16
 8007498:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	f003 0310 	and.w	r3, r3, #16
 80074ae:	b25a      	sxtb	r2, r3
 80074b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	73fb      	strb	r3, [r7, #15]
 80074bc:	e014      	b.n	80074e8 <config_int_latch+0x90>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	f023 0320 	bic.w	r3, r3, #32
 80074c4:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	015b      	lsls	r3, r3, #5
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	b25a      	sxtb	r2, r3
 80074dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	f023 030f 	bic.w	r3, r3, #15
 80074ee:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	7dbb      	ldrb	r3, [r7, #22]
 80074fe:	4313      	orrs	r3, r2
 8007500:	b2db      	uxtb	r3, r3
 8007502:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8007504:	f107 010f 	add.w	r1, r7, #15
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	2054      	movs	r0, #84	@ 0x54
 800750e:	f7fd f86a 	bl	80045e6 <bmi160_set_regs>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <set_fifo_full_int+0x1c>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800753e:	23ff      	movs	r3, #255	@ 0xff
 8007540:	73fb      	strb	r3, [r7, #15]
 8007542:	e019      	b.n	8007578 <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f81c 	bl	8007584 <enable_fifo_full_int>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10f      	bne.n	8007578 <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fd fdd0 	bl	8005100 <set_intr_pin_config>
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fe fde8 	bl	8006144 <map_hardware_interrupt>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007578:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007592:	f107 010e 	add.w	r1, r7, #14
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	2051      	movs	r0, #81	@ 0x51
 800759c:	f7fc fff0 	bl	8004580 <bmi160_get_regs>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80075a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11c      	bne.n	80075e6 <enable_fifo_full_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	b25b      	sxtb	r3, r3
 80075b0:	f023 0320 	bic.w	r3, r3, #32
 80075b4:	b25a      	sxtb	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7a1b      	ldrb	r3, [r3, #8]
 80075ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	b25b      	sxtb	r3, r3
 80075c2:	015b      	lsls	r3, r3, #5
 80075c4:	b25b      	sxtb	r3, r3
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80075d4:	f107 010e 	add.w	r1, r7, #14
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2201      	movs	r2, #1
 80075dc:	2051      	movs	r0, #81	@ 0x51
 80075de:	f7fd f802 	bl	80045e6 <bmi160_set_regs>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80075e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <set_fifo_watermark_int+0x1c>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800760e:	23ff      	movs	r3, #255	@ 0xff
 8007610:	73fb      	strb	r3, [r7, #15]
 8007612:	e019      	b.n	8007648 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f81c 	bl	8007654 <enable_fifo_wtm_int>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fd fd68 	bl	8005100 <set_intr_pin_config>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fe fd80 	bl	8006144 <map_hardware_interrupt>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007662:	f107 010e 	add.w	r1, r7, #14
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	2051      	movs	r0, #81	@ 0x51
 800766c:	f7fc ff88 	bl	8004580 <bmi160_get_regs>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d11c      	bne.n	80076b6 <enable_fifo_wtm_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	b25b      	sxtb	r3, r3
 8007680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007684:	b25a      	sxtb	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7a1b      	ldrb	r3, [r3, #8]
 800768a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	b25b      	sxtb	r3, r3
 8007692:	019b      	lsls	r3, r3, #6
 8007694:	b25b      	sxtb	r3, r3
 8007696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800769a:	b25b      	sxtb	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	b25b      	sxtb	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80076a4:	f107 010e 	add.w	r1, r7, #14
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2201      	movs	r2, #1
 80076ac:	2051      	movs	r0, #81	@ 0x51
 80076ae:	f7fc ff9a 	bl	80045e6 <bmi160_set_regs>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80076b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80076cc:	f107 010e 	add.w	r1, r7, #14
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2201      	movs	r2, #1
 80076d4:	201b      	movs	r0, #27
 80076d6:	f7fc ff53 	bl	8004580 <bmi160_get_regs>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80076de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d107      	bne.n	80076f6 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	10db      	asrs	r3, r3, #3
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80076f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800770c:	6838      	ldr	r0, [r7, #0]
 800770e:	f7fd fd12 	bl	8005136 <null_ptr_check>
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8007716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800771e:	23ff      	movs	r3, #255	@ 0xff
 8007720:	73fb      	strb	r3, [r7, #15]
 8007722:	e034      	b.n	800778e <configure_offset_enable+0x8c>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8007724:	f107 010e 	add.w	r1, r7, #14
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2201      	movs	r2, #1
 800772c:	2077      	movs	r0, #119	@ 0x77
 800772e:	f7fc ff27 	bl	8004580 <bmi160_get_regs>
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d127      	bne.n	800778e <configure_offset_enable+0x8c>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	b25b      	sxtb	r3, r3
 8007742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007746:	b25a      	sxtb	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	795b      	ldrb	r3, [r3, #5]
 800774c:	b25b      	sxtb	r3, r3
 800774e:	01db      	lsls	r3, r3, #7
 8007750:	b25b      	sxtb	r3, r3
 8007752:	4313      	orrs	r3, r2
 8007754:	b25b      	sxtb	r3, r3
 8007756:	b2db      	uxtb	r3, r3
 8007758:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	b25b      	sxtb	r3, r3
 800775e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007762:	b25a      	sxtb	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	791b      	ldrb	r3, [r3, #4]
 8007768:	b25b      	sxtb	r3, r3
 800776a:	019b      	lsls	r3, r3, #6
 800776c:	b25b      	sxtb	r3, r3
 800776e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007772:	b25b      	sxtb	r3, r3
 8007774:	4313      	orrs	r3, r2
 8007776:	b25b      	sxtb	r3, r3
 8007778:	b2db      	uxtb	r3, r3
 800777a:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 800777c:	f107 010e 	add.w	r1, r7, #14
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2201      	movs	r2, #1
 8007784:	2077      	movs	r0, #119	@ 0x77
 8007786:	f7fc ff2e 	bl	80045e6 <bmi160_set_regs>
 800778a:	4603      	mov	r3, r0
 800778c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800778e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80077a8:	2303      	movs	r3, #3
 80077aa:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80077b0:	f107 011c 	add.w	r1, r7, #28
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2201      	movs	r2, #1
 80077b8:	207e      	movs	r0, #126	@ 0x7e
 80077ba:	f7fc ff14 	bl	80045e6 <bmi160_set_regs>
 80077be:	4603      	mov	r3, r0
 80077c0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80077c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d141      	bne.n	800784e <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80077ca:	f107 031d 	add.w	r3, r7, #29
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff ff76 	bl	80076c2 <get_foc_status>
 80077d6:	4603      	mov	r3, r0
 80077d8:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80077da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d112      	bne.n	8007808 <trigger_foc+0x6e>
 80077e2:	7f7b      	ldrb	r3, [r7, #29]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d025      	beq.n	8007834 <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80077e8:	e00e      	b.n	8007808 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	2019      	movs	r0, #25
 80077f0:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80077f2:	f107 031d 	add.w	r3, r7, #29
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff ff62 	bl	80076c2 <get_foc_status>
 80077fe:	4603      	mov	r3, r0
 8007800:	77fb      	strb	r3, [r7, #31]
                timeout++;
 8007802:	7fbb      	ldrb	r3, [r7, #30]
 8007804:	3301      	adds	r3, #1
 8007806:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8007808:	7f7b      	ldrb	r3, [r7, #29]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d002      	beq.n	8007814 <trigger_foc+0x7a>
 800780e:	7fbb      	ldrb	r3, [r7, #30]
 8007810:	2b1f      	cmp	r3, #31
 8007812:	d9ea      	bls.n	80077ea <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 8007814:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <trigger_foc+0x96>
 800781c:	7f7b      	ldrb	r3, [r7, #29]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d106      	bne.n	8007830 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7fd f99b 	bl	8004b60 <bmi160_get_offsets>
 800782a:	4603      	mov	r3, r0
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e001      	b.n	8007834 <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8007830:	23f5      	movs	r3, #245	@ 0xf5
 8007832:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8007834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 800783c:	f107 0108 	add.w	r1, r7, #8
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2214      	movs	r2, #20
 8007844:	200c      	movs	r0, #12
 8007846:	f7fc fe9b 	bl	8004580 <bmi160_get_regs>
 800784a:	4603      	mov	r3, r0
 800784c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800784e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8007864:	f000 f970 	bl	8007b48 <set_bmi160_Ares>
	set_bmi160_Gres();
 8007868:	f000 f99a 	bl	8007ba0 <set_bmi160_Gres>
	get_bmi160_Ares();
 800786c:	f000 f9ca 	bl	8007c04 <get_bmi160_Ares>
	get_bmi160_Gres();
 8007870:	f000 f9fe 	bl	8007c70 <get_bmi160_Gres>

    sensor.id = 0;
 8007874:	4b52      	ldr	r3, [pc, #328]	@ (80079c0 <BMI160_init+0x164>)
 8007876:	2200      	movs	r2, #0
 8007878:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 800787a:	4b51      	ldr	r3, [pc, #324]	@ (80079c0 <BMI160_init+0x164>)
 800787c:	2200      	movs	r2, #0
 800787e:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8007880:	4b4f      	ldr	r3, [pc, #316]	@ (80079c0 <BMI160_init+0x164>)
 8007882:	4a50      	ldr	r2, [pc, #320]	@ (80079c4 <BMI160_init+0x168>)
 8007884:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 8007886:	4b4e      	ldr	r3, [pc, #312]	@ (80079c0 <BMI160_init+0x164>)
 8007888:	4a4f      	ldr	r2, [pc, #316]	@ (80079c8 <BMI160_init+0x16c>)
 800788a:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 800788c:	4b4c      	ldr	r3, [pc, #304]	@ (80079c0 <BMI160_init+0x164>)
 800788e:	4a4f      	ldr	r2, [pc, #316]	@ (80079cc <BMI160_init+0x170>)
 8007890:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 8007892:	4b4b      	ldr	r3, [pc, #300]	@ (80079c0 <BMI160_init+0x164>)
 8007894:	2220      	movs	r2, #32
 8007896:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8007898:	4849      	ldr	r0, [pc, #292]	@ (80079c0 <BMI160_init+0x164>)
 800789a:	f7fc ff55 	bl	8004748 <bmi160_soft_reset>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 80078a2:	4b47      	ldr	r3, [pc, #284]	@ (80079c0 <BMI160_init+0x164>)
 80078a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a6:	20c8      	movs	r0, #200	@ 0xc8
 80078a8:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80078aa:	4845      	ldr	r0, [pc, #276]	@ (80079c0 <BMI160_init+0x164>)
 80078ac:	f7fc fefe 	bl	80046ac <bmi160_init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80078b4:	2324      	movs	r3, #36	@ 0x24
 80078b6:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80078bc:	2301      	movs	r3, #1
 80078be:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80078c0:	89ba      	ldrh	r2, [r7, #12]
 80078c2:	f107 010b 	add.w	r1, r7, #11
 80078c6:	7bb8      	ldrb	r0, [r7, #14]
 80078c8:	4b3d      	ldr	r3, [pc, #244]	@ (80079c0 <BMI160_init+0x164>)
 80078ca:	f7fc fe59 	bl	8004580 <bmi160_get_regs>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80078d2:	4b3b      	ldr	r3, [pc, #236]	@ (80079c0 <BMI160_init+0x164>)
 80078d4:	220b      	movs	r2, #11
 80078d6:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80078d8:	4b39      	ldr	r3, [pc, #228]	@ (80079c0 <BMI160_init+0x164>)
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	2064      	movs	r0, #100	@ 0x64
 80078de:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80078e0:	4b3b      	ldr	r3, [pc, #236]	@ (80079d0 <BMI160_init+0x174>)
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	4b36      	ldr	r3, [pc, #216]	@ (80079c0 <BMI160_init+0x164>)
 80078e6:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80078e8:	4b35      	ldr	r3, [pc, #212]	@ (80079c0 <BMI160_init+0x164>)
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	2064      	movs	r0, #100	@ 0x64
 80078ee:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80078f0:	4b33      	ldr	r3, [pc, #204]	@ (80079c0 <BMI160_init+0x164>)
 80078f2:	2211      	movs	r2, #17
 80078f4:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80078f6:	4b32      	ldr	r3, [pc, #200]	@ (80079c0 <BMI160_init+0x164>)
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	2064      	movs	r0, #100	@ 0x64
 80078fc:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80078fe:	4b30      	ldr	r3, [pc, #192]	@ (80079c0 <BMI160_init+0x164>)
 8007900:	2202      	movs	r2, #2
 8007902:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 8007904:	4b2e      	ldr	r3, [pc, #184]	@ (80079c0 <BMI160_init+0x164>)
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	2064      	movs	r0, #100	@ 0x64
 800790a:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 800790c:	4b2c      	ldr	r3, [pc, #176]	@ (80079c0 <BMI160_init+0x164>)
 800790e:	220b      	movs	r2, #11
 8007910:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8007912:	4b2b      	ldr	r3, [pc, #172]	@ (80079c0 <BMI160_init+0x164>)
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	2064      	movs	r0, #100	@ 0x64
 8007918:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 800791a:	4b2e      	ldr	r3, [pc, #184]	@ (80079d4 <BMI160_init+0x178>)
 800791c:	781a      	ldrb	r2, [r3, #0]
 800791e:	4b28      	ldr	r3, [pc, #160]	@ (80079c0 <BMI160_init+0x164>)
 8007920:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8007922:	4b27      	ldr	r3, [pc, #156]	@ (80079c0 <BMI160_init+0x164>)
 8007924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007926:	2064      	movs	r0, #100	@ 0x64
 8007928:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800792a:	4b25      	ldr	r3, [pc, #148]	@ (80079c0 <BMI160_init+0x164>)
 800792c:	2215      	movs	r2, #21
 800792e:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8007930:	4b23      	ldr	r3, [pc, #140]	@ (80079c0 <BMI160_init+0x164>)
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	2064      	movs	r0, #100	@ 0x64
 8007936:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8007938:	4b21      	ldr	r3, [pc, #132]	@ (80079c0 <BMI160_init+0x164>)
 800793a:	2202      	movs	r2, #2
 800793c:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 800793e:	4b20      	ldr	r3, [pc, #128]	@ (80079c0 <BMI160_init+0x164>)
 8007940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007942:	2064      	movs	r0, #100	@ 0x64
 8007944:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8007946:	481e      	ldr	r0, [pc, #120]	@ (80079c0 <BMI160_init+0x164>)
 8007948:	f7fc ff39 	bl	80047be <bmi160_set_sens_conf>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8007950:	f000 f844 	bl	80079dc <start_foc>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8007958:	4b1f      	ldr	r3, [pc, #124]	@ (80079d8 <BMI160_init+0x17c>)
 800795a:	2201      	movs	r2, #1
 800795c:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 800795e:	4b1e      	ldr	r3, [pc, #120]	@ (80079d8 <BMI160_init+0x17c>)
 8007960:	220a      	movs	r2, #10
 8007962:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8007964:	4a1c      	ldr	r2, [pc, #112]	@ (80079d8 <BMI160_init+0x17c>)
 8007966:	7893      	ldrb	r3, [r2, #2]
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 800796e:	4a1a      	ldr	r2, [pc, #104]	@ (80079d8 <BMI160_init+0x17c>)
 8007970:	7893      	ldrb	r3, [r2, #2]
 8007972:	f023 0302 	bic.w	r3, r3, #2
 8007976:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8007978:	4a17      	ldr	r2, [pc, #92]	@ (80079d8 <BMI160_init+0x17c>)
 800797a:	7893      	ldrb	r3, [r2, #2]
 800797c:	f023 0304 	bic.w	r3, r3, #4
 8007980:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8007982:	4a15      	ldr	r2, [pc, #84]	@ (80079d8 <BMI160_init+0x17c>)
 8007984:	7893      	ldrb	r3, [r2, #2]
 8007986:	f043 0308 	orr.w	r3, r3, #8
 800798a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 800798c:	4a12      	ldr	r2, [pc, #72]	@ (80079d8 <BMI160_init+0x17c>)
 800798e:	7893      	ldrb	r3, [r2, #2]
 8007990:	f023 0310 	bic.w	r3, r3, #16
 8007994:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8007996:	4a10      	ldr	r2, [pc, #64]	@ (80079d8 <BMI160_init+0x17c>)
 8007998:	8853      	ldrh	r3, [r2, #2]
 800799a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800799e:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 80079a0:	4907      	ldr	r1, [pc, #28]	@ (80079c0 <BMI160_init+0x164>)
 80079a2:	480d      	ldr	r0, [pc, #52]	@ (80079d8 <BMI160_init+0x17c>)
 80079a4:	f7fc ffcc 	bl	8004940 <bmi160_set_int_config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7bfa      	ldrb	r2, [r7, #15]
 80079b0:	761a      	strb	r2, [r3, #24]
    return rslt;
 80079b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000032c 	.word	0x2000032c
 80079c4:	08007d2d 	.word	0x08007d2d
 80079c8:	08007d71 	.word	0x08007d71
 80079cc:	0800913d 	.word	0x0800913d
 80079d0:	2000038e 	.word	0x2000038e
 80079d4:	2000038f 	.word	0x2000038f
 80079d8:	20000384 	.word	0x20000384

080079dc <start_foc>:

int8_t start_foc()
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 80079e6:	4b13      	ldr	r3, [pc, #76]	@ (8007a34 <start_foc+0x58>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 80079ec:	4b11      	ldr	r3, [pc, #68]	@ (8007a34 <start_foc+0x58>)
 80079ee:	2203      	movs	r2, #3
 80079f0:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 80079f2:	4b10      	ldr	r3, [pc, #64]	@ (8007a34 <start_foc+0x58>)
 80079f4:	2203      	movs	r2, #3
 80079f6:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 80079f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a34 <start_foc+0x58>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 80079fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007a38 <start_foc+0x5c>)
 8007a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a02:	2064      	movs	r0, #100	@ 0x64
 8007a04:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <start_foc+0x58>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8007a0c:	4b09      	ldr	r3, [pc, #36]	@ (8007a34 <start_foc+0x58>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8007a12:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <start_foc+0x5c>)
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	2064      	movs	r0, #100	@ 0x64
 8007a18:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8007a1a:	4a07      	ldr	r2, [pc, #28]	@ (8007a38 <start_foc+0x5c>)
 8007a1c:	4907      	ldr	r1, [pc, #28]	@ (8007a3c <start_foc+0x60>)
 8007a1e:	4805      	ldr	r0, [pc, #20]	@ (8007a34 <start_foc+0x58>)
 8007a20:	f7fd f81a 	bl	8004a58 <bmi160_start_foc>
 8007a24:	4603      	mov	r3, r0
 8007a26:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8007a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000370 	.word	0x20000370
 8007a38:	2000032c 	.word	0x2000032c
 8007a3c:	20000378 	.word	0x20000378

08007a40 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	@ 0x28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8007a48:	4b3a      	ldr	r3, [pc, #232]	@ (8007b34 <bmi160ReadAccelGyro+0xf4>)
 8007a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8007b38 <bmi160ReadAccelGyro+0xf8>)
 8007a4c:	493b      	ldr	r1, [pc, #236]	@ (8007b3c <bmi160ReadAccelGyro+0xfc>)
 8007a4e:	2003      	movs	r0, #3
 8007a50:	f7fc ff0f 	bl	8004872 <bmi160_get_sensor_data>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 8007a5a:	4b38      	ldr	r3, [pc, #224]	@ (8007b3c <bmi160ReadAccelGyro+0xfc>)
 8007a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007a68:	4b35      	ldr	r3, [pc, #212]	@ (8007b40 <bmi160ReadAccelGyro+0x100>)
 8007a6a:	ed93 7a00 	vldr	s14, [r3]
 8007a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a72:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 8007a76:	4b31      	ldr	r3, [pc, #196]	@ (8007b3c <bmi160ReadAccelGyro+0xfc>)
 8007a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007a84:	4b2e      	ldr	r3, [pc, #184]	@ (8007b40 <bmi160ReadAccelGyro+0x100>)
 8007a86:	ed93 7a00 	vldr	s14, [r3]
 8007a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a8e:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8007a92:	4b2a      	ldr	r3, [pc, #168]	@ (8007b3c <bmi160ReadAccelGyro+0xfc>)
 8007a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007aa0:	4b27      	ldr	r3, [pc, #156]	@ (8007b40 <bmi160ReadAccelGyro+0x100>)
 8007aa2:	ed93 7a00 	vldr	s14, [r3]
 8007aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aaa:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 8007aae:	4b22      	ldr	r3, [pc, #136]	@ (8007b38 <bmi160ReadAccelGyro+0xf8>)
 8007ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ab4:	ee07 3a90 	vmov	s15, r3
 8007ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007abc:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <bmi160ReadAccelGyro+0x104>)
 8007abe:	ed93 7a00 	vldr	s14, [r3]
 8007ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac6:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 8007aca:	4b1b      	ldr	r3, [pc, #108]	@ (8007b38 <bmi160ReadAccelGyro+0xf8>)
 8007acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b44 <bmi160ReadAccelGyro+0x104>)
 8007ada:	ed93 7a00 	vldr	s14, [r3]
 8007ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae2:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 8007ae6:	4b14      	ldr	r3, [pc, #80]	@ (8007b38 <bmi160ReadAccelGyro+0xf8>)
 8007ae8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007af4:	4b13      	ldr	r3, [pc, #76]	@ (8007b44 <bmi160ReadAccelGyro+0x104>)
 8007af6:	ed93 7a00 	vldr	s14, [r3]
 8007afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007afe:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	615a      	str	r2, [r3, #20]

	return rslt;
 8007b26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3728      	adds	r7, #40	@ 0x28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000032c 	.word	0x2000032c
 8007b38:	20000364 	.word	0x20000364
 8007b3c:	20000358 	.word	0x20000358
 8007b40:	20000390 	.word	0x20000390
 8007b44:	20000394 	.word	0x20000394

08007b48 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <set_bmi160_Ares+0x50>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d81a      	bhi.n	8007b8c <set_bmi160_Ares+0x44>
 8007b56:	a201      	add	r2, pc, #4	@ (adr r2, 8007b5c <set_bmi160_Ares+0x14>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b7d 	.word	0x08007b7d
 8007b68:	08007b85 	.word	0x08007b85
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <set_bmi160_Ares+0x54>)
 8007b6e:	2203      	movs	r2, #3
 8007b70:	701a      	strb	r2, [r3, #0]
			break;
 8007b72:	e00b      	b.n	8007b8c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8007b74:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <set_bmi160_Ares+0x54>)
 8007b76:	2205      	movs	r2, #5
 8007b78:	701a      	strb	r2, [r3, #0]
			break;
 8007b7a:	e007      	b.n	8007b8c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8007b7c:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <set_bmi160_Ares+0x54>)
 8007b7e:	2208      	movs	r2, #8
 8007b80:	701a      	strb	r2, [r3, #0]
			break;
 8007b82:	e003      	b.n	8007b8c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8007b84:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <set_bmi160_Ares+0x54>)
 8007b86:	220c      	movs	r2, #12
 8007b88:	701a      	strb	r2, [r3, #0]
			break;
 8007b8a:	bf00      	nop
	}
}
 8007b8c:	bf00      	nop
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20000018 	.word	0x20000018
 8007b9c:	2000038e 	.word	0x2000038e

08007ba0 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8007ba4:	4b15      	ldr	r3, [pc, #84]	@ (8007bfc <set_bmi160_Gres+0x5c>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d820      	bhi.n	8007bf0 <set_bmi160_Gres+0x50>
 8007bae:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <set_bmi160_Gres+0x14>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bd1 	.word	0x08007bd1
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	08007be1 	.word	0x08007be1
 8007bc4:	08007be9 	.word	0x08007be9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <set_bmi160_Gres+0x60>)
 8007bca:	2204      	movs	r2, #4
 8007bcc:	701a      	strb	r2, [r3, #0]
			break;
 8007bce:	e00f      	b.n	8007bf0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c00 <set_bmi160_Gres+0x60>)
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	701a      	strb	r2, [r3, #0]
			break;
 8007bd6:	e00b      	b.n	8007bf0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8007bd8:	4b09      	ldr	r3, [pc, #36]	@ (8007c00 <set_bmi160_Gres+0x60>)
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]
			break;
 8007bde:	e007      	b.n	8007bf0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8007be0:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <set_bmi160_Gres+0x60>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
			break;
 8007be6:	e003      	b.n	8007bf0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8007be8:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <set_bmi160_Gres+0x60>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
			break;
 8007bee:	bf00      	nop
	}
}
 8007bf0:	bf00      	nop
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	20000019 	.word	0x20000019
 8007c00:	2000038f 	.word	0x2000038f

08007c04 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 8007c08:	4b17      	ldr	r3, [pc, #92]	@ (8007c68 <get_bmi160_Ares+0x64>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d826      	bhi.n	8007c5e <get_bmi160_Ares+0x5a>
 8007c10:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <get_bmi160_Ares+0x14>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c2d 	.word	0x08007c2d
 8007c1c:	08007c37 	.word	0x08007c37
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c4b 	.word	0x08007c4b
 8007c28:	08007c55 	.word	0x08007c55
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c6c <get_bmi160_Ares+0x68>)
 8007c2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007c32:	601a      	str	r2, [r3, #0]
			break;
 8007c34:	e013      	b.n	8007c5e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8007c36:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <get_bmi160_Ares+0x68>)
 8007c38:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8007c3c:	601a      	str	r2, [r3, #0]
			break;
 8007c3e:	e00e      	b.n	8007c5e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8007c40:	4b0a      	ldr	r3, [pc, #40]	@ (8007c6c <get_bmi160_Ares+0x68>)
 8007c42:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8007c46:	601a      	str	r2, [r3, #0]
			break;
 8007c48:	e009      	b.n	8007c5e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 8007c4a:	4b08      	ldr	r3, [pc, #32]	@ (8007c6c <get_bmi160_Ares+0x68>)
 8007c4c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8007c50:	601a      	str	r2, [r3, #0]
			break;
 8007c52:	e004      	b.n	8007c5e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8007c54:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <get_bmi160_Ares+0x68>)
 8007c56:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8007c5a:	601a      	str	r2, [r3, #0]
			break;
 8007c5c:	bf00      	nop
	}
}
 8007c5e:	bf00      	nop
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	2000001a 	.word	0x2000001a
 8007c6c:	20000390 	.word	0x20000390

08007c70 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8007c74:	4b18      	ldr	r3, [pc, #96]	@ (8007cd8 <get_bmi160_Gres+0x68>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d828      	bhi.n	8007cce <get_bmi160_Gres+0x5e>
 8007c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <get_bmi160_Gres+0x14>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007ca7 	.word	0x08007ca7
 8007c8c:	08007caf 	.word	0x08007caf
 8007c90:	08007cb7 	.word	0x08007cb7
 8007c94:	08007cbf 	.word	0x08007cbf
 8007c98:	08007cc7 	.word	0x08007cc7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <get_bmi160_Gres+0x6c>)
 8007c9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007ca2:	601a      	str	r2, [r3, #0]
			break;
 8007ca4:	e013      	b.n	8007cce <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8007ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce0 <get_bmi160_Gres+0x70>)
 8007ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ce4 <get_bmi160_Gres+0x74>)
 8007caa:	601a      	str	r2, [r3, #0]
			break;
 8007cac:	e00f      	b.n	8007cce <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8007cae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <get_bmi160_Gres+0x70>)
 8007cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ce8 <get_bmi160_Gres+0x78>)
 8007cb2:	601a      	str	r2, [r3, #0]
			break;
 8007cb4:	e00b      	b.n	8007cce <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce0 <get_bmi160_Gres+0x70>)
 8007cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8007cec <get_bmi160_Gres+0x7c>)
 8007cba:	601a      	str	r2, [r3, #0]
			break;
 8007cbc:	e007      	b.n	8007cce <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8007cbe:	4b08      	ldr	r3, [pc, #32]	@ (8007ce0 <get_bmi160_Gres+0x70>)
 8007cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf0 <get_bmi160_Gres+0x80>)
 8007cc2:	601a      	str	r2, [r3, #0]
			break;
 8007cc4:	e003      	b.n	8007cce <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8007cc6:	4b06      	ldr	r3, [pc, #24]	@ (8007ce0 <get_bmi160_Gres+0x70>)
 8007cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf4 <get_bmi160_Gres+0x84>)
 8007cca:	601a      	str	r2, [r3, #0]
			break;
 8007ccc:	bf00      	nop
	}
}
 8007cce:	bf00      	nop
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	2000001b 	.word	0x2000001b
 8007cdc:	20000390 	.word	0x20000390
 8007ce0:	20000394 	.word	0x20000394
 8007ce4:	43833333 	.word	0x43833333
 8007ce8:	43033333 	.word	0x43033333
 8007cec:	42833333 	.word	0x42833333
 8007cf0:	42033333 	.word	0x42033333
 8007cf4:	41833333 	.word	0x41833333

08007cf8 <bmi160_delay_us>:
		}
	}
}

void bmi160_delay_us(uint32_t period)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8007d00:	e008      	b.n	8007d14 <bmi160_delay_us+0x1c>
	{
		for(i = 0; i < 84; i++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e002      	b.n	8007d0e <bmi160_delay_us+0x16>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b53      	cmp	r3, #83	@ 0x53
 8007d12:	d9f9      	bls.n	8007d08 <bmi160_delay_us+0x10>
	while(period--)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	607a      	str	r2, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1f1      	bne.n	8007d02 <bmi160_delay_us+0xa>
		{
			;
		}
	}
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	603a      	str	r2, [r7, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	71bb      	strb	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8007d42:	1dba      	adds	r2, r7, #6
 8007d44:	2364      	movs	r3, #100	@ 0x64
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	21d0      	movs	r1, #208	@ 0xd0
 8007d4c:	4807      	ldr	r0, [pc, #28]	@ (8007d6c <SensorAPI_I2Cx_Read+0x40>)
 8007d4e:	f003 faed 	bl	800b32c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8007d52:	88bb      	ldrh	r3, [r7, #4]
 8007d54:	2264      	movs	r2, #100	@ 0x64
 8007d56:	9200      	str	r2, [sp, #0]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	21d0      	movs	r1, #208	@ 0xd0
 8007d5c:	4803      	ldr	r0, [pc, #12]	@ (8007d6c <SensorAPI_I2Cx_Read+0x40>)
 8007d5e:	f003 fbfd 	bl	800b55c <HAL_I2C_Master_Receive>
	return 0;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	2000066c 	.word	0x2000066c

08007d70 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	603a      	str	r2, [r7, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	71bb      	strb	r3, [r7, #6]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8007d86:	4a0c      	ldr	r2, [pc, #48]	@ (8007db8 <SensorAPI_I2Cx_Write+0x48>)
 8007d88:	79bb      	ldrb	r3, [r7, #6]
 8007d8a:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8007d8c:	88bb      	ldrh	r3, [r7, #4]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	480a      	ldr	r0, [pc, #40]	@ (8007dbc <SensorAPI_I2Cx_Write+0x4c>)
 8007d94:	f00e fc9f 	bl	80166d6 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8007d98:	88bb      	ldrh	r3, [r7, #4]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2264      	movs	r2, #100	@ 0x64
 8007da0:	9200      	str	r2, [sp, #0]
 8007da2:	4a05      	ldr	r2, [pc, #20]	@ (8007db8 <SensorAPI_I2Cx_Write+0x48>)
 8007da4:	21d0      	movs	r1, #208	@ 0xd0
 8007da6:	4806      	ldr	r0, [pc, #24]	@ (8007dc0 <SensorAPI_I2Cx_Write+0x50>)
 8007da8:	f003 fac0 	bl	800b32c <HAL_I2C_Master_Transmit>
	return 0;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000398 	.word	0x20000398
 8007dbc:	20000399 	.word	0x20000399
 8007dc0:	2000066c 	.word	0x2000066c

08007dc4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4013      	ands	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007de8:	68fb      	ldr	r3, [r7, #12]
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4013      	ands	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	static uint16_t sample_count = 0;
	static uint16_t counter = 0;

	buffer1[0] = (uint8_t)-128;
 8007e30:	4b1e      	ldr	r3, [pc, #120]	@ (8007eac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8007e32:	2280      	movs	r2, #128	@ 0x80
 8007e34:	701a      	strb	r2, [r3, #0]
	buffer2[0] = (uint8_t)-128;
 8007e36:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8007e38:	2280      	movs	r2, #128	@ 0x80
 8007e3a:	701a      	strb	r2, [r3, #0]

	//update buffer
	memcpy(&workspace_buffer[2*sample_count+1], &counter, sizeof(uint16_t));
 8007e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	3301      	adds	r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ebc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007e4c:	8812      	ldrh	r2, [r2, #0]
 8007e4e:	801a      	strh	r2, [r3, #0]

	counter++;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	4b18      	ldr	r3, [pc, #96]	@ (8007ebc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007e5a:	801a      	strh	r2, [r3, #0]
	sample_count++;
 8007e5c:	4b16      	ldr	r3, [pc, #88]	@ (8007eb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	4b14      	ldr	r3, [pc, #80]	@ (8007eb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007e66:	801a      	strh	r2, [r3, #0]

	if (counter == 32000){
 8007e68:	4b14      	ldr	r3, [pc, #80]	@ (8007ebc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007e70:	d102      	bne.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x50>
		counter = 0;
 8007e72:	4b12      	ldr	r3, [pc, #72]	@ (8007ebc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	801a      	strh	r2, [r3, #0]
	}

	// Use the local counter to determine when to signal
	if(sample_count == AUDIO_BUFFER_SIZE)
 8007e78:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	2b64      	cmp	r3, #100	@ 0x64
 8007e7e:	d10f      	bne.n	8007ea0 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		//swap buffers so buffer points to the other buffer
		uint8_t *temp = workspace_buffer;
 8007e80:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]
		workspace_buffer = ready_buffer;
 8007e86:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007eb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8007e8c:	6013      	str	r3, [r2, #0]
		ready_buffer = temp;
 8007e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ec0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6013      	str	r3, [r2, #0]
		sample_count = 0;
 8007e94:	4b08      	ldr	r3, [pc, #32]	@ (8007eb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	801a      	strh	r2, [r3, #0]
		flag = 1;
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	701a      	strb	r2, [r3, #0]
	}
  }
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	20000710 	.word	0x20000710
 8007eb0:	200007f4 	.word	0x200007f4
 8007eb4:	2000001c 	.word	0x2000001c
 8007eb8:	20000910 	.word	0x20000910
 8007ebc:	20000912 	.word	0x20000912
 8007ec0:	20000020 	.word	0x20000020
 8007ec4:	2000070e 	.word	0x2000070e

08007ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ec8:	b590      	push	{r4, r7, lr}
 8007eca:	b0b9      	sub	sp, #228	@ 0xe4
 8007ecc:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	int8_t rslt;
	uint8_t sensor_list[2] = { BMI2_ACCEL, BMI2_GYRO };
 8007ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ed2:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
	struct bmi2_dev bmi;
	struct bmi2_sens_data sensor_data = { { 0 } };
 8007ed6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007eda:	2228      	movs	r2, #40	@ 0x28
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f00e fb7a 	bl	80165d8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ee4:	f001 f8a4 	bl	8009030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ee8:	f000 f97c 	bl	80081e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007eec:	f000 f9de 	bl	80082ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ef0:	f000 fb22 	bl	8008538 <MX_GPIO_Init>
  MX_DMA_Init();
 8007ef4:	f000 fb0e 	bl	8008514 <MX_DMA_Init>
  MX_ADC1_Init();
 8007ef8:	f000 fa0a 	bl	8008310 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007efc:	f000 fabc 	bl	8008478 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8007f00:	f00c ffc0 	bl	8014e84 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8007f04:	f000 fa78 	bl	80083f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //start ADC reading
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC_reading, 2);
 8007f08:	4ba9      	ldr	r3, [pc, #676]	@ (80081b0 <main+0x2e8>)
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	48a8      	ldr	r0, [pc, #672]	@ (80081b4 <main+0x2ec>)
 8007f12:	f001 fc6b 	bl	80097ec <HAL_ADC_Start_DMA>
//  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8007f16:	2000      	movs	r0, #0
 8007f18:	f000 ff32 	bl	8008d80 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	f000 ff2f 	bl	8008d80 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8007f22:	2002      	movs	r0, #2
 8007f24:	f000 ff2c 	bl	8008d80 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8007f28:	2101      	movs	r1, #1
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	f000 ff62 	bl	8008df4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8007f30:	2101      	movs	r1, #1
 8007f32:	2001      	movs	r0, #1
 8007f34:	f000 ff5e 	bl	8008df4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8007f38:	2101      	movs	r1, #1
 8007f3a:	2002      	movs	r0, #2
 8007f3c:	f000 ff5a 	bl	8008df4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8007f40:	4b9d      	ldr	r3, [pc, #628]	@ (80081b8 <main+0x2f0>)
 8007f42:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007f46:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8007f48:	4b9b      	ldr	r3, [pc, #620]	@ (80081b8 <main+0x2f0>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8007f4e:	4b9a      	ldr	r3, [pc, #616]	@ (80081b8 <main+0x2f0>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8007f54:	4b98      	ldr	r3, [pc, #608]	@ (80081b8 <main+0x2f0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8007f5a:	4b97      	ldr	r3, [pc, #604]	@ (80081b8 <main+0x2f0>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8007f60:	4995      	ldr	r1, [pc, #596]	@ (80081b8 <main+0x2f0>)
 8007f62:	2000      	movs	r0, #0
 8007f64:	f000 ffb6 	bl	8008ed4 <BSP_COM_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <main+0xaa>
  {
    Error_Handler();
 8007f6e:	f000 fbe6 	bl	800873e <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */
  printf("Before init");
 8007f72:	4892      	ldr	r0, [pc, #584]	@ (80081bc <main+0x2f4>)
 8007f74:	f00e f9e0 	bl	8016338 <iprintf>
  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8007f78:	bf00      	nop
 8007f7a:	4b91      	ldr	r3, [pc, #580]	@ (80081c0 <main+0x2f8>)
 8007f7c:	466c      	mov	r4, sp
 8007f7e:	f103 0210 	add.w	r2, r3, #16
 8007f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f8a:	f7ff fc67 	bl	800785c <BMI160_init>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d0f2      	beq.n	8007f7a <main+0xb2>
  rslt = bmi2_interface_init(&bmi, BMI2_I2C_INTF);
 8007f94:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007f98:	2101      	movs	r1, #1
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fc f922 	bl	80041e4 <bmi2_interface_init>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007fa6:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fc f962 	bl	8004274 <bmi2_error_codes_print_result>
  rslt = bmi270_init(&bmi);
 8007fb0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fb f94f 	bl	8003258 <bmi270_init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007fc0:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fc f955 	bl	8004274 <bmi2_error_codes_print_result>
  rslt = set_accel_gyro_config(&bmi);
 8007fca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fad9 	bl	8008586 <set_accel_gyro_config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007fda:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fc f948 	bl	8004274 <bmi2_error_codes_print_result>
  rslt = bmi2_sensor_enable(sensor_list, 2, &bmi);
 8007fe4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8007fe8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f9 f9e0 	bl	80013b4 <bmi2_sensor_enable>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007ffa:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fc f938 	bl	8004274 <bmi2_error_codes_print_result>
  config.type = BMI2_ACCEL;
 8008004:	2300      	movs	r3, #0
 8008006:	703b      	strb	r3, [r7, #0]

  /* Get the accel configurations. */
  rslt = bmi2_get_sensor_config(&config, 1, &bmi);
 8008008:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800800c:	463b      	mov	r3, r7
 800800e:	2101      	movs	r1, #1
 8008010:	4618      	mov	r0, r3
 8008012:	f7f9 fabb 	bl	800158c <bmi2_get_sensor_config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 800801c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8008020:	4618      	mov	r0, r3
 8008022:	f7fc f927 	bl	8004274 <bmi2_error_codes_print_result>

  if (imu_t.INIT_OK_i8 != TRUE){
 8008026:	4b66      	ldr	r3, [pc, #408]	@ (80081c0 <main+0x2f8>)
 8008028:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d002      	beq.n	8008036 <main+0x16e>
	  printf("Stuck");
 8008030:	4864      	ldr	r0, [pc, #400]	@ (80081c4 <main+0x2fc>)
 8008032:	f00e f981 	bl	8016338 <iprintf>
	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
  }
  //start ADC sampler timer
  HAL_TIM_Base_Start_IT(&htim2);
 8008036:	4864      	ldr	r0, [pc, #400]	@ (80081c8 <main+0x300>)
 8008038:	f007 ffec 	bl	8010014 <HAL_TIM_Base_Start_IT>
  uint8_t status;

  while (1)
  {
	  if (flag==1){
 800803c:	4b63      	ldr	r3, [pc, #396]	@ (80081cc <main+0x304>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d113      	bne.n	800806c <main+0x1a4>
		  prepare_data_packet(sensor_timestamp,ready_buffer);
 8008044:	4b62      	ldr	r3, [pc, #392]	@ (80081d0 <main+0x308>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a62      	ldr	r2, [pc, #392]	@ (80081d4 <main+0x30c>)
 800804a:	6812      	ldr	r2, [r2, #0]
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fa7f 	bl	8008552 <prepare_data_packet>
  		  status = CDC_Transmit_FS(ready_buffer, BUFFER_SIZE);
 8008054:	4b5f      	ldr	r3, [pc, #380]	@ (80081d4 <main+0x30c>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	21e1      	movs	r1, #225	@ 0xe1
 800805a:	4618      	mov	r0, r3
 800805c:	f00c ffd0 	bl	8015000 <CDC_Transmit_FS>
 8008060:	4603      	mov	r3, r0
 8008062:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
//		  sprintf(msg, " mic: %d, ac: %f %f %f, gy: %f %f %f \r\n", ADC_reading, a_f32[0],a_f32[1],a_f32[2],g_f32[0],g_f32[1],g_f32[2]);
//		  CDC_Transmit_FS((uint8_t*)msg, sizeof(msg));

		  flag = 0;
 8008066:	4b59      	ldr	r3, [pc, #356]	@ (80081cc <main+0x304>)
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
	  }
	  bmi160ReadAccelGyro(&imu_t);
 800806c:	4854      	ldr	r0, [pc, #336]	@ (80081c0 <main+0x2f8>)
 800806e:	f7ff fce7 	bl	8007a40 <bmi160ReadAccelGyro>
	  rslt = bmi2_get_sensor_data(&sensor_data, &bmi);
 8008072:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8008076:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7f9 fbca 	bl	8001816 <bmi2_get_sensor_data>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	  bmi2_error_codes_print_result(rslt);
 8008088:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 800808c:	4618      	mov	r0, r3
 800808e:	f7fc f8f1 	bl	8004274 <bmi2_error_codes_print_result>
	  // BMI270
	  sensor_timestamp = sensor_data.sens_time;
 8008092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008094:	4a4e      	ldr	r2, [pc, #312]	@ (80081d0 <main+0x308>)
 8008096:	6013      	str	r3, [r2, #0]
	  /* Converting lsb to meter per second squared for 16 bit accelerometer at 2G range. */
	  a_f32[1] = lsb_to_mps2(sensor_data.acc.x, (float)2, bmi.resolution);
 8008098:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800809c:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80080a0:	4611      	mov	r1, r2
 80080a2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fac2 	bl	8008630 <lsb_to_mps2>
 80080ac:	eef0 7a40 	vmov.f32	s15, s0
 80080b0:	4b49      	ldr	r3, [pc, #292]	@ (80081d8 <main+0x310>)
 80080b2:	edc3 7a01 	vstr	s15, [r3, #4]
	  a_f32[2] = lsb_to_mps2(sensor_data.acc.y, (float)2, bmi.resolution);
 80080b6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80080ba:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80080be:	4611      	mov	r1, r2
 80080c0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fab3 	bl	8008630 <lsb_to_mps2>
 80080ca:	eef0 7a40 	vmov.f32	s15, s0
 80080ce:	4b42      	ldr	r3, [pc, #264]	@ (80081d8 <main+0x310>)
 80080d0:	edc3 7a02 	vstr	s15, [r3, #8]
	  a_f32[0] = lsb_to_mps2(sensor_data.acc.z, (float)2, bmi.resolution);
 80080d4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80080d8:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80080dc:	4611      	mov	r1, r2
 80080de:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 faa4 	bl	8008630 <lsb_to_mps2>
 80080e8:	eef0 7a40 	vmov.f32	s15, s0
 80080ec:	4b3a      	ldr	r3, [pc, #232]	@ (80081d8 <main+0x310>)
 80080ee:	edc3 7a00 	vstr	s15, [r3]

	  /* Converting lsb to degree per second for 16 bit gyro at 2000dps range. */
	  g_f32[1] = lsb_to_dps(sensor_data.gyr.x, (float)2000, bmi.resolution)*0.0174533;
 80080f2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80080f6:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80080fa:	4611      	mov	r1, r2
 80080fc:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80081dc <main+0x314>
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fadd 	bl	80086c0 <lsb_to_dps>
 8008106:	ee10 3a10 	vmov	r3, s0
 800810a:	4618      	mov	r0, r3
 800810c:	f7f8 f9f4 	bl	80004f8 <__aeabi_f2d>
 8008110:	a325      	add	r3, pc, #148	@ (adr r3, 80081a8 <main+0x2e0>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f7f8 fa47 	bl	80005a8 <__aeabi_dmul>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	f7f8 fd19 	bl	8000b58 <__aeabi_d2f>
 8008126:	4603      	mov	r3, r0
 8008128:	4a2d      	ldr	r2, [pc, #180]	@ (80081e0 <main+0x318>)
 800812a:	6053      	str	r3, [r2, #4]
	  g_f32[2] = lsb_to_dps(sensor_data.gyr.y, (float)2000, bmi.resolution)*0.0174533;
 800812c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8008130:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008134:	4611      	mov	r1, r2
 8008136:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80081dc <main+0x314>
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fac0 	bl	80086c0 <lsb_to_dps>
 8008140:	ee10 3a10 	vmov	r3, s0
 8008144:	4618      	mov	r0, r3
 8008146:	f7f8 f9d7 	bl	80004f8 <__aeabi_f2d>
 800814a:	a317      	add	r3, pc, #92	@ (adr r3, 80081a8 <main+0x2e0>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 fa2a 	bl	80005a8 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	f7f8 fcfc 	bl	8000b58 <__aeabi_d2f>
 8008160:	4603      	mov	r3, r0
 8008162:	4a1f      	ldr	r2, [pc, #124]	@ (80081e0 <main+0x318>)
 8008164:	6093      	str	r3, [r2, #8]
	  g_f32[0] = lsb_to_dps(sensor_data.gyr.z, (float)2000, bmi.resolution)*0.0174533;
 8008166:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800816a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800816e:	4611      	mov	r1, r2
 8008170:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80081dc <main+0x314>
 8008174:	4618      	mov	r0, r3
 8008176:	f000 faa3 	bl	80086c0 <lsb_to_dps>
 800817a:	ee10 3a10 	vmov	r3, s0
 800817e:	4618      	mov	r0, r3
 8008180:	f7f8 f9ba 	bl	80004f8 <__aeabi_f2d>
 8008184:	a308      	add	r3, pc, #32	@ (adr r3, 80081a8 <main+0x2e0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 fa0d 	bl	80005a8 <__aeabi_dmul>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4610      	mov	r0, r2
 8008194:	4619      	mov	r1, r3
 8008196:	f7f8 fcdf 	bl	8000b58 <__aeabi_d2f>
 800819a:	4603      	mov	r3, r0
 800819c:	4a10      	ldr	r2, [pc, #64]	@ (80081e0 <main+0x318>)
 800819e:	6013      	str	r3, [r2, #0]
	  if (flag==1){
 80081a0:	e74c      	b.n	800803c <main+0x174>
 80081a2:	bf00      	nop
 80081a4:	f3af 8000 	nop.w
 80081a8:	22d4405f 	.word	0x22d4405f
 80081ac:	3f91df47 	.word	0x3f91df47
 80081b0:	2000070c 	.word	0x2000070c
 80081b4:	200005a8 	.word	0x200005a8
 80081b8:	20000598 	.word	0x20000598
 80081bc:	0801a17c 	.word	0x0801a17c
 80081c0:	200008d8 	.word	0x200008d8
 80081c4:	0801a188 	.word	0x0801a188
 80081c8:	200006c0 	.word	0x200006c0
 80081cc:	2000070e 	.word	0x2000070e
 80081d0:	2000090c 	.word	0x2000090c
 80081d4:	20000020 	.word	0x20000020
 80081d8:	20000900 	.word	0x20000900
 80081dc:	44fa0000 	.word	0x44fa0000
 80081e0:	200008f4 	.word	0x200008f4

080081e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b09a      	sub	sp, #104	@ 0x68
 80081e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081ea:	f107 0320 	add.w	r3, r7, #32
 80081ee:	2248      	movs	r2, #72	@ 0x48
 80081f0:	2100      	movs	r1, #0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f00e f9f0 	bl	80165d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081f8:	1d3b      	adds	r3, r7, #4
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	605a      	str	r2, [r3, #4]
 8008200:	609a      	str	r2, [r3, #8]
 8008202:	60da      	str	r2, [r3, #12]
 8008204:	611a      	str	r2, [r3, #16]
 8008206:	615a      	str	r2, [r3, #20]
 8008208:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800820a:	4b27      	ldr	r3, [pc, #156]	@ (80082a8 <SystemClock_Config+0xc4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008212:	4a25      	ldr	r2, [pc, #148]	@ (80082a8 <SystemClock_Config+0xc4>)
 8008214:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	4b23      	ldr	r3, [pc, #140]	@ (80082a8 <SystemClock_Config+0xc4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008226:	2303      	movs	r3, #3
 8008228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800822a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008236:	2340      	movs	r3, #64	@ 0x40
 8008238:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800823a:	2302      	movs	r3, #2
 800823c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800823e:	2303      	movs	r3, #3
 8008240:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8008242:	2310      	movs	r3, #16
 8008244:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008246:	2308      	movs	r3, #8
 8008248:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800824a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800824e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008250:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008254:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800825a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800825c:	f107 0320 	add.w	r3, r7, #32
 8008260:	4618      	mov	r0, r3
 8008262:	f006 fc47 	bl	800eaf4 <HAL_RCC_OscConfig>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800826c:	f000 fa67 	bl	800873e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8008270:	236f      	movs	r3, #111	@ 0x6f
 8008272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008274:	2303      	movs	r3, #3
 8008276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8008284:	2380      	movs	r3, #128	@ 0x80
 8008286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800828c:	1d3b      	adds	r3, r7, #4
 800828e:	2103      	movs	r1, #3
 8008290:	4618      	mov	r0, r3
 8008292:	f006 ffa3 	bl	800f1dc <HAL_RCC_ClockConfig>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800829c:	f000 fa4f 	bl	800873e <Error_Handler>
  }
}
 80082a0:	bf00      	nop
 80082a2:	3768      	adds	r7, #104	@ 0x68
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	58000400 	.word	0x58000400

080082ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b094      	sub	sp, #80	@ 0x50
 80082b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80082b2:	463b      	mov	r3, r7
 80082b4:	2250      	movs	r2, #80	@ 0x50
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f00e f98d 	bl	80165d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80082be:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80082c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80082c4:	2306      	movs	r3, #6
 80082c6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80082c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80082cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80082ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80082d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80082d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80082da:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80082de:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80082e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80082e4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80082e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80082ec:	2300      	movs	r3, #0
 80082ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80082f4:	463b      	mov	r3, r7
 80082f6:	4618      	mov	r0, r3
 80082f8:	f007 fbad 	bl	800fa56 <HAL_RCCEx_PeriphCLKConfig>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8008302:	f000 fa1c 	bl	800873e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8008306:	bf00      	nop
 8008308:	3750      	adds	r7, #80	@ 0x50
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008316:	463b      	mov	r3, r7
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	611a      	str	r2, [r3, #16]
 8008324:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008326:	4b30      	ldr	r3, [pc, #192]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008328:	4a30      	ldr	r2, [pc, #192]	@ (80083ec <MX_ADC1_Init+0xdc>)
 800832a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800832c:	4b2e      	ldr	r3, [pc, #184]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800832e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008332:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008334:	4b2c      	ldr	r3, [pc, #176]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008336:	2200      	movs	r2, #0
 8008338:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800833a:	4b2b      	ldr	r3, [pc, #172]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800833c:	2200      	movs	r2, #0
 800833e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008340:	4b29      	ldr	r3, [pc, #164]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008342:	2201      	movs	r2, #1
 8008344:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008346:	4b28      	ldr	r3, [pc, #160]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008348:	2204      	movs	r2, #4
 800834a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800834c:	4b26      	ldr	r3, [pc, #152]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800834e:	2200      	movs	r2, #0
 8008350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008352:	4b25      	ldr	r3, [pc, #148]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008354:	2201      	movs	r2, #1
 8008356:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8008358:	4b23      	ldr	r3, [pc, #140]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800835a:	2202      	movs	r2, #2
 800835c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800835e:	4b22      	ldr	r3, [pc, #136]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008366:	4b20      	ldr	r3, [pc, #128]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008368:	2200      	movs	r2, #0
 800836a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800836c:	4b1e      	ldr	r3, [pc, #120]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800836e:	2200      	movs	r2, #0
 8008370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008372:	4b1d      	ldr	r3, [pc, #116]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800837a:	4b1b      	ldr	r3, [pc, #108]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800837c:	2200      	movs	r2, #0
 800837e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8008380:	4b19      	ldr	r3, [pc, #100]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008388:	4817      	ldr	r0, [pc, #92]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 800838a:	f001 f8e3 	bl	8009554 <HAL_ADC_Init>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8008394:	f000 f9d3 	bl	800873e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008398:	4b15      	ldr	r3, [pc, #84]	@ (80083f0 <MX_ADC1_Init+0xe0>)
 800839a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800839c:	2306      	movs	r3, #6
 800839e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80083a0:	2306      	movs	r3, #6
 80083a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80083a4:	237f      	movs	r3, #127	@ 0x7f
 80083a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80083a8:	2304      	movs	r3, #4
 80083aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083b0:	463b      	mov	r3, r7
 80083b2:	4619      	mov	r1, r3
 80083b4:	480c      	ldr	r0, [pc, #48]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 80083b6:	f001 fc7b 	bl	8009cb0 <HAL_ADC_ConfigChannel>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80083c0:	f000 f9bd 	bl	800873e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80083c4:	4b0b      	ldr	r3, [pc, #44]	@ (80083f4 <MX_ADC1_Init+0xe4>)
 80083c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80083c8:	230c      	movs	r3, #12
 80083ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083cc:	463b      	mov	r3, r7
 80083ce:	4619      	mov	r1, r3
 80083d0:	4805      	ldr	r0, [pc, #20]	@ (80083e8 <MX_ADC1_Init+0xd8>)
 80083d2:	f001 fc6d 	bl	8009cb0 <HAL_ADC_ConfigChannel>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80083dc:	f000 f9af 	bl	800873e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80083e0:	bf00      	nop
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200005a8 	.word	0x200005a8
 80083ec:	50040000 	.word	0x50040000
 80083f0:	04300002 	.word	0x04300002
 80083f4:	08600004 	.word	0x08600004

080083f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80083fc:	4b1b      	ldr	r3, [pc, #108]	@ (800846c <MX_I2C1_Init+0x74>)
 80083fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008470 <MX_I2C1_Init+0x78>)
 8008400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8008402:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <MX_I2C1_Init+0x74>)
 8008404:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <MX_I2C1_Init+0x7c>)
 8008406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008408:	4b18      	ldr	r3, [pc, #96]	@ (800846c <MX_I2C1_Init+0x74>)
 800840a:	2200      	movs	r2, #0
 800840c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800840e:	4b17      	ldr	r3, [pc, #92]	@ (800846c <MX_I2C1_Init+0x74>)
 8008410:	2201      	movs	r2, #1
 8008412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008414:	4b15      	ldr	r3, [pc, #84]	@ (800846c <MX_I2C1_Init+0x74>)
 8008416:	2200      	movs	r2, #0
 8008418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800841a:	4b14      	ldr	r3, [pc, #80]	@ (800846c <MX_I2C1_Init+0x74>)
 800841c:	2200      	movs	r2, #0
 800841e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008420:	4b12      	ldr	r3, [pc, #72]	@ (800846c <MX_I2C1_Init+0x74>)
 8008422:	2200      	movs	r2, #0
 8008424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <MX_I2C1_Init+0x74>)
 8008428:	2200      	movs	r2, #0
 800842a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800842c:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <MX_I2C1_Init+0x74>)
 800842e:	2200      	movs	r2, #0
 8008430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008432:	480e      	ldr	r0, [pc, #56]	@ (800846c <MX_I2C1_Init+0x74>)
 8008434:	f002 fedf 	bl	800b1f6 <HAL_I2C_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800843e:	f000 f97e 	bl	800873e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008442:	2100      	movs	r1, #0
 8008444:	4809      	ldr	r0, [pc, #36]	@ (800846c <MX_I2C1_Init+0x74>)
 8008446:	f004 fa19 	bl	800c87c <HAL_I2CEx_ConfigAnalogFilter>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008450:	f000 f975 	bl	800873e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008454:	2100      	movs	r1, #0
 8008456:	4805      	ldr	r0, [pc, #20]	@ (800846c <MX_I2C1_Init+0x74>)
 8008458:	f004 fa5b 	bl	800c912 <HAL_I2CEx_ConfigDigitalFilter>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008462:	f000 f96c 	bl	800873e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	2000066c 	.word	0x2000066c
 8008470:	40005400 	.word	0x40005400
 8008474:	10b17db5 	.word	0x10b17db5

08008478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800847e:	f107 0310 	add.w	r3, r7, #16
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	605a      	str	r2, [r3, #4]
 8008488:	609a      	str	r2, [r3, #8]
 800848a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008496:	4b1e      	ldr	r3, [pc, #120]	@ (8008510 <MX_TIM2_Init+0x98>)
 8008498:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800849c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800849e:	4b1c      	ldr	r3, [pc, #112]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200-1;
 80084aa:	4b19      	ldr	r3, [pc, #100]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084ac:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80084b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084b2:	4b17      	ldr	r3, [pc, #92]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084b8:	4b15      	ldr	r3, [pc, #84]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084ba:	2280      	movs	r2, #128	@ 0x80
 80084bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80084be:	4814      	ldr	r0, [pc, #80]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084c0:	f007 fd50 	bl	800ff64 <HAL_TIM_Base_Init>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80084ca:	f000 f938 	bl	800873e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80084d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80084d4:	f107 0310 	add.w	r3, r7, #16
 80084d8:	4619      	mov	r1, r3
 80084da:	480d      	ldr	r0, [pc, #52]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084dc:	f007 feef 	bl	80102be <HAL_TIM_ConfigClockSource>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80084e6:	f000 f92a 	bl	800873e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80084ea:	2320      	movs	r3, #32
 80084ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80084f2:	1d3b      	adds	r3, r7, #4
 80084f4:	4619      	mov	r1, r3
 80084f6:	4806      	ldr	r0, [pc, #24]	@ (8008510 <MX_TIM2_Init+0x98>)
 80084f8:	f008 f8d8 	bl	80106ac <HAL_TIMEx_MasterConfigSynchronization>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008502:	f000 f91c 	bl	800873e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008506:	bf00      	nop
 8008508:	3720      	adds	r7, #32
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	200006c0 	.word	0x200006c0

08008514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008518:	2004      	movs	r0, #4
 800851a:	f7ff fc53 	bl	8007dc4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800851e:	2001      	movs	r0, #1
 8008520:	f7ff fc50 	bl	8007dc4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008524:	2200      	movs	r2, #0
 8008526:	2100      	movs	r1, #0
 8008528:	200b      	movs	r0, #11
 800852a:	f002 f9a2 	bl	800a872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800852e:	200b      	movs	r0, #11
 8008530:	f002 f9b9 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}

08008538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800853c:	2004      	movs	r0, #4
 800853e:	f7ff fc5a 	bl	8007df6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008542:	2002      	movs	r0, #2
 8008544:	f7ff fc57 	bl	8007df6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008548:	2001      	movs	r0, #1
 800854a:	f7ff fc54 	bl	8007df6 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800854e:	bf00      	nop
 8008550:	bd80      	pop	{r7, pc}

08008552 <prepare_data_packet>:

/* USER CODE BEGIN 4 */
void prepare_data_packet(uint32_t timestamp, uint8_t *buffer) {
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]

    size_t float_array_offset = 1 + 2 * AUDIO_BUFFER_SIZE;
 800855c:	23c9      	movs	r3, #201	@ 0xc9
 800855e:	60fb      	str	r3, [r7, #12]
    size_t float_array_size = sizeof(float) * 6;
 8008560:	2318      	movs	r3, #24
 8008562:	60bb      	str	r3, [r7, #8]

    memset(&buffer[float_array_offset], 0, float_array_size);
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4413      	add	r3, r2
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f00e f832 	bl	80165d8 <memset>
    memcpy(&buffer[float_array_offset], &timestamp, sizeof(uint32_t));
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <set_accel_gyro_config>:

static int8_t set_accel_gyro_config(struct bmi2_dev *bmi)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b0a0      	sub	sp, #128	@ 0x80
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]

    /* Structure to define accelerometer and gyro configuration. */
    struct bmi2_sens_config config[2];

    /* Configure the type of feature. */
    config[ACCEL].type = BMI2_ACCEL;
 800858e:	2300      	movs	r3, #0
 8008590:	733b      	strb	r3, [r7, #12]
    config[GYRO].type = BMI2_GYRO;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Get default configurations for the type of feature selected. */
    rslt = bmi270_set_sensor_config(config, 2, bmi);
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	2102      	movs	r1, #2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fa feb7 	bl	8003314 <bmi270_set_sensor_config>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 80085ac:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fb fe5f 	bl	8004274 <bmi2_error_codes_print_result>

    /* Map data ready interrupt to interrupt pin. */
    rslt = bmi2_map_data_int(BMI2_DRDY_INT, BMI2_INT1, bmi);
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	2101      	movs	r1, #1
 80085ba:	2004      	movs	r0, #4
 80085bc:	f7f9 f9f0 	bl	80019a0 <bmi2_map_data_int>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 80085c6:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fb fe52 	bl	8004274 <bmi2_error_codes_print_result>

    if (rslt == BMI2_OK)
 80085d0:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d125      	bne.n	8008624 <set_accel_gyro_config+0x9e>
    {
        /* NOTE: The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[ACCEL].cfg.acc.odr = BMI2_ACC_ODR_800HZ;
 80085d8:	230b      	movs	r3, #11
 80085da:	743b      	strb	r3, [r7, #16]

        /* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
        config[ACCEL].cfg.acc.range = BMI2_ACC_RANGE_2G;
 80085dc:	2300      	movs	r3, #0
 80085de:	74fb      	strb	r3, [r7, #19]
         * are averaged, resulting in 4 averaged samples.
         * Note1 : For more information, refer the datasheet.
         * Note2 : A higher number of averaged samples will result in a lower noise level of the signal, but
         * this has an adverse effect on the power consumed.
         */
        config[ACCEL].cfg.acc.bwp = BMI2_ACC_NORMAL_AVG4;
 80085e0:	2302      	movs	r3, #2
 80085e2:	747b      	strb	r3, [r7, #17]
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         * For more info refer datasheet.
         */
        config[ACCEL].cfg.acc.filter_perf = BMI2_PERF_OPT_MODE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	74bb      	strb	r3, [r7, #18]

        /* The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[GYRO].cfg.gyr.odr = BMI2_GYR_ODR_800HZ;
 80085e8:	230b      	movs	r3, #11
 80085ea:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        /* Gyroscope Angular Rate Measurement Range.By default the range is 2000dps. */
        config[GYRO].cfg.gyr.range = BMI2_GYR_RANGE_2000;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        /* Gyroscope bandwidth parameters. By default the gyro bandwidth is in normal mode. */
        config[GYRO].cfg.gyr.bwp = BMI2_GYR_NORMAL_MODE;
 80085f4:	2302      	movs	r3, #2
 80085f6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        /* Enable/Disable the noise performance mode for precision yaw rate sensing
         * There are two modes
         *  0 -> Ultra low power mode(Default)
         *  1 -> High performance mode
         */
        config[GYRO].cfg.gyr.noise_perf = BMI2_POWER_OPT_MODE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
         * will be done based on above set bandwidth and ODR.
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         */
        config[GYRO].cfg.gyr.filter_perf = BMI2_PERF_OPT_MODE;
 8008600:	2301      	movs	r3, #1
 8008602:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

        /* Set the accel and gyro configurations. */
        rslt = bmi270_set_sensor_config(config, 2, bmi);
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	2102      	movs	r1, #2
 800860e:	4618      	mov	r0, r3
 8008610:	f7fa fe80 	bl	8003314 <bmi270_set_sensor_config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        bmi2_error_codes_print_result(rslt);
 800861a:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800861e:	4618      	mov	r0, r3
 8008620:	f7fb fe28 	bl	8004274 <bmi2_error_codes_print_result>
    }

    return rslt;
 8008624:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
}
 8008628:	4618      	mov	r0, r3
 800862a:	3780      	adds	r7, #128	@ 0x80
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <lsb_to_mps2>:

static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	ed87 0a00 	vstr	s0, [r7]
 800863c:	460a      	mov	r2, r1
 800863e:	80fb      	strh	r3, [r7, #6]
 8008640:	4613      	mov	r3, r2
 8008642:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800864c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8008650:	797b      	ldrb	r3, [r7, #5]
 8008652:	4618      	mov	r0, r3
 8008654:	f7f7 ff2e 	bl	80004b4 <__aeabi_ui2d>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	ec43 2b11 	vmov	d1, r2, r3
 8008660:	ed97 0b04 	vldr	d0, [r7, #16]
 8008664:	f00f fe80 	bl	8018368 <pow>
 8008668:	ec51 0b10 	vmov	r0, r1, d0
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008674:	f7f8 f8c2 	bl	80007fc <__aeabi_ddiv>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	f7f8 fa6a 	bl	8000b58 <__aeabi_d2f>
 8008684:	4603      	mov	r3, r0
 8008686:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8008688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008694:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80086bc <lsb_to_mps2+0x8c>
 8008698:	ee27 7a87 	vmul.f32	s14, s15, s14
 800869c:	edd7 7a00 	vldr	s15, [r7]
 80086a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80086a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80086ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80086b0:	eeb0 0a67 	vmov.f32	s0, s15
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	411ce80a 	.word	0x411ce80a

080086c0 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	ed87 0a00 	vstr	s0, [r7]
 80086cc:	460a      	mov	r2, r1
 80086ce:	80fb      	strh	r3, [r7, #6]
 80086d0:	4613      	mov	r3, r2
 80086d2:	717b      	strb	r3, [r7, #5]
    double power = 2;
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 80086e0:	797b      	ldrb	r3, [r7, #5]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f7 fee6 	bl	80004b4 <__aeabi_ui2d>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	ec43 2b11 	vmov	d1, r2, r3
 80086f0:	ed97 0b04 	vldr	d0, [r7, #16]
 80086f4:	f00f fe38 	bl	8018368 <pow>
 80086f8:	ec51 0b10 	vmov	r0, r1, d0
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008704:	f7f8 f87a 	bl	80007fc <__aeabi_ddiv>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4610      	mov	r0, r2
 800870e:	4619      	mov	r1, r3
 8008710:	f7f8 fa22 	bl	8000b58 <__aeabi_d2f>
 8008714:	4603      	mov	r3, r0
 8008716:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8008718:	edd7 6a00 	vldr	s13, [r7]
 800871c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008730:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8008734:	eeb0 0a67 	vmov.f32	s0, s15
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800873e:	b480      	push	{r7}
 8008740:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008742:	b672      	cpsid	i
}
 8008744:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <Error_Handler+0x8>

0800874a <LL_AHB2_GRP1_EnableClock>:
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008758:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4313      	orrs	r3, r2
 8008760:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4013      	ands	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800876e:	68fb      	ldr	r3, [r7, #12]
}
 8008770:	bf00      	nop
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008788:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800878a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4313      	orrs	r3, r2
 8008792:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4013      	ands	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087ae:	b480      	push	{r7}
 80087b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087b2:	bf00      	nop
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c4:	f107 030c 	add.w	r3, r7, #12
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	605a      	str	r2, [r3, #4]
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a26      	ldr	r2, [pc, #152]	@ (8008874 <HAL_ADC_MspInit+0xb8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d145      	bne.n	800886a <HAL_ADC_MspInit+0xae>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80087de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80087e2:	f7ff ffb2 	bl	800874a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e6:	2004      	movs	r0, #4
 80087e8:	f7ff ffaf 	bl	800874a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80087ec:	2303      	movs	r3, #3
 80087ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087f0:	2303      	movs	r3, #3
 80087f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	4619      	mov	r1, r3
 80087fe:	481e      	ldr	r0, [pc, #120]	@ (8008878 <HAL_ADC_MspInit+0xbc>)
 8008800:	f002 fb4e 	bl	800aea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008804:	4b1d      	ldr	r3, [pc, #116]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008806:	4a1e      	ldr	r2, [pc, #120]	@ (8008880 <HAL_ADC_MspInit+0xc4>)
 8008808:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800880a:	4b1c      	ldr	r3, [pc, #112]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 800880c:	2205      	movs	r2, #5
 800880e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008810:	4b1a      	ldr	r3, [pc, #104]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008812:	2200      	movs	r2, #0
 8008814:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008816:	4b19      	ldr	r3, [pc, #100]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008818:	2200      	movs	r2, #0
 800881a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800881c:	4b17      	ldr	r3, [pc, #92]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 800881e:	2280      	movs	r2, #128	@ 0x80
 8008820:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008822:	4b16      	ldr	r3, [pc, #88]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008828:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800882a:	4b14      	ldr	r3, [pc, #80]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 800882c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008830:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008832:	4b12      	ldr	r3, [pc, #72]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008834:	2220      	movs	r2, #32
 8008836:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008838:	4b10      	ldr	r3, [pc, #64]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 800883a:	2200      	movs	r2, #0
 800883c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800883e:	480f      	ldr	r0, [pc, #60]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008840:	f002 f84c 	bl	800a8dc <HAL_DMA_Init>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 800884a:	f7ff ff78 	bl	800873e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a0a      	ldr	r2, [pc, #40]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008852:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008854:	4a09      	ldr	r2, [pc, #36]	@ (800887c <HAL_ADC_MspInit+0xc0>)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 800885a:	2200      	movs	r2, #0
 800885c:	2102      	movs	r1, #2
 800885e:	2012      	movs	r0, #18
 8008860:	f002 f807 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8008864:	2012      	movs	r0, #18
 8008866:	f002 f81e 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800886a:	bf00      	nop
 800886c:	3720      	adds	r7, #32
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	50040000 	.word	0x50040000
 8008878:	48000800 	.word	0x48000800
 800887c:	2000060c 	.word	0x2000060c
 8008880:	40020008 	.word	0x40020008

08008884 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b09c      	sub	sp, #112	@ 0x70
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800888c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	605a      	str	r2, [r3, #4]
 8008896:	609a      	str	r2, [r3, #8]
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	2250      	movs	r2, #80	@ 0x50
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f00d fe97 	bl	80165d8 <memset>
  if(hi2c->Instance==I2C1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1f      	ldr	r2, [pc, #124]	@ (800892c <HAL_I2C_MspInit+0xa8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d136      	bne.n	8008922 <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80088b4:	2304      	movs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80088b8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80088bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088be:	f107 030c 	add.w	r3, r7, #12
 80088c2:	4618      	mov	r0, r3
 80088c4:	f007 f8c7 	bl	800fa56 <HAL_RCCEx_PeriphCLKConfig>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80088ce:	f7ff ff36 	bl	800873e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088d2:	2002      	movs	r0, #2
 80088d4:	f7ff ff39 	bl	800874a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80088d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80088dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088de:	2312      	movs	r3, #18
 80088e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e6:	2300      	movs	r3, #0
 80088e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80088ea:	2304      	movs	r3, #4
 80088ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80088f2:	4619      	mov	r1, r3
 80088f4:	480e      	ldr	r0, [pc, #56]	@ (8008930 <HAL_I2C_MspInit+0xac>)
 80088f6:	f002 fad3 	bl	800aea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80088fa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80088fe:	f7ff ff3d 	bl	800877c <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	201e      	movs	r0, #30
 8008908:	f001 ffb3 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800890c:	201e      	movs	r0, #30
 800890e:	f001 ffca 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008912:	2200      	movs	r2, #0
 8008914:	2100      	movs	r1, #0
 8008916:	201f      	movs	r0, #31
 8008918:	f001 ffab 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800891c:	201f      	movs	r0, #31
 800891e:	f001 ffc2 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008922:	bf00      	nop
 8008924:	3770      	adds	r7, #112	@ 0x70
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	40005400 	.word	0x40005400
 8008930:	48000400 	.word	0x48000400

08008934 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008944:	d10a      	bne.n	800895c <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008946:	2001      	movs	r0, #1
 8008948:	f7ff ff18 	bl	800877c <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	201c      	movs	r0, #28
 8008952:	f001 ff8e 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008956:	201c      	movs	r0, #28
 8008958:	f001 ffa5 	bl	800a8a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008964:	b480      	push	{r7}
 8008966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <NMI_Handler+0x4>

0800896c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <HardFault_Handler+0x4>

08008974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <MemManage_Handler+0x4>

0800897c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008980:	bf00      	nop
 8008982:	e7fd      	b.n	8008980 <BusFault_Handler+0x4>

08008984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <UsageFault_Handler+0x4>

0800898c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008990:	bf00      	nop
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800899a:	b480      	push	{r7}
 800899c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800899e:	bf00      	nop
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089ac:	bf00      	nop
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089ba:	f000 fb93 	bl	80090e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089be:	bf00      	nop
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80089c6:	2001      	movs	r0, #1
 80089c8:	f002 fbf2 	bl	800b1b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80089cc:	bf00      	nop
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80089d4:	2002      	movs	r0, #2
 80089d6:	f002 fbeb 	bl	800b1b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80089da:	bf00      	nop
 80089dc:	bd80      	pop	{r7, pc}

080089de <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80089e2:	2010      	movs	r0, #16
 80089e4:	f002 fbe4 	bl	800b1b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80089e8:	bf00      	nop
 80089ea:	bd80      	pop	{r7, pc}

080089ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80089f0:	4802      	ldr	r0, [pc, #8]	@ (80089fc <DMA1_Channel1_IRQHandler+0x10>)
 80089f2:	f002 f8f5 	bl	800abe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80089f6:	bf00      	nop
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	2000060c 	.word	0x2000060c

08008a00 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008a04:	4802      	ldr	r0, [pc, #8]	@ (8008a10 <ADC1_IRQHandler+0x10>)
 8008a06:	f000 ff75 	bl	80098f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8008a0a:	bf00      	nop
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200005a8 	.word	0x200005a8

08008a14 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008a18:	4802      	ldr	r0, [pc, #8]	@ (8008a24 <USB_HP_IRQHandler+0x10>)
 8008a1a:	f004 f8b6 	bl	800cb8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8008a1e:	bf00      	nop
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20001e94 	.word	0x20001e94

08008a28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008a2c:	4802      	ldr	r0, [pc, #8]	@ (8008a38 <USB_LP_IRQHandler+0x10>)
 8008a2e:	f004 f8ac 	bl	800cb8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8008a32:	bf00      	nop
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20001e94 	.word	0x20001e94

08008a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008a40:	4802      	ldr	r0, [pc, #8]	@ (8008a4c <TIM2_IRQHandler+0x10>)
 8008a42:	f007 fb35 	bl	80100b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008a46:	bf00      	nop
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200006c0 	.word	0x200006c0

08008a50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008a54:	4802      	ldr	r0, [pc, #8]	@ (8008a60 <I2C1_EV_IRQHandler+0x10>)
 8008a56:	f002 fe77 	bl	800b748 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008a5a:	bf00      	nop
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	2000066c 	.word	0x2000066c

08008a64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008a68:	4802      	ldr	r0, [pc, #8]	@ (8008a74 <I2C1_ER_IRQHandler+0x10>)
 8008a6a:	f002 fe87 	bl	800b77c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008a6e:	bf00      	nop
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	2000066c 	.word	0x2000066c

08008a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  return 1;
 8008a7c:	2301      	movs	r3, #1
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <_kill>:

int _kill(int pid, int sig)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008a92:	f00d fdf3 	bl	801667c <__errno>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2216      	movs	r2, #22
 8008a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8008a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <_exit>:

void _exit (int status)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ffe7 	bl	8008a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <_exit+0x12>

08008abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	e00a      	b.n	8008ae6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008ad0:	f3af 8000 	nop.w
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	60ba      	str	r2, [r7, #8]
 8008adc:	b2ca      	uxtb	r2, r1
 8008ade:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	dbf0      	blt.n	8008ad0 <_read+0x12>
  }

  return len;
 8008aee:	687b      	ldr	r3, [r7, #4]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e009      	b.n	8008b1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	60ba      	str	r2, [r7, #8]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fa40 	bl	8008f98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	617b      	str	r3, [r7, #20]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	dbf1      	blt.n	8008b0a <_write+0x12>
  }
  return len;
 8008b26:	687b      	ldr	r3, [r7, #4]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <_close>:

int _close(int file)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008b58:	605a      	str	r2, [r3, #4]
  return 0;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <_isatty>:

int _isatty(int file)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008b70:	2301      	movs	r3, #1
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ba0:	4a14      	ldr	r2, [pc, #80]	@ (8008bf4 <_sbrk+0x5c>)
 8008ba2:	4b15      	ldr	r3, [pc, #84]	@ (8008bf8 <_sbrk+0x60>)
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008bac:	4b13      	ldr	r3, [pc, #76]	@ (8008bfc <_sbrk+0x64>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d102      	bne.n	8008bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008bb4:	4b11      	ldr	r3, [pc, #68]	@ (8008bfc <_sbrk+0x64>)
 8008bb6:	4a12      	ldr	r2, [pc, #72]	@ (8008c00 <_sbrk+0x68>)
 8008bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008bba:	4b10      	ldr	r3, [pc, #64]	@ (8008bfc <_sbrk+0x64>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d207      	bcs.n	8008bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008bc8:	f00d fd58 	bl	801667c <__errno>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	220c      	movs	r2, #12
 8008bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	e009      	b.n	8008bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008bd8:	4b08      	ldr	r3, [pc, #32]	@ (8008bfc <_sbrk+0x64>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008bde:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <_sbrk+0x64>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4413      	add	r3, r2
 8008be6:	4a05      	ldr	r2, [pc, #20]	@ (8008bfc <_sbrk+0x64>)
 8008be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20030000 	.word	0x20030000
 8008bf8:	00000400 	.word	0x00000400
 8008bfc:	20000914 	.word	0x20000914
 8008c00:	200024e0 	.word	0x200024e0

08008c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8008c08:	4b24      	ldr	r3, [pc, #144]	@ (8008c9c <SystemInit+0x98>)
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c0e:	4a23      	ldr	r2, [pc, #140]	@ (8008c9c <SystemInit+0x98>)
 8008c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8008c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c2c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8008c30:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8008c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c3c:	4b18      	ldr	r3, [pc, #96]	@ (8008ca0 <SystemInit+0x9c>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8008c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c4e:	f023 0305 	bic.w	r3, r3, #5
 8008c52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c62:	f023 0301 	bic.w	r3, r3, #1
 8008c66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8008c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8008ca4 <SystemInit+0xa0>)
 8008c70:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8008c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c76:	4a0b      	ldr	r2, [pc, #44]	@ (8008ca4 <SystemInit+0xa0>)
 8008c78:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c8e:	2200      	movs	r2, #0
 8008c90:	619a      	str	r2, [r3, #24]
}
 8008c92:	bf00      	nop
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	e000ed00 	.word	0xe000ed00
 8008ca0:	faf6fefb 	.word	0xfaf6fefb
 8008ca4:	22041000 	.word	0x22041000

08008ca8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8008ca8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008caa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cac:	3304      	adds	r3, #4

08008cae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cb0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8008cb2:	d3f9      	bcc.n	8008ca8 <CopyDataInit>
  bx lr
 8008cb4:	4770      	bx	lr

08008cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8008cb6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8008cb8:	3004      	adds	r0, #4

08008cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8008cba:	4288      	cmp	r0, r1
  bcc FillZerobss
 8008cbc:	d3fb      	bcc.n	8008cb6 <FillZerobss>
  bx lr
 8008cbe:	4770      	bx	lr

08008cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008cc0:	480c      	ldr	r0, [pc, #48]	@ (8008cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008cc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008cc4:	f7ff ff9e 	bl	8008c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8008cc8:	480b      	ldr	r0, [pc, #44]	@ (8008cf8 <LoopForever+0x6>)
 8008cca:	490c      	ldr	r1, [pc, #48]	@ (8008cfc <LoopForever+0xa>)
 8008ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8008d00 <LoopForever+0xe>)
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f7ff ffed 	bl	8008cae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008cd4:	480b      	ldr	r0, [pc, #44]	@ (8008d04 <LoopForever+0x12>)
 8008cd6:	490c      	ldr	r1, [pc, #48]	@ (8008d08 <LoopForever+0x16>)
 8008cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8008d0c <LoopForever+0x1a>)
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f7ff ffe7 	bl	8008cae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8008ce0:	480b      	ldr	r0, [pc, #44]	@ (8008d10 <LoopForever+0x1e>)
 8008ce2:	490c      	ldr	r1, [pc, #48]	@ (8008d14 <LoopForever+0x22>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f7ff ffe8 	bl	8008cba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008cea:	f00d fccd 	bl	8016688 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008cee:	f7ff f8eb 	bl	8007ec8 <main>

08008cf2 <LoopForever>:

LoopForever:
  b LoopForever
 8008cf2:	e7fe      	b.n	8008cf2 <LoopForever>
  ldr   r0, =_estack
 8008cf4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8008cf8:	20000008 	.word	0x20000008
 8008cfc:	20000308 	.word	0x20000308
 8008d00:	0801c730 	.word	0x0801c730
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008d04:	20030000 	.word	0x20030000
 8008d08:	20030000 	.word	0x20030000
 8008d0c:	0801ca30 	.word	0x0801ca30
  INIT_BSS _sbss, _ebss
 8008d10:	20000308 	.word	0x20000308
 8008d14:	200024dc 	.word	0x200024dc

08008d18 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008d18:	e7fe      	b.n	8008d18 <AES1_IRQHandler>

08008d1a <LL_AHB2_GRP1_EnableClock>:
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
}
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
	...

08008d80 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8008d8a:	f107 030c 	add.w	r3, r7, #12
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	605a      	str	r2, [r3, #4]
 8008d94:	609a      	str	r2, [r3, #8]
 8008d96:	60da      	str	r2, [r3, #12]
 8008d98:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8008d9a:	2002      	movs	r0, #2
 8008d9c:	f7ff ffbd 	bl	8008d1a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	4a12      	ldr	r2, [pc, #72]	@ (8008dec <BSP_LED_Init+0x6c>)
 8008da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008daa:	2301      	movs	r3, #1
 8008dac:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008db2:	2302      	movs	r3, #2
 8008db4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	4a0d      	ldr	r2, [pc, #52]	@ (8008df0 <BSP_LED_Init+0x70>)
 8008dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dbe:	f107 020c 	add.w	r2, r7, #12
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f002 f86b 	bl	800aea0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	4a08      	ldr	r2, [pc, #32]	@ (8008df0 <BSP_LED_Init+0x70>)
 8008dce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	4a05      	ldr	r2, [pc, #20]	@ (8008dec <BSP_LED_Init+0x6c>)
 8008dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f002 f9cf 	bl	800b180 <HAL_GPIO_WritePin>
}
 8008de2:	bf00      	nop
 8008de4:	3720      	adds	r7, #32
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	0801c338 	.word	0x0801c338
 8008df0:	20000028 	.word	0x20000028

08008df4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	460a      	mov	r2, r1
 8008dfe:	71fb      	strb	r3, [r7, #7]
 8008e00:	4613      	mov	r3, r2
 8008e02:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	60da      	str	r2, [r3, #12]
 8008e12:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <BSP_PB_Init+0x2e>
 8008e1a:	2004      	movs	r0, #4
 8008e1c:	f7ff ff7d 	bl	8008d1a <LL_AHB2_GRP1_EnableClock>
 8008e20:	e00c      	b.n	8008e3c <BSP_PB_Init+0x48>
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d103      	bne.n	8008e30 <BSP_PB_Init+0x3c>
 8008e28:	2008      	movs	r0, #8
 8008e2a:	f7ff ff76 	bl	8008d1a <LL_AHB2_GRP1_EnableClock>
 8008e2e:	e005      	b.n	8008e3c <BSP_PB_Init+0x48>
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d102      	bne.n	8008e3c <BSP_PB_Init+0x48>
 8008e36:	2008      	movs	r0, #8
 8008e38:	f7ff ff6f 	bl	8008d1a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008e3c:	79bb      	ldrb	r3, [r7, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d117      	bne.n	8008e72 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	4a20      	ldr	r2, [pc, #128]	@ (8008ec8 <BSP_PB_Init+0xd4>)
 8008e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e4a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e54:	2302      	movs	r3, #2
 8008e56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ecc <BSP_PB_Init+0xd8>)
 8008e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e60:	f107 020c 	add.w	r2, r7, #12
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f002 f81a 	bl	800aea0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	f000 f965 	bl	800913c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8008e72:	79bb      	ldrb	r3, [r7, #6]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d123      	bne.n	8008ec0 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	4a13      	ldr	r2, [pc, #76]	@ (8008ec8 <BSP_PB_Init+0xd4>)
 8008e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e80:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8008e82:	2301      	movs	r3, #1
 8008e84:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8008e86:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8008e8a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8008ecc <BSP_PB_Init+0xd8>)
 8008e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e94:	f107 020c 	add.w	r2, r7, #12
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 f800 	bl	800aea0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8008ed0 <BSP_PB_Init+0xdc>)
 8008ea4:	5cd3      	ldrb	r3, [r2, r3]
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	210f      	movs	r1, #15
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 fce0 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	4a06      	ldr	r2, [pc, #24]	@ (8008ed0 <BSP_PB_Init+0xdc>)
 8008eb6:	5cd3      	ldrb	r3, [r2, r3]
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 fcf3 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	0801c340 	.word	0x0801c340
 8008ecc:	20000034 	.word	0x20000034
 8008ed0:	0801c348 	.word	0x0801c348

08008ed4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d903      	bls.n	8008ef2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008eea:	f06f 0301 	mvn.w	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	e018      	b.n	8008f24 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	2294      	movs	r2, #148	@ 0x94
 8008ef6:	fb02 f303 	mul.w	r3, r2, r3
 8008efa:	4a0d      	ldr	r2, [pc, #52]	@ (8008f30 <BSP_COM_Init+0x5c>)
 8008efc:	4413      	add	r3, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f866 	bl	8008fd0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2294      	movs	r2, #148	@ 0x94
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	4a08      	ldr	r2, [pc, #32]	@ (8008f30 <BSP_COM_Init+0x5c>)
 8008f0e:	4413      	add	r3, r2
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f80e 	bl	8008f34 <MX_LPUART1_Init>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8008f1e:	f06f 0303 	mvn.w	r3, #3
 8008f22:	e000      	b.n	8008f26 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8008f24:	68fb      	ldr	r3, [r7, #12]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000918 	.word	0x20000918

08008f34 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8008f3e:	4b15      	ldr	r3, [pc, #84]	@ (8008f94 <MX_LPUART1_Init+0x60>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	220c      	movs	r2, #12
 8008f52:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	895b      	ldrh	r3, [r3, #10]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	891b      	ldrh	r3, [r3, #8]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	899b      	ldrh	r3, [r3, #12]
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008f80:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f007 fc30 	bl	80107e8 <HAL_UART_Init>
 8008f88:	4603      	mov	r3, r0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000040 	.word	0x20000040

08008f98 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8008fa0:	4b09      	ldr	r3, [pc, #36]	@ (8008fc8 <__io_putchar+0x30>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	2394      	movs	r3, #148	@ 0x94
 8008fa8:	fb02 f303 	mul.w	r3, r2, r3
 8008fac:	4a07      	ldr	r2, [pc, #28]	@ (8008fcc <__io_putchar+0x34>)
 8008fae:	1898      	adds	r0, r3, r2
 8008fb0:	1d39      	adds	r1, r7, #4
 8008fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f007 fc70 	bl	801089c <HAL_UART_Transmit>
  return ch;
 8008fbc:	687b      	ldr	r3, [r7, #4]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200009ac 	.word	0x200009ac
 8008fcc:	20000918 	.word	0x20000918

08008fd0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8008fd8:	2002      	movs	r0, #2
 8008fda:	f7ff fe9e 	bl	8008d1a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8008fde:	2002      	movs	r0, #2
 8008fe0:	f7ff fe9b 	bl	8008d1a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8008fe4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008fe8:	f7ff feb0 	bl	8008d4c <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8008fec:	2340      	movs	r3, #64	@ 0x40
 8008fee:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8008ffc:	2307      	movs	r3, #7
 8008ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8009000:	f107 030c 	add.w	r3, r7, #12
 8009004:	4619      	mov	r1, r3
 8009006:	4809      	ldr	r0, [pc, #36]	@ (800902c <COM1_MspInit+0x5c>)
 8009008:	f001 ff4a 	bl	800aea0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800900c:	2380      	movs	r3, #128	@ 0x80
 800900e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8009010:	2302      	movs	r3, #2
 8009012:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8009014:	2307      	movs	r3, #7
 8009016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8009018:	f107 030c 	add.w	r3, r7, #12
 800901c:	4619      	mov	r1, r3
 800901e:	4803      	ldr	r0, [pc, #12]	@ (800902c <COM1_MspInit+0x5c>)
 8009020:	f001 ff3e 	bl	800aea0 <HAL_GPIO_Init>
}
 8009024:	bf00      	nop
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	48000400 	.word	0x48000400

08009030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800903a:	4b0c      	ldr	r3, [pc, #48]	@ (800906c <HAL_Init+0x3c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0b      	ldr	r2, [pc, #44]	@ (800906c <HAL_Init+0x3c>)
 8009040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009044:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009046:	2003      	movs	r0, #3
 8009048:	f001 fc08 	bl	800a85c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800904c:	2000      	movs	r0, #0
 800904e:	f000 f80f 	bl	8009070 <HAL_InitTick>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	71fb      	strb	r3, [r7, #7]
 800905c:	e001      	b.n	8009062 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800905e:	f7ff fba6 	bl	80087ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009062:	79fb      	ldrb	r3, [r7, #7]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	58004000 	.word	0x58004000

08009070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800907c:	4b17      	ldr	r3, [pc, #92]	@ (80090dc <HAL_InitTick+0x6c>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d024      	beq.n	80090ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009084:	f006 fa56 	bl	800f534 <HAL_RCC_GetHCLKFreq>
 8009088:	4602      	mov	r2, r0
 800908a:	4b14      	ldr	r3, [pc, #80]	@ (80090dc <HAL_InitTick+0x6c>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009094:	fbb3 f3f1 	udiv	r3, r3, r1
 8009098:	fbb2 f3f3 	udiv	r3, r2, r3
 800909c:	4618      	mov	r0, r3
 800909e:	f001 fc10 	bl	800a8c2 <HAL_SYSTICK_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10f      	bne.n	80090c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b0f      	cmp	r3, #15
 80090ac:	d809      	bhi.n	80090c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80090ae:	2200      	movs	r2, #0
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295
 80090b6:	f001 fbdc 	bl	800a872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80090ba:	4a09      	ldr	r2, [pc, #36]	@ (80090e0 <HAL_InitTick+0x70>)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	e007      	b.n	80090d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	73fb      	strb	r3, [r7, #15]
 80090c6:	e004      	b.n	80090d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	73fb      	strb	r3, [r7, #15]
 80090cc:	e001      	b.n	80090d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	20000048 	.word	0x20000048
 80090e0:	20000044 	.word	0x20000044

080090e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80090e8:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <HAL_IncTick+0x20>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b06      	ldr	r3, [pc, #24]	@ (8009108 <HAL_IncTick+0x24>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4413      	add	r3, r2
 80090f4:	4a04      	ldr	r2, [pc, #16]	@ (8009108 <HAL_IncTick+0x24>)
 80090f6:	6013      	str	r3, [r2, #0]
}
 80090f8:	bf00      	nop
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000048 	.word	0x20000048
 8009108:	200009b0 	.word	0x200009b0

0800910c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  return uwTick;
 8009110:	4b03      	ldr	r3, [pc, #12]	@ (8009120 <HAL_GetTick+0x14>)
 8009112:	681b      	ldr	r3, [r3, #0]
}
 8009114:	4618      	mov	r0, r3
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	200009b0 	.word	0x200009b0

08009124 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8009128:	4b03      	ldr	r3, [pc, #12]	@ (8009138 <HAL_GetTickPrio+0x14>)
 800912a:	681b      	ldr	r3, [r3, #0]
}
 800912c:	4618      	mov	r0, r3
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000044 	.word	0x20000044

0800913c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009144:	f7ff ffe2 	bl	800910c <HAL_GetTick>
 8009148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d005      	beq.n	8009162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <HAL_Delay+0x44>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009162:	bf00      	nop
 8009164:	f7ff ffd2 	bl	800910c <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	429a      	cmp	r2, r3
 8009172:	d8f7      	bhi.n	8009164 <HAL_Delay+0x28>
  {
  }
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000048 	.word	0x20000048

08009184 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	431a      	orrs	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	609a      	str	r2, [r3, #8]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3360      	adds	r3, #96	@ 0x60
 80091fe:	461a      	mov	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	4b08      	ldr	r3, [pc, #32]	@ (8009230 <LL_ADC_SetOffset+0x44>)
 800920e:	4013      	ands	r3, r2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	4313      	orrs	r3, r2
 800921c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009224:	bf00      	nop
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	03fff000 	.word	0x03fff000

08009234 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3360      	adds	r3, #96	@ 0x60
 8009242:	461a      	mov	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3360      	adds	r3, #96	@ 0x60
 8009270:	461a      	mov	r2, r3
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	431a      	orrs	r2, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80092ae:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3330      	adds	r3, #48	@ 0x30
 80092cc:	461a      	mov	r2, r3
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	0a1b      	lsrs	r3, r3, #8
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	f003 030c 	and.w	r3, r3, #12
 80092d8:	4413      	add	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f003 031f 	and.w	r3, r3, #31
 80092e6:	211f      	movs	r1, #31
 80092e8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ec:	43db      	mvns	r3, r3
 80092ee:	401a      	ands	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	0e9b      	lsrs	r3, r3, #26
 80092f4:	f003 011f 	and.w	r1, r3, #31
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f003 031f 	and.w	r3, r3, #31
 80092fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009302:	431a      	orrs	r2, r3
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8009308:	bf00      	nop
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800933c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009356:	b480      	push	{r7}
 8009358:	b087      	sub	sp, #28
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3314      	adds	r3, #20
 8009366:	461a      	mov	r2, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	0e5b      	lsrs	r3, r3, #25
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	4413      	add	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	0d1b      	lsrs	r3, r3, #20
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	2107      	movs	r1, #7
 8009384:	fa01 f303 	lsl.w	r3, r1, r3
 8009388:	43db      	mvns	r3, r3
 800938a:	401a      	ands	r2, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	0d1b      	lsrs	r3, r3, #20
 8009390:	f003 031f 	and.w	r3, r3, #31
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	fa01 f303 	lsl.w	r3, r1, r3
 800939a:	431a      	orrs	r2, r3
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80093a0:	bf00      	nop
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c4:	43db      	mvns	r3, r3
 80093c6:	401a      	ands	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f003 0318 	and.w	r3, r3, #24
 80093ce:	4908      	ldr	r1, [pc, #32]	@ (80093f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80093d0:	40d9      	lsrs	r1, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	400b      	ands	r3, r1
 80093d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093da:	431a      	orrs	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	0007ffff 	.word	0x0007ffff

080093f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6093      	str	r3, [r2, #8]
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942c:	d101      	bne.n	8009432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800942e:	2301      	movs	r3, #1
 8009430:	e000      	b.n	8009434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009454:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800947c:	d101      	bne.n	8009482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094a4:	f043 0201 	orr.w	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <LL_ADC_IsEnabled+0x18>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e000      	b.n	80094d2 <LL_ADC_IsEnabled+0x1a>
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094f2:	f043 0204 	orr.w	r2, r3, #4
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	2b04      	cmp	r3, #4
 8009518:	d101      	bne.n	800951e <LL_ADC_REG_IsConversionOngoing+0x18>
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 0308 	and.w	r3, r3, #8
 800953c:	2b08      	cmp	r3, #8
 800953e:	d101      	bne.n	8009544 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
	...

08009554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8009560:	2300      	movs	r3, #0
 8009562:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009564:	2300      	movs	r3, #0
 8009566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e12e      	b.n	80097d0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff f91b 	bl	80087bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff ff3d 	bl	8009418 <LL_ADC_IsDeepPowerDownEnabled>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ff23 	bl	80093f4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff ff58 	bl	8009468 <LL_ADC_IsInternalRegulatorEnabled>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d115      	bne.n	80095ea <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff ff3c 	bl	8009440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80095c8:	4b83      	ldr	r3, [pc, #524]	@ (80097d8 <HAL_ADC_Init+0x284>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	099b      	lsrs	r3, r3, #6
 80095ce:	4a83      	ldr	r2, [pc, #524]	@ (80097dc <HAL_ADC_Init+0x288>)
 80095d0:	fba2 2303 	umull	r2, r3, r2, r3
 80095d4:	099b      	lsrs	r3, r3, #6
 80095d6:	3301      	adds	r3, #1
 80095d8:	005b      	lsls	r3, r3, #1
 80095da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80095dc:	e002      	b.n	80095e4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1f9      	bne.n	80095de <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff ff3a 	bl	8009468 <LL_ADC_IsInternalRegulatorEnabled>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10d      	bne.n	8009616 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fe:	f043 0210 	orr.w	r2, r3, #16
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960a:	f043 0201 	orr.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff ff73 	bl	8009506 <LL_ADC_REG_IsConversionOngoing>
 8009620:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009626:	f003 0310 	and.w	r3, r3, #16
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 80c7 	bne.w	80097be <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f040 80c3 	bne.w	80097be <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009640:	f043 0202 	orr.w	r2, r3, #2
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff ff33 	bl	80094b8 <LL_ADC_IsEnabled>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10b      	bne.n	8009670 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009658:	4861      	ldr	r0, [pc, #388]	@ (80097e0 <HAL_ADC_Init+0x28c>)
 800965a:	f7ff ff2d 	bl	80094b8 <LL_ADC_IsEnabled>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	4619      	mov	r1, r3
 800966a:	485e      	ldr	r0, [pc, #376]	@ (80097e4 <HAL_ADC_Init+0x290>)
 800966c:	f7ff fd8a 	bl	8009184 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7e5b      	ldrb	r3, [r3, #25]
 8009674:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800967a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009680:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009686:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800968e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8009690:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	4313      	orrs	r3, r2
 8009696:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d106      	bne.n	80096b0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a6:	3b01      	subs	r3, #1
 80096a8:	045b      	lsls	r3, r3, #17
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d009      	beq.n	80096cc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	4b45      	ldr	r3, [pc, #276]	@ (80097e8 <HAL_ADC_Init+0x294>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	69b9      	ldr	r1, [r7, #24]
 80096dc:	430b      	orrs	r3, r1
 80096de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff ff0e 	bl	8009506 <LL_ADC_REG_IsConversionOngoing>
 80096ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff ff1b 	bl	800952c <LL_ADC_INJ_IsConversionOngoing>
 80096f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d13d      	bne.n	800977a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d13a      	bne.n	800977a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009708:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009710:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009712:	4313      	orrs	r3, r2
 8009714:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009720:	f023 0302 	bic.w	r3, r3, #2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	69b9      	ldr	r1, [r7, #24]
 800972a:	430b      	orrs	r3, r1
 800972c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009734:	2b01      	cmp	r3, #1
 8009736:	d118      	bne.n	800976a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009742:	f023 0304 	bic.w	r3, r3, #4
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800974e:	4311      	orrs	r1, r2
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009754:	4311      	orrs	r1, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800975a:	430a      	orrs	r2, r1
 800975c:	431a      	orrs	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	611a      	str	r2, [r3, #16]
 8009768:	e007      	b.n	800977a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d10c      	bne.n	800979c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009788:	f023 010f 	bic.w	r1, r3, #15
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	1e5a      	subs	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	631a      	str	r2, [r3, #48]	@ 0x30
 800979a:	e007      	b.n	80097ac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 020f 	bic.w	r2, r2, #15
 80097aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b0:	f023 0303 	bic.w	r3, r3, #3
 80097b4:	f043 0201 	orr.w	r2, r3, #1
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80097bc:	e007      	b.n	80097ce <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c2:	f043 0210 	orr.w	r2, r3, #16
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80097ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000024 	.word	0x20000024
 80097dc:	053e2d63 	.word	0x053e2d63
 80097e0:	50040000 	.word	0x50040000
 80097e4:	50040300 	.word	0x50040300
 80097e8:	fff0c007 	.word	0xfff0c007

080097ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fe82 	bl	8009506 <LL_ADC_REG_IsConversionOngoing>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d167      	bne.n	80098d8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800980e:	2b01      	cmp	r3, #1
 8009810:	d101      	bne.n	8009816 <HAL_ADC_Start_DMA+0x2a>
 8009812:	2302      	movs	r3, #2
 8009814:	e063      	b.n	80098de <HAL_ADC_Start_DMA+0xf2>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fe0c 	bl	800a43c <ADC_Enable>
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d14f      	bne.n	80098ce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009832:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d006      	beq.n	800985c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009852:	f023 0206 	bic.w	r2, r3, #6
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	659a      	str	r2, [r3, #88]	@ 0x58
 800985a:	e002      	b.n	8009862 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009866:	4a20      	ldr	r2, [pc, #128]	@ (80098e8 <HAL_ADC_Start_DMA+0xfc>)
 8009868:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986e:	4a1f      	ldr	r2, [pc, #124]	@ (80098ec <HAL_ADC_Start_DMA+0x100>)
 8009870:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009876:	4a1e      	ldr	r2, [pc, #120]	@ (80098f0 <HAL_ADC_Start_DMA+0x104>)
 8009878:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	221c      	movs	r2, #28
 8009880:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0210 	orr.w	r2, r2, #16
 8009898:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f042 0201 	orr.w	r2, r2, #1
 80098a8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3340      	adds	r3, #64	@ 0x40
 80098b4:	4619      	mov	r1, r3
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f001 f8b7 	bl	800aa2c <HAL_DMA_Start_IT>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff fe09 	bl	80094de <LL_ADC_REG_StartConversion>
 80098cc:	e006      	b.n	80098dc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80098d6:	e001      	b.n	80098dc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80098d8:	2302      	movs	r3, #2
 80098da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	0800a531 	.word	0x0800a531
 80098ec:	0800a609 	.word	0x0800a609
 80098f0:	0800a625 	.word	0x0800a625

080098f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d017      	beq.n	800994a <HAL_ADC_IRQHandler+0x56>
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d012      	beq.n	800994a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009928:	f003 0310 	and.w	r3, r3, #16
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009934:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 feb3 	bl	800a6a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2202      	movs	r2, #2
 8009948:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <HAL_ADC_IRQHandler+0x6a>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009964:	2b00      	cmp	r3, #0
 8009966:	d05d      	beq.n	8009a24 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	2b00      	cmp	r3, #0
 8009970:	d058      	beq.n	8009a24 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009976:	f003 0310 	and.w	r3, r3, #16
 800997a:	2b00      	cmp	r3, #0
 800997c:	d105      	bne.n	800998a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff fc81 	bl	8009296 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d03d      	beq.n	8009a16 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a8:	d035      	beq.n	8009a16 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0308 	and.w	r3, r3, #8
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d12e      	bne.n	8009a16 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fda2 	bl	8009506 <LL_ADC_REG_IsConversionOngoing>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11a      	bne.n	80099fe <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 020c 	bic.w	r2, r2, #12
 80099d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d112      	bne.n	8009a16 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f4:	f043 0201 	orr.w	r2, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80099fc:	e00b      	b.n	8009a16 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a02:	f043 0210 	orr.w	r2, r3, #16
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0e:	f043 0201 	orr.w	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f922 	bl	8009c60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	220c      	movs	r2, #12
 8009a22:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d004      	beq.n	8009a38 <HAL_ADC_IRQHandler+0x144>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d074      	beq.n	8009b2c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d06f      	beq.n	8009b2c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fc61 	bl	8009330 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009a6e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fc0e 	bl	8009296 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009a7a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d049      	beq.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d007      	beq.n	8009aa4 <HAL_ADC_IRQHandler+0x1b0>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d041      	beq.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d13c      	bne.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aae:	2b40      	cmp	r3, #64	@ 0x40
 8009ab0:	d135      	bne.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d12e      	bne.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fd31 	bl	800952c <LL_ADC_INJ_IsConversionOngoing>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11a      	bne.n	8009b06 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009ade:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d112      	bne.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009afc:	f043 0201 	orr.w	r2, r3, #1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	655a      	str	r2, [r3, #84]	@ 0x54
 8009b04:	e00b      	b.n	8009b1e <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b0a:	f043 0210 	orr.w	r2, r3, #16
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b16:	f043 0201 	orr.w	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fd9a 	bl	800a658 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2260      	movs	r2, #96	@ 0x60
 8009b2a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d011      	beq.n	8009b5a <HAL_ADC_IRQHandler+0x266>
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00c      	beq.n	8009b5a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f89b 	bl	8009c88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2280      	movs	r2, #128	@ 0x80
 8009b58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d012      	beq.n	8009b8a <HAL_ADC_IRQHandler+0x296>
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00d      	beq.n	8009b8a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fd80 	bl	800a680 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d012      	beq.n	8009bba <HAL_ADC_IRQHandler+0x2c6>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00d      	beq.n	8009bba <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fd72 	bl	800a694 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02b      	beq.n	8009c1c <HAL_ADC_IRQHandler+0x328>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f003 0310 	and.w	r3, r3, #16
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d026      	beq.n	8009c1c <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	61fb      	str	r3, [r7, #28]
 8009bda:	e009      	b.n	8009bf0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fb97 	bl	8009314 <LL_ADC_REG_GetDMATransfer>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8009bec:	2301      	movs	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d10e      	bne.n	8009c14 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c06:	f043 0202 	orr.w	r2, r3, #2
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f844 	bl	8009c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2210      	movs	r2, #16
 8009c1a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d018      	beq.n	8009c58 <HAL_ADC_IRQHandler+0x364>
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d013      	beq.n	8009c58 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c34:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c40:	f043 0208 	orr.w	r2, r3, #8
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c50:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fd0a 	bl	800a66c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8009c58:	bf00      	nop
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b0b6      	sub	sp, #216	@ 0xd8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_ADC_ConfigChannel+0x22>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e39f      	b.n	800a412 <HAL_ADC_ConfigChannel+0x762>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff fc11 	bl	8009506 <LL_ADC_REG_IsConversionOngoing>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 8384 	bne.w	800a3f4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	6859      	ldr	r1, [r3, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	f7ff fadf 	bl	80092bc <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fbff 	bl	8009506 <LL_ADC_REG_IsConversionOngoing>
 8009d08:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff fc0b 	bl	800952c <LL_ADC_INJ_IsConversionOngoing>
 8009d16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009d1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f040 81a6 	bne.w	800a070 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f040 81a1 	bne.w	800a070 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6819      	ldr	r1, [r3, #0]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7ff fb0b 	bl	8009356 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	695a      	ldr	r2, [r3, #20]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	08db      	lsrs	r3, r3, #3
 8009d4c:	f003 0303 	and.w	r3, r3, #3
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	fa02 f303 	lsl.w	r3, r2, r3
 8009d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d00a      	beq.n	8009d78 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6919      	ldr	r1, [r3, #16]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d72:	f7ff fa3b 	bl	80091ec <LL_ADC_SetOffset>
 8009d76:	e17b      	b.n	800a070 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff fa58 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <HAL_ADC_ConfigChannel+0xf4>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fa4d 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	0e9b      	lsrs	r3, r3, #26
 8009d9e:	f003 021f 	and.w	r2, r3, #31
 8009da2:	e01e      	b.n	8009de2 <HAL_ADC_ConfigChannel+0x132>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fa42 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009dba:	fa93 f3a3 	rbit	r3, r3
 8009dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009dc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8009dd2:	2320      	movs	r3, #32
 8009dd4:	e004      	b.n	8009de0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8009dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009dda:	fab3 f383 	clz	r3, r3
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d105      	bne.n	8009dfa <HAL_ADC_ConfigChannel+0x14a>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	0e9b      	lsrs	r3, r3, #26
 8009df4:	f003 031f 	and.w	r3, r3, #31
 8009df8:	e018      	b.n	8009e2c <HAL_ADC_ConfigChannel+0x17c>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009e06:	fa93 f3a3 	rbit	r3, r3
 8009e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8009e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8009e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8009e1e:	2320      	movs	r3, #32
 8009e20:	e004      	b.n	8009e2c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8009e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e26:	fab3 f383 	clz	r3, r3
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d106      	bne.n	8009e3e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2200      	movs	r2, #0
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fa11 	bl	8009260 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2101      	movs	r1, #1
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff f9f5 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <HAL_ADC_ConfigChannel+0x1ba>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2101      	movs	r1, #1
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff f9ea 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009e60:	4603      	mov	r3, r0
 8009e62:	0e9b      	lsrs	r3, r3, #26
 8009e64:	f003 021f 	and.w	r2, r3, #31
 8009e68:	e01e      	b.n	8009ea8 <HAL_ADC_ConfigChannel+0x1f8>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2101      	movs	r1, #1
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff f9df 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e80:	fa93 f3a3 	rbit	r3, r3
 8009e84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8009e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8009e98:	2320      	movs	r3, #32
 8009e9a:	e004      	b.n	8009ea6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8009e9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ea0:	fab3 f383 	clz	r3, r3
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d105      	bne.n	8009ec0 <HAL_ADC_ConfigChannel+0x210>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	0e9b      	lsrs	r3, r3, #26
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	e018      	b.n	8009ef2 <HAL_ADC_ConfigChannel+0x242>
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ecc:	fa93 f3a3 	rbit	r3, r3
 8009ed0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8009edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8009ee4:	2320      	movs	r3, #32
 8009ee6:	e004      	b.n	8009ef2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8009ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009eec:	fab3 f383 	clz	r3, r3
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d106      	bne.n	8009f04 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2200      	movs	r2, #0
 8009efc:	2101      	movs	r1, #1
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7ff f9ae 	bl	8009260 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2102      	movs	r1, #2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff f992 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <HAL_ADC_ConfigChannel+0x280>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2102      	movs	r1, #2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff f987 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009f26:	4603      	mov	r3, r0
 8009f28:	0e9b      	lsrs	r3, r3, #26
 8009f2a:	f003 021f 	and.w	r2, r3, #31
 8009f2e:	e01e      	b.n	8009f6e <HAL_ADC_ConfigChannel+0x2be>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2102      	movs	r1, #2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff f97c 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f46:	fa93 f3a3 	rbit	r3, r3
 8009f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8009f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8009f5e:	2320      	movs	r3, #32
 8009f60:	e004      	b.n	8009f6c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8009f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f66:	fab3 f383 	clz	r3, r3
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d105      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x2d6>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	0e9b      	lsrs	r3, r3, #26
 8009f80:	f003 031f 	and.w	r3, r3, #31
 8009f84:	e016      	b.n	8009fb4 <HAL_ADC_ConfigChannel+0x304>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f92:	fa93 f3a3 	rbit	r3, r3
 8009f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009f98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8009fa6:	2320      	movs	r3, #32
 8009fa8:	e004      	b.n	8009fb4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8009faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fae:	fab3 f383 	clz	r3, r3
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d106      	bne.n	8009fc6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2102      	movs	r1, #2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff f94d 	bl	8009260 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2103      	movs	r1, #3
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff f931 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x342>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2103      	movs	r1, #3
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff f926 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	0e9b      	lsrs	r3, r3, #26
 8009fec:	f003 021f 	and.w	r2, r3, #31
 8009ff0:	e017      	b.n	800a022 <HAL_ADC_ConfigChannel+0x372>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2103      	movs	r1, #3
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff f91b 	bl	8009234 <LL_ADC_GetOffsetChannel>
 8009ffe:	4603      	mov	r3, r0
 800a000:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a002:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a004:	fa93 f3a3 	rbit	r3, r3
 800a008:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a00a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a00c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a00e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800a014:	2320      	movs	r3, #32
 800a016:	e003      	b.n	800a020 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800a018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a01a:	fab3 f383 	clz	r3, r3
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	461a      	mov	r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <HAL_ADC_ConfigChannel+0x38a>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	0e9b      	lsrs	r3, r3, #26
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	e011      	b.n	800a05e <HAL_ADC_ConfigChannel+0x3ae>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a042:	fa93 f3a3 	rbit	r3, r3
 800a046:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a04a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800a052:	2320      	movs	r3, #32
 800a054:	e003      	b.n	800a05e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800a056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a058:	fab3 f383 	clz	r3, r3
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	429a      	cmp	r2, r3
 800a060:	d106      	bne.n	800a070 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2200      	movs	r2, #0
 800a068:	2103      	movs	r1, #3
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff f8f8 	bl	8009260 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff fa1f 	bl	80094b8 <LL_ADC_IsEnabled>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f040 81c2 	bne.w	800a406 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	6819      	ldr	r1, [r3, #0]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	461a      	mov	r2, r3
 800a090:	f7ff f98c 	bl	80093ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	4a8e      	ldr	r2, [pc, #568]	@ (800a2d4 <HAL_ADC_ConfigChannel+0x624>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	f040 8130 	bne.w	800a300 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10b      	bne.n	800a0c8 <HAL_ADC_ConfigChannel+0x418>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	0e9b      	lsrs	r3, r3, #26
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	f003 031f 	and.w	r3, r3, #31
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	bf94      	ite	ls
 800a0c0:	2301      	movls	r3, #1
 800a0c2:	2300      	movhi	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	e019      	b.n	800a0fc <HAL_ADC_ConfigChannel+0x44c>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0d0:	fa93 f3a3 	rbit	r3, r3
 800a0d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a0d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a0da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800a0e0:	2320      	movs	r3, #32
 800a0e2:	e003      	b.n	800a0ec <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800a0e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0e6:	fab3 f383 	clz	r3, r3
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	2b09      	cmp	r3, #9
 800a0f4:	bf94      	ite	ls
 800a0f6:	2301      	movls	r3, #1
 800a0f8:	2300      	movhi	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d079      	beq.n	800a1f4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d107      	bne.n	800a11c <HAL_ADC_ConfigChannel+0x46c>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	0e9b      	lsrs	r3, r3, #26
 800a112:	3301      	adds	r3, #1
 800a114:	069b      	lsls	r3, r3, #26
 800a116:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a11a:	e015      	b.n	800a148 <HAL_ADC_ConfigChannel+0x498>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a124:	fa93 f3a3 	rbit	r3, r3
 800a128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a12a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a12c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800a134:	2320      	movs	r3, #32
 800a136:	e003      	b.n	800a140 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800a138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a13a:	fab3 f383 	clz	r3, r3
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	3301      	adds	r3, #1
 800a142:	069b      	lsls	r3, r3, #26
 800a144:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a150:	2b00      	cmp	r3, #0
 800a152:	d109      	bne.n	800a168 <HAL_ADC_ConfigChannel+0x4b8>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	0e9b      	lsrs	r3, r3, #26
 800a15a:	3301      	adds	r3, #1
 800a15c:	f003 031f 	and.w	r3, r3, #31
 800a160:	2101      	movs	r1, #1
 800a162:	fa01 f303 	lsl.w	r3, r1, r3
 800a166:	e017      	b.n	800a198 <HAL_ADC_ConfigChannel+0x4e8>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a16e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a170:	fa93 f3a3 	rbit	r3, r3
 800a174:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a178:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a17a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800a180:	2320      	movs	r3, #32
 800a182:	e003      	b.n	800a18c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800a184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a186:	fab3 f383 	clz	r3, r3
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	3301      	adds	r3, #1
 800a18e:	f003 031f 	and.w	r3, r3, #31
 800a192:	2101      	movs	r1, #1
 800a194:	fa01 f303 	lsl.w	r3, r1, r3
 800a198:	ea42 0103 	orr.w	r1, r2, r3
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <HAL_ADC_ConfigChannel+0x50e>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	0e9b      	lsrs	r3, r3, #26
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	f003 021f 	and.w	r2, r3, #31
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	051b      	lsls	r3, r3, #20
 800a1bc:	e018      	b.n	800a1f0 <HAL_ADC_ConfigChannel+0x540>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	fa93 f3a3 	rbit	r3, r3
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800a1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a1d6:	2320      	movs	r3, #32
 800a1d8:	e003      	b.n	800a1e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1dc:	fab3 f383 	clz	r3, r3
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	f003 021f 	and.w	r2, r3, #31
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	e080      	b.n	800a2f6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d107      	bne.n	800a210 <HAL_ADC_ConfigChannel+0x560>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	0e9b      	lsrs	r3, r3, #26
 800a206:	3301      	adds	r3, #1
 800a208:	069b      	lsls	r3, r3, #26
 800a20a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a20e:	e015      	b.n	800a23c <HAL_ADC_ConfigChannel+0x58c>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	fa93 f3a3 	rbit	r3, r3
 800a21c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800a228:	2320      	movs	r3, #32
 800a22a:	e003      	b.n	800a234 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	fab3 f383 	clz	r3, r3
 800a232:	b2db      	uxtb	r3, r3
 800a234:	3301      	adds	r3, #1
 800a236:	069b      	lsls	r3, r3, #26
 800a238:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a244:	2b00      	cmp	r3, #0
 800a246:	d109      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x5ac>
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	0e9b      	lsrs	r3, r3, #26
 800a24e:	3301      	adds	r3, #1
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	2101      	movs	r1, #1
 800a256:	fa01 f303 	lsl.w	r3, r1, r3
 800a25a:	e017      	b.n	800a28c <HAL_ADC_ConfigChannel+0x5dc>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	fa93 f3a3 	rbit	r3, r3
 800a268:	61fb      	str	r3, [r7, #28]
  return result;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800a274:	2320      	movs	r3, #32
 800a276:	e003      	b.n	800a280 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	fab3 f383 	clz	r3, r3
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	3301      	adds	r3, #1
 800a282:	f003 031f 	and.w	r3, r3, #31
 800a286:	2101      	movs	r1, #1
 800a288:	fa01 f303 	lsl.w	r3, r1, r3
 800a28c:	ea42 0103 	orr.w	r1, r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10d      	bne.n	800a2b8 <HAL_ADC_ConfigChannel+0x608>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	0e9b      	lsrs	r3, r3, #26
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	f003 021f 	and.w	r2, r3, #31
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3b1e      	subs	r3, #30
 800a2b0:	051b      	lsls	r3, r3, #20
 800a2b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a2b6:	e01d      	b.n	800a2f4 <HAL_ADC_ConfigChannel+0x644>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	fa93 f3a3 	rbit	r3, r3
 800a2c4:	613b      	str	r3, [r7, #16]
  return result;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800a2d0:	2320      	movs	r3, #32
 800a2d2:	e005      	b.n	800a2e0 <HAL_ADC_ConfigChannel+0x630>
 800a2d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	fab3 f383 	clz	r3, r3
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	f003 021f 	and.w	r2, r3, #31
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3b1e      	subs	r3, #30
 800a2ee:	051b      	lsls	r3, r3, #20
 800a2f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a2f4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f7ff f82b 	bl	8009356 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	4b45      	ldr	r3, [pc, #276]	@ (800a41c <HAL_ADC_ConfigChannel+0x76c>)
 800a306:	4013      	ands	r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d07c      	beq.n	800a406 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a30c:	4844      	ldr	r0, [pc, #272]	@ (800a420 <HAL_ADC_ConfigChannel+0x770>)
 800a30e:	f7fe ff5f 	bl	80091d0 <LL_ADC_GetCommonPathInternalCh>
 800a312:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a316:	4843      	ldr	r0, [pc, #268]	@ (800a424 <HAL_ADC_ConfigChannel+0x774>)
 800a318:	f7ff f8ce 	bl	80094b8 <LL_ADC_IsEnabled>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d15e      	bne.n	800a3e0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a40      	ldr	r2, [pc, #256]	@ (800a428 <HAL_ADC_ConfigChannel+0x778>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d127      	bne.n	800a37c <HAL_ADC_ConfigChannel+0x6cc>
 800a32c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d121      	bne.n	800a37c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a39      	ldr	r2, [pc, #228]	@ (800a424 <HAL_ADC_ConfigChannel+0x774>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d161      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800a342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a346:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a34a:	4619      	mov	r1, r3
 800a34c:	4834      	ldr	r0, [pc, #208]	@ (800a420 <HAL_ADC_ConfigChannel+0x770>)
 800a34e:	f7fe ff2c 	bl	80091aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a352:	4b36      	ldr	r3, [pc, #216]	@ (800a42c <HAL_ADC_ConfigChannel+0x77c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	099b      	lsrs	r3, r3, #6
 800a358:	4a35      	ldr	r2, [pc, #212]	@ (800a430 <HAL_ADC_ConfigChannel+0x780>)
 800a35a:	fba2 2303 	umull	r2, r3, r2, r3
 800a35e:	099b      	lsrs	r3, r3, #6
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	4613      	mov	r3, r2
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800a36c:	e002      	b.n	800a374 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3b01      	subs	r3, #1
 800a372:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f9      	bne.n	800a36e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a37a:	e044      	b.n	800a406 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a2c      	ldr	r2, [pc, #176]	@ (800a434 <HAL_ADC_ConfigChannel+0x784>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d113      	bne.n	800a3ae <HAL_ADC_ConfigChannel+0x6fe>
 800a386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a38a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10d      	bne.n	800a3ae <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a23      	ldr	r2, [pc, #140]	@ (800a424 <HAL_ADC_ConfigChannel+0x774>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d134      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a39c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a3a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	481e      	ldr	r0, [pc, #120]	@ (800a420 <HAL_ADC_ConfigChannel+0x770>)
 800a3a8:	f7fe feff 	bl	80091aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a3ac:	e02b      	b.n	800a406 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a21      	ldr	r2, [pc, #132]	@ (800a438 <HAL_ADC_ConfigChannel+0x788>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d126      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x756>
 800a3b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a3bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d120      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a16      	ldr	r2, [pc, #88]	@ (800a424 <HAL_ADC_ConfigChannel+0x774>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d11b      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a3ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a3d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4811      	ldr	r0, [pc, #68]	@ (800a420 <HAL_ADC_ConfigChannel+0x770>)
 800a3da:	f7fe fee6 	bl	80091aa <LL_ADC_SetCommonPathInternalCh>
 800a3de:	e012      	b.n	800a406 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e4:	f043 0220 	orr.w	r2, r3, #32
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800a3f2:	e008      	b.n	800a406 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f8:	f043 0220 	orr.w	r2, r3, #32
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800a40e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a412:	4618      	mov	r0, r3
 800a414:	37d8      	adds	r7, #216	@ 0xd8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	80080000 	.word	0x80080000
 800a420:	50040300 	.word	0x50040300
 800a424:	50040000 	.word	0x50040000
 800a428:	c7520000 	.word	0xc7520000
 800a42c:	20000024 	.word	0x20000024
 800a430:	053e2d63 	.word	0x053e2d63
 800a434:	cb840000 	.word	0xcb840000
 800a438:	80000001 	.word	0x80000001

0800a43c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a444:	2300      	movs	r3, #0
 800a446:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff f833 	bl	80094b8 <LL_ADC_IsEnabled>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d15e      	bne.n	800a516 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	4b30      	ldr	r3, [pc, #192]	@ (800a520 <ADC_Enable+0xe4>)
 800a460:	4013      	ands	r3, r2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00d      	beq.n	800a482 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a46a:	f043 0210 	orr.w	r2, r3, #16
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a476:	f043 0201 	orr.w	r2, r3, #1
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e04a      	b.n	800a518 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff f802 	bl	8009490 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a48c:	4825      	ldr	r0, [pc, #148]	@ (800a524 <ADC_Enable+0xe8>)
 800a48e:	f7fe fe9f 	bl	80091d0 <LL_ADC_GetCommonPathInternalCh>
 800a492:	4603      	mov	r3, r0
 800a494:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00f      	beq.n	800a4bc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a49c:	4b22      	ldr	r3, [pc, #136]	@ (800a528 <ADC_Enable+0xec>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	099b      	lsrs	r3, r3, #6
 800a4a2:	4a22      	ldr	r2, [pc, #136]	@ (800a52c <ADC_Enable+0xf0>)
 800a4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a8:	099b      	lsrs	r3, r3, #6
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800a4ae:	e002      	b.n	800a4b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1f9      	bne.n	800a4b0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800a4bc:	f7fe fe26 	bl	800910c <HAL_GetTick>
 800a4c0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a4c2:	e021      	b.n	800a508 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fe fff5 	bl	80094b8 <LL_ADC_IsEnabled>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d104      	bne.n	800a4de <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe ffd9 	bl	8009490 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a4de:	f7fe fe15 	bl	800910c <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d90d      	bls.n	800a508 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f0:	f043 0210 	orr.w	r2, r3, #16
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4fc:	f043 0201 	orr.w	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e007      	b.n	800a518 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b01      	cmp	r3, #1
 800a514:	d1d6      	bne.n	800a4c4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	8000003f 	.word	0x8000003f
 800a524:	50040300 	.word	0x50040300
 800a528:	20000024 	.word	0x20000024
 800a52c:	053e2d63 	.word	0x053e2d63

0800a530 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a542:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a546:	2b00      	cmp	r3, #0
 800a548:	d14b      	bne.n	800a5e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0308 	and.w	r3, r3, #8
 800a560:	2b00      	cmp	r3, #0
 800a562:	d021      	beq.n	800a5a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fe94 	bl	8009296 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d032      	beq.n	800a5da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d12b      	bne.n	800a5da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d11f      	bne.n	800a5da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a59e:	f043 0201 	orr.w	r2, r3, #1
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5a6:	e018      	b.n	800a5da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d111      	bne.n	800a5da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d105      	bne.n	800a5da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d2:	f043 0201 	orr.w	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fb40 	bl	8009c60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a5e0:	e00e      	b.n	800a600 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff fb54 	bl	8009c9c <HAL_ADC_ErrorCallback>
}
 800a5f4:	e004      	b.n	800a600 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
}
 800a600:	bf00      	nop
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a614:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fb2c 	bl	8009c74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a61c:	bf00      	nop
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a636:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a642:	f043 0204 	orr.w	r2, r3, #4
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff fb26 	bl	8009c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a700 <__NVIC_SetPriorityGrouping+0x44>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a6d8:	4013      	ands	r3, r2
 800a6da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a6e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a6ee:	4a04      	ldr	r2, [pc, #16]	@ (800a700 <__NVIC_SetPriorityGrouping+0x44>)
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	60d3      	str	r3, [r2, #12]
}
 800a6f4:	bf00      	nop
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	e000ed00 	.word	0xe000ed00

0800a704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a708:	4b04      	ldr	r3, [pc, #16]	@ (800a71c <__NVIC_GetPriorityGrouping+0x18>)
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	0a1b      	lsrs	r3, r3, #8
 800a70e:	f003 0307 	and.w	r3, r3, #7
}
 800a712:	4618      	mov	r0, r3
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	e000ed00 	.word	0xe000ed00

0800a720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	db0b      	blt.n	800a74a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	f003 021f 	and.w	r2, r3, #31
 800a738:	4907      	ldr	r1, [pc, #28]	@ (800a758 <__NVIC_EnableIRQ+0x38>)
 800a73a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73e:	095b      	lsrs	r3, r3, #5
 800a740:	2001      	movs	r0, #1
 800a742:	fa00 f202 	lsl.w	r2, r0, r2
 800a746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	e000e100 	.word	0xe000e100

0800a75c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	6039      	str	r1, [r7, #0]
 800a766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	db0a      	blt.n	800a786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	b2da      	uxtb	r2, r3
 800a774:	490c      	ldr	r1, [pc, #48]	@ (800a7a8 <__NVIC_SetPriority+0x4c>)
 800a776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a77a:	0112      	lsls	r2, r2, #4
 800a77c:	b2d2      	uxtb	r2, r2
 800a77e:	440b      	add	r3, r1
 800a780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a784:	e00a      	b.n	800a79c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	4908      	ldr	r1, [pc, #32]	@ (800a7ac <__NVIC_SetPriority+0x50>)
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	f003 030f 	and.w	r3, r3, #15
 800a792:	3b04      	subs	r3, #4
 800a794:	0112      	lsls	r2, r2, #4
 800a796:	b2d2      	uxtb	r2, r2
 800a798:	440b      	add	r3, r1
 800a79a:	761a      	strb	r2, [r3, #24]
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	e000e100 	.word	0xe000e100
 800a7ac:	e000ed00 	.word	0xe000ed00

0800a7b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b089      	sub	sp, #36	@ 0x24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f003 0307 	and.w	r3, r3, #7
 800a7c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	f1c3 0307 	rsb	r3, r3, #7
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	bf28      	it	cs
 800a7ce:	2304      	movcs	r3, #4
 800a7d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	2b06      	cmp	r3, #6
 800a7d8:	d902      	bls.n	800a7e0 <NVIC_EncodePriority+0x30>
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	3b03      	subs	r3, #3
 800a7de:	e000      	b.n	800a7e2 <NVIC_EncodePriority+0x32>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ee:	43da      	mvns	r2, r3
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	401a      	ands	r2, r3
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7f8:	f04f 31ff 	mov.w	r1, #4294967295
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a802:	43d9      	mvns	r1, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a808:	4313      	orrs	r3, r2
         );
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3724      	adds	r7, #36	@ 0x24
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
	...

0800a818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3b01      	subs	r3, #1
 800a824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a828:	d301      	bcc.n	800a82e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a82a:	2301      	movs	r3, #1
 800a82c:	e00f      	b.n	800a84e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a82e:	4a0a      	ldr	r2, [pc, #40]	@ (800a858 <SysTick_Config+0x40>)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3b01      	subs	r3, #1
 800a834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a836:	210f      	movs	r1, #15
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	f7ff ff8e 	bl	800a75c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a840:	4b05      	ldr	r3, [pc, #20]	@ (800a858 <SysTick_Config+0x40>)
 800a842:	2200      	movs	r2, #0
 800a844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a846:	4b04      	ldr	r3, [pc, #16]	@ (800a858 <SysTick_Config+0x40>)
 800a848:	2207      	movs	r2, #7
 800a84a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	e000e010 	.word	0xe000e010

0800a85c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff ff29 	bl	800a6bc <__NVIC_SetPriorityGrouping>
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b086      	sub	sp, #24
 800a876:	af00      	add	r7, sp, #0
 800a878:	4603      	mov	r3, r0
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	607a      	str	r2, [r7, #4]
 800a87e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a880:	f7ff ff40 	bl	800a704 <__NVIC_GetPriorityGrouping>
 800a884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	68b9      	ldr	r1, [r7, #8]
 800a88a:	6978      	ldr	r0, [r7, #20]
 800a88c:	f7ff ff90 	bl	800a7b0 <NVIC_EncodePriority>
 800a890:	4602      	mov	r2, r0
 800a892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff ff5f 	bl	800a75c <__NVIC_SetPriority>
}
 800a89e:	bf00      	nop
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff ff33 	bl	800a720 <__NVIC_EnableIRQ>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff ffa4 	bl	800a818 <SysTick_Config>
 800a8d0:	4603      	mov	r3, r0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e08e      	b.n	800aa0c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4b47      	ldr	r3, [pc, #284]	@ (800aa14 <HAL_DMA_Init+0x138>)
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d80f      	bhi.n	800a91a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	4b45      	ldr	r3, [pc, #276]	@ (800aa18 <HAL_DMA_Init+0x13c>)
 800a902:	4413      	add	r3, r2
 800a904:	4a45      	ldr	r2, [pc, #276]	@ (800aa1c <HAL_DMA_Init+0x140>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	009a      	lsls	r2, r3, #2
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a42      	ldr	r2, [pc, #264]	@ (800aa20 <HAL_DMA_Init+0x144>)
 800a916:	641a      	str	r2, [r3, #64]	@ 0x40
 800a918:	e00e      	b.n	800a938 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	4b40      	ldr	r3, [pc, #256]	@ (800aa24 <HAL_DMA_Init+0x148>)
 800a922:	4413      	add	r3, r2
 800a924:	4a3d      	ldr	r2, [pc, #244]	@ (800aa1c <HAL_DMA_Init+0x140>)
 800a926:	fba2 2303 	umull	r2, r3, r2, r3
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	009a      	lsls	r2, r3, #2
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a3c      	ldr	r2, [pc, #240]	@ (800aa28 <HAL_DMA_Init+0x14c>)
 800a936:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a94e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a95c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4313      	orrs	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fa24 	bl	800add8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a998:	d102      	bne.n	800a9a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9a8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a9ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a9b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d010      	beq.n	800a9e2 <HAL_DMA_Init+0x106>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d80c      	bhi.n	800a9e2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fa43 	bl	800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a9de:	605a      	str	r2, [r3, #4]
 800a9e0:	e008      	b.n	800a9f4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40020407 	.word	0x40020407
 800aa18:	bffdfff8 	.word	0xbffdfff8
 800aa1c:	cccccccd 	.word	0xcccccccd
 800aa20:	40020000 	.word	0x40020000
 800aa24:	bffdfbf8 	.word	0xbffdfbf8
 800aa28:	40020400 	.word	0x40020400

0800aa2c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d101      	bne.n	800aa4c <HAL_DMA_Start_IT+0x20>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e066      	b.n	800ab1a <HAL_DMA_Start_IT+0xee>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d155      	bne.n	800ab0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f022 0201 	bic.w	r2, r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	68b9      	ldr	r1, [r7, #8]
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f968 	bl	800ad5a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d008      	beq.n	800aaa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f042 020e 	orr.w	r2, r2, #14
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	e00f      	b.n	800aac4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 0204 	bic.w	r2, r2, #4
 800aab2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f042 020a 	orr.w	r2, r2, #10
 800aac2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d007      	beq.n	800aae2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aadc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aae0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d007      	beq.n	800aafa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aaf8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0201 	orr.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	e005      	b.n	800ab18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ab14:	2302      	movs	r3, #2
 800ab16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d005      	beq.n	800ab46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	73fb      	strb	r3, [r7, #15]
 800ab44:	e047      	b.n	800abd6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 020e 	bic.w	r2, r2, #14
 800ab54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f022 0201 	bic.w	r2, r2, #1
 800ab64:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7a:	f003 021c 	and.w	r2, r3, #28
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab82:	2101      	movs	r1, #1
 800ab84:	fa01 f202 	lsl.w	r2, r1, r2
 800ab88:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ab92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00c      	beq.n	800abb6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800abaa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800abb4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
    }
  }
  return status;
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abfc:	f003 031c 	and.w	r3, r3, #28
 800ac00:	2204      	movs	r2, #4
 800ac02:	409a      	lsls	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4013      	ands	r3, r2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d026      	beq.n	800ac5a <HAL_DMA_IRQHandler+0x7a>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d021      	beq.n	800ac5a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0320 	and.w	r3, r3, #32
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d107      	bne.n	800ac34 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 0204 	bic.w	r2, r2, #4
 800ac32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac38:	f003 021c 	and.w	r2, r3, #28
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac40:	2104      	movs	r1, #4
 800ac42:	fa01 f202 	lsl.w	r2, r1, r2
 800ac46:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d071      	beq.n	800ad34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ac58:	e06c      	b.n	800ad34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac5e:	f003 031c 	and.w	r3, r3, #28
 800ac62:	2202      	movs	r2, #2
 800ac64:	409a      	lsls	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4013      	ands	r3, r2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d02e      	beq.n	800accc <HAL_DMA_IRQHandler+0xec>
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d029      	beq.n	800accc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10b      	bne.n	800ac9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 020a 	bic.w	r2, r2, #10
 800ac94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca2:	f003 021c 	and.w	r2, r3, #28
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acaa:	2102      	movs	r1, #2
 800acac:	fa01 f202 	lsl.w	r2, r1, r2
 800acb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d038      	beq.n	800ad34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800acca:	e033      	b.n	800ad34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd0:	f003 031c 	and.w	r3, r3, #28
 800acd4:	2208      	movs	r2, #8
 800acd6:	409a      	lsls	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4013      	ands	r3, r2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d02a      	beq.n	800ad36 <HAL_DMA_IRQHandler+0x156>
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d025      	beq.n	800ad36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f022 020e 	bic.w	r2, r2, #14
 800acf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acfe:	f003 021c 	and.w	r2, r3, #28
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad06:	2101      	movs	r1, #1
 800ad08:	fa01 f202 	lsl.w	r2, r1, r2
 800ad0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop
}
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b083      	sub	sp, #12
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ad4c:	b2db      	uxtb	r3, r3
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
 800ad66:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ad70:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ad82:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad88:	f003 021c 	and.w	r2, r3, #28
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad90:	2101      	movs	r1, #1
 800ad92:	fa01 f202 	lsl.w	r2, r1, r2
 800ad96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	2b10      	cmp	r3, #16
 800ada6:	d108      	bne.n	800adba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800adb8:	e007      	b.n	800adca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	60da      	str	r2, [r3, #12]
}
 800adca:	bf00      	nop
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
	...

0800add8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	461a      	mov	r2, r3
 800ade6:	4b17      	ldr	r3, [pc, #92]	@ (800ae44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ade8:	429a      	cmp	r2, r3
 800adea:	d80a      	bhi.n	800ae02 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adf0:	089b      	lsrs	r3, r3, #2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adf8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6493      	str	r3, [r2, #72]	@ 0x48
 800ae00:	e007      	b.n	800ae12 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae06:	089b      	lsrs	r3, r3, #2
 800ae08:	009a      	lsls	r2, r3, #2
 800ae0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ae48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ae0c:	4413      	add	r3, r2
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	3b08      	subs	r3, #8
 800ae1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ae1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae20:	091b      	lsrs	r3, r3, #4
 800ae22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a0a      	ldr	r2, [pc, #40]	@ (800ae50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ae28:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f003 031f 	and.w	r3, r3, #31
 800ae30:	2201      	movs	r2, #1
 800ae32:	409a      	lsls	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ae38:	bf00      	nop
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	40020407 	.word	0x40020407
 800ae48:	4002081c 	.word	0x4002081c
 800ae4c:	cccccccd 	.word	0xcccccccd
 800ae50:	40020880 	.word	0x40020880

0800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	4b0b      	ldr	r3, [pc, #44]	@ (800ae98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ae6a:	4413      	add	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	461a      	mov	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a09      	ldr	r2, [pc, #36]	@ (800ae9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800ae78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2201      	movs	r2, #1
 800ae84:	409a      	lsls	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	1000823f 	.word	0x1000823f
 800ae9c:	40020940 	.word	0x40020940

0800aea0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aeae:	e14c      	b.n	800b14a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800aebc:	4013      	ands	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 813e 	beq.w	800b144 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d005      	beq.n	800aee0 <HAL_GPIO_Init+0x40>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d130      	bne.n	800af42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	2203      	movs	r2, #3
 800aeec:	fa02 f303 	lsl.w	r3, r2, r3
 800aef0:	43db      	mvns	r3, r3
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	4013      	ands	r3, r2
 800aef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	fa02 f303 	lsl.w	r3, r2, r3
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	4313      	orrs	r3, r2
 800af08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af16:	2201      	movs	r2, #1
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	fa02 f303 	lsl.w	r3, r2, r3
 800af1e:	43db      	mvns	r3, r3
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4013      	ands	r3, r2
 800af24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	091b      	lsrs	r3, r3, #4
 800af2c:	f003 0201 	and.w	r2, r3, #1
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	fa02 f303 	lsl.w	r3, r2, r3
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	4313      	orrs	r3, r2
 800af3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f003 0303 	and.w	r3, r3, #3
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d017      	beq.n	800af7e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	2203      	movs	r2, #3
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	43db      	mvns	r3, r3
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	4013      	ands	r3, r2
 800af64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	fa02 f303 	lsl.w	r3, r2, r3
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d123      	bne.n	800afd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	08da      	lsrs	r2, r3, #3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3208      	adds	r2, #8
 800af92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f003 0307 	and.w	r3, r3, #7
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	220f      	movs	r2, #15
 800afa2:	fa02 f303 	lsl.w	r3, r2, r3
 800afa6:	43db      	mvns	r3, r3
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	4013      	ands	r3, r2
 800afac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	691a      	ldr	r2, [r3, #16]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f003 0307 	and.w	r3, r3, #7
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	fa02 f303 	lsl.w	r3, r2, r3
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	08da      	lsrs	r2, r3, #3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3208      	adds	r2, #8
 800afcc:	6939      	ldr	r1, [r7, #16]
 800afce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	2203      	movs	r2, #3
 800afde:	fa02 f303 	lsl.w	r3, r2, r3
 800afe2:	43db      	mvns	r3, r3
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	4013      	ands	r3, r2
 800afe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f003 0203 	and.w	r2, r3, #3
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	fa02 f303 	lsl.w	r3, r2, r3
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	4313      	orrs	r3, r2
 800affe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 8098 	beq.w	800b144 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800b014:	4a54      	ldr	r2, [pc, #336]	@ (800b168 <HAL_GPIO_Init+0x2c8>)
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	089b      	lsrs	r3, r3, #2
 800b01a:	3302      	adds	r3, #2
 800b01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f003 0303 	and.w	r3, r3, #3
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	220f      	movs	r2, #15
 800b02c:	fa02 f303 	lsl.w	r3, r2, r3
 800b030:	43db      	mvns	r3, r3
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4013      	ands	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b03e:	d019      	beq.n	800b074 <HAL_GPIO_Init+0x1d4>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a4a      	ldr	r2, [pc, #296]	@ (800b16c <HAL_GPIO_Init+0x2cc>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d013      	beq.n	800b070 <HAL_GPIO_Init+0x1d0>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a49      	ldr	r2, [pc, #292]	@ (800b170 <HAL_GPIO_Init+0x2d0>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d00d      	beq.n	800b06c <HAL_GPIO_Init+0x1cc>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a48      	ldr	r2, [pc, #288]	@ (800b174 <HAL_GPIO_Init+0x2d4>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d007      	beq.n	800b068 <HAL_GPIO_Init+0x1c8>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a47      	ldr	r2, [pc, #284]	@ (800b178 <HAL_GPIO_Init+0x2d8>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d101      	bne.n	800b064 <HAL_GPIO_Init+0x1c4>
 800b060:	2304      	movs	r3, #4
 800b062:	e008      	b.n	800b076 <HAL_GPIO_Init+0x1d6>
 800b064:	2307      	movs	r3, #7
 800b066:	e006      	b.n	800b076 <HAL_GPIO_Init+0x1d6>
 800b068:	2303      	movs	r3, #3
 800b06a:	e004      	b.n	800b076 <HAL_GPIO_Init+0x1d6>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e002      	b.n	800b076 <HAL_GPIO_Init+0x1d6>
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <HAL_GPIO_Init+0x1d6>
 800b074:	2300      	movs	r3, #0
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	f002 0203 	and.w	r2, r2, #3
 800b07c:	0092      	lsls	r2, r2, #2
 800b07e:	4093      	lsls	r3, r2
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4313      	orrs	r3, r2
 800b084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b086:	4938      	ldr	r1, [pc, #224]	@ (800b168 <HAL_GPIO_Init+0x2c8>)
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	089b      	lsrs	r3, r3, #2
 800b08c:	3302      	adds	r3, #2
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b094:	4b39      	ldr	r3, [pc, #228]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	43db      	mvns	r3, r3
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b0b8:	4a30      	ldr	r2, [pc, #192]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b0be:	4b2f      	ldr	r3, [pc, #188]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	43db      	mvns	r3, r3
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b0e2:	4a26      	ldr	r2, [pc, #152]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b0e8:	4b24      	ldr	r3, [pc, #144]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	43db      	mvns	r3, r3
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b10e:	4a1b      	ldr	r2, [pc, #108]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800b116:	4b19      	ldr	r3, [pc, #100]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b11c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	43db      	mvns	r3, r3
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4013      	ands	r3, r2
 800b126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4313      	orrs	r3, r2
 800b13a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b13c:	4a0f      	ldr	r2, [pc, #60]	@ (800b17c <HAL_GPIO_Init+0x2dc>)
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	3301      	adds	r3, #1
 800b148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	f47f aeab 	bne.w	800aeb0 <HAL_GPIO_Init+0x10>
  }
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	371c      	adds	r7, #28
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	40010000 	.word	0x40010000
 800b16c:	48000400 	.word	0x48000400
 800b170:	48000800 	.word	0x48000800
 800b174:	48000c00 	.word	0x48000c00
 800b178:	48001000 	.word	0x48001000
 800b17c:	58000800 	.word	0x58000800

0800b180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	807b      	strh	r3, [r7, #2]
 800b18c:	4613      	mov	r3, r2
 800b18e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b190:	787b      	ldrb	r3, [r7, #1]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b196:	887a      	ldrh	r2, [r7, #2]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b19c:	e002      	b.n	800b1a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b19e:	887a      	ldrh	r2, [r7, #2]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b1ba:	4b08      	ldr	r3, [pc, #32]	@ (800b1dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	88fb      	ldrh	r3, [r7, #6]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d006      	beq.n	800b1d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b1c6:	4a05      	ldr	r2, [pc, #20]	@ (800b1dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b1cc:	88fb      	ldrh	r3, [r7, #6]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f806 	bl	800b1e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	58000800 	.word	0x58000800

0800b1e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b1ea:	bf00      	nop
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e08d      	b.n	800b324 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7fd fb31 	bl	8008884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2224      	movs	r2, #36	@ 0x24
 800b226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0201 	bic.w	r2, r2, #1
 800b238:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b246:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b256:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d107      	bne.n	800b270 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b26c:	609a      	str	r2, [r3, #8]
 800b26e:	e006      	b.n	800b27e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b27c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d108      	bne.n	800b298 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b294:	605a      	str	r2, [r3, #4]
 800b296:	e007      	b.n	800b2a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	6812      	ldr	r2, [r2, #0]
 800b2b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b2b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	69d9      	ldr	r1, [r3, #28]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1a      	ldr	r2, [r3, #32]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f042 0201 	orr.w	r2, r2, #1
 800b304:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2220      	movs	r2, #32
 800b310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af02      	add	r7, sp, #8
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	461a      	mov	r2, r3
 800b338:	460b      	mov	r3, r1
 800b33a:	817b      	strh	r3, [r7, #10]
 800b33c:	4613      	mov	r3, r2
 800b33e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b20      	cmp	r3, #32
 800b34a:	f040 80fd 	bne.w	800b548 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b354:	2b01      	cmp	r3, #1
 800b356:	d101      	bne.n	800b35c <HAL_I2C_Master_Transmit+0x30>
 800b358:	2302      	movs	r3, #2
 800b35a:	e0f6      	b.n	800b54a <HAL_I2C_Master_Transmit+0x21e>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b364:	f7fd fed2 	bl	800910c <HAL_GetTick>
 800b368:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2319      	movs	r3, #25
 800b370:	2201      	movs	r2, #1
 800b372:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 ffa1 	bl	800c2be <I2C_WaitOnFlagUntilTimeout>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e0e1      	b.n	800b54a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2221      	movs	r2, #33	@ 0x21
 800b38a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2210      	movs	r2, #16
 800b392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	893a      	ldrh	r2, [r7, #8]
 800b3a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	2bff      	cmp	r3, #255	@ 0xff
 800b3b6:	d906      	bls.n	800b3c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	22ff      	movs	r2, #255	@ 0xff
 800b3bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b3be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	e007      	b.n	800b3d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b3d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d024      	beq.n	800b428 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e2:	781a      	ldrb	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b406:	3b01      	subs	r3, #1
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b412:	b2db      	uxtb	r3, r3
 800b414:	3301      	adds	r3, #1
 800b416:	b2da      	uxtb	r2, r3
 800b418:	8979      	ldrh	r1, [r7, #10]
 800b41a:	4b4e      	ldr	r3, [pc, #312]	@ (800b554 <HAL_I2C_Master_Transmit+0x228>)
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f001 f99b 	bl	800c75c <I2C_TransferConfig>
 800b426:	e066      	b.n	800b4f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	8979      	ldrh	r1, [r7, #10]
 800b430:	4b48      	ldr	r3, [pc, #288]	@ (800b554 <HAL_I2C_Master_Transmit+0x228>)
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f001 f990 	bl	800c75c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b43c:	e05b      	b.n	800b4f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	6a39      	ldr	r1, [r7, #32]
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 ff94 	bl	800c370 <I2C_WaitOnTXISFlagUntilTimeout>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e07b      	b.n	800b54a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b456:	781a      	ldrb	r2, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	3b01      	subs	r3, #1
 800b470:	b29a      	uxth	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b47a:	3b01      	subs	r3, #1
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b486:	b29b      	uxth	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d034      	beq.n	800b4f6 <HAL_I2C_Master_Transmit+0x1ca>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b490:	2b00      	cmp	r3, #0
 800b492:	d130      	bne.n	800b4f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	2200      	movs	r2, #0
 800b49c:	2180      	movs	r1, #128	@ 0x80
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 ff0d 	bl	800c2be <I2C_WaitOnFlagUntilTimeout>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e04d      	b.n	800b54a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	2bff      	cmp	r3, #255	@ 0xff
 800b4b6:	d90e      	bls.n	800b4d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	22ff      	movs	r2, #255	@ 0xff
 800b4bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	8979      	ldrh	r1, [r7, #10]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f001 f944 	bl	800c75c <I2C_TransferConfig>
 800b4d4:	e00f      	b.n	800b4f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	8979      	ldrh	r1, [r7, #10]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f001 f933 	bl	800c75c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d19e      	bne.n	800b43e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	6a39      	ldr	r1, [r7, #32]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 ff7a 	bl	800c3fe <I2C_WaitOnSTOPFlagUntilTimeout>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	e01a      	b.n	800b54a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2220      	movs	r2, #32
 800b51a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6859      	ldr	r1, [r3, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	4b0c      	ldr	r3, [pc, #48]	@ (800b558 <HAL_I2C_Master_Transmit+0x22c>)
 800b528:	400b      	ands	r3, r1
 800b52a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2220      	movs	r2, #32
 800b530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	e000      	b.n	800b54a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b548:	2302      	movs	r3, #2
  }
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	80002000 	.word	0x80002000
 800b558:	fe00e800 	.word	0xfe00e800

0800b55c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	607a      	str	r2, [r7, #4]
 800b566:	461a      	mov	r2, r3
 800b568:	460b      	mov	r3, r1
 800b56a:	817b      	strh	r3, [r7, #10]
 800b56c:	4613      	mov	r3, r2
 800b56e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b20      	cmp	r3, #32
 800b57a:	f040 80db 	bne.w	800b734 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_I2C_Master_Receive+0x30>
 800b588:	2302      	movs	r3, #2
 800b58a:	e0d4      	b.n	800b736 <HAL_I2C_Master_Receive+0x1da>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b594:	f7fd fdba 	bl	800910c <HAL_GetTick>
 800b598:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	2319      	movs	r3, #25
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 fe89 	bl	800c2be <I2C_WaitOnFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e0bf      	b.n	800b736 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2222      	movs	r2, #34	@ 0x22
 800b5ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2210      	movs	r2, #16
 800b5c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	893a      	ldrh	r2, [r7, #8]
 800b5d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	2bff      	cmp	r3, #255	@ 0xff
 800b5e6:	d90e      	bls.n	800b606 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	22ff      	movs	r2, #255	@ 0xff
 800b5ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	8979      	ldrh	r1, [r7, #10]
 800b5f6:	4b52      	ldr	r3, [pc, #328]	@ (800b740 <HAL_I2C_Master_Receive+0x1e4>)
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f001 f8ac 	bl	800c75c <I2C_TransferConfig>
 800b604:	e06d      	b.n	800b6e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b614:	b2da      	uxtb	r2, r3
 800b616:	8979      	ldrh	r1, [r7, #10]
 800b618:	4b49      	ldr	r3, [pc, #292]	@ (800b740 <HAL_I2C_Master_Receive+0x1e4>)
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f001 f89b 	bl	800c75c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b626:	e05c      	b.n	800b6e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	6a39      	ldr	r1, [r7, #32]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f000 ff29 	bl	800c484 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e07c      	b.n	800b736 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b658:	3b01      	subs	r3, #1
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b664:	b29b      	uxth	r3, r3
 800b666:	3b01      	subs	r3, #1
 800b668:	b29a      	uxth	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b672:	b29b      	uxth	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d034      	beq.n	800b6e2 <HAL_I2C_Master_Receive+0x186>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d130      	bne.n	800b6e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	2200      	movs	r2, #0
 800b688:	2180      	movs	r1, #128	@ 0x80
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 fe17 	bl	800c2be <I2C_WaitOnFlagUntilTimeout>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e04d      	b.n	800b736 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	2bff      	cmp	r3, #255	@ 0xff
 800b6a2:	d90e      	bls.n	800b6c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	22ff      	movs	r2, #255	@ 0xff
 800b6a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	8979      	ldrh	r1, [r7, #10]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f001 f84e 	bl	800c75c <I2C_TransferConfig>
 800b6c0:	e00f      	b.n	800b6e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	8979      	ldrh	r1, [r7, #10]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f001 f83d 	bl	800c75c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d19d      	bne.n	800b628 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	6a39      	ldr	r1, [r7, #32]
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 fe84 	bl	800c3fe <I2C_WaitOnSTOPFlagUntilTimeout>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e01a      	b.n	800b736 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2220      	movs	r2, #32
 800b706:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6859      	ldr	r1, [r3, #4]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b0c      	ldr	r3, [pc, #48]	@ (800b744 <HAL_I2C_Master_Receive+0x1e8>)
 800b714:	400b      	ands	r3, r1
 800b716:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2220      	movs	r2, #32
 800b71c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	e000      	b.n	800b736 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b734:	2302      	movs	r3, #2
  }
}
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	80002400 	.word	0x80002400
 800b744:	fe00e800 	.word	0xfe00e800

0800b748 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	68f9      	ldr	r1, [r7, #12]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	4798      	blx	r3
  }
}
 800b774:	bf00      	nop
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	0a1b      	lsrs	r3, r3, #8
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d010      	beq.n	800b7c2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	09db      	lsrs	r3, r3, #7
 800b7a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00a      	beq.n	800b7c2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b0:	f043 0201 	orr.w	r2, r3, #1
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b7c0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	0a9b      	lsrs	r3, r3, #10
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d010      	beq.n	800b7f0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	09db      	lsrs	r3, r3, #7
 800b7d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7de:	f043 0208 	orr.w	r2, r3, #8
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b7ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	0a5b      	lsrs	r3, r3, #9
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d010      	beq.n	800b81e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	09db      	lsrs	r3, r3, #7
 800b800:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00a      	beq.n	800b81e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b80c:	f043 0202 	orr.w	r2, r3, #2
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b81c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b822:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f003 030b 	and.w	r3, r3, #11
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b82e:	68f9      	ldr	r1, [r7, #12]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fbeb 	bl	800c00c <I2C_ITError>
  }
}
 800b836:	bf00      	nop
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b83e:	b480      	push	{r7}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b846:	bf00      	nop
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b852:	b480      	push	{r7}
 800b854:	b083      	sub	sp, #12
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b85a:	bf00      	nop
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
 800b872:	4613      	mov	r3, r2
 800b874:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b8b2:	bf00      	nop
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d101      	bne.n	800b8e2 <I2C_Slave_ISR_IT+0x24>
 800b8de:	2302      	movs	r3, #2
 800b8e0:	e0ed      	b.n	800babe <I2C_Slave_ISR_IT+0x200>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	095b      	lsrs	r3, r3, #5
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	095b      	lsrs	r3, r3, #5
 800b8fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d004      	beq.n	800b90c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b902:	6939      	ldr	r1, [r7, #16]
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f000 f9c1 	bl	800bc8c <I2C_ITSlaveCplt>
 800b90a:	e0d3      	b.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	091b      	lsrs	r3, r3, #4
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d04d      	beq.n	800b9b4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	091b      	lsrs	r3, r3, #4
 800b91c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b920:	2b00      	cmp	r3, #0
 800b922:	d047      	beq.n	800b9b4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b928:	b29b      	uxth	r3, r3
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d128      	bne.n	800b980 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b28      	cmp	r3, #40	@ 0x28
 800b938:	d108      	bne.n	800b94c <I2C_Slave_ISR_IT+0x8e>
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b940:	d104      	bne.n	800b94c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b942:	6939      	ldr	r1, [r7, #16]
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 fb0b 	bl	800bf60 <I2C_ITListenCplt>
 800b94a:	e032      	b.n	800b9b2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b29      	cmp	r3, #41	@ 0x29
 800b956:	d10e      	bne.n	800b976 <I2C_Slave_ISR_IT+0xb8>
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b95e:	d00a      	beq.n	800b976 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2210      	movs	r2, #16
 800b966:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f000 fc66 	bl	800c23a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f000 f92d 	bl	800bbce <I2C_ITSlaveSeqCplt>
 800b974:	e01d      	b.n	800b9b2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2210      	movs	r2, #16
 800b97c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b97e:	e096      	b.n	800baae <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2210      	movs	r2, #16
 800b986:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b98c:	f043 0204 	orr.w	r2, r3, #4
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <I2C_Slave_ISR_IT+0xe6>
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9a0:	f040 8085 	bne.w	800baae <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 fb2e 	bl	800c00c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b9b0:	e07d      	b.n	800baae <I2C_Slave_ISR_IT+0x1f0>
 800b9b2:	e07c      	b.n	800baae <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	089b      	lsrs	r3, r3, #2
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d030      	beq.n	800ba22 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	089b      	lsrs	r3, r3, #2
 800b9c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d02a      	beq.n	800ba22 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d018      	beq.n	800ba08 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e0:	b2d2      	uxtb	r2, r2
 800b9e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	3b01      	subs	r3, #1
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d14f      	bne.n	800bab2 <I2C_Slave_ISR_IT+0x1f4>
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ba18:	d04b      	beq.n	800bab2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f8d7 	bl	800bbce <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ba20:	e047      	b.n	800bab2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	08db      	lsrs	r3, r3, #3
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	08db      	lsrs	r3, r3, #3
 800ba32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d004      	beq.n	800ba44 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ba3a:	6939      	ldr	r1, [r7, #16]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f842 	bl	800bac6 <I2C_ITAddrCplt>
 800ba42:	e037      	b.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	085b      	lsrs	r3, r3, #1
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d031      	beq.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	085b      	lsrs	r3, r3, #1
 800ba54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02b      	beq.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d018      	beq.n	800ba98 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba6a:	781a      	ldrb	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b01      	subs	r3, #1
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ba96:	e00d      	b.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba9e:	d002      	beq.n	800baa6 <I2C_Slave_ISR_IT+0x1e8>
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f891 	bl	800bbce <I2C_ITSlaveSeqCplt>
 800baac:	e002      	b.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800baae:	bf00      	nop
 800bab0:	e000      	b.n	800bab4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bab2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800badc:	2b28      	cmp	r3, #40	@ 0x28
 800bade:	d16a      	bne.n	800bbb6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	0c1b      	lsrs	r3, r3, #16
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	0c1b      	lsrs	r3, r3, #16
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bafe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb0c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800bb1a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d138      	bne.n	800bb96 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800bb24:	897b      	ldrh	r3, [r7, #10]
 800bb26:	09db      	lsrs	r3, r3, #7
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	89bb      	ldrh	r3, [r7, #12]
 800bb2c:	4053      	eors	r3, r2
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f003 0306 	and.w	r3, r3, #6
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11c      	bne.n	800bb72 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bb38:	897b      	ldrh	r3, [r7, #10]
 800bb3a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d13b      	bne.n	800bbc6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2208      	movs	r2, #8
 800bb5a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb64:	89ba      	ldrh	r2, [r7, #12]
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fe7b 	bl	800b866 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bb70:	e029      	b.n	800bbc6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bb72:	893b      	ldrh	r3, [r7, #8]
 800bb74:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fe20 	bl	800c7c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb88:	89ba      	ldrh	r2, [r7, #12]
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff fe69 	bl	800b866 <HAL_I2C_AddrCallback>
}
 800bb94:	e017      	b.n	800bbc6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fe10 	bl	800c7c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bba8:	89ba      	ldrh	r2, [r7, #12]
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff fe59 	bl	800b866 <HAL_I2C_AddrCallback>
}
 800bbb4:	e007      	b.n	800bbc6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2208      	movs	r2, #8
 800bbbc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	0b9b      	lsrs	r3, r3, #14
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d008      	beq.n	800bc04 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	e00d      	b.n	800bc20 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	0bdb      	lsrs	r3, r3, #15
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d007      	beq.n	800bc20 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bc1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b29      	cmp	r3, #41	@ 0x29
 800bc2a:	d112      	bne.n	800bc52 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2228      	movs	r2, #40	@ 0x28
 800bc30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2221      	movs	r2, #33	@ 0x21
 800bc38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fdbf 	bl	800c7c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff fdf7 	bl	800b83e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bc50:	e017      	b.n	800bc82 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5c:	d111      	bne.n	800bc82 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2228      	movs	r2, #40	@ 0x28
 800bc62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2222      	movs	r2, #34	@ 0x22
 800bc6a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bc6c:	2102      	movs	r1, #2
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fda6 	bl	800c7c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff fde8 	bl	800b852 <HAL_I2C_SlaveRxCpltCallback>
}
 800bc82:	bf00      	nop
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bcae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2220      	movs	r2, #32
 800bcb6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	2b21      	cmp	r3, #33	@ 0x21
 800bcbc:	d002      	beq.n	800bcc4 <I2C_ITSlaveCplt+0x38>
 800bcbe:	7afb      	ldrb	r3, [r7, #11]
 800bcc0:	2b29      	cmp	r3, #41	@ 0x29
 800bcc2:	d108      	bne.n	800bcd6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bcc4:	f248 0101 	movw	r1, #32769	@ 0x8001
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fd79 	bl	800c7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2221      	movs	r2, #33	@ 0x21
 800bcd2:	631a      	str	r2, [r3, #48]	@ 0x30
 800bcd4:	e019      	b.n	800bd0a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bcd6:	7afb      	ldrb	r3, [r7, #11]
 800bcd8:	2b22      	cmp	r3, #34	@ 0x22
 800bcda:	d002      	beq.n	800bce2 <I2C_ITSlaveCplt+0x56>
 800bcdc:	7afb      	ldrb	r3, [r7, #11]
 800bcde:	2b2a      	cmp	r3, #42	@ 0x2a
 800bce0:	d108      	bne.n	800bcf4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bce2:	f248 0102 	movw	r1, #32770	@ 0x8002
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fd6a 	bl	800c7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2222      	movs	r2, #34	@ 0x22
 800bcf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800bcf2:	e00a      	b.n	800bd0a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	2b28      	cmp	r3, #40	@ 0x28
 800bcf8:	d107      	bne.n	800bd0a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800bcfa:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fd5e 	bl	800c7c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bd18:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	6859      	ldr	r1, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	4b8c      	ldr	r3, [pc, #560]	@ (800bf58 <I2C_ITSlaveCplt+0x2cc>)
 800bd26:	400b      	ands	r3, r1
 800bd28:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fa85 	bl	800c23a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	0b9b      	lsrs	r3, r3, #14
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d013      	beq.n	800bd64 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bd4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d020      	beq.n	800bd96 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bd62:	e018      	b.n	800bd96 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	0bdb      	lsrs	r3, r3, #15
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d012      	beq.n	800bd96 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bd7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d006      	beq.n	800bd96 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	089b      	lsrs	r3, r3, #2
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d020      	beq.n	800bde4 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f023 0304 	bic.w	r3, r3, #4
 800bda8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00c      	beq.n	800bde4 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d005      	beq.n	800bdfa <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf2:	f043 0204 	orr.w	r2, r3, #4
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	091b      	lsrs	r3, r3, #4
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d04a      	beq.n	800be9c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	091b      	lsrs	r3, r3, #4
 800be0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d044      	beq.n	800be9c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be16:	b29b      	uxth	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d128      	bne.n	800be6e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b28      	cmp	r3, #40	@ 0x28
 800be26:	d108      	bne.n	800be3a <I2C_ITSlaveCplt+0x1ae>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be2e:	d104      	bne.n	800be3a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800be30:	6979      	ldr	r1, [r7, #20]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f894 	bl	800bf60 <I2C_ITListenCplt>
 800be38:	e030      	b.n	800be9c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b29      	cmp	r3, #41	@ 0x29
 800be44:	d10e      	bne.n	800be64 <I2C_ITSlaveCplt+0x1d8>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800be4c:	d00a      	beq.n	800be64 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2210      	movs	r2, #16
 800be54:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f9ef 	bl	800c23a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff feb6 	bl	800bbce <I2C_ITSlaveSeqCplt>
 800be62:	e01b      	b.n	800be9c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2210      	movs	r2, #16
 800be6a:	61da      	str	r2, [r3, #28]
 800be6c:	e016      	b.n	800be9c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2210      	movs	r2, #16
 800be74:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be7a:	f043 0204 	orr.w	r2, r3, #4
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d003      	beq.n	800be90 <I2C_ITSlaveCplt+0x204>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be8e:	d105      	bne.n	800be9c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f8b8 	bl	800c00c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d010      	beq.n	800bed4 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f8a7 	bl	800c00c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b28      	cmp	r3, #40	@ 0x28
 800bec8:	d141      	bne.n	800bf4e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800beca:	6979      	ldr	r1, [r7, #20]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f847 	bl	800bf60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bed2:	e03c      	b.n	800bf4e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bedc:	d014      	beq.n	800bf08 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fe75 	bl	800bbce <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a1d      	ldr	r2, [pc, #116]	@ (800bf5c <I2C_ITSlaveCplt+0x2d0>)
 800bee8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7ff fcbe 	bl	800b882 <HAL_I2C_ListenCpltCallback>
}
 800bf06:	e022      	b.n	800bf4e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b22      	cmp	r3, #34	@ 0x22
 800bf12:	d10e      	bne.n	800bf32 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fc91 	bl	800b852 <HAL_I2C_SlaveRxCpltCallback>
}
 800bf30:	e00d      	b.n	800bf4e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2220      	movs	r2, #32
 800bf36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff fc78 	bl	800b83e <HAL_I2C_SlaveTxCpltCallback>
}
 800bf4e:	bf00      	nop
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	fe00e800 	.word	0xfe00e800
 800bf5c:	ffff0000 	.word	0xffff0000

0800bf60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a26      	ldr	r2, [pc, #152]	@ (800c008 <I2C_ITListenCplt+0xa8>)
 800bf6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2220      	movs	r2, #32
 800bf7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	089b      	lsrs	r3, r3, #2
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d022      	beq.n	800bfde <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa2:	b2d2      	uxtb	r2, r2
 800bfa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d012      	beq.n	800bfde <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfd6:	f043 0204 	orr.w	r2, r3, #4
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bfde:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fbec 	bl	800c7c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2210      	movs	r2, #16
 800bfee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7ff fc42 	bl	800b882 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	ffff0000 	.word	0xffff0000

0800c00c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c01c:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a6d      	ldr	r2, [pc, #436]	@ (800c1e0 <I2C_ITError+0x1d4>)
 800c02a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	431a      	orrs	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	2b28      	cmp	r3, #40	@ 0x28
 800c042:	d005      	beq.n	800c050 <I2C_ITError+0x44>
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	2b29      	cmp	r3, #41	@ 0x29
 800c048:	d002      	beq.n	800c050 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c04e:	d10b      	bne.n	800c068 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c050:	2103      	movs	r1, #3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fbb4 	bl	800c7c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2228      	movs	r2, #40	@ 0x28
 800c05c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a60      	ldr	r2, [pc, #384]	@ (800c1e4 <I2C_ITError+0x1d8>)
 800c064:	635a      	str	r2, [r3, #52]	@ 0x34
 800c066:	e030      	b.n	800c0ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c068:	f248 0103 	movw	r1, #32771	@ 0x8003
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fba7 	bl	800c7c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f8e1 	bl	800c23a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b60      	cmp	r3, #96	@ 0x60
 800c082:	d01f      	beq.n	800c0c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2220      	movs	r2, #32
 800c088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b20      	cmp	r3, #32
 800c098:	d114      	bne.n	800c0c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	f003 0310 	and.w	r3, r3, #16
 800c0a4:	2b10      	cmp	r3, #16
 800c0a6:	d109      	bne.n	800c0bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2210      	movs	r2, #16
 800c0ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0b4:	f043 0204 	orr.w	r2, r3, #4
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d039      	beq.n	800c14c <I2C_ITError+0x140>
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b11      	cmp	r3, #17
 800c0dc:	d002      	beq.n	800c0e4 <I2C_ITError+0xd8>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b21      	cmp	r3, #33	@ 0x21
 800c0e2:	d133      	bne.n	800c14c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0f2:	d107      	bne.n	800c104 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c102:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fe18 	bl	800ad3e <HAL_DMA_GetState>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b01      	cmp	r3, #1
 800c112:	d017      	beq.n	800c144 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c118:	4a33      	ldr	r2, [pc, #204]	@ (800c1e8 <I2C_ITError+0x1dc>)
 800c11a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fcfa 	bl	800ab22 <HAL_DMA_Abort_IT>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d04d      	beq.n	800c1d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c13e:	4610      	mov	r0, r2
 800c140:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c142:	e045      	b.n	800c1d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f851 	bl	800c1ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c14a:	e041      	b.n	800c1d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c150:	2b00      	cmp	r3, #0
 800c152:	d039      	beq.n	800c1c8 <I2C_ITError+0x1bc>
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b12      	cmp	r3, #18
 800c158:	d002      	beq.n	800c160 <I2C_ITError+0x154>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2b22      	cmp	r3, #34	@ 0x22
 800c15e:	d133      	bne.n	800c1c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c16a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c16e:	d107      	bne.n	800c180 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c17e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c184:	4618      	mov	r0, r3
 800c186:	f7fe fdda 	bl	800ad3e <HAL_DMA_GetState>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d017      	beq.n	800c1c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c194:	4a14      	ldr	r2, [pc, #80]	@ (800c1e8 <I2C_ITError+0x1dc>)
 800c196:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fe fcbc 	bl	800ab22 <HAL_DMA_Abort_IT>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d011      	beq.n	800c1d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c1be:	e009      	b.n	800c1d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f813 	bl	800c1ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c1c6:	e005      	b.n	800c1d4 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f80f 	bl	800c1ec <I2C_TreatErrorCallback>
  }
}
 800c1ce:	e002      	b.n	800c1d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c1d0:	bf00      	nop
 800c1d2:	e000      	b.n	800c1d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c1d4:	bf00      	nop
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	ffff0000 	.word	0xffff0000
 800c1e4:	0800b8bf 	.word	0x0800b8bf
 800c1e8:	0800c283 	.word	0x0800c283

0800c1ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b60      	cmp	r3, #96	@ 0x60
 800c1fe:	d10e      	bne.n	800c21e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2220      	movs	r2, #32
 800c204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fb47 	bl	800b8aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c21c:	e009      	b.n	800c232 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fb32 	bl	800b896 <HAL_I2C_ErrorCallback>
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d103      	bne.n	800c258 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2200      	movs	r2, #0
 800c256:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	f003 0301 	and.w	r3, r3, #1
 800c262:	2b01      	cmp	r3, #1
 800c264:	d007      	beq.n	800c276 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	699a      	ldr	r2, [r3, #24]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f042 0201 	orr.w	r2, r2, #1
 800c274:	619a      	str	r2, [r3, #24]
  }
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b084      	sub	sp, #16
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c29c:	2200      	movs	r2, #0
 800c29e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d003      	beq.n	800c2b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f7ff ff9b 	bl	800c1ec <I2C_TreatErrorCallback>
}
 800c2b6:	bf00      	nop
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	60f8      	str	r0, [r7, #12]
 800c2c6:	60b9      	str	r1, [r7, #8]
 800c2c8:	603b      	str	r3, [r7, #0]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2ce:	e03b      	b.n	800c348 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f961 	bl	800c59c <I2C_IsErrorOccurred>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e041      	b.n	800c368 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d02d      	beq.n	800c348 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ec:	f7fc ff0e 	bl	800910c <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d302      	bcc.n	800c302 <I2C_WaitOnFlagUntilTimeout+0x44>
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d122      	bne.n	800c348 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	699a      	ldr	r2, [r3, #24]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	4013      	ands	r3, r2
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	429a      	cmp	r2, r3
 800c310:	bf0c      	ite	eq
 800c312:	2301      	moveq	r3, #1
 800c314:	2300      	movne	r3, #0
 800c316:	b2db      	uxtb	r3, r3
 800c318:	461a      	mov	r2, r3
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d113      	bne.n	800c348 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c324:	f043 0220 	orr.w	r2, r3, #32
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2220      	movs	r2, #32
 800c330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e00f      	b.n	800c368 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	699a      	ldr	r2, [r3, #24]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	4013      	ands	r3, r2
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	429a      	cmp	r2, r3
 800c356:	bf0c      	ite	eq
 800c358:	2301      	moveq	r3, #1
 800c35a:	2300      	movne	r3, #0
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	461a      	mov	r2, r3
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	429a      	cmp	r2, r3
 800c364:	d0b4      	beq.n	800c2d0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c37c:	e033      	b.n	800c3e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f000 f90a 	bl	800c59c <I2C_IsErrorOccurred>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e031      	b.n	800c3f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c398:	d025      	beq.n	800c3e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c39a:	f7fc feb7 	bl	800910c <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d302      	bcc.n	800c3b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d11a      	bne.n	800c3e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	f003 0302 	and.w	r3, r3, #2
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d013      	beq.n	800c3e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c2:	f043 0220 	orr.w	r2, r3, #32
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e007      	b.n	800c3f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d1c4      	bne.n	800c37e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c40a:	e02f      	b.n	800c46c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f000 f8c3 	bl	800c59c <I2C_IsErrorOccurred>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e02d      	b.n	800c47c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c420:	f7fc fe74 	bl	800910c <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d302      	bcc.n	800c436 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d11a      	bne.n	800c46c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	f003 0320 	and.w	r3, r3, #32
 800c440:	2b20      	cmp	r3, #32
 800c442:	d013      	beq.n	800c46c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c448:	f043 0220 	orr.w	r2, r3, #32
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2220      	movs	r2, #32
 800c454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e007      	b.n	800c47c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	f003 0320 	and.w	r3, r3, #32
 800c476:	2b20      	cmp	r3, #32
 800c478:	d1c8      	bne.n	800c40c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c494:	e071      	b.n	800c57a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f87e 	bl	800c59c <I2C_IsErrorOccurred>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	f003 0320 	and.w	r3, r3, #32
 800c4b4:	2b20      	cmp	r3, #32
 800c4b6:	d13b      	bne.n	800c530 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d138      	bne.n	800c530 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	d105      	bne.n	800c4d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	f003 0310 	and.w	r3, r3, #16
 800c4e2:	2b10      	cmp	r3, #16
 800c4e4:	d121      	bne.n	800c52a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2210      	movs	r2, #16
 800c4ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2204      	movs	r2, #4
 800c4f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6859      	ldr	r1, [r3, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	4b24      	ldr	r3, [pc, #144]	@ (800c598 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c508:	400b      	ands	r3, r1
 800c50a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c524:	2301      	movs	r3, #1
 800c526:	75fb      	strb	r3, [r7, #23]
 800c528:	e002      	b.n	800c530 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800c530:	f7fc fdec 	bl	800910c <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d302      	bcc.n	800c546 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d119      	bne.n	800c57a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d116      	bne.n	800c57a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	f003 0304 	and.w	r3, r3, #4
 800c556:	2b04      	cmp	r3, #4
 800c558:	d00f      	beq.n	800c57a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c55e:	f043 0220 	orr.w	r2, r3, #32
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2220      	movs	r2, #32
 800c56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b04      	cmp	r3, #4
 800c586:	d002      	beq.n	800c58e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d083      	beq.n	800c496 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	fe00e800 	.word	0xfe00e800

0800c59c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	@ 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	699b      	ldr	r3, [r3, #24]
 800c5b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	f003 0310 	and.w	r3, r3, #16
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d068      	beq.n	800c69a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2210      	movs	r2, #16
 800c5ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c5d0:	e049      	b.n	800c666 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d8:	d045      	beq.n	800c666 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c5da:	f7fc fd97 	bl	800910c <HAL_GetTick>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d302      	bcc.n	800c5f0 <I2C_IsErrorOccurred+0x54>
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d13a      	bne.n	800c666 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c602:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c60e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c612:	d121      	bne.n	800c658 <I2C_IsErrorOccurred+0xbc>
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c61a:	d01d      	beq.n	800c658 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c61c:	7cfb      	ldrb	r3, [r7, #19]
 800c61e:	2b20      	cmp	r3, #32
 800c620:	d01a      	beq.n	800c658 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c630:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c632:	f7fc fd6b 	bl	800910c <HAL_GetTick>
 800c636:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c638:	e00e      	b.n	800c658 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c63a:	f7fc fd67 	bl	800910c <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	2b19      	cmp	r3, #25
 800c646:	d907      	bls.n	800c658 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	f043 0320 	orr.w	r3, r3, #32
 800c64e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c656:	e006      	b.n	800c666 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	f003 0320 	and.w	r3, r3, #32
 800c662:	2b20      	cmp	r3, #32
 800c664:	d1e9      	bne.n	800c63a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	f003 0320 	and.w	r3, r3, #32
 800c670:	2b20      	cmp	r3, #32
 800c672:	d003      	beq.n	800c67c <I2C_IsErrorOccurred+0xe0>
 800c674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0aa      	beq.n	800c5d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c680:	2b00      	cmp	r3, #0
 800c682:	d103      	bne.n	800c68c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2220      	movs	r2, #32
 800c68a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	f043 0304 	orr.w	r3, r3, #4
 800c692:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00b      	beq.n	800c6c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00b      	beq.n	800c6e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c6de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00b      	beq.n	800c708 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	f043 0302 	orr.w	r3, r3, #2
 800c6f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c700:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01c      	beq.n	800c74a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f7ff fd92 	bl	800c23a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	6859      	ldr	r1, [r3, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <I2C_IsErrorOccurred+0x1bc>)
 800c722:	400b      	ands	r3, r1
 800c724:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	431a      	orrs	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2220      	movs	r2, #32
 800c736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c74a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3728      	adds	r7, #40	@ 0x28
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	fe00e800 	.word	0xfe00e800

0800c75c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	607b      	str	r3, [r7, #4]
 800c766:	460b      	mov	r3, r1
 800c768:	817b      	strh	r3, [r7, #10]
 800c76a:	4613      	mov	r3, r2
 800c76c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c76e:	897b      	ldrh	r3, [r7, #10]
 800c770:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c774:	7a7b      	ldrb	r3, [r7, #9]
 800c776:	041b      	lsls	r3, r3, #16
 800c778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c77c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	4313      	orrs	r3, r2
 800c786:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c78a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	685a      	ldr	r2, [r3, #4]
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	0d5b      	lsrs	r3, r3, #21
 800c796:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c79a:	4b08      	ldr	r3, [pc, #32]	@ (800c7bc <I2C_TransferConfig+0x60>)
 800c79c:	430b      	orrs	r3, r1
 800c79e:	43db      	mvns	r3, r3
 800c7a0:	ea02 0103 	and.w	r1, r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c7ae:	bf00      	nop
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	03ff63ff 	.word	0x03ff63ff

0800c7c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c7d0:	887b      	ldrh	r3, [r7, #2]
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00f      	beq.n	800c7fa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800c7e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c7ee:	2b28      	cmp	r3, #40	@ 0x28
 800c7f0:	d003      	beq.n	800c7fa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c7f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c7fa:	887b      	ldrh	r3, [r7, #2]
 800c7fc:	f003 0302 	and.w	r3, r3, #2
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00f      	beq.n	800c824 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800c80a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c818:	2b28      	cmp	r3, #40	@ 0x28
 800c81a:	d003      	beq.n	800c824 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c822:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	da03      	bge.n	800c834 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800c832:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c834:	887b      	ldrh	r3, [r7, #2]
 800c836:	2b10      	cmp	r3, #16
 800c838:	d103      	bne.n	800c842 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800c840:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c842:	887b      	ldrh	r3, [r7, #2]
 800c844:	2b20      	cmp	r3, #32
 800c846:	d103      	bne.n	800c850 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f043 0320 	orr.w	r3, r3, #32
 800c84e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c850:	887b      	ldrh	r3, [r7, #2]
 800c852:	2b40      	cmp	r3, #64	@ 0x40
 800c854:	d103      	bne.n	800c85e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c85c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6819      	ldr	r1, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	43da      	mvns	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	400a      	ands	r2, r1
 800c86e:	601a      	str	r2, [r3, #0]
}
 800c870:	bf00      	nop
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b20      	cmp	r3, #32
 800c890:	d138      	bne.n	800c904 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d101      	bne.n	800c8a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c89c:	2302      	movs	r3, #2
 800c89e:	e032      	b.n	800c906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2224      	movs	r2, #36	@ 0x24
 800c8ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f022 0201 	bic.w	r2, r2, #1
 800c8be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c8ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6819      	ldr	r1, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	430a      	orrs	r2, r1
 800c8de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f042 0201 	orr.w	r2, r2, #1
 800c8ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2220      	movs	r2, #32
 800c8f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	e000      	b.n	800c906 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c904:	2302      	movs	r3, #2
  }
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b20      	cmp	r3, #32
 800c926:	d139      	bne.n	800c99c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c932:	2302      	movs	r3, #2
 800c934:	e033      	b.n	800c99e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2224      	movs	r2, #36	@ 0x24
 800c942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f022 0201 	bic.w	r2, r2, #1
 800c954:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c964:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	021b      	lsls	r3, r3, #8
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f042 0201 	orr.w	r2, r2, #1
 800c986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2220      	movs	r2, #32
 800c98c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	e000      	b.n	800c99e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c99c:	2302      	movs	r3, #2
  }
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e0c0      	b.n	800cb3e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d106      	bne.n	800c9d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f008 fc8f 	bl	80152f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2203      	movs	r2, #3
 800c9da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f004 fc46 	bl	8011274 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]
 800c9ec:	e03e      	b.n	800ca6c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c9ee:	7bfa      	ldrb	r2, [r7, #15]
 800c9f0:	6879      	ldr	r1, [r7, #4]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	440b      	add	r3, r1
 800c9fc:	3311      	adds	r3, #17
 800c9fe:	2201      	movs	r2, #1
 800ca00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ca02:	7bfa      	ldrb	r2, [r7, #15]
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	440b      	add	r3, r1
 800ca10:	3310      	adds	r3, #16
 800ca12:	7bfa      	ldrb	r2, [r7, #15]
 800ca14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca16:	7bfa      	ldrb	r2, [r7, #15]
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	440b      	add	r3, r1
 800ca24:	3313      	adds	r3, #19
 800ca26:	2200      	movs	r2, #0
 800ca28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ca2a:	7bfa      	ldrb	r2, [r7, #15]
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	440b      	add	r3, r1
 800ca38:	3320      	adds	r3, #32
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ca3e:	7bfa      	ldrb	r2, [r7, #15]
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	440b      	add	r3, r1
 800ca4c:	3324      	adds	r3, #36	@ 0x24
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	4613      	mov	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	440b      	add	r3, r1
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	791b      	ldrb	r3, [r3, #4]
 800ca70:	7bfa      	ldrb	r2, [r7, #15]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d3bb      	bcc.n	800c9ee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
 800ca7a:	e044      	b.n	800cb06 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ca7c:	7bfa      	ldrb	r2, [r7, #15]
 800ca7e:	6879      	ldr	r1, [r7, #4]
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	440b      	add	r3, r1
 800ca8a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800ca8e:	2200      	movs	r2, #0
 800ca90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ca92:	7bfa      	ldrb	r2, [r7, #15]
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	4613      	mov	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	440b      	add	r3, r1
 800caa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800caa4:	7bfa      	ldrb	r2, [r7, #15]
 800caa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800caa8:	7bfa      	ldrb	r2, [r7, #15]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	440b      	add	r3, r1
 800cab6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800caba:	2200      	movs	r2, #0
 800cabc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cabe:	7bfa      	ldrb	r2, [r7, #15]
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800cad0:	2200      	movs	r2, #0
 800cad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	440b      	add	r3, r1
 800cae2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cae6:	2200      	movs	r2, #0
 800cae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800caea:	7bfa      	ldrb	r2, [r7, #15]
 800caec:	6879      	ldr	r1, [r7, #4]
 800caee:	4613      	mov	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4413      	add	r3, r2
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	440b      	add	r3, r1
 800caf8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	3301      	adds	r3, #1
 800cb04:	73fb      	strb	r3, [r7, #15]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	791b      	ldrb	r3, [r3, #4]
 800cb0a:	7bfa      	ldrb	r2, [r7, #15]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d3b5      	bcc.n	800ca7c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3304      	adds	r3, #4
 800cb18:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cb1c:	f004 fbc5 	bl	80112aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	7a9b      	ldrb	r3, [r3, #10]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d102      	bne.n	800cb3c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f001 fc0e 	bl	800e358 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b082      	sub	sp, #8
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d101      	bne.n	800cb5c <HAL_PCD_Start+0x16>
 800cb58:	2302      	movs	r3, #2
 800cb5a:	e012      	b.n	800cb82 <HAL_PCD_Start+0x3c>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f004 fb6c 	bl	8011246 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f006 f94a 	bl	8012e0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f006 f94f 	bl	8012e3a <USB_ReadInterrupts>
 800cb9c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fb06 	bl	800d1ba <PCD_EP_ISR_Handler>

    return;
 800cbae:	e110      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d013      	beq.n	800cbe2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbcc:	b292      	uxth	r2, r2
 800cbce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f008 fc23 	bl	801541e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800cbd8:	2100      	movs	r1, #0
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f8fc 	bl	800cdd8 <HAL_PCD_SetAddress>

    return;
 800cbe0:	e0f7      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00c      	beq.n	800cc06 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cbfe:	b292      	uxth	r2, r2
 800cc00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cc04:	e0e5      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00c      	beq.n	800cc2a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cc22:	b292      	uxth	r2, r2
 800cc24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cc28:	e0d3      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d034      	beq.n	800cc9e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 0204 	bic.w	r2, r2, #4
 800cc46:	b292      	uxth	r2, r2
 800cc48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f022 0208 	bic.w	r2, r2, #8
 800cc5e:	b292      	uxth	r2, r2
 800cc60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d107      	bne.n	800cc7e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cc76:	2100      	movs	r1, #0
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f008 fdc5 	bl	8015808 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f008 fc06 	bl	8015490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cc96:	b292      	uxth	r2, r2
 800cc98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cc9c:	e099      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d027      	beq.n	800ccf8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f042 0208 	orr.w	r2, r2, #8
 800ccba:	b292      	uxth	r2, r2
 800ccbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ccd2:	b292      	uxth	r2, r2
 800ccd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f042 0204 	orr.w	r2, r2, #4
 800ccea:	b292      	uxth	r2, r2
 800ccec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f008 fbb3 	bl	801545c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800ccf6:	e06c      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d040      	beq.n	800cd84 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd14:	b292      	uxth	r2, r2
 800cd16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d12b      	bne.n	800cd7c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f042 0204 	orr.w	r2, r2, #4
 800cd36:	b292      	uxth	r2, r2
 800cd38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f042 0208 	orr.w	r2, r2, #8
 800cd4e:	b292      	uxth	r2, r2
 800cd50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	089b      	lsrs	r3, r3, #2
 800cd68:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cd72:	2101      	movs	r1, #1
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f008 fd47 	bl	8015808 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800cd7a:	e02a      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f008 fb6d 	bl	801545c <HAL_PCD_SuspendCallback>
    return;
 800cd82:	e026      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00f      	beq.n	800cdae <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cda0:	b292      	uxth	r2, r2
 800cda2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f008 fb2b 	bl	8015402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800cdac:	e011      	b.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00c      	beq.n	800cdd2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdca:	b292      	uxth	r2, r2
 800cdcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cdd0:	bf00      	nop
  }
}
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d101      	bne.n	800cdf2 <HAL_PCD_SetAddress+0x1a>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	e012      	b.n	800ce18 <HAL_PCD_SetAddress+0x40>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	78fa      	ldrb	r2, [r7, #3]
 800cdfe:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	78fa      	ldrb	r2, [r7, #3]
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f005 ffeb 	bl	8012de4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	4608      	mov	r0, r1
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4603      	mov	r3, r0
 800ce30:	70fb      	strb	r3, [r7, #3]
 800ce32:	460b      	mov	r3, r1
 800ce34:	803b      	strh	r3, [r7, #0]
 800ce36:	4613      	mov	r3, r2
 800ce38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da0e      	bge.n	800ce64 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce46:	78fb      	ldrb	r3, [r7, #3]
 800ce48:	f003 0207 	and.w	r2, r3, #7
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4413      	add	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	3310      	adds	r3, #16
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	4413      	add	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	705a      	strb	r2, [r3, #1]
 800ce62:	e00e      	b.n	800ce82 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	f003 0207 	and.w	r2, r3, #7
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4413      	add	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	f003 0307 	and.w	r3, r3, #7
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ce8e:	883b      	ldrh	r3, [r7, #0]
 800ce90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	78ba      	ldrb	r2, [r7, #2]
 800ce9c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ce9e:	78bb      	ldrb	r3, [r7, #2]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d102      	bne.n	800ceaa <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d101      	bne.n	800ceb8 <HAL_PCD_EP_Open+0x98>
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	e00e      	b.n	800ced6 <HAL_PCD_EP_Open+0xb6>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68f9      	ldr	r1, [r7, #12]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f004 fa0e 	bl	80112e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800ced4:	7afb      	ldrb	r3, [r7, #11]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b084      	sub	sp, #16
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ceea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	da0e      	bge.n	800cf10 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cef2:	78fb      	ldrb	r3, [r7, #3]
 800cef4:	f003 0207 	and.w	r2, r3, #7
 800cef8:	4613      	mov	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	3310      	adds	r3, #16
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	4413      	add	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	705a      	strb	r2, [r3, #1]
 800cf0e:	e00e      	b.n	800cf2e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	f003 0207 	and.w	r2, r3, #7
 800cf16:	4613      	mov	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	4413      	add	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	f003 0307 	and.w	r3, r3, #7
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d101      	bne.n	800cf48 <HAL_PCD_EP_Close+0x6a>
 800cf44:	2302      	movs	r3, #2
 800cf46:	e00e      	b.n	800cf66 <HAL_PCD_EP_Close+0x88>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68f9      	ldr	r1, [r7, #12]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f004 feae 	bl	8011cb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b086      	sub	sp, #24
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cf7e:	7afb      	ldrb	r3, [r7, #11]
 800cf80:	f003 0207 	and.w	r2, r3, #7
 800cf84:	4613      	mov	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	4413      	add	r3, r2
 800cf94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfae:	7afb      	ldrb	r3, [r7, #11]
 800cfb0:	f003 0307 	and.w	r3, r3, #7
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6979      	ldr	r1, [r7, #20]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f005 f866 	bl	8012092 <USB_EPStartXfer>

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	f003 0207 	and.w	r2, r3, #7
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	4413      	add	r3, r2
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	440b      	add	r3, r1
 800cfee:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800cff2:	681b      	ldr	r3, [r3, #0]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	607a      	str	r2, [r7, #4]
 800d00a:	603b      	str	r3, [r7, #0]
 800d00c:	460b      	mov	r3, r1
 800d00e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d010:	7afb      	ldrb	r3, [r7, #11]
 800d012:	f003 0207 	and.w	r2, r3, #7
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	3310      	adds	r3, #16
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2200      	movs	r2, #0
 800d044:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2201      	movs	r2, #1
 800d04a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d04c:	7afb      	ldrb	r3, [r7, #11]
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	b2da      	uxtb	r2, r3
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6979      	ldr	r1, [r7, #20]
 800d05e:	4618      	mov	r0, r3
 800d060:	f005 f817 	bl	8012092 <USB_EPStartXfer>

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	460b      	mov	r3, r1
 800d078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d07a:	78fb      	ldrb	r3, [r7, #3]
 800d07c:	f003 0307 	and.w	r3, r3, #7
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	7912      	ldrb	r2, [r2, #4]
 800d084:	4293      	cmp	r3, r2
 800d086:	d901      	bls.n	800d08c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e03e      	b.n	800d10a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d08c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d090:	2b00      	cmp	r3, #0
 800d092:	da0e      	bge.n	800d0b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d094:	78fb      	ldrb	r3, [r7, #3]
 800d096:	f003 0207 	and.w	r2, r3, #7
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	00db      	lsls	r3, r3, #3
 800d0a2:	3310      	adds	r3, #16
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	705a      	strb	r2, [r3, #1]
 800d0b0:	e00c      	b.n	800d0cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d0b2:	78fa      	ldrb	r2, [r7, #3]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	f003 0307 	and.w	r3, r3, #7
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d101      	bne.n	800d0ec <HAL_PCD_EP_SetStall+0x7e>
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	e00e      	b.n	800d10a <HAL_PCD_EP_SetStall+0x9c>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68f9      	ldr	r1, [r7, #12]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f005 fd78 	bl	8012bf0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	f003 030f 	and.w	r3, r3, #15
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	7912      	ldrb	r2, [r2, #4]
 800d128:	4293      	cmp	r3, r2
 800d12a:	d901      	bls.n	800d130 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d12c:	2301      	movs	r3, #1
 800d12e:	e040      	b.n	800d1b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d134:	2b00      	cmp	r3, #0
 800d136:	da0e      	bge.n	800d156 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d138:	78fb      	ldrb	r3, [r7, #3]
 800d13a:	f003 0207 	and.w	r2, r3, #7
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	3310      	adds	r3, #16
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	4413      	add	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	705a      	strb	r2, [r3, #1]
 800d154:	e00e      	b.n	800d174 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	f003 0207 	and.w	r2, r3, #7
 800d15c:	4613      	mov	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	4413      	add	r3, r2
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	4413      	add	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	f003 0307 	and.w	r3, r3, #7
 800d180:	b2da      	uxtb	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d101      	bne.n	800d194 <HAL_PCD_EP_ClrStall+0x82>
 800d190:	2302      	movs	r3, #2
 800d192:	e00e      	b.n	800d1b2 <HAL_PCD_EP_ClrStall+0xa0>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68f9      	ldr	r1, [r7, #12]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f005 fd75 	bl	8012c92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b092      	sub	sp, #72	@ 0x48
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d1c2:	e333      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d1cc:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d1ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 030f 	and.w	r3, r3, #15
 800d1d6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800d1da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f040 8108 	bne.w	800d3f4 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d1e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d1e6:	f003 0310 	and.w	r3, r3, #16
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d14c      	bne.n	800d288 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800d1fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1fe:	813b      	strh	r3, [r7, #8]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	893b      	ldrh	r3, [r7, #8]
 800d206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d20a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d20e:	b29b      	uxth	r3, r3
 800d210:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3310      	adds	r3, #16
 800d216:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d220:	b29b      	uxth	r3, r3
 800d222:	461a      	mov	r2, r3
 800d224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	00db      	lsls	r3, r3, #3
 800d22a:	4413      	add	r3, r2
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	6812      	ldr	r2, [r2, #0]
 800d230:	4413      	add	r3, r2
 800d232:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d23c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d23e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d242:	695a      	ldr	r2, [r3, #20]
 800d244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d246:	69db      	ldr	r3, [r3, #28]
 800d248:	441a      	add	r2, r3
 800d24a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d24c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d24e:	2100      	movs	r1, #0
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f008 f8bc 	bl	80153ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7b1b      	ldrb	r3, [r3, #12]
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 82e5 	beq.w	800d82c <PCD_EP_ISR_Handler+0x672>
 800d262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	2b00      	cmp	r3, #0
 800d268:	f040 82e0 	bne.w	800d82c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	7b1b      	ldrb	r3, [r3, #12]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d276:	b2da      	uxtb	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	731a      	strb	r2, [r3, #12]
 800d286:	e2d1      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d28e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d298:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d29a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d032      	beq.n	800d308 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	4413      	add	r3, r2
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6812      	ldr	r2, [r2, #0]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6818      	ldr	r0, [r3, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800d2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d2d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	f005 fdff 	bl	8012ee0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	817b      	strh	r3, [r7, #10]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	897a      	ldrh	r2, [r7, #10]
 800d2f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d2fc:	b292      	uxth	r2, r2
 800d2fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f008 f837 	bl	8015374 <HAL_PCD_SetupStageCallback>
 800d306:	e291      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d308:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f280 828d 	bge.w	800d82c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	b29a      	uxth	r2, r3
 800d31a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800d31e:	4013      	ands	r3, r2
 800d320:	81fb      	strh	r3, [r7, #14]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	89fa      	ldrh	r2, [r7, #14]
 800d328:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d32c:	b292      	uxth	r2, r2
 800d32e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d338:	b29b      	uxth	r3, r3
 800d33a:	461a      	mov	r2, r3
 800d33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	4413      	add	r3, r2
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	6812      	ldr	r2, [r2, #0]
 800d348:	4413      	add	r3, r2
 800d34a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d356:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d019      	beq.n	800d394 <PCD_EP_ISR_Handler+0x1da>
 800d360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d015      	beq.n	800d394 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6818      	ldr	r0, [r3, #0]
 800d36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d36e:	6959      	ldr	r1, [r3, #20]
 800d370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d372:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d376:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d378:	b29b      	uxth	r3, r3
 800d37a:	f005 fdb1 	bl	8012ee0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d380:	695a      	ldr	r2, [r3, #20]
 800d382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	441a      	add	r2, r3
 800d388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d38a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f008 f802 	bl	8015398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d39c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d39e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f040 8242 	bne.w	800d82c <PCD_EP_ISR_Handler+0x672>
 800d3a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d3aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d3ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d3b2:	f000 823b 	beq.w	800d82c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3c6:	81bb      	strh	r3, [r7, #12]
 800d3c8:	89bb      	ldrh	r3, [r7, #12]
 800d3ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d3ce:	81bb      	strh	r3, [r7, #12]
 800d3d0:	89bb      	ldrh	r3, [r7, #12]
 800d3d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3d6:	81bb      	strh	r3, [r7, #12]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	89bb      	ldrh	r3, [r7, #12]
 800d3de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	8013      	strh	r3, [r2, #0]
 800d3f2:	e21b      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d406:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f280 80f1 	bge.w	800d5f2 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	461a      	mov	r2, r3
 800d416:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800d426:	4013      	ands	r3, r2
 800d428:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	461a      	mov	r2, r3
 800d430:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d43a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d43e:	b292      	uxth	r2, r2
 800d440:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800d442:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d446:	4613      	mov	r3, r2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	4413      	add	r3, r2
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	4413      	add	r3, r2
 800d456:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800d458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d45a:	7b1b      	ldrb	r3, [r3, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d123      	bne.n	800d4a8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d468:	b29b      	uxth	r3, r3
 800d46a:	461a      	mov	r2, r3
 800d46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	4413      	add	r3, r2
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	6812      	ldr	r2, [r2, #0]
 800d478:	4413      	add	r3, r2
 800d47a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d484:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800d488:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 808b 	beq.w	800d5a8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6818      	ldr	r0, [r3, #0]
 800d496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d498:	6959      	ldr	r1, [r3, #20]
 800d49a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d49c:	88da      	ldrh	r2, [r3, #6]
 800d49e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d4a2:	f005 fd1d 	bl	8012ee0 <USB_ReadPMA>
 800d4a6:	e07f      	b.n	800d5a8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800d4a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4aa:	78db      	ldrb	r3, [r3, #3]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d109      	bne.n	800d4c4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800d4b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f9c6 	bl	800d848 <HAL_PCD_EP_DB_Receive>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d4c2:	e071      	b.n	800d5a8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4de:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	441a      	add	r2, r3
 800d4ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d500:	b29b      	uxth	r3, r3
 800d502:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	881b      	ldrh	r3, [r3, #0]
 800d514:	b29b      	uxth	r3, r3
 800d516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d022      	beq.n	800d564 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d526:	b29b      	uxth	r3, r3
 800d528:	461a      	mov	r2, r3
 800d52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	4413      	add	r3, r2
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	6812      	ldr	r2, [r2, #0]
 800d536:	4413      	add	r3, r2
 800d538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d542:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800d546:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d02c      	beq.n	800d5a8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6818      	ldr	r0, [r3, #0]
 800d552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d554:	6959      	ldr	r1, [r3, #20]
 800d556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d558:	891a      	ldrh	r2, [r3, #8]
 800d55a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d55e:	f005 fcbf 	bl	8012ee0 <USB_ReadPMA>
 800d562:	e021      	b.n	800d5a8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	4413      	add	r3, r2
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	6812      	ldr	r2, [r2, #0]
 800d57c:	4413      	add	r3, r2
 800d57e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d582:	881b      	ldrh	r3, [r3, #0]
 800d584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d588:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800d58c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d590:	2b00      	cmp	r3, #0
 800d592:	d009      	beq.n	800d5a8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d59a:	6959      	ldr	r1, [r3, #20]
 800d59c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d59e:	895a      	ldrh	r2, [r3, #10]
 800d5a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d5a4:	f005 fc9c 	bl	8012ee0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5aa:	69da      	ldr	r2, [r3, #28]
 800d5ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d5b0:	441a      	add	r2, r3
 800d5b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d5b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5b8:	695a      	ldr	r2, [r3, #20]
 800d5ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d5be:	441a      	add	r2, r3
 800d5c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d5c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d005      	beq.n	800d5d8 <PCD_EP_ISR_Handler+0x41e>
 800d5cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d206      	bcs.n	800d5e6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800d5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f007 feda 	bl	8015398 <HAL_PCD_DataOutStageCallback>
 800d5e4:	e005      	b.n	800d5f2 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f004 fd50 	bl	8012092 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d5f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 8117 	beq.w	800d82c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800d5fe:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d602:	4613      	mov	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	3310      	adds	r3, #16
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	4413      	add	r3, r2
 800d610:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	b29b      	uxth	r3, r3
 800d624:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800d628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d62c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	441a      	add	r2, r3
 800d63c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d63e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d646:	b29b      	uxth	r3, r3
 800d648:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800d64a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d64c:	78db      	ldrb	r3, [r3, #3]
 800d64e:	2b01      	cmp	r3, #1
 800d650:	f040 80a1 	bne.w	800d796 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800d654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d656:	2200      	movs	r2, #0
 800d658:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800d65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d65c:	7b1b      	ldrb	r3, [r3, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 8092 	beq.w	800d788 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d664:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d046      	beq.n	800d6fc <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d66e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d670:	785b      	ldrb	r3, [r3, #1]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d126      	bne.n	800d6c4 <PCD_EP_ISR_Handler+0x50a>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	617b      	str	r3, [r7, #20]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d684:	b29b      	uxth	r3, r3
 800d686:	461a      	mov	r2, r3
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	4413      	add	r3, r2
 800d68c:	617b      	str	r3, [r7, #20]
 800d68e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	00da      	lsls	r2, r3, #3
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	4413      	add	r3, r2
 800d698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d69c:	613b      	str	r3, [r7, #16]
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	801a      	strh	r2, [r3, #0]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	801a      	strh	r2, [r3, #0]
 800d6c2:	e061      	b.n	800d788 <PCD_EP_ISR_Handler+0x5ce>
 800d6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6c6:	785b      	ldrb	r3, [r3, #1]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d15d      	bne.n	800d788 <PCD_EP_ISR_Handler+0x5ce>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	61fb      	str	r3, [r7, #28]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	461a      	mov	r2, r3
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	61fb      	str	r3, [r7, #28]
 800d6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	00da      	lsls	r2, r3, #3
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d6f2:	61bb      	str	r3, [r7, #24]
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	801a      	strh	r2, [r3, #0]
 800d6fa:	e045      	b.n	800d788 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d126      	bne.n	800d758 <PCD_EP_ISR_Handler+0x59e>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d718:	b29b      	uxth	r3, r3
 800d71a:	461a      	mov	r2, r3
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	4413      	add	r3, r2
 800d720:	627b      	str	r3, [r7, #36]	@ 0x24
 800d722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	00da      	lsls	r2, r3, #3
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	4413      	add	r3, r2
 800d72c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d730:	623b      	str	r3, [r7, #32]
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	b29b      	uxth	r3, r3
 800d738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	801a      	strh	r2, [r3, #0]
 800d742:	6a3b      	ldr	r3, [r7, #32]
 800d744:	881b      	ldrh	r3, [r3, #0]
 800d746:	b29b      	uxth	r3, r3
 800d748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d750:	b29a      	uxth	r2, r3
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	801a      	strh	r2, [r3, #0]
 800d756:	e017      	b.n	800d788 <PCD_EP_ISR_Handler+0x5ce>
 800d758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d75a:	785b      	ldrb	r3, [r3, #1]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d113      	bne.n	800d788 <PCD_EP_ISR_Handler+0x5ce>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d768:	b29b      	uxth	r3, r3
 800d76a:	461a      	mov	r2, r3
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	4413      	add	r3, r2
 800d770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	00da      	lsls	r2, r3, #3
 800d778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77a:	4413      	add	r3, r2
 800d77c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d780:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d784:	2200      	movs	r2, #0
 800d786:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4619      	mov	r1, r3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f007 fe1d 	bl	80153ce <HAL_PCD_DataInStageCallback>
 800d794:	e04a      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800d796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d13f      	bne.n	800d820 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7c4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800d7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c8:	699a      	ldr	r2, [r3, #24]
 800d7ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d906      	bls.n	800d7de <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800d7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7d2:	699a      	ldr	r2, [r3, #24]
 800d7d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d7d6:	1ad2      	subs	r2, r2, r3
 800d7d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7da:	619a      	str	r2, [r3, #24]
 800d7dc:	e002      	b.n	800d7e4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800d7de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800d7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7e6:	699b      	ldr	r3, [r3, #24]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d106      	bne.n	800d7fa <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f007 fdeb 	bl	80153ce <HAL_PCD_DataInStageCallback>
 800d7f8:	e018      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800d7fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7fc:	695a      	ldr	r2, [r3, #20]
 800d7fe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d800:	441a      	add	r2, r3
 800d802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d804:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800d806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d808:	69da      	ldr	r2, [r3, #28]
 800d80a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d80c:	441a      	add	r2, r3
 800d80e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d810:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d818:	4618      	mov	r0, r3
 800d81a:	f004 fc3a 	bl	8012092 <USB_EPStartXfer>
 800d81e:	e005      	b.n	800d82c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800d820:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d822:	461a      	mov	r2, r3
 800d824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f917 	bl	800da5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d834:	b29b      	uxth	r3, r3
 800d836:	b21b      	sxth	r3, r3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f6ff acc3 	blt.w	800d1c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3748      	adds	r7, #72	@ 0x48
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d856:	88fb      	ldrh	r3, [r7, #6]
 800d858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d07c      	beq.n	800d95a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d868:	b29b      	uxth	r3, r3
 800d86a:	461a      	mov	r2, r3
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	00db      	lsls	r3, r3, #3
 800d872:	4413      	add	r3, r2
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	6812      	ldr	r2, [r2, #0]
 800d878:	4413      	add	r3, r2
 800d87a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d884:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	699a      	ldr	r2, [r3, #24]
 800d88a:	8b7b      	ldrh	r3, [r7, #26]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d306      	bcc.n	800d89e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	699a      	ldr	r2, [r3, #24]
 800d894:	8b7b      	ldrh	r3, [r7, #26]
 800d896:	1ad2      	subs	r2, r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	619a      	str	r2, [r3, #24]
 800d89c:	e002      	b.n	800d8a4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d123      	bne.n	800d8f4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4413      	add	r3, r2
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d8c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8c6:	833b      	strh	r3, [r7, #24]
 800d8c8:	8b3b      	ldrh	r3, [r7, #24]
 800d8ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d8ce:	833b      	strh	r3, [r7, #24]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	441a      	add	r2, r3
 800d8de:	8b3b      	ldrh	r3, [r7, #24]
 800d8e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d01f      	beq.n	800d93e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	b29b      	uxth	r3, r3
 800d910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d918:	82fb      	strh	r3, [r7, #22]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	441a      	add	r2, r3
 800d928:	8afb      	ldrh	r3, [r7, #22]
 800d92a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d92e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d936:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d93e:	8b7b      	ldrh	r3, [r7, #26]
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8085 	beq.w	800da50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6959      	ldr	r1, [r3, #20]
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	891a      	ldrh	r2, [r3, #8]
 800d952:	8b7b      	ldrh	r3, [r7, #26]
 800d954:	f005 fac4 	bl	8012ee0 <USB_ReadPMA>
 800d958:	e07a      	b.n	800da50 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d962:	b29b      	uxth	r3, r3
 800d964:	461a      	mov	r2, r3
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	4413      	add	r3, r2
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	6812      	ldr	r2, [r2, #0]
 800d972:	4413      	add	r3, r2
 800d974:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d97e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	699a      	ldr	r2, [r3, #24]
 800d984:	8b7b      	ldrh	r3, [r7, #26]
 800d986:	429a      	cmp	r2, r3
 800d988:	d306      	bcc.n	800d998 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	699a      	ldr	r2, [r3, #24]
 800d98e:	8b7b      	ldrh	r3, [r7, #26]
 800d990:	1ad2      	subs	r2, r2, r3
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	619a      	str	r2, [r3, #24]
 800d996:	e002      	b.n	800d99e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2200      	movs	r2, #0
 800d99c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d123      	bne.n	800d9ee <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4413      	add	r3, r2
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9c0:	83fb      	strh	r3, [r7, #30]
 800d9c2:	8bfb      	ldrh	r3, [r7, #30]
 800d9c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d9c8:	83fb      	strh	r3, [r7, #30]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	441a      	add	r2, r3
 800d9d8:	8bfb      	ldrh	r3, [r7, #30]
 800d9da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800d9ee:	88fb      	ldrh	r3, [r7, #6]
 800d9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d11f      	bne.n	800da38 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	881b      	ldrh	r3, [r3, #0]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da12:	83bb      	strh	r3, [r7, #28]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	461a      	mov	r2, r3
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	441a      	add	r2, r3
 800da22:	8bbb      	ldrh	r3, [r7, #28]
 800da24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800da34:	b29b      	uxth	r3, r3
 800da36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800da38:	8b7b      	ldrh	r3, [r7, #26]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d008      	beq.n	800da50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6818      	ldr	r0, [r3, #0]
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	6959      	ldr	r1, [r3, #20]
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	895a      	ldrh	r2, [r3, #10]
 800da4a:	8b7b      	ldrh	r3, [r7, #26]
 800da4c:	f005 fa48 	bl	8012ee0 <USB_ReadPMA>
    }
  }

  return count;
 800da50:	8b7b      	ldrh	r3, [r7, #26]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3720      	adds	r7, #32
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b0a6      	sub	sp, #152	@ 0x98
 800da5e:	af00      	add	r7, sp, #0
 800da60:	60f8      	str	r0, [r7, #12]
 800da62:	60b9      	str	r1, [r7, #8]
 800da64:	4613      	mov	r3, r2
 800da66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800da68:	88fb      	ldrh	r3, [r7, #6]
 800da6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f000 81f7 	beq.w	800de62 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	461a      	mov	r2, r3
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	4413      	add	r3, r2
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	6812      	ldr	r2, [r2, #0]
 800da8c:	4413      	add	r3, r2
 800da8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da92:	881b      	ldrh	r3, [r3, #0]
 800da94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da98:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	699a      	ldr	r2, [r3, #24]
 800daa0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d907      	bls.n	800dab8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	699a      	ldr	r2, [r3, #24]
 800daac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dab0:	1ad2      	subs	r2, r2, r3
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	619a      	str	r2, [r3, #24]
 800dab6:	e002      	b.n	800dabe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	2200      	movs	r2, #0
 800dabc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f040 80e1 	bne.w	800dc8a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	785b      	ldrb	r3, [r3, #1]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d126      	bne.n	800db1e <HAL_PCD_EP_DB_Transmit+0xc4>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	633b      	str	r3, [r7, #48]	@ 0x30
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dade:	b29b      	uxth	r3, r3
 800dae0:	461a      	mov	r2, r3
 800dae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae4:	4413      	add	r3, r2
 800dae6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	00da      	lsls	r2, r3, #3
 800daee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf0:	4413      	add	r3, r2
 800daf2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800daf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800daf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db02:	b29a      	uxth	r2, r3
 800db04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db06:	801a      	strh	r2, [r3, #0]
 800db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db16:	b29a      	uxth	r2, r3
 800db18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1a:	801a      	strh	r2, [r3, #0]
 800db1c:	e01a      	b.n	800db54 <HAL_PCD_EP_DB_Transmit+0xfa>
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	785b      	ldrb	r3, [r3, #1]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d116      	bne.n	800db54 <HAL_PCD_EP_DB_Transmit+0xfa>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db34:	b29b      	uxth	r3, r3
 800db36:	461a      	mov	r2, r3
 800db38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3a:	4413      	add	r3, r2
 800db3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	00da      	lsls	r2, r3, #3
 800db44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db46:	4413      	add	r3, r2
 800db48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db50:	2200      	movs	r2, #0
 800db52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	785b      	ldrb	r3, [r3, #1]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d126      	bne.n	800dbb0 <HAL_PCD_EP_DB_Transmit+0x156>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	623b      	str	r3, [r7, #32]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db70:	b29b      	uxth	r3, r3
 800db72:	461a      	mov	r2, r3
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	4413      	add	r3, r2
 800db78:	623b      	str	r3, [r7, #32]
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	00da      	lsls	r2, r3, #3
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	4413      	add	r3, r2
 800db84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db88:	61fb      	str	r3, [r7, #28]
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db94:	b29a      	uxth	r2, r3
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	801a      	strh	r2, [r3, #0]
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	881b      	ldrh	r3, [r3, #0]
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	801a      	strh	r2, [r3, #0]
 800dbae:	e017      	b.n	800dbe0 <HAL_PCD_EP_DB_Transmit+0x186>
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d113      	bne.n	800dbe0 <HAL_PCD_EP_DB_Transmit+0x186>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc6:	4413      	add	r3, r2
 800dbc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	00da      	lsls	r2, r3, #3
 800dbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbdc:	2200      	movs	r2, #0
 800dbde:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	78db      	ldrb	r3, [r3, #3]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d123      	bne.n	800dc30 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	461a      	mov	r2, r3
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc02:	837b      	strh	r3, [r7, #26]
 800dc04:	8b7b      	ldrh	r3, [r7, #26]
 800dc06:	f083 0320 	eor.w	r3, r3, #32
 800dc0a:	837b      	strh	r3, [r7, #26]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	461a      	mov	r2, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	441a      	add	r2, r3
 800dc1a:	8b7b      	ldrh	r3, [r7, #26]
 800dc1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	4619      	mov	r1, r3
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f007 fbc9 	bl	80153ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d01f      	beq.n	800dc86 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc60:	833b      	strh	r3, [r7, #24]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	461a      	mov	r2, r3
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	441a      	add	r2, r3
 800dc70:	8b3b      	ldrh	r3, [r7, #24]
 800dc72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	e31f      	b.n	800e2ca <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d021      	beq.n	800dcd8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	881b      	ldrh	r3, [r3, #0]
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	441a      	add	r2, r3
 800dcc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dcc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dcd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	f040 82ca 	bne.w	800e278 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	695a      	ldr	r2, [r3, #20]
 800dce8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dcec:	441a      	add	r2, r3
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	69da      	ldr	r2, [r3, #28]
 800dcf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dcfa:	441a      	add	r2, r3
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	6a1a      	ldr	r2, [r3, #32]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d309      	bcc.n	800dd20 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	6a1a      	ldr	r2, [r3, #32]
 800dd16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd18:	1ad2      	subs	r2, r2, r3
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	621a      	str	r2, [r3, #32]
 800dd1e:	e015      	b.n	800dd4c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d107      	bne.n	800dd38 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800dd28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd2c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800dd36:	e009      	b.n	800dd4c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	785b      	ldrb	r3, [r3, #1]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d15f      	bne.n	800de14 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	461a      	mov	r2, r3
 800dd66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd68:	4413      	add	r3, r2
 800dd6a:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	00da      	lsls	r2, r3, #3
 800dd72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd74:	4413      	add	r3, r2
 800dd76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd8a:	801a      	strh	r2, [r3, #0]
 800dd8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <HAL_PCD_EP_DB_Transmit+0x34e>
 800dd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dda4:	801a      	strh	r2, [r3, #0]
 800dda6:	e051      	b.n	800de4c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800dda8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddac:	d816      	bhi.n	800dddc <HAL_PCD_EP_DB_Transmit+0x382>
 800ddae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddb0:	085b      	lsrs	r3, r3, #1
 800ddb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800ddb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddb6:	f003 0301 	and.w	r3, r3, #1
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <HAL_PCD_EP_DB_Transmit+0x36a>
 800ddbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800ddc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	029b      	lsls	r3, r3, #10
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddd8:	801a      	strh	r2, [r3, #0]
 800ddda:	e037      	b.n	800de4c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800dddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddde:	095b      	lsrs	r3, r3, #5
 800dde0:	653b      	str	r3, [r7, #80]	@ 0x50
 800dde2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dde4:	f003 031f 	and.w	r3, r3, #31
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d102      	bne.n	800ddf2 <HAL_PCD_EP_DB_Transmit+0x398>
 800ddec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	653b      	str	r3, [r7, #80]	@ 0x50
 800ddf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	029b      	lsls	r3, r3, #10
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	4313      	orrs	r3, r2
 800de02:	b29b      	uxth	r3, r3
 800de04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de10:	801a      	strh	r2, [r3, #0]
 800de12:	e01b      	b.n	800de4c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	785b      	ldrb	r3, [r3, #1]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d117      	bne.n	800de4c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	461a      	mov	r2, r3
 800de2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de30:	4413      	add	r3, r2
 800de32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	00da      	lsls	r2, r3, #3
 800de3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de3c:	4413      	add	r3, r2
 800de3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de42:	647b      	str	r3, [r7, #68]	@ 0x44
 800de44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de46:	b29a      	uxth	r2, r3
 800de48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6818      	ldr	r0, [r3, #0]
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	6959      	ldr	r1, [r3, #20]
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	891a      	ldrh	r2, [r3, #8]
 800de58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	f004 fffd 	bl	8012e5a <USB_WritePMA>
 800de60:	e20a      	b.n	800e278 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	461a      	mov	r2, r3
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	4413      	add	r3, r2
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	6812      	ldr	r2, [r2, #0]
 800de7a:	4413      	add	r3, r2
 800de7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de86:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	699a      	ldr	r2, [r3, #24]
 800de8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800de92:	429a      	cmp	r2, r3
 800de94:	d307      	bcc.n	800dea6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	699a      	ldr	r2, [r3, #24]
 800de9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	619a      	str	r2, [r3, #24]
 800dea4:	e002      	b.n	800deac <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2200      	movs	r2, #0
 800deaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f040 80f6 	bne.w	800e0a2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	785b      	ldrb	r3, [r3, #1]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d126      	bne.n	800df0c <HAL_PCD_EP_DB_Transmit+0x4b2>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	677b      	str	r3, [r7, #116]	@ 0x74
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800decc:	b29b      	uxth	r3, r3
 800dece:	461a      	mov	r2, r3
 800ded0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ded2:	4413      	add	r3, r2
 800ded4:	677b      	str	r3, [r7, #116]	@ 0x74
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	00da      	lsls	r2, r3, #3
 800dedc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dede:	4413      	add	r3, r2
 800dee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dee4:	673b      	str	r3, [r7, #112]	@ 0x70
 800dee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	b29b      	uxth	r3, r3
 800deec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800def0:	b29a      	uxth	r2, r3
 800def2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800def4:	801a      	strh	r2, [r3, #0]
 800def6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	b29b      	uxth	r3, r3
 800defc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df04:	b29a      	uxth	r2, r3
 800df06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	e01a      	b.n	800df42 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d116      	bne.n	800df42 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df22:	b29b      	uxth	r3, r3
 800df24:	461a      	mov	r2, r3
 800df26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800df28:	4413      	add	r3, r2
 800df2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	00da      	lsls	r2, r3, #3
 800df32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800df34:	4413      	add	r3, r2
 800df36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df3e:	2200      	movs	r2, #0
 800df40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	785b      	ldrb	r3, [r3, #1]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d12f      	bne.n	800dfb2 <HAL_PCD_EP_DB_Transmit+0x558>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df62:	b29b      	uxth	r3, r3
 800df64:	461a      	mov	r2, r3
 800df66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df6a:	4413      	add	r3, r2
 800df6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	00da      	lsls	r2, r3, #3
 800df76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df7a:	4413      	add	r3, r2
 800df7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df90:	b29a      	uxth	r2, r3
 800df92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df96:	801a      	strh	r2, [r3, #0]
 800df98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df9c:	881b      	ldrh	r3, [r3, #0]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dfae:	801a      	strh	r2, [r3, #0]
 800dfb0:	e01c      	b.n	800dfec <HAL_PCD_EP_DB_Transmit+0x592>
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d118      	bne.n	800dfec <HAL_PCD_EP_DB_Transmit+0x592>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfca:	4413      	add	r3, r2
 800dfcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	00da      	lsls	r2, r3, #3
 800dfd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfda:	4413      	add	r3, r2
 800dfdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dfe0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfe8:	2200      	movs	r2, #0
 800dfea:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	78db      	ldrb	r3, [r3, #3]
 800dff0:	2b02      	cmp	r3, #2
 800dff2:	d127      	bne.n	800e044 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	461a      	mov	r2, r3
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b29b      	uxth	r3, r3
 800e006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e00a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e00e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e012:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e016:	f083 0320 	eor.w	r3, r3, #32
 800e01a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	441a      	add	r2, r3
 800e02c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e03c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e040:	b29b      	uxth	r3, r3
 800e042:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	4619      	mov	r1, r3
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f007 f9bf 	bl	80153ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d121      	bne.n	800e09e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e074:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	461a      	mov	r2, r3
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	441a      	add	r2, r3
 800e086:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e08a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e08e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e113      	b.n	800e2ca <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e0a2:	88fb      	ldrh	r3, [r7, #6]
 800e0a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d121      	bne.n	800e0f0 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0c6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	441a      	add	r2, r3
 800e0d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	f040 80be 	bne.w	800e278 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	695a      	ldr	r2, [r3, #20]
 800e100:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e104:	441a      	add	r2, r3
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	69da      	ldr	r2, [r3, #28]
 800e10e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e112:	441a      	add	r2, r3
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	6a1a      	ldr	r2, [r3, #32]
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	429a      	cmp	r2, r3
 800e122:	d309      	bcc.n	800e138 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	6a1a      	ldr	r2, [r3, #32]
 800e12e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e130:	1ad2      	subs	r2, r2, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	621a      	str	r2, [r3, #32]
 800e136:	e015      	b.n	800e164 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	6a1b      	ldr	r3, [r3, #32]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d107      	bne.n	800e150 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800e140:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e144:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800e14e:	e009      	b.n	800e164 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	6a1b      	ldr	r3, [r3, #32]
 800e154:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	2200      	movs	r2, #0
 800e15a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	785b      	ldrb	r3, [r3, #1]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d15f      	bne.n	800e232 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e180:	b29b      	uxth	r3, r3
 800e182:	461a      	mov	r2, r3
 800e184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e186:	4413      	add	r3, r2
 800e188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	00da      	lsls	r2, r3, #3
 800e190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e192:	4413      	add	r3, r2
 800e194:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e198:	667b      	str	r3, [r7, #100]	@ 0x64
 800e19a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1a8:	801a      	strh	r2, [r3, #0]
 800e1aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <HAL_PCD_EP_DB_Transmit+0x76c>
 800e1b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1b2:	881b      	ldrh	r3, [r3, #0]
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1c2:	801a      	strh	r2, [r3, #0]
 800e1c4:	e04e      	b.n	800e264 <HAL_PCD_EP_DB_Transmit+0x80a>
 800e1c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1ca:	d816      	bhi.n	800e1fa <HAL_PCD_EP_DB_Transmit+0x7a0>
 800e1cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1ce:	085b      	lsrs	r3, r3, #1
 800e1d0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <HAL_PCD_EP_DB_Transmit+0x788>
 800e1dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1de:	3301      	adds	r3, #1
 800e1e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	029b      	lsls	r3, r3, #10
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1f6:	801a      	strh	r2, [r3, #0]
 800e1f8:	e034      	b.n	800e264 <HAL_PCD_EP_DB_Transmit+0x80a>
 800e1fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1fc:	095b      	lsrs	r3, r3, #5
 800e1fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800e200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e202:	f003 031f 	and.w	r3, r3, #31
 800e206:	2b00      	cmp	r3, #0
 800e208:	d102      	bne.n	800e210 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800e20a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e20c:	3b01      	subs	r3, #1
 800e20e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e212:	881b      	ldrh	r3, [r3, #0]
 800e214:	b29a      	uxth	r2, r3
 800e216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e218:	b29b      	uxth	r3, r3
 800e21a:	029b      	lsls	r3, r3, #10
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	4313      	orrs	r3, r2
 800e220:	b29b      	uxth	r3, r3
 800e222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e22e:	801a      	strh	r2, [r3, #0]
 800e230:	e018      	b.n	800e264 <HAL_PCD_EP_DB_Transmit+0x80a>
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	785b      	ldrb	r3, [r3, #1]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d114      	bne.n	800e264 <HAL_PCD_EP_DB_Transmit+0x80a>
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e242:	b29b      	uxth	r3, r3
 800e244:	461a      	mov	r2, r3
 800e246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e248:	4413      	add	r3, r2
 800e24a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	00da      	lsls	r2, r3, #3
 800e252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e254:	4413      	add	r3, r2
 800e256:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e25a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e25c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e25e:	b29a      	uxth	r2, r3
 800e260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e262:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6818      	ldr	r0, [r3, #0]
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	6959      	ldr	r1, [r3, #20]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	895a      	ldrh	r2, [r3, #10]
 800e270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e272:	b29b      	uxth	r3, r3
 800e274:	f004 fdf1 	bl	8012e5a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	461a      	mov	r2, r3
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e28e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e292:	82fb      	strh	r3, [r7, #22]
 800e294:	8afb      	ldrh	r3, [r7, #22]
 800e296:	f083 0310 	eor.w	r3, r3, #16
 800e29a:	82fb      	strh	r3, [r7, #22]
 800e29c:	8afb      	ldrh	r3, [r7, #22]
 800e29e:	f083 0320 	eor.w	r3, r3, #32
 800e2a2:	82fb      	strh	r3, [r7, #22]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	441a      	add	r2, r3
 800e2b2:	8afb      	ldrh	r3, [r7, #22]
 800e2b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3798      	adds	r7, #152	@ 0x98
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b087      	sub	sp, #28
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	607b      	str	r3, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	817b      	strh	r3, [r7, #10]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e2e4:	897b      	ldrh	r3, [r7, #10]
 800e2e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00b      	beq.n	800e308 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2f0:	897b      	ldrh	r3, [r7, #10]
 800e2f2:	f003 0207 	and.w	r2, r3, #7
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	00db      	lsls	r3, r3, #3
 800e2fe:	3310      	adds	r3, #16
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	4413      	add	r3, r2
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	e009      	b.n	800e31c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e308:	897a      	ldrh	r2, [r7, #10]
 800e30a:	4613      	mov	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	4413      	add	r3, r2
 800e31a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e31c:	893b      	ldrh	r3, [r7, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d107      	bne.n	800e332 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2200      	movs	r2, #0
 800e326:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	80da      	strh	r2, [r3, #6]
 800e330:	e00b      	b.n	800e34a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2201      	movs	r2, #1
 800e336:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	0c1b      	lsrs	r3, r3, #16
 800e344:	b29a      	uxth	r2, r3
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	371c      	adds	r7, #28
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2201      	movs	r2, #1
 800e36a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	f043 0301 	orr.w	r3, r3, #1
 800e382:	b29a      	uxth	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e390:	b29b      	uxth	r3, r3
 800e392:	f043 0302 	orr.w	r3, r3, #2
 800e396:	b29a      	uxth	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e3b0:	4b05      	ldr	r3, [pc, #20]	@ (800e3c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a04      	ldr	r2, [pc, #16]	@ (800e3c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e3b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e3ba:	6013      	str	r3, [r2, #0]
}
 800e3bc:	bf00      	nop
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	58000400 	.word	0x58000400

0800e3cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e3d0:	4b04      	ldr	r3, [pc, #16]	@ (800e3e4 <HAL_PWREx_GetVoltageRange+0x18>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	58000400 	.word	0x58000400

0800e3e8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800e3ec:	4b05      	ldr	r3, [pc, #20]	@ (800e404 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	4a04      	ldr	r2, [pc, #16]	@ (800e404 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e3f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e3f6:	6053      	str	r3, [r2, #4]
}
 800e3f8:	bf00      	nop
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	58000400 	.word	0x58000400

0800e408 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800e408:	b480      	push	{r7}
 800e40a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e40c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e41a:	d101      	bne.n	800e420 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e000      	b.n	800e422 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800e42c:	b480      	push	{r7}
 800e42e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e43a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e43e:	6013      	str	r3, [r2, #0]
}
 800e440:	bf00      	nop
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800e44a:	b480      	push	{r7}
 800e44c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e44e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e45c:	6013      	str	r3, [r2, #0]
}
 800e45e:	bf00      	nop
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800e468:	b480      	push	{r7}
 800e46a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e46c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e47a:	d101      	bne.n	800e480 <LL_RCC_HSE_IsReady+0x18>
 800e47c:	2301      	movs	r3, #1
 800e47e:	e000      	b.n	800e482 <LL_RCC_HSE_IsReady+0x1a>
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800e48c:	b480      	push	{r7}
 800e48e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e49a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e49e:	6013      	str	r3, [r2, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e4ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4bc:	6013      	str	r3, [r2, #0]
}
 800e4be:	bf00      	nop
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e4cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4da:	d101      	bne.n	800e4e0 <LL_RCC_HSI_IsReady+0x18>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <LL_RCC_HSI_IsReady+0x1a>
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	061b      	lsls	r3, r3, #24
 800e502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e506:	4313      	orrs	r3, r2
 800e508:	604b      	str	r3, [r1, #4]
}
 800e50a:	bf00      	nop
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800e516:	b480      	push	{r7}
 800e518:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e51a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e51e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e526:	f043 0301 	orr.w	r3, r3, #1
 800e52a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e52e:	bf00      	nop
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800e538:	b480      	push	{r7}
 800e53a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e53c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e544:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e548:	f023 0301 	bic.w	r3, r3, #1
 800e54c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e550:	bf00      	nop
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800e55a:	b480      	push	{r7}
 800e55c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e55e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e566:	f003 0302 	and.w	r3, r3, #2
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d101      	bne.n	800e572 <LL_RCC_HSI48_IsReady+0x18>
 800e56e:	2301      	movs	r3, #1
 800e570:	e000      	b.n	800e574 <LL_RCC_HSI48_IsReady+0x1a>
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800e57e:	b480      	push	{r7}
 800e580:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e58a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e58e:	f043 0301 	orr.w	r3, r3, #1
 800e592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e596:	bf00      	nop
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e5a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e5b0:	f023 0301 	bic.w	r3, r3, #1
 800e5b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e5b8:	bf00      	nop
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800e5c2:	b480      	push	{r7}
 800e5c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e5c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e5d2:	f043 0304 	orr.w	r3, r3, #4
 800e5d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e5da:	bf00      	nop
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr

0800e5e4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e5e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e5f4:	f023 0304 	bic.w	r3, r3, #4
 800e5f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e5fc:	bf00      	nop
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800e606:	b480      	push	{r7}
 800e608:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e60a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	2b02      	cmp	r3, #2
 800e618:	d101      	bne.n	800e61e <LL_RCC_LSE_IsReady+0x18>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e000      	b.n	800e620 <LL_RCC_LSE_IsReady+0x1a>
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800e62a:	b480      	push	{r7}
 800e62c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e62e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e63a:	f043 0301 	orr.w	r3, r3, #1
 800e63e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e642:	bf00      	nop
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800e64c:	b480      	push	{r7}
 800e64e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e658:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e65c:	f023 0301 	bic.w	r3, r3, #1
 800e660:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e664:	bf00      	nop
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800e66e:	b480      	push	{r7}
 800e670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e67a:	f003 0302 	and.w	r3, r3, #2
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d101      	bne.n	800e686 <LL_RCC_LSI1_IsReady+0x18>
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <LL_RCC_LSI1_IsReady+0x1a>
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800e692:	b480      	push	{r7}
 800e694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e69a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e69e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6a2:	f043 0304 	orr.w	r3, r3, #4
 800e6a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e6aa:	bf00      	nop
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e6b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6c4:	f023 0304 	bic.w	r3, r3, #4
 800e6c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e6cc:	bf00      	nop
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e6da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6e2:	f003 0308 	and.w	r3, r3, #8
 800e6e6:	2b08      	cmp	r3, #8
 800e6e8:	d101      	bne.n	800e6ee <LL_RCC_LSI2_IsReady+0x18>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e000      	b.n	800e6f0 <LL_RCC_LSI2_IsReady+0x1a>
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800e6fa:	b480      	push	{r7}
 800e6fc:	b083      	sub	sp, #12
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e70a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	021b      	lsls	r3, r3, #8
 800e712:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e716:	4313      	orrs	r3, r2
 800e718:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e71c:	bf00      	nop
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800e728:	b480      	push	{r7}
 800e72a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e72c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e736:	f043 0301 	orr.w	r3, r3, #1
 800e73a:	6013      	str	r3, [r2, #0]
}
 800e73c:	bf00      	nop
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr

0800e746 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800e746:	b480      	push	{r7}
 800e748:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e754:	f023 0301 	bic.w	r3, r3, #1
 800e758:	6013      	str	r3, [r2, #0]
}
 800e75a:	bf00      	nop
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800e764:	b480      	push	{r7}
 800e766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f003 0302 	and.w	r3, r3, #2
 800e772:	2b02      	cmp	r3, #2
 800e774:	d101      	bne.n	800e77a <LL_RCC_MSI_IsReady+0x16>
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <LL_RCC_MSI_IsReady+0x18>
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800e786:	b480      	push	{r7}
 800e788:	b083      	sub	sp, #12
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e798:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	600b      	str	r3, [r1, #0]
}
 800e7a2:	bf00      	nop
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b083      	sub	sp, #12
 800e7b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e7b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2bb0      	cmp	r3, #176	@ 0xb0
 800e7c4:	d901      	bls.n	800e7ca <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800e7c6:	23b0      	movs	r3, #176	@ 0xb0
 800e7c8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800e7ca:	687b      	ldr	r3, [r7, #4]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e7e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	021b      	lsls	r3, r3, #8
 800e7ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	604b      	str	r3, [r1, #4]
}
 800e7f6:	bf00      	nop
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800e802:	b480      	push	{r7}
 800e804:	b083      	sub	sp, #12
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e80a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f023 0203 	bic.w	r2, r3, #3
 800e814:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	608b      	str	r3, [r1, #8]
}
 800e81e:	bf00      	nop
 800e820:	370c      	adds	r7, #12
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800e82a:	b480      	push	{r7}
 800e82c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e82e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	f003 030c 	and.w	r3, r3, #12
}
 800e838:	4618      	mov	r0, r3
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e84a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e854:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	608b      	str	r3, [r1, #8]
}
 800e85e:	bf00      	nop
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800e86a:	b480      	push	{r7}
 800e86c:	b083      	sub	sp, #12
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e876:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e87a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e87e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4313      	orrs	r3, r2
 800e886:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e88a:	bf00      	nop
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800e896:	b480      	push	{r7}
 800e898:	b083      	sub	sp, #12
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e89e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e8a6:	f023 020f 	bic.w	r2, r3, #15
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	091b      	lsrs	r3, r3, #4
 800e8ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e8cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e8d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	608b      	str	r3, [r1, #8]
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e8f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e8fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4313      	orrs	r3, r2
 800e906:	608b      	str	r3, [r1, #8]
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e922:	4618      	mov	r0, r3
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800e92c:	b480      	push	{r7}
 800e92e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e934:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e938:	011b      	lsls	r3, r3, #4
 800e93a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800e948:	b480      	push	{r7}
 800e94a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e94c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e956:	4618      	mov	r0, r3
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e96e:	4618      	mov	r0, r3
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e978:	b480      	push	{r7}
 800e97a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e97c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e98a:	6013      	str	r3, [r2, #0]
}
 800e98c:	bf00      	nop
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e996:	b480      	push	{r7}
 800e998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e99a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e9a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e9a8:	6013      	str	r3, [r2, #0]
}
 800e9aa:	bf00      	nop
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e9b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9c6:	d101      	bne.n	800e9cc <LL_RCC_PLL_IsReady+0x18>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e000      	b.n	800e9ce <LL_RCC_PLL_IsReady+0x1a>
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e9dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	0a1b      	lsrs	r3, r3, #8
 800e9e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e9f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ea0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ea22:	b480      	push	{r7}
 800ea24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ea26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	f003 0303 	and.w	r3, r3, #3
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ea3a:	b480      	push	{r7}
 800ea3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ea3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea4c:	d101      	bne.n	800ea52 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e000      	b.n	800ea54 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ea62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ea6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea72:	d101      	bne.n	800ea78 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e000      	b.n	800ea7a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ea84:	b480      	push	{r7}
 800ea86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ea88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ea90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea98:	d101      	bne.n	800ea9e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e000      	b.n	800eaa0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800eaae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eab8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eabc:	d101      	bne.n	800eac2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800eabe:	2301      	movs	r3, #1
 800eac0:	e000      	b.n	800eac4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800eace:	b480      	push	{r7}
 800ead0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800ead2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eadc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eae0:	d101      	bne.n	800eae6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800eae2:	2301      	movs	r3, #1
 800eae4:	e000      	b.n	800eae8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
	...

0800eaf4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800eaf4:	b590      	push	{r4, r7, lr}
 800eaf6:	b08d      	sub	sp, #52	@ 0x34
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	e363      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f003 0320 	and.w	r3, r3, #32
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 808d 	beq.w	800ec2e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb14:	f7ff fe89 	bl	800e82a <LL_RCC_GetSysClkSource>
 800eb18:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800eb1a:	f7ff ff82 	bl	800ea22 <LL_RCC_PLL_GetMainSource>
 800eb1e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800eb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d005      	beq.n	800eb32 <HAL_RCC_OscConfig+0x3e>
 800eb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb28:	2b0c      	cmp	r3, #12
 800eb2a:	d147      	bne.n	800ebbc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800eb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d144      	bne.n	800ebbc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	69db      	ldr	r3, [r3, #28]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e347      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eb42:	f7ff fe34 	bl	800e7ae <LL_RCC_MSI_GetRange>
 800eb46:	4603      	mov	r3, r0
 800eb48:	429c      	cmp	r4, r3
 800eb4a:	d914      	bls.n	800eb76 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb50:	4618      	mov	r0, r3
 800eb52:	f000 fd2f 	bl	800f5b4 <RCC_SetFlashLatencyFromMSIRange>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e336      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fe0e 	bl	800e786 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6a1b      	ldr	r3, [r3, #32]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fe32 	bl	800e7d8 <LL_RCC_MSI_SetCalibTrimming>
 800eb74:	e013      	b.n	800eb9e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff fe03 	bl	800e786 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a1b      	ldr	r3, [r3, #32]
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7ff fe27 	bl	800e7d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f000 fd10 	bl	800f5b4 <RCC_SetFlashLatencyFromMSIRange>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e317      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800eb9e:	f000 fcc9 	bl	800f534 <HAL_RCC_GetHCLKFreq>
 800eba2:	4603      	mov	r3, r0
 800eba4:	4aa4      	ldr	r2, [pc, #656]	@ (800ee38 <HAL_RCC_OscConfig+0x344>)
 800eba6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800eba8:	4ba4      	ldr	r3, [pc, #656]	@ (800ee3c <HAL_RCC_OscConfig+0x348>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fa fa5f 	bl	8009070 <HAL_InitTick>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d039      	beq.n	800ec2c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e308      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01e      	beq.n	800ec02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ebc4:	f7ff fdb0 	bl	800e728 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ebc8:	f7fa faa0 	bl	800910c <HAL_GetTick>
 800ebcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800ebce:	e008      	b.n	800ebe2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ebd0:	f7fa fa9c 	bl	800910c <HAL_GetTick>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	2b02      	cmp	r3, #2
 800ebdc:	d901      	bls.n	800ebe2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ebde:	2303      	movs	r3, #3
 800ebe0:	e2f5      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800ebe2:	f7ff fdbf 	bl	800e764 <LL_RCC_MSI_IsReady>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d0f1      	beq.n	800ebd0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fdc8 	bl	800e786 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff fdec 	bl	800e7d8 <LL_RCC_MSI_SetCalibTrimming>
 800ec00:	e015      	b.n	800ec2e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ec02:	f7ff fda0 	bl	800e746 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ec06:	f7fa fa81 	bl	800910c <HAL_GetTick>
 800ec0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800ec0c:	e008      	b.n	800ec20 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ec0e:	f7fa fa7d 	bl	800910c <HAL_GetTick>
 800ec12:	4602      	mov	r2, r0
 800ec14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d901      	bls.n	800ec20 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e2d6      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800ec20:	f7ff fda0 	bl	800e764 <LL_RCC_MSI_IsReady>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1f1      	bne.n	800ec0e <HAL_RCC_OscConfig+0x11a>
 800ec2a:	e000      	b.n	800ec2e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ec2c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d047      	beq.n	800ecca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ec3a:	f7ff fdf6 	bl	800e82a <LL_RCC_GetSysClkSource>
 800ec3e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ec40:	f7ff feef 	bl	800ea22 <LL_RCC_PLL_GetMainSource>
 800ec44:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	2b08      	cmp	r3, #8
 800ec4a:	d005      	beq.n	800ec58 <HAL_RCC_OscConfig+0x164>
 800ec4c:	6a3b      	ldr	r3, [r7, #32]
 800ec4e:	2b0c      	cmp	r3, #12
 800ec50:	d108      	bne.n	800ec64 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d105      	bne.n	800ec64 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d134      	bne.n	800ecca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e2b4      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec6c:	d102      	bne.n	800ec74 <HAL_RCC_OscConfig+0x180>
 800ec6e:	f7ff fbdd 	bl	800e42c <LL_RCC_HSE_Enable>
 800ec72:	e001      	b.n	800ec78 <HAL_RCC_OscConfig+0x184>
 800ec74:	f7ff fbe9 	bl	800e44a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d012      	beq.n	800eca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec80:	f7fa fa44 	bl	800910c <HAL_GetTick>
 800ec84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800ec86:	e008      	b.n	800ec9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ec88:	f7fa fa40 	bl	800910c <HAL_GetTick>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	2b64      	cmp	r3, #100	@ 0x64
 800ec94:	d901      	bls.n	800ec9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e299      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ec9a:	f7ff fbe5 	bl	800e468 <LL_RCC_HSE_IsReady>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d0f1      	beq.n	800ec88 <HAL_RCC_OscConfig+0x194>
 800eca4:	e011      	b.n	800ecca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eca6:	f7fa fa31 	bl	800910c <HAL_GetTick>
 800ecaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ecac:	e008      	b.n	800ecc0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ecae:	f7fa fa2d 	bl	800910c <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	2b64      	cmp	r3, #100	@ 0x64
 800ecba:	d901      	bls.n	800ecc0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e286      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800ecc0:	f7ff fbd2 	bl	800e468 <LL_RCC_HSE_IsReady>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1f1      	bne.n	800ecae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f003 0302 	and.w	r3, r3, #2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d04c      	beq.n	800ed70 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ecd6:	f7ff fda8 	bl	800e82a <LL_RCC_GetSysClkSource>
 800ecda:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ecdc:	f7ff fea1 	bl	800ea22 <LL_RCC_PLL_GetMainSource>
 800ece0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d005      	beq.n	800ecf4 <HAL_RCC_OscConfig+0x200>
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	2b0c      	cmp	r3, #12
 800ecec:	d10e      	bne.n	800ed0c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d10b      	bne.n	800ed0c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d101      	bne.n	800ed00 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e266      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7ff fbf1 	bl	800e4ec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ed0a:	e031      	b.n	800ed70 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d019      	beq.n	800ed48 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ed14:	f7ff fbba 	bl	800e48c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed18:	f7fa f9f8 	bl	800910c <HAL_GetTick>
 800ed1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ed1e:	e008      	b.n	800ed32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ed20:	f7fa f9f4 	bl	800910c <HAL_GetTick>
 800ed24:	4602      	mov	r2, r0
 800ed26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	2b02      	cmp	r3, #2
 800ed2c:	d901      	bls.n	800ed32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e24d      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ed32:	f7ff fbc9 	bl	800e4c8 <LL_RCC_HSI_IsReady>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d0f1      	beq.n	800ed20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff fbd3 	bl	800e4ec <LL_RCC_HSI_SetCalibTrimming>
 800ed46:	e013      	b.n	800ed70 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ed48:	f7ff fbaf 	bl	800e4aa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed4c:	f7fa f9de 	bl	800910c <HAL_GetTick>
 800ed50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ed52:	e008      	b.n	800ed66 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ed54:	f7fa f9da 	bl	800910c <HAL_GetTick>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d901      	bls.n	800ed66 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ed62:	2303      	movs	r3, #3
 800ed64:	e233      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ed66:	f7ff fbaf 	bl	800e4c8 <LL_RCC_HSI_IsReady>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1f1      	bne.n	800ed54 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f003 0308 	and.w	r3, r3, #8
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d106      	bne.n	800ed8a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 80a3 	beq.w	800eed0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d076      	beq.n	800ee80 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f003 0310 	and.w	r3, r3, #16
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d046      	beq.n	800ee2c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ed9e:	f7ff fc66 	bl	800e66e <LL_RCC_LSI1_IsReady>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d113      	bne.n	800edd0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800eda8:	f7ff fc3f 	bl	800e62a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800edac:	f7fa f9ae 	bl	800910c <HAL_GetTick>
 800edb0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800edb2:	e008      	b.n	800edc6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800edb4:	f7fa f9aa 	bl	800910c <HAL_GetTick>
 800edb8:	4602      	mov	r2, r0
 800edba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	2b02      	cmp	r3, #2
 800edc0:	d901      	bls.n	800edc6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800edc2:	2303      	movs	r3, #3
 800edc4:	e203      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800edc6:	f7ff fc52 	bl	800e66e <LL_RCC_LSI1_IsReady>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d0f1      	beq.n	800edb4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800edd0:	f7ff fc5f 	bl	800e692 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edd4:	f7fa f99a 	bl	800910c <HAL_GetTick>
 800edd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800edda:	e008      	b.n	800edee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800eddc:	f7fa f996 	bl	800910c <HAL_GetTick>
 800ede0:	4602      	mov	r2, r0
 800ede2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede4:	1ad3      	subs	r3, r2, r3
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	d901      	bls.n	800edee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	e1ef      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800edee:	f7ff fc72 	bl	800e6d6 <LL_RCC_LSI2_IsReady>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d0f1      	beq.n	800eddc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff fc7c 	bl	800e6fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ee02:	f7ff fc23 	bl	800e64c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee06:	f7fa f981 	bl	800910c <HAL_GetTick>
 800ee0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ee0c:	e008      	b.n	800ee20 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ee0e:	f7fa f97d 	bl	800910c <HAL_GetTick>
 800ee12:	4602      	mov	r2, r0
 800ee14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d901      	bls.n	800ee20 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e1d6      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ee20:	f7ff fc25 	bl	800e66e <LL_RCC_LSI1_IsReady>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1f1      	bne.n	800ee0e <HAL_RCC_OscConfig+0x31a>
 800ee2a:	e051      	b.n	800eed0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ee2c:	f7ff fbfd 	bl	800e62a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee30:	f7fa f96c 	bl	800910c <HAL_GetTick>
 800ee34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ee36:	e00c      	b.n	800ee52 <HAL_RCC_OscConfig+0x35e>
 800ee38:	20000024 	.word	0x20000024
 800ee3c:	20000044 	.word	0x20000044
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ee40:	f7fa f964 	bl	800910c <HAL_GetTick>
 800ee44:	4602      	mov	r2, r0
 800ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee48:	1ad3      	subs	r3, r2, r3
 800ee4a:	2b02      	cmp	r3, #2
 800ee4c:	d901      	bls.n	800ee52 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ee4e:	2303      	movs	r3, #3
 800ee50:	e1bd      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ee52:	f7ff fc0c 	bl	800e66e <LL_RCC_LSI1_IsReady>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d0f1      	beq.n	800ee40 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ee5c:	f7ff fc2a 	bl	800e6b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ee60:	e008      	b.n	800ee74 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ee62:	f7fa f953 	bl	800910c <HAL_GetTick>
 800ee66:	4602      	mov	r2, r0
 800ee68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	2b03      	cmp	r3, #3
 800ee6e:	d901      	bls.n	800ee74 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ee70:	2303      	movs	r3, #3
 800ee72:	e1ac      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ee74:	f7ff fc2f 	bl	800e6d6 <LL_RCC_LSI2_IsReady>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1f1      	bne.n	800ee62 <HAL_RCC_OscConfig+0x36e>
 800ee7e:	e027      	b.n	800eed0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ee80:	f7ff fc18 	bl	800e6b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee84:	f7fa f942 	bl	800910c <HAL_GetTick>
 800ee88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ee8a:	e008      	b.n	800ee9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ee8c:	f7fa f93e 	bl	800910c <HAL_GetTick>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	d901      	bls.n	800ee9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e197      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ee9e:	f7ff fc1a 	bl	800e6d6 <LL_RCC_LSI2_IsReady>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1f1      	bne.n	800ee8c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800eea8:	f7ff fbd0 	bl	800e64c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eeac:	f7fa f92e 	bl	800910c <HAL_GetTick>
 800eeb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800eeb2:	e008      	b.n	800eec6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800eeb4:	f7fa f92a 	bl	800910c <HAL_GetTick>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d901      	bls.n	800eec6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800eec2:	2303      	movs	r3, #3
 800eec4:	e183      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800eec6:	f7ff fbd2 	bl	800e66e <LL_RCC_LSI1_IsReady>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1f1      	bne.n	800eeb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f003 0304 	and.w	r3, r3, #4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d05b      	beq.n	800ef94 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eedc:	4ba7      	ldr	r3, [pc, #668]	@ (800f17c <HAL_RCC_OscConfig+0x688>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d114      	bne.n	800ef12 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800eee8:	f7ff fa60 	bl	800e3ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eeec:	f7fa f90e 	bl	800910c <HAL_GetTick>
 800eef0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eef2:	e008      	b.n	800ef06 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eef4:	f7fa f90a 	bl	800910c <HAL_GetTick>
 800eef8:	4602      	mov	r2, r0
 800eefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d901      	bls.n	800ef06 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ef02:	2303      	movs	r3, #3
 800ef04:	e163      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ef06:	4b9d      	ldr	r3, [pc, #628]	@ (800f17c <HAL_RCC_OscConfig+0x688>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0f0      	beq.n	800eef4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d102      	bne.n	800ef20 <HAL_RCC_OscConfig+0x42c>
 800ef1a:	f7ff fb30 	bl	800e57e <LL_RCC_LSE_Enable>
 800ef1e:	e00c      	b.n	800ef3a <HAL_RCC_OscConfig+0x446>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	2b05      	cmp	r3, #5
 800ef26:	d104      	bne.n	800ef32 <HAL_RCC_OscConfig+0x43e>
 800ef28:	f7ff fb4b 	bl	800e5c2 <LL_RCC_LSE_EnableBypass>
 800ef2c:	f7ff fb27 	bl	800e57e <LL_RCC_LSE_Enable>
 800ef30:	e003      	b.n	800ef3a <HAL_RCC_OscConfig+0x446>
 800ef32:	f7ff fb35 	bl	800e5a0 <LL_RCC_LSE_Disable>
 800ef36:	f7ff fb55 	bl	800e5e4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d014      	beq.n	800ef6c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef42:	f7fa f8e3 	bl	800910c <HAL_GetTick>
 800ef46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ef48:	e00a      	b.n	800ef60 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef4a:	f7fa f8df 	bl	800910c <HAL_GetTick>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d901      	bls.n	800ef60 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	e136      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ef60:	f7ff fb51 	bl	800e606 <LL_RCC_LSE_IsReady>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d0ef      	beq.n	800ef4a <HAL_RCC_OscConfig+0x456>
 800ef6a:	e013      	b.n	800ef94 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef6c:	f7fa f8ce 	bl	800910c <HAL_GetTick>
 800ef70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ef72:	e00a      	b.n	800ef8a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef74:	f7fa f8ca 	bl	800910c <HAL_GetTick>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef7c:	1ad3      	subs	r3, r2, r3
 800ef7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d901      	bls.n	800ef8a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ef86:	2303      	movs	r3, #3
 800ef88:	e121      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ef8a:	f7ff fb3c 	bl	800e606 <LL_RCC_LSE_IsReady>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1ef      	bne.n	800ef74 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d02c      	beq.n	800effa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d014      	beq.n	800efd2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800efa8:	f7ff fab5 	bl	800e516 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efac:	f7fa f8ae 	bl	800910c <HAL_GetTick>
 800efb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800efb2:	e008      	b.n	800efc6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800efb4:	f7fa f8aa 	bl	800910c <HAL_GetTick>
 800efb8:	4602      	mov	r2, r0
 800efba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d901      	bls.n	800efc6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	e103      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800efc6:	f7ff fac8 	bl	800e55a <LL_RCC_HSI48_IsReady>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d0f1      	beq.n	800efb4 <HAL_RCC_OscConfig+0x4c0>
 800efd0:	e013      	b.n	800effa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800efd2:	f7ff fab1 	bl	800e538 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efd6:	f7fa f899 	bl	800910c <HAL_GetTick>
 800efda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800efdc:	e008      	b.n	800eff0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800efde:	f7fa f895 	bl	800910c <HAL_GetTick>
 800efe2:	4602      	mov	r2, r0
 800efe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe6:	1ad3      	subs	r3, r2, r3
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d901      	bls.n	800eff0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800efec:	2303      	movs	r3, #3
 800efee:	e0ee      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800eff0:	f7ff fab3 	bl	800e55a <LL_RCC_HSI48_IsReady>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1f1      	bne.n	800efde <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 80e4 	beq.w	800f1cc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f004:	f7ff fc11 	bl	800e82a <LL_RCC_GetSysClkSource>
 800f008:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800f00a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f016:	2b02      	cmp	r3, #2
 800f018:	f040 80b4 	bne.w	800f184 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f003 0203 	and.w	r2, r3, #3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f026:	429a      	cmp	r2, r3
 800f028:	d123      	bne.n	800f072 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f034:	429a      	cmp	r2, r3
 800f036:	d11c      	bne.n	800f072 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	0a1b      	lsrs	r3, r3, #8
 800f03c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f044:	429a      	cmp	r2, r3
 800f046:	d114      	bne.n	800f072 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f052:	429a      	cmp	r2, r3
 800f054:	d10d      	bne.n	800f072 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f060:	429a      	cmp	r2, r3
 800f062:	d106      	bne.n	800f072 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f06e:	429a      	cmp	r2, r3
 800f070:	d05d      	beq.n	800f12e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	2b0c      	cmp	r3, #12
 800f076:	d058      	beq.n	800f12a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800f086:	2301      	movs	r3, #1
 800f088:	e0a1      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f08a:	f7ff fc84 	bl	800e996 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f08e:	f7fa f83d 	bl	800910c <HAL_GetTick>
 800f092:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f094:	e008      	b.n	800f0a8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f096:	f7fa f839 	bl	800910c <HAL_GetTick>
 800f09a:	4602      	mov	r2, r0
 800f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d901      	bls.n	800f0a8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	e092      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f0a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1ef      	bne.n	800f096 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f0b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0ba:	68da      	ldr	r2, [r3, #12]
 800f0bc:	4b30      	ldr	r3, [pc, #192]	@ (800f180 <HAL_RCC_OscConfig+0x68c>)
 800f0be:	4013      	ands	r3, r2
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f0c8:	4311      	orrs	r1, r2
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f0ce:	0212      	lsls	r2, r2, #8
 800f0d0:	4311      	orrs	r1, r2
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f0d6:	4311      	orrs	r1, r2
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800f0dc:	4311      	orrs	r1, r2
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f0ec:	f7ff fc44 	bl	800e978 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f0f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f0fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f100:	f7fa f804 	bl	800910c <HAL_GetTick>
 800f104:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f106:	e008      	b.n	800f11a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f108:	f7fa f800 	bl	800910c <HAL_GetTick>
 800f10c:	4602      	mov	r2, r0
 800f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	2b02      	cmp	r3, #2
 800f114:	d901      	bls.n	800f11a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800f116:	2303      	movs	r3, #3
 800f118:	e059      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f11a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f124:	2b00      	cmp	r3, #0
 800f126:	d0ef      	beq.n	800f108 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f128:	e050      	b.n	800f1cc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e04f      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f12e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d147      	bne.n	800f1cc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f13c:	f7ff fc1c 	bl	800e978 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f14a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f14e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f150:	f7f9 ffdc 	bl	800910c <HAL_GetTick>
 800f154:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f156:	e008      	b.n	800f16a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f158:	f7f9 ffd8 	bl	800910c <HAL_GetTick>
 800f15c:	4602      	mov	r2, r0
 800f15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	2b02      	cmp	r3, #2
 800f164:	d901      	bls.n	800f16a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800f166:	2303      	movs	r3, #3
 800f168:	e031      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f16a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f174:	2b00      	cmp	r3, #0
 800f176:	d0ef      	beq.n	800f158 <HAL_RCC_OscConfig+0x664>
 800f178:	e028      	b.n	800f1cc <HAL_RCC_OscConfig+0x6d8>
 800f17a:	bf00      	nop
 800f17c:	58000400 	.word	0x58000400
 800f180:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	2b0c      	cmp	r3, #12
 800f188:	d01e      	beq.n	800f1c8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f18a:	f7ff fc04 	bl	800e996 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f18e:	f7f9 ffbd 	bl	800910c <HAL_GetTick>
 800f192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f194:	e008      	b.n	800f1a8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f196:	f7f9 ffb9 	bl	800910c <HAL_GetTick>
 800f19a:	4602      	mov	r2, r0
 800f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	d901      	bls.n	800f1a8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	e012      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f1a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1ef      	bne.n	800f196 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f1b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f1ba:	68da      	ldr	r2, [r3, #12]
 800f1bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f1c0:	4b05      	ldr	r3, [pc, #20]	@ (800f1d8 <HAL_RCC_OscConfig+0x6e4>)
 800f1c2:	4013      	ands	r3, r2
 800f1c4:	60cb      	str	r3, [r1, #12]
 800f1c6:	e001      	b.n	800f1cc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	e000      	b.n	800f1ce <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3734      	adds	r7, #52	@ 0x34
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd90      	pop	{r4, r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	eefefffc 	.word	0xeefefffc

0800f1dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d101      	bne.n	800f1f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e12d      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f1f0:	4b98      	ldr	r3, [pc, #608]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 0307 	and.w	r3, r3, #7
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d91b      	bls.n	800f236 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1fe:	4b95      	ldr	r3, [pc, #596]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f023 0207 	bic.w	r2, r3, #7
 800f206:	4993      	ldr	r1, [pc, #588]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	4313      	orrs	r3, r2
 800f20c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f20e:	f7f9 ff7d 	bl	800910c <HAL_GetTick>
 800f212:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f214:	e008      	b.n	800f228 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f216:	f7f9 ff79 	bl	800910c <HAL_GetTick>
 800f21a:	4602      	mov	r2, r0
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	2b02      	cmp	r3, #2
 800f222:	d901      	bls.n	800f228 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800f224:	2303      	movs	r3, #3
 800f226:	e111      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f228:	4b8a      	ldr	r3, [pc, #552]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f003 0307 	and.w	r3, r3, #7
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d1ef      	bne.n	800f216 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f003 0302 	and.w	r3, r3, #2
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d016      	beq.n	800f270 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fafb 	bl	800e842 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f24c:	f7f9 ff5e 	bl	800910c <HAL_GetTick>
 800f250:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f252:	e008      	b.n	800f266 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f254:	f7f9 ff5a 	bl	800910c <HAL_GetTick>
 800f258:	4602      	mov	r2, r0
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d901      	bls.n	800f266 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f262:	2303      	movs	r3, #3
 800f264:	e0f2      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f266:	f7ff fbe8 	bl	800ea3a <LL_RCC_IsActiveFlag_HPRE>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0f1      	beq.n	800f254 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 0320 	and.w	r3, r3, #32
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d016      	beq.n	800f2aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	695b      	ldr	r3, [r3, #20]
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff faf2 	bl	800e86a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f286:	f7f9 ff41 	bl	800910c <HAL_GetTick>
 800f28a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f28c:	e008      	b.n	800f2a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f28e:	f7f9 ff3d 	bl	800910c <HAL_GetTick>
 800f292:	4602      	mov	r2, r0
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	2b02      	cmp	r3, #2
 800f29a:	d901      	bls.n	800f2a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800f29c:	2303      	movs	r3, #3
 800f29e:	e0d5      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f2a0:	f7ff fbdd 	bl	800ea5e <LL_RCC_IsActiveFlag_C2HPRE>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0f1      	beq.n	800f28e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d016      	beq.n	800f2e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff faeb 	bl	800e896 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f2c0:	f7f9 ff24 	bl	800910c <HAL_GetTick>
 800f2c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f2c6:	e008      	b.n	800f2da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f2c8:	f7f9 ff20 	bl	800910c <HAL_GetTick>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d901      	bls.n	800f2da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	e0b8      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f2da:	f7ff fbd3 	bl	800ea84 <LL_RCC_IsActiveFlag_SHDHPRE>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d0f1      	beq.n	800f2c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f003 0304 	and.w	r3, r3, #4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d016      	beq.n	800f31e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff fae5 	bl	800e8c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f2fa:	f7f9 ff07 	bl	800910c <HAL_GetTick>
 800f2fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f300:	e008      	b.n	800f314 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f302:	f7f9 ff03 	bl	800910c <HAL_GetTick>
 800f306:	4602      	mov	r2, r0
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	1ad3      	subs	r3, r2, r3
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d901      	bls.n	800f314 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f310:	2303      	movs	r3, #3
 800f312:	e09b      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f314:	f7ff fbc9 	bl	800eaaa <LL_RCC_IsActiveFlag_PPRE1>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d0f1      	beq.n	800f302 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f003 0308 	and.w	r3, r3, #8
 800f326:	2b00      	cmp	r3, #0
 800f328:	d017      	beq.n	800f35a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	691b      	ldr	r3, [r3, #16]
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	4618      	mov	r0, r3
 800f332:	f7ff fadb 	bl	800e8ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f336:	f7f9 fee9 	bl	800910c <HAL_GetTick>
 800f33a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f33c:	e008      	b.n	800f350 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f33e:	f7f9 fee5 	bl	800910c <HAL_GetTick>
 800f342:	4602      	mov	r2, r0
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d901      	bls.n	800f350 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f34c:	2303      	movs	r3, #3
 800f34e:	e07d      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f350:	f7ff fbbd 	bl	800eace <LL_RCC_IsActiveFlag_PPRE2>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d0f1      	beq.n	800f33e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	d043      	beq.n	800f3ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d106      	bne.n	800f37c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f36e:	f7ff f87b 	bl	800e468 <LL_RCC_HSE_IsReady>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d11e      	bne.n	800f3b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	e067      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2b03      	cmp	r3, #3
 800f382:	d106      	bne.n	800f392 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f384:	f7ff fb16 	bl	800e9b4 <LL_RCC_PLL_IsReady>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d113      	bne.n	800f3b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e05c      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d106      	bne.n	800f3a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f39a:	f7ff f9e3 	bl	800e764 <LL_RCC_MSI_IsReady>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d108      	bne.n	800f3b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e051      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f3a8:	f7ff f88e 	bl	800e4c8 <LL_RCC_HSI_IsReady>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e04a      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7ff fa21 	bl	800e802 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3c0:	f7f9 fea4 	bl	800910c <HAL_GetTick>
 800f3c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3c6:	e00a      	b.n	800f3de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3c8:	f7f9 fea0 	bl	800910c <HAL_GetTick>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d901      	bls.n	800f3de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f3da:	2303      	movs	r3, #3
 800f3dc:	e036      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3de:	f7ff fa24 	bl	800e82a <LL_RCC_GetSysClkSource>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d1ec      	bne.n	800f3c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f3ee:	4b19      	ldr	r3, [pc, #100]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 0307 	and.w	r3, r3, #7
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d21b      	bcs.n	800f434 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3fc:	4b15      	ldr	r3, [pc, #84]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f023 0207 	bic.w	r2, r3, #7
 800f404:	4913      	ldr	r1, [pc, #76]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	4313      	orrs	r3, r2
 800f40a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f40c:	f7f9 fe7e 	bl	800910c <HAL_GetTick>
 800f410:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f412:	e008      	b.n	800f426 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f414:	f7f9 fe7a 	bl	800910c <HAL_GetTick>
 800f418:	4602      	mov	r2, r0
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	1ad3      	subs	r3, r2, r3
 800f41e:	2b02      	cmp	r3, #2
 800f420:	d901      	bls.n	800f426 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f422:	2303      	movs	r3, #3
 800f424:	e012      	b.n	800f44c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f426:	4b0b      	ldr	r3, [pc, #44]	@ (800f454 <HAL_RCC_ClockConfig+0x278>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f003 0307 	and.w	r3, r3, #7
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	429a      	cmp	r2, r3
 800f432:	d1ef      	bne.n	800f414 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f434:	f000 f87e 	bl	800f534 <HAL_RCC_GetHCLKFreq>
 800f438:	4603      	mov	r3, r0
 800f43a:	4a07      	ldr	r2, [pc, #28]	@ (800f458 <HAL_RCC_ClockConfig+0x27c>)
 800f43c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f43e:	f7f9 fe71 	bl	8009124 <HAL_GetTickPrio>
 800f442:	4603      	mov	r3, r0
 800f444:	4618      	mov	r0, r3
 800f446:	f7f9 fe13 	bl	8009070 <HAL_InitTick>
 800f44a:	4603      	mov	r3, r0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	58004000 	.word	0x58004000
 800f458:	20000024 	.word	0x20000024

0800f45c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f45c:	b590      	push	{r4, r7, lr}
 800f45e:	b085      	sub	sp, #20
 800f460:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f462:	f7ff f9e2 	bl	800e82a <LL_RCC_GetSysClkSource>
 800f466:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10a      	bne.n	800f484 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f46e:	f7ff f99e 	bl	800e7ae <LL_RCC_MSI_GetRange>
 800f472:	4603      	mov	r3, r0
 800f474:	091b      	lsrs	r3, r3, #4
 800f476:	f003 030f 	and.w	r3, r3, #15
 800f47a:	4a2b      	ldr	r2, [pc, #172]	@ (800f528 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f480:	60fb      	str	r3, [r7, #12]
 800f482:	e04b      	b.n	800f51c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b04      	cmp	r3, #4
 800f488:	d102      	bne.n	800f490 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f48a:	4b28      	ldr	r3, [pc, #160]	@ (800f52c <HAL_RCC_GetSysClockFreq+0xd0>)
 800f48c:	60fb      	str	r3, [r7, #12]
 800f48e:	e045      	b.n	800f51c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b08      	cmp	r3, #8
 800f494:	d10a      	bne.n	800f4ac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f496:	f7fe ffb7 	bl	800e408 <LL_RCC_HSE_IsEnabledDiv2>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d102      	bne.n	800f4a6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f4a0:	4b22      	ldr	r3, [pc, #136]	@ (800f52c <HAL_RCC_GetSysClockFreq+0xd0>)
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	e03a      	b.n	800f51c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f4a6:	4b22      	ldr	r3, [pc, #136]	@ (800f530 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	e037      	b.n	800f51c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f4ac:	f7ff fab9 	bl	800ea22 <LL_RCC_PLL_GetMainSource>
 800f4b0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d003      	beq.n	800f4c0 <HAL_RCC_GetSysClockFreq+0x64>
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d003      	beq.n	800f4c6 <HAL_RCC_GetSysClockFreq+0x6a>
 800f4be:	e00d      	b.n	800f4dc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800f52c <HAL_RCC_GetSysClockFreq+0xd0>)
 800f4c2:	60bb      	str	r3, [r7, #8]
        break;
 800f4c4:	e015      	b.n	800f4f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f4c6:	f7fe ff9f 	bl	800e408 <LL_RCC_HSE_IsEnabledDiv2>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d102      	bne.n	800f4d6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f4d0:	4b16      	ldr	r3, [pc, #88]	@ (800f52c <HAL_RCC_GetSysClockFreq+0xd0>)
 800f4d2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f4d4:	e00d      	b.n	800f4f2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f4d6:	4b16      	ldr	r3, [pc, #88]	@ (800f530 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f4d8:	60bb      	str	r3, [r7, #8]
        break;
 800f4da:	e00a      	b.n	800f4f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f4dc:	f7ff f967 	bl	800e7ae <LL_RCC_MSI_GetRange>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	091b      	lsrs	r3, r3, #4
 800f4e4:	f003 030f 	and.w	r3, r3, #15
 800f4e8:	4a0f      	ldr	r2, [pc, #60]	@ (800f528 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ee:	60bb      	str	r3, [r7, #8]
        break;
 800f4f0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f4f2:	f7ff fa71 	bl	800e9d8 <LL_RCC_PLL_GetN>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	fb03 f402 	mul.w	r4, r3, r2
 800f4fe:	f7ff fa84 	bl	800ea0a <LL_RCC_PLL_GetDivider>
 800f502:	4603      	mov	r3, r0
 800f504:	091b      	lsrs	r3, r3, #4
 800f506:	3301      	adds	r3, #1
 800f508:	fbb4 f4f3 	udiv	r4, r4, r3
 800f50c:	f7ff fa71 	bl	800e9f2 <LL_RCC_PLL_GetR>
 800f510:	4603      	mov	r3, r0
 800f512:	0f5b      	lsrs	r3, r3, #29
 800f514:	3301      	adds	r3, #1
 800f516:	fbb4 f3f3 	udiv	r3, r4, r3
 800f51a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f51c:	68fb      	ldr	r3, [r7, #12]
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3714      	adds	r7, #20
 800f522:	46bd      	mov	sp, r7
 800f524:	bd90      	pop	{r4, r7, pc}
 800f526:	bf00      	nop
 800f528:	0801c2f8 	.word	0x0801c2f8
 800f52c:	00f42400 	.word	0x00f42400
 800f530:	01e84800 	.word	0x01e84800

0800f534 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f534:	b598      	push	{r3, r4, r7, lr}
 800f536:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f538:	f7ff ff90 	bl	800f45c <HAL_RCC_GetSysClockFreq>
 800f53c:	4604      	mov	r4, r0
 800f53e:	f7ff f9e9 	bl	800e914 <LL_RCC_GetAHBPrescaler>
 800f542:	4603      	mov	r3, r0
 800f544:	091b      	lsrs	r3, r3, #4
 800f546:	f003 030f 	and.w	r3, r3, #15
 800f54a:	4a03      	ldr	r2, [pc, #12]	@ (800f558 <HAL_RCC_GetHCLKFreq+0x24>)
 800f54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f550:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f554:	4618      	mov	r0, r3
 800f556:	bd98      	pop	{r3, r4, r7, pc}
 800f558:	0801c298 	.word	0x0801c298

0800f55c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f55c:	b598      	push	{r3, r4, r7, lr}
 800f55e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f560:	f7ff ffe8 	bl	800f534 <HAL_RCC_GetHCLKFreq>
 800f564:	4604      	mov	r4, r0
 800f566:	f7ff f9ef 	bl	800e948 <LL_RCC_GetAPB1Prescaler>
 800f56a:	4603      	mov	r3, r0
 800f56c:	0a1b      	lsrs	r3, r3, #8
 800f56e:	f003 0307 	and.w	r3, r3, #7
 800f572:	4a04      	ldr	r2, [pc, #16]	@ (800f584 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f578:	f003 031f 	and.w	r3, r3, #31
 800f57c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f580:	4618      	mov	r0, r3
 800f582:	bd98      	pop	{r3, r4, r7, pc}
 800f584:	0801c2d8 	.word	0x0801c2d8

0800f588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f588:	b598      	push	{r3, r4, r7, lr}
 800f58a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f58c:	f7ff ffd2 	bl	800f534 <HAL_RCC_GetHCLKFreq>
 800f590:	4604      	mov	r4, r0
 800f592:	f7ff f9e5 	bl	800e960 <LL_RCC_GetAPB2Prescaler>
 800f596:	4603      	mov	r3, r0
 800f598:	0adb      	lsrs	r3, r3, #11
 800f59a:	f003 0307 	and.w	r3, r3, #7
 800f59e:	4a04      	ldr	r2, [pc, #16]	@ (800f5b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a4:	f003 031f 	and.w	r3, r3, #31
 800f5a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	bd98      	pop	{r3, r4, r7, pc}
 800f5b0:	0801c2d8 	.word	0x0801c2d8

0800f5b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f5b4:	b590      	push	{r4, r7, lr}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2bb0      	cmp	r3, #176	@ 0xb0
 800f5c0:	d903      	bls.n	800f5ca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f5c2:	4b15      	ldr	r3, [pc, #84]	@ (800f618 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c6:	60fb      	str	r3, [r7, #12]
 800f5c8:	e007      	b.n	800f5da <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	091b      	lsrs	r3, r3, #4
 800f5ce:	f003 030f 	and.w	r3, r3, #15
 800f5d2:	4a11      	ldr	r2, [pc, #68]	@ (800f618 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f5da:	f7ff f9a7 	bl	800e92c <LL_RCC_GetAHB4Prescaler>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	091b      	lsrs	r3, r3, #4
 800f5e2:	f003 030f 	and.w	r3, r3, #15
 800f5e6:	4a0d      	ldr	r2, [pc, #52]	@ (800f61c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5f2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	4a0a      	ldr	r2, [pc, #40]	@ (800f620 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f5f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f5fc:	0c9c      	lsrs	r4, r3, #18
 800f5fe:	f7fe fee5 	bl	800e3cc <HAL_PWREx_GetVoltageRange>
 800f602:	4603      	mov	r3, r0
 800f604:	4619      	mov	r1, r3
 800f606:	4620      	mov	r0, r4
 800f608:	f000 f80c 	bl	800f624 <RCC_SetFlashLatency>
 800f60c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3714      	adds	r7, #20
 800f612:	46bd      	mov	sp, r7
 800f614:	bd90      	pop	{r4, r7, pc}
 800f616:	bf00      	nop
 800f618:	0801c2f8 	.word	0x0801c2f8
 800f61c:	0801c298 	.word	0x0801c298
 800f620:	431bde83 	.word	0x431bde83

0800f624 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b093      	sub	sp, #76	@ 0x4c
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f62e:	4b37      	ldr	r3, [pc, #220]	@ (800f70c <RCC_SetFlashLatency+0xe8>)
 800f630:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800f634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f63a:	4a35      	ldr	r2, [pc, #212]	@ (800f710 <RCC_SetFlashLatency+0xec>)
 800f63c:	f107 031c 	add.w	r3, r7, #28
 800f640:	ca07      	ldmia	r2, {r0, r1, r2}
 800f642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f646:	4b33      	ldr	r3, [pc, #204]	@ (800f714 <RCC_SetFlashLatency+0xf0>)
 800f648:	f107 040c 	add.w	r4, r7, #12
 800f64c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f64e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f652:	2300      	movs	r3, #0
 800f654:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f65c:	d11a      	bne.n	800f694 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f65e:	2300      	movs	r3, #0
 800f660:	643b      	str	r3, [r7, #64]	@ 0x40
 800f662:	e013      	b.n	800f68c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	3348      	adds	r3, #72	@ 0x48
 800f66a:	443b      	add	r3, r7
 800f66c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	429a      	cmp	r2, r3
 800f674:	d807      	bhi.n	800f686 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	3348      	adds	r3, #72	@ 0x48
 800f67c:	443b      	add	r3, r7
 800f67e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f682:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f684:	e020      	b.n	800f6c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f688:	3301      	adds	r3, #1
 800f68a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f68c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d9e8      	bls.n	800f664 <RCC_SetFlashLatency+0x40>
 800f692:	e019      	b.n	800f6c8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f694:	2300      	movs	r3, #0
 800f696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f698:	e013      	b.n	800f6c2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	3348      	adds	r3, #72	@ 0x48
 800f6a0:	443b      	add	r3, r7
 800f6a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d807      	bhi.n	800f6bc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	3348      	adds	r3, #72	@ 0x48
 800f6b2:	443b      	add	r3, r7
 800f6b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f6b8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f6ba:	e005      	b.n	800f6c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6be:	3301      	adds	r3, #1
 800f6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d9e8      	bls.n	800f69a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f6c8:	4b13      	ldr	r3, [pc, #76]	@ (800f718 <RCC_SetFlashLatency+0xf4>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f023 0207 	bic.w	r2, r3, #7
 800f6d0:	4911      	ldr	r1, [pc, #68]	@ (800f718 <RCC_SetFlashLatency+0xf4>)
 800f6d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f6d8:	f7f9 fd18 	bl	800910c <HAL_GetTick>
 800f6dc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f6de:	e008      	b.n	800f6f2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f6e0:	f7f9 fd14 	bl	800910c <HAL_GetTick>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d901      	bls.n	800f6f2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f6ee:	2303      	movs	r3, #3
 800f6f0:	e007      	b.n	800f702 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f6f2:	4b09      	ldr	r3, [pc, #36]	@ (800f718 <RCC_SetFlashLatency+0xf4>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d1ef      	bne.n	800f6e0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	374c      	adds	r7, #76	@ 0x4c
 800f706:	46bd      	mov	sp, r7
 800f708:	bd90      	pop	{r4, r7, pc}
 800f70a:	bf00      	nop
 800f70c:	0801a190 	.word	0x0801a190
 800f710:	0801a1a0 	.word	0x0801a1a0
 800f714:	0801a1ac 	.word	0x0801a1ac
 800f718:	58004000 	.word	0x58004000

0800f71c <LL_RCC_LSE_IsEnabled>:
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f728:	f003 0301 	and.w	r3, r3, #1
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d101      	bne.n	800f734 <LL_RCC_LSE_IsEnabled+0x18>
 800f730:	2301      	movs	r3, #1
 800f732:	e000      	b.n	800f736 <LL_RCC_LSE_IsEnabled+0x1a>
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <LL_RCC_LSE_IsReady>:
{
 800f740:	b480      	push	{r7}
 800f742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f74c:	f003 0302 	and.w	r3, r3, #2
 800f750:	2b02      	cmp	r3, #2
 800f752:	d101      	bne.n	800f758 <LL_RCC_LSE_IsReady+0x18>
 800f754:	2301      	movs	r3, #1
 800f756:	e000      	b.n	800f75a <LL_RCC_LSE_IsReady+0x1a>
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <LL_RCC_SetRFWKPClockSource>:
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f76c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f774:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f778:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4313      	orrs	r3, r2
 800f780:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <LL_RCC_SetSMPSClockSource>:
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f79e:	f023 0203 	bic.w	r2, r3, #3
 800f7a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <LL_RCC_SetSMPSPrescaler>:
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f7c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f7ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f7d4:	bf00      	nop
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr

0800f7e0 <LL_RCC_SetUSARTClockSource>:
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f7e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f0:	f023 0203 	bic.w	r2, r3, #3
 800f7f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <LL_RCC_SetLPUARTClockSource>:
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f81c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f820:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4313      	orrs	r3, r2
 800f828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <LL_RCC_SetI2CClockSource>:
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f844:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	091b      	lsrs	r3, r3, #4
 800f84c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f850:	43db      	mvns	r3, r3
 800f852:	401a      	ands	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	011b      	lsls	r3, r3, #4
 800f858:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f85c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f860:	4313      	orrs	r3, r2
 800f862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f866:	bf00      	nop
 800f868:	370c      	adds	r7, #12
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr

0800f872 <LL_RCC_SetLPTIMClockSource>:
{
 800f872:	b480      	push	{r7}
 800f874:	b083      	sub	sp, #12
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f87a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f87e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	0c1b      	lsrs	r3, r3, #16
 800f886:	041b      	lsls	r3, r3, #16
 800f888:	43db      	mvns	r3, r3
 800f88a:	401a      	ands	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	041b      	lsls	r3, r3, #16
 800f890:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f894:	4313      	orrs	r3, r2
 800f896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f89a:	bf00      	nop
 800f89c:	370c      	adds	r7, #12
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr

0800f8a6 <LL_RCC_SetSAIClockSource>:
{
 800f8a6:	b480      	push	{r7}
 800f8a8:	b083      	sub	sp, #12
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f8ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f8ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f8c6:	bf00      	nop
 800f8c8:	370c      	adds	r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr

0800f8d2 <LL_RCC_SetRNGClockSource>:
{
 800f8d2:	b480      	push	{r7}
 800f8d4:	b083      	sub	sp, #12
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f8da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f8e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f8f2:	bf00      	nop
 800f8f4:	370c      	adds	r7, #12
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr

0800f8fe <LL_RCC_SetCLK48ClockSource>:
{
 800f8fe:	b480      	push	{r7}
 800f900:	b083      	sub	sp, #12
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f90e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4313      	orrs	r3, r2
 800f91a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f91e:	bf00      	nop
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <LL_RCC_SetUSBClockSource>:
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b082      	sub	sp, #8
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7ff ffe3 	bl	800f8fe <LL_RCC_SetCLK48ClockSource>
}
 800f938:	bf00      	nop
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <LL_RCC_SetADCClockSource>:
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f950:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f954:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4313      	orrs	r3, r2
 800f95c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <LL_RCC_SetRTCClockSource>:
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f97c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4313      	orrs	r3, r2
 800f988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <LL_RCC_GetRTCClockSource>:
{
 800f998:	b480      	push	{r7}
 800f99a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f99c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <LL_RCC_ForceBackupDomainReset>:
{
 800f9b2:	b480      	push	{r7}
 800f9b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f9b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f9c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f9ca:	bf00      	nop
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f9d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f9ec:	bf00      	nop
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <LL_RCC_PLLSAI1_Enable>:
{
 800f9f6:	b480      	push	{r7}
 800f9f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f9fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fa04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fa08:	6013      	str	r3, [r2, #0]
}
 800fa0a:	bf00      	nop
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <LL_RCC_PLLSAI1_Disable>:
{
 800fa14:	b480      	push	{r7}
 800fa16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800fa18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fa22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fa26:	6013      	str	r3, [r2, #0]
}
 800fa28:	bf00      	nop
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr

0800fa32 <LL_RCC_PLLSAI1_IsReady>:
{
 800fa32:	b480      	push	{r7}
 800fa34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800fa36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa44:	d101      	bne.n	800fa4a <LL_RCC_PLLSAI1_IsReady+0x18>
 800fa46:	2301      	movs	r3, #1
 800fa48:	e000      	b.n	800fa4c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b088      	sub	sp, #32
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800fa5e:	2300      	movs	r3, #0
 800fa60:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800fa62:	2300      	movs	r3, #0
 800fa64:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d034      	beq.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800fa7a:	d021      	beq.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800fa7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800fa80:	d81b      	bhi.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fa82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fa86:	d01d      	beq.n	800fac4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800fa88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fa8c:	d815      	bhi.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00b      	beq.n	800faaa <HAL_RCCEx_PeriphCLKConfig+0x54>
 800fa92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fa96:	d110      	bne.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800fa98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800faa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800faa6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800faa8:	e00d      	b.n	800fac6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3304      	adds	r3, #4
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 f947 	bl	800fd42 <RCCEx_PLLSAI1_ConfigNP>
 800fab4:	4603      	mov	r3, r0
 800fab6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800fab8:	e005      	b.n	800fac6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800faba:	2301      	movs	r3, #1
 800fabc:	77fb      	strb	r3, [r7, #31]
        break;
 800fabe:	e002      	b.n	800fac6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800fac0:	bf00      	nop
 800fac2:	e000      	b.n	800fac6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800fac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fac6:	7ffb      	ldrb	r3, [r7, #31]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d105      	bne.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff fee8 	bl	800f8a6 <LL_RCC_SetSAIClockSource>
 800fad6:	e001      	b.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fad8:	7ffb      	ldrb	r3, [r7, #31]
 800fada:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d046      	beq.n	800fb76 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800fae8:	f7ff ff56 	bl	800f998 <LL_RCC_GetRTCClockSource>
 800faec:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf2:	69ba      	ldr	r2, [r7, #24]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d03c      	beq.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800faf8:	f7fe fc58 	bl	800e3ac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d105      	bne.n	800fb0e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7ff ff30 	bl	800f96c <LL_RCC_SetRTCClockSource>
 800fb0c:	e02e      	b.n	800fb6c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800fb0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb16:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800fb18:	f7ff ff4b 	bl	800f9b2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800fb1c:	f7ff ff5a 	bl	800f9d4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800fb2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800fb38:	f7ff fdf0 	bl	800f71c <LL_RCC_LSE_IsEnabled>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d114      	bne.n	800fb6c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fb42:	f7f9 fae3 	bl	800910c <HAL_GetTick>
 800fb46:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800fb48:	e00b      	b.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb4a:	f7f9 fadf 	bl	800910c <HAL_GetTick>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d902      	bls.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800fb5c:	2303      	movs	r3, #3
 800fb5e:	77fb      	strb	r3, [r7, #31]
              break;
 800fb60:	e004      	b.n	800fb6c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800fb62:	f7ff fded 	bl	800f740 <LL_RCC_LSE_IsReady>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d1ee      	bne.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800fb6c:	7ffb      	ldrb	r3, [r7, #31]
 800fb6e:	77bb      	strb	r3, [r7, #30]
 800fb70:	e001      	b.n	800fb76 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb72:	7ffb      	ldrb	r3, [r7, #31]
 800fb74:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d004      	beq.n	800fb8c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	699b      	ldr	r3, [r3, #24]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff fe2a 	bl	800f7e0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f003 0302 	and.w	r3, r3, #2
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d004      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	69db      	ldr	r3, [r3, #28]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff fe35 	bl	800f80c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f003 0310 	and.w	r3, r3, #16
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d004      	beq.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff fe5d 	bl	800f872 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f003 0320 	and.w	r3, r3, #32
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d004      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fe52 	bl	800f872 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f003 0304 	and.w	r3, r3, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d004      	beq.n	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff fe2a 	bl	800f838 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f003 0308 	and.w	r3, r3, #8
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d004      	beq.n	800fbfa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff fe1f 	bl	800f838 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d022      	beq.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7ff fe8d 	bl	800f92a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc18:	d107      	bne.n	800fc2a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800fc1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fc24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fc28:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc32:	d10b      	bne.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	3304      	adds	r3, #4
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f000 f8dd 	bl	800fdf8 <RCCEx_PLLSAI1_ConfigNQ>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fc42:	7ffb      	ldrb	r3, [r7, #31]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800fc48:	7ffb      	ldrb	r3, [r7, #31]
 800fc4a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d02b      	beq.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc60:	d008      	beq.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc6a:	d003      	beq.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d105      	bne.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fe2a 	bl	800f8d2 <LL_RCC_SetRNGClockSource>
 800fc7e:	e00a      	b.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc88:	60fb      	str	r3, [r7, #12]
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	f7ff fe21 	bl	800f8d2 <LL_RCC_SetRNGClockSource>
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f7ff fe34 	bl	800f8fe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc9a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800fc9e:	d107      	bne.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800fca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fcaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fcae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d022      	beq.n	800fd02 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7ff fe3d 	bl	800f940 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcce:	d107      	bne.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800fcd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fcda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fcde:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fce8:	d10b      	bne.n	800fd02 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 f8dd 	bl	800feae <RCCEx_PLLSAI1_ConfigNR>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fcf8:	7ffb      	ldrb	r3, [r7, #31]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800fcfe:	7ffb      	ldrb	r3, [r7, #31]
 800fd00:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d004      	beq.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7ff fd26 	bl	800f764 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d009      	beq.n	800fd38 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fd45 	bl	800f7b8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff fd2c 	bl	800f790 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800fd38:	7fbb      	ldrb	r3, [r7, #30]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3720      	adds	r7, #32
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}

0800fd42 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fd42:	b580      	push	{r7, lr}
 800fd44:	b084      	sub	sp, #16
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fd4e:	f7ff fe61 	bl	800fa14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fd52:	f7f9 f9db 	bl	800910c <HAL_GetTick>
 800fd56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd58:	e009      	b.n	800fd6e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fd5a:	f7f9 f9d7 	bl	800910c <HAL_GetTick>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	2b02      	cmp	r3, #2
 800fd66:	d902      	bls.n	800fd6e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800fd68:	2303      	movs	r3, #3
 800fd6a:	73fb      	strb	r3, [r7, #15]
      break;
 800fd6c:	e004      	b.n	800fd78 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd6e:	f7ff fe60 	bl	800fa32 <LL_RCC_PLLSAI1_IsReady>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1f0      	bne.n	800fd5a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d137      	bne.n	800fdee <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fd7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd82:	691b      	ldr	r3, [r3, #16]
 800fd84:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	021b      	lsls	r3, r3, #8
 800fd8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd92:	4313      	orrs	r3, r2
 800fd94:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800fd96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fdac:	f7ff fe23 	bl	800f9f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fdb0:	f7f9 f9ac 	bl	800910c <HAL_GetTick>
 800fdb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fdb6:	e009      	b.n	800fdcc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fdb8:	f7f9 f9a8 	bl	800910c <HAL_GetTick>
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d902      	bls.n	800fdcc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	73fb      	strb	r3, [r7, #15]
        break;
 800fdca:	e004      	b.n	800fdd6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fdcc:	f7ff fe31 	bl	800fa32 <LL_RCC_PLLSAI1_IsReady>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d1f0      	bne.n	800fdb8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d108      	bne.n	800fdee <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fde0:	691a      	ldr	r2, [r3, #16]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fdea:	4313      	orrs	r3, r2
 800fdec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe00:	2300      	movs	r3, #0
 800fe02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fe04:	f7ff fe06 	bl	800fa14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe08:	f7f9 f980 	bl	800910c <HAL_GetTick>
 800fe0c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fe0e:	e009      	b.n	800fe24 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fe10:	f7f9 f97c 	bl	800910c <HAL_GetTick>
 800fe14:	4602      	mov	r2, r0
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	2b02      	cmp	r3, #2
 800fe1c:	d902      	bls.n	800fe24 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	73fb      	strb	r3, [r7, #15]
      break;
 800fe22:	e004      	b.n	800fe2e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fe24:	f7ff fe05 	bl	800fa32 <LL_RCC_PLLSAI1_IsReady>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1f0      	bne.n	800fe10 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800fe2e:	7bfb      	ldrb	r3, [r7, #15]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d137      	bne.n	800fea4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fe34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	021b      	lsls	r3, r3, #8
 800fe44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800fe4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fe62:	f7ff fdc8 	bl	800f9f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe66:	f7f9 f951 	bl	800910c <HAL_GetTick>
 800fe6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe6c:	e009      	b.n	800fe82 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fe6e:	f7f9 f94d 	bl	800910c <HAL_GetTick>
 800fe72:	4602      	mov	r2, r0
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d902      	bls.n	800fe82 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	73fb      	strb	r3, [r7, #15]
        break;
 800fe80:	e004      	b.n	800fe8c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe82:	f7ff fdd6 	bl	800fa32 <LL_RCC_PLLSAI1_IsReady>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d1f0      	bne.n	800fe6e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d108      	bne.n	800fea4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fe92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe96:	691a      	ldr	r2, [r3, #16]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fea0:	4313      	orrs	r3, r2
 800fea2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800feae:	b580      	push	{r7, lr}
 800feb0:	b084      	sub	sp, #16
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800feb6:	2300      	movs	r3, #0
 800feb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800feba:	f7ff fdab 	bl	800fa14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800febe:	f7f9 f925 	bl	800910c <HAL_GetTick>
 800fec2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fec4:	e009      	b.n	800feda <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fec6:	f7f9 f921 	bl	800910c <HAL_GetTick>
 800feca:	4602      	mov	r2, r0
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d902      	bls.n	800feda <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800fed4:	2303      	movs	r3, #3
 800fed6:	73fb      	strb	r3, [r7, #15]
      break;
 800fed8:	e004      	b.n	800fee4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800feda:	f7ff fdaa 	bl	800fa32 <LL_RCC_PLLSAI1_IsReady>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d1f0      	bne.n	800fec6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d137      	bne.n	800ff5a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800feea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800feee:	691b      	ldr	r3, [r3, #16]
 800fef0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	021b      	lsls	r3, r3, #8
 800fefa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fefe:	4313      	orrs	r3, r2
 800ff00:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ff02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff14:	4313      	orrs	r3, r2
 800ff16:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ff18:	f7ff fd6d 	bl	800f9f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff1c:	f7f9 f8f6 	bl	800910c <HAL_GetTick>
 800ff20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ff22:	e009      	b.n	800ff38 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ff24:	f7f9 f8f2 	bl	800910c <HAL_GetTick>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	2b02      	cmp	r3, #2
 800ff30:	d902      	bls.n	800ff38 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ff32:	2303      	movs	r3, #3
 800ff34:	73fb      	strb	r3, [r7, #15]
        break;
 800ff36:	e004      	b.n	800ff42 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ff38:	f7ff fd7b 	bl	800fa32 <LL_RCC_PLLSAI1_IsReady>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d1f0      	bne.n	800ff24 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d108      	bne.n	800ff5a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ff48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff4c:	691a      	ldr	r2, [r3, #16]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff56:	4313      	orrs	r3, r2
 800ff58:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ff5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d101      	bne.n	800ff76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	e049      	b.n	801000a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d106      	bne.n	800ff90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f8 fcd2 	bl	8008934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2202      	movs	r2, #2
 800ff94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4610      	mov	r0, r2
 800ffa4:	f000 fa7c 	bl	80104a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2201      	movs	r2, #1
 800ffec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2201      	movs	r2, #1
 800fffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2201      	movs	r2, #1
 8010004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
	...

08010014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010014:	b480      	push	{r7}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b01      	cmp	r3, #1
 8010026:	d001      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e036      	b.n	801009a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2202      	movs	r2, #2
 8010030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	68da      	ldr	r2, [r3, #12]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f042 0201 	orr.w	r2, r2, #1
 8010042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a17      	ldr	r2, [pc, #92]	@ (80100a8 <HAL_TIM_Base_Start_IT+0x94>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d004      	beq.n	8010058 <HAL_TIM_Base_Start_IT+0x44>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010056:	d115      	bne.n	8010084 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	689a      	ldr	r2, [r3, #8]
 801005e:	4b13      	ldr	r3, [pc, #76]	@ (80100ac <HAL_TIM_Base_Start_IT+0x98>)
 8010060:	4013      	ands	r3, r2
 8010062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b06      	cmp	r3, #6
 8010068:	d015      	beq.n	8010096 <HAL_TIM_Base_Start_IT+0x82>
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010070:	d011      	beq.n	8010096 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f042 0201 	orr.w	r2, r2, #1
 8010080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010082:	e008      	b.n	8010096 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f042 0201 	orr.w	r2, r2, #1
 8010092:	601a      	str	r2, [r3, #0]
 8010094:	e000      	b.n	8010098 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010098:	2300      	movs	r3, #0
}
 801009a:	4618      	mov	r0, r3
 801009c:	3714      	adds	r7, #20
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	40012c00 	.word	0x40012c00
 80100ac:	00010007 	.word	0x00010007

080100b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	f003 0302 	and.w	r3, r3, #2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d020      	beq.n	8010114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f003 0302 	and.w	r3, r3, #2
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d01b      	beq.n	8010114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f06f 0202 	mvn.w	r2, #2
 80100e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2201      	movs	r2, #1
 80100ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	699b      	ldr	r3, [r3, #24]
 80100f2:	f003 0303 	and.w	r3, r3, #3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d003      	beq.n	8010102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f9b2 	bl	8010464 <HAL_TIM_IC_CaptureCallback>
 8010100:	e005      	b.n	801010e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f9a4 	bl	8010450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f9b5 	bl	8010478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2200      	movs	r2, #0
 8010112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	f003 0304 	and.w	r3, r3, #4
 801011a:	2b00      	cmp	r3, #0
 801011c:	d020      	beq.n	8010160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f003 0304 	and.w	r3, r3, #4
 8010124:	2b00      	cmp	r3, #0
 8010126:	d01b      	beq.n	8010160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f06f 0204 	mvn.w	r2, #4
 8010130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2202      	movs	r2, #2
 8010136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	699b      	ldr	r3, [r3, #24]
 801013e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010142:	2b00      	cmp	r3, #0
 8010144:	d003      	beq.n	801014e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f98c 	bl	8010464 <HAL_TIM_IC_CaptureCallback>
 801014c:	e005      	b.n	801015a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f97e 	bl	8010450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 f98f 	bl	8010478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f003 0308 	and.w	r3, r3, #8
 8010166:	2b00      	cmp	r3, #0
 8010168:	d020      	beq.n	80101ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f003 0308 	and.w	r3, r3, #8
 8010170:	2b00      	cmp	r3, #0
 8010172:	d01b      	beq.n	80101ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f06f 0208 	mvn.w	r2, #8
 801017c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2204      	movs	r2, #4
 8010182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	69db      	ldr	r3, [r3, #28]
 801018a:	f003 0303 	and.w	r3, r3, #3
 801018e:	2b00      	cmp	r3, #0
 8010190:	d003      	beq.n	801019a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f966 	bl	8010464 <HAL_TIM_IC_CaptureCallback>
 8010198:	e005      	b.n	80101a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f958 	bl	8010450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f969 	bl	8010478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	f003 0310 	and.w	r3, r3, #16
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d020      	beq.n	80101f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f003 0310 	and.w	r3, r3, #16
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d01b      	beq.n	80101f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f06f 0210 	mvn.w	r2, #16
 80101c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2208      	movs	r2, #8
 80101ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	69db      	ldr	r3, [r3, #28]
 80101d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d003      	beq.n	80101e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 f940 	bl	8010464 <HAL_TIM_IC_CaptureCallback>
 80101e4:	e005      	b.n	80101f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 f932 	bl	8010450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 f943 	bl	8010478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	f003 0301 	and.w	r3, r3, #1
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00c      	beq.n	801021c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f003 0301 	and.w	r3, r3, #1
 8010208:	2b00      	cmp	r3, #0
 801020a:	d007      	beq.n	801021c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f06f 0201 	mvn.w	r2, #1
 8010214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f7f7 fe06 	bl	8007e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010222:	2b00      	cmp	r3, #0
 8010224:	d104      	bne.n	8010230 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00c      	beq.n	801024a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010236:	2b00      	cmp	r3, #0
 8010238:	d007      	beq.n	801024a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fa9b 	bl	8010780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00c      	beq.n	801026e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801025a:	2b00      	cmp	r3, #0
 801025c:	d007      	beq.n	801026e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fa93 	bl	8010794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00c      	beq.n	8010292 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801027e:	2b00      	cmp	r3, #0
 8010280:	d007      	beq.n	8010292 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801028a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 f8fd 	bl	801048c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	f003 0320 	and.w	r3, r3, #32
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00c      	beq.n	80102b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f003 0320 	and.w	r3, r3, #32
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d007      	beq.n	80102b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f06f 0220 	mvn.w	r2, #32
 80102ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fa5b 	bl	801076c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80102b6:	bf00      	nop
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b084      	sub	sp, #16
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80102c8:	2300      	movs	r3, #0
 80102ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d101      	bne.n	80102da <HAL_TIM_ConfigClockSource+0x1c>
 80102d6:	2302      	movs	r3, #2
 80102d8:	e0b6      	b.n	8010448 <HAL_TIM_ConfigClockSource+0x18a>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2202      	movs	r2, #2
 80102e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80102f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80102fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010304:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	68ba      	ldr	r2, [r7, #8]
 801030c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010316:	d03e      	beq.n	8010396 <HAL_TIM_ConfigClockSource+0xd8>
 8010318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801031c:	f200 8087 	bhi.w	801042e <HAL_TIM_ConfigClockSource+0x170>
 8010320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010324:	f000 8086 	beq.w	8010434 <HAL_TIM_ConfigClockSource+0x176>
 8010328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801032c:	d87f      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 801032e:	2b70      	cmp	r3, #112	@ 0x70
 8010330:	d01a      	beq.n	8010368 <HAL_TIM_ConfigClockSource+0xaa>
 8010332:	2b70      	cmp	r3, #112	@ 0x70
 8010334:	d87b      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 8010336:	2b60      	cmp	r3, #96	@ 0x60
 8010338:	d050      	beq.n	80103dc <HAL_TIM_ConfigClockSource+0x11e>
 801033a:	2b60      	cmp	r3, #96	@ 0x60
 801033c:	d877      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 801033e:	2b50      	cmp	r3, #80	@ 0x50
 8010340:	d03c      	beq.n	80103bc <HAL_TIM_ConfigClockSource+0xfe>
 8010342:	2b50      	cmp	r3, #80	@ 0x50
 8010344:	d873      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 8010346:	2b40      	cmp	r3, #64	@ 0x40
 8010348:	d058      	beq.n	80103fc <HAL_TIM_ConfigClockSource+0x13e>
 801034a:	2b40      	cmp	r3, #64	@ 0x40
 801034c:	d86f      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 801034e:	2b30      	cmp	r3, #48	@ 0x30
 8010350:	d064      	beq.n	801041c <HAL_TIM_ConfigClockSource+0x15e>
 8010352:	2b30      	cmp	r3, #48	@ 0x30
 8010354:	d86b      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 8010356:	2b20      	cmp	r3, #32
 8010358:	d060      	beq.n	801041c <HAL_TIM_ConfigClockSource+0x15e>
 801035a:	2b20      	cmp	r3, #32
 801035c:	d867      	bhi.n	801042e <HAL_TIM_ConfigClockSource+0x170>
 801035e:	2b00      	cmp	r3, #0
 8010360:	d05c      	beq.n	801041c <HAL_TIM_ConfigClockSource+0x15e>
 8010362:	2b10      	cmp	r3, #16
 8010364:	d05a      	beq.n	801041c <HAL_TIM_ConfigClockSource+0x15e>
 8010366:	e062      	b.n	801042e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010378:	f000 f978 	bl	801066c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801038a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	609a      	str	r2, [r3, #8]
      break;
 8010394:	e04f      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80103a6:	f000 f961 	bl	801066c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	689a      	ldr	r2, [r3, #8]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80103b8:	609a      	str	r2, [r3, #8]
      break;
 80103ba:	e03c      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103c8:	461a      	mov	r2, r3
 80103ca:	f000 f8d3 	bl	8010574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2150      	movs	r1, #80	@ 0x50
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 f92c 	bl	8010632 <TIM_ITRx_SetConfig>
      break;
 80103da:	e02c      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103e8:	461a      	mov	r2, r3
 80103ea:	f000 f8f2 	bl	80105d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2160      	movs	r1, #96	@ 0x60
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 f91c 	bl	8010632 <TIM_ITRx_SetConfig>
      break;
 80103fa:	e01c      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010408:	461a      	mov	r2, r3
 801040a:	f000 f8b3 	bl	8010574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2140      	movs	r1, #64	@ 0x40
 8010414:	4618      	mov	r0, r3
 8010416:	f000 f90c 	bl	8010632 <TIM_ITRx_SetConfig>
      break;
 801041a:	e00c      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681a      	ldr	r2, [r3, #0]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4619      	mov	r1, r3
 8010426:	4610      	mov	r0, r2
 8010428:	f000 f903 	bl	8010632 <TIM_ITRx_SetConfig>
      break;
 801042c:	e003      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	73fb      	strb	r3, [r7, #15]
      break;
 8010432:	e000      	b.n	8010436 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2201      	movs	r2, #1
 801043a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010446:	7bfb      	ldrb	r3, [r7, #15]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801046c:	bf00      	nop
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010480:	bf00      	nop
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010494:	bf00      	nop
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a2d      	ldr	r2, [pc, #180]	@ (8010568 <TIM_Base_SetConfig+0xc8>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d003      	beq.n	80104c0 <TIM_Base_SetConfig+0x20>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104be:	d108      	bne.n	80104d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a24      	ldr	r2, [pc, #144]	@ (8010568 <TIM_Base_SetConfig+0xc8>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d00b      	beq.n	80104f2 <TIM_Base_SetConfig+0x52>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104e0:	d007      	beq.n	80104f2 <TIM_Base_SetConfig+0x52>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a21      	ldr	r2, [pc, #132]	@ (801056c <TIM_Base_SetConfig+0xcc>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d003      	beq.n	80104f2 <TIM_Base_SetConfig+0x52>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a20      	ldr	r2, [pc, #128]	@ (8010570 <TIM_Base_SetConfig+0xd0>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d108      	bne.n	8010504 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	4313      	orrs	r3, r2
 8010502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	4313      	orrs	r3, r2
 8010510:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	689a      	ldr	r2, [r3, #8]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a10      	ldr	r2, [pc, #64]	@ (8010568 <TIM_Base_SetConfig+0xc8>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d007      	beq.n	801053a <TIM_Base_SetConfig+0x9a>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a0f      	ldr	r2, [pc, #60]	@ (801056c <TIM_Base_SetConfig+0xcc>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d003      	beq.n	801053a <TIM_Base_SetConfig+0x9a>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a0e      	ldr	r2, [pc, #56]	@ (8010570 <TIM_Base_SetConfig+0xd0>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d103      	bne.n	8010542 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	691a      	ldr	r2, [r3, #16]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f043 0204 	orr.w	r2, r3, #4
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	601a      	str	r2, [r3, #0]
}
 801055a:	bf00      	nop
 801055c:	3714      	adds	r7, #20
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	40012c00 	.word	0x40012c00
 801056c:	40014400 	.word	0x40014400
 8010570:	40014800 	.word	0x40014800

08010574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010574:	b480      	push	{r7}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a1b      	ldr	r3, [r3, #32]
 8010584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6a1b      	ldr	r3, [r3, #32]
 801058a:	f023 0201 	bic.w	r2, r3, #1
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801059e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	011b      	lsls	r3, r3, #4
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	4313      	orrs	r3, r2
 80105a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	f023 030a 	bic.w	r3, r3, #10
 80105b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80105b2:	697a      	ldr	r2, [r7, #20]
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	4313      	orrs	r3, r2
 80105b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	621a      	str	r2, [r3, #32]
}
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80105d2:	b480      	push	{r7}
 80105d4:	b087      	sub	sp, #28
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	60f8      	str	r0, [r7, #12]
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6a1b      	ldr	r3, [r3, #32]
 80105e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	f023 0210 	bic.w	r2, r3, #16
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80105fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	031b      	lsls	r3, r3, #12
 8010602:	693a      	ldr	r2, [r7, #16]
 8010604:	4313      	orrs	r3, r2
 8010606:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801060e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	697a      	ldr	r2, [r7, #20]
 8010616:	4313      	orrs	r3, r2
 8010618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	693a      	ldr	r2, [r7, #16]
 801061e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	697a      	ldr	r2, [r7, #20]
 8010624:	621a      	str	r2, [r3, #32]
}
 8010626:	bf00      	nop
 8010628:	371c      	adds	r7, #28
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr

08010632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010632:	b480      	push	{r7}
 8010634:	b085      	sub	sp, #20
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	689b      	ldr	r3, [r3, #8]
 8010640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801064c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	4313      	orrs	r3, r2
 8010654:	f043 0307 	orr.w	r3, r3, #7
 8010658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	609a      	str	r2, [r3, #8]
}
 8010660:	bf00      	nop
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801066c:	b480      	push	{r7}
 801066e:	b087      	sub	sp, #28
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	689b      	ldr	r3, [r3, #8]
 801067e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	021a      	lsls	r2, r3, #8
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	431a      	orrs	r2, r3
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	4313      	orrs	r3, r2
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	4313      	orrs	r3, r2
 8010698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	609a      	str	r2, [r3, #8]
}
 80106a0:	bf00      	nop
 80106a2:	371c      	adds	r7, #28
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d101      	bne.n	80106c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106c0:	2302      	movs	r3, #2
 80106c2:	e04a      	b.n	801075a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2201      	movs	r2, #1
 80106c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2202      	movs	r2, #2
 80106d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4a1f      	ldr	r2, [pc, #124]	@ (8010768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d108      	bne.n	8010700 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80106f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	4313      	orrs	r3, r2
 80106fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	4313      	orrs	r3, r2
 8010710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4a12      	ldr	r2, [pc, #72]	@ (8010768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d004      	beq.n	801072e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801072c:	d10c      	bne.n	8010748 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	4313      	orrs	r3, r2
 801073e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68ba      	ldr	r2, [r7, #8]
 8010746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2201      	movs	r2, #1
 801074c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2200      	movs	r2, #0
 8010754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3714      	adds	r7, #20
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop
 8010768:	40012c00 	.word	0x40012c00

0801076c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801076c:	b480      	push	{r7}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010774:	bf00      	nop
 8010776:	370c      	adds	r7, #12
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801079c:	bf00      	nop
 801079e:	370c      	adds	r7, #12
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <LL_RCC_GetUSARTClockSource>:
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80107b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80107b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4013      	ands	r3, r2
}
 80107bc:	4618      	mov	r0, r3
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr

080107c8 <LL_RCC_GetLPUARTClockSource>:
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80107d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80107d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4013      	ands	r3, r2
}
 80107dc:	4618      	mov	r0, r3
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107f6:	2301      	movs	r3, #1
 80107f8:	e042      	b.n	8010880 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010800:	2b00      	cmp	r3, #0
 8010802:	d106      	bne.n	8010812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2200      	movs	r2, #0
 8010808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f000 f83b 	bl	8010888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2224      	movs	r2, #36	@ 0x24
 8010816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f022 0201 	bic.w	r2, r2, #1
 8010828:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 fae8 	bl	8010e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f000 f8bd 	bl	80109b8 <UART_SetConfig>
 801083e:	4603      	mov	r3, r0
 8010840:	2b01      	cmp	r3, #1
 8010842:	d101      	bne.n	8010848 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010844:	2301      	movs	r3, #1
 8010846:	e01b      	b.n	8010880 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	685a      	ldr	r2, [r3, #4]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	689a      	ldr	r2, [r3, #8]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f042 0201 	orr.w	r2, r2, #1
 8010876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f000 fb67 	bl	8010f4c <UART_CheckIdleState>
 801087e:	4603      	mov	r3, r0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8010890:	bf00      	nop
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b08a      	sub	sp, #40	@ 0x28
 80108a0:	af02      	add	r7, sp, #8
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	603b      	str	r3, [r7, #0]
 80108a8:	4613      	mov	r3, r2
 80108aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108b2:	2b20      	cmp	r3, #32
 80108b4:	d17b      	bne.n	80109ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <HAL_UART_Transmit+0x26>
 80108bc:	88fb      	ldrh	r3, [r7, #6]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d101      	bne.n	80108c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80108c2:	2301      	movs	r3, #1
 80108c4:	e074      	b.n	80109b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2200      	movs	r2, #0
 80108ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2221      	movs	r2, #33	@ 0x21
 80108d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80108d6:	f7f8 fc19 	bl	800910c <HAL_GetTick>
 80108da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	88fa      	ldrh	r2, [r7, #6]
 80108e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	88fa      	ldrh	r2, [r7, #6]
 80108e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	689b      	ldr	r3, [r3, #8]
 80108f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108f4:	d108      	bne.n	8010908 <HAL_UART_Transmit+0x6c>
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	691b      	ldr	r3, [r3, #16]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d104      	bne.n	8010908 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	61bb      	str	r3, [r7, #24]
 8010906:	e003      	b.n	8010910 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801090c:	2300      	movs	r3, #0
 801090e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010910:	e030      	b.n	8010974 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	2200      	movs	r2, #0
 801091a:	2180      	movs	r1, #128	@ 0x80
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f000 fbbf 	bl	80110a0 <UART_WaitOnFlagUntilTimeout>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d005      	beq.n	8010934 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2220      	movs	r2, #32
 801092c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010930:	2303      	movs	r3, #3
 8010932:	e03d      	b.n	80109b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10b      	bne.n	8010952 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	461a      	mov	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010948:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	3302      	adds	r3, #2
 801094e:	61bb      	str	r3, [r7, #24]
 8010950:	e007      	b.n	8010962 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	781a      	ldrb	r2, [r3, #0]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	3301      	adds	r3, #1
 8010960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010968:	b29b      	uxth	r3, r3
 801096a:	3b01      	subs	r3, #1
 801096c:	b29a      	uxth	r2, r3
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801097a:	b29b      	uxth	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1c8      	bne.n	8010912 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	2200      	movs	r2, #0
 8010988:	2140      	movs	r1, #64	@ 0x40
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f000 fb88 	bl	80110a0 <UART_WaitOnFlagUntilTimeout>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d005      	beq.n	80109a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2220      	movs	r2, #32
 801099a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801099e:	2303      	movs	r3, #3
 80109a0:	e006      	b.n	80109b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2220      	movs	r2, #32
 80109a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	e000      	b.n	80109b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80109ae:	2302      	movs	r3, #2
  }
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3720      	adds	r7, #32
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109bc:	b08c      	sub	sp, #48	@ 0x30
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109c2:	2300      	movs	r3, #0
 80109c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	689a      	ldr	r2, [r3, #8]
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	691b      	ldr	r3, [r3, #16]
 80109d0:	431a      	orrs	r2, r3
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	695b      	ldr	r3, [r3, #20]
 80109d6:	431a      	orrs	r2, r3
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	69db      	ldr	r3, [r3, #28]
 80109dc:	4313      	orrs	r3, r2
 80109de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	4baf      	ldr	r3, [pc, #700]	@ (8010ca4 <UART_SetConfig+0x2ec>)
 80109e8:	4013      	ands	r3, r2
 80109ea:	697a      	ldr	r2, [r7, #20]
 80109ec:	6812      	ldr	r2, [r2, #0]
 80109ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109f0:	430b      	orrs	r3, r1
 80109f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	68da      	ldr	r2, [r3, #12]
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	430a      	orrs	r2, r1
 8010a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4aa4      	ldr	r2, [pc, #656]	@ (8010ca8 <UART_SetConfig+0x2f0>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d004      	beq.n	8010a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	6a1b      	ldr	r3, [r3, #32]
 8010a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a20:	4313      	orrs	r3, r2
 8010a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	689b      	ldr	r3, [r3, #8]
 8010a2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010a2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010a32:	697a      	ldr	r2, [r7, #20]
 8010a34:	6812      	ldr	r2, [r2, #0]
 8010a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a38:	430b      	orrs	r3, r1
 8010a3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a42:	f023 010f 	bic.w	r1, r3, #15
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	430a      	orrs	r2, r1
 8010a50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4a95      	ldr	r2, [pc, #596]	@ (8010cac <UART_SetConfig+0x2f4>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d125      	bne.n	8010aa8 <UART_SetConfig+0xf0>
 8010a5c:	2003      	movs	r0, #3
 8010a5e:	f7ff fea3 	bl	80107a8 <LL_RCC_GetUSARTClockSource>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d81b      	bhi.n	8010aa0 <UART_SetConfig+0xe8>
 8010a68:	a201      	add	r2, pc, #4	@ (adr r2, 8010a70 <UART_SetConfig+0xb8>)
 8010a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6e:	bf00      	nop
 8010a70:	08010a81 	.word	0x08010a81
 8010a74:	08010a91 	.word	0x08010a91
 8010a78:	08010a89 	.word	0x08010a89
 8010a7c:	08010a99 	.word	0x08010a99
 8010a80:	2301      	movs	r3, #1
 8010a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a86:	e042      	b.n	8010b0e <UART_SetConfig+0x156>
 8010a88:	2302      	movs	r3, #2
 8010a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a8e:	e03e      	b.n	8010b0e <UART_SetConfig+0x156>
 8010a90:	2304      	movs	r3, #4
 8010a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a96:	e03a      	b.n	8010b0e <UART_SetConfig+0x156>
 8010a98:	2308      	movs	r3, #8
 8010a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a9e:	e036      	b.n	8010b0e <UART_SetConfig+0x156>
 8010aa0:	2310      	movs	r3, #16
 8010aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aa6:	e032      	b.n	8010b0e <UART_SetConfig+0x156>
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a7e      	ldr	r2, [pc, #504]	@ (8010ca8 <UART_SetConfig+0x2f0>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d12a      	bne.n	8010b08 <UART_SetConfig+0x150>
 8010ab2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010ab6:	f7ff fe87 	bl	80107c8 <LL_RCC_GetLPUARTClockSource>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ac0:	d01a      	beq.n	8010af8 <UART_SetConfig+0x140>
 8010ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ac6:	d81b      	bhi.n	8010b00 <UART_SetConfig+0x148>
 8010ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010acc:	d00c      	beq.n	8010ae8 <UART_SetConfig+0x130>
 8010ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ad2:	d815      	bhi.n	8010b00 <UART_SetConfig+0x148>
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d003      	beq.n	8010ae0 <UART_SetConfig+0x128>
 8010ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010adc:	d008      	beq.n	8010af0 <UART_SetConfig+0x138>
 8010ade:	e00f      	b.n	8010b00 <UART_SetConfig+0x148>
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ae6:	e012      	b.n	8010b0e <UART_SetConfig+0x156>
 8010ae8:	2302      	movs	r3, #2
 8010aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aee:	e00e      	b.n	8010b0e <UART_SetConfig+0x156>
 8010af0:	2304      	movs	r3, #4
 8010af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010af6:	e00a      	b.n	8010b0e <UART_SetConfig+0x156>
 8010af8:	2308      	movs	r3, #8
 8010afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010afe:	e006      	b.n	8010b0e <UART_SetConfig+0x156>
 8010b00:	2310      	movs	r3, #16
 8010b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b06:	e002      	b.n	8010b0e <UART_SetConfig+0x156>
 8010b08:	2310      	movs	r3, #16
 8010b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a65      	ldr	r2, [pc, #404]	@ (8010ca8 <UART_SetConfig+0x2f0>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	f040 8097 	bne.w	8010c48 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b1e:	2b08      	cmp	r3, #8
 8010b20:	d823      	bhi.n	8010b6a <UART_SetConfig+0x1b2>
 8010b22:	a201      	add	r2, pc, #4	@ (adr r2, 8010b28 <UART_SetConfig+0x170>)
 8010b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b28:	08010b4d 	.word	0x08010b4d
 8010b2c:	08010b6b 	.word	0x08010b6b
 8010b30:	08010b55 	.word	0x08010b55
 8010b34:	08010b6b 	.word	0x08010b6b
 8010b38:	08010b5b 	.word	0x08010b5b
 8010b3c:	08010b6b 	.word	0x08010b6b
 8010b40:	08010b6b 	.word	0x08010b6b
 8010b44:	08010b6b 	.word	0x08010b6b
 8010b48:	08010b63 	.word	0x08010b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b4c:	f7fe fd06 	bl	800f55c <HAL_RCC_GetPCLK1Freq>
 8010b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b52:	e010      	b.n	8010b76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b54:	4b56      	ldr	r3, [pc, #344]	@ (8010cb0 <UART_SetConfig+0x2f8>)
 8010b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b58:	e00d      	b.n	8010b76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b5a:	f7fe fc7f 	bl	800f45c <HAL_RCC_GetSysClockFreq>
 8010b5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b60:	e009      	b.n	8010b76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b68:	e005      	b.n	8010b76 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f000 812b 	beq.w	8010dd4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b82:	4a4c      	ldr	r2, [pc, #304]	@ (8010cb4 <UART_SetConfig+0x2fc>)
 8010b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	685a      	ldr	r2, [r3, #4]
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	69ba      	ldr	r2, [r7, #24]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d305      	bcc.n	8010bae <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ba8:	69ba      	ldr	r2, [r7, #24]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d903      	bls.n	8010bb6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010bb4:	e10e      	b.n	8010dd4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb8:	2200      	movs	r2, #0
 8010bba:	60bb      	str	r3, [r7, #8]
 8010bbc:	60fa      	str	r2, [r7, #12]
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8010cb4 <UART_SetConfig+0x2fc>)
 8010bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	2200      	movs	r2, #0
 8010bcc:	603b      	str	r3, [r7, #0]
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010bd8:	f7f0 f80e 	bl	8000bf8 <__aeabi_uldivmod>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	4610      	mov	r0, r2
 8010be2:	4619      	mov	r1, r3
 8010be4:	f04f 0200 	mov.w	r2, #0
 8010be8:	f04f 0300 	mov.w	r3, #0
 8010bec:	020b      	lsls	r3, r1, #8
 8010bee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010bf2:	0202      	lsls	r2, r0, #8
 8010bf4:	6979      	ldr	r1, [r7, #20]
 8010bf6:	6849      	ldr	r1, [r1, #4]
 8010bf8:	0849      	lsrs	r1, r1, #1
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	4605      	mov	r5, r0
 8010c00:	eb12 0804 	adds.w	r8, r2, r4
 8010c04:	eb43 0905 	adc.w	r9, r3, r5
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	469a      	mov	sl, r3
 8010c10:	4693      	mov	fp, r2
 8010c12:	4652      	mov	r2, sl
 8010c14:	465b      	mov	r3, fp
 8010c16:	4640      	mov	r0, r8
 8010c18:	4649      	mov	r1, r9
 8010c1a:	f7ef ffed 	bl	8000bf8 <__aeabi_uldivmod>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	460b      	mov	r3, r1
 8010c22:	4613      	mov	r3, r2
 8010c24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c26:	6a3b      	ldr	r3, [r7, #32]
 8010c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010c2c:	d308      	bcc.n	8010c40 <UART_SetConfig+0x288>
 8010c2e:	6a3b      	ldr	r3, [r7, #32]
 8010c30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c34:	d204      	bcs.n	8010c40 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	6a3a      	ldr	r2, [r7, #32]
 8010c3c:	60da      	str	r2, [r3, #12]
 8010c3e:	e0c9      	b.n	8010dd4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8010c40:	2301      	movs	r3, #1
 8010c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010c46:	e0c5      	b.n	8010dd4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	69db      	ldr	r3, [r3, #28]
 8010c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c50:	d16d      	bne.n	8010d2e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8010c52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010c56:	3b01      	subs	r3, #1
 8010c58:	2b07      	cmp	r3, #7
 8010c5a:	d82d      	bhi.n	8010cb8 <UART_SetConfig+0x300>
 8010c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8010c64 <UART_SetConfig+0x2ac>)
 8010c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c62:	bf00      	nop
 8010c64:	08010c85 	.word	0x08010c85
 8010c68:	08010c8d 	.word	0x08010c8d
 8010c6c:	08010cb9 	.word	0x08010cb9
 8010c70:	08010c93 	.word	0x08010c93
 8010c74:	08010cb9 	.word	0x08010cb9
 8010c78:	08010cb9 	.word	0x08010cb9
 8010c7c:	08010cb9 	.word	0x08010cb9
 8010c80:	08010c9b 	.word	0x08010c9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c84:	f7fe fc80 	bl	800f588 <HAL_RCC_GetPCLK2Freq>
 8010c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c8a:	e01b      	b.n	8010cc4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c8c:	4b08      	ldr	r3, [pc, #32]	@ (8010cb0 <UART_SetConfig+0x2f8>)
 8010c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c90:	e018      	b.n	8010cc4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c92:	f7fe fbe3 	bl	800f45c <HAL_RCC_GetSysClockFreq>
 8010c96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c98:	e014      	b.n	8010cc4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010ca0:	e010      	b.n	8010cc4 <UART_SetConfig+0x30c>
 8010ca2:	bf00      	nop
 8010ca4:	cfff69f3 	.word	0xcfff69f3
 8010ca8:	40008000 	.word	0x40008000
 8010cac:	40013800 	.word	0x40013800
 8010cb0:	00f42400 	.word	0x00f42400
 8010cb4:	0801c34c 	.word	0x0801c34c
      default:
        pclk = 0U;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f000 8084 	beq.w	8010dd4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8010e00 <UART_SetConfig+0x448>)
 8010cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cde:	005a      	lsls	r2, r3, #1
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	085b      	lsrs	r3, r3, #1
 8010ce6:	441a      	add	r2, r3
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cf0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	2b0f      	cmp	r3, #15
 8010cf6:	d916      	bls.n	8010d26 <UART_SetConfig+0x36e>
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010cfe:	d212      	bcs.n	8010d26 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d00:	6a3b      	ldr	r3, [r7, #32]
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	f023 030f 	bic.w	r3, r3, #15
 8010d08:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010d0a:	6a3b      	ldr	r3, [r7, #32]
 8010d0c:	085b      	lsrs	r3, r3, #1
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	f003 0307 	and.w	r3, r3, #7
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	8bfb      	ldrh	r3, [r7, #30]
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	8bfa      	ldrh	r2, [r7, #30]
 8010d22:	60da      	str	r2, [r3, #12]
 8010d24:	e056      	b.n	8010dd4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010d26:	2301      	movs	r3, #1
 8010d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010d2c:	e052      	b.n	8010dd4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010d32:	3b01      	subs	r3, #1
 8010d34:	2b07      	cmp	r3, #7
 8010d36:	d822      	bhi.n	8010d7e <UART_SetConfig+0x3c6>
 8010d38:	a201      	add	r2, pc, #4	@ (adr r2, 8010d40 <UART_SetConfig+0x388>)
 8010d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3e:	bf00      	nop
 8010d40:	08010d61 	.word	0x08010d61
 8010d44:	08010d69 	.word	0x08010d69
 8010d48:	08010d7f 	.word	0x08010d7f
 8010d4c:	08010d6f 	.word	0x08010d6f
 8010d50:	08010d7f 	.word	0x08010d7f
 8010d54:	08010d7f 	.word	0x08010d7f
 8010d58:	08010d7f 	.word	0x08010d7f
 8010d5c:	08010d77 	.word	0x08010d77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d60:	f7fe fc12 	bl	800f588 <HAL_RCC_GetPCLK2Freq>
 8010d64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d66:	e010      	b.n	8010d8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d68:	4b26      	ldr	r3, [pc, #152]	@ (8010e04 <UART_SetConfig+0x44c>)
 8010d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d6c:	e00d      	b.n	8010d8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d6e:	f7fe fb75 	bl	800f45c <HAL_RCC_GetSysClockFreq>
 8010d72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d74:	e009      	b.n	8010d8a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d7c:	e005      	b.n	8010d8a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010d82:	2301      	movs	r3, #1
 8010d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010d88:	bf00      	nop
    }

    if (pclk != 0U)
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d021      	beq.n	8010dd4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d94:	4a1a      	ldr	r2, [pc, #104]	@ (8010e00 <UART_SetConfig+0x448>)
 8010d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	085b      	lsrs	r3, r3, #1
 8010da8:	441a      	add	r2, r3
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8010db2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010db4:	6a3b      	ldr	r3, [r7, #32]
 8010db6:	2b0f      	cmp	r3, #15
 8010db8:	d909      	bls.n	8010dce <UART_SetConfig+0x416>
 8010dba:	6a3b      	ldr	r3, [r7, #32]
 8010dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010dc0:	d205      	bcs.n	8010dce <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010dc2:	6a3b      	ldr	r3, [r7, #32]
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	60da      	str	r2, [r3, #12]
 8010dcc:	e002      	b.n	8010dd4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	2201      	movs	r2, #1
 8010de0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	2200      	movs	r2, #0
 8010de8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	2200      	movs	r2, #0
 8010dee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010df0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3730      	adds	r7, #48	@ 0x30
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010dfe:	bf00      	nop
 8010e00:	0801c34c 	.word	0x0801c34c
 8010e04:	00f42400 	.word	0x00f42400

08010e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e14:	f003 0308 	and.w	r3, r3, #8
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00a      	beq.n	8010e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	430a      	orrs	r2, r1
 8010e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00a      	beq.n	8010e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	430a      	orrs	r2, r1
 8010e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e58:	f003 0302 	and.w	r3, r3, #2
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00a      	beq.n	8010e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	430a      	orrs	r2, r1
 8010e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e7a:	f003 0304 	and.w	r3, r3, #4
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d00a      	beq.n	8010e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	430a      	orrs	r2, r1
 8010e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e9c:	f003 0310 	and.w	r3, r3, #16
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00a      	beq.n	8010eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	430a      	orrs	r2, r1
 8010eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ebe:	f003 0320 	and.w	r3, r3, #32
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00a      	beq.n	8010edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d01a      	beq.n	8010f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	430a      	orrs	r2, r1
 8010efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010f06:	d10a      	bne.n	8010f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	430a      	orrs	r2, r1
 8010f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00a      	beq.n	8010f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	430a      	orrs	r2, r1
 8010f3e:	605a      	str	r2, [r3, #4]
  }
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b098      	sub	sp, #96	@ 0x60
 8010f50:	af02      	add	r7, sp, #8
 8010f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f5c:	f7f8 f8d6 	bl	800910c <HAL_GetTick>
 8010f60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f003 0308 	and.w	r3, r3, #8
 8010f6c:	2b08      	cmp	r3, #8
 8010f6e:	d12f      	bne.n	8010fd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f88e 	bl	80110a0 <UART_WaitOnFlagUntilTimeout>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d022      	beq.n	8010fd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f92:	e853 3f00 	ldrex	r3, [r3]
 8010f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010faa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fb0:	e841 2300 	strex	r3, r2, [r1]
 8010fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1e6      	bne.n	8010f8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2220      	movs	r2, #32
 8010fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fcc:	2303      	movs	r3, #3
 8010fce:	e063      	b.n	8011098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f003 0304 	and.w	r3, r3, #4
 8010fda:	2b04      	cmp	r3, #4
 8010fdc:	d149      	bne.n	8011072 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 f857 	bl	80110a0 <UART_WaitOnFlagUntilTimeout>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d03c      	beq.n	8011072 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011000:	e853 3f00 	ldrex	r3, [r3]
 8011004:	623b      	str	r3, [r7, #32]
   return(result);
 8011006:	6a3b      	ldr	r3, [r7, #32]
 8011008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801100c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011016:	633b      	str	r3, [r7, #48]	@ 0x30
 8011018:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801101c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801101e:	e841 2300 	strex	r3, r2, [r1]
 8011022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1e6      	bne.n	8010ff8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	3308      	adds	r3, #8
 8011030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	e853 3f00 	ldrex	r3, [r3]
 8011038:	60fb      	str	r3, [r7, #12]
   return(result);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f023 0301 	bic.w	r3, r3, #1
 8011040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	3308      	adds	r3, #8
 8011048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801104a:	61fa      	str	r2, [r7, #28]
 801104c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104e:	69b9      	ldr	r1, [r7, #24]
 8011050:	69fa      	ldr	r2, [r7, #28]
 8011052:	e841 2300 	strex	r3, r2, [r1]
 8011056:	617b      	str	r3, [r7, #20]
   return(result);
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1e5      	bne.n	801102a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2220      	movs	r2, #32
 8011062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2200      	movs	r2, #0
 801106a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801106e:	2303      	movs	r3, #3
 8011070:	e012      	b.n	8011098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2220      	movs	r2, #32
 8011076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2220      	movs	r2, #32
 801107e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2200      	movs	r2, #0
 801108c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011096:	2300      	movs	r3, #0
}
 8011098:	4618      	mov	r0, r3
 801109a:	3758      	adds	r7, #88	@ 0x58
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	603b      	str	r3, [r7, #0]
 80110ac:	4613      	mov	r3, r2
 80110ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110b0:	e04f      	b.n	8011152 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b8:	d04b      	beq.n	8011152 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110ba:	f7f8 f827 	bl	800910c <HAL_GetTick>
 80110be:	4602      	mov	r2, r0
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	69ba      	ldr	r2, [r7, #24]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d302      	bcc.n	80110d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d101      	bne.n	80110d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80110d0:	2303      	movs	r3, #3
 80110d2:	e04e      	b.n	8011172 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f003 0304 	and.w	r3, r3, #4
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d037      	beq.n	8011152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	2b80      	cmp	r3, #128	@ 0x80
 80110e6:	d034      	beq.n	8011152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	2b40      	cmp	r3, #64	@ 0x40
 80110ec:	d031      	beq.n	8011152 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	69db      	ldr	r3, [r3, #28]
 80110f4:	f003 0308 	and.w	r3, r3, #8
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d110      	bne.n	801111e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	2208      	movs	r2, #8
 8011102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f000 f838 	bl	801117a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2208      	movs	r2, #8
 801110e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2200      	movs	r2, #0
 8011116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801111a:	2301      	movs	r3, #1
 801111c:	e029      	b.n	8011172 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	69db      	ldr	r3, [r3, #28]
 8011124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801112c:	d111      	bne.n	8011152 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	f000 f81e 	bl	801117a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2220      	movs	r2, #32
 8011142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801114e:	2303      	movs	r3, #3
 8011150:	e00f      	b.n	8011172 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	69da      	ldr	r2, [r3, #28]
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	4013      	ands	r3, r2
 801115c:	68ba      	ldr	r2, [r7, #8]
 801115e:	429a      	cmp	r2, r3
 8011160:	bf0c      	ite	eq
 8011162:	2301      	moveq	r3, #1
 8011164:	2300      	movne	r3, #0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	461a      	mov	r2, r3
 801116a:	79fb      	ldrb	r3, [r7, #7]
 801116c:	429a      	cmp	r2, r3
 801116e:	d0a0      	beq.n	80110b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801117a:	b480      	push	{r7}
 801117c:	b095      	sub	sp, #84	@ 0x54
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801118a:	e853 3f00 	ldrex	r3, [r3]
 801118e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	461a      	mov	r2, r3
 801119e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80111a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80111a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111a8:	e841 2300 	strex	r3, r2, [r1]
 80111ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80111ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1e6      	bne.n	8011182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	3308      	adds	r3, #8
 80111ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	e853 3f00 	ldrex	r3, [r3]
 80111c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111ca:	f023 0301 	bic.w	r3, r3, #1
 80111ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	3308      	adds	r3, #8
 80111d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80111da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80111de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111e0:	e841 2300 	strex	r3, r2, [r1]
 80111e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80111e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1e3      	bne.n	80111b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d118      	bne.n	8011226 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	e853 3f00 	ldrex	r3, [r3]
 8011200:	60bb      	str	r3, [r7, #8]
   return(result);
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	f023 0310 	bic.w	r3, r3, #16
 8011208:	647b      	str	r3, [r7, #68]	@ 0x44
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	461a      	mov	r2, r3
 8011210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011212:	61bb      	str	r3, [r7, #24]
 8011214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011216:	6979      	ldr	r1, [r7, #20]
 8011218:	69ba      	ldr	r2, [r7, #24]
 801121a:	e841 2300 	strex	r3, r2, [r1]
 801121e:	613b      	str	r3, [r7, #16]
   return(result);
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d1e6      	bne.n	80111f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2220      	movs	r2, #32
 801122a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801123a:	bf00      	nop
 801123c:	3754      	adds	r7, #84	@ 0x54
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr

08011246 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011246:	b480      	push	{r7}
 8011248:	b085      	sub	sp, #20
 801124a:	af00      	add	r7, sp, #0
 801124c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2200      	movs	r2, #0
 8011252:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011256:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801125a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	b29a      	uxth	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3714      	adds	r7, #20
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801127c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011280:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8011288:	b29a      	uxth	r2, r3
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	b29b      	uxth	r3, r3
 801128e:	43db      	mvns	r3, r3
 8011290:	b29b      	uxth	r3, r3
 8011292:	4013      	ands	r3, r2
 8011294:	b29a      	uxth	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3714      	adds	r7, #20
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr

080112aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80112aa:	b480      	push	{r7}
 80112ac:	b085      	sub	sp, #20
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	60f8      	str	r0, [r7, #12]
 80112b2:	1d3b      	adds	r3, r7, #4
 80112b4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2201      	movs	r2, #1
 80112bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2200      	movs	r2, #0
 80112c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2200      	movs	r2, #0
 80112cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3714      	adds	r7, #20
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
	...

080112e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b0a7      	sub	sp, #156	@ 0x9c
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80112f2:	2300      	movs	r3, #0
 80112f4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	4413      	add	r3, r2
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	b29b      	uxth	r3, r3
 8011306:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 801130a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801130e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	78db      	ldrb	r3, [r3, #3]
 8011316:	2b03      	cmp	r3, #3
 8011318:	d81f      	bhi.n	801135a <USB_ActivateEndpoint+0x72>
 801131a:	a201      	add	r2, pc, #4	@ (adr r2, 8011320 <USB_ActivateEndpoint+0x38>)
 801131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011320:	08011331 	.word	0x08011331
 8011324:	0801134d 	.word	0x0801134d
 8011328:	08011363 	.word	0x08011363
 801132c:	0801133f 	.word	0x0801133f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011330:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011338:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801133c:	e012      	b.n	8011364 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801133e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011342:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011346:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801134a:	e00b      	b.n	8011364 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801134c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011350:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011354:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011358:	e004      	b.n	8011364 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8011360:	e000      	b.n	8011364 <USB_ActivateEndpoint+0x7c>
      break;
 8011362:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	441a      	add	r2, r3
 801136e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801137a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801137e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011382:	b29b      	uxth	r3, r3
 8011384:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	4413      	add	r3, r2
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	b29b      	uxth	r3, r3
 8011394:	b21b      	sxth	r3, r3
 8011396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801139a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801139e:	b21a      	sxth	r2, r3
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	b21b      	sxth	r3, r3
 80113a6:	4313      	orrs	r3, r2
 80113a8:	b21b      	sxth	r3, r3
 80113aa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	441a      	add	r2, r3
 80113b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80113bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	7b1b      	ldrb	r3, [r3, #12]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	f040 8180 	bne.w	80116da <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	785b      	ldrb	r3, [r3, #1]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f000 8084 	beq.w	80114ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	61bb      	str	r3, [r7, #24]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	461a      	mov	r2, r3
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	4413      	add	r3, r2
 80113f6:	61bb      	str	r3, [r7, #24]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	00da      	lsls	r2, r3, #3
 80113fe:	69bb      	ldr	r3, [r7, #24]
 8011400:	4413      	add	r3, r2
 8011402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011406:	617b      	str	r3, [r7, #20]
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	88db      	ldrh	r3, [r3, #6]
 801140c:	085b      	lsrs	r3, r3, #1
 801140e:	b29b      	uxth	r3, r3
 8011410:	005b      	lsls	r3, r3, #1
 8011412:	b29a      	uxth	r2, r3
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	4413      	add	r3, r2
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	827b      	strh	r3, [r7, #18]
 8011426:	8a7b      	ldrh	r3, [r7, #18]
 8011428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801142c:	2b00      	cmp	r3, #0
 801142e:	d01b      	beq.n	8011468 <USB_ActivateEndpoint+0x180>
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	b29b      	uxth	r3, r3
 801143e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011446:	823b      	strh	r3, [r7, #16]
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	441a      	add	r2, r3
 8011452:	8a3b      	ldrh	r3, [r7, #16]
 8011454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801145c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011464:	b29b      	uxth	r3, r3
 8011466:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	78db      	ldrb	r3, [r3, #3]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d020      	beq.n	80114b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	b29b      	uxth	r3, r3
 801147e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011486:	81bb      	strh	r3, [r7, #12]
 8011488:	89bb      	ldrh	r3, [r7, #12]
 801148a:	f083 0320 	eor.w	r3, r3, #32
 801148e:	81bb      	strh	r3, [r7, #12]
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	441a      	add	r2, r3
 801149a:	89bb      	ldrh	r3, [r7, #12]
 801149c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	8013      	strh	r3, [r2, #0]
 80114b0:	e3f9      	b.n	8011ca6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	4413      	add	r3, r2
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114c8:	81fb      	strh	r3, [r7, #14]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	441a      	add	r2, r3
 80114d4:	89fb      	ldrh	r3, [r7, #14]
 80114d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	8013      	strh	r3, [r2, #0]
 80114ea:	e3dc      	b.n	8011ca6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	461a      	mov	r2, r3
 80114fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114fc:	4413      	add	r3, r2
 80114fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	00da      	lsls	r2, r3, #3
 8011506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011508:	4413      	add	r3, r2
 801150a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	88db      	ldrh	r3, [r3, #6]
 8011514:	085b      	lsrs	r3, r3, #1
 8011516:	b29b      	uxth	r3, r3
 8011518:	005b      	lsls	r3, r3, #1
 801151a:	b29a      	uxth	r2, r3
 801151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801152a:	b29b      	uxth	r3, r3
 801152c:	461a      	mov	r2, r3
 801152e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011530:	4413      	add	r3, r2
 8011532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	00da      	lsls	r2, r3, #3
 801153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801153c:	4413      	add	r3, r2
 801153e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011542:	627b      	str	r3, [r7, #36]	@ 0x24
 8011544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	b29b      	uxth	r3, r3
 801154a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801154e:	b29a      	uxth	r2, r3
 8011550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011552:	801a      	strh	r2, [r3, #0]
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	691b      	ldr	r3, [r3, #16]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10a      	bne.n	8011572 <USB_ActivateEndpoint+0x28a>
 801155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	b29b      	uxth	r3, r3
 8011562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801156a:	b29a      	uxth	r2, r3
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	801a      	strh	r2, [r3, #0]
 8011570:	e041      	b.n	80115f6 <USB_ActivateEndpoint+0x30e>
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	2b3e      	cmp	r3, #62	@ 0x3e
 8011578:	d81c      	bhi.n	80115b4 <USB_ActivateEndpoint+0x2cc>
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	691b      	ldr	r3, [r3, #16]
 801157e:	085b      	lsrs	r3, r3, #1
 8011580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	f003 0301 	and.w	r3, r3, #1
 801158c:	2b00      	cmp	r3, #0
 801158e:	d004      	beq.n	801159a <USB_ActivateEndpoint+0x2b2>
 8011590:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011594:	3301      	adds	r3, #1
 8011596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	b29a      	uxth	r2, r3
 80115a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	029b      	lsls	r3, r3, #10
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	4313      	orrs	r3, r2
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	801a      	strh	r2, [r3, #0]
 80115b2:	e020      	b.n	80115f6 <USB_ActivateEndpoint+0x30e>
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	095b      	lsrs	r3, r3, #5
 80115ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	f003 031f 	and.w	r3, r3, #31
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d104      	bne.n	80115d4 <USB_ActivateEndpoint+0x2ec>
 80115ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115ce:	3b01      	subs	r3, #1
 80115d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d6:	881b      	ldrh	r3, [r3, #0]
 80115d8:	b29a      	uxth	r2, r3
 80115da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115de:	b29b      	uxth	r3, r3
 80115e0:	029b      	lsls	r3, r3, #10
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4313      	orrs	r3, r2
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	4413      	add	r3, r2
 8011600:	881b      	ldrh	r3, [r3, #0]
 8011602:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011604:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801160a:	2b00      	cmp	r3, #0
 801160c:	d01b      	beq.n	8011646 <USB_ActivateEndpoint+0x35e>
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	4413      	add	r3, r2
 8011618:	881b      	ldrh	r3, [r3, #0]
 801161a:	b29b      	uxth	r3, r3
 801161c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011624:	843b      	strh	r3, [r7, #32]
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	441a      	add	r2, r3
 8011630:	8c3b      	ldrh	r3, [r7, #32]
 8011632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801163a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801163e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011642:	b29b      	uxth	r3, r3
 8011644:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d124      	bne.n	8011698 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	881b      	ldrh	r3, [r3, #0]
 801165a:	b29b      	uxth	r3, r3
 801165c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011664:	83bb      	strh	r3, [r7, #28]
 8011666:	8bbb      	ldrh	r3, [r7, #28]
 8011668:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801166c:	83bb      	strh	r3, [r7, #28]
 801166e:	8bbb      	ldrh	r3, [r7, #28]
 8011670:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011674:	83bb      	strh	r3, [r7, #28]
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	441a      	add	r2, r3
 8011680:	8bbb      	ldrh	r3, [r7, #28]
 8011682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801168a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801168e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011692:	b29b      	uxth	r3, r3
 8011694:	8013      	strh	r3, [r2, #0]
 8011696:	e306      	b.n	8011ca6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116ae:	83fb      	strh	r3, [r7, #30]
 80116b0:	8bfb      	ldrh	r3, [r7, #30]
 80116b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80116b6:	83fb      	strh	r3, [r7, #30]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	441a      	add	r2, r3
 80116c2:	8bfb      	ldrh	r3, [r7, #30]
 80116c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	8013      	strh	r3, [r2, #0]
 80116d8:	e2e5      	b.n	8011ca6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	78db      	ldrb	r3, [r3, #3]
 80116de:	2b02      	cmp	r3, #2
 80116e0:	d11e      	bne.n	8011720 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	4413      	add	r3, r2
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116f8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	441a      	add	r2, r3
 8011706:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801170a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801170e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011712:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801171a:	b29b      	uxth	r3, r3
 801171c:	8013      	strh	r3, [r2, #0]
 801171e:	e01d      	b.n	801175c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4413      	add	r3, r2
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	b29b      	uxth	r3, r3
 801172e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011736:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	009b      	lsls	r3, r3, #2
 8011742:	441a      	add	r2, r3
 8011744:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801174c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011758:	b29b      	uxth	r3, r3
 801175a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011766:	b29b      	uxth	r3, r3
 8011768:	461a      	mov	r2, r3
 801176a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801176c:	4413      	add	r3, r2
 801176e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	00da      	lsls	r2, r3, #3
 8011776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011778:	4413      	add	r3, r2
 801177a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801177e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	891b      	ldrh	r3, [r3, #8]
 8011784:	085b      	lsrs	r3, r3, #1
 8011786:	b29b      	uxth	r3, r3
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	b29a      	uxth	r2, r3
 801178c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801178e:	801a      	strh	r2, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	677b      	str	r3, [r7, #116]	@ 0x74
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801179a:	b29b      	uxth	r3, r3
 801179c:	461a      	mov	r2, r3
 801179e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117a0:	4413      	add	r3, r2
 80117a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	00da      	lsls	r2, r3, #3
 80117aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117ac:	4413      	add	r3, r2
 80117ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80117b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	895b      	ldrh	r3, [r3, #10]
 80117b8:	085b      	lsrs	r3, r3, #1
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	b29a      	uxth	r2, r3
 80117c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	785b      	ldrb	r3, [r3, #1]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f040 81af 	bne.w	8011b2c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	4413      	add	r3, r2
 80117d8:	881b      	ldrh	r3, [r3, #0]
 80117da:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80117de:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80117e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d01d      	beq.n	8011826 <USB_ActivateEndpoint+0x53e>
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	4413      	add	r3, r2
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011800:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011804:	687a      	ldr	r2, [r7, #4]
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	441a      	add	r2, r3
 801180e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8011812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801181a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801181e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011822:	b29b      	uxth	r3, r3
 8011824:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	009b      	lsls	r3, r3, #2
 801182e:	4413      	add	r3, r2
 8011830:	881b      	ldrh	r3, [r3, #0]
 8011832:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011836:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801183a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801183e:	2b00      	cmp	r3, #0
 8011840:	d01d      	beq.n	801187e <USB_ActivateEndpoint+0x596>
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4413      	add	r3, r2
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	b29b      	uxth	r3, r3
 8011850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011858:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	441a      	add	r2, r3
 8011866:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801186a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801186e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011876:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801187a:	b29b      	uxth	r3, r3
 801187c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	785b      	ldrb	r3, [r3, #1]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d16b      	bne.n	801195e <USB_ActivateEndpoint+0x676>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011890:	b29b      	uxth	r3, r3
 8011892:	461a      	mov	r2, r3
 8011894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011896:	4413      	add	r3, r2
 8011898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	00da      	lsls	r2, r3, #3
 80118a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118a2:	4413      	add	r3, r2
 80118a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80118a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118b8:	801a      	strh	r2, [r3, #0]
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	691b      	ldr	r3, [r3, #16]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10a      	bne.n	80118d8 <USB_ActivateEndpoint+0x5f0>
 80118c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118d4:	801a      	strh	r2, [r3, #0]
 80118d6:	e05d      	b.n	8011994 <USB_ActivateEndpoint+0x6ac>
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	691b      	ldr	r3, [r3, #16]
 80118dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80118de:	d81c      	bhi.n	801191a <USB_ActivateEndpoint+0x632>
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	085b      	lsrs	r3, r3, #1
 80118e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	691b      	ldr	r3, [r3, #16]
 80118ee:	f003 0301 	and.w	r3, r3, #1
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d004      	beq.n	8011900 <USB_ActivateEndpoint+0x618>
 80118f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80118fa:	3301      	adds	r3, #1
 80118fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	b29a      	uxth	r2, r3
 8011906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801190a:	b29b      	uxth	r3, r3
 801190c:	029b      	lsls	r3, r3, #10
 801190e:	b29b      	uxth	r3, r3
 8011910:	4313      	orrs	r3, r2
 8011912:	b29a      	uxth	r2, r3
 8011914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011916:	801a      	strh	r2, [r3, #0]
 8011918:	e03c      	b.n	8011994 <USB_ActivateEndpoint+0x6ac>
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	095b      	lsrs	r3, r3, #5
 8011920:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	691b      	ldr	r3, [r3, #16]
 8011928:	f003 031f 	and.w	r3, r3, #31
 801192c:	2b00      	cmp	r3, #0
 801192e:	d104      	bne.n	801193a <USB_ActivateEndpoint+0x652>
 8011930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011934:	3b01      	subs	r3, #1
 8011936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801193a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	b29a      	uxth	r2, r3
 8011940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011944:	b29b      	uxth	r3, r3
 8011946:	029b      	lsls	r3, r3, #10
 8011948:	b29b      	uxth	r3, r3
 801194a:	4313      	orrs	r3, r2
 801194c:	b29b      	uxth	r3, r3
 801194e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011956:	b29a      	uxth	r2, r3
 8011958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801195a:	801a      	strh	r2, [r3, #0]
 801195c:	e01a      	b.n	8011994 <USB_ActivateEndpoint+0x6ac>
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	785b      	ldrb	r3, [r3, #1]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d116      	bne.n	8011994 <USB_ActivateEndpoint+0x6ac>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	657b      	str	r3, [r7, #84]	@ 0x54
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011970:	b29b      	uxth	r3, r3
 8011972:	461a      	mov	r2, r3
 8011974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011976:	4413      	add	r3, r2
 8011978:	657b      	str	r3, [r7, #84]	@ 0x54
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	00da      	lsls	r2, r3, #3
 8011980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011982:	4413      	add	r3, r2
 8011984:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011988:	653b      	str	r3, [r7, #80]	@ 0x50
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	b29a      	uxth	r2, r3
 8011990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011992:	801a      	strh	r2, [r3, #0]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	647b      	str	r3, [r7, #68]	@ 0x44
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	785b      	ldrb	r3, [r3, #1]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d16b      	bne.n	8011a78 <USB_ActivateEndpoint+0x790>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	461a      	mov	r2, r3
 80119ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119b0:	4413      	add	r3, r2
 80119b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	00da      	lsls	r2, r3, #3
 80119ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119bc:	4413      	add	r3, r2
 80119be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80119c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80119c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d2:	801a      	strh	r2, [r3, #0]
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	691b      	ldr	r3, [r3, #16]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d10a      	bne.n	80119f2 <USB_ActivateEndpoint+0x70a>
 80119dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ee:	801a      	strh	r2, [r3, #0]
 80119f0:	e05b      	b.n	8011aaa <USB_ActivateEndpoint+0x7c2>
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80119f8:	d81c      	bhi.n	8011a34 <USB_ActivateEndpoint+0x74c>
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	691b      	ldr	r3, [r3, #16]
 80119fe:	085b      	lsrs	r3, r3, #1
 8011a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	691b      	ldr	r3, [r3, #16]
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d004      	beq.n	8011a1a <USB_ActivateEndpoint+0x732>
 8011a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a14:	3301      	adds	r3, #1
 8011a16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	029b      	lsls	r3, r3, #10
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a30:	801a      	strh	r2, [r3, #0]
 8011a32:	e03a      	b.n	8011aaa <USB_ActivateEndpoint+0x7c2>
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	691b      	ldr	r3, [r3, #16]
 8011a38:	095b      	lsrs	r3, r3, #5
 8011a3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	f003 031f 	and.w	r3, r3, #31
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d104      	bne.n	8011a54 <USB_ActivateEndpoint+0x76c>
 8011a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	029b      	lsls	r3, r3, #10
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	4313      	orrs	r3, r2
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a74:	801a      	strh	r2, [r3, #0]
 8011a76:	e018      	b.n	8011aaa <USB_ActivateEndpoint+0x7c2>
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	785b      	ldrb	r3, [r3, #1]
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	d114      	bne.n	8011aaa <USB_ActivateEndpoint+0x7c2>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	461a      	mov	r2, r3
 8011a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a8c:	4413      	add	r3, r2
 8011a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	00da      	lsls	r2, r3, #3
 8011a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a98:	4413      	add	r3, r2
 8011a9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011aa8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	4413      	add	r3, r2
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ac0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011ac2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011ac4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011ac8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011aca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011acc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011ad0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	441a      	add	r2, r3
 8011adc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	4413      	add	r3, r2
 8011afc:	881b      	ldrh	r3, [r3, #0]
 8011afe:	b29b      	uxth	r3, r3
 8011b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b08:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	441a      	add	r2, r3
 8011b14:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	8013      	strh	r3, [r2, #0]
 8011b2a:	e0bc      	b.n	8011ca6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	4413      	add	r3, r2
 8011b36:	881b      	ldrh	r3, [r3, #0]
 8011b38:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011b3c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d01d      	beq.n	8011b84 <USB_ActivateEndpoint+0x89c>
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4413      	add	r3, r2
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	441a      	add	r2, r3
 8011b6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	4413      	add	r3, r2
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011b94:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d01d      	beq.n	8011bdc <USB_ActivateEndpoint+0x8f4>
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	4413      	add	r3, r2
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bb6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	441a      	add	r2, r3
 8011bc4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	78db      	ldrb	r3, [r3, #3]
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d024      	beq.n	8011c2e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	4413      	add	r3, r2
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011bfa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011bfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011c02:	f083 0320 	eor.w	r3, r3, #32
 8011c06:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	441a      	add	r2, r3
 8011c14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	8013      	strh	r3, [r2, #0]
 8011c2c:	e01d      	b.n	8011c6a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	4413      	add	r3, r2
 8011c38:	881b      	ldrh	r3, [r3, #0]
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c44:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	441a      	add	r2, r3
 8011c52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4413      	add	r3, r2
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c80:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	441a      	add	r2, r3
 8011c8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011ca6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	379c      	adds	r7, #156	@ 0x9c
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop

08011cb8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b08d      	sub	sp, #52	@ 0x34
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	7b1b      	ldrb	r3, [r3, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f040 808e 	bne.w	8011de8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	785b      	ldrb	r3, [r3, #1]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d044      	beq.n	8011d5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4413      	add	r3, r2
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	81bb      	strh	r3, [r7, #12]
 8011ce2:	89bb      	ldrh	r3, [r7, #12]
 8011ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d01b      	beq.n	8011d24 <USB_DeactivateEndpoint+0x6c>
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	4413      	add	r3, r2
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d02:	817b      	strh	r3, [r7, #10]
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	441a      	add	r2, r3
 8011d0e:	897b      	ldrh	r3, [r7, #10]
 8011d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	881b      	ldrh	r3, [r3, #0]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d3a:	813b      	strh	r3, [r7, #8]
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	441a      	add	r2, r3
 8011d46:	893b      	ldrh	r3, [r7, #8]
 8011d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	8013      	strh	r3, [r2, #0]
 8011d5c:	e192      	b.n	8012084 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	4413      	add	r3, r2
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	827b      	strh	r3, [r7, #18]
 8011d6c:	8a7b      	ldrh	r3, [r7, #18]
 8011d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d01b      	beq.n	8011dae <USB_DeactivateEndpoint+0xf6>
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	4413      	add	r3, r2
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d8c:	823b      	strh	r3, [r7, #16]
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	441a      	add	r2, r3
 8011d98:	8a3b      	ldrh	r3, [r7, #16]
 8011d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011da2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	009b      	lsls	r3, r3, #2
 8011db6:	4413      	add	r3, r2
 8011db8:	881b      	ldrh	r3, [r3, #0]
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dc4:	81fb      	strh	r3, [r7, #14]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	441a      	add	r2, r3
 8011dd0:	89fb      	ldrh	r3, [r7, #14]
 8011dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	8013      	strh	r3, [r2, #0]
 8011de6:	e14d      	b.n	8012084 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	785b      	ldrb	r3, [r3, #1]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f040 80a5 	bne.w	8011f3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	4413      	add	r3, r2
 8011dfc:	881b      	ldrh	r3, [r3, #0]
 8011dfe:	843b      	strh	r3, [r7, #32]
 8011e00:	8c3b      	ldrh	r3, [r7, #32]
 8011e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d01b      	beq.n	8011e42 <USB_DeactivateEndpoint+0x18a>
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4413      	add	r3, r2
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e20:	83fb      	strh	r3, [r7, #30]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	441a      	add	r2, r3
 8011e2c:	8bfb      	ldrh	r3, [r7, #30]
 8011e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	4413      	add	r3, r2
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	83bb      	strh	r3, [r7, #28]
 8011e50:	8bbb      	ldrh	r3, [r7, #28]
 8011e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d01b      	beq.n	8011e92 <USB_DeactivateEndpoint+0x1da>
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	4413      	add	r3, r2
 8011e64:	881b      	ldrh	r3, [r3, #0]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e70:	837b      	strh	r3, [r7, #26]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	009b      	lsls	r3, r3, #2
 8011e7a:	441a      	add	r2, r3
 8011e7c:	8b7b      	ldrh	r3, [r7, #26]
 8011e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	009b      	lsls	r3, r3, #2
 8011e9a:	4413      	add	r3, r2
 8011e9c:	881b      	ldrh	r3, [r3, #0]
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ea8:	833b      	strh	r3, [r7, #24]
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	441a      	add	r2, r3
 8011eb4:	8b3b      	ldrh	r3, [r7, #24]
 8011eb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011eba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ec2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	4413      	add	r3, r2
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ee0:	82fb      	strh	r3, [r7, #22]
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	441a      	add	r2, r3
 8011eec:	8afb      	ldrh	r3, [r7, #22]
 8011eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	4413      	add	r3, r2
 8011f0c:	881b      	ldrh	r3, [r3, #0]
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f18:	82bb      	strh	r3, [r7, #20]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	441a      	add	r2, r3
 8011f24:	8abb      	ldrh	r3, [r7, #20]
 8011f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	8013      	strh	r3, [r2, #0]
 8011f3a:	e0a3      	b.n	8012084 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	4413      	add	r3, r2
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011f4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d01b      	beq.n	8011f8c <USB_DeactivateEndpoint+0x2d4>
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4413      	add	r3, r2
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	441a      	add	r2, r3
 8011f76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	4413      	add	r3, r2
 8011f96:	881b      	ldrh	r3, [r3, #0]
 8011f98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011f9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d01b      	beq.n	8011fdc <USB_DeactivateEndpoint+0x324>
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	009b      	lsls	r3, r3, #2
 8011fac:	4413      	add	r3, r2
 8011fae:	881b      	ldrh	r3, [r3, #0]
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011fba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	441a      	add	r2, r3
 8011fc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ff2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	009b      	lsls	r3, r3, #2
 8011ffc:	441a      	add	r2, r3
 8011ffe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012008:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801200c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012010:	b29b      	uxth	r3, r3
 8012012:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4413      	add	r3, r2
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	b29b      	uxth	r3, r3
 8012022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801202a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	441a      	add	r2, r3
 8012036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801203c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012048:	b29b      	uxth	r3, r3
 801204a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	4413      	add	r3, r2
 8012056:	881b      	ldrh	r3, [r3, #0]
 8012058:	b29b      	uxth	r3, r3
 801205a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801205e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012062:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	441a      	add	r2, r3
 801206e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012070:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012074:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801207c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012080:	b29b      	uxth	r3, r3
 8012082:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012084:	2300      	movs	r3, #0
}
 8012086:	4618      	mov	r0, r3
 8012088:	3734      	adds	r7, #52	@ 0x34
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr

08012092 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b0ac      	sub	sp, #176	@ 0xb0
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
 801209a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	785b      	ldrb	r3, [r3, #1]
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	f040 84ca 	bne.w	8012a3a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	699a      	ldr	r2, [r3, #24]
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d904      	bls.n	80120bc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	691b      	ldr	r3, [r3, #16]
 80120b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80120ba:	e003      	b.n	80120c4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	699b      	ldr	r3, [r3, #24]
 80120c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	7b1b      	ldrb	r3, [r3, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d122      	bne.n	8012112 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	6959      	ldr	r1, [r3, #20]
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	88da      	ldrh	r2, [r3, #6]
 80120d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d8:	b29b      	uxth	r3, r3
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 febd 	bl	8012e5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	613b      	str	r3, [r7, #16]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	461a      	mov	r2, r3
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	4413      	add	r3, r2
 80120f2:	613b      	str	r3, [r7, #16]
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	00da      	lsls	r2, r3, #3
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	4413      	add	r3, r2
 80120fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012102:	60fb      	str	r3, [r7, #12]
 8012104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012108:	b29a      	uxth	r2, r3
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	801a      	strh	r2, [r3, #0]
 801210e:	f000 bc6f 	b.w	80129f0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	78db      	ldrb	r3, [r3, #3]
 8012116:	2b02      	cmp	r3, #2
 8012118:	f040 831e 	bne.w	8012758 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	6a1a      	ldr	r2, [r3, #32]
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	691b      	ldr	r3, [r3, #16]
 8012124:	429a      	cmp	r2, r3
 8012126:	f240 82cf 	bls.w	80126c8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	4413      	add	r3, r2
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	b29b      	uxth	r3, r3
 8012138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801213c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012140:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	441a      	add	r2, r3
 801214e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8012152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801215a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801215e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012162:	b29b      	uxth	r3, r3
 8012164:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	6a1a      	ldr	r2, [r3, #32]
 801216a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801216e:	1ad2      	subs	r2, r2, r3
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	4413      	add	r3, r2
 801217e:	881b      	ldrh	r3, [r3, #0]
 8012180:	b29b      	uxth	r3, r3
 8012182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012186:	2b00      	cmp	r3, #0
 8012188:	f000 814f 	beq.w	801242a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	785b      	ldrb	r3, [r3, #1]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d16b      	bne.n	8012270 <USB_EPStartXfer+0x1de>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	461a      	mov	r2, r3
 80121a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a8:	4413      	add	r3, r2
 80121aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	00da      	lsls	r2, r3, #3
 80121b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b4:	4413      	add	r3, r2
 80121b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80121ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80121bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ca:	801a      	strh	r2, [r3, #0]
 80121cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d10a      	bne.n	80121ea <USB_EPStartXfer+0x158>
 80121d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d6:	881b      	ldrh	r3, [r3, #0]
 80121d8:	b29b      	uxth	r3, r3
 80121da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121e6:	801a      	strh	r2, [r3, #0]
 80121e8:	e05b      	b.n	80122a2 <USB_EPStartXfer+0x210>
 80121ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80121f0:	d81c      	bhi.n	801222c <USB_EPStartXfer+0x19a>
 80121f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121f6:	085b      	lsrs	r3, r3, #1
 80121f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80121fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012200:	f003 0301 	and.w	r3, r3, #1
 8012204:	2b00      	cmp	r3, #0
 8012206:	d004      	beq.n	8012212 <USB_EPStartXfer+0x180>
 8012208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801220c:	3301      	adds	r3, #1
 801220e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	b29a      	uxth	r2, r3
 8012218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801221c:	b29b      	uxth	r3, r3
 801221e:	029b      	lsls	r3, r3, #10
 8012220:	b29b      	uxth	r3, r3
 8012222:	4313      	orrs	r3, r2
 8012224:	b29a      	uxth	r2, r3
 8012226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012228:	801a      	strh	r2, [r3, #0]
 801222a:	e03a      	b.n	80122a2 <USB_EPStartXfer+0x210>
 801222c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012230:	095b      	lsrs	r3, r3, #5
 8012232:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801223a:	f003 031f 	and.w	r3, r3, #31
 801223e:	2b00      	cmp	r3, #0
 8012240:	d104      	bne.n	801224c <USB_EPStartXfer+0x1ba>
 8012242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012246:	3b01      	subs	r3, #1
 8012248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	b29a      	uxth	r2, r3
 8012252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012256:	b29b      	uxth	r3, r3
 8012258:	029b      	lsls	r3, r3, #10
 801225a:	b29b      	uxth	r3, r3
 801225c:	4313      	orrs	r3, r2
 801225e:	b29b      	uxth	r3, r3
 8012260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012268:	b29a      	uxth	r2, r3
 801226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801226c:	801a      	strh	r2, [r3, #0]
 801226e:	e018      	b.n	80122a2 <USB_EPStartXfer+0x210>
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	785b      	ldrb	r3, [r3, #1]
 8012274:	2b01      	cmp	r3, #1
 8012276:	d114      	bne.n	80122a2 <USB_EPStartXfer+0x210>
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801227e:	b29b      	uxth	r3, r3
 8012280:	461a      	mov	r2, r3
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	4413      	add	r3, r2
 8012286:	633b      	str	r3, [r7, #48]	@ 0x30
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	00da      	lsls	r2, r3, #3
 801228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012290:	4413      	add	r3, r2
 8012292:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801229c:	b29a      	uxth	r2, r3
 801229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	895b      	ldrh	r3, [r3, #10]
 80122a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	6959      	ldr	r1, [r3, #20]
 80122ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fdce 	bl	8012e5a <USB_WritePMA>
            ep->xfer_buff += len;
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	695a      	ldr	r2, [r3, #20]
 80122c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122c6:	441a      	add	r2, r3
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	6a1a      	ldr	r2, [r3, #32]
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	691b      	ldr	r3, [r3, #16]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d907      	bls.n	80122e8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	6a1a      	ldr	r2, [r3, #32]
 80122dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122e0:	1ad2      	subs	r2, r2, r3
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	621a      	str	r2, [r3, #32]
 80122e6:	e006      	b.n	80122f6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	6a1b      	ldr	r3, [r3, #32]
 80122ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	2200      	movs	r2, #0
 80122f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	785b      	ldrb	r3, [r3, #1]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d16b      	bne.n	80123d6 <USB_EPStartXfer+0x344>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	61bb      	str	r3, [r7, #24]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012308:	b29b      	uxth	r3, r3
 801230a:	461a      	mov	r2, r3
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	4413      	add	r3, r2
 8012310:	61bb      	str	r3, [r7, #24]
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	00da      	lsls	r2, r3, #3
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	4413      	add	r3, r2
 801231c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012320:	617b      	str	r3, [r7, #20]
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	881b      	ldrh	r3, [r3, #0]
 8012326:	b29b      	uxth	r3, r3
 8012328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801232c:	b29a      	uxth	r2, r3
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	801a      	strh	r2, [r3, #0]
 8012332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012336:	2b00      	cmp	r3, #0
 8012338:	d10a      	bne.n	8012350 <USB_EPStartXfer+0x2be>
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	b29b      	uxth	r3, r3
 8012340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012348:	b29a      	uxth	r2, r3
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	801a      	strh	r2, [r3, #0]
 801234e:	e05d      	b.n	801240c <USB_EPStartXfer+0x37a>
 8012350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012354:	2b3e      	cmp	r3, #62	@ 0x3e
 8012356:	d81c      	bhi.n	8012392 <USB_EPStartXfer+0x300>
 8012358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801235c:	085b      	lsrs	r3, r3, #1
 801235e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012366:	f003 0301 	and.w	r3, r3, #1
 801236a:	2b00      	cmp	r3, #0
 801236c:	d004      	beq.n	8012378 <USB_EPStartXfer+0x2e6>
 801236e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012372:	3301      	adds	r3, #1
 8012374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	b29a      	uxth	r2, r3
 801237e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012382:	b29b      	uxth	r3, r3
 8012384:	029b      	lsls	r3, r3, #10
 8012386:	b29b      	uxth	r3, r3
 8012388:	4313      	orrs	r3, r2
 801238a:	b29a      	uxth	r2, r3
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	801a      	strh	r2, [r3, #0]
 8012390:	e03c      	b.n	801240c <USB_EPStartXfer+0x37a>
 8012392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012396:	095b      	lsrs	r3, r3, #5
 8012398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801239c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123a0:	f003 031f 	and.w	r3, r3, #31
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d104      	bne.n	80123b2 <USB_EPStartXfer+0x320>
 80123a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123ac:	3b01      	subs	r3, #1
 80123ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123bc:	b29b      	uxth	r3, r3
 80123be:	029b      	lsls	r3, r3, #10
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	4313      	orrs	r3, r2
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	801a      	strh	r2, [r3, #0]
 80123d4:	e01a      	b.n	801240c <USB_EPStartXfer+0x37a>
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	785b      	ldrb	r3, [r3, #1]
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d116      	bne.n	801240c <USB_EPStartXfer+0x37a>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	623b      	str	r3, [r7, #32]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	461a      	mov	r2, r3
 80123ec:	6a3b      	ldr	r3, [r7, #32]
 80123ee:	4413      	add	r3, r2
 80123f0:	623b      	str	r3, [r7, #32]
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	00da      	lsls	r2, r3, #3
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	4413      	add	r3, r2
 80123fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012400:	61fb      	str	r3, [r7, #28]
 8012402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012406:	b29a      	uxth	r2, r3
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	891b      	ldrh	r3, [r3, #8]
 8012410:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	6959      	ldr	r1, [r3, #20]
 8012418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801241c:	b29b      	uxth	r3, r3
 801241e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 fd19 	bl	8012e5a <USB_WritePMA>
 8012428:	e2e2      	b.n	80129f0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	785b      	ldrb	r3, [r3, #1]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d16b      	bne.n	801250a <USB_EPStartXfer+0x478>
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801243c:	b29b      	uxth	r3, r3
 801243e:	461a      	mov	r2, r3
 8012440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012442:	4413      	add	r3, r2
 8012444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	00da      	lsls	r2, r3, #3
 801244c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801244e:	4413      	add	r3, r2
 8012450:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012454:	647b      	str	r3, [r7, #68]	@ 0x44
 8012456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	b29b      	uxth	r3, r3
 801245c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012460:	b29a      	uxth	r2, r3
 8012462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012464:	801a      	strh	r2, [r3, #0]
 8012466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801246a:	2b00      	cmp	r3, #0
 801246c:	d10a      	bne.n	8012484 <USB_EPStartXfer+0x3f2>
 801246e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012470:	881b      	ldrh	r3, [r3, #0]
 8012472:	b29b      	uxth	r3, r3
 8012474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801247c:	b29a      	uxth	r2, r3
 801247e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012480:	801a      	strh	r2, [r3, #0]
 8012482:	e05d      	b.n	8012540 <USB_EPStartXfer+0x4ae>
 8012484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012488:	2b3e      	cmp	r3, #62	@ 0x3e
 801248a:	d81c      	bhi.n	80124c6 <USB_EPStartXfer+0x434>
 801248c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012490:	085b      	lsrs	r3, r3, #1
 8012492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801249a:	f003 0301 	and.w	r3, r3, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <USB_EPStartXfer+0x41a>
 80124a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124a6:	3301      	adds	r3, #1
 80124a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124ae:	881b      	ldrh	r3, [r3, #0]
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	029b      	lsls	r3, r3, #10
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	4313      	orrs	r3, r2
 80124be:	b29a      	uxth	r2, r3
 80124c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124c2:	801a      	strh	r2, [r3, #0]
 80124c4:	e03c      	b.n	8012540 <USB_EPStartXfer+0x4ae>
 80124c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124ca:	095b      	lsrs	r3, r3, #5
 80124cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124d4:	f003 031f 	and.w	r3, r3, #31
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d104      	bne.n	80124e6 <USB_EPStartXfer+0x454>
 80124dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124e0:	3b01      	subs	r3, #1
 80124e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	029b      	lsls	r3, r3, #10
 80124f4:	b29b      	uxth	r3, r3
 80124f6:	4313      	orrs	r3, r2
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012502:	b29a      	uxth	r2, r3
 8012504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012506:	801a      	strh	r2, [r3, #0]
 8012508:	e01a      	b.n	8012540 <USB_EPStartXfer+0x4ae>
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	785b      	ldrb	r3, [r3, #1]
 801250e:	2b01      	cmp	r3, #1
 8012510:	d116      	bne.n	8012540 <USB_EPStartXfer+0x4ae>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	653b      	str	r3, [r7, #80]	@ 0x50
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801251c:	b29b      	uxth	r3, r3
 801251e:	461a      	mov	r2, r3
 8012520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012522:	4413      	add	r3, r2
 8012524:	653b      	str	r3, [r7, #80]	@ 0x50
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	00da      	lsls	r2, r3, #3
 801252c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801252e:	4413      	add	r3, r2
 8012530:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801253a:	b29a      	uxth	r2, r3
 801253c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801253e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	891b      	ldrh	r3, [r3, #8]
 8012544:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	6959      	ldr	r1, [r3, #20]
 801254c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012550:	b29b      	uxth	r3, r3
 8012552:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fc7f 	bl	8012e5a <USB_WritePMA>
            ep->xfer_buff += len;
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	695a      	ldr	r2, [r3, #20]
 8012560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012564:	441a      	add	r2, r3
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	6a1a      	ldr	r2, [r3, #32]
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	429a      	cmp	r2, r3
 8012574:	d907      	bls.n	8012586 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	6a1a      	ldr	r2, [r3, #32]
 801257a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801257e:	1ad2      	subs	r2, r2, r3
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	621a      	str	r2, [r3, #32]
 8012584:	e006      	b.n	8012594 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	6a1b      	ldr	r3, [r3, #32]
 801258a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	2200      	movs	r2, #0
 8012592:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	643b      	str	r3, [r7, #64]	@ 0x40
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	785b      	ldrb	r3, [r3, #1]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d16b      	bne.n	8012678 <USB_EPStartXfer+0x5e6>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	461a      	mov	r2, r3
 80125ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125b0:	4413      	add	r3, r2
 80125b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	00da      	lsls	r2, r3, #3
 80125ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125bc:	4413      	add	r3, r2
 80125be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80125c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80125c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80125ce:	b29a      	uxth	r2, r3
 80125d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125d2:	801a      	strh	r2, [r3, #0]
 80125d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10a      	bne.n	80125f2 <USB_EPStartXfer+0x560>
 80125dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ee:	801a      	strh	r2, [r3, #0]
 80125f0:	e05b      	b.n	80126aa <USB_EPStartXfer+0x618>
 80125f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80125f8:	d81c      	bhi.n	8012634 <USB_EPStartXfer+0x5a2>
 80125fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125fe:	085b      	lsrs	r3, r3, #1
 8012600:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	d004      	beq.n	801261a <USB_EPStartXfer+0x588>
 8012610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012614:	3301      	adds	r3, #1
 8012616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801261a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801261c:	881b      	ldrh	r3, [r3, #0]
 801261e:	b29a      	uxth	r2, r3
 8012620:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012624:	b29b      	uxth	r3, r3
 8012626:	029b      	lsls	r3, r3, #10
 8012628:	b29b      	uxth	r3, r3
 801262a:	4313      	orrs	r3, r2
 801262c:	b29a      	uxth	r2, r3
 801262e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012630:	801a      	strh	r2, [r3, #0]
 8012632:	e03a      	b.n	80126aa <USB_EPStartXfer+0x618>
 8012634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012638:	095b      	lsrs	r3, r3, #5
 801263a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801263e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012642:	f003 031f 	and.w	r3, r3, #31
 8012646:	2b00      	cmp	r3, #0
 8012648:	d104      	bne.n	8012654 <USB_EPStartXfer+0x5c2>
 801264a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801264e:	3b01      	subs	r3, #1
 8012650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	b29a      	uxth	r2, r3
 801265a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801265e:	b29b      	uxth	r3, r3
 8012660:	029b      	lsls	r3, r3, #10
 8012662:	b29b      	uxth	r3, r3
 8012664:	4313      	orrs	r3, r2
 8012666:	b29b      	uxth	r3, r3
 8012668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801266c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012670:	b29a      	uxth	r2, r3
 8012672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012674:	801a      	strh	r2, [r3, #0]
 8012676:	e018      	b.n	80126aa <USB_EPStartXfer+0x618>
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	785b      	ldrb	r3, [r3, #1]
 801267c:	2b01      	cmp	r3, #1
 801267e:	d114      	bne.n	80126aa <USB_EPStartXfer+0x618>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012686:	b29b      	uxth	r3, r3
 8012688:	461a      	mov	r2, r3
 801268a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801268c:	4413      	add	r3, r2
 801268e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	00da      	lsls	r2, r3, #3
 8012696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012698:	4413      	add	r3, r2
 801269a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126a4:	b29a      	uxth	r2, r3
 80126a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	895b      	ldrh	r3, [r3, #10]
 80126ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	6959      	ldr	r1, [r3, #20]
 80126b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f000 fbca 	bl	8012e5a <USB_WritePMA>
 80126c6:	e193      	b.n	80129f0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	6a1b      	ldr	r3, [r3, #32]
 80126cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	881b      	ldrh	r3, [r3, #0]
 80126dc:	b29b      	uxth	r3, r3
 80126de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80126e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80126e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	441a      	add	r2, r3
 80126f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80126f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80126fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012708:	b29b      	uxth	r3, r3
 801270a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012716:	b29b      	uxth	r3, r3
 8012718:	461a      	mov	r2, r3
 801271a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801271c:	4413      	add	r3, r2
 801271e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	00da      	lsls	r2, r3, #3
 8012726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012728:	4413      	add	r3, r2
 801272a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801272e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012734:	b29a      	uxth	r2, r3
 8012736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012738:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	891b      	ldrh	r3, [r3, #8]
 801273e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	6959      	ldr	r1, [r3, #20]
 8012746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801274a:	b29b      	uxth	r3, r3
 801274c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 fb82 	bl	8012e5a <USB_WritePMA>
 8012756:	e14b      	b.n	80129f0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	6a1a      	ldr	r2, [r3, #32]
 801275c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012760:	1ad2      	subs	r2, r2, r3
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	4413      	add	r3, r2
 8012770:	881b      	ldrh	r3, [r3, #0]
 8012772:	b29b      	uxth	r3, r3
 8012774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 809a 	beq.w	80128b2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	673b      	str	r3, [r7, #112]	@ 0x70
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	785b      	ldrb	r3, [r3, #1]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d16b      	bne.n	8012862 <USB_EPStartXfer+0x7d0>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012794:	b29b      	uxth	r3, r3
 8012796:	461a      	mov	r2, r3
 8012798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801279a:	4413      	add	r3, r2
 801279c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	00da      	lsls	r2, r3, #3
 80127a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127a6:	4413      	add	r3, r2
 80127a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80127ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80127ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127bc:	801a      	strh	r2, [r3, #0]
 80127be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d10a      	bne.n	80127dc <USB_EPStartXfer+0x74a>
 80127c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127c8:	881b      	ldrh	r3, [r3, #0]
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127d8:	801a      	strh	r2, [r3, #0]
 80127da:	e05b      	b.n	8012894 <USB_EPStartXfer+0x802>
 80127dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80127e2:	d81c      	bhi.n	801281e <USB_EPStartXfer+0x78c>
 80127e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127e8:	085b      	lsrs	r3, r3, #1
 80127ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80127ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127f2:	f003 0301 	and.w	r3, r3, #1
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d004      	beq.n	8012804 <USB_EPStartXfer+0x772>
 80127fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80127fe:	3301      	adds	r3, #1
 8012800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012806:	881b      	ldrh	r3, [r3, #0]
 8012808:	b29a      	uxth	r2, r3
 801280a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801280e:	b29b      	uxth	r3, r3
 8012810:	029b      	lsls	r3, r3, #10
 8012812:	b29b      	uxth	r3, r3
 8012814:	4313      	orrs	r3, r2
 8012816:	b29a      	uxth	r2, r3
 8012818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801281a:	801a      	strh	r2, [r3, #0]
 801281c:	e03a      	b.n	8012894 <USB_EPStartXfer+0x802>
 801281e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012822:	095b      	lsrs	r3, r3, #5
 8012824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801282c:	f003 031f 	and.w	r3, r3, #31
 8012830:	2b00      	cmp	r3, #0
 8012832:	d104      	bne.n	801283e <USB_EPStartXfer+0x7ac>
 8012834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012838:	3b01      	subs	r3, #1
 801283a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801283e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	b29a      	uxth	r2, r3
 8012844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012848:	b29b      	uxth	r3, r3
 801284a:	029b      	lsls	r3, r3, #10
 801284c:	b29b      	uxth	r3, r3
 801284e:	4313      	orrs	r3, r2
 8012850:	b29b      	uxth	r3, r3
 8012852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801285a:	b29a      	uxth	r2, r3
 801285c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801285e:	801a      	strh	r2, [r3, #0]
 8012860:	e018      	b.n	8012894 <USB_EPStartXfer+0x802>
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	785b      	ldrb	r3, [r3, #1]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d114      	bne.n	8012894 <USB_EPStartXfer+0x802>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012870:	b29b      	uxth	r3, r3
 8012872:	461a      	mov	r2, r3
 8012874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012876:	4413      	add	r3, r2
 8012878:	673b      	str	r3, [r7, #112]	@ 0x70
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	00da      	lsls	r2, r3, #3
 8012880:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012882:	4413      	add	r3, r2
 8012884:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012888:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801288a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801288e:	b29a      	uxth	r2, r3
 8012890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012892:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	895b      	ldrh	r3, [r3, #10]
 8012898:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	6959      	ldr	r1, [r3, #20]
 80128a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128a4:	b29b      	uxth	r3, r3
 80128a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fad5 	bl	8012e5a <USB_WritePMA>
 80128b0:	e09e      	b.n	80129f0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	785b      	ldrb	r3, [r3, #1]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d16b      	bne.n	8012992 <USB_EPStartXfer+0x900>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	461a      	mov	r2, r3
 80128c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80128ca:	4413      	add	r3, r2
 80128cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	00da      	lsls	r2, r3, #3
 80128d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80128d6:	4413      	add	r3, r2
 80128d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80128dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80128de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128ec:	801a      	strh	r2, [r3, #0]
 80128ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d10a      	bne.n	801290c <USB_EPStartXfer+0x87a>
 80128f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012904:	b29a      	uxth	r2, r3
 8012906:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012908:	801a      	strh	r2, [r3, #0]
 801290a:	e063      	b.n	80129d4 <USB_EPStartXfer+0x942>
 801290c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012910:	2b3e      	cmp	r3, #62	@ 0x3e
 8012912:	d81c      	bhi.n	801294e <USB_EPStartXfer+0x8bc>
 8012914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012918:	085b      	lsrs	r3, r3, #1
 801291a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801291e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	2b00      	cmp	r3, #0
 8012928:	d004      	beq.n	8012934 <USB_EPStartXfer+0x8a2>
 801292a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801292e:	3301      	adds	r3, #1
 8012930:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	b29a      	uxth	r2, r3
 801293a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801293e:	b29b      	uxth	r3, r3
 8012940:	029b      	lsls	r3, r3, #10
 8012942:	b29b      	uxth	r3, r3
 8012944:	4313      	orrs	r3, r2
 8012946:	b29a      	uxth	r2, r3
 8012948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801294a:	801a      	strh	r2, [r3, #0]
 801294c:	e042      	b.n	80129d4 <USB_EPStartXfer+0x942>
 801294e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012952:	095b      	lsrs	r3, r3, #5
 8012954:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801295c:	f003 031f 	and.w	r3, r3, #31
 8012960:	2b00      	cmp	r3, #0
 8012962:	d104      	bne.n	801296e <USB_EPStartXfer+0x8dc>
 8012964:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012968:	3b01      	subs	r3, #1
 801296a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801296e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012970:	881b      	ldrh	r3, [r3, #0]
 8012972:	b29a      	uxth	r2, r3
 8012974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012978:	b29b      	uxth	r3, r3
 801297a:	029b      	lsls	r3, r3, #10
 801297c:	b29b      	uxth	r3, r3
 801297e:	4313      	orrs	r3, r2
 8012980:	b29b      	uxth	r3, r3
 8012982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801298a:	b29a      	uxth	r2, r3
 801298c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801298e:	801a      	strh	r2, [r3, #0]
 8012990:	e020      	b.n	80129d4 <USB_EPStartXfer+0x942>
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	785b      	ldrb	r3, [r3, #1]
 8012996:	2b01      	cmp	r3, #1
 8012998:	d11c      	bne.n	80129d4 <USB_EPStartXfer+0x942>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	461a      	mov	r2, r3
 80129aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80129ae:	4413      	add	r3, r2
 80129b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	00da      	lsls	r2, r3, #3
 80129ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80129be:	4413      	add	r3, r2
 80129c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80129c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80129c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80129d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	891b      	ldrh	r3, [r3, #8]
 80129d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	6959      	ldr	r1, [r3, #20]
 80129e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 fa35 	bl	8012e5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a06:	817b      	strh	r3, [r7, #10]
 8012a08:	897b      	ldrh	r3, [r7, #10]
 8012a0a:	f083 0310 	eor.w	r3, r3, #16
 8012a0e:	817b      	strh	r3, [r7, #10]
 8012a10:	897b      	ldrh	r3, [r7, #10]
 8012a12:	f083 0320 	eor.w	r3, r3, #32
 8012a16:	817b      	strh	r3, [r7, #10]
 8012a18:	687a      	ldr	r2, [r7, #4]
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	441a      	add	r2, r3
 8012a22:	897b      	ldrh	r3, [r7, #10]
 8012a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	8013      	strh	r3, [r2, #0]
 8012a38:	e0d5      	b.n	8012be6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	7b1b      	ldrb	r3, [r3, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d156      	bne.n	8012af0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	699b      	ldr	r3, [r3, #24]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d122      	bne.n	8012a90 <USB_EPStartXfer+0x9fe>
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	78db      	ldrb	r3, [r3, #3]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d11e      	bne.n	8012a90 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4413      	add	r3, r2
 8012a5c:	881b      	ldrh	r3, [r3, #0]
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a68:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	009b      	lsls	r3, r3, #2
 8012a74:	441a      	add	r2, r3
 8012a76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	8013      	strh	r3, [r2, #0]
 8012a8e:	e01d      	b.n	8012acc <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	881b      	ldrh	r3, [r3, #0]
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012aa6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8012aaa:	687a      	ldr	r2, [r7, #4]
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	441a      	add	r2, r3
 8012ab4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8012ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	699a      	ldr	r2, [r3, #24]
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	691b      	ldr	r3, [r3, #16]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d907      	bls.n	8012ae8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	699a      	ldr	r2, [r3, #24]
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	691b      	ldr	r3, [r3, #16]
 8012ae0:	1ad2      	subs	r2, r2, r3
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	619a      	str	r2, [r3, #24]
 8012ae6:	e054      	b.n	8012b92 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	2200      	movs	r2, #0
 8012aec:	619a      	str	r2, [r3, #24]
 8012aee:	e050      	b.n	8012b92 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	78db      	ldrb	r3, [r3, #3]
 8012af4:	2b02      	cmp	r3, #2
 8012af6:	d142      	bne.n	8012b7e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	69db      	ldr	r3, [r3, #28]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d048      	beq.n	8012b92 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	4413      	add	r3, r2
 8012b0a:	881b      	ldrh	r3, [r3, #0]
 8012b0c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d005      	beq.n	8012b28 <USB_EPStartXfer+0xa96>
 8012b1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d10b      	bne.n	8012b40 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b28:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d12e      	bne.n	8012b92 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b34:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d128      	bne.n	8012b92 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012b40:	687a      	ldr	r2, [r7, #4]
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	4413      	add	r3, r2
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b56:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	009b      	lsls	r3, r3, #2
 8012b62:	441a      	add	r2, r3
 8012b64:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012b78:	b29b      	uxth	r3, r3
 8012b7a:	8013      	strh	r3, [r2, #0]
 8012b7c:	e009      	b.n	8012b92 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	78db      	ldrb	r3, [r3, #3]
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d103      	bne.n	8012b8e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	619a      	str	r2, [r3, #24]
 8012b8c:	e001      	b.n	8012b92 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012b8e:	2301      	movs	r3, #1
 8012b90:	e02a      	b.n	8012be8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	4413      	add	r3, r2
 8012b9c:	881b      	ldrh	r3, [r3, #0]
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ba8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012bac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012bb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012bb4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012bb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012bbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012bc0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	441a      	add	r2, r3
 8012bce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012be6:	2300      	movs	r3, #0
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	37b0      	adds	r7, #176	@ 0xb0
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b085      	sub	sp, #20
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	785b      	ldrb	r3, [r3, #1]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d020      	beq.n	8012c44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4413      	add	r3, r2
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c18:	81bb      	strh	r3, [r7, #12]
 8012c1a:	89bb      	ldrh	r3, [r7, #12]
 8012c1c:	f083 0310 	eor.w	r3, r3, #16
 8012c20:	81bb      	strh	r3, [r7, #12]
 8012c22:	687a      	ldr	r2, [r7, #4]
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	009b      	lsls	r3, r3, #2
 8012c2a:	441a      	add	r2, r3
 8012c2c:	89bb      	ldrh	r3, [r7, #12]
 8012c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	8013      	strh	r3, [r2, #0]
 8012c42:	e01f      	b.n	8012c84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	4413      	add	r3, r2
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c5a:	81fb      	strh	r3, [r7, #14]
 8012c5c:	89fb      	ldrh	r3, [r7, #14]
 8012c5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012c62:	81fb      	strh	r3, [r7, #14]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	441a      	add	r2, r3
 8012c6e:	89fb      	ldrh	r3, [r7, #14]
 8012c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3714      	adds	r7, #20
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c90:	4770      	bx	lr

08012c92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012c92:	b480      	push	{r7}
 8012c94:	b087      	sub	sp, #28
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
 8012c9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	785b      	ldrb	r3, [r3, #1]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d04c      	beq.n	8012d3e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	009b      	lsls	r3, r3, #2
 8012cac:	4413      	add	r3, r2
 8012cae:	881b      	ldrh	r3, [r3, #0]
 8012cb0:	823b      	strh	r3, [r7, #16]
 8012cb2:	8a3b      	ldrh	r3, [r7, #16]
 8012cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d01b      	beq.n	8012cf4 <USB_EPClearStall+0x62>
 8012cbc:	687a      	ldr	r2, [r7, #4]
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	4413      	add	r3, r2
 8012cc6:	881b      	ldrh	r3, [r3, #0]
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012cd2:	81fb      	strh	r3, [r7, #14]
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	441a      	add	r2, r3
 8012cde:	89fb      	ldrh	r3, [r7, #14]
 8012ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012cec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	78db      	ldrb	r3, [r3, #3]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d06c      	beq.n	8012dd6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4413      	add	r3, r2
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d12:	81bb      	strh	r3, [r7, #12]
 8012d14:	89bb      	ldrh	r3, [r7, #12]
 8012d16:	f083 0320 	eor.w	r3, r3, #32
 8012d1a:	81bb      	strh	r3, [r7, #12]
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	441a      	add	r2, r3
 8012d26:	89bb      	ldrh	r3, [r7, #12]
 8012d28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	8013      	strh	r3, [r2, #0]
 8012d3c:	e04b      	b.n	8012dd6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	4413      	add	r3, r2
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	82fb      	strh	r3, [r7, #22]
 8012d4c:	8afb      	ldrh	r3, [r7, #22]
 8012d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d01b      	beq.n	8012d8e <USB_EPClearStall+0xfc>
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	4413      	add	r3, r2
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012d6c:	82bb      	strh	r3, [r7, #20]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	441a      	add	r2, r3
 8012d78:	8abb      	ldrh	r3, [r7, #20]
 8012d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	4413      	add	r3, r2
 8012d98:	881b      	ldrh	r3, [r3, #0]
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012da4:	827b      	strh	r3, [r7, #18]
 8012da6:	8a7b      	ldrh	r3, [r7, #18]
 8012da8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012dac:	827b      	strh	r3, [r7, #18]
 8012dae:	8a7b      	ldrh	r3, [r7, #18]
 8012db0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012db4:	827b      	strh	r3, [r7, #18]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	441a      	add	r2, r3
 8012dc0:	8a7b      	ldrh	r3, [r7, #18]
 8012dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012dd6:	2300      	movs	r3, #0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	371c      	adds	r7, #28
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr

08012de4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012df0:	78fb      	ldrb	r3, [r7, #3]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d103      	bne.n	8012dfe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2280      	movs	r2, #128	@ 0x80
 8012dfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012dfe:	2300      	movs	r3, #0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr

08012e3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012e3a:	b480      	push	{r7}
 8012e3c:	b085      	sub	sp, #20
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3714      	adds	r7, #20
 8012e52:	46bd      	mov	sp, r7
 8012e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e58:	4770      	bx	lr

08012e5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012e5a:	b480      	push	{r7}
 8012e5c:	b08b      	sub	sp, #44	@ 0x2c
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	60f8      	str	r0, [r7, #12]
 8012e62:	60b9      	str	r1, [r7, #8]
 8012e64:	4611      	mov	r1, r2
 8012e66:	461a      	mov	r2, r3
 8012e68:	460b      	mov	r3, r1
 8012e6a:	80fb      	strh	r3, [r7, #6]
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012e70:	88bb      	ldrh	r3, [r7, #4]
 8012e72:	3301      	adds	r3, #1
 8012e74:	085b      	lsrs	r3, r3, #1
 8012e76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012e80:	88fa      	ldrh	r2, [r7, #6]
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	4413      	add	r3, r2
 8012e86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012e8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e90:	e01c      	b.n	8012ecc <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8012e92:	69fb      	ldr	r3, [r7, #28]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	b21b      	sxth	r3, r3
 8012ea0:	021b      	lsls	r3, r3, #8
 8012ea2:	b21a      	sxth	r2, r3
 8012ea4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ea8:	4313      	orrs	r3, r2
 8012eaa:	b21b      	sxth	r3, r3
 8012eac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	8a7a      	ldrh	r2, [r7, #18]
 8012eb2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	3302      	adds	r3, #2
 8012eb8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	3301      	adds	r3, #1
 8012ebe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ec8:	3b01      	subs	r3, #1
 8012eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d1df      	bne.n	8012e92 <USB_WritePMA+0x38>
  }
}
 8012ed2:	bf00      	nop
 8012ed4:	bf00      	nop
 8012ed6:	372c      	adds	r7, #44	@ 0x2c
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b08b      	sub	sp, #44	@ 0x2c
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	4611      	mov	r1, r2
 8012eec:	461a      	mov	r2, r3
 8012eee:	460b      	mov	r3, r1
 8012ef0:	80fb      	strh	r3, [r7, #6]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012ef6:	88bb      	ldrh	r3, [r7, #4]
 8012ef8:	085b      	lsrs	r3, r3, #1
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012f06:	88fa      	ldrh	r2, [r7, #6]
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012f10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012f12:	69bb      	ldr	r3, [r7, #24]
 8012f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f16:	e018      	b.n	8012f4a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	881b      	ldrh	r3, [r3, #0]
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012f20:	6a3b      	ldr	r3, [r7, #32]
 8012f22:	3302      	adds	r3, #2
 8012f24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	b2da      	uxtb	r2, r3
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	3301      	adds	r3, #1
 8012f32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	0a1b      	lsrs	r3, r3, #8
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	3301      	adds	r3, #1
 8012f42:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f46:	3b01      	subs	r3, #1
 8012f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1e3      	bne.n	8012f18 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012f50:	88bb      	ldrh	r3, [r7, #4]
 8012f52:	f003 0301 	and.w	r3, r3, #1
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d007      	beq.n	8012f6c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012f5c:	6a3b      	ldr	r3, [r7, #32]
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	b2da      	uxtb	r2, r3
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	701a      	strb	r2, [r3, #0]
  }
}
 8012f6c:	bf00      	nop
 8012f6e:	372c      	adds	r7, #44	@ 0x2c
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr

08012f78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012f84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012f88:	f002 fc74 	bl	8015874 <USBD_static_malloc>
 8012f8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d109      	bne.n	8012fa8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	32b0      	adds	r2, #176	@ 0xb0
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	e0d4      	b.n	8013152 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012fa8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012fac:	2100      	movs	r1, #0
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f003 fb12 	bl	80165d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	32b0      	adds	r2, #176	@ 0xb0
 8012fbe:	68f9      	ldr	r1, [r7, #12]
 8012fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	32b0      	adds	r2, #176	@ 0xb0
 8012fce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	7c1b      	ldrb	r3, [r3, #16]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d138      	bne.n	8013052 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012fe0:	4b5e      	ldr	r3, [pc, #376]	@ (801315c <USBD_CDC_Init+0x1e4>)
 8012fe2:	7819      	ldrb	r1, [r3, #0]
 8012fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012fe8:	2202      	movs	r2, #2
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f002 fae9 	bl	80155c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012ff0:	4b5a      	ldr	r3, [pc, #360]	@ (801315c <USBD_CDC_Init+0x1e4>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f003 020f 	and.w	r2, r3, #15
 8012ff8:	6879      	ldr	r1, [r7, #4]
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	4413      	add	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	440b      	add	r3, r1
 8013004:	3324      	adds	r3, #36	@ 0x24
 8013006:	2201      	movs	r2, #1
 8013008:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801300a:	4b55      	ldr	r3, [pc, #340]	@ (8013160 <USBD_CDC_Init+0x1e8>)
 801300c:	7819      	ldrb	r1, [r3, #0]
 801300e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013012:	2202      	movs	r2, #2
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f002 fad4 	bl	80155c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801301a:	4b51      	ldr	r3, [pc, #324]	@ (8013160 <USBD_CDC_Init+0x1e8>)
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	f003 020f 	and.w	r2, r3, #15
 8013022:	6879      	ldr	r1, [r7, #4]
 8013024:	4613      	mov	r3, r2
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	4413      	add	r3, r2
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	440b      	add	r3, r1
 801302e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013032:	2201      	movs	r2, #1
 8013034:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013036:	4b4b      	ldr	r3, [pc, #300]	@ (8013164 <USBD_CDC_Init+0x1ec>)
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	f003 020f 	and.w	r2, r3, #15
 801303e:	6879      	ldr	r1, [r7, #4]
 8013040:	4613      	mov	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	4413      	add	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	440b      	add	r3, r1
 801304a:	3326      	adds	r3, #38	@ 0x26
 801304c:	2210      	movs	r2, #16
 801304e:	801a      	strh	r2, [r3, #0]
 8013050:	e035      	b.n	80130be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013052:	4b42      	ldr	r3, [pc, #264]	@ (801315c <USBD_CDC_Init+0x1e4>)
 8013054:	7819      	ldrb	r1, [r3, #0]
 8013056:	2340      	movs	r3, #64	@ 0x40
 8013058:	2202      	movs	r2, #2
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f002 fab1 	bl	80155c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013060:	4b3e      	ldr	r3, [pc, #248]	@ (801315c <USBD_CDC_Init+0x1e4>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	f003 020f 	and.w	r2, r3, #15
 8013068:	6879      	ldr	r1, [r7, #4]
 801306a:	4613      	mov	r3, r2
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	4413      	add	r3, r2
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	440b      	add	r3, r1
 8013074:	3324      	adds	r3, #36	@ 0x24
 8013076:	2201      	movs	r2, #1
 8013078:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801307a:	4b39      	ldr	r3, [pc, #228]	@ (8013160 <USBD_CDC_Init+0x1e8>)
 801307c:	7819      	ldrb	r1, [r3, #0]
 801307e:	2340      	movs	r3, #64	@ 0x40
 8013080:	2202      	movs	r2, #2
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f002 fa9d 	bl	80155c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013088:	4b35      	ldr	r3, [pc, #212]	@ (8013160 <USBD_CDC_Init+0x1e8>)
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	f003 020f 	and.w	r2, r3, #15
 8013090:	6879      	ldr	r1, [r7, #4]
 8013092:	4613      	mov	r3, r2
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	4413      	add	r3, r2
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	440b      	add	r3, r1
 801309c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80130a0:	2201      	movs	r2, #1
 80130a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80130a4:	4b2f      	ldr	r3, [pc, #188]	@ (8013164 <USBD_CDC_Init+0x1ec>)
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	f003 020f 	and.w	r2, r3, #15
 80130ac:	6879      	ldr	r1, [r7, #4]
 80130ae:	4613      	mov	r3, r2
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	4413      	add	r3, r2
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	440b      	add	r3, r1
 80130b8:	3326      	adds	r3, #38	@ 0x26
 80130ba:	2210      	movs	r2, #16
 80130bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80130be:	4b29      	ldr	r3, [pc, #164]	@ (8013164 <USBD_CDC_Init+0x1ec>)
 80130c0:	7819      	ldrb	r1, [r3, #0]
 80130c2:	2308      	movs	r3, #8
 80130c4:	2203      	movs	r2, #3
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f002 fa7b 	bl	80155c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80130cc:	4b25      	ldr	r3, [pc, #148]	@ (8013164 <USBD_CDC_Init+0x1ec>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 020f 	and.w	r2, r3, #15
 80130d4:	6879      	ldr	r1, [r7, #4]
 80130d6:	4613      	mov	r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	4413      	add	r3, r2
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	440b      	add	r3, r1
 80130e0:	3324      	adds	r3, #36	@ 0x24
 80130e2:	2201      	movs	r2, #1
 80130e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2200      	movs	r2, #0
 80130ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	33b0      	adds	r3, #176	@ 0xb0
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	4413      	add	r3, r2
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2200      	movs	r2, #0
 8013106:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2200      	movs	r2, #0
 801310e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013118:	2b00      	cmp	r3, #0
 801311a:	d101      	bne.n	8013120 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801311c:	2302      	movs	r3, #2
 801311e:	e018      	b.n	8013152 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	7c1b      	ldrb	r3, [r3, #16]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d10a      	bne.n	801313e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013128:	4b0d      	ldr	r3, [pc, #52]	@ (8013160 <USBD_CDC_Init+0x1e8>)
 801312a:	7819      	ldrb	r1, [r3, #0]
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f002 fb32 	bl	80157a0 <USBD_LL_PrepareReceive>
 801313c:	e008      	b.n	8013150 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801313e:	4b08      	ldr	r3, [pc, #32]	@ (8013160 <USBD_CDC_Init+0x1e8>)
 8013140:	7819      	ldrb	r1, [r3, #0]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013148:	2340      	movs	r3, #64	@ 0x40
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f002 fb28 	bl	80157a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	3710      	adds	r7, #16
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	200000d3 	.word	0x200000d3
 8013160:	200000d4 	.word	0x200000d4
 8013164:	200000d5 	.word	0x200000d5

08013168 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	460b      	mov	r3, r1
 8013172:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013174:	4b3a      	ldr	r3, [pc, #232]	@ (8013260 <USBD_CDC_DeInit+0xf8>)
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	4619      	mov	r1, r3
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f002 fa47 	bl	801560e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013180:	4b37      	ldr	r3, [pc, #220]	@ (8013260 <USBD_CDC_DeInit+0xf8>)
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	f003 020f 	and.w	r2, r3, #15
 8013188:	6879      	ldr	r1, [r7, #4]
 801318a:	4613      	mov	r3, r2
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	4413      	add	r3, r2
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	440b      	add	r3, r1
 8013194:	3324      	adds	r3, #36	@ 0x24
 8013196:	2200      	movs	r2, #0
 8013198:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801319a:	4b32      	ldr	r3, [pc, #200]	@ (8013264 <USBD_CDC_DeInit+0xfc>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	4619      	mov	r1, r3
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f002 fa34 	bl	801560e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80131a6:	4b2f      	ldr	r3, [pc, #188]	@ (8013264 <USBD_CDC_DeInit+0xfc>)
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	f003 020f 	and.w	r2, r3, #15
 80131ae:	6879      	ldr	r1, [r7, #4]
 80131b0:	4613      	mov	r3, r2
 80131b2:	009b      	lsls	r3, r3, #2
 80131b4:	4413      	add	r3, r2
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	440b      	add	r3, r1
 80131ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80131be:	2200      	movs	r2, #0
 80131c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80131c2:	4b29      	ldr	r3, [pc, #164]	@ (8013268 <USBD_CDC_DeInit+0x100>)
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	4619      	mov	r1, r3
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f002 fa20 	bl	801560e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80131ce:	4b26      	ldr	r3, [pc, #152]	@ (8013268 <USBD_CDC_DeInit+0x100>)
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	f003 020f 	and.w	r2, r3, #15
 80131d6:	6879      	ldr	r1, [r7, #4]
 80131d8:	4613      	mov	r3, r2
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	4413      	add	r3, r2
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	440b      	add	r3, r1
 80131e2:	3324      	adds	r3, #36	@ 0x24
 80131e4:	2200      	movs	r2, #0
 80131e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80131e8:	4b1f      	ldr	r3, [pc, #124]	@ (8013268 <USBD_CDC_DeInit+0x100>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 020f 	and.w	r2, r3, #15
 80131f0:	6879      	ldr	r1, [r7, #4]
 80131f2:	4613      	mov	r3, r2
 80131f4:	009b      	lsls	r3, r3, #2
 80131f6:	4413      	add	r3, r2
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	440b      	add	r3, r1
 80131fc:	3326      	adds	r3, #38	@ 0x26
 80131fe:	2200      	movs	r2, #0
 8013200:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	32b0      	adds	r2, #176	@ 0xb0
 801320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d01f      	beq.n	8013254 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	33b0      	adds	r3, #176	@ 0xb0
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4413      	add	r3, r2
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	32b0      	adds	r2, #176	@ 0xb0
 8013232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013236:	4618      	mov	r0, r3
 8013238:	f002 fb2a 	bl	8015890 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	32b0      	adds	r2, #176	@ 0xb0
 8013246:	2100      	movs	r1, #0
 8013248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2200      	movs	r2, #0
 8013250:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	3708      	adds	r7, #8
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	200000d3 	.word	0x200000d3
 8013264:	200000d4 	.word	0x200000d4
 8013268:	200000d5 	.word	0x200000d5

0801326c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	32b0      	adds	r2, #176	@ 0xb0
 8013280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013284:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013286:	2300      	movs	r3, #0
 8013288:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801328a:	2300      	movs	r3, #0
 801328c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801328e:	2300      	movs	r3, #0
 8013290:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d101      	bne.n	801329c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013298:	2303      	movs	r3, #3
 801329a:	e0bf      	b.n	801341c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d050      	beq.n	801334a <USBD_CDC_Setup+0xde>
 80132a8:	2b20      	cmp	r3, #32
 80132aa:	f040 80af 	bne.w	801340c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	88db      	ldrh	r3, [r3, #6]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d03a      	beq.n	801332c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	b25b      	sxtb	r3, r3
 80132bc:	2b00      	cmp	r3, #0
 80132be:	da1b      	bge.n	80132f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	33b0      	adds	r3, #176	@ 0xb0
 80132ca:	009b      	lsls	r3, r3, #2
 80132cc:	4413      	add	r3, r2
 80132ce:	685b      	ldr	r3, [r3, #4]
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	683a      	ldr	r2, [r7, #0]
 80132d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80132d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80132d8:	683a      	ldr	r2, [r7, #0]
 80132da:	88d2      	ldrh	r2, [r2, #6]
 80132dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	88db      	ldrh	r3, [r3, #6]
 80132e2:	2b07      	cmp	r3, #7
 80132e4:	bf28      	it	cs
 80132e6:	2307      	movcs	r3, #7
 80132e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	89fa      	ldrh	r2, [r7, #14]
 80132ee:	4619      	mov	r1, r3
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f001 fd47 	bl	8014d84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80132f6:	e090      	b.n	801341a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	785a      	ldrb	r2, [r3, #1]
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	88db      	ldrh	r3, [r3, #6]
 8013306:	2b3f      	cmp	r3, #63	@ 0x3f
 8013308:	d803      	bhi.n	8013312 <USBD_CDC_Setup+0xa6>
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	88db      	ldrh	r3, [r3, #6]
 801330e:	b2da      	uxtb	r2, r3
 8013310:	e000      	b.n	8013314 <USBD_CDC_Setup+0xa8>
 8013312:	2240      	movs	r2, #64	@ 0x40
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801331a:	6939      	ldr	r1, [r7, #16]
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013322:	461a      	mov	r2, r3
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f001 fd59 	bl	8014ddc <USBD_CtlPrepareRx>
      break;
 801332a:	e076      	b.n	801341a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	33b0      	adds	r3, #176	@ 0xb0
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	4413      	add	r3, r2
 801333a:	685b      	ldr	r3, [r3, #4]
 801333c:	689b      	ldr	r3, [r3, #8]
 801333e:	683a      	ldr	r2, [r7, #0]
 8013340:	7850      	ldrb	r0, [r2, #1]
 8013342:	2200      	movs	r2, #0
 8013344:	6839      	ldr	r1, [r7, #0]
 8013346:	4798      	blx	r3
      break;
 8013348:	e067      	b.n	801341a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	785b      	ldrb	r3, [r3, #1]
 801334e:	2b0b      	cmp	r3, #11
 8013350:	d851      	bhi.n	80133f6 <USBD_CDC_Setup+0x18a>
 8013352:	a201      	add	r2, pc, #4	@ (adr r2, 8013358 <USBD_CDC_Setup+0xec>)
 8013354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013358:	08013389 	.word	0x08013389
 801335c:	08013405 	.word	0x08013405
 8013360:	080133f7 	.word	0x080133f7
 8013364:	080133f7 	.word	0x080133f7
 8013368:	080133f7 	.word	0x080133f7
 801336c:	080133f7 	.word	0x080133f7
 8013370:	080133f7 	.word	0x080133f7
 8013374:	080133f7 	.word	0x080133f7
 8013378:	080133f7 	.word	0x080133f7
 801337c:	080133f7 	.word	0x080133f7
 8013380:	080133b3 	.word	0x080133b3
 8013384:	080133dd 	.word	0x080133dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801338e:	b2db      	uxtb	r3, r3
 8013390:	2b03      	cmp	r3, #3
 8013392:	d107      	bne.n	80133a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013394:	f107 030a 	add.w	r3, r7, #10
 8013398:	2202      	movs	r2, #2
 801339a:	4619      	mov	r1, r3
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f001 fcf1 	bl	8014d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80133a2:	e032      	b.n	801340a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80133a4:	6839      	ldr	r1, [r7, #0]
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f001 fc6f 	bl	8014c8a <USBD_CtlError>
            ret = USBD_FAIL;
 80133ac:	2303      	movs	r3, #3
 80133ae:	75fb      	strb	r3, [r7, #23]
          break;
 80133b0:	e02b      	b.n	801340a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	2b03      	cmp	r3, #3
 80133bc:	d107      	bne.n	80133ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80133be:	f107 030d 	add.w	r3, r7, #13
 80133c2:	2201      	movs	r2, #1
 80133c4:	4619      	mov	r1, r3
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f001 fcdc 	bl	8014d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80133cc:	e01d      	b.n	801340a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80133ce:	6839      	ldr	r1, [r7, #0]
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f001 fc5a 	bl	8014c8a <USBD_CtlError>
            ret = USBD_FAIL;
 80133d6:	2303      	movs	r3, #3
 80133d8:	75fb      	strb	r3, [r7, #23]
          break;
 80133da:	e016      	b.n	801340a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	2b03      	cmp	r3, #3
 80133e6:	d00f      	beq.n	8013408 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80133e8:	6839      	ldr	r1, [r7, #0]
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f001 fc4d 	bl	8014c8a <USBD_CtlError>
            ret = USBD_FAIL;
 80133f0:	2303      	movs	r3, #3
 80133f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80133f4:	e008      	b.n	8013408 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f001 fc46 	bl	8014c8a <USBD_CtlError>
          ret = USBD_FAIL;
 80133fe:	2303      	movs	r3, #3
 8013400:	75fb      	strb	r3, [r7, #23]
          break;
 8013402:	e002      	b.n	801340a <USBD_CDC_Setup+0x19e>
          break;
 8013404:	bf00      	nop
 8013406:	e008      	b.n	801341a <USBD_CDC_Setup+0x1ae>
          break;
 8013408:	bf00      	nop
      }
      break;
 801340a:	e006      	b.n	801341a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801340c:	6839      	ldr	r1, [r7, #0]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f001 fc3b 	bl	8014c8a <USBD_CtlError>
      ret = USBD_FAIL;
 8013414:	2303      	movs	r3, #3
 8013416:	75fb      	strb	r3, [r7, #23]
      break;
 8013418:	bf00      	nop
  }

  return (uint8_t)ret;
 801341a:	7dfb      	ldrb	r3, [r7, #23]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	460b      	mov	r3, r1
 801342e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013436:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	32b0      	adds	r2, #176	@ 0xb0
 8013442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d101      	bne.n	801344e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801344a:	2303      	movs	r3, #3
 801344c:	e065      	b.n	801351a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	32b0      	adds	r2, #176	@ 0xb0
 8013458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801345c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801345e:	78fb      	ldrb	r3, [r7, #3]
 8013460:	f003 020f 	and.w	r2, r3, #15
 8013464:	6879      	ldr	r1, [r7, #4]
 8013466:	4613      	mov	r3, r2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	4413      	add	r3, r2
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	440b      	add	r3, r1
 8013470:	3318      	adds	r3, #24
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d02f      	beq.n	80134d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013478:	78fb      	ldrb	r3, [r7, #3]
 801347a:	f003 020f 	and.w	r2, r3, #15
 801347e:	6879      	ldr	r1, [r7, #4]
 8013480:	4613      	mov	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4413      	add	r3, r2
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	440b      	add	r3, r1
 801348a:	3318      	adds	r3, #24
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	78fb      	ldrb	r3, [r7, #3]
 8013490:	f003 010f 	and.w	r1, r3, #15
 8013494:	68f8      	ldr	r0, [r7, #12]
 8013496:	460b      	mov	r3, r1
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	440b      	add	r3, r1
 801349c:	00db      	lsls	r3, r3, #3
 801349e:	4403      	add	r3, r0
 80134a0:	3320      	adds	r3, #32
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80134a8:	fb01 f303 	mul.w	r3, r1, r3
 80134ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d112      	bne.n	80134d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80134b2:	78fb      	ldrb	r3, [r7, #3]
 80134b4:	f003 020f 	and.w	r2, r3, #15
 80134b8:	6879      	ldr	r1, [r7, #4]
 80134ba:	4613      	mov	r3, r2
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4413      	add	r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	440b      	add	r3, r1
 80134c4:	3318      	adds	r3, #24
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80134ca:	78f9      	ldrb	r1, [r7, #3]
 80134cc:	2300      	movs	r3, #0
 80134ce:	2200      	movs	r2, #0
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f002 f944 	bl	801575e <USBD_LL_Transmit>
 80134d6:	e01f      	b.n	8013518 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	2200      	movs	r2, #0
 80134dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	33b0      	adds	r3, #176	@ 0xb0
 80134ea:	009b      	lsls	r3, r3, #2
 80134ec:	4413      	add	r3, r2
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	691b      	ldr	r3, [r3, #16]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d010      	beq.n	8013518 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	33b0      	adds	r3, #176	@ 0xb0
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	4413      	add	r3, r2
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	691b      	ldr	r3, [r3, #16]
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801350e:	68ba      	ldr	r2, [r7, #8]
 8013510:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013514:	78fa      	ldrb	r2, [r7, #3]
 8013516:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013518:	2300      	movs	r3, #0
}
 801351a:	4618      	mov	r0, r3
 801351c:	3710      	adds	r7, #16
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b084      	sub	sp, #16
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
 801352a:	460b      	mov	r3, r1
 801352c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	32b0      	adds	r2, #176	@ 0xb0
 8013538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801353c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	32b0      	adds	r2, #176	@ 0xb0
 8013548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013550:	2303      	movs	r3, #3
 8013552:	e01a      	b.n	801358a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013554:	78fb      	ldrb	r3, [r7, #3]
 8013556:	4619      	mov	r1, r3
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f002 f942 	bl	80157e2 <USBD_LL_GetRxDataSize>
 801355e:	4602      	mov	r2, r0
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	33b0      	adds	r3, #176	@ 0xb0
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	4413      	add	r3, r2
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013584:	4611      	mov	r1, r2
 8013586:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3710      	adds	r7, #16
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}

08013592 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b084      	sub	sp, #16
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	32b0      	adds	r2, #176	@ 0xb0
 80135a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d101      	bne.n	80135b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80135b0:	2303      	movs	r3, #3
 80135b2:	e024      	b.n	80135fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	33b0      	adds	r3, #176	@ 0xb0
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	4413      	add	r3, r2
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d019      	beq.n	80135fc <USBD_CDC_EP0_RxReady+0x6a>
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80135ce:	2bff      	cmp	r3, #255	@ 0xff
 80135d0:	d014      	beq.n	80135fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135d8:	687a      	ldr	r2, [r7, #4]
 80135da:	33b0      	adds	r3, #176	@ 0xb0
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	4413      	add	r3, r2
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	689b      	ldr	r3, [r3, #8]
 80135e4:	68fa      	ldr	r2, [r7, #12]
 80135e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80135ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80135f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	22ff      	movs	r2, #255	@ 0xff
 80135f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
	...

08013608 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b086      	sub	sp, #24
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013610:	2182      	movs	r1, #130	@ 0x82
 8013612:	4818      	ldr	r0, [pc, #96]	@ (8013674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013614:	f000 fcd9 	bl	8013fca <USBD_GetEpDesc>
 8013618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801361a:	2101      	movs	r1, #1
 801361c:	4815      	ldr	r0, [pc, #84]	@ (8013674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801361e:	f000 fcd4 	bl	8013fca <USBD_GetEpDesc>
 8013622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013624:	2181      	movs	r1, #129	@ 0x81
 8013626:	4813      	ldr	r0, [pc, #76]	@ (8013674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013628:	f000 fccf 	bl	8013fca <USBD_GetEpDesc>
 801362c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d002      	beq.n	801363a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	2210      	movs	r2, #16
 8013638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d006      	beq.n	801364e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	2200      	movs	r2, #0
 8013644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013648:	711a      	strb	r2, [r3, #4]
 801364a:	2200      	movs	r2, #0
 801364c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d006      	beq.n	8013662 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	2200      	movs	r2, #0
 8013658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801365c:	711a      	strb	r2, [r3, #4]
 801365e:	2200      	movs	r2, #0
 8013660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2243      	movs	r2, #67	@ 0x43
 8013666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013668:	4b02      	ldr	r3, [pc, #8]	@ (8013674 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801366a:	4618      	mov	r0, r3
 801366c:	3718      	adds	r7, #24
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	20000090 	.word	0x20000090

08013678 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b086      	sub	sp, #24
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013680:	2182      	movs	r1, #130	@ 0x82
 8013682:	4818      	ldr	r0, [pc, #96]	@ (80136e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013684:	f000 fca1 	bl	8013fca <USBD_GetEpDesc>
 8013688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801368a:	2101      	movs	r1, #1
 801368c:	4815      	ldr	r0, [pc, #84]	@ (80136e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801368e:	f000 fc9c 	bl	8013fca <USBD_GetEpDesc>
 8013692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013694:	2181      	movs	r1, #129	@ 0x81
 8013696:	4813      	ldr	r0, [pc, #76]	@ (80136e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013698:	f000 fc97 	bl	8013fca <USBD_GetEpDesc>
 801369c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d002      	beq.n	80136aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	2210      	movs	r2, #16
 80136a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d006      	beq.n	80136be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	2200      	movs	r2, #0
 80136b4:	711a      	strb	r2, [r3, #4]
 80136b6:	2200      	movs	r2, #0
 80136b8:	f042 0202 	orr.w	r2, r2, #2
 80136bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d006      	beq.n	80136d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	2200      	movs	r2, #0
 80136c8:	711a      	strb	r2, [r3, #4]
 80136ca:	2200      	movs	r2, #0
 80136cc:	f042 0202 	orr.w	r2, r2, #2
 80136d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2243      	movs	r2, #67	@ 0x43
 80136d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80136d8:	4b02      	ldr	r3, [pc, #8]	@ (80136e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3718      	adds	r7, #24
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	20000090 	.word	0x20000090

080136e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b086      	sub	sp, #24
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80136f0:	2182      	movs	r1, #130	@ 0x82
 80136f2:	4818      	ldr	r0, [pc, #96]	@ (8013754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80136f4:	f000 fc69 	bl	8013fca <USBD_GetEpDesc>
 80136f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80136fa:	2101      	movs	r1, #1
 80136fc:	4815      	ldr	r0, [pc, #84]	@ (8013754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80136fe:	f000 fc64 	bl	8013fca <USBD_GetEpDesc>
 8013702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013704:	2181      	movs	r1, #129	@ 0x81
 8013706:	4813      	ldr	r0, [pc, #76]	@ (8013754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013708:	f000 fc5f 	bl	8013fca <USBD_GetEpDesc>
 801370c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d002      	beq.n	801371a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	2210      	movs	r2, #16
 8013718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d006      	beq.n	801372e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	2200      	movs	r2, #0
 8013724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013728:	711a      	strb	r2, [r3, #4]
 801372a:	2200      	movs	r2, #0
 801372c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d006      	beq.n	8013742 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2200      	movs	r2, #0
 8013738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801373c:	711a      	strb	r2, [r3, #4]
 801373e:	2200      	movs	r2, #0
 8013740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2243      	movs	r2, #67	@ 0x43
 8013746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013748:	4b02      	ldr	r3, [pc, #8]	@ (8013754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801374a:	4618      	mov	r0, r3
 801374c:	3718      	adds	r7, #24
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	20000090 	.word	0x20000090

08013758 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	220a      	movs	r2, #10
 8013764:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013766:	4b03      	ldr	r3, [pc, #12]	@ (8013774 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013768:	4618      	mov	r0, r3
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr
 8013774:	2000004c 	.word	0x2000004c

08013778 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013778:	b480      	push	{r7}
 801377a:	b083      	sub	sp, #12
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d101      	bne.n	801378c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013788:	2303      	movs	r3, #3
 801378a:	e009      	b.n	80137a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	33b0      	adds	r3, #176	@ 0xb0
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	4413      	add	r3, r2
 801379a:	683a      	ldr	r2, [r7, #0]
 801379c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b087      	sub	sp, #28
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	32b0      	adds	r2, #176	@ 0xb0
 80137c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80137ce:	2303      	movs	r3, #3
 80137d0:	e008      	b.n	80137e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80137e2:	2300      	movs	r3, #0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	371c      	adds	r7, #28
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr

080137f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	32b0      	adds	r2, #176	@ 0xb0
 8013804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013808:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d101      	bne.n	8013814 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013810:	2303      	movs	r3, #3
 8013812:	e004      	b.n	801381e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	683a      	ldr	r2, [r7, #0]
 8013818:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801381c:	2300      	movs	r3, #0
}
 801381e:	4618      	mov	r0, r3
 8013820:	3714      	adds	r7, #20
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr
	...

0801382c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	32b0      	adds	r2, #176	@ 0xb0
 801383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013842:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013844:	2301      	movs	r3, #1
 8013846:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d101      	bne.n	8013852 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801384e:	2303      	movs	r3, #3
 8013850:	e025      	b.n	801389e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013858:	2b00      	cmp	r3, #0
 801385a:	d11f      	bne.n	801389c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	2201      	movs	r2, #1
 8013860:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013864:	4b10      	ldr	r3, [pc, #64]	@ (80138a8 <USBD_CDC_TransmitPacket+0x7c>)
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	f003 020f 	and.w	r2, r3, #15
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	4613      	mov	r3, r2
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	4413      	add	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4403      	add	r3, r0
 801387e:	3318      	adds	r3, #24
 8013880:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013882:	4b09      	ldr	r3, [pc, #36]	@ (80138a8 <USBD_CDC_TransmitPacket+0x7c>)
 8013884:	7819      	ldrb	r1, [r3, #0]
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f001 ff63 	bl	801575e <USBD_LL_Transmit>

    ret = USBD_OK;
 8013898:	2300      	movs	r3, #0
 801389a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801389c:	7bfb      	ldrb	r3, [r7, #15]
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3710      	adds	r7, #16
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	200000d3 	.word	0x200000d3

080138ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b084      	sub	sp, #16
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	32b0      	adds	r2, #176	@ 0xb0
 80138be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	32b0      	adds	r2, #176	@ 0xb0
 80138ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d101      	bne.n	80138da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80138d6:	2303      	movs	r3, #3
 80138d8:	e018      	b.n	801390c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	7c1b      	ldrb	r3, [r3, #16]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d10a      	bne.n	80138f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80138e2:	4b0c      	ldr	r3, [pc, #48]	@ (8013914 <USBD_CDC_ReceivePacket+0x68>)
 80138e4:	7819      	ldrb	r1, [r3, #0]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80138ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f001 ff55 	bl	80157a0 <USBD_LL_PrepareReceive>
 80138f6:	e008      	b.n	801390a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80138f8:	4b06      	ldr	r3, [pc, #24]	@ (8013914 <USBD_CDC_ReceivePacket+0x68>)
 80138fa:	7819      	ldrb	r1, [r3, #0]
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013902:	2340      	movs	r3, #64	@ 0x40
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f001 ff4b 	bl	80157a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	200000d4 	.word	0x200000d4

08013918 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	4613      	mov	r3, r2
 8013924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10a      	bne.n	8013942 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 801392c:	4817      	ldr	r0, [pc, #92]	@ (801398c <USBD_Init+0x74>)
 801392e:	f002 fd03 	bl	8016338 <iprintf>
 8013932:	4817      	ldr	r0, [pc, #92]	@ (8013990 <USBD_Init+0x78>)
 8013934:	f002 fd00 	bl	8016338 <iprintf>
 8013938:	200a      	movs	r0, #10
 801393a:	f002 fd0f 	bl	801635c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801393e:	2303      	movs	r3, #3
 8013940:	e01f      	b.n	8013982 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2200      	movs	r2, #0
 8013946:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	2200      	movs	r2, #0
 801394e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2200      	movs	r2, #0
 8013956:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d003      	beq.n	8013968 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2201      	movs	r2, #1
 801396c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	79fa      	ldrb	r2, [r7, #7]
 8013974:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013976:	68f8      	ldr	r0, [r7, #12]
 8013978:	f001 fda6 	bl	80154c8 <USBD_LL_Init>
 801397c:	4603      	mov	r3, r0
 801397e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013980:	7dfb      	ldrb	r3, [r7, #23]
}
 8013982:	4618      	mov	r0, r3
 8013984:	3718      	adds	r7, #24
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}
 801398a:	bf00      	nop
 801398c:	0801a1bc 	.word	0x0801a1bc
 8013990:	0801a1c4 	.word	0x0801a1c4

08013994 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801399e:	2300      	movs	r3, #0
 80139a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10a      	bne.n	80139be <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80139a8:	481a      	ldr	r0, [pc, #104]	@ (8013a14 <USBD_RegisterClass+0x80>)
 80139aa:	f002 fcc5 	bl	8016338 <iprintf>
 80139ae:	481a      	ldr	r0, [pc, #104]	@ (8013a18 <USBD_RegisterClass+0x84>)
 80139b0:	f002 fcc2 	bl	8016338 <iprintf>
 80139b4:	200a      	movs	r0, #10
 80139b6:	f002 fcd1 	bl	801635c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80139ba:	2303      	movs	r3, #3
 80139bc:	e025      	b.n	8013a0a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	683a      	ldr	r2, [r7, #0]
 80139c2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	32ae      	adds	r2, #174	@ 0xae
 80139d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d00f      	beq.n	80139fa <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	32ae      	adds	r2, #174	@ 0xae
 80139e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139ea:	f107 020e 	add.w	r2, r7, #14
 80139ee:	4610      	mov	r0, r2
 80139f0:	4798      	blx	r3
 80139f2:	4602      	mov	r2, r0
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013a00:	1c5a      	adds	r2, r3, #1
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3710      	adds	r7, #16
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	0801a1bc 	.word	0x0801a1bc
 8013a18:	0801a1dc 	.word	0x0801a1dc

08013a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f001 fdb1 	bl	801558c <USBD_LL_Start>
 8013a2a:	4603      	mov	r3, r0
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b083      	sub	sp, #12
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013a3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	370c      	adds	r7, #12
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr

08013a4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a4a:	b580      	push	{r7, lr}
 8013a4c:	b084      	sub	sp, #16
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	6078      	str	r0, [r7, #4]
 8013a52:	460b      	mov	r3, r1
 8013a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a56:	2300      	movs	r3, #0
 8013a58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d009      	beq.n	8013a78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	78fa      	ldrb	r2, [r7, #3]
 8013a6e:	4611      	mov	r1, r2
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	4798      	blx	r3
 8013a74:	4603      	mov	r3, r0
 8013a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b084      	sub	sp, #16
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	78fa      	ldrb	r2, [r7, #3]
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	4798      	blx	r3
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d001      	beq.n	8013aac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3710      	adds	r7, #16
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b084      	sub	sp, #16
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
 8013abe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ac6:	6839      	ldr	r1, [r7, #0]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f001 f8a4 	bl	8014c16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013adc:	461a      	mov	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013aea:	f003 031f 	and.w	r3, r3, #31
 8013aee:	2b02      	cmp	r3, #2
 8013af0:	d01a      	beq.n	8013b28 <USBD_LL_SetupStage+0x72>
 8013af2:	2b02      	cmp	r3, #2
 8013af4:	d822      	bhi.n	8013b3c <USBD_LL_SetupStage+0x86>
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d002      	beq.n	8013b00 <USBD_LL_SetupStage+0x4a>
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d00a      	beq.n	8013b14 <USBD_LL_SetupStage+0x5e>
 8013afe:	e01d      	b.n	8013b3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b06:	4619      	mov	r1, r3
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f000 fad1 	bl	80140b0 <USBD_StdDevReq>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	73fb      	strb	r3, [r7, #15]
      break;
 8013b12:	e020      	b.n	8013b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f000 fb39 	bl	8014194 <USBD_StdItfReq>
 8013b22:	4603      	mov	r3, r0
 8013b24:	73fb      	strb	r3, [r7, #15]
      break;
 8013b26:	e016      	b.n	8013b56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013b2e:	4619      	mov	r1, r3
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f000 fb9b 	bl	801426c <USBD_StdEPReq>
 8013b36:	4603      	mov	r3, r0
 8013b38:	73fb      	strb	r3, [r7, #15]
      break;
 8013b3a:	e00c      	b.n	8013b56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013b42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	4619      	mov	r1, r3
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f001 fd7e 	bl	801564c <USBD_LL_StallEP>
 8013b50:	4603      	mov	r3, r0
 8013b52:	73fb      	strb	r3, [r7, #15]
      break;
 8013b54:	bf00      	nop
  }

  return ret;
 8013b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3710      	adds	r7, #16
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	460b      	mov	r3, r1
 8013b6a:	607a      	str	r2, [r7, #4]
 8013b6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013b72:	7afb      	ldrb	r3, [r7, #11]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d16e      	bne.n	8013c56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013b7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b86:	2b03      	cmp	r3, #3
 8013b88:	f040 8098 	bne.w	8013cbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	689a      	ldr	r2, [r3, #8]
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d913      	bls.n	8013bc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	689a      	ldr	r2, [r3, #8]
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	68db      	ldr	r3, [r3, #12]
 8013ba0:	1ad2      	subs	r2, r2, r3
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	68da      	ldr	r2, [r3, #12]
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	bf28      	it	cs
 8013bb2:	4613      	movcs	r3, r2
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	6879      	ldr	r1, [r7, #4]
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f001 f92c 	bl	8014e16 <USBD_CtlContinueRx>
 8013bbe:	e07d      	b.n	8013cbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013bc6:	f003 031f 	and.w	r3, r3, #31
 8013bca:	2b02      	cmp	r3, #2
 8013bcc:	d014      	beq.n	8013bf8 <USBD_LL_DataOutStage+0x98>
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	d81d      	bhi.n	8013c0e <USBD_LL_DataOutStage+0xae>
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d002      	beq.n	8013bdc <USBD_LL_DataOutStage+0x7c>
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d003      	beq.n	8013be2 <USBD_LL_DataOutStage+0x82>
 8013bda:	e018      	b.n	8013c0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	75bb      	strb	r3, [r7, #22]
            break;
 8013be0:	e018      	b.n	8013c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	4619      	mov	r1, r3
 8013bec:	68f8      	ldr	r0, [r7, #12]
 8013bee:	f000 f9d2 	bl	8013f96 <USBD_CoreFindIF>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8013bf6:	e00d      	b.n	8013c14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	4619      	mov	r1, r3
 8013c02:	68f8      	ldr	r0, [r7, #12]
 8013c04:	f000 f9d4 	bl	8013fb0 <USBD_CoreFindEP>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	75bb      	strb	r3, [r7, #22]
            break;
 8013c0c:	e002      	b.n	8013c14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	75bb      	strb	r3, [r7, #22]
            break;
 8013c12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013c14:	7dbb      	ldrb	r3, [r7, #22]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d119      	bne.n	8013c4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	2b03      	cmp	r3, #3
 8013c24:	d113      	bne.n	8013c4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013c26:	7dba      	ldrb	r2, [r7, #22]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	32ae      	adds	r2, #174	@ 0xae
 8013c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c30:	691b      	ldr	r3, [r3, #16]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00b      	beq.n	8013c4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013c36:	7dba      	ldrb	r2, [r7, #22]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013c3e:	7dba      	ldrb	r2, [r7, #22]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	32ae      	adds	r2, #174	@ 0xae
 8013c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c48:	691b      	ldr	r3, [r3, #16]
 8013c4a:	68f8      	ldr	r0, [r7, #12]
 8013c4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f001 f8f2 	bl	8014e38 <USBD_CtlSendStatus>
 8013c54:	e032      	b.n	8013cbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013c56:	7afb      	ldrb	r3, [r7, #11]
 8013c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	4619      	mov	r1, r3
 8013c60:	68f8      	ldr	r0, [r7, #12]
 8013c62:	f000 f9a5 	bl	8013fb0 <USBD_CoreFindEP>
 8013c66:	4603      	mov	r3, r0
 8013c68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c6a:	7dbb      	ldrb	r3, [r7, #22]
 8013c6c:	2bff      	cmp	r3, #255	@ 0xff
 8013c6e:	d025      	beq.n	8013cbc <USBD_LL_DataOutStage+0x15c>
 8013c70:	7dbb      	ldrb	r3, [r7, #22]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d122      	bne.n	8013cbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d117      	bne.n	8013cb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013c82:	7dba      	ldrb	r2, [r7, #22]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	32ae      	adds	r2, #174	@ 0xae
 8013c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c8c:	699b      	ldr	r3, [r3, #24]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00f      	beq.n	8013cb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013c92:	7dba      	ldrb	r2, [r7, #22]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013c9a:	7dba      	ldrb	r2, [r7, #22]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	32ae      	adds	r2, #174	@ 0xae
 8013ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca4:	699b      	ldr	r3, [r3, #24]
 8013ca6:	7afa      	ldrb	r2, [r7, #11]
 8013ca8:	4611      	mov	r1, r2
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	4798      	blx	r3
 8013cae:	4603      	mov	r3, r0
 8013cb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013cb2:	7dfb      	ldrb	r3, [r7, #23]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d001      	beq.n	8013cbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013cb8:	7dfb      	ldrb	r3, [r7, #23]
 8013cba:	e000      	b.n	8013cbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3718      	adds	r7, #24
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b086      	sub	sp, #24
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	60f8      	str	r0, [r7, #12]
 8013cce:	460b      	mov	r3, r1
 8013cd0:	607a      	str	r2, [r7, #4]
 8013cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013cd4:	7afb      	ldrb	r3, [r7, #11]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d16f      	bne.n	8013dba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	3314      	adds	r3, #20
 8013cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013ce6:	2b02      	cmp	r3, #2
 8013ce8:	d15a      	bne.n	8013da0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	689a      	ldr	r2, [r3, #8]
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	68db      	ldr	r3, [r3, #12]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d914      	bls.n	8013d20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	689a      	ldr	r2, [r3, #8]
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	1ad2      	subs	r2, r2, r3
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	689b      	ldr	r3, [r3, #8]
 8013d08:	461a      	mov	r2, r3
 8013d0a:	6879      	ldr	r1, [r7, #4]
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f001 f854 	bl	8014dba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d12:	2300      	movs	r3, #0
 8013d14:	2200      	movs	r2, #0
 8013d16:	2100      	movs	r1, #0
 8013d18:	68f8      	ldr	r0, [r7, #12]
 8013d1a:	f001 fd41 	bl	80157a0 <USBD_LL_PrepareReceive>
 8013d1e:	e03f      	b.n	8013da0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	68da      	ldr	r2, [r3, #12]
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	689b      	ldr	r3, [r3, #8]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d11c      	bne.n	8013d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	685a      	ldr	r2, [r3, #4]
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d316      	bcc.n	8013d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	685a      	ldr	r2, [r3, #4]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d20f      	bcs.n	8013d66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013d46:	2200      	movs	r2, #0
 8013d48:	2100      	movs	r1, #0
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	f001 f835 	bl	8014dba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2200      	movs	r2, #0
 8013d54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d58:	2300      	movs	r3, #0
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	68f8      	ldr	r0, [r7, #12]
 8013d60:	f001 fd1e 	bl	80157a0 <USBD_LL_PrepareReceive>
 8013d64:	e01c      	b.n	8013da0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	2b03      	cmp	r3, #3
 8013d70:	d10f      	bne.n	8013d92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d009      	beq.n	8013d92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2200      	movs	r2, #0
 8013d82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d92:	2180      	movs	r1, #128	@ 0x80
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f001 fc59 	bl	801564c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	f001 f85f 	bl	8014e5e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d03a      	beq.n	8013e20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013daa:	68f8      	ldr	r0, [r7, #12]
 8013dac:	f7ff fe42 	bl	8013a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2200      	movs	r2, #0
 8013db4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013db8:	e032      	b.n	8013e20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013dba:	7afb      	ldrb	r3, [r7, #11]
 8013dbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f000 f8f3 	bl	8013fb0 <USBD_CoreFindEP>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013dce:	7dfb      	ldrb	r3, [r7, #23]
 8013dd0:	2bff      	cmp	r3, #255	@ 0xff
 8013dd2:	d025      	beq.n	8013e20 <USBD_LL_DataInStage+0x15a>
 8013dd4:	7dfb      	ldrb	r3, [r7, #23]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d122      	bne.n	8013e20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	2b03      	cmp	r3, #3
 8013de4:	d11c      	bne.n	8013e20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013de6:	7dfa      	ldrb	r2, [r7, #23]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	32ae      	adds	r2, #174	@ 0xae
 8013dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013df0:	695b      	ldr	r3, [r3, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d014      	beq.n	8013e20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013df6:	7dfa      	ldrb	r2, [r7, #23]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013dfe:	7dfa      	ldrb	r2, [r7, #23]
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	32ae      	adds	r2, #174	@ 0xae
 8013e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e08:	695b      	ldr	r3, [r3, #20]
 8013e0a:	7afa      	ldrb	r2, [r7, #11]
 8013e0c:	4611      	mov	r1, r2
 8013e0e:	68f8      	ldr	r0, [r7, #12]
 8013e10:	4798      	blx	r3
 8013e12:	4603      	mov	r3, r0
 8013e14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013e16:	7dbb      	ldrb	r3, [r7, #22]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d001      	beq.n	8013e20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013e1c:	7dbb      	ldrb	r3, [r7, #22]
 8013e1e:	e000      	b.n	8013e22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013e20:	2300      	movs	r3, #0
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3718      	adds	r7, #24
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}

08013e2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b084      	sub	sp, #16
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e32:	2300      	movs	r3, #0
 8013e34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2201      	movs	r2, #1
 8013e3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2200      	movs	r2, #0
 8013e42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2200      	movs	r2, #0
 8013e58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d014      	beq.n	8013e90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d00e      	beq.n	8013e90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	6852      	ldr	r2, [r2, #4]
 8013e7e:	b2d2      	uxtb	r2, r2
 8013e80:	4611      	mov	r1, r2
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	4798      	blx	r3
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d001      	beq.n	8013e90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013e8c:	2303      	movs	r3, #3
 8013e8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e90:	2340      	movs	r3, #64	@ 0x40
 8013e92:	2200      	movs	r2, #0
 8013e94:	2100      	movs	r1, #0
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f001 fb93 	bl	80155c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2240      	movs	r2, #64	@ 0x40
 8013ea8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013eac:	2340      	movs	r3, #64	@ 0x40
 8013eae:	2200      	movs	r2, #0
 8013eb0:	2180      	movs	r1, #128	@ 0x80
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f001 fb85 	bl	80155c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2201      	movs	r2, #1
 8013ebc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2240      	movs	r2, #64	@ 0x40
 8013ec2:	621a      	str	r2, [r3, #32]

  return ret;
 8013ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}

08013ece <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ece:	b480      	push	{r7}
 8013ed0:	b083      	sub	sp, #12
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	6078      	str	r0, [r7, #4]
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	78fa      	ldrb	r2, [r7, #3]
 8013ede:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013ee0:	2300      	movs	r3, #0
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	370c      	adds	r7, #12
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eec:	4770      	bx	lr

08013eee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013eee:	b480      	push	{r7}
 8013ef0:	b083      	sub	sp, #12
 8013ef2:	af00      	add	r7, sp, #0
 8013ef4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b04      	cmp	r3, #4
 8013f00:	d006      	beq.n	8013f10 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2204      	movs	r2, #4
 8013f14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013f18:	2300      	movs	r3, #0
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	370c      	adds	r7, #12
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f24:	4770      	bx	lr

08013f26 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013f26:	b480      	push	{r7}
 8013f28:	b083      	sub	sp, #12
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	2b04      	cmp	r3, #4
 8013f38:	d106      	bne.n	8013f48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	370c      	adds	r7, #12
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr

08013f56 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013f56:	b580      	push	{r7, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	2b03      	cmp	r3, #3
 8013f68:	d110      	bne.n	8013f8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d00b      	beq.n	8013f8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f7a:	69db      	ldr	r3, [r3, #28]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d005      	beq.n	8013f8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f86:	69db      	ldr	r3, [r3, #28]
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013f8c:	2300      	movs	r3, #0
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3708      	adds	r7, #8
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}

08013f96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f96:	b480      	push	{r7}
 8013f98:	b083      	sub	sp, #12
 8013f9a:	af00      	add	r7, sp, #0
 8013f9c:	6078      	str	r0, [r7, #4]
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013fa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	370c      	adds	r7, #12
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	460b      	mov	r3, r1
 8013fba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013fbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	370c      	adds	r7, #12
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr

08013fca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013fca:	b580      	push	{r7, lr}
 8013fcc:	b086      	sub	sp, #24
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	6078      	str	r0, [r7, #4]
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	885b      	ldrh	r3, [r3, #2]
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	68fa      	ldr	r2, [r7, #12]
 8013fea:	7812      	ldrb	r2, [r2, #0]
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d91f      	bls.n	8014030 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013ff6:	e013      	b.n	8014020 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013ff8:	f107 030a 	add.w	r3, r7, #10
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	6978      	ldr	r0, [r7, #20]
 8014000:	f000 f81b 	bl	801403a <USBD_GetNextDesc>
 8014004:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	785b      	ldrb	r3, [r3, #1]
 801400a:	2b05      	cmp	r3, #5
 801400c:	d108      	bne.n	8014020 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	789b      	ldrb	r3, [r3, #2]
 8014016:	78fa      	ldrb	r2, [r7, #3]
 8014018:	429a      	cmp	r2, r3
 801401a:	d008      	beq.n	801402e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801401c:	2300      	movs	r3, #0
 801401e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	885b      	ldrh	r3, [r3, #2]
 8014024:	b29a      	uxth	r2, r3
 8014026:	897b      	ldrh	r3, [r7, #10]
 8014028:	429a      	cmp	r2, r3
 801402a:	d8e5      	bhi.n	8013ff8 <USBD_GetEpDesc+0x2e>
 801402c:	e000      	b.n	8014030 <USBD_GetEpDesc+0x66>
          break;
 801402e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014030:	693b      	ldr	r3, [r7, #16]
}
 8014032:	4618      	mov	r0, r3
 8014034:	3718      	adds	r7, #24
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}

0801403a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801403a:	b480      	push	{r7}
 801403c:	b085      	sub	sp, #20
 801403e:	af00      	add	r7, sp, #0
 8014040:	6078      	str	r0, [r7, #4]
 8014042:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	881b      	ldrh	r3, [r3, #0]
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	7812      	ldrb	r2, [r2, #0]
 8014050:	4413      	add	r3, r2
 8014052:	b29a      	uxth	r2, r3
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	461a      	mov	r2, r3
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	4413      	add	r3, r2
 8014062:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014064:	68fb      	ldr	r3, [r7, #12]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3714      	adds	r7, #20
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr

08014072 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014072:	b480      	push	{r7}
 8014074:	b087      	sub	sp, #28
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	3301      	adds	r3, #1
 8014088:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014090:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014094:	021b      	lsls	r3, r3, #8
 8014096:	b21a      	sxth	r2, r3
 8014098:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801409c:	4313      	orrs	r3, r2
 801409e:	b21b      	sxth	r3, r3
 80140a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80140a2:	89fb      	ldrh	r3, [r7, #14]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	371c      	adds	r7, #28
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr

080140b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80140c6:	2b40      	cmp	r3, #64	@ 0x40
 80140c8:	d005      	beq.n	80140d6 <USBD_StdDevReq+0x26>
 80140ca:	2b40      	cmp	r3, #64	@ 0x40
 80140cc:	d857      	bhi.n	801417e <USBD_StdDevReq+0xce>
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d00f      	beq.n	80140f2 <USBD_StdDevReq+0x42>
 80140d2:	2b20      	cmp	r3, #32
 80140d4:	d153      	bne.n	801417e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	32ae      	adds	r2, #174	@ 0xae
 80140e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	6839      	ldr	r1, [r7, #0]
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	4798      	blx	r3
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]
      break;
 80140f0:	e04a      	b.n	8014188 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	785b      	ldrb	r3, [r3, #1]
 80140f6:	2b09      	cmp	r3, #9
 80140f8:	d83b      	bhi.n	8014172 <USBD_StdDevReq+0xc2>
 80140fa:	a201      	add	r2, pc, #4	@ (adr r2, 8014100 <USBD_StdDevReq+0x50>)
 80140fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014100:	08014155 	.word	0x08014155
 8014104:	08014169 	.word	0x08014169
 8014108:	08014173 	.word	0x08014173
 801410c:	0801415f 	.word	0x0801415f
 8014110:	08014173 	.word	0x08014173
 8014114:	08014133 	.word	0x08014133
 8014118:	08014129 	.word	0x08014129
 801411c:	08014173 	.word	0x08014173
 8014120:	0801414b 	.word	0x0801414b
 8014124:	0801413d 	.word	0x0801413d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014128:	6839      	ldr	r1, [r7, #0]
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 fa3c 	bl	80145a8 <USBD_GetDescriptor>
          break;
 8014130:	e024      	b.n	801417c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014132:	6839      	ldr	r1, [r7, #0]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 fbcb 	bl	80148d0 <USBD_SetAddress>
          break;
 801413a:	e01f      	b.n	801417c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 fc0a 	bl	8014958 <USBD_SetConfig>
 8014144:	4603      	mov	r3, r0
 8014146:	73fb      	strb	r3, [r7, #15]
          break;
 8014148:	e018      	b.n	801417c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fcad 	bl	8014aac <USBD_GetConfig>
          break;
 8014152:	e013      	b.n	801417c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014154:	6839      	ldr	r1, [r7, #0]
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fcde 	bl	8014b18 <USBD_GetStatus>
          break;
 801415c:	e00e      	b.n	801417c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801415e:	6839      	ldr	r1, [r7, #0]
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f000 fd0d 	bl	8014b80 <USBD_SetFeature>
          break;
 8014166:	e009      	b.n	801417c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014168:	6839      	ldr	r1, [r7, #0]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f000 fd31 	bl	8014bd2 <USBD_ClrFeature>
          break;
 8014170:	e004      	b.n	801417c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014172:	6839      	ldr	r1, [r7, #0]
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 fd88 	bl	8014c8a <USBD_CtlError>
          break;
 801417a:	bf00      	nop
      }
      break;
 801417c:	e004      	b.n	8014188 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f000 fd82 	bl	8014c8a <USBD_CtlError>
      break;
 8014186:	bf00      	nop
  }

  return ret;
 8014188:	7bfb      	ldrb	r3, [r7, #15]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop

08014194 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b084      	sub	sp, #16
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80141aa:	2b40      	cmp	r3, #64	@ 0x40
 80141ac:	d005      	beq.n	80141ba <USBD_StdItfReq+0x26>
 80141ae:	2b40      	cmp	r3, #64	@ 0x40
 80141b0:	d852      	bhi.n	8014258 <USBD_StdItfReq+0xc4>
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d001      	beq.n	80141ba <USBD_StdItfReq+0x26>
 80141b6:	2b20      	cmp	r3, #32
 80141b8:	d14e      	bne.n	8014258 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141c0:	b2db      	uxtb	r3, r3
 80141c2:	3b01      	subs	r3, #1
 80141c4:	2b02      	cmp	r3, #2
 80141c6:	d840      	bhi.n	801424a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	889b      	ldrh	r3, [r3, #4]
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	2b01      	cmp	r3, #1
 80141d0:	d836      	bhi.n	8014240 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	889b      	ldrh	r3, [r3, #4]
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	4619      	mov	r1, r3
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f7ff fedb 	bl	8013f96 <USBD_CoreFindIF>
 80141e0:	4603      	mov	r3, r0
 80141e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141e4:	7bbb      	ldrb	r3, [r7, #14]
 80141e6:	2bff      	cmp	r3, #255	@ 0xff
 80141e8:	d01d      	beq.n	8014226 <USBD_StdItfReq+0x92>
 80141ea:	7bbb      	ldrb	r3, [r7, #14]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d11a      	bne.n	8014226 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80141f0:	7bba      	ldrb	r2, [r7, #14]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	32ae      	adds	r2, #174	@ 0xae
 80141f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d00f      	beq.n	8014220 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014200:	7bba      	ldrb	r2, [r7, #14]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014208:	7bba      	ldrb	r2, [r7, #14]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	32ae      	adds	r2, #174	@ 0xae
 801420e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	6839      	ldr	r1, [r7, #0]
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	4798      	blx	r3
 801421a:	4603      	mov	r3, r0
 801421c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801421e:	e004      	b.n	801422a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014220:	2303      	movs	r3, #3
 8014222:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014224:	e001      	b.n	801422a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014226:	2303      	movs	r3, #3
 8014228:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	88db      	ldrh	r3, [r3, #6]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d110      	bne.n	8014254 <USBD_StdItfReq+0xc0>
 8014232:	7bfb      	ldrb	r3, [r7, #15]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d10d      	bne.n	8014254 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f000 fdfd 	bl	8014e38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801423e:	e009      	b.n	8014254 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014240:	6839      	ldr	r1, [r7, #0]
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f000 fd21 	bl	8014c8a <USBD_CtlError>
          break;
 8014248:	e004      	b.n	8014254 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 fd1c 	bl	8014c8a <USBD_CtlError>
          break;
 8014252:	e000      	b.n	8014256 <USBD_StdItfReq+0xc2>
          break;
 8014254:	bf00      	nop
      }
      break;
 8014256:	e004      	b.n	8014262 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fd15 	bl	8014c8a <USBD_CtlError>
      break;
 8014260:	bf00      	nop
  }

  return ret;
 8014262:	7bfb      	ldrb	r3, [r7, #15]
}
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014276:	2300      	movs	r3, #0
 8014278:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	889b      	ldrh	r3, [r3, #4]
 801427e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014280:	683b      	ldr	r3, [r7, #0]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014288:	2b40      	cmp	r3, #64	@ 0x40
 801428a:	d007      	beq.n	801429c <USBD_StdEPReq+0x30>
 801428c:	2b40      	cmp	r3, #64	@ 0x40
 801428e:	f200 817f 	bhi.w	8014590 <USBD_StdEPReq+0x324>
 8014292:	2b00      	cmp	r3, #0
 8014294:	d02a      	beq.n	80142ec <USBD_StdEPReq+0x80>
 8014296:	2b20      	cmp	r3, #32
 8014298:	f040 817a 	bne.w	8014590 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801429c:	7bbb      	ldrb	r3, [r7, #14]
 801429e:	4619      	mov	r1, r3
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f7ff fe85 	bl	8013fb0 <USBD_CoreFindEP>
 80142a6:	4603      	mov	r3, r0
 80142a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80142aa:	7b7b      	ldrb	r3, [r7, #13]
 80142ac:	2bff      	cmp	r3, #255	@ 0xff
 80142ae:	f000 8174 	beq.w	801459a <USBD_StdEPReq+0x32e>
 80142b2:	7b7b      	ldrb	r3, [r7, #13]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f040 8170 	bne.w	801459a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80142ba:	7b7a      	ldrb	r2, [r7, #13]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80142c2:	7b7a      	ldrb	r2, [r7, #13]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	32ae      	adds	r2, #174	@ 0xae
 80142c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142cc:	689b      	ldr	r3, [r3, #8]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	f000 8163 	beq.w	801459a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80142d4:	7b7a      	ldrb	r2, [r7, #13]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	32ae      	adds	r2, #174	@ 0xae
 80142da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142de:	689b      	ldr	r3, [r3, #8]
 80142e0:	6839      	ldr	r1, [r7, #0]
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	4798      	blx	r3
 80142e6:	4603      	mov	r3, r0
 80142e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80142ea:	e156      	b.n	801459a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	785b      	ldrb	r3, [r3, #1]
 80142f0:	2b03      	cmp	r3, #3
 80142f2:	d008      	beq.n	8014306 <USBD_StdEPReq+0x9a>
 80142f4:	2b03      	cmp	r3, #3
 80142f6:	f300 8145 	bgt.w	8014584 <USBD_StdEPReq+0x318>
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f000 809b 	beq.w	8014436 <USBD_StdEPReq+0x1ca>
 8014300:	2b01      	cmp	r3, #1
 8014302:	d03c      	beq.n	801437e <USBD_StdEPReq+0x112>
 8014304:	e13e      	b.n	8014584 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801430c:	b2db      	uxtb	r3, r3
 801430e:	2b02      	cmp	r3, #2
 8014310:	d002      	beq.n	8014318 <USBD_StdEPReq+0xac>
 8014312:	2b03      	cmp	r3, #3
 8014314:	d016      	beq.n	8014344 <USBD_StdEPReq+0xd8>
 8014316:	e02c      	b.n	8014372 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014318:	7bbb      	ldrb	r3, [r7, #14]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00d      	beq.n	801433a <USBD_StdEPReq+0xce>
 801431e:	7bbb      	ldrb	r3, [r7, #14]
 8014320:	2b80      	cmp	r3, #128	@ 0x80
 8014322:	d00a      	beq.n	801433a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014324:	7bbb      	ldrb	r3, [r7, #14]
 8014326:	4619      	mov	r1, r3
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f001 f98f 	bl	801564c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801432e:	2180      	movs	r1, #128	@ 0x80
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f001 f98b 	bl	801564c <USBD_LL_StallEP>
 8014336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014338:	e020      	b.n	801437c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801433a:	6839      	ldr	r1, [r7, #0]
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 fca4 	bl	8014c8a <USBD_CtlError>
              break;
 8014342:	e01b      	b.n	801437c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	885b      	ldrh	r3, [r3, #2]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d10e      	bne.n	801436a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801434c:	7bbb      	ldrb	r3, [r7, #14]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d00b      	beq.n	801436a <USBD_StdEPReq+0xfe>
 8014352:	7bbb      	ldrb	r3, [r7, #14]
 8014354:	2b80      	cmp	r3, #128	@ 0x80
 8014356:	d008      	beq.n	801436a <USBD_StdEPReq+0xfe>
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	88db      	ldrh	r3, [r3, #6]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d104      	bne.n	801436a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014360:	7bbb      	ldrb	r3, [r7, #14]
 8014362:	4619      	mov	r1, r3
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f001 f971 	bl	801564c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 fd64 	bl	8014e38 <USBD_CtlSendStatus>

              break;
 8014370:	e004      	b.n	801437c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014372:	6839      	ldr	r1, [r7, #0]
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f000 fc88 	bl	8014c8a <USBD_CtlError>
              break;
 801437a:	bf00      	nop
          }
          break;
 801437c:	e107      	b.n	801458e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014384:	b2db      	uxtb	r3, r3
 8014386:	2b02      	cmp	r3, #2
 8014388:	d002      	beq.n	8014390 <USBD_StdEPReq+0x124>
 801438a:	2b03      	cmp	r3, #3
 801438c:	d016      	beq.n	80143bc <USBD_StdEPReq+0x150>
 801438e:	e04b      	b.n	8014428 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014390:	7bbb      	ldrb	r3, [r7, #14]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d00d      	beq.n	80143b2 <USBD_StdEPReq+0x146>
 8014396:	7bbb      	ldrb	r3, [r7, #14]
 8014398:	2b80      	cmp	r3, #128	@ 0x80
 801439a:	d00a      	beq.n	80143b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801439c:	7bbb      	ldrb	r3, [r7, #14]
 801439e:	4619      	mov	r1, r3
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f001 f953 	bl	801564c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80143a6:	2180      	movs	r1, #128	@ 0x80
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f001 f94f 	bl	801564c <USBD_LL_StallEP>
 80143ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80143b0:	e040      	b.n	8014434 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80143b2:	6839      	ldr	r1, [r7, #0]
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 fc68 	bl	8014c8a <USBD_CtlError>
              break;
 80143ba:	e03b      	b.n	8014434 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	885b      	ldrh	r3, [r3, #2]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d136      	bne.n	8014432 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80143c4:	7bbb      	ldrb	r3, [r7, #14]
 80143c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d004      	beq.n	80143d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80143ce:	7bbb      	ldrb	r3, [r7, #14]
 80143d0:	4619      	mov	r1, r3
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f001 f959 	bl	801568a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 fd2d 	bl	8014e38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80143de:	7bbb      	ldrb	r3, [r7, #14]
 80143e0:	4619      	mov	r1, r3
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f7ff fde4 	bl	8013fb0 <USBD_CoreFindEP>
 80143e8:	4603      	mov	r3, r0
 80143ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143ec:	7b7b      	ldrb	r3, [r7, #13]
 80143ee:	2bff      	cmp	r3, #255	@ 0xff
 80143f0:	d01f      	beq.n	8014432 <USBD_StdEPReq+0x1c6>
 80143f2:	7b7b      	ldrb	r3, [r7, #13]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d11c      	bne.n	8014432 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80143f8:	7b7a      	ldrb	r2, [r7, #13]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014400:	7b7a      	ldrb	r2, [r7, #13]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	32ae      	adds	r2, #174	@ 0xae
 8014406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d010      	beq.n	8014432 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014410:	7b7a      	ldrb	r2, [r7, #13]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	32ae      	adds	r2, #174	@ 0xae
 8014416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441a:	689b      	ldr	r3, [r3, #8]
 801441c:	6839      	ldr	r1, [r7, #0]
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	4798      	blx	r3
 8014422:	4603      	mov	r3, r0
 8014424:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014426:	e004      	b.n	8014432 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014428:	6839      	ldr	r1, [r7, #0]
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f000 fc2d 	bl	8014c8a <USBD_CtlError>
              break;
 8014430:	e000      	b.n	8014434 <USBD_StdEPReq+0x1c8>
              break;
 8014432:	bf00      	nop
          }
          break;
 8014434:	e0ab      	b.n	801458e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801443c:	b2db      	uxtb	r3, r3
 801443e:	2b02      	cmp	r3, #2
 8014440:	d002      	beq.n	8014448 <USBD_StdEPReq+0x1dc>
 8014442:	2b03      	cmp	r3, #3
 8014444:	d032      	beq.n	80144ac <USBD_StdEPReq+0x240>
 8014446:	e097      	b.n	8014578 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014448:	7bbb      	ldrb	r3, [r7, #14]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d007      	beq.n	801445e <USBD_StdEPReq+0x1f2>
 801444e:	7bbb      	ldrb	r3, [r7, #14]
 8014450:	2b80      	cmp	r3, #128	@ 0x80
 8014452:	d004      	beq.n	801445e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014454:	6839      	ldr	r1, [r7, #0]
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 fc17 	bl	8014c8a <USBD_CtlError>
                break;
 801445c:	e091      	b.n	8014582 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801445e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014462:	2b00      	cmp	r3, #0
 8014464:	da0b      	bge.n	801447e <USBD_StdEPReq+0x212>
 8014466:	7bbb      	ldrb	r3, [r7, #14]
 8014468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801446c:	4613      	mov	r3, r2
 801446e:	009b      	lsls	r3, r3, #2
 8014470:	4413      	add	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	3310      	adds	r3, #16
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	4413      	add	r3, r2
 801447a:	3304      	adds	r3, #4
 801447c:	e00b      	b.n	8014496 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801447e:	7bbb      	ldrb	r3, [r7, #14]
 8014480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014484:	4613      	mov	r3, r2
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	4413      	add	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014490:	687a      	ldr	r2, [r7, #4]
 8014492:	4413      	add	r3, r2
 8014494:	3304      	adds	r3, #4
 8014496:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	2200      	movs	r2, #0
 801449c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	2202      	movs	r2, #2
 80144a2:	4619      	mov	r1, r3
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f000 fc6d 	bl	8014d84 <USBD_CtlSendData>
              break;
 80144aa:	e06a      	b.n	8014582 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80144ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	da11      	bge.n	80144d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	f003 020f 	and.w	r2, r3, #15
 80144ba:	6879      	ldr	r1, [r7, #4]
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	440b      	add	r3, r1
 80144c6:	3324      	adds	r3, #36	@ 0x24
 80144c8:	881b      	ldrh	r3, [r3, #0]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d117      	bne.n	80144fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 fbda 	bl	8014c8a <USBD_CtlError>
                  break;
 80144d6:	e054      	b.n	8014582 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80144d8:	7bbb      	ldrb	r3, [r7, #14]
 80144da:	f003 020f 	and.w	r2, r3, #15
 80144de:	6879      	ldr	r1, [r7, #4]
 80144e0:	4613      	mov	r3, r2
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	4413      	add	r3, r2
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	440b      	add	r3, r1
 80144ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80144ee:	881b      	ldrh	r3, [r3, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d104      	bne.n	80144fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144f4:	6839      	ldr	r1, [r7, #0]
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 fbc7 	bl	8014c8a <USBD_CtlError>
                  break;
 80144fc:	e041      	b.n	8014582 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014502:	2b00      	cmp	r3, #0
 8014504:	da0b      	bge.n	801451e <USBD_StdEPReq+0x2b2>
 8014506:	7bbb      	ldrb	r3, [r7, #14]
 8014508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801450c:	4613      	mov	r3, r2
 801450e:	009b      	lsls	r3, r3, #2
 8014510:	4413      	add	r3, r2
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	3310      	adds	r3, #16
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	4413      	add	r3, r2
 801451a:	3304      	adds	r3, #4
 801451c:	e00b      	b.n	8014536 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801451e:	7bbb      	ldrb	r3, [r7, #14]
 8014520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014524:	4613      	mov	r3, r2
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	4413      	add	r3, r2
 801452a:	009b      	lsls	r3, r3, #2
 801452c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	4413      	add	r3, r2
 8014534:	3304      	adds	r3, #4
 8014536:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014538:	7bbb      	ldrb	r3, [r7, #14]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d002      	beq.n	8014544 <USBD_StdEPReq+0x2d8>
 801453e:	7bbb      	ldrb	r3, [r7, #14]
 8014540:	2b80      	cmp	r3, #128	@ 0x80
 8014542:	d103      	bne.n	801454c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	2200      	movs	r2, #0
 8014548:	601a      	str	r2, [r3, #0]
 801454a:	e00e      	b.n	801456a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801454c:	7bbb      	ldrb	r3, [r7, #14]
 801454e:	4619      	mov	r1, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f001 f8b9 	bl	80156c8 <USBD_LL_IsStallEP>
 8014556:	4603      	mov	r3, r0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d003      	beq.n	8014564 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	2201      	movs	r2, #1
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	e002      	b.n	801456a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2200      	movs	r2, #0
 8014568:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	2202      	movs	r2, #2
 801456e:	4619      	mov	r1, r3
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f000 fc07 	bl	8014d84 <USBD_CtlSendData>
              break;
 8014576:	e004      	b.n	8014582 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014578:	6839      	ldr	r1, [r7, #0]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fb85 	bl	8014c8a <USBD_CtlError>
              break;
 8014580:	bf00      	nop
          }
          break;
 8014582:	e004      	b.n	801458e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014584:	6839      	ldr	r1, [r7, #0]
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 fb7f 	bl	8014c8a <USBD_CtlError>
          break;
 801458c:	bf00      	nop
      }
      break;
 801458e:	e005      	b.n	801459c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014590:	6839      	ldr	r1, [r7, #0]
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f000 fb79 	bl	8014c8a <USBD_CtlError>
      break;
 8014598:	e000      	b.n	801459c <USBD_StdEPReq+0x330>
      break;
 801459a:	bf00      	nop
  }

  return ret;
 801459c:	7bfb      	ldrb	r3, [r7, #15]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3710      	adds	r7, #16
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
	...

080145a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80145b2:	2300      	movs	r3, #0
 80145b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80145b6:	2300      	movs	r3, #0
 80145b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80145ba:	2300      	movs	r3, #0
 80145bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	885b      	ldrh	r3, [r3, #2]
 80145c2:	0a1b      	lsrs	r3, r3, #8
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	3b01      	subs	r3, #1
 80145c8:	2b0e      	cmp	r3, #14
 80145ca:	f200 8152 	bhi.w	8014872 <USBD_GetDescriptor+0x2ca>
 80145ce:	a201      	add	r2, pc, #4	@ (adr r2, 80145d4 <USBD_GetDescriptor+0x2c>)
 80145d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d4:	08014645 	.word	0x08014645
 80145d8:	0801465d 	.word	0x0801465d
 80145dc:	0801469d 	.word	0x0801469d
 80145e0:	08014873 	.word	0x08014873
 80145e4:	08014873 	.word	0x08014873
 80145e8:	08014813 	.word	0x08014813
 80145ec:	0801483f 	.word	0x0801483f
 80145f0:	08014873 	.word	0x08014873
 80145f4:	08014873 	.word	0x08014873
 80145f8:	08014873 	.word	0x08014873
 80145fc:	08014873 	.word	0x08014873
 8014600:	08014873 	.word	0x08014873
 8014604:	08014873 	.word	0x08014873
 8014608:	08014873 	.word	0x08014873
 801460c:	08014611 	.word	0x08014611
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014616:	69db      	ldr	r3, [r3, #28]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d00b      	beq.n	8014634 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014622:	69db      	ldr	r3, [r3, #28]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	7c12      	ldrb	r2, [r2, #16]
 8014628:	f107 0108 	add.w	r1, r7, #8
 801462c:	4610      	mov	r0, r2
 801462e:	4798      	blx	r3
 8014630:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014632:	e126      	b.n	8014882 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014634:	6839      	ldr	r1, [r7, #0]
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 fb27 	bl	8014c8a <USBD_CtlError>
        err++;
 801463c:	7afb      	ldrb	r3, [r7, #11]
 801463e:	3301      	adds	r3, #1
 8014640:	72fb      	strb	r3, [r7, #11]
      break;
 8014642:	e11e      	b.n	8014882 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	7c12      	ldrb	r2, [r2, #16]
 8014650:	f107 0108 	add.w	r1, r7, #8
 8014654:	4610      	mov	r0, r2
 8014656:	4798      	blx	r3
 8014658:	60f8      	str	r0, [r7, #12]
      break;
 801465a:	e112      	b.n	8014882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	7c1b      	ldrb	r3, [r3, #16]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d10d      	bne.n	8014680 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801466c:	f107 0208 	add.w	r2, r7, #8
 8014670:	4610      	mov	r0, r2
 8014672:	4798      	blx	r3
 8014674:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	3301      	adds	r3, #1
 801467a:	2202      	movs	r2, #2
 801467c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801467e:	e100      	b.n	8014882 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014688:	f107 0208 	add.w	r2, r7, #8
 801468c:	4610      	mov	r0, r2
 801468e:	4798      	blx	r3
 8014690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	3301      	adds	r3, #1
 8014696:	2202      	movs	r2, #2
 8014698:	701a      	strb	r2, [r3, #0]
      break;
 801469a:	e0f2      	b.n	8014882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	885b      	ldrh	r3, [r3, #2]
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	2b05      	cmp	r3, #5
 80146a4:	f200 80ac 	bhi.w	8014800 <USBD_GetDescriptor+0x258>
 80146a8:	a201      	add	r2, pc, #4	@ (adr r2, 80146b0 <USBD_GetDescriptor+0x108>)
 80146aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ae:	bf00      	nop
 80146b0:	080146c9 	.word	0x080146c9
 80146b4:	080146fd 	.word	0x080146fd
 80146b8:	08014731 	.word	0x08014731
 80146bc:	08014765 	.word	0x08014765
 80146c0:	08014799 	.word	0x08014799
 80146c4:	080147cd 	.word	0x080147cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00b      	beq.n	80146ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146da:	685b      	ldr	r3, [r3, #4]
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	7c12      	ldrb	r2, [r2, #16]
 80146e0:	f107 0108 	add.w	r1, r7, #8
 80146e4:	4610      	mov	r0, r2
 80146e6:	4798      	blx	r3
 80146e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146ea:	e091      	b.n	8014810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146ec:	6839      	ldr	r1, [r7, #0]
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 facb 	bl	8014c8a <USBD_CtlError>
            err++;
 80146f4:	7afb      	ldrb	r3, [r7, #11]
 80146f6:	3301      	adds	r3, #1
 80146f8:	72fb      	strb	r3, [r7, #11]
          break;
 80146fa:	e089      	b.n	8014810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014702:	689b      	ldr	r3, [r3, #8]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00b      	beq.n	8014720 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801470e:	689b      	ldr	r3, [r3, #8]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	7c12      	ldrb	r2, [r2, #16]
 8014714:	f107 0108 	add.w	r1, r7, #8
 8014718:	4610      	mov	r0, r2
 801471a:	4798      	blx	r3
 801471c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801471e:	e077      	b.n	8014810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014720:	6839      	ldr	r1, [r7, #0]
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 fab1 	bl	8014c8a <USBD_CtlError>
            err++;
 8014728:	7afb      	ldrb	r3, [r7, #11]
 801472a:	3301      	adds	r3, #1
 801472c:	72fb      	strb	r3, [r7, #11]
          break;
 801472e:	e06f      	b.n	8014810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014736:	68db      	ldr	r3, [r3, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00b      	beq.n	8014754 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	7c12      	ldrb	r2, [r2, #16]
 8014748:	f107 0108 	add.w	r1, r7, #8
 801474c:	4610      	mov	r0, r2
 801474e:	4798      	blx	r3
 8014750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014752:	e05d      	b.n	8014810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014754:	6839      	ldr	r1, [r7, #0]
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f000 fa97 	bl	8014c8a <USBD_CtlError>
            err++;
 801475c:	7afb      	ldrb	r3, [r7, #11]
 801475e:	3301      	adds	r3, #1
 8014760:	72fb      	strb	r3, [r7, #11]
          break;
 8014762:	e055      	b.n	8014810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801476a:	691b      	ldr	r3, [r3, #16]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00b      	beq.n	8014788 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014776:	691b      	ldr	r3, [r3, #16]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	7c12      	ldrb	r2, [r2, #16]
 801477c:	f107 0108 	add.w	r1, r7, #8
 8014780:	4610      	mov	r0, r2
 8014782:	4798      	blx	r3
 8014784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014786:	e043      	b.n	8014810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa7d 	bl	8014c8a <USBD_CtlError>
            err++;
 8014790:	7afb      	ldrb	r3, [r7, #11]
 8014792:	3301      	adds	r3, #1
 8014794:	72fb      	strb	r3, [r7, #11]
          break;
 8014796:	e03b      	b.n	8014810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801479e:	695b      	ldr	r3, [r3, #20]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d00b      	beq.n	80147bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147aa:	695b      	ldr	r3, [r3, #20]
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	7c12      	ldrb	r2, [r2, #16]
 80147b0:	f107 0108 	add.w	r1, r7, #8
 80147b4:	4610      	mov	r0, r2
 80147b6:	4798      	blx	r3
 80147b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147ba:	e029      	b.n	8014810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147bc:	6839      	ldr	r1, [r7, #0]
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 fa63 	bl	8014c8a <USBD_CtlError>
            err++;
 80147c4:	7afb      	ldrb	r3, [r7, #11]
 80147c6:	3301      	adds	r3, #1
 80147c8:	72fb      	strb	r3, [r7, #11]
          break;
 80147ca:	e021      	b.n	8014810 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147d2:	699b      	ldr	r3, [r3, #24]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00b      	beq.n	80147f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80147de:	699b      	ldr	r3, [r3, #24]
 80147e0:	687a      	ldr	r2, [r7, #4]
 80147e2:	7c12      	ldrb	r2, [r2, #16]
 80147e4:	f107 0108 	add.w	r1, r7, #8
 80147e8:	4610      	mov	r0, r2
 80147ea:	4798      	blx	r3
 80147ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147ee:	e00f      	b.n	8014810 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147f0:	6839      	ldr	r1, [r7, #0]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 fa49 	bl	8014c8a <USBD_CtlError>
            err++;
 80147f8:	7afb      	ldrb	r3, [r7, #11]
 80147fa:	3301      	adds	r3, #1
 80147fc:	72fb      	strb	r3, [r7, #11]
          break;
 80147fe:	e007      	b.n	8014810 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014800:	6839      	ldr	r1, [r7, #0]
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 fa41 	bl	8014c8a <USBD_CtlError>
          err++;
 8014808:	7afb      	ldrb	r3, [r7, #11]
 801480a:	3301      	adds	r3, #1
 801480c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801480e:	bf00      	nop
      }
      break;
 8014810:	e037      	b.n	8014882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	7c1b      	ldrb	r3, [r3, #16]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d109      	bne.n	801482e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014822:	f107 0208 	add.w	r2, r7, #8
 8014826:	4610      	mov	r0, r2
 8014828:	4798      	blx	r3
 801482a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801482c:	e029      	b.n	8014882 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801482e:	6839      	ldr	r1, [r7, #0]
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f000 fa2a 	bl	8014c8a <USBD_CtlError>
        err++;
 8014836:	7afb      	ldrb	r3, [r7, #11]
 8014838:	3301      	adds	r3, #1
 801483a:	72fb      	strb	r3, [r7, #11]
      break;
 801483c:	e021      	b.n	8014882 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	7c1b      	ldrb	r3, [r3, #16]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d10d      	bne.n	8014862 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801484e:	f107 0208 	add.w	r2, r7, #8
 8014852:	4610      	mov	r0, r2
 8014854:	4798      	blx	r3
 8014856:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	3301      	adds	r3, #1
 801485c:	2207      	movs	r2, #7
 801485e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014860:	e00f      	b.n	8014882 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f000 fa10 	bl	8014c8a <USBD_CtlError>
        err++;
 801486a:	7afb      	ldrb	r3, [r7, #11]
 801486c:	3301      	adds	r3, #1
 801486e:	72fb      	strb	r3, [r7, #11]
      break;
 8014870:	e007      	b.n	8014882 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014872:	6839      	ldr	r1, [r7, #0]
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 fa08 	bl	8014c8a <USBD_CtlError>
      err++;
 801487a:	7afb      	ldrb	r3, [r7, #11]
 801487c:	3301      	adds	r3, #1
 801487e:	72fb      	strb	r3, [r7, #11]
      break;
 8014880:	bf00      	nop
  }

  if (err != 0U)
 8014882:	7afb      	ldrb	r3, [r7, #11]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d11e      	bne.n	80148c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	88db      	ldrh	r3, [r3, #6]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d016      	beq.n	80148be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014890:	893b      	ldrh	r3, [r7, #8]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d00e      	beq.n	80148b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	88da      	ldrh	r2, [r3, #6]
 801489a:	893b      	ldrh	r3, [r7, #8]
 801489c:	4293      	cmp	r3, r2
 801489e:	bf28      	it	cs
 80148a0:	4613      	movcs	r3, r2
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80148a6:	893b      	ldrh	r3, [r7, #8]
 80148a8:	461a      	mov	r2, r3
 80148aa:	68f9      	ldr	r1, [r7, #12]
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fa69 	bl	8014d84 <USBD_CtlSendData>
 80148b2:	e009      	b.n	80148c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80148b4:	6839      	ldr	r1, [r7, #0]
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 f9e7 	bl	8014c8a <USBD_CtlError>
 80148bc:	e004      	b.n	80148c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 faba 	bl	8014e38 <USBD_CtlSendStatus>
 80148c4:	e000      	b.n	80148c8 <USBD_GetDescriptor+0x320>
    return;
 80148c6:	bf00      	nop
  }
}
 80148c8:	3710      	adds	r7, #16
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop

080148d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	889b      	ldrh	r3, [r3, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d131      	bne.n	8014946 <USBD_SetAddress+0x76>
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	88db      	ldrh	r3, [r3, #6]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d12d      	bne.n	8014946 <USBD_SetAddress+0x76>
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	885b      	ldrh	r3, [r3, #2]
 80148ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80148f0:	d829      	bhi.n	8014946 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	885b      	ldrh	r3, [r3, #2]
 80148f6:	b2db      	uxtb	r3, r3
 80148f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80148fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014904:	b2db      	uxtb	r3, r3
 8014906:	2b03      	cmp	r3, #3
 8014908:	d104      	bne.n	8014914 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 f9bc 	bl	8014c8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014912:	e01d      	b.n	8014950 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	7bfa      	ldrb	r2, [r7, #15]
 8014918:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801491c:	7bfb      	ldrb	r3, [r7, #15]
 801491e:	4619      	mov	r1, r3
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f000 fefd 	bl	8015720 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 fa86 	bl	8014e38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801492c:	7bfb      	ldrb	r3, [r7, #15]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d004      	beq.n	801493c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2202      	movs	r2, #2
 8014936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801493a:	e009      	b.n	8014950 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2201      	movs	r2, #1
 8014940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014944:	e004      	b.n	8014950 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014946:	6839      	ldr	r1, [r7, #0]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f000 f99e 	bl	8014c8a <USBD_CtlError>
  }
}
 801494e:	bf00      	nop
 8014950:	bf00      	nop
 8014952:	3710      	adds	r7, #16
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014962:	2300      	movs	r3, #0
 8014964:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	885b      	ldrh	r3, [r3, #2]
 801496a:	b2da      	uxtb	r2, r3
 801496c:	4b4e      	ldr	r3, [pc, #312]	@ (8014aa8 <USBD_SetConfig+0x150>)
 801496e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014970:	4b4d      	ldr	r3, [pc, #308]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	2b01      	cmp	r3, #1
 8014976:	d905      	bls.n	8014984 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014978:	6839      	ldr	r1, [r7, #0]
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 f985 	bl	8014c8a <USBD_CtlError>
    return USBD_FAIL;
 8014980:	2303      	movs	r3, #3
 8014982:	e08c      	b.n	8014a9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801498a:	b2db      	uxtb	r3, r3
 801498c:	2b02      	cmp	r3, #2
 801498e:	d002      	beq.n	8014996 <USBD_SetConfig+0x3e>
 8014990:	2b03      	cmp	r3, #3
 8014992:	d029      	beq.n	80149e8 <USBD_SetConfig+0x90>
 8014994:	e075      	b.n	8014a82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014996:	4b44      	ldr	r3, [pc, #272]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d020      	beq.n	80149e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801499e:	4b42      	ldr	r3, [pc, #264]	@ (8014aa8 <USBD_SetConfig+0x150>)
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149a8:	4b3f      	ldr	r3, [pc, #252]	@ (8014aa8 <USBD_SetConfig+0x150>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	4619      	mov	r1, r3
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f7ff f84b 	bl	8013a4a <USBD_SetClassConfig>
 80149b4:	4603      	mov	r3, r0
 80149b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80149b8:	7bfb      	ldrb	r3, [r7, #15]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d008      	beq.n	80149d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80149be:	6839      	ldr	r1, [r7, #0]
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 f962 	bl	8014c8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2202      	movs	r2, #2
 80149ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149ce:	e065      	b.n	8014a9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 fa31 	bl	8014e38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2203      	movs	r2, #3
 80149da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80149de:	e05d      	b.n	8014a9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f000 fa29 	bl	8014e38 <USBD_CtlSendStatus>
      break;
 80149e6:	e059      	b.n	8014a9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80149e8:	4b2f      	ldr	r3, [pc, #188]	@ (8014aa8 <USBD_SetConfig+0x150>)
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d112      	bne.n	8014a16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2202      	movs	r2, #2
 80149f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80149f8:	4b2b      	ldr	r3, [pc, #172]	@ (8014aa8 <USBD_SetConfig+0x150>)
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	461a      	mov	r2, r3
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a02:	4b29      	ldr	r3, [pc, #164]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	4619      	mov	r1, r3
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7ff f83a 	bl	8013a82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f000 fa12 	bl	8014e38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a14:	e042      	b.n	8014a9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014a16:	4b24      	ldr	r3, [pc, #144]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d02a      	beq.n	8014a7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ff f828 	bl	8013a82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014a32:	4b1d      	ldr	r3, [pc, #116]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	461a      	mov	r2, r3
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	4619      	mov	r1, r3
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f7ff f801 	bl	8013a4a <USBD_SetClassConfig>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014a4c:	7bfb      	ldrb	r3, [r7, #15]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d00f      	beq.n	8014a72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014a52:	6839      	ldr	r1, [r7, #0]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f000 f918 	bl	8014c8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	4619      	mov	r1, r3
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f7ff f80d 	bl	8013a82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2202      	movs	r2, #2
 8014a6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014a70:	e014      	b.n	8014a9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 f9e0 	bl	8014e38 <USBD_CtlSendStatus>
      break;
 8014a78:	e010      	b.n	8014a9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 f9dc 	bl	8014e38 <USBD_CtlSendStatus>
      break;
 8014a80:	e00c      	b.n	8014a9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014a82:	6839      	ldr	r1, [r7, #0]
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f000 f900 	bl	8014c8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a8a:	4b07      	ldr	r3, [pc, #28]	@ (8014aa8 <USBD_SetConfig+0x150>)
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	4619      	mov	r1, r3
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f7fe fff6 	bl	8013a82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014a96:	2303      	movs	r3, #3
 8014a98:	73fb      	strb	r3, [r7, #15]
      break;
 8014a9a:	bf00      	nop
  }

  return ret;
 8014a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3710      	adds	r7, #16
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}
 8014aa6:	bf00      	nop
 8014aa8:	200009b4 	.word	0x200009b4

08014aac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b082      	sub	sp, #8
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	88db      	ldrh	r3, [r3, #6]
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d004      	beq.n	8014ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014abe:	6839      	ldr	r1, [r7, #0]
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f000 f8e2 	bl	8014c8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014ac6:	e023      	b.n	8014b10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014ace:	b2db      	uxtb	r3, r3
 8014ad0:	2b02      	cmp	r3, #2
 8014ad2:	dc02      	bgt.n	8014ada <USBD_GetConfig+0x2e>
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	dc03      	bgt.n	8014ae0 <USBD_GetConfig+0x34>
 8014ad8:	e015      	b.n	8014b06 <USBD_GetConfig+0x5a>
 8014ada:	2b03      	cmp	r3, #3
 8014adc:	d00b      	beq.n	8014af6 <USBD_GetConfig+0x4a>
 8014ade:	e012      	b.n	8014b06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	3308      	adds	r3, #8
 8014aea:	2201      	movs	r2, #1
 8014aec:	4619      	mov	r1, r3
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 f948 	bl	8014d84 <USBD_CtlSendData>
        break;
 8014af4:	e00c      	b.n	8014b10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	3304      	adds	r3, #4
 8014afa:	2201      	movs	r2, #1
 8014afc:	4619      	mov	r1, r3
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 f940 	bl	8014d84 <USBD_CtlSendData>
        break;
 8014b04:	e004      	b.n	8014b10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014b06:	6839      	ldr	r1, [r7, #0]
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f000 f8be 	bl	8014c8a <USBD_CtlError>
        break;
 8014b0e:	bf00      	nop
}
 8014b10:	bf00      	nop
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	3b01      	subs	r3, #1
 8014b2c:	2b02      	cmp	r3, #2
 8014b2e:	d81e      	bhi.n	8014b6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	88db      	ldrh	r3, [r3, #6]
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d004      	beq.n	8014b42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 f8a5 	bl	8014c8a <USBD_CtlError>
        break;
 8014b40:	e01a      	b.n	8014b78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2201      	movs	r2, #1
 8014b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d005      	beq.n	8014b5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	68db      	ldr	r3, [r3, #12]
 8014b56:	f043 0202 	orr.w	r2, r3, #2
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	330c      	adds	r3, #12
 8014b62:	2202      	movs	r2, #2
 8014b64:	4619      	mov	r1, r3
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f000 f90c 	bl	8014d84 <USBD_CtlSendData>
      break;
 8014b6c:	e004      	b.n	8014b78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014b6e:	6839      	ldr	r1, [r7, #0]
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f000 f88a 	bl	8014c8a <USBD_CtlError>
      break;
 8014b76:	bf00      	nop
  }
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	885b      	ldrh	r3, [r3, #2]
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d107      	bne.n	8014ba2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	2201      	movs	r2, #1
 8014b96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f000 f94c 	bl	8014e38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014ba0:	e013      	b.n	8014bca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	885b      	ldrh	r3, [r3, #2]
 8014ba6:	2b02      	cmp	r3, #2
 8014ba8:	d10b      	bne.n	8014bc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	889b      	ldrh	r3, [r3, #4]
 8014bae:	0a1b      	lsrs	r3, r3, #8
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	b2da      	uxtb	r2, r3
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f000 f93c 	bl	8014e38 <USBD_CtlSendStatus>
}
 8014bc0:	e003      	b.n	8014bca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014bc2:	6839      	ldr	r1, [r7, #0]
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f000 f860 	bl	8014c8a <USBD_CtlError>
}
 8014bca:	bf00      	nop
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b082      	sub	sp, #8
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
 8014bda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	3b01      	subs	r3, #1
 8014be6:	2b02      	cmp	r3, #2
 8014be8:	d80b      	bhi.n	8014c02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	885b      	ldrh	r3, [r3, #2]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d10c      	bne.n	8014c0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f000 f91c 	bl	8014e38 <USBD_CtlSendStatus>
      }
      break;
 8014c00:	e004      	b.n	8014c0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014c02:	6839      	ldr	r1, [r7, #0]
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f000 f840 	bl	8014c8a <USBD_CtlError>
      break;
 8014c0a:	e000      	b.n	8014c0e <USBD_ClrFeature+0x3c>
      break;
 8014c0c:	bf00      	nop
  }
}
 8014c0e:	bf00      	nop
 8014c10:	3708      	adds	r7, #8
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}

08014c16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014c16:	b580      	push	{r7, lr}
 8014c18:	b084      	sub	sp, #16
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
 8014c1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	781a      	ldrb	r2, [r3, #0]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	3301      	adds	r3, #1
 8014c30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	781a      	ldrb	r2, [r3, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c40:	68f8      	ldr	r0, [r7, #12]
 8014c42:	f7ff fa16 	bl	8014072 <SWAPBYTE>
 8014c46:	4603      	mov	r3, r0
 8014c48:	461a      	mov	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	3301      	adds	r3, #1
 8014c52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	3301      	adds	r3, #1
 8014c58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c5a:	68f8      	ldr	r0, [r7, #12]
 8014c5c:	f7ff fa09 	bl	8014072 <SWAPBYTE>
 8014c60:	4603      	mov	r3, r0
 8014c62:	461a      	mov	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	3301      	adds	r3, #1
 8014c72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c74:	68f8      	ldr	r0, [r7, #12]
 8014c76:	f7ff f9fc 	bl	8014072 <SWAPBYTE>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	80da      	strh	r2, [r3, #6]
}
 8014c82:	bf00      	nop
 8014c84:	3710      	adds	r7, #16
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}

08014c8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c8a:	b580      	push	{r7, lr}
 8014c8c:	b082      	sub	sp, #8
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	6078      	str	r0, [r7, #4]
 8014c92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c94:	2180      	movs	r1, #128	@ 0x80
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 fcd8 	bl	801564c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 fcd4 	bl	801564c <USBD_LL_StallEP>
}
 8014ca4:	bf00      	nop
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	60b9      	str	r1, [r7, #8]
 8014cb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d042      	beq.n	8014d48 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014cc6:	6938      	ldr	r0, [r7, #16]
 8014cc8:	f000 f842 	bl	8014d50 <USBD_GetLen>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	3301      	adds	r3, #1
 8014cd0:	005b      	lsls	r3, r3, #1
 8014cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cd6:	d808      	bhi.n	8014cea <USBD_GetString+0x3e>
 8014cd8:	6938      	ldr	r0, [r7, #16]
 8014cda:	f000 f839 	bl	8014d50 <USBD_GetLen>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	005b      	lsls	r3, r3, #1
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	e001      	b.n	8014cee <USBD_GetString+0x42>
 8014cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014cf2:	7dfb      	ldrb	r3, [r7, #23]
 8014cf4:	68ba      	ldr	r2, [r7, #8]
 8014cf6:	4413      	add	r3, r2
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	7812      	ldrb	r2, [r2, #0]
 8014cfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cfe:	7dfb      	ldrb	r3, [r7, #23]
 8014d00:	3301      	adds	r3, #1
 8014d02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014d04:	7dfb      	ldrb	r3, [r7, #23]
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	4413      	add	r3, r2
 8014d0a:	2203      	movs	r2, #3
 8014d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d0e:	7dfb      	ldrb	r3, [r7, #23]
 8014d10:	3301      	adds	r3, #1
 8014d12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014d14:	e013      	b.n	8014d3e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014d16:	7dfb      	ldrb	r3, [r7, #23]
 8014d18:	68ba      	ldr	r2, [r7, #8]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	693a      	ldr	r2, [r7, #16]
 8014d1e:	7812      	ldrb	r2, [r2, #0]
 8014d20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	3301      	adds	r3, #1
 8014d26:	613b      	str	r3, [r7, #16]
    idx++;
 8014d28:	7dfb      	ldrb	r3, [r7, #23]
 8014d2a:	3301      	adds	r3, #1
 8014d2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d2e:	7dfb      	ldrb	r3, [r7, #23]
 8014d30:	68ba      	ldr	r2, [r7, #8]
 8014d32:	4413      	add	r3, r2
 8014d34:	2200      	movs	r2, #0
 8014d36:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d38:	7dfb      	ldrb	r3, [r7, #23]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	781b      	ldrb	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d1e7      	bne.n	8014d16 <USBD_GetString+0x6a>
 8014d46:	e000      	b.n	8014d4a <USBD_GetString+0x9e>
    return;
 8014d48:	bf00      	nop
  }
}
 8014d4a:	3718      	adds	r7, #24
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b085      	sub	sp, #20
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d60:	e005      	b.n	8014d6e <USBD_GetLen+0x1e>
  {
    len++;
 8014d62:	7bfb      	ldrb	r3, [r7, #15]
 8014d64:	3301      	adds	r3, #1
 8014d66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d1f5      	bne.n	8014d62 <USBD_GetLen+0x12>
  }

  return len;
 8014d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d78:	4618      	mov	r0, r3
 8014d7a:	3714      	adds	r7, #20
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d82:	4770      	bx	lr

08014d84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	2202      	movs	r2, #2
 8014d94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	2100      	movs	r1, #0
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	f000 fcd7 	bl	801575e <USBD_LL_Transmit>

  return USBD_OK;
 8014db0:	2300      	movs	r3, #0
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3710      	adds	r7, #16
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}

08014dba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b084      	sub	sp, #16
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	60f8      	str	r0, [r7, #12]
 8014dc2:	60b9      	str	r1, [r7, #8]
 8014dc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	68ba      	ldr	r2, [r7, #8]
 8014dca:	2100      	movs	r1, #0
 8014dcc:	68f8      	ldr	r0, [r7, #12]
 8014dce:	f000 fcc6 	bl	801575e <USBD_LL_Transmit>

  return USBD_OK;
 8014dd2:	2300      	movs	r3, #0
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2203      	movs	r2, #3
 8014dec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	68ba      	ldr	r2, [r7, #8]
 8014e04:	2100      	movs	r1, #0
 8014e06:	68f8      	ldr	r0, [r7, #12]
 8014e08:	f000 fcca 	bl	80157a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e0c:	2300      	movs	r3, #0
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}

08014e16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e16:	b580      	push	{r7, lr}
 8014e18:	b084      	sub	sp, #16
 8014e1a:	af00      	add	r7, sp, #0
 8014e1c:	60f8      	str	r0, [r7, #12]
 8014e1e:	60b9      	str	r1, [r7, #8]
 8014e20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	68ba      	ldr	r2, [r7, #8]
 8014e26:	2100      	movs	r1, #0
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f000 fcb9 	bl	80157a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2204      	movs	r2, #4
 8014e44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e48:	2300      	movs	r3, #0
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 fc85 	bl	801575e <USBD_LL_Transmit>

  return USBD_OK;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b082      	sub	sp, #8
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2205      	movs	r2, #5
 8014e6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e6e:	2300      	movs	r3, #0
 8014e70:	2200      	movs	r2, #0
 8014e72:	2100      	movs	r1, #0
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 fc93 	bl	80157a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3708      	adds	r7, #8
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014e88:	2200      	movs	r2, #0
 8014e8a:	4912      	ldr	r1, [pc, #72]	@ (8014ed4 <MX_USB_Device_Init+0x50>)
 8014e8c:	4812      	ldr	r0, [pc, #72]	@ (8014ed8 <MX_USB_Device_Init+0x54>)
 8014e8e:	f7fe fd43 	bl	8013918 <USBD_Init>
 8014e92:	4603      	mov	r3, r0
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d001      	beq.n	8014e9c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014e98:	f7f3 fc51 	bl	800873e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014e9c:	490f      	ldr	r1, [pc, #60]	@ (8014edc <MX_USB_Device_Init+0x58>)
 8014e9e:	480e      	ldr	r0, [pc, #56]	@ (8014ed8 <MX_USB_Device_Init+0x54>)
 8014ea0:	f7fe fd78 	bl	8013994 <USBD_RegisterClass>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d001      	beq.n	8014eae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014eaa:	f7f3 fc48 	bl	800873e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014eae:	490c      	ldr	r1, [pc, #48]	@ (8014ee0 <MX_USB_Device_Init+0x5c>)
 8014eb0:	4809      	ldr	r0, [pc, #36]	@ (8014ed8 <MX_USB_Device_Init+0x54>)
 8014eb2:	f7fe fc61 	bl	8013778 <USBD_CDC_RegisterInterface>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d001      	beq.n	8014ec0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014ebc:	f7f3 fc3f 	bl	800873e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014ec0:	4805      	ldr	r0, [pc, #20]	@ (8014ed8 <MX_USB_Device_Init+0x54>)
 8014ec2:	f7fe fdab 	bl	8013a1c <USBD_Start>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d001      	beq.n	8014ed0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014ecc:	f7f3 fc37 	bl	800873e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014ed0:	bf00      	nop
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	200000ec 	.word	0x200000ec
 8014ed8:	200009b8 	.word	0x200009b8
 8014edc:	20000058 	.word	0x20000058
 8014ee0:	200000d8 	.word	0x200000d8

08014ee4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014ee8:	2200      	movs	r2, #0
 8014eea:	4905      	ldr	r1, [pc, #20]	@ (8014f00 <CDC_Init_FS+0x1c>)
 8014eec:	4805      	ldr	r0, [pc, #20]	@ (8014f04 <CDC_Init_FS+0x20>)
 8014eee:	f7fe fc5d 	bl	80137ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014ef2:	4905      	ldr	r1, [pc, #20]	@ (8014f08 <CDC_Init_FS+0x24>)
 8014ef4:	4803      	ldr	r0, [pc, #12]	@ (8014f04 <CDC_Init_FS+0x20>)
 8014ef6:	f7fe fc7b 	bl	80137f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014efa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	20001494 	.word	0x20001494
 8014f04:	200009b8 	.word	0x200009b8
 8014f08:	20000c94 	.word	0x20000c94

08014f0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014f10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	46bd      	mov	sp, r7
 8014f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1a:	4770      	bx	lr

08014f1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	4603      	mov	r3, r0
 8014f24:	6039      	str	r1, [r7, #0]
 8014f26:	71fb      	strb	r3, [r7, #7]
 8014f28:	4613      	mov	r3, r2
 8014f2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014f2c:	79fb      	ldrb	r3, [r7, #7]
 8014f2e:	2b23      	cmp	r3, #35	@ 0x23
 8014f30:	d84a      	bhi.n	8014fc8 <CDC_Control_FS+0xac>
 8014f32:	a201      	add	r2, pc, #4	@ (adr r2, 8014f38 <CDC_Control_FS+0x1c>)
 8014f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f38:	08014fc9 	.word	0x08014fc9
 8014f3c:	08014fc9 	.word	0x08014fc9
 8014f40:	08014fc9 	.word	0x08014fc9
 8014f44:	08014fc9 	.word	0x08014fc9
 8014f48:	08014fc9 	.word	0x08014fc9
 8014f4c:	08014fc9 	.word	0x08014fc9
 8014f50:	08014fc9 	.word	0x08014fc9
 8014f54:	08014fc9 	.word	0x08014fc9
 8014f58:	08014fc9 	.word	0x08014fc9
 8014f5c:	08014fc9 	.word	0x08014fc9
 8014f60:	08014fc9 	.word	0x08014fc9
 8014f64:	08014fc9 	.word	0x08014fc9
 8014f68:	08014fc9 	.word	0x08014fc9
 8014f6c:	08014fc9 	.word	0x08014fc9
 8014f70:	08014fc9 	.word	0x08014fc9
 8014f74:	08014fc9 	.word	0x08014fc9
 8014f78:	08014fc9 	.word	0x08014fc9
 8014f7c:	08014fc9 	.word	0x08014fc9
 8014f80:	08014fc9 	.word	0x08014fc9
 8014f84:	08014fc9 	.word	0x08014fc9
 8014f88:	08014fc9 	.word	0x08014fc9
 8014f8c:	08014fc9 	.word	0x08014fc9
 8014f90:	08014fc9 	.word	0x08014fc9
 8014f94:	08014fc9 	.word	0x08014fc9
 8014f98:	08014fc9 	.word	0x08014fc9
 8014f9c:	08014fc9 	.word	0x08014fc9
 8014fa0:	08014fc9 	.word	0x08014fc9
 8014fa4:	08014fc9 	.word	0x08014fc9
 8014fa8:	08014fc9 	.word	0x08014fc9
 8014fac:	08014fc9 	.word	0x08014fc9
 8014fb0:	08014fc9 	.word	0x08014fc9
 8014fb4:	08014fc9 	.word	0x08014fc9
 8014fb8:	08014fc9 	.word	0x08014fc9
 8014fbc:	08014fc9 	.word	0x08014fc9
 8014fc0:	08014fc9 	.word	0x08014fc9
 8014fc4:	08014fc9 	.word	0x08014fc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014fc8:	bf00      	nop
  }

  return (USBD_OK);
 8014fca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	370c      	adds	r7, #12
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014fe2:	6879      	ldr	r1, [r7, #4]
 8014fe4:	4805      	ldr	r0, [pc, #20]	@ (8014ffc <CDC_Receive_FS+0x24>)
 8014fe6:	f7fe fc03 	bl	80137f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014fea:	4804      	ldr	r0, [pc, #16]	@ (8014ffc <CDC_Receive_FS+0x24>)
 8014fec:	f7fe fc5e 	bl	80138ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014ff0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3708      	adds	r7, #8
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	200009b8 	.word	0x200009b8

08015000 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	460b      	mov	r3, r1
 801500a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801500c:	2300      	movs	r3, #0
 801500e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015010:	4b0d      	ldr	r3, [pc, #52]	@ (8015048 <CDC_Transmit_FS+0x48>)
 8015012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015016:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801501e:	2b00      	cmp	r3, #0
 8015020:	d001      	beq.n	8015026 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015022:	2301      	movs	r3, #1
 8015024:	e00b      	b.n	801503e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015026:	887b      	ldrh	r3, [r7, #2]
 8015028:	461a      	mov	r2, r3
 801502a:	6879      	ldr	r1, [r7, #4]
 801502c:	4806      	ldr	r0, [pc, #24]	@ (8015048 <CDC_Transmit_FS+0x48>)
 801502e:	f7fe fbbd 	bl	80137ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015032:	4805      	ldr	r0, [pc, #20]	@ (8015048 <CDC_Transmit_FS+0x48>)
 8015034:	f7fe fbfa 	bl	801382c <USBD_CDC_TransmitPacket>
 8015038:	4603      	mov	r3, r0
 801503a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801503c:	7bfb      	ldrb	r3, [r7, #15]
}
 801503e:	4618      	mov	r0, r3
 8015040:	3710      	adds	r7, #16
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	200009b8 	.word	0x200009b8

0801504c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801504c:	b480      	push	{r7}
 801504e:	b087      	sub	sp, #28
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	60b9      	str	r1, [r7, #8]
 8015056:	4613      	mov	r3, r2
 8015058:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801505a:	2300      	movs	r3, #0
 801505c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801505e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015062:	4618      	mov	r0, r3
 8015064:	371c      	adds	r7, #28
 8015066:	46bd      	mov	sp, r7
 8015068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506c:	4770      	bx	lr
	...

08015070 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
 8015076:	4603      	mov	r3, r0
 8015078:	6039      	str	r1, [r7, #0]
 801507a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	2212      	movs	r2, #18
 8015080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8015082:	4b03      	ldr	r3, [pc, #12]	@ (8015090 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015084:	4618      	mov	r0, r3
 8015086:	370c      	adds	r7, #12
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr
 8015090:	2000010c 	.word	0x2000010c

08015094 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015094:	b480      	push	{r7}
 8015096:	b083      	sub	sp, #12
 8015098:	af00      	add	r7, sp, #0
 801509a:	4603      	mov	r3, r0
 801509c:	6039      	str	r1, [r7, #0]
 801509e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	2204      	movs	r2, #4
 80150a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80150a6:	4b03      	ldr	r3, [pc, #12]	@ (80150b4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr
 80150b4:	20000120 	.word	0x20000120

080150b8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	4603      	mov	r3, r0
 80150c0:	6039      	str	r1, [r7, #0]
 80150c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150c4:	79fb      	ldrb	r3, [r7, #7]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d105      	bne.n	80150d6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80150ca:	683a      	ldr	r2, [r7, #0]
 80150cc:	4907      	ldr	r1, [pc, #28]	@ (80150ec <USBD_CDC_ProductStrDescriptor+0x34>)
 80150ce:	4808      	ldr	r0, [pc, #32]	@ (80150f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80150d0:	f7ff fdec 	bl	8014cac <USBD_GetString>
 80150d4:	e004      	b.n	80150e0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80150d6:	683a      	ldr	r2, [r7, #0]
 80150d8:	4904      	ldr	r1, [pc, #16]	@ (80150ec <USBD_CDC_ProductStrDescriptor+0x34>)
 80150da:	4805      	ldr	r0, [pc, #20]	@ (80150f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80150dc:	f7ff fde6 	bl	8014cac <USBD_GetString>
  }
  return USBD_StrDesc;
 80150e0:	4b02      	ldr	r3, [pc, #8]	@ (80150ec <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
 80150ea:	bf00      	nop
 80150ec:	20001c94 	.word	0x20001c94
 80150f0:	0801a1f4 	.word	0x0801a1f4

080150f4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	4603      	mov	r3, r0
 80150fc:	6039      	str	r1, [r7, #0]
 80150fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015100:	683a      	ldr	r2, [r7, #0]
 8015102:	4904      	ldr	r1, [pc, #16]	@ (8015114 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015104:	4804      	ldr	r0, [pc, #16]	@ (8015118 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8015106:	f7ff fdd1 	bl	8014cac <USBD_GetString>
  return USBD_StrDesc;
 801510a:	4b02      	ldr	r3, [pc, #8]	@ (8015114 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801510c:	4618      	mov	r0, r3
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	20001c94 	.word	0x20001c94
 8015118:	0801a20c 	.word	0x0801a20c

0801511c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b082      	sub	sp, #8
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	6039      	str	r1, [r7, #0]
 8015126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	221a      	movs	r2, #26
 801512c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801512e:	f000 f843 	bl	80151b8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015132:	4b02      	ldr	r3, [pc, #8]	@ (801513c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015134:	4618      	mov	r0, r3
 8015136:	3708      	adds	r7, #8
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	20000124 	.word	0x20000124

08015140 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	4603      	mov	r3, r0
 8015148:	6039      	str	r1, [r7, #0]
 801514a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801514c:	79fb      	ldrb	r3, [r7, #7]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d105      	bne.n	801515e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015152:	683a      	ldr	r2, [r7, #0]
 8015154:	4907      	ldr	r1, [pc, #28]	@ (8015174 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015156:	4808      	ldr	r0, [pc, #32]	@ (8015178 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015158:	f7ff fda8 	bl	8014cac <USBD_GetString>
 801515c:	e004      	b.n	8015168 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801515e:	683a      	ldr	r2, [r7, #0]
 8015160:	4904      	ldr	r1, [pc, #16]	@ (8015174 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015162:	4805      	ldr	r0, [pc, #20]	@ (8015178 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015164:	f7ff fda2 	bl	8014cac <USBD_GetString>
  }
  return USBD_StrDesc;
 8015168:	4b02      	ldr	r3, [pc, #8]	@ (8015174 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801516a:	4618      	mov	r0, r3
 801516c:	3708      	adds	r7, #8
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	20001c94 	.word	0x20001c94
 8015178:	0801a220 	.word	0x0801a220

0801517c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	4603      	mov	r3, r0
 8015184:	6039      	str	r1, [r7, #0]
 8015186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015188:	79fb      	ldrb	r3, [r7, #7]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d105      	bne.n	801519a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801518e:	683a      	ldr	r2, [r7, #0]
 8015190:	4907      	ldr	r1, [pc, #28]	@ (80151b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015192:	4808      	ldr	r0, [pc, #32]	@ (80151b4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015194:	f7ff fd8a 	bl	8014cac <USBD_GetString>
 8015198:	e004      	b.n	80151a4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801519a:	683a      	ldr	r2, [r7, #0]
 801519c:	4904      	ldr	r1, [pc, #16]	@ (80151b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801519e:	4805      	ldr	r0, [pc, #20]	@ (80151b4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80151a0:	f7ff fd84 	bl	8014cac <USBD_GetString>
  }
  return USBD_StrDesc;
 80151a4:	4b02      	ldr	r3, [pc, #8]	@ (80151b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3708      	adds	r7, #8
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	20001c94 	.word	0x20001c94
 80151b4:	0801a22c 	.word	0x0801a22c

080151b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b084      	sub	sp, #16
 80151bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80151be:	4b0f      	ldr	r3, [pc, #60]	@ (80151fc <Get_SerialNum+0x44>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80151c4:	4b0e      	ldr	r3, [pc, #56]	@ (8015200 <Get_SerialNum+0x48>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80151ca:	4b0e      	ldr	r3, [pc, #56]	@ (8015204 <Get_SerialNum+0x4c>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80151d0:	68fa      	ldr	r2, [r7, #12]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	4413      	add	r3, r2
 80151d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d009      	beq.n	80151f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80151de:	2208      	movs	r2, #8
 80151e0:	4909      	ldr	r1, [pc, #36]	@ (8015208 <Get_SerialNum+0x50>)
 80151e2:	68f8      	ldr	r0, [r7, #12]
 80151e4:	f000 f814 	bl	8015210 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80151e8:	2204      	movs	r2, #4
 80151ea:	4908      	ldr	r1, [pc, #32]	@ (801520c <Get_SerialNum+0x54>)
 80151ec:	68b8      	ldr	r0, [r7, #8]
 80151ee:	f000 f80f 	bl	8015210 <IntToUnicode>
  }
}
 80151f2:	bf00      	nop
 80151f4:	3710      	adds	r7, #16
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	1fff7590 	.word	0x1fff7590
 8015200:	1fff7594 	.word	0x1fff7594
 8015204:	1fff7598 	.word	0x1fff7598
 8015208:	20000126 	.word	0x20000126
 801520c:	20000136 	.word	0x20000136

08015210 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015210:	b480      	push	{r7}
 8015212:	b087      	sub	sp, #28
 8015214:	af00      	add	r7, sp, #0
 8015216:	60f8      	str	r0, [r7, #12]
 8015218:	60b9      	str	r1, [r7, #8]
 801521a:	4613      	mov	r3, r2
 801521c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801521e:	2300      	movs	r3, #0
 8015220:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015222:	2300      	movs	r3, #0
 8015224:	75fb      	strb	r3, [r7, #23]
 8015226:	e027      	b.n	8015278 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	0f1b      	lsrs	r3, r3, #28
 801522c:	2b09      	cmp	r3, #9
 801522e:	d80b      	bhi.n	8015248 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	0f1b      	lsrs	r3, r3, #28
 8015234:	b2da      	uxtb	r2, r3
 8015236:	7dfb      	ldrb	r3, [r7, #23]
 8015238:	005b      	lsls	r3, r3, #1
 801523a:	4619      	mov	r1, r3
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	440b      	add	r3, r1
 8015240:	3230      	adds	r2, #48	@ 0x30
 8015242:	b2d2      	uxtb	r2, r2
 8015244:	701a      	strb	r2, [r3, #0]
 8015246:	e00a      	b.n	801525e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	0f1b      	lsrs	r3, r3, #28
 801524c:	b2da      	uxtb	r2, r3
 801524e:	7dfb      	ldrb	r3, [r7, #23]
 8015250:	005b      	lsls	r3, r3, #1
 8015252:	4619      	mov	r1, r3
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	440b      	add	r3, r1
 8015258:	3237      	adds	r2, #55	@ 0x37
 801525a:	b2d2      	uxtb	r2, r2
 801525c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	011b      	lsls	r3, r3, #4
 8015262:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015264:	7dfb      	ldrb	r3, [r7, #23]
 8015266:	005b      	lsls	r3, r3, #1
 8015268:	3301      	adds	r3, #1
 801526a:	68ba      	ldr	r2, [r7, #8]
 801526c:	4413      	add	r3, r2
 801526e:	2200      	movs	r2, #0
 8015270:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015272:	7dfb      	ldrb	r3, [r7, #23]
 8015274:	3301      	adds	r3, #1
 8015276:	75fb      	strb	r3, [r7, #23]
 8015278:	7dfa      	ldrb	r2, [r7, #23]
 801527a:	79fb      	ldrb	r3, [r7, #7]
 801527c:	429a      	cmp	r2, r3
 801527e:	d3d3      	bcc.n	8015228 <IntToUnicode+0x18>
  }
}
 8015280:	bf00      	nop
 8015282:	bf00      	nop
 8015284:	371c      	adds	r7, #28
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr

0801528e <LL_AHB2_GRP1_EnableClock>:
{
 801528e:	b480      	push	{r7}
 8015290:	b085      	sub	sp, #20
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801529a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801529c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	4313      	orrs	r3, r2
 80152a4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80152a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	4013      	ands	r3, r2
 80152b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80152b2:	68fb      	ldr	r3, [r7, #12]
}
 80152b4:	bf00      	nop
 80152b6:	3714      	adds	r7, #20
 80152b8:	46bd      	mov	sp, r7
 80152ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152be:	4770      	bx	lr

080152c0 <LL_APB1_GRP1_EnableClock>:
{
 80152c0:	b480      	push	{r7}
 80152c2:	b085      	sub	sp, #20
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80152c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80152ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	4313      	orrs	r3, r2
 80152d6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80152d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80152dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	4013      	ands	r3, r2
 80152e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80152e4:	68fb      	ldr	r3, [r7, #12]
}
 80152e6:	bf00      	nop
 80152e8:	3714      	adds	r7, #20
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr
	...

080152f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b088      	sub	sp, #32
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80152fc:	f107 030c 	add.w	r3, r7, #12
 8015300:	2200      	movs	r2, #0
 8015302:	601a      	str	r2, [r3, #0]
 8015304:	605a      	str	r2, [r3, #4]
 8015306:	609a      	str	r2, [r3, #8]
 8015308:	60da      	str	r2, [r3, #12]
 801530a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4a17      	ldr	r2, [pc, #92]	@ (8015370 <HAL_PCD_MspInit+0x7c>)
 8015312:	4293      	cmp	r3, r2
 8015314:	d128      	bne.n	8015368 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015316:	2001      	movs	r0, #1
 8015318:	f7ff ffb9 	bl	801528e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801531c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015322:	2302      	movs	r3, #2
 8015324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015326:	2300      	movs	r3, #0
 8015328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801532a:	2300      	movs	r3, #0
 801532c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801532e:	230a      	movs	r3, #10
 8015330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015332:	f107 030c 	add.w	r3, r7, #12
 8015336:	4619      	mov	r1, r3
 8015338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801533c:	f7f5 fdb0 	bl	800aea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015340:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8015344:	f7ff ffbc 	bl	80152c0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8015348:	2200      	movs	r2, #0
 801534a:	2100      	movs	r1, #0
 801534c:	2013      	movs	r0, #19
 801534e:	f7f5 fa90 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8015352:	2013      	movs	r0, #19
 8015354:	f7f5 faa7 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015358:	2200      	movs	r2, #0
 801535a:	2100      	movs	r1, #0
 801535c:	2014      	movs	r0, #20
 801535e:	f7f5 fa88 	bl	800a872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015362:	2014      	movs	r0, #20
 8015364:	f7f5 fa9f 	bl	800a8a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015368:	bf00      	nop
 801536a:	3720      	adds	r7, #32
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}
 8015370:	40006800 	.word	0x40006800

08015374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8015388:	4619      	mov	r1, r3
 801538a:	4610      	mov	r0, r2
 801538c:	f7fe fb93 	bl	8013ab6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015390:	bf00      	nop
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}

08015398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	460b      	mov	r3, r1
 80153a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80153aa:	78fa      	ldrb	r2, [r7, #3]
 80153ac:	6879      	ldr	r1, [r7, #4]
 80153ae:	4613      	mov	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	00db      	lsls	r3, r3, #3
 80153b6:	440b      	add	r3, r1
 80153b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	78fb      	ldrb	r3, [r7, #3]
 80153c0:	4619      	mov	r1, r3
 80153c2:	f7fe fbcd 	bl	8013b60 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80153c6:	bf00      	nop
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}

080153ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153ce:	b580      	push	{r7, lr}
 80153d0:	b082      	sub	sp, #8
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
 80153d6:	460b      	mov	r3, r1
 80153d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80153e0:	78fa      	ldrb	r2, [r7, #3]
 80153e2:	6879      	ldr	r1, [r7, #4]
 80153e4:	4613      	mov	r3, r2
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	4413      	add	r3, r2
 80153ea:	00db      	lsls	r3, r3, #3
 80153ec:	440b      	add	r3, r1
 80153ee:	3324      	adds	r3, #36	@ 0x24
 80153f0:	681a      	ldr	r2, [r3, #0]
 80153f2:	78fb      	ldrb	r3, [r7, #3]
 80153f4:	4619      	mov	r1, r3
 80153f6:	f7fe fc66 	bl	8013cc6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80153fa:	bf00      	nop
 80153fc:	3708      	adds	r7, #8
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}

08015402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015402:	b580      	push	{r7, lr}
 8015404:	b082      	sub	sp, #8
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015410:	4618      	mov	r0, r3
 8015412:	f7fe fda0 	bl	8013f56 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015416:	bf00      	nop
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801541e:	b580      	push	{r7, lr}
 8015420:	b084      	sub	sp, #16
 8015422:	af00      	add	r7, sp, #0
 8015424:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015426:	2301      	movs	r3, #1
 8015428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	795b      	ldrb	r3, [r3, #5]
 801542e:	2b02      	cmp	r3, #2
 8015430:	d001      	beq.n	8015436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015432:	f7f3 f984 	bl	800873e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801543c:	7bfa      	ldrb	r2, [r7, #15]
 801543e:	4611      	mov	r1, r2
 8015440:	4618      	mov	r0, r3
 8015442:	f7fe fd44 	bl	8013ece <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801544c:	4618      	mov	r0, r3
 801544e:	f7fe fcec 	bl	8013e2a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015452:	bf00      	nop
 8015454:	3710      	adds	r7, #16
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
	...

0801545c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801546a:	4618      	mov	r0, r3
 801546c:	f7fe fd3f 	bl	8013eee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	7a5b      	ldrb	r3, [r3, #9]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d005      	beq.n	8015484 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015478:	4b04      	ldr	r3, [pc, #16]	@ (801548c <HAL_PCD_SuspendCallback+0x30>)
 801547a:	691b      	ldr	r3, [r3, #16]
 801547c:	4a03      	ldr	r2, [pc, #12]	@ (801548c <HAL_PCD_SuspendCallback+0x30>)
 801547e:	f043 0306 	orr.w	r3, r3, #6
 8015482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015484:	bf00      	nop
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	e000ed00 	.word	0xe000ed00

08015490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	7a5b      	ldrb	r3, [r3, #9]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d007      	beq.n	80154b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80154a0:	4b08      	ldr	r3, [pc, #32]	@ (80154c4 <HAL_PCD_ResumeCallback+0x34>)
 80154a2:	691b      	ldr	r3, [r3, #16]
 80154a4:	4a07      	ldr	r2, [pc, #28]	@ (80154c4 <HAL_PCD_ResumeCallback+0x34>)
 80154a6:	f023 0306 	bic.w	r3, r3, #6
 80154aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80154ac:	f000 f9fa 	bl	80158a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7fe fd35 	bl	8013f26 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80154bc:	bf00      	nop
 80154be:	3708      	adds	r7, #8
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}
 80154c4:	e000ed00 	.word	0xe000ed00

080154c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80154d0:	4a2c      	ldr	r2, [pc, #176]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4a2a      	ldr	r2, [pc, #168]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80154e0:	f7f8 ff82 	bl	800e3e8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80154e4:	4b27      	ldr	r3, [pc, #156]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154e6:	4a28      	ldr	r2, [pc, #160]	@ (8015588 <USBD_LL_Init+0xc0>)
 80154e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80154ea:	4b26      	ldr	r3, [pc, #152]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154ec:	2208      	movs	r2, #8
 80154ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80154f0:	4b24      	ldr	r3, [pc, #144]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154f2:	2202      	movs	r2, #2
 80154f4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80154f6:	4b23      	ldr	r3, [pc, #140]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154f8:	2202      	movs	r2, #2
 80154fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80154fc:	4b21      	ldr	r3, [pc, #132]	@ (8015584 <USBD_LL_Init+0xbc>)
 80154fe:	2200      	movs	r2, #0
 8015500:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015502:	4b20      	ldr	r3, [pc, #128]	@ (8015584 <USBD_LL_Init+0xbc>)
 8015504:	2200      	movs	r2, #0
 8015506:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015508:	4b1e      	ldr	r3, [pc, #120]	@ (8015584 <USBD_LL_Init+0xbc>)
 801550a:	2200      	movs	r2, #0
 801550c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801550e:	4b1d      	ldr	r3, [pc, #116]	@ (8015584 <USBD_LL_Init+0xbc>)
 8015510:	2200      	movs	r2, #0
 8015512:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015514:	481b      	ldr	r0, [pc, #108]	@ (8015584 <USBD_LL_Init+0xbc>)
 8015516:	f7f7 fa48 	bl	800c9aa <HAL_PCD_Init>
 801551a:	4603      	mov	r3, r0
 801551c:	2b00      	cmp	r3, #0
 801551e:	d001      	beq.n	8015524 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015520:	f7f3 f90d 	bl	800873e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801552a:	2318      	movs	r3, #24
 801552c:	2200      	movs	r2, #0
 801552e:	2100      	movs	r1, #0
 8015530:	f7f8 fecf 	bl	800e2d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801553a:	2358      	movs	r3, #88	@ 0x58
 801553c:	2200      	movs	r2, #0
 801553e:	2180      	movs	r1, #128	@ 0x80
 8015540:	f7f8 fec7 	bl	800e2d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801554a:	23c0      	movs	r3, #192	@ 0xc0
 801554c:	2200      	movs	r2, #0
 801554e:	2181      	movs	r1, #129	@ 0x81
 8015550:	f7f8 febf 	bl	800e2d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801555a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801555e:	2200      	movs	r2, #0
 8015560:	2101      	movs	r1, #1
 8015562:	f7f8 feb6 	bl	800e2d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801556c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015570:	2200      	movs	r2, #0
 8015572:	2182      	movs	r1, #130	@ 0x82
 8015574:	f7f8 fead 	bl	800e2d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015578:	2300      	movs	r3, #0
}
 801557a:	4618      	mov	r0, r3
 801557c:	3708      	adds	r7, #8
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
 8015582:	bf00      	nop
 8015584:	20001e94 	.word	0x20001e94
 8015588:	40006800 	.word	0x40006800

0801558c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015598:	2300      	movs	r3, #0
 801559a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7f7 facf 	bl	800cb46 <HAL_PCD_Start>
 80155a8:	4603      	mov	r3, r0
 80155aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 f97e 	bl	80158b0 <USBD_Get_USB_Status>
 80155b4:	4603      	mov	r3, r0
 80155b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3710      	adds	r7, #16
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b084      	sub	sp, #16
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
 80155ca:	4608      	mov	r0, r1
 80155cc:	4611      	mov	r1, r2
 80155ce:	461a      	mov	r2, r3
 80155d0:	4603      	mov	r3, r0
 80155d2:	70fb      	strb	r3, [r7, #3]
 80155d4:	460b      	mov	r3, r1
 80155d6:	70bb      	strb	r3, [r7, #2]
 80155d8:	4613      	mov	r3, r2
 80155da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155dc:	2300      	movs	r3, #0
 80155de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155e0:	2300      	movs	r3, #0
 80155e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80155ea:	78bb      	ldrb	r3, [r7, #2]
 80155ec:	883a      	ldrh	r2, [r7, #0]
 80155ee:	78f9      	ldrb	r1, [r7, #3]
 80155f0:	f7f7 fc16 	bl	800ce20 <HAL_PCD_EP_Open>
 80155f4:	4603      	mov	r3, r0
 80155f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155f8:	7bfb      	ldrb	r3, [r7, #15]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f000 f958 	bl	80158b0 <USBD_Get_USB_Status>
 8015600:	4603      	mov	r3, r0
 8015602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015604:	7bbb      	ldrb	r3, [r7, #14]
}
 8015606:	4618      	mov	r0, r3
 8015608:	3710      	adds	r7, #16
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}

0801560e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801560e:	b580      	push	{r7, lr}
 8015610:	b084      	sub	sp, #16
 8015612:	af00      	add	r7, sp, #0
 8015614:	6078      	str	r0, [r7, #4]
 8015616:	460b      	mov	r3, r1
 8015618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801561a:	2300      	movs	r3, #0
 801561c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801561e:	2300      	movs	r3, #0
 8015620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015628:	78fa      	ldrb	r2, [r7, #3]
 801562a:	4611      	mov	r1, r2
 801562c:	4618      	mov	r0, r3
 801562e:	f7f7 fc56 	bl	800cede <HAL_PCD_EP_Close>
 8015632:	4603      	mov	r3, r0
 8015634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015636:	7bfb      	ldrb	r3, [r7, #15]
 8015638:	4618      	mov	r0, r3
 801563a:	f000 f939 	bl	80158b0 <USBD_Get_USB_Status>
 801563e:	4603      	mov	r3, r0
 8015640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015642:	7bbb      	ldrb	r3, [r7, #14]
}
 8015644:	4618      	mov	r0, r3
 8015646:	3710      	adds	r7, #16
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b084      	sub	sp, #16
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015658:	2300      	movs	r3, #0
 801565a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801565c:	2300      	movs	r3, #0
 801565e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015666:	78fa      	ldrb	r2, [r7, #3]
 8015668:	4611      	mov	r1, r2
 801566a:	4618      	mov	r0, r3
 801566c:	f7f7 fcff 	bl	800d06e <HAL_PCD_EP_SetStall>
 8015670:	4603      	mov	r3, r0
 8015672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015674:	7bfb      	ldrb	r3, [r7, #15]
 8015676:	4618      	mov	r0, r3
 8015678:	f000 f91a 	bl	80158b0 <USBD_Get_USB_Status>
 801567c:	4603      	mov	r3, r0
 801567e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015680:	7bbb      	ldrb	r3, [r7, #14]
}
 8015682:	4618      	mov	r0, r3
 8015684:	3710      	adds	r7, #16
 8015686:	46bd      	mov	sp, r7
 8015688:	bd80      	pop	{r7, pc}

0801568a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801568a:	b580      	push	{r7, lr}
 801568c:	b084      	sub	sp, #16
 801568e:	af00      	add	r7, sp, #0
 8015690:	6078      	str	r0, [r7, #4]
 8015692:	460b      	mov	r3, r1
 8015694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015696:	2300      	movs	r3, #0
 8015698:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801569a:	2300      	movs	r3, #0
 801569c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80156a4:	78fa      	ldrb	r2, [r7, #3]
 80156a6:	4611      	mov	r1, r2
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7f7 fd32 	bl	800d112 <HAL_PCD_EP_ClrStall>
 80156ae:	4603      	mov	r3, r0
 80156b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156b2:	7bfb      	ldrb	r3, [r7, #15]
 80156b4:	4618      	mov	r0, r3
 80156b6:	f000 f8fb 	bl	80158b0 <USBD_Get_USB_Status>
 80156ba:	4603      	mov	r3, r0
 80156bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156be:	7bbb      	ldrb	r3, [r7, #14]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3710      	adds	r7, #16
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b085      	sub	sp, #20
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
 80156d0:	460b      	mov	r3, r1
 80156d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80156da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80156dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	da0b      	bge.n	80156fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80156e4:	78fb      	ldrb	r3, [r7, #3]
 80156e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80156ea:	68f9      	ldr	r1, [r7, #12]
 80156ec:	4613      	mov	r3, r2
 80156ee:	009b      	lsls	r3, r3, #2
 80156f0:	4413      	add	r3, r2
 80156f2:	00db      	lsls	r3, r3, #3
 80156f4:	440b      	add	r3, r1
 80156f6:	3312      	adds	r3, #18
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	e00b      	b.n	8015714 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80156fc:	78fb      	ldrb	r3, [r7, #3]
 80156fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015702:	68f9      	ldr	r1, [r7, #12]
 8015704:	4613      	mov	r3, r2
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	4413      	add	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	440b      	add	r3, r1
 801570e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8015712:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015714:	4618      	mov	r0, r3
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b084      	sub	sp, #16
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	460b      	mov	r3, r1
 801572a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801572c:	2300      	movs	r3, #0
 801572e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015730:	2300      	movs	r3, #0
 8015732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801573a:	78fa      	ldrb	r2, [r7, #3]
 801573c:	4611      	mov	r1, r2
 801573e:	4618      	mov	r0, r3
 8015740:	f7f7 fb4a 	bl	800cdd8 <HAL_PCD_SetAddress>
 8015744:	4603      	mov	r3, r0
 8015746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015748:	7bfb      	ldrb	r3, [r7, #15]
 801574a:	4618      	mov	r0, r3
 801574c:	f000 f8b0 	bl	80158b0 <USBD_Get_USB_Status>
 8015750:	4603      	mov	r3, r0
 8015752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015754:	7bbb      	ldrb	r3, [r7, #14]
}
 8015756:	4618      	mov	r0, r3
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}

0801575e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801575e:	b580      	push	{r7, lr}
 8015760:	b086      	sub	sp, #24
 8015762:	af00      	add	r7, sp, #0
 8015764:	60f8      	str	r0, [r7, #12]
 8015766:	607a      	str	r2, [r7, #4]
 8015768:	603b      	str	r3, [r7, #0]
 801576a:	460b      	mov	r3, r1
 801576c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801576e:	2300      	movs	r3, #0
 8015770:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015772:	2300      	movs	r3, #0
 8015774:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801577c:	7af9      	ldrb	r1, [r7, #11]
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	687a      	ldr	r2, [r7, #4]
 8015782:	f7f7 fc3d 	bl	800d000 <HAL_PCD_EP_Transmit>
 8015786:	4603      	mov	r3, r0
 8015788:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801578a:	7dfb      	ldrb	r3, [r7, #23]
 801578c:	4618      	mov	r0, r3
 801578e:	f000 f88f 	bl	80158b0 <USBD_Get_USB_Status>
 8015792:	4603      	mov	r3, r0
 8015794:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015796:	7dbb      	ldrb	r3, [r7, #22]
}
 8015798:	4618      	mov	r0, r3
 801579a:	3718      	adds	r7, #24
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b086      	sub	sp, #24
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	60f8      	str	r0, [r7, #12]
 80157a8:	607a      	str	r2, [r7, #4]
 80157aa:	603b      	str	r3, [r7, #0]
 80157ac:	460b      	mov	r3, r1
 80157ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157b0:	2300      	movs	r3, #0
 80157b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157b4:	2300      	movs	r3, #0
 80157b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80157be:	7af9      	ldrb	r1, [r7, #11]
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	687a      	ldr	r2, [r7, #4]
 80157c4:	f7f7 fbd3 	bl	800cf6e <HAL_PCD_EP_Receive>
 80157c8:	4603      	mov	r3, r0
 80157ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157cc:	7dfb      	ldrb	r3, [r7, #23]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f000 f86e 	bl	80158b0 <USBD_Get_USB_Status>
 80157d4:	4603      	mov	r3, r0
 80157d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80157d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3718      	adds	r7, #24
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}

080157e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157e2:	b580      	push	{r7, lr}
 80157e4:	b082      	sub	sp, #8
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
 80157ea:	460b      	mov	r3, r1
 80157ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80157f4:	78fa      	ldrb	r2, [r7, #3]
 80157f6:	4611      	mov	r1, r2
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7f7 fbe9 	bl	800cfd0 <HAL_PCD_EP_GetRxCount>
 80157fe:	4603      	mov	r3, r0
}
 8015800:	4618      	mov	r0, r3
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	460b      	mov	r3, r1
 8015812:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015814:	78fb      	ldrb	r3, [r7, #3]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d002      	beq.n	8015820 <HAL_PCDEx_LPM_Callback+0x18>
 801581a:	2b01      	cmp	r3, #1
 801581c:	d013      	beq.n	8015846 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801581e:	e023      	b.n	8015868 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	7a5b      	ldrb	r3, [r3, #9]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d007      	beq.n	8015838 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015828:	f000 f83c 	bl	80158a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801582c:	4b10      	ldr	r3, [pc, #64]	@ (8015870 <HAL_PCDEx_LPM_Callback+0x68>)
 801582e:	691b      	ldr	r3, [r3, #16]
 8015830:	4a0f      	ldr	r2, [pc, #60]	@ (8015870 <HAL_PCDEx_LPM_Callback+0x68>)
 8015832:	f023 0306 	bic.w	r3, r3, #6
 8015836:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801583e:	4618      	mov	r0, r3
 8015840:	f7fe fb71 	bl	8013f26 <USBD_LL_Resume>
    break;
 8015844:	e010      	b.n	8015868 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801584c:	4618      	mov	r0, r3
 801584e:	f7fe fb4e 	bl	8013eee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	7a5b      	ldrb	r3, [r3, #9]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d005      	beq.n	8015866 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801585a:	4b05      	ldr	r3, [pc, #20]	@ (8015870 <HAL_PCDEx_LPM_Callback+0x68>)
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	4a04      	ldr	r2, [pc, #16]	@ (8015870 <HAL_PCDEx_LPM_Callback+0x68>)
 8015860:	f043 0306 	orr.w	r3, r3, #6
 8015864:	6113      	str	r3, [r2, #16]
    break;
 8015866:	bf00      	nop
}
 8015868:	bf00      	nop
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	e000ed00 	.word	0xe000ed00

08015874 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015874:	b480      	push	{r7}
 8015876:	b083      	sub	sp, #12
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801587c:	4b03      	ldr	r3, [pc, #12]	@ (801588c <USBD_static_malloc+0x18>)
}
 801587e:	4618      	mov	r0, r3
 8015880:	370c      	adds	r7, #12
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr
 801588a:	bf00      	nop
 801588c:	20002170 	.word	0x20002170

08015890 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015898:	bf00      	nop
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80158a8:	f7f2 fc9c 	bl	80081e4 <SystemClock_Config>
}
 80158ac:	bf00      	nop
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80158b0:	b480      	push	{r7}
 80158b2:	b085      	sub	sp, #20
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	4603      	mov	r3, r0
 80158b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158ba:	2300      	movs	r3, #0
 80158bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80158be:	79fb      	ldrb	r3, [r7, #7]
 80158c0:	2b03      	cmp	r3, #3
 80158c2:	d817      	bhi.n	80158f4 <USBD_Get_USB_Status+0x44>
 80158c4:	a201      	add	r2, pc, #4	@ (adr r2, 80158cc <USBD_Get_USB_Status+0x1c>)
 80158c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158ca:	bf00      	nop
 80158cc:	080158dd 	.word	0x080158dd
 80158d0:	080158e3 	.word	0x080158e3
 80158d4:	080158e9 	.word	0x080158e9
 80158d8:	080158ef 	.word	0x080158ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80158dc:	2300      	movs	r3, #0
 80158de:	73fb      	strb	r3, [r7, #15]
    break;
 80158e0:	e00b      	b.n	80158fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80158e2:	2303      	movs	r3, #3
 80158e4:	73fb      	strb	r3, [r7, #15]
    break;
 80158e6:	e008      	b.n	80158fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80158e8:	2301      	movs	r3, #1
 80158ea:	73fb      	strb	r3, [r7, #15]
    break;
 80158ec:	e005      	b.n	80158fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80158ee:	2303      	movs	r3, #3
 80158f0:	73fb      	strb	r3, [r7, #15]
    break;
 80158f2:	e002      	b.n	80158fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80158f4:	2303      	movs	r3, #3
 80158f6:	73fb      	strb	r3, [r7, #15]
    break;
 80158f8:	bf00      	nop
  }
  return usb_status;
 80158fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3714      	adds	r7, #20
 8015900:	46bd      	mov	sp, r7
 8015902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015906:	4770      	bx	lr

08015908 <__cvt>:
 8015908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801590c:	ec57 6b10 	vmov	r6, r7, d0
 8015910:	2f00      	cmp	r7, #0
 8015912:	460c      	mov	r4, r1
 8015914:	4619      	mov	r1, r3
 8015916:	463b      	mov	r3, r7
 8015918:	bfbb      	ittet	lt
 801591a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801591e:	461f      	movlt	r7, r3
 8015920:	2300      	movge	r3, #0
 8015922:	232d      	movlt	r3, #45	@ 0x2d
 8015924:	700b      	strb	r3, [r1, #0]
 8015926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015928:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801592c:	4691      	mov	r9, r2
 801592e:	f023 0820 	bic.w	r8, r3, #32
 8015932:	bfbc      	itt	lt
 8015934:	4632      	movlt	r2, r6
 8015936:	4616      	movlt	r6, r2
 8015938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801593c:	d005      	beq.n	801594a <__cvt+0x42>
 801593e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8015942:	d100      	bne.n	8015946 <__cvt+0x3e>
 8015944:	3401      	adds	r4, #1
 8015946:	2102      	movs	r1, #2
 8015948:	e000      	b.n	801594c <__cvt+0x44>
 801594a:	2103      	movs	r1, #3
 801594c:	ab03      	add	r3, sp, #12
 801594e:	9301      	str	r3, [sp, #4]
 8015950:	ab02      	add	r3, sp, #8
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	ec47 6b10 	vmov	d0, r6, r7
 8015958:	4653      	mov	r3, sl
 801595a:	4622      	mov	r2, r4
 801595c:	f000 ff54 	bl	8016808 <_dtoa_r>
 8015960:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8015964:	4605      	mov	r5, r0
 8015966:	d119      	bne.n	801599c <__cvt+0x94>
 8015968:	f019 0f01 	tst.w	r9, #1
 801596c:	d00e      	beq.n	801598c <__cvt+0x84>
 801596e:	eb00 0904 	add.w	r9, r0, r4
 8015972:	2200      	movs	r2, #0
 8015974:	2300      	movs	r3, #0
 8015976:	4630      	mov	r0, r6
 8015978:	4639      	mov	r1, r7
 801597a:	f7eb f87d 	bl	8000a78 <__aeabi_dcmpeq>
 801597e:	b108      	cbz	r0, 8015984 <__cvt+0x7c>
 8015980:	f8cd 900c 	str.w	r9, [sp, #12]
 8015984:	2230      	movs	r2, #48	@ 0x30
 8015986:	9b03      	ldr	r3, [sp, #12]
 8015988:	454b      	cmp	r3, r9
 801598a:	d31e      	bcc.n	80159ca <__cvt+0xc2>
 801598c:	9b03      	ldr	r3, [sp, #12]
 801598e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015990:	1b5b      	subs	r3, r3, r5
 8015992:	4628      	mov	r0, r5
 8015994:	6013      	str	r3, [r2, #0]
 8015996:	b004      	add	sp, #16
 8015998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801599c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80159a0:	eb00 0904 	add.w	r9, r0, r4
 80159a4:	d1e5      	bne.n	8015972 <__cvt+0x6a>
 80159a6:	7803      	ldrb	r3, [r0, #0]
 80159a8:	2b30      	cmp	r3, #48	@ 0x30
 80159aa:	d10a      	bne.n	80159c2 <__cvt+0xba>
 80159ac:	2200      	movs	r2, #0
 80159ae:	2300      	movs	r3, #0
 80159b0:	4630      	mov	r0, r6
 80159b2:	4639      	mov	r1, r7
 80159b4:	f7eb f860 	bl	8000a78 <__aeabi_dcmpeq>
 80159b8:	b918      	cbnz	r0, 80159c2 <__cvt+0xba>
 80159ba:	f1c4 0401 	rsb	r4, r4, #1
 80159be:	f8ca 4000 	str.w	r4, [sl]
 80159c2:	f8da 3000 	ldr.w	r3, [sl]
 80159c6:	4499      	add	r9, r3
 80159c8:	e7d3      	b.n	8015972 <__cvt+0x6a>
 80159ca:	1c59      	adds	r1, r3, #1
 80159cc:	9103      	str	r1, [sp, #12]
 80159ce:	701a      	strb	r2, [r3, #0]
 80159d0:	e7d9      	b.n	8015986 <__cvt+0x7e>

080159d2 <__exponent>:
 80159d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159d4:	2900      	cmp	r1, #0
 80159d6:	bfba      	itte	lt
 80159d8:	4249      	neglt	r1, r1
 80159da:	232d      	movlt	r3, #45	@ 0x2d
 80159dc:	232b      	movge	r3, #43	@ 0x2b
 80159de:	2909      	cmp	r1, #9
 80159e0:	7002      	strb	r2, [r0, #0]
 80159e2:	7043      	strb	r3, [r0, #1]
 80159e4:	dd29      	ble.n	8015a3a <__exponent+0x68>
 80159e6:	f10d 0307 	add.w	r3, sp, #7
 80159ea:	461d      	mov	r5, r3
 80159ec:	270a      	movs	r7, #10
 80159ee:	461a      	mov	r2, r3
 80159f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80159f4:	fb07 1416 	mls	r4, r7, r6, r1
 80159f8:	3430      	adds	r4, #48	@ 0x30
 80159fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80159fe:	460c      	mov	r4, r1
 8015a00:	2c63      	cmp	r4, #99	@ 0x63
 8015a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a06:	4631      	mov	r1, r6
 8015a08:	dcf1      	bgt.n	80159ee <__exponent+0x1c>
 8015a0a:	3130      	adds	r1, #48	@ 0x30
 8015a0c:	1e94      	subs	r4, r2, #2
 8015a0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015a12:	1c41      	adds	r1, r0, #1
 8015a14:	4623      	mov	r3, r4
 8015a16:	42ab      	cmp	r3, r5
 8015a18:	d30a      	bcc.n	8015a30 <__exponent+0x5e>
 8015a1a:	f10d 0309 	add.w	r3, sp, #9
 8015a1e:	1a9b      	subs	r3, r3, r2
 8015a20:	42ac      	cmp	r4, r5
 8015a22:	bf88      	it	hi
 8015a24:	2300      	movhi	r3, #0
 8015a26:	3302      	adds	r3, #2
 8015a28:	4403      	add	r3, r0
 8015a2a:	1a18      	subs	r0, r3, r0
 8015a2c:	b003      	add	sp, #12
 8015a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015a34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015a38:	e7ed      	b.n	8015a16 <__exponent+0x44>
 8015a3a:	2330      	movs	r3, #48	@ 0x30
 8015a3c:	3130      	adds	r1, #48	@ 0x30
 8015a3e:	7083      	strb	r3, [r0, #2]
 8015a40:	70c1      	strb	r1, [r0, #3]
 8015a42:	1d03      	adds	r3, r0, #4
 8015a44:	e7f1      	b.n	8015a2a <__exponent+0x58>
	...

08015a48 <_printf_float>:
 8015a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4c:	b08d      	sub	sp, #52	@ 0x34
 8015a4e:	460c      	mov	r4, r1
 8015a50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015a54:	4616      	mov	r6, r2
 8015a56:	461f      	mov	r7, r3
 8015a58:	4605      	mov	r5, r0
 8015a5a:	f000 fdc5 	bl	80165e8 <_localeconv_r>
 8015a5e:	6803      	ldr	r3, [r0, #0]
 8015a60:	9304      	str	r3, [sp, #16]
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7ea fbdc 	bl	8000220 <strlen>
 8015a68:	2300      	movs	r3, #0
 8015a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8015a70:	9005      	str	r0, [sp, #20]
 8015a72:	3307      	adds	r3, #7
 8015a74:	f023 0307 	bic.w	r3, r3, #7
 8015a78:	f103 0208 	add.w	r2, r3, #8
 8015a7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a80:	f8d4 b000 	ldr.w	fp, [r4]
 8015a84:	f8c8 2000 	str.w	r2, [r8]
 8015a88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015a8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8015a90:	9307      	str	r3, [sp, #28]
 8015a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8015a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8015d10 <_printf_float+0x2c8>)
 8015aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8015aa4:	f7eb f81a 	bl	8000adc <__aeabi_dcmpun>
 8015aa8:	bb70      	cbnz	r0, 8015b08 <_printf_float+0xc0>
 8015aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015aae:	4b98      	ldr	r3, [pc, #608]	@ (8015d10 <_printf_float+0x2c8>)
 8015ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ab4:	f7ea fff4 	bl	8000aa0 <__aeabi_dcmple>
 8015ab8:	bb30      	cbnz	r0, 8015b08 <_printf_float+0xc0>
 8015aba:	2200      	movs	r2, #0
 8015abc:	2300      	movs	r3, #0
 8015abe:	4640      	mov	r0, r8
 8015ac0:	4649      	mov	r1, r9
 8015ac2:	f7ea ffe3 	bl	8000a8c <__aeabi_dcmplt>
 8015ac6:	b110      	cbz	r0, 8015ace <_printf_float+0x86>
 8015ac8:	232d      	movs	r3, #45	@ 0x2d
 8015aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015ace:	4a91      	ldr	r2, [pc, #580]	@ (8015d14 <_printf_float+0x2cc>)
 8015ad0:	4b91      	ldr	r3, [pc, #580]	@ (8015d18 <_printf_float+0x2d0>)
 8015ad2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015ad6:	bf8c      	ite	hi
 8015ad8:	4690      	movhi	r8, r2
 8015ada:	4698      	movls	r8, r3
 8015adc:	2303      	movs	r3, #3
 8015ade:	6123      	str	r3, [r4, #16]
 8015ae0:	f02b 0304 	bic.w	r3, fp, #4
 8015ae4:	6023      	str	r3, [r4, #0]
 8015ae6:	f04f 0900 	mov.w	r9, #0
 8015aea:	9700      	str	r7, [sp, #0]
 8015aec:	4633      	mov	r3, r6
 8015aee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015af0:	4621      	mov	r1, r4
 8015af2:	4628      	mov	r0, r5
 8015af4:	f000 f9d2 	bl	8015e9c <_printf_common>
 8015af8:	3001      	adds	r0, #1
 8015afa:	f040 808d 	bne.w	8015c18 <_printf_float+0x1d0>
 8015afe:	f04f 30ff 	mov.w	r0, #4294967295
 8015b02:	b00d      	add	sp, #52	@ 0x34
 8015b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b08:	4642      	mov	r2, r8
 8015b0a:	464b      	mov	r3, r9
 8015b0c:	4640      	mov	r0, r8
 8015b0e:	4649      	mov	r1, r9
 8015b10:	f7ea ffe4 	bl	8000adc <__aeabi_dcmpun>
 8015b14:	b140      	cbz	r0, 8015b28 <_printf_float+0xe0>
 8015b16:	464b      	mov	r3, r9
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	bfbc      	itt	lt
 8015b1c:	232d      	movlt	r3, #45	@ 0x2d
 8015b1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015b22:	4a7e      	ldr	r2, [pc, #504]	@ (8015d1c <_printf_float+0x2d4>)
 8015b24:	4b7e      	ldr	r3, [pc, #504]	@ (8015d20 <_printf_float+0x2d8>)
 8015b26:	e7d4      	b.n	8015ad2 <_printf_float+0x8a>
 8015b28:	6863      	ldr	r3, [r4, #4]
 8015b2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8015b2e:	9206      	str	r2, [sp, #24]
 8015b30:	1c5a      	adds	r2, r3, #1
 8015b32:	d13b      	bne.n	8015bac <_printf_float+0x164>
 8015b34:	2306      	movs	r3, #6
 8015b36:	6063      	str	r3, [r4, #4]
 8015b38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	6022      	str	r2, [r4, #0]
 8015b40:	9303      	str	r3, [sp, #12]
 8015b42:	ab0a      	add	r3, sp, #40	@ 0x28
 8015b44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8015b48:	ab09      	add	r3, sp, #36	@ 0x24
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	6861      	ldr	r1, [r4, #4]
 8015b4e:	ec49 8b10 	vmov	d0, r8, r9
 8015b52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015b56:	4628      	mov	r0, r5
 8015b58:	f7ff fed6 	bl	8015908 <__cvt>
 8015b5c:	9b06      	ldr	r3, [sp, #24]
 8015b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015b60:	2b47      	cmp	r3, #71	@ 0x47
 8015b62:	4680      	mov	r8, r0
 8015b64:	d129      	bne.n	8015bba <_printf_float+0x172>
 8015b66:	1cc8      	adds	r0, r1, #3
 8015b68:	db02      	blt.n	8015b70 <_printf_float+0x128>
 8015b6a:	6863      	ldr	r3, [r4, #4]
 8015b6c:	4299      	cmp	r1, r3
 8015b6e:	dd41      	ble.n	8015bf4 <_printf_float+0x1ac>
 8015b70:	f1aa 0a02 	sub.w	sl, sl, #2
 8015b74:	fa5f fa8a 	uxtb.w	sl, sl
 8015b78:	3901      	subs	r1, #1
 8015b7a:	4652      	mov	r2, sl
 8015b7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015b80:	9109      	str	r1, [sp, #36]	@ 0x24
 8015b82:	f7ff ff26 	bl	80159d2 <__exponent>
 8015b86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015b88:	1813      	adds	r3, r2, r0
 8015b8a:	2a01      	cmp	r2, #1
 8015b8c:	4681      	mov	r9, r0
 8015b8e:	6123      	str	r3, [r4, #16]
 8015b90:	dc02      	bgt.n	8015b98 <_printf_float+0x150>
 8015b92:	6822      	ldr	r2, [r4, #0]
 8015b94:	07d2      	lsls	r2, r2, #31
 8015b96:	d501      	bpl.n	8015b9c <_printf_float+0x154>
 8015b98:	3301      	adds	r3, #1
 8015b9a:	6123      	str	r3, [r4, #16]
 8015b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d0a2      	beq.n	8015aea <_printf_float+0xa2>
 8015ba4:	232d      	movs	r3, #45	@ 0x2d
 8015ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015baa:	e79e      	b.n	8015aea <_printf_float+0xa2>
 8015bac:	9a06      	ldr	r2, [sp, #24]
 8015bae:	2a47      	cmp	r2, #71	@ 0x47
 8015bb0:	d1c2      	bne.n	8015b38 <_printf_float+0xf0>
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d1c0      	bne.n	8015b38 <_printf_float+0xf0>
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	e7bd      	b.n	8015b36 <_printf_float+0xee>
 8015bba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015bbe:	d9db      	bls.n	8015b78 <_printf_float+0x130>
 8015bc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8015bc4:	d118      	bne.n	8015bf8 <_printf_float+0x1b0>
 8015bc6:	2900      	cmp	r1, #0
 8015bc8:	6863      	ldr	r3, [r4, #4]
 8015bca:	dd0b      	ble.n	8015be4 <_printf_float+0x19c>
 8015bcc:	6121      	str	r1, [r4, #16]
 8015bce:	b913      	cbnz	r3, 8015bd6 <_printf_float+0x18e>
 8015bd0:	6822      	ldr	r2, [r4, #0]
 8015bd2:	07d0      	lsls	r0, r2, #31
 8015bd4:	d502      	bpl.n	8015bdc <_printf_float+0x194>
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	440b      	add	r3, r1
 8015bda:	6123      	str	r3, [r4, #16]
 8015bdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015bde:	f04f 0900 	mov.w	r9, #0
 8015be2:	e7db      	b.n	8015b9c <_printf_float+0x154>
 8015be4:	b913      	cbnz	r3, 8015bec <_printf_float+0x1a4>
 8015be6:	6822      	ldr	r2, [r4, #0]
 8015be8:	07d2      	lsls	r2, r2, #31
 8015bea:	d501      	bpl.n	8015bf0 <_printf_float+0x1a8>
 8015bec:	3302      	adds	r3, #2
 8015bee:	e7f4      	b.n	8015bda <_printf_float+0x192>
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	e7f2      	b.n	8015bda <_printf_float+0x192>
 8015bf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8015bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bfa:	4299      	cmp	r1, r3
 8015bfc:	db05      	blt.n	8015c0a <_printf_float+0x1c2>
 8015bfe:	6823      	ldr	r3, [r4, #0]
 8015c00:	6121      	str	r1, [r4, #16]
 8015c02:	07d8      	lsls	r0, r3, #31
 8015c04:	d5ea      	bpl.n	8015bdc <_printf_float+0x194>
 8015c06:	1c4b      	adds	r3, r1, #1
 8015c08:	e7e7      	b.n	8015bda <_printf_float+0x192>
 8015c0a:	2900      	cmp	r1, #0
 8015c0c:	bfd4      	ite	le
 8015c0e:	f1c1 0202 	rsble	r2, r1, #2
 8015c12:	2201      	movgt	r2, #1
 8015c14:	4413      	add	r3, r2
 8015c16:	e7e0      	b.n	8015bda <_printf_float+0x192>
 8015c18:	6823      	ldr	r3, [r4, #0]
 8015c1a:	055a      	lsls	r2, r3, #21
 8015c1c:	d407      	bmi.n	8015c2e <_printf_float+0x1e6>
 8015c1e:	6923      	ldr	r3, [r4, #16]
 8015c20:	4642      	mov	r2, r8
 8015c22:	4631      	mov	r1, r6
 8015c24:	4628      	mov	r0, r5
 8015c26:	47b8      	blx	r7
 8015c28:	3001      	adds	r0, #1
 8015c2a:	d12b      	bne.n	8015c84 <_printf_float+0x23c>
 8015c2c:	e767      	b.n	8015afe <_printf_float+0xb6>
 8015c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015c32:	f240 80dd 	bls.w	8015df0 <_printf_float+0x3a8>
 8015c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	f7ea ff1b 	bl	8000a78 <__aeabi_dcmpeq>
 8015c42:	2800      	cmp	r0, #0
 8015c44:	d033      	beq.n	8015cae <_printf_float+0x266>
 8015c46:	4a37      	ldr	r2, [pc, #220]	@ (8015d24 <_printf_float+0x2dc>)
 8015c48:	2301      	movs	r3, #1
 8015c4a:	4631      	mov	r1, r6
 8015c4c:	4628      	mov	r0, r5
 8015c4e:	47b8      	blx	r7
 8015c50:	3001      	adds	r0, #1
 8015c52:	f43f af54 	beq.w	8015afe <_printf_float+0xb6>
 8015c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015c5a:	4543      	cmp	r3, r8
 8015c5c:	db02      	blt.n	8015c64 <_printf_float+0x21c>
 8015c5e:	6823      	ldr	r3, [r4, #0]
 8015c60:	07d8      	lsls	r0, r3, #31
 8015c62:	d50f      	bpl.n	8015c84 <_printf_float+0x23c>
 8015c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c68:	4631      	mov	r1, r6
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	47b8      	blx	r7
 8015c6e:	3001      	adds	r0, #1
 8015c70:	f43f af45 	beq.w	8015afe <_printf_float+0xb6>
 8015c74:	f04f 0900 	mov.w	r9, #0
 8015c78:	f108 38ff 	add.w	r8, r8, #4294967295
 8015c7c:	f104 0a1a 	add.w	sl, r4, #26
 8015c80:	45c8      	cmp	r8, r9
 8015c82:	dc09      	bgt.n	8015c98 <_printf_float+0x250>
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	079b      	lsls	r3, r3, #30
 8015c88:	f100 8103 	bmi.w	8015e92 <_printf_float+0x44a>
 8015c8c:	68e0      	ldr	r0, [r4, #12]
 8015c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c90:	4298      	cmp	r0, r3
 8015c92:	bfb8      	it	lt
 8015c94:	4618      	movlt	r0, r3
 8015c96:	e734      	b.n	8015b02 <_printf_float+0xba>
 8015c98:	2301      	movs	r3, #1
 8015c9a:	4652      	mov	r2, sl
 8015c9c:	4631      	mov	r1, r6
 8015c9e:	4628      	mov	r0, r5
 8015ca0:	47b8      	blx	r7
 8015ca2:	3001      	adds	r0, #1
 8015ca4:	f43f af2b 	beq.w	8015afe <_printf_float+0xb6>
 8015ca8:	f109 0901 	add.w	r9, r9, #1
 8015cac:	e7e8      	b.n	8015c80 <_printf_float+0x238>
 8015cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	dc39      	bgt.n	8015d28 <_printf_float+0x2e0>
 8015cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8015d24 <_printf_float+0x2dc>)
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	4631      	mov	r1, r6
 8015cba:	4628      	mov	r0, r5
 8015cbc:	47b8      	blx	r7
 8015cbe:	3001      	adds	r0, #1
 8015cc0:	f43f af1d 	beq.w	8015afe <_printf_float+0xb6>
 8015cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8015ccc:	d102      	bne.n	8015cd4 <_printf_float+0x28c>
 8015cce:	6823      	ldr	r3, [r4, #0]
 8015cd0:	07d9      	lsls	r1, r3, #31
 8015cd2:	d5d7      	bpl.n	8015c84 <_printf_float+0x23c>
 8015cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cd8:	4631      	mov	r1, r6
 8015cda:	4628      	mov	r0, r5
 8015cdc:	47b8      	blx	r7
 8015cde:	3001      	adds	r0, #1
 8015ce0:	f43f af0d 	beq.w	8015afe <_printf_float+0xb6>
 8015ce4:	f04f 0a00 	mov.w	sl, #0
 8015ce8:	f104 0b1a 	add.w	fp, r4, #26
 8015cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cee:	425b      	negs	r3, r3
 8015cf0:	4553      	cmp	r3, sl
 8015cf2:	dc01      	bgt.n	8015cf8 <_printf_float+0x2b0>
 8015cf4:	464b      	mov	r3, r9
 8015cf6:	e793      	b.n	8015c20 <_printf_float+0x1d8>
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	465a      	mov	r2, fp
 8015cfc:	4631      	mov	r1, r6
 8015cfe:	4628      	mov	r0, r5
 8015d00:	47b8      	blx	r7
 8015d02:	3001      	adds	r0, #1
 8015d04:	f43f aefb 	beq.w	8015afe <_printf_float+0xb6>
 8015d08:	f10a 0a01 	add.w	sl, sl, #1
 8015d0c:	e7ee      	b.n	8015cec <_printf_float+0x2a4>
 8015d0e:	bf00      	nop
 8015d10:	7fefffff 	.word	0x7fefffff
 8015d14:	0801c368 	.word	0x0801c368
 8015d18:	0801c364 	.word	0x0801c364
 8015d1c:	0801c370 	.word	0x0801c370
 8015d20:	0801c36c 	.word	0x0801c36c
 8015d24:	0801c374 	.word	0x0801c374
 8015d28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015d2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015d2e:	4553      	cmp	r3, sl
 8015d30:	bfa8      	it	ge
 8015d32:	4653      	movge	r3, sl
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	4699      	mov	r9, r3
 8015d38:	dc36      	bgt.n	8015da8 <_printf_float+0x360>
 8015d3a:	f04f 0b00 	mov.w	fp, #0
 8015d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d42:	f104 021a 	add.w	r2, r4, #26
 8015d46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015d48:	9306      	str	r3, [sp, #24]
 8015d4a:	eba3 0309 	sub.w	r3, r3, r9
 8015d4e:	455b      	cmp	r3, fp
 8015d50:	dc31      	bgt.n	8015db6 <_printf_float+0x36e>
 8015d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d54:	459a      	cmp	sl, r3
 8015d56:	dc3a      	bgt.n	8015dce <_printf_float+0x386>
 8015d58:	6823      	ldr	r3, [r4, #0]
 8015d5a:	07da      	lsls	r2, r3, #31
 8015d5c:	d437      	bmi.n	8015dce <_printf_float+0x386>
 8015d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d60:	ebaa 0903 	sub.w	r9, sl, r3
 8015d64:	9b06      	ldr	r3, [sp, #24]
 8015d66:	ebaa 0303 	sub.w	r3, sl, r3
 8015d6a:	4599      	cmp	r9, r3
 8015d6c:	bfa8      	it	ge
 8015d6e:	4699      	movge	r9, r3
 8015d70:	f1b9 0f00 	cmp.w	r9, #0
 8015d74:	dc33      	bgt.n	8015dde <_printf_float+0x396>
 8015d76:	f04f 0800 	mov.w	r8, #0
 8015d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d7e:	f104 0b1a 	add.w	fp, r4, #26
 8015d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d84:	ebaa 0303 	sub.w	r3, sl, r3
 8015d88:	eba3 0309 	sub.w	r3, r3, r9
 8015d8c:	4543      	cmp	r3, r8
 8015d8e:	f77f af79 	ble.w	8015c84 <_printf_float+0x23c>
 8015d92:	2301      	movs	r3, #1
 8015d94:	465a      	mov	r2, fp
 8015d96:	4631      	mov	r1, r6
 8015d98:	4628      	mov	r0, r5
 8015d9a:	47b8      	blx	r7
 8015d9c:	3001      	adds	r0, #1
 8015d9e:	f43f aeae 	beq.w	8015afe <_printf_float+0xb6>
 8015da2:	f108 0801 	add.w	r8, r8, #1
 8015da6:	e7ec      	b.n	8015d82 <_printf_float+0x33a>
 8015da8:	4642      	mov	r2, r8
 8015daa:	4631      	mov	r1, r6
 8015dac:	4628      	mov	r0, r5
 8015dae:	47b8      	blx	r7
 8015db0:	3001      	adds	r0, #1
 8015db2:	d1c2      	bne.n	8015d3a <_printf_float+0x2f2>
 8015db4:	e6a3      	b.n	8015afe <_printf_float+0xb6>
 8015db6:	2301      	movs	r3, #1
 8015db8:	4631      	mov	r1, r6
 8015dba:	4628      	mov	r0, r5
 8015dbc:	9206      	str	r2, [sp, #24]
 8015dbe:	47b8      	blx	r7
 8015dc0:	3001      	adds	r0, #1
 8015dc2:	f43f ae9c 	beq.w	8015afe <_printf_float+0xb6>
 8015dc6:	9a06      	ldr	r2, [sp, #24]
 8015dc8:	f10b 0b01 	add.w	fp, fp, #1
 8015dcc:	e7bb      	b.n	8015d46 <_printf_float+0x2fe>
 8015dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dd2:	4631      	mov	r1, r6
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	47b8      	blx	r7
 8015dd8:	3001      	adds	r0, #1
 8015dda:	d1c0      	bne.n	8015d5e <_printf_float+0x316>
 8015ddc:	e68f      	b.n	8015afe <_printf_float+0xb6>
 8015dde:	9a06      	ldr	r2, [sp, #24]
 8015de0:	464b      	mov	r3, r9
 8015de2:	4442      	add	r2, r8
 8015de4:	4631      	mov	r1, r6
 8015de6:	4628      	mov	r0, r5
 8015de8:	47b8      	blx	r7
 8015dea:	3001      	adds	r0, #1
 8015dec:	d1c3      	bne.n	8015d76 <_printf_float+0x32e>
 8015dee:	e686      	b.n	8015afe <_printf_float+0xb6>
 8015df0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015df4:	f1ba 0f01 	cmp.w	sl, #1
 8015df8:	dc01      	bgt.n	8015dfe <_printf_float+0x3b6>
 8015dfa:	07db      	lsls	r3, r3, #31
 8015dfc:	d536      	bpl.n	8015e6c <_printf_float+0x424>
 8015dfe:	2301      	movs	r3, #1
 8015e00:	4642      	mov	r2, r8
 8015e02:	4631      	mov	r1, r6
 8015e04:	4628      	mov	r0, r5
 8015e06:	47b8      	blx	r7
 8015e08:	3001      	adds	r0, #1
 8015e0a:	f43f ae78 	beq.w	8015afe <_printf_float+0xb6>
 8015e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e12:	4631      	mov	r1, r6
 8015e14:	4628      	mov	r0, r5
 8015e16:	47b8      	blx	r7
 8015e18:	3001      	adds	r0, #1
 8015e1a:	f43f ae70 	beq.w	8015afe <_printf_float+0xb6>
 8015e1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015e22:	2200      	movs	r2, #0
 8015e24:	2300      	movs	r3, #0
 8015e26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e2a:	f7ea fe25 	bl	8000a78 <__aeabi_dcmpeq>
 8015e2e:	b9c0      	cbnz	r0, 8015e62 <_printf_float+0x41a>
 8015e30:	4653      	mov	r3, sl
 8015e32:	f108 0201 	add.w	r2, r8, #1
 8015e36:	4631      	mov	r1, r6
 8015e38:	4628      	mov	r0, r5
 8015e3a:	47b8      	blx	r7
 8015e3c:	3001      	adds	r0, #1
 8015e3e:	d10c      	bne.n	8015e5a <_printf_float+0x412>
 8015e40:	e65d      	b.n	8015afe <_printf_float+0xb6>
 8015e42:	2301      	movs	r3, #1
 8015e44:	465a      	mov	r2, fp
 8015e46:	4631      	mov	r1, r6
 8015e48:	4628      	mov	r0, r5
 8015e4a:	47b8      	blx	r7
 8015e4c:	3001      	adds	r0, #1
 8015e4e:	f43f ae56 	beq.w	8015afe <_printf_float+0xb6>
 8015e52:	f108 0801 	add.w	r8, r8, #1
 8015e56:	45d0      	cmp	r8, sl
 8015e58:	dbf3      	blt.n	8015e42 <_printf_float+0x3fa>
 8015e5a:	464b      	mov	r3, r9
 8015e5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015e60:	e6df      	b.n	8015c22 <_printf_float+0x1da>
 8015e62:	f04f 0800 	mov.w	r8, #0
 8015e66:	f104 0b1a 	add.w	fp, r4, #26
 8015e6a:	e7f4      	b.n	8015e56 <_printf_float+0x40e>
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	4642      	mov	r2, r8
 8015e70:	e7e1      	b.n	8015e36 <_printf_float+0x3ee>
 8015e72:	2301      	movs	r3, #1
 8015e74:	464a      	mov	r2, r9
 8015e76:	4631      	mov	r1, r6
 8015e78:	4628      	mov	r0, r5
 8015e7a:	47b8      	blx	r7
 8015e7c:	3001      	adds	r0, #1
 8015e7e:	f43f ae3e 	beq.w	8015afe <_printf_float+0xb6>
 8015e82:	f108 0801 	add.w	r8, r8, #1
 8015e86:	68e3      	ldr	r3, [r4, #12]
 8015e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015e8a:	1a5b      	subs	r3, r3, r1
 8015e8c:	4543      	cmp	r3, r8
 8015e8e:	dcf0      	bgt.n	8015e72 <_printf_float+0x42a>
 8015e90:	e6fc      	b.n	8015c8c <_printf_float+0x244>
 8015e92:	f04f 0800 	mov.w	r8, #0
 8015e96:	f104 0919 	add.w	r9, r4, #25
 8015e9a:	e7f4      	b.n	8015e86 <_printf_float+0x43e>

08015e9c <_printf_common>:
 8015e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea0:	4616      	mov	r6, r2
 8015ea2:	4698      	mov	r8, r3
 8015ea4:	688a      	ldr	r2, [r1, #8]
 8015ea6:	690b      	ldr	r3, [r1, #16]
 8015ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015eac:	4293      	cmp	r3, r2
 8015eae:	bfb8      	it	lt
 8015eb0:	4613      	movlt	r3, r2
 8015eb2:	6033      	str	r3, [r6, #0]
 8015eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015eb8:	4607      	mov	r7, r0
 8015eba:	460c      	mov	r4, r1
 8015ebc:	b10a      	cbz	r2, 8015ec2 <_printf_common+0x26>
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	6033      	str	r3, [r6, #0]
 8015ec2:	6823      	ldr	r3, [r4, #0]
 8015ec4:	0699      	lsls	r1, r3, #26
 8015ec6:	bf42      	ittt	mi
 8015ec8:	6833      	ldrmi	r3, [r6, #0]
 8015eca:	3302      	addmi	r3, #2
 8015ecc:	6033      	strmi	r3, [r6, #0]
 8015ece:	6825      	ldr	r5, [r4, #0]
 8015ed0:	f015 0506 	ands.w	r5, r5, #6
 8015ed4:	d106      	bne.n	8015ee4 <_printf_common+0x48>
 8015ed6:	f104 0a19 	add.w	sl, r4, #25
 8015eda:	68e3      	ldr	r3, [r4, #12]
 8015edc:	6832      	ldr	r2, [r6, #0]
 8015ede:	1a9b      	subs	r3, r3, r2
 8015ee0:	42ab      	cmp	r3, r5
 8015ee2:	dc26      	bgt.n	8015f32 <_printf_common+0x96>
 8015ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015ee8:	6822      	ldr	r2, [r4, #0]
 8015eea:	3b00      	subs	r3, #0
 8015eec:	bf18      	it	ne
 8015eee:	2301      	movne	r3, #1
 8015ef0:	0692      	lsls	r2, r2, #26
 8015ef2:	d42b      	bmi.n	8015f4c <_printf_common+0xb0>
 8015ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ef8:	4641      	mov	r1, r8
 8015efa:	4638      	mov	r0, r7
 8015efc:	47c8      	blx	r9
 8015efe:	3001      	adds	r0, #1
 8015f00:	d01e      	beq.n	8015f40 <_printf_common+0xa4>
 8015f02:	6823      	ldr	r3, [r4, #0]
 8015f04:	6922      	ldr	r2, [r4, #16]
 8015f06:	f003 0306 	and.w	r3, r3, #6
 8015f0a:	2b04      	cmp	r3, #4
 8015f0c:	bf02      	ittt	eq
 8015f0e:	68e5      	ldreq	r5, [r4, #12]
 8015f10:	6833      	ldreq	r3, [r6, #0]
 8015f12:	1aed      	subeq	r5, r5, r3
 8015f14:	68a3      	ldr	r3, [r4, #8]
 8015f16:	bf0c      	ite	eq
 8015f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f1c:	2500      	movne	r5, #0
 8015f1e:	4293      	cmp	r3, r2
 8015f20:	bfc4      	itt	gt
 8015f22:	1a9b      	subgt	r3, r3, r2
 8015f24:	18ed      	addgt	r5, r5, r3
 8015f26:	2600      	movs	r6, #0
 8015f28:	341a      	adds	r4, #26
 8015f2a:	42b5      	cmp	r5, r6
 8015f2c:	d11a      	bne.n	8015f64 <_printf_common+0xc8>
 8015f2e:	2000      	movs	r0, #0
 8015f30:	e008      	b.n	8015f44 <_printf_common+0xa8>
 8015f32:	2301      	movs	r3, #1
 8015f34:	4652      	mov	r2, sl
 8015f36:	4641      	mov	r1, r8
 8015f38:	4638      	mov	r0, r7
 8015f3a:	47c8      	blx	r9
 8015f3c:	3001      	adds	r0, #1
 8015f3e:	d103      	bne.n	8015f48 <_printf_common+0xac>
 8015f40:	f04f 30ff 	mov.w	r0, #4294967295
 8015f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f48:	3501      	adds	r5, #1
 8015f4a:	e7c6      	b.n	8015eda <_printf_common+0x3e>
 8015f4c:	18e1      	adds	r1, r4, r3
 8015f4e:	1c5a      	adds	r2, r3, #1
 8015f50:	2030      	movs	r0, #48	@ 0x30
 8015f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015f56:	4422      	add	r2, r4
 8015f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015f60:	3302      	adds	r3, #2
 8015f62:	e7c7      	b.n	8015ef4 <_printf_common+0x58>
 8015f64:	2301      	movs	r3, #1
 8015f66:	4622      	mov	r2, r4
 8015f68:	4641      	mov	r1, r8
 8015f6a:	4638      	mov	r0, r7
 8015f6c:	47c8      	blx	r9
 8015f6e:	3001      	adds	r0, #1
 8015f70:	d0e6      	beq.n	8015f40 <_printf_common+0xa4>
 8015f72:	3601      	adds	r6, #1
 8015f74:	e7d9      	b.n	8015f2a <_printf_common+0x8e>
	...

08015f78 <_printf_i>:
 8015f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f7c:	7e0f      	ldrb	r7, [r1, #24]
 8015f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015f80:	2f78      	cmp	r7, #120	@ 0x78
 8015f82:	4691      	mov	r9, r2
 8015f84:	4680      	mov	r8, r0
 8015f86:	460c      	mov	r4, r1
 8015f88:	469a      	mov	sl, r3
 8015f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015f8e:	d807      	bhi.n	8015fa0 <_printf_i+0x28>
 8015f90:	2f62      	cmp	r7, #98	@ 0x62
 8015f92:	d80a      	bhi.n	8015faa <_printf_i+0x32>
 8015f94:	2f00      	cmp	r7, #0
 8015f96:	f000 80d1 	beq.w	801613c <_printf_i+0x1c4>
 8015f9a:	2f58      	cmp	r7, #88	@ 0x58
 8015f9c:	f000 80b8 	beq.w	8016110 <_printf_i+0x198>
 8015fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015fa8:	e03a      	b.n	8016020 <_printf_i+0xa8>
 8015faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015fae:	2b15      	cmp	r3, #21
 8015fb0:	d8f6      	bhi.n	8015fa0 <_printf_i+0x28>
 8015fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8015fb8 <_printf_i+0x40>)
 8015fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015fb8:	08016011 	.word	0x08016011
 8015fbc:	08016025 	.word	0x08016025
 8015fc0:	08015fa1 	.word	0x08015fa1
 8015fc4:	08015fa1 	.word	0x08015fa1
 8015fc8:	08015fa1 	.word	0x08015fa1
 8015fcc:	08015fa1 	.word	0x08015fa1
 8015fd0:	08016025 	.word	0x08016025
 8015fd4:	08015fa1 	.word	0x08015fa1
 8015fd8:	08015fa1 	.word	0x08015fa1
 8015fdc:	08015fa1 	.word	0x08015fa1
 8015fe0:	08015fa1 	.word	0x08015fa1
 8015fe4:	08016123 	.word	0x08016123
 8015fe8:	0801604f 	.word	0x0801604f
 8015fec:	080160dd 	.word	0x080160dd
 8015ff0:	08015fa1 	.word	0x08015fa1
 8015ff4:	08015fa1 	.word	0x08015fa1
 8015ff8:	08016145 	.word	0x08016145
 8015ffc:	08015fa1 	.word	0x08015fa1
 8016000:	0801604f 	.word	0x0801604f
 8016004:	08015fa1 	.word	0x08015fa1
 8016008:	08015fa1 	.word	0x08015fa1
 801600c:	080160e5 	.word	0x080160e5
 8016010:	6833      	ldr	r3, [r6, #0]
 8016012:	1d1a      	adds	r2, r3, #4
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	6032      	str	r2, [r6, #0]
 8016018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801601c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016020:	2301      	movs	r3, #1
 8016022:	e09c      	b.n	801615e <_printf_i+0x1e6>
 8016024:	6833      	ldr	r3, [r6, #0]
 8016026:	6820      	ldr	r0, [r4, #0]
 8016028:	1d19      	adds	r1, r3, #4
 801602a:	6031      	str	r1, [r6, #0]
 801602c:	0606      	lsls	r6, r0, #24
 801602e:	d501      	bpl.n	8016034 <_printf_i+0xbc>
 8016030:	681d      	ldr	r5, [r3, #0]
 8016032:	e003      	b.n	801603c <_printf_i+0xc4>
 8016034:	0645      	lsls	r5, r0, #25
 8016036:	d5fb      	bpl.n	8016030 <_printf_i+0xb8>
 8016038:	f9b3 5000 	ldrsh.w	r5, [r3]
 801603c:	2d00      	cmp	r5, #0
 801603e:	da03      	bge.n	8016048 <_printf_i+0xd0>
 8016040:	232d      	movs	r3, #45	@ 0x2d
 8016042:	426d      	negs	r5, r5
 8016044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016048:	4858      	ldr	r0, [pc, #352]	@ (80161ac <_printf_i+0x234>)
 801604a:	230a      	movs	r3, #10
 801604c:	e011      	b.n	8016072 <_printf_i+0xfa>
 801604e:	6821      	ldr	r1, [r4, #0]
 8016050:	6833      	ldr	r3, [r6, #0]
 8016052:	0608      	lsls	r0, r1, #24
 8016054:	f853 5b04 	ldr.w	r5, [r3], #4
 8016058:	d402      	bmi.n	8016060 <_printf_i+0xe8>
 801605a:	0649      	lsls	r1, r1, #25
 801605c:	bf48      	it	mi
 801605e:	b2ad      	uxthmi	r5, r5
 8016060:	2f6f      	cmp	r7, #111	@ 0x6f
 8016062:	4852      	ldr	r0, [pc, #328]	@ (80161ac <_printf_i+0x234>)
 8016064:	6033      	str	r3, [r6, #0]
 8016066:	bf14      	ite	ne
 8016068:	230a      	movne	r3, #10
 801606a:	2308      	moveq	r3, #8
 801606c:	2100      	movs	r1, #0
 801606e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016072:	6866      	ldr	r6, [r4, #4]
 8016074:	60a6      	str	r6, [r4, #8]
 8016076:	2e00      	cmp	r6, #0
 8016078:	db05      	blt.n	8016086 <_printf_i+0x10e>
 801607a:	6821      	ldr	r1, [r4, #0]
 801607c:	432e      	orrs	r6, r5
 801607e:	f021 0104 	bic.w	r1, r1, #4
 8016082:	6021      	str	r1, [r4, #0]
 8016084:	d04b      	beq.n	801611e <_printf_i+0x1a6>
 8016086:	4616      	mov	r6, r2
 8016088:	fbb5 f1f3 	udiv	r1, r5, r3
 801608c:	fb03 5711 	mls	r7, r3, r1, r5
 8016090:	5dc7      	ldrb	r7, [r0, r7]
 8016092:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016096:	462f      	mov	r7, r5
 8016098:	42bb      	cmp	r3, r7
 801609a:	460d      	mov	r5, r1
 801609c:	d9f4      	bls.n	8016088 <_printf_i+0x110>
 801609e:	2b08      	cmp	r3, #8
 80160a0:	d10b      	bne.n	80160ba <_printf_i+0x142>
 80160a2:	6823      	ldr	r3, [r4, #0]
 80160a4:	07df      	lsls	r7, r3, #31
 80160a6:	d508      	bpl.n	80160ba <_printf_i+0x142>
 80160a8:	6923      	ldr	r3, [r4, #16]
 80160aa:	6861      	ldr	r1, [r4, #4]
 80160ac:	4299      	cmp	r1, r3
 80160ae:	bfde      	ittt	le
 80160b0:	2330      	movle	r3, #48	@ 0x30
 80160b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80160b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80160ba:	1b92      	subs	r2, r2, r6
 80160bc:	6122      	str	r2, [r4, #16]
 80160be:	f8cd a000 	str.w	sl, [sp]
 80160c2:	464b      	mov	r3, r9
 80160c4:	aa03      	add	r2, sp, #12
 80160c6:	4621      	mov	r1, r4
 80160c8:	4640      	mov	r0, r8
 80160ca:	f7ff fee7 	bl	8015e9c <_printf_common>
 80160ce:	3001      	adds	r0, #1
 80160d0:	d14a      	bne.n	8016168 <_printf_i+0x1f0>
 80160d2:	f04f 30ff 	mov.w	r0, #4294967295
 80160d6:	b004      	add	sp, #16
 80160d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160dc:	6823      	ldr	r3, [r4, #0]
 80160de:	f043 0320 	orr.w	r3, r3, #32
 80160e2:	6023      	str	r3, [r4, #0]
 80160e4:	4832      	ldr	r0, [pc, #200]	@ (80161b0 <_printf_i+0x238>)
 80160e6:	2778      	movs	r7, #120	@ 0x78
 80160e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80160ec:	6823      	ldr	r3, [r4, #0]
 80160ee:	6831      	ldr	r1, [r6, #0]
 80160f0:	061f      	lsls	r7, r3, #24
 80160f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80160f6:	d402      	bmi.n	80160fe <_printf_i+0x186>
 80160f8:	065f      	lsls	r7, r3, #25
 80160fa:	bf48      	it	mi
 80160fc:	b2ad      	uxthmi	r5, r5
 80160fe:	6031      	str	r1, [r6, #0]
 8016100:	07d9      	lsls	r1, r3, #31
 8016102:	bf44      	itt	mi
 8016104:	f043 0320 	orrmi.w	r3, r3, #32
 8016108:	6023      	strmi	r3, [r4, #0]
 801610a:	b11d      	cbz	r5, 8016114 <_printf_i+0x19c>
 801610c:	2310      	movs	r3, #16
 801610e:	e7ad      	b.n	801606c <_printf_i+0xf4>
 8016110:	4826      	ldr	r0, [pc, #152]	@ (80161ac <_printf_i+0x234>)
 8016112:	e7e9      	b.n	80160e8 <_printf_i+0x170>
 8016114:	6823      	ldr	r3, [r4, #0]
 8016116:	f023 0320 	bic.w	r3, r3, #32
 801611a:	6023      	str	r3, [r4, #0]
 801611c:	e7f6      	b.n	801610c <_printf_i+0x194>
 801611e:	4616      	mov	r6, r2
 8016120:	e7bd      	b.n	801609e <_printf_i+0x126>
 8016122:	6833      	ldr	r3, [r6, #0]
 8016124:	6825      	ldr	r5, [r4, #0]
 8016126:	6961      	ldr	r1, [r4, #20]
 8016128:	1d18      	adds	r0, r3, #4
 801612a:	6030      	str	r0, [r6, #0]
 801612c:	062e      	lsls	r6, r5, #24
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	d501      	bpl.n	8016136 <_printf_i+0x1be>
 8016132:	6019      	str	r1, [r3, #0]
 8016134:	e002      	b.n	801613c <_printf_i+0x1c4>
 8016136:	0668      	lsls	r0, r5, #25
 8016138:	d5fb      	bpl.n	8016132 <_printf_i+0x1ba>
 801613a:	8019      	strh	r1, [r3, #0]
 801613c:	2300      	movs	r3, #0
 801613e:	6123      	str	r3, [r4, #16]
 8016140:	4616      	mov	r6, r2
 8016142:	e7bc      	b.n	80160be <_printf_i+0x146>
 8016144:	6833      	ldr	r3, [r6, #0]
 8016146:	1d1a      	adds	r2, r3, #4
 8016148:	6032      	str	r2, [r6, #0]
 801614a:	681e      	ldr	r6, [r3, #0]
 801614c:	6862      	ldr	r2, [r4, #4]
 801614e:	2100      	movs	r1, #0
 8016150:	4630      	mov	r0, r6
 8016152:	f7ea f815 	bl	8000180 <memchr>
 8016156:	b108      	cbz	r0, 801615c <_printf_i+0x1e4>
 8016158:	1b80      	subs	r0, r0, r6
 801615a:	6060      	str	r0, [r4, #4]
 801615c:	6863      	ldr	r3, [r4, #4]
 801615e:	6123      	str	r3, [r4, #16]
 8016160:	2300      	movs	r3, #0
 8016162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016166:	e7aa      	b.n	80160be <_printf_i+0x146>
 8016168:	6923      	ldr	r3, [r4, #16]
 801616a:	4632      	mov	r2, r6
 801616c:	4649      	mov	r1, r9
 801616e:	4640      	mov	r0, r8
 8016170:	47d0      	blx	sl
 8016172:	3001      	adds	r0, #1
 8016174:	d0ad      	beq.n	80160d2 <_printf_i+0x15a>
 8016176:	6823      	ldr	r3, [r4, #0]
 8016178:	079b      	lsls	r3, r3, #30
 801617a:	d413      	bmi.n	80161a4 <_printf_i+0x22c>
 801617c:	68e0      	ldr	r0, [r4, #12]
 801617e:	9b03      	ldr	r3, [sp, #12]
 8016180:	4298      	cmp	r0, r3
 8016182:	bfb8      	it	lt
 8016184:	4618      	movlt	r0, r3
 8016186:	e7a6      	b.n	80160d6 <_printf_i+0x15e>
 8016188:	2301      	movs	r3, #1
 801618a:	4632      	mov	r2, r6
 801618c:	4649      	mov	r1, r9
 801618e:	4640      	mov	r0, r8
 8016190:	47d0      	blx	sl
 8016192:	3001      	adds	r0, #1
 8016194:	d09d      	beq.n	80160d2 <_printf_i+0x15a>
 8016196:	3501      	adds	r5, #1
 8016198:	68e3      	ldr	r3, [r4, #12]
 801619a:	9903      	ldr	r1, [sp, #12]
 801619c:	1a5b      	subs	r3, r3, r1
 801619e:	42ab      	cmp	r3, r5
 80161a0:	dcf2      	bgt.n	8016188 <_printf_i+0x210>
 80161a2:	e7eb      	b.n	801617c <_printf_i+0x204>
 80161a4:	2500      	movs	r5, #0
 80161a6:	f104 0619 	add.w	r6, r4, #25
 80161aa:	e7f5      	b.n	8016198 <_printf_i+0x220>
 80161ac:	0801c376 	.word	0x0801c376
 80161b0:	0801c387 	.word	0x0801c387

080161b4 <std>:
 80161b4:	2300      	movs	r3, #0
 80161b6:	b510      	push	{r4, lr}
 80161b8:	4604      	mov	r4, r0
 80161ba:	e9c0 3300 	strd	r3, r3, [r0]
 80161be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161c2:	6083      	str	r3, [r0, #8]
 80161c4:	8181      	strh	r1, [r0, #12]
 80161c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80161c8:	81c2      	strh	r2, [r0, #14]
 80161ca:	6183      	str	r3, [r0, #24]
 80161cc:	4619      	mov	r1, r3
 80161ce:	2208      	movs	r2, #8
 80161d0:	305c      	adds	r0, #92	@ 0x5c
 80161d2:	f000 fa01 	bl	80165d8 <memset>
 80161d6:	4b0d      	ldr	r3, [pc, #52]	@ (801620c <std+0x58>)
 80161d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80161da:	4b0d      	ldr	r3, [pc, #52]	@ (8016210 <std+0x5c>)
 80161dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80161de:	4b0d      	ldr	r3, [pc, #52]	@ (8016214 <std+0x60>)
 80161e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80161e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016218 <std+0x64>)
 80161e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80161e6:	4b0d      	ldr	r3, [pc, #52]	@ (801621c <std+0x68>)
 80161e8:	6224      	str	r4, [r4, #32]
 80161ea:	429c      	cmp	r4, r3
 80161ec:	d006      	beq.n	80161fc <std+0x48>
 80161ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80161f2:	4294      	cmp	r4, r2
 80161f4:	d002      	beq.n	80161fc <std+0x48>
 80161f6:	33d0      	adds	r3, #208	@ 0xd0
 80161f8:	429c      	cmp	r4, r3
 80161fa:	d105      	bne.n	8016208 <std+0x54>
 80161fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016204:	f000 ba64 	b.w	80166d0 <__retarget_lock_init_recursive>
 8016208:	bd10      	pop	{r4, pc}
 801620a:	bf00      	nop
 801620c:	08016429 	.word	0x08016429
 8016210:	0801644b 	.word	0x0801644b
 8016214:	08016483 	.word	0x08016483
 8016218:	080164a7 	.word	0x080164a7
 801621c:	20002390 	.word	0x20002390

08016220 <stdio_exit_handler>:
 8016220:	4a02      	ldr	r2, [pc, #8]	@ (801622c <stdio_exit_handler+0xc>)
 8016222:	4903      	ldr	r1, [pc, #12]	@ (8016230 <stdio_exit_handler+0x10>)
 8016224:	4803      	ldr	r0, [pc, #12]	@ (8016234 <stdio_exit_handler+0x14>)
 8016226:	f000 b869 	b.w	80162fc <_fwalk_sglue>
 801622a:	bf00      	nop
 801622c:	20000140 	.word	0x20000140
 8016230:	08018029 	.word	0x08018029
 8016234:	20000150 	.word	0x20000150

08016238 <cleanup_stdio>:
 8016238:	6841      	ldr	r1, [r0, #4]
 801623a:	4b0c      	ldr	r3, [pc, #48]	@ (801626c <cleanup_stdio+0x34>)
 801623c:	4299      	cmp	r1, r3
 801623e:	b510      	push	{r4, lr}
 8016240:	4604      	mov	r4, r0
 8016242:	d001      	beq.n	8016248 <cleanup_stdio+0x10>
 8016244:	f001 fef0 	bl	8018028 <_fflush_r>
 8016248:	68a1      	ldr	r1, [r4, #8]
 801624a:	4b09      	ldr	r3, [pc, #36]	@ (8016270 <cleanup_stdio+0x38>)
 801624c:	4299      	cmp	r1, r3
 801624e:	d002      	beq.n	8016256 <cleanup_stdio+0x1e>
 8016250:	4620      	mov	r0, r4
 8016252:	f001 fee9 	bl	8018028 <_fflush_r>
 8016256:	68e1      	ldr	r1, [r4, #12]
 8016258:	4b06      	ldr	r3, [pc, #24]	@ (8016274 <cleanup_stdio+0x3c>)
 801625a:	4299      	cmp	r1, r3
 801625c:	d004      	beq.n	8016268 <cleanup_stdio+0x30>
 801625e:	4620      	mov	r0, r4
 8016260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016264:	f001 bee0 	b.w	8018028 <_fflush_r>
 8016268:	bd10      	pop	{r4, pc}
 801626a:	bf00      	nop
 801626c:	20002390 	.word	0x20002390
 8016270:	200023f8 	.word	0x200023f8
 8016274:	20002460 	.word	0x20002460

08016278 <global_stdio_init.part.0>:
 8016278:	b510      	push	{r4, lr}
 801627a:	4b0b      	ldr	r3, [pc, #44]	@ (80162a8 <global_stdio_init.part.0+0x30>)
 801627c:	4c0b      	ldr	r4, [pc, #44]	@ (80162ac <global_stdio_init.part.0+0x34>)
 801627e:	4a0c      	ldr	r2, [pc, #48]	@ (80162b0 <global_stdio_init.part.0+0x38>)
 8016280:	601a      	str	r2, [r3, #0]
 8016282:	4620      	mov	r0, r4
 8016284:	2200      	movs	r2, #0
 8016286:	2104      	movs	r1, #4
 8016288:	f7ff ff94 	bl	80161b4 <std>
 801628c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016290:	2201      	movs	r2, #1
 8016292:	2109      	movs	r1, #9
 8016294:	f7ff ff8e 	bl	80161b4 <std>
 8016298:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801629c:	2202      	movs	r2, #2
 801629e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162a2:	2112      	movs	r1, #18
 80162a4:	f7ff bf86 	b.w	80161b4 <std>
 80162a8:	200024c8 	.word	0x200024c8
 80162ac:	20002390 	.word	0x20002390
 80162b0:	08016221 	.word	0x08016221

080162b4 <__sfp_lock_acquire>:
 80162b4:	4801      	ldr	r0, [pc, #4]	@ (80162bc <__sfp_lock_acquire+0x8>)
 80162b6:	f000 ba0c 	b.w	80166d2 <__retarget_lock_acquire_recursive>
 80162ba:	bf00      	nop
 80162bc:	200024d1 	.word	0x200024d1

080162c0 <__sfp_lock_release>:
 80162c0:	4801      	ldr	r0, [pc, #4]	@ (80162c8 <__sfp_lock_release+0x8>)
 80162c2:	f000 ba07 	b.w	80166d4 <__retarget_lock_release_recursive>
 80162c6:	bf00      	nop
 80162c8:	200024d1 	.word	0x200024d1

080162cc <__sinit>:
 80162cc:	b510      	push	{r4, lr}
 80162ce:	4604      	mov	r4, r0
 80162d0:	f7ff fff0 	bl	80162b4 <__sfp_lock_acquire>
 80162d4:	6a23      	ldr	r3, [r4, #32]
 80162d6:	b11b      	cbz	r3, 80162e0 <__sinit+0x14>
 80162d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162dc:	f7ff bff0 	b.w	80162c0 <__sfp_lock_release>
 80162e0:	4b04      	ldr	r3, [pc, #16]	@ (80162f4 <__sinit+0x28>)
 80162e2:	6223      	str	r3, [r4, #32]
 80162e4:	4b04      	ldr	r3, [pc, #16]	@ (80162f8 <__sinit+0x2c>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d1f5      	bne.n	80162d8 <__sinit+0xc>
 80162ec:	f7ff ffc4 	bl	8016278 <global_stdio_init.part.0>
 80162f0:	e7f2      	b.n	80162d8 <__sinit+0xc>
 80162f2:	bf00      	nop
 80162f4:	08016239 	.word	0x08016239
 80162f8:	200024c8 	.word	0x200024c8

080162fc <_fwalk_sglue>:
 80162fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016300:	4607      	mov	r7, r0
 8016302:	4688      	mov	r8, r1
 8016304:	4614      	mov	r4, r2
 8016306:	2600      	movs	r6, #0
 8016308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801630c:	f1b9 0901 	subs.w	r9, r9, #1
 8016310:	d505      	bpl.n	801631e <_fwalk_sglue+0x22>
 8016312:	6824      	ldr	r4, [r4, #0]
 8016314:	2c00      	cmp	r4, #0
 8016316:	d1f7      	bne.n	8016308 <_fwalk_sglue+0xc>
 8016318:	4630      	mov	r0, r6
 801631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801631e:	89ab      	ldrh	r3, [r5, #12]
 8016320:	2b01      	cmp	r3, #1
 8016322:	d907      	bls.n	8016334 <_fwalk_sglue+0x38>
 8016324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016328:	3301      	adds	r3, #1
 801632a:	d003      	beq.n	8016334 <_fwalk_sglue+0x38>
 801632c:	4629      	mov	r1, r5
 801632e:	4638      	mov	r0, r7
 8016330:	47c0      	blx	r8
 8016332:	4306      	orrs	r6, r0
 8016334:	3568      	adds	r5, #104	@ 0x68
 8016336:	e7e9      	b.n	801630c <_fwalk_sglue+0x10>

08016338 <iprintf>:
 8016338:	b40f      	push	{r0, r1, r2, r3}
 801633a:	b507      	push	{r0, r1, r2, lr}
 801633c:	4906      	ldr	r1, [pc, #24]	@ (8016358 <iprintf+0x20>)
 801633e:	ab04      	add	r3, sp, #16
 8016340:	6808      	ldr	r0, [r1, #0]
 8016342:	f853 2b04 	ldr.w	r2, [r3], #4
 8016346:	6881      	ldr	r1, [r0, #8]
 8016348:	9301      	str	r3, [sp, #4]
 801634a:	f001 fcd1 	bl	8017cf0 <_vfiprintf_r>
 801634e:	b003      	add	sp, #12
 8016350:	f85d eb04 	ldr.w	lr, [sp], #4
 8016354:	b004      	add	sp, #16
 8016356:	4770      	bx	lr
 8016358:	2000014c 	.word	0x2000014c

0801635c <putchar>:
 801635c:	4b02      	ldr	r3, [pc, #8]	@ (8016368 <putchar+0xc>)
 801635e:	4601      	mov	r1, r0
 8016360:	6818      	ldr	r0, [r3, #0]
 8016362:	6882      	ldr	r2, [r0, #8]
 8016364:	f001 beea 	b.w	801813c <_putc_r>
 8016368:	2000014c 	.word	0x2000014c

0801636c <_puts_r>:
 801636c:	6a03      	ldr	r3, [r0, #32]
 801636e:	b570      	push	{r4, r5, r6, lr}
 8016370:	6884      	ldr	r4, [r0, #8]
 8016372:	4605      	mov	r5, r0
 8016374:	460e      	mov	r6, r1
 8016376:	b90b      	cbnz	r3, 801637c <_puts_r+0x10>
 8016378:	f7ff ffa8 	bl	80162cc <__sinit>
 801637c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801637e:	07db      	lsls	r3, r3, #31
 8016380:	d405      	bmi.n	801638e <_puts_r+0x22>
 8016382:	89a3      	ldrh	r3, [r4, #12]
 8016384:	0598      	lsls	r0, r3, #22
 8016386:	d402      	bmi.n	801638e <_puts_r+0x22>
 8016388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801638a:	f000 f9a2 	bl	80166d2 <__retarget_lock_acquire_recursive>
 801638e:	89a3      	ldrh	r3, [r4, #12]
 8016390:	0719      	lsls	r1, r3, #28
 8016392:	d502      	bpl.n	801639a <_puts_r+0x2e>
 8016394:	6923      	ldr	r3, [r4, #16]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d135      	bne.n	8016406 <_puts_r+0x9a>
 801639a:	4621      	mov	r1, r4
 801639c:	4628      	mov	r0, r5
 801639e:	f000 f8c5 	bl	801652c <__swsetup_r>
 80163a2:	b380      	cbz	r0, 8016406 <_puts_r+0x9a>
 80163a4:	f04f 35ff 	mov.w	r5, #4294967295
 80163a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80163aa:	07da      	lsls	r2, r3, #31
 80163ac:	d405      	bmi.n	80163ba <_puts_r+0x4e>
 80163ae:	89a3      	ldrh	r3, [r4, #12]
 80163b0:	059b      	lsls	r3, r3, #22
 80163b2:	d402      	bmi.n	80163ba <_puts_r+0x4e>
 80163b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80163b6:	f000 f98d 	bl	80166d4 <__retarget_lock_release_recursive>
 80163ba:	4628      	mov	r0, r5
 80163bc:	bd70      	pop	{r4, r5, r6, pc}
 80163be:	2b00      	cmp	r3, #0
 80163c0:	da04      	bge.n	80163cc <_puts_r+0x60>
 80163c2:	69a2      	ldr	r2, [r4, #24]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	dc17      	bgt.n	80163f8 <_puts_r+0x8c>
 80163c8:	290a      	cmp	r1, #10
 80163ca:	d015      	beq.n	80163f8 <_puts_r+0x8c>
 80163cc:	6823      	ldr	r3, [r4, #0]
 80163ce:	1c5a      	adds	r2, r3, #1
 80163d0:	6022      	str	r2, [r4, #0]
 80163d2:	7019      	strb	r1, [r3, #0]
 80163d4:	68a3      	ldr	r3, [r4, #8]
 80163d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80163da:	3b01      	subs	r3, #1
 80163dc:	60a3      	str	r3, [r4, #8]
 80163de:	2900      	cmp	r1, #0
 80163e0:	d1ed      	bne.n	80163be <_puts_r+0x52>
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	da11      	bge.n	801640a <_puts_r+0x9e>
 80163e6:	4622      	mov	r2, r4
 80163e8:	210a      	movs	r1, #10
 80163ea:	4628      	mov	r0, r5
 80163ec:	f000 f85f 	bl	80164ae <__swbuf_r>
 80163f0:	3001      	adds	r0, #1
 80163f2:	d0d7      	beq.n	80163a4 <_puts_r+0x38>
 80163f4:	250a      	movs	r5, #10
 80163f6:	e7d7      	b.n	80163a8 <_puts_r+0x3c>
 80163f8:	4622      	mov	r2, r4
 80163fa:	4628      	mov	r0, r5
 80163fc:	f000 f857 	bl	80164ae <__swbuf_r>
 8016400:	3001      	adds	r0, #1
 8016402:	d1e7      	bne.n	80163d4 <_puts_r+0x68>
 8016404:	e7ce      	b.n	80163a4 <_puts_r+0x38>
 8016406:	3e01      	subs	r6, #1
 8016408:	e7e4      	b.n	80163d4 <_puts_r+0x68>
 801640a:	6823      	ldr	r3, [r4, #0]
 801640c:	1c5a      	adds	r2, r3, #1
 801640e:	6022      	str	r2, [r4, #0]
 8016410:	220a      	movs	r2, #10
 8016412:	701a      	strb	r2, [r3, #0]
 8016414:	e7ee      	b.n	80163f4 <_puts_r+0x88>
	...

08016418 <puts>:
 8016418:	4b02      	ldr	r3, [pc, #8]	@ (8016424 <puts+0xc>)
 801641a:	4601      	mov	r1, r0
 801641c:	6818      	ldr	r0, [r3, #0]
 801641e:	f7ff bfa5 	b.w	801636c <_puts_r>
 8016422:	bf00      	nop
 8016424:	2000014c 	.word	0x2000014c

08016428 <__sread>:
 8016428:	b510      	push	{r4, lr}
 801642a:	460c      	mov	r4, r1
 801642c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016430:	f000 f900 	bl	8016634 <_read_r>
 8016434:	2800      	cmp	r0, #0
 8016436:	bfab      	itete	ge
 8016438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801643a:	89a3      	ldrhlt	r3, [r4, #12]
 801643c:	181b      	addge	r3, r3, r0
 801643e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016442:	bfac      	ite	ge
 8016444:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016446:	81a3      	strhlt	r3, [r4, #12]
 8016448:	bd10      	pop	{r4, pc}

0801644a <__swrite>:
 801644a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801644e:	461f      	mov	r7, r3
 8016450:	898b      	ldrh	r3, [r1, #12]
 8016452:	05db      	lsls	r3, r3, #23
 8016454:	4605      	mov	r5, r0
 8016456:	460c      	mov	r4, r1
 8016458:	4616      	mov	r6, r2
 801645a:	d505      	bpl.n	8016468 <__swrite+0x1e>
 801645c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016460:	2302      	movs	r3, #2
 8016462:	2200      	movs	r2, #0
 8016464:	f000 f8d4 	bl	8016610 <_lseek_r>
 8016468:	89a3      	ldrh	r3, [r4, #12]
 801646a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801646e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016472:	81a3      	strh	r3, [r4, #12]
 8016474:	4632      	mov	r2, r6
 8016476:	463b      	mov	r3, r7
 8016478:	4628      	mov	r0, r5
 801647a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801647e:	f000 b8eb 	b.w	8016658 <_write_r>

08016482 <__sseek>:
 8016482:	b510      	push	{r4, lr}
 8016484:	460c      	mov	r4, r1
 8016486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801648a:	f000 f8c1 	bl	8016610 <_lseek_r>
 801648e:	1c43      	adds	r3, r0, #1
 8016490:	89a3      	ldrh	r3, [r4, #12]
 8016492:	bf15      	itete	ne
 8016494:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801649a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801649e:	81a3      	strheq	r3, [r4, #12]
 80164a0:	bf18      	it	ne
 80164a2:	81a3      	strhne	r3, [r4, #12]
 80164a4:	bd10      	pop	{r4, pc}

080164a6 <__sclose>:
 80164a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164aa:	f000 b8a1 	b.w	80165f0 <_close_r>

080164ae <__swbuf_r>:
 80164ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b0:	460e      	mov	r6, r1
 80164b2:	4614      	mov	r4, r2
 80164b4:	4605      	mov	r5, r0
 80164b6:	b118      	cbz	r0, 80164c0 <__swbuf_r+0x12>
 80164b8:	6a03      	ldr	r3, [r0, #32]
 80164ba:	b90b      	cbnz	r3, 80164c0 <__swbuf_r+0x12>
 80164bc:	f7ff ff06 	bl	80162cc <__sinit>
 80164c0:	69a3      	ldr	r3, [r4, #24]
 80164c2:	60a3      	str	r3, [r4, #8]
 80164c4:	89a3      	ldrh	r3, [r4, #12]
 80164c6:	071a      	lsls	r2, r3, #28
 80164c8:	d501      	bpl.n	80164ce <__swbuf_r+0x20>
 80164ca:	6923      	ldr	r3, [r4, #16]
 80164cc:	b943      	cbnz	r3, 80164e0 <__swbuf_r+0x32>
 80164ce:	4621      	mov	r1, r4
 80164d0:	4628      	mov	r0, r5
 80164d2:	f000 f82b 	bl	801652c <__swsetup_r>
 80164d6:	b118      	cbz	r0, 80164e0 <__swbuf_r+0x32>
 80164d8:	f04f 37ff 	mov.w	r7, #4294967295
 80164dc:	4638      	mov	r0, r7
 80164de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164e0:	6823      	ldr	r3, [r4, #0]
 80164e2:	6922      	ldr	r2, [r4, #16]
 80164e4:	1a98      	subs	r0, r3, r2
 80164e6:	6963      	ldr	r3, [r4, #20]
 80164e8:	b2f6      	uxtb	r6, r6
 80164ea:	4283      	cmp	r3, r0
 80164ec:	4637      	mov	r7, r6
 80164ee:	dc05      	bgt.n	80164fc <__swbuf_r+0x4e>
 80164f0:	4621      	mov	r1, r4
 80164f2:	4628      	mov	r0, r5
 80164f4:	f001 fd98 	bl	8018028 <_fflush_r>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d1ed      	bne.n	80164d8 <__swbuf_r+0x2a>
 80164fc:	68a3      	ldr	r3, [r4, #8]
 80164fe:	3b01      	subs	r3, #1
 8016500:	60a3      	str	r3, [r4, #8]
 8016502:	6823      	ldr	r3, [r4, #0]
 8016504:	1c5a      	adds	r2, r3, #1
 8016506:	6022      	str	r2, [r4, #0]
 8016508:	701e      	strb	r6, [r3, #0]
 801650a:	6962      	ldr	r2, [r4, #20]
 801650c:	1c43      	adds	r3, r0, #1
 801650e:	429a      	cmp	r2, r3
 8016510:	d004      	beq.n	801651c <__swbuf_r+0x6e>
 8016512:	89a3      	ldrh	r3, [r4, #12]
 8016514:	07db      	lsls	r3, r3, #31
 8016516:	d5e1      	bpl.n	80164dc <__swbuf_r+0x2e>
 8016518:	2e0a      	cmp	r6, #10
 801651a:	d1df      	bne.n	80164dc <__swbuf_r+0x2e>
 801651c:	4621      	mov	r1, r4
 801651e:	4628      	mov	r0, r5
 8016520:	f001 fd82 	bl	8018028 <_fflush_r>
 8016524:	2800      	cmp	r0, #0
 8016526:	d0d9      	beq.n	80164dc <__swbuf_r+0x2e>
 8016528:	e7d6      	b.n	80164d8 <__swbuf_r+0x2a>
	...

0801652c <__swsetup_r>:
 801652c:	b538      	push	{r3, r4, r5, lr}
 801652e:	4b29      	ldr	r3, [pc, #164]	@ (80165d4 <__swsetup_r+0xa8>)
 8016530:	4605      	mov	r5, r0
 8016532:	6818      	ldr	r0, [r3, #0]
 8016534:	460c      	mov	r4, r1
 8016536:	b118      	cbz	r0, 8016540 <__swsetup_r+0x14>
 8016538:	6a03      	ldr	r3, [r0, #32]
 801653a:	b90b      	cbnz	r3, 8016540 <__swsetup_r+0x14>
 801653c:	f7ff fec6 	bl	80162cc <__sinit>
 8016540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016544:	0719      	lsls	r1, r3, #28
 8016546:	d422      	bmi.n	801658e <__swsetup_r+0x62>
 8016548:	06da      	lsls	r2, r3, #27
 801654a:	d407      	bmi.n	801655c <__swsetup_r+0x30>
 801654c:	2209      	movs	r2, #9
 801654e:	602a      	str	r2, [r5, #0]
 8016550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016554:	81a3      	strh	r3, [r4, #12]
 8016556:	f04f 30ff 	mov.w	r0, #4294967295
 801655a:	e033      	b.n	80165c4 <__swsetup_r+0x98>
 801655c:	0758      	lsls	r0, r3, #29
 801655e:	d512      	bpl.n	8016586 <__swsetup_r+0x5a>
 8016560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016562:	b141      	cbz	r1, 8016576 <__swsetup_r+0x4a>
 8016564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016568:	4299      	cmp	r1, r3
 801656a:	d002      	beq.n	8016572 <__swsetup_r+0x46>
 801656c:	4628      	mov	r0, r5
 801656e:	f000 ff1b 	bl	80173a8 <_free_r>
 8016572:	2300      	movs	r3, #0
 8016574:	6363      	str	r3, [r4, #52]	@ 0x34
 8016576:	89a3      	ldrh	r3, [r4, #12]
 8016578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801657c:	81a3      	strh	r3, [r4, #12]
 801657e:	2300      	movs	r3, #0
 8016580:	6063      	str	r3, [r4, #4]
 8016582:	6923      	ldr	r3, [r4, #16]
 8016584:	6023      	str	r3, [r4, #0]
 8016586:	89a3      	ldrh	r3, [r4, #12]
 8016588:	f043 0308 	orr.w	r3, r3, #8
 801658c:	81a3      	strh	r3, [r4, #12]
 801658e:	6923      	ldr	r3, [r4, #16]
 8016590:	b94b      	cbnz	r3, 80165a6 <__swsetup_r+0x7a>
 8016592:	89a3      	ldrh	r3, [r4, #12]
 8016594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801659c:	d003      	beq.n	80165a6 <__swsetup_r+0x7a>
 801659e:	4621      	mov	r1, r4
 80165a0:	4628      	mov	r0, r5
 80165a2:	f001 fd8f 	bl	80180c4 <__smakebuf_r>
 80165a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165aa:	f013 0201 	ands.w	r2, r3, #1
 80165ae:	d00a      	beq.n	80165c6 <__swsetup_r+0x9a>
 80165b0:	2200      	movs	r2, #0
 80165b2:	60a2      	str	r2, [r4, #8]
 80165b4:	6962      	ldr	r2, [r4, #20]
 80165b6:	4252      	negs	r2, r2
 80165b8:	61a2      	str	r2, [r4, #24]
 80165ba:	6922      	ldr	r2, [r4, #16]
 80165bc:	b942      	cbnz	r2, 80165d0 <__swsetup_r+0xa4>
 80165be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80165c2:	d1c5      	bne.n	8016550 <__swsetup_r+0x24>
 80165c4:	bd38      	pop	{r3, r4, r5, pc}
 80165c6:	0799      	lsls	r1, r3, #30
 80165c8:	bf58      	it	pl
 80165ca:	6962      	ldrpl	r2, [r4, #20]
 80165cc:	60a2      	str	r2, [r4, #8]
 80165ce:	e7f4      	b.n	80165ba <__swsetup_r+0x8e>
 80165d0:	2000      	movs	r0, #0
 80165d2:	e7f7      	b.n	80165c4 <__swsetup_r+0x98>
 80165d4:	2000014c 	.word	0x2000014c

080165d8 <memset>:
 80165d8:	4402      	add	r2, r0
 80165da:	4603      	mov	r3, r0
 80165dc:	4293      	cmp	r3, r2
 80165de:	d100      	bne.n	80165e2 <memset+0xa>
 80165e0:	4770      	bx	lr
 80165e2:	f803 1b01 	strb.w	r1, [r3], #1
 80165e6:	e7f9      	b.n	80165dc <memset+0x4>

080165e8 <_localeconv_r>:
 80165e8:	4800      	ldr	r0, [pc, #0]	@ (80165ec <_localeconv_r+0x4>)
 80165ea:	4770      	bx	lr
 80165ec:	2000028c 	.word	0x2000028c

080165f0 <_close_r>:
 80165f0:	b538      	push	{r3, r4, r5, lr}
 80165f2:	4d06      	ldr	r5, [pc, #24]	@ (801660c <_close_r+0x1c>)
 80165f4:	2300      	movs	r3, #0
 80165f6:	4604      	mov	r4, r0
 80165f8:	4608      	mov	r0, r1
 80165fa:	602b      	str	r3, [r5, #0]
 80165fc:	f7f2 fa98 	bl	8008b30 <_close>
 8016600:	1c43      	adds	r3, r0, #1
 8016602:	d102      	bne.n	801660a <_close_r+0x1a>
 8016604:	682b      	ldr	r3, [r5, #0]
 8016606:	b103      	cbz	r3, 801660a <_close_r+0x1a>
 8016608:	6023      	str	r3, [r4, #0]
 801660a:	bd38      	pop	{r3, r4, r5, pc}
 801660c:	200024cc 	.word	0x200024cc

08016610 <_lseek_r>:
 8016610:	b538      	push	{r3, r4, r5, lr}
 8016612:	4d07      	ldr	r5, [pc, #28]	@ (8016630 <_lseek_r+0x20>)
 8016614:	4604      	mov	r4, r0
 8016616:	4608      	mov	r0, r1
 8016618:	4611      	mov	r1, r2
 801661a:	2200      	movs	r2, #0
 801661c:	602a      	str	r2, [r5, #0]
 801661e:	461a      	mov	r2, r3
 8016620:	f7f2 faad 	bl	8008b7e <_lseek>
 8016624:	1c43      	adds	r3, r0, #1
 8016626:	d102      	bne.n	801662e <_lseek_r+0x1e>
 8016628:	682b      	ldr	r3, [r5, #0]
 801662a:	b103      	cbz	r3, 801662e <_lseek_r+0x1e>
 801662c:	6023      	str	r3, [r4, #0]
 801662e:	bd38      	pop	{r3, r4, r5, pc}
 8016630:	200024cc 	.word	0x200024cc

08016634 <_read_r>:
 8016634:	b538      	push	{r3, r4, r5, lr}
 8016636:	4d07      	ldr	r5, [pc, #28]	@ (8016654 <_read_r+0x20>)
 8016638:	4604      	mov	r4, r0
 801663a:	4608      	mov	r0, r1
 801663c:	4611      	mov	r1, r2
 801663e:	2200      	movs	r2, #0
 8016640:	602a      	str	r2, [r5, #0]
 8016642:	461a      	mov	r2, r3
 8016644:	f7f2 fa3b 	bl	8008abe <_read>
 8016648:	1c43      	adds	r3, r0, #1
 801664a:	d102      	bne.n	8016652 <_read_r+0x1e>
 801664c:	682b      	ldr	r3, [r5, #0]
 801664e:	b103      	cbz	r3, 8016652 <_read_r+0x1e>
 8016650:	6023      	str	r3, [r4, #0]
 8016652:	bd38      	pop	{r3, r4, r5, pc}
 8016654:	200024cc 	.word	0x200024cc

08016658 <_write_r>:
 8016658:	b538      	push	{r3, r4, r5, lr}
 801665a:	4d07      	ldr	r5, [pc, #28]	@ (8016678 <_write_r+0x20>)
 801665c:	4604      	mov	r4, r0
 801665e:	4608      	mov	r0, r1
 8016660:	4611      	mov	r1, r2
 8016662:	2200      	movs	r2, #0
 8016664:	602a      	str	r2, [r5, #0]
 8016666:	461a      	mov	r2, r3
 8016668:	f7f2 fa46 	bl	8008af8 <_write>
 801666c:	1c43      	adds	r3, r0, #1
 801666e:	d102      	bne.n	8016676 <_write_r+0x1e>
 8016670:	682b      	ldr	r3, [r5, #0]
 8016672:	b103      	cbz	r3, 8016676 <_write_r+0x1e>
 8016674:	6023      	str	r3, [r4, #0]
 8016676:	bd38      	pop	{r3, r4, r5, pc}
 8016678:	200024cc 	.word	0x200024cc

0801667c <__errno>:
 801667c:	4b01      	ldr	r3, [pc, #4]	@ (8016684 <__errno+0x8>)
 801667e:	6818      	ldr	r0, [r3, #0]
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop
 8016684:	2000014c 	.word	0x2000014c

08016688 <__libc_init_array>:
 8016688:	b570      	push	{r4, r5, r6, lr}
 801668a:	4d0d      	ldr	r5, [pc, #52]	@ (80166c0 <__libc_init_array+0x38>)
 801668c:	4c0d      	ldr	r4, [pc, #52]	@ (80166c4 <__libc_init_array+0x3c>)
 801668e:	1b64      	subs	r4, r4, r5
 8016690:	10a4      	asrs	r4, r4, #2
 8016692:	2600      	movs	r6, #0
 8016694:	42a6      	cmp	r6, r4
 8016696:	d109      	bne.n	80166ac <__libc_init_array+0x24>
 8016698:	4d0b      	ldr	r5, [pc, #44]	@ (80166c8 <__libc_init_array+0x40>)
 801669a:	4c0c      	ldr	r4, [pc, #48]	@ (80166cc <__libc_init_array+0x44>)
 801669c:	f002 fdc2 	bl	8019224 <_init>
 80166a0:	1b64      	subs	r4, r4, r5
 80166a2:	10a4      	asrs	r4, r4, #2
 80166a4:	2600      	movs	r6, #0
 80166a6:	42a6      	cmp	r6, r4
 80166a8:	d105      	bne.n	80166b6 <__libc_init_array+0x2e>
 80166aa:	bd70      	pop	{r4, r5, r6, pc}
 80166ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80166b0:	4798      	blx	r3
 80166b2:	3601      	adds	r6, #1
 80166b4:	e7ee      	b.n	8016694 <__libc_init_array+0xc>
 80166b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80166ba:	4798      	blx	r3
 80166bc:	3601      	adds	r6, #1
 80166be:	e7f2      	b.n	80166a6 <__libc_init_array+0x1e>
 80166c0:	0801c728 	.word	0x0801c728
 80166c4:	0801c728 	.word	0x0801c728
 80166c8:	0801c728 	.word	0x0801c728
 80166cc:	0801c72c 	.word	0x0801c72c

080166d0 <__retarget_lock_init_recursive>:
 80166d0:	4770      	bx	lr

080166d2 <__retarget_lock_acquire_recursive>:
 80166d2:	4770      	bx	lr

080166d4 <__retarget_lock_release_recursive>:
 80166d4:	4770      	bx	lr

080166d6 <memcpy>:
 80166d6:	440a      	add	r2, r1
 80166d8:	4291      	cmp	r1, r2
 80166da:	f100 33ff 	add.w	r3, r0, #4294967295
 80166de:	d100      	bne.n	80166e2 <memcpy+0xc>
 80166e0:	4770      	bx	lr
 80166e2:	b510      	push	{r4, lr}
 80166e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166ec:	4291      	cmp	r1, r2
 80166ee:	d1f9      	bne.n	80166e4 <memcpy+0xe>
 80166f0:	bd10      	pop	{r4, pc}

080166f2 <quorem>:
 80166f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f6:	6903      	ldr	r3, [r0, #16]
 80166f8:	690c      	ldr	r4, [r1, #16]
 80166fa:	42a3      	cmp	r3, r4
 80166fc:	4607      	mov	r7, r0
 80166fe:	db7e      	blt.n	80167fe <quorem+0x10c>
 8016700:	3c01      	subs	r4, #1
 8016702:	f101 0814 	add.w	r8, r1, #20
 8016706:	00a3      	lsls	r3, r4, #2
 8016708:	f100 0514 	add.w	r5, r0, #20
 801670c:	9300      	str	r3, [sp, #0]
 801670e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016712:	9301      	str	r3, [sp, #4]
 8016714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801671c:	3301      	adds	r3, #1
 801671e:	429a      	cmp	r2, r3
 8016720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016724:	fbb2 f6f3 	udiv	r6, r2, r3
 8016728:	d32e      	bcc.n	8016788 <quorem+0x96>
 801672a:	f04f 0a00 	mov.w	sl, #0
 801672e:	46c4      	mov	ip, r8
 8016730:	46ae      	mov	lr, r5
 8016732:	46d3      	mov	fp, sl
 8016734:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016738:	b298      	uxth	r0, r3
 801673a:	fb06 a000 	mla	r0, r6, r0, sl
 801673e:	0c02      	lsrs	r2, r0, #16
 8016740:	0c1b      	lsrs	r3, r3, #16
 8016742:	fb06 2303 	mla	r3, r6, r3, r2
 8016746:	f8de 2000 	ldr.w	r2, [lr]
 801674a:	b280      	uxth	r0, r0
 801674c:	b292      	uxth	r2, r2
 801674e:	1a12      	subs	r2, r2, r0
 8016750:	445a      	add	r2, fp
 8016752:	f8de 0000 	ldr.w	r0, [lr]
 8016756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801675a:	b29b      	uxth	r3, r3
 801675c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016760:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016764:	b292      	uxth	r2, r2
 8016766:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801676a:	45e1      	cmp	r9, ip
 801676c:	f84e 2b04 	str.w	r2, [lr], #4
 8016770:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016774:	d2de      	bcs.n	8016734 <quorem+0x42>
 8016776:	9b00      	ldr	r3, [sp, #0]
 8016778:	58eb      	ldr	r3, [r5, r3]
 801677a:	b92b      	cbnz	r3, 8016788 <quorem+0x96>
 801677c:	9b01      	ldr	r3, [sp, #4]
 801677e:	3b04      	subs	r3, #4
 8016780:	429d      	cmp	r5, r3
 8016782:	461a      	mov	r2, r3
 8016784:	d32f      	bcc.n	80167e6 <quorem+0xf4>
 8016786:	613c      	str	r4, [r7, #16]
 8016788:	4638      	mov	r0, r7
 801678a:	f001 f97f 	bl	8017a8c <__mcmp>
 801678e:	2800      	cmp	r0, #0
 8016790:	db25      	blt.n	80167de <quorem+0xec>
 8016792:	4629      	mov	r1, r5
 8016794:	2000      	movs	r0, #0
 8016796:	f858 2b04 	ldr.w	r2, [r8], #4
 801679a:	f8d1 c000 	ldr.w	ip, [r1]
 801679e:	fa1f fe82 	uxth.w	lr, r2
 80167a2:	fa1f f38c 	uxth.w	r3, ip
 80167a6:	eba3 030e 	sub.w	r3, r3, lr
 80167aa:	4403      	add	r3, r0
 80167ac:	0c12      	lsrs	r2, r2, #16
 80167ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80167b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167bc:	45c1      	cmp	r9, r8
 80167be:	f841 3b04 	str.w	r3, [r1], #4
 80167c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80167c6:	d2e6      	bcs.n	8016796 <quorem+0xa4>
 80167c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80167cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80167d0:	b922      	cbnz	r2, 80167dc <quorem+0xea>
 80167d2:	3b04      	subs	r3, #4
 80167d4:	429d      	cmp	r5, r3
 80167d6:	461a      	mov	r2, r3
 80167d8:	d30b      	bcc.n	80167f2 <quorem+0x100>
 80167da:	613c      	str	r4, [r7, #16]
 80167dc:	3601      	adds	r6, #1
 80167de:	4630      	mov	r0, r6
 80167e0:	b003      	add	sp, #12
 80167e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167e6:	6812      	ldr	r2, [r2, #0]
 80167e8:	3b04      	subs	r3, #4
 80167ea:	2a00      	cmp	r2, #0
 80167ec:	d1cb      	bne.n	8016786 <quorem+0x94>
 80167ee:	3c01      	subs	r4, #1
 80167f0:	e7c6      	b.n	8016780 <quorem+0x8e>
 80167f2:	6812      	ldr	r2, [r2, #0]
 80167f4:	3b04      	subs	r3, #4
 80167f6:	2a00      	cmp	r2, #0
 80167f8:	d1ef      	bne.n	80167da <quorem+0xe8>
 80167fa:	3c01      	subs	r4, #1
 80167fc:	e7ea      	b.n	80167d4 <quorem+0xe2>
 80167fe:	2000      	movs	r0, #0
 8016800:	e7ee      	b.n	80167e0 <quorem+0xee>
 8016802:	0000      	movs	r0, r0
 8016804:	0000      	movs	r0, r0
	...

08016808 <_dtoa_r>:
 8016808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801680c:	69c7      	ldr	r7, [r0, #28]
 801680e:	b097      	sub	sp, #92	@ 0x5c
 8016810:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016814:	ec55 4b10 	vmov	r4, r5, d0
 8016818:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801681a:	9107      	str	r1, [sp, #28]
 801681c:	4681      	mov	r9, r0
 801681e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016820:	9311      	str	r3, [sp, #68]	@ 0x44
 8016822:	b97f      	cbnz	r7, 8016844 <_dtoa_r+0x3c>
 8016824:	2010      	movs	r0, #16
 8016826:	f000 fe09 	bl	801743c <malloc>
 801682a:	4602      	mov	r2, r0
 801682c:	f8c9 001c 	str.w	r0, [r9, #28]
 8016830:	b920      	cbnz	r0, 801683c <_dtoa_r+0x34>
 8016832:	4ba9      	ldr	r3, [pc, #676]	@ (8016ad8 <_dtoa_r+0x2d0>)
 8016834:	21ef      	movs	r1, #239	@ 0xef
 8016836:	48a9      	ldr	r0, [pc, #676]	@ (8016adc <_dtoa_r+0x2d4>)
 8016838:	f001 fce6 	bl	8018208 <__assert_func>
 801683c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016840:	6007      	str	r7, [r0, #0]
 8016842:	60c7      	str	r7, [r0, #12]
 8016844:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016848:	6819      	ldr	r1, [r3, #0]
 801684a:	b159      	cbz	r1, 8016864 <_dtoa_r+0x5c>
 801684c:	685a      	ldr	r2, [r3, #4]
 801684e:	604a      	str	r2, [r1, #4]
 8016850:	2301      	movs	r3, #1
 8016852:	4093      	lsls	r3, r2
 8016854:	608b      	str	r3, [r1, #8]
 8016856:	4648      	mov	r0, r9
 8016858:	f000 fee6 	bl	8017628 <_Bfree>
 801685c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016860:	2200      	movs	r2, #0
 8016862:	601a      	str	r2, [r3, #0]
 8016864:	1e2b      	subs	r3, r5, #0
 8016866:	bfb9      	ittee	lt
 8016868:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801686c:	9305      	strlt	r3, [sp, #20]
 801686e:	2300      	movge	r3, #0
 8016870:	6033      	strge	r3, [r6, #0]
 8016872:	9f05      	ldr	r7, [sp, #20]
 8016874:	4b9a      	ldr	r3, [pc, #616]	@ (8016ae0 <_dtoa_r+0x2d8>)
 8016876:	bfbc      	itt	lt
 8016878:	2201      	movlt	r2, #1
 801687a:	6032      	strlt	r2, [r6, #0]
 801687c:	43bb      	bics	r3, r7
 801687e:	d112      	bne.n	80168a6 <_dtoa_r+0x9e>
 8016880:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016882:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016886:	6013      	str	r3, [r2, #0]
 8016888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801688c:	4323      	orrs	r3, r4
 801688e:	f000 855a 	beq.w	8017346 <_dtoa_r+0xb3e>
 8016892:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016894:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8016af4 <_dtoa_r+0x2ec>
 8016898:	2b00      	cmp	r3, #0
 801689a:	f000 855c 	beq.w	8017356 <_dtoa_r+0xb4e>
 801689e:	f10a 0303 	add.w	r3, sl, #3
 80168a2:	f000 bd56 	b.w	8017352 <_dtoa_r+0xb4a>
 80168a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80168aa:	2200      	movs	r2, #0
 80168ac:	ec51 0b17 	vmov	r0, r1, d7
 80168b0:	2300      	movs	r3, #0
 80168b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80168b6:	f7ea f8df 	bl	8000a78 <__aeabi_dcmpeq>
 80168ba:	4680      	mov	r8, r0
 80168bc:	b158      	cbz	r0, 80168d6 <_dtoa_r+0xce>
 80168be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80168c0:	2301      	movs	r3, #1
 80168c2:	6013      	str	r3, [r2, #0]
 80168c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80168c6:	b113      	cbz	r3, 80168ce <_dtoa_r+0xc6>
 80168c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80168ca:	4b86      	ldr	r3, [pc, #536]	@ (8016ae4 <_dtoa_r+0x2dc>)
 80168cc:	6013      	str	r3, [r2, #0]
 80168ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8016af8 <_dtoa_r+0x2f0>
 80168d2:	f000 bd40 	b.w	8017356 <_dtoa_r+0xb4e>
 80168d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80168da:	aa14      	add	r2, sp, #80	@ 0x50
 80168dc:	a915      	add	r1, sp, #84	@ 0x54
 80168de:	4648      	mov	r0, r9
 80168e0:	f001 f984 	bl	8017bec <__d2b>
 80168e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80168e8:	9002      	str	r0, [sp, #8]
 80168ea:	2e00      	cmp	r6, #0
 80168ec:	d078      	beq.n	80169e0 <_dtoa_r+0x1d8>
 80168ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80168f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80168f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80168fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8016900:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016904:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016908:	4619      	mov	r1, r3
 801690a:	2200      	movs	r2, #0
 801690c:	4b76      	ldr	r3, [pc, #472]	@ (8016ae8 <_dtoa_r+0x2e0>)
 801690e:	f7e9 fc93 	bl	8000238 <__aeabi_dsub>
 8016912:	a36b      	add	r3, pc, #428	@ (adr r3, 8016ac0 <_dtoa_r+0x2b8>)
 8016914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016918:	f7e9 fe46 	bl	80005a8 <__aeabi_dmul>
 801691c:	a36a      	add	r3, pc, #424	@ (adr r3, 8016ac8 <_dtoa_r+0x2c0>)
 801691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016922:	f7e9 fc8b 	bl	800023c <__adddf3>
 8016926:	4604      	mov	r4, r0
 8016928:	4630      	mov	r0, r6
 801692a:	460d      	mov	r5, r1
 801692c:	f7e9 fdd2 	bl	80004d4 <__aeabi_i2d>
 8016930:	a367      	add	r3, pc, #412	@ (adr r3, 8016ad0 <_dtoa_r+0x2c8>)
 8016932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016936:	f7e9 fe37 	bl	80005a8 <__aeabi_dmul>
 801693a:	4602      	mov	r2, r0
 801693c:	460b      	mov	r3, r1
 801693e:	4620      	mov	r0, r4
 8016940:	4629      	mov	r1, r5
 8016942:	f7e9 fc7b 	bl	800023c <__adddf3>
 8016946:	4604      	mov	r4, r0
 8016948:	460d      	mov	r5, r1
 801694a:	f7ea f8dd 	bl	8000b08 <__aeabi_d2iz>
 801694e:	2200      	movs	r2, #0
 8016950:	4607      	mov	r7, r0
 8016952:	2300      	movs	r3, #0
 8016954:	4620      	mov	r0, r4
 8016956:	4629      	mov	r1, r5
 8016958:	f7ea f898 	bl	8000a8c <__aeabi_dcmplt>
 801695c:	b140      	cbz	r0, 8016970 <_dtoa_r+0x168>
 801695e:	4638      	mov	r0, r7
 8016960:	f7e9 fdb8 	bl	80004d4 <__aeabi_i2d>
 8016964:	4622      	mov	r2, r4
 8016966:	462b      	mov	r3, r5
 8016968:	f7ea f886 	bl	8000a78 <__aeabi_dcmpeq>
 801696c:	b900      	cbnz	r0, 8016970 <_dtoa_r+0x168>
 801696e:	3f01      	subs	r7, #1
 8016970:	2f16      	cmp	r7, #22
 8016972:	d852      	bhi.n	8016a1a <_dtoa_r+0x212>
 8016974:	4b5d      	ldr	r3, [pc, #372]	@ (8016aec <_dtoa_r+0x2e4>)
 8016976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8016982:	f7ea f883 	bl	8000a8c <__aeabi_dcmplt>
 8016986:	2800      	cmp	r0, #0
 8016988:	d049      	beq.n	8016a1e <_dtoa_r+0x216>
 801698a:	3f01      	subs	r7, #1
 801698c:	2300      	movs	r3, #0
 801698e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016990:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016992:	1b9b      	subs	r3, r3, r6
 8016994:	1e5a      	subs	r2, r3, #1
 8016996:	bf45      	ittet	mi
 8016998:	f1c3 0301 	rsbmi	r3, r3, #1
 801699c:	9300      	strmi	r3, [sp, #0]
 801699e:	2300      	movpl	r3, #0
 80169a0:	2300      	movmi	r3, #0
 80169a2:	9206      	str	r2, [sp, #24]
 80169a4:	bf54      	ite	pl
 80169a6:	9300      	strpl	r3, [sp, #0]
 80169a8:	9306      	strmi	r3, [sp, #24]
 80169aa:	2f00      	cmp	r7, #0
 80169ac:	db39      	blt.n	8016a22 <_dtoa_r+0x21a>
 80169ae:	9b06      	ldr	r3, [sp, #24]
 80169b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80169b2:	443b      	add	r3, r7
 80169b4:	9306      	str	r3, [sp, #24]
 80169b6:	2300      	movs	r3, #0
 80169b8:	9308      	str	r3, [sp, #32]
 80169ba:	9b07      	ldr	r3, [sp, #28]
 80169bc:	2b09      	cmp	r3, #9
 80169be:	d863      	bhi.n	8016a88 <_dtoa_r+0x280>
 80169c0:	2b05      	cmp	r3, #5
 80169c2:	bfc4      	itt	gt
 80169c4:	3b04      	subgt	r3, #4
 80169c6:	9307      	strgt	r3, [sp, #28]
 80169c8:	9b07      	ldr	r3, [sp, #28]
 80169ca:	f1a3 0302 	sub.w	r3, r3, #2
 80169ce:	bfcc      	ite	gt
 80169d0:	2400      	movgt	r4, #0
 80169d2:	2401      	movle	r4, #1
 80169d4:	2b03      	cmp	r3, #3
 80169d6:	d863      	bhi.n	8016aa0 <_dtoa_r+0x298>
 80169d8:	e8df f003 	tbb	[pc, r3]
 80169dc:	2b375452 	.word	0x2b375452
 80169e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80169e4:	441e      	add	r6, r3
 80169e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80169ea:	2b20      	cmp	r3, #32
 80169ec:	bfc1      	itttt	gt
 80169ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80169f2:	409f      	lslgt	r7, r3
 80169f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80169f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80169fc:	bfd6      	itet	le
 80169fe:	f1c3 0320 	rsble	r3, r3, #32
 8016a02:	ea47 0003 	orrgt.w	r0, r7, r3
 8016a06:	fa04 f003 	lslle.w	r0, r4, r3
 8016a0a:	f7e9 fd53 	bl	80004b4 <__aeabi_ui2d>
 8016a0e:	2201      	movs	r2, #1
 8016a10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8016a14:	3e01      	subs	r6, #1
 8016a16:	9212      	str	r2, [sp, #72]	@ 0x48
 8016a18:	e776      	b.n	8016908 <_dtoa_r+0x100>
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	e7b7      	b.n	801698e <_dtoa_r+0x186>
 8016a1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8016a20:	e7b6      	b.n	8016990 <_dtoa_r+0x188>
 8016a22:	9b00      	ldr	r3, [sp, #0]
 8016a24:	1bdb      	subs	r3, r3, r7
 8016a26:	9300      	str	r3, [sp, #0]
 8016a28:	427b      	negs	r3, r7
 8016a2a:	9308      	str	r3, [sp, #32]
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016a30:	e7c3      	b.n	80169ba <_dtoa_r+0x1b2>
 8016a32:	2301      	movs	r3, #1
 8016a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a38:	eb07 0b03 	add.w	fp, r7, r3
 8016a3c:	f10b 0301 	add.w	r3, fp, #1
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	9303      	str	r3, [sp, #12]
 8016a44:	bfb8      	it	lt
 8016a46:	2301      	movlt	r3, #1
 8016a48:	e006      	b.n	8016a58 <_dtoa_r+0x250>
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	dd28      	ble.n	8016aa6 <_dtoa_r+0x29e>
 8016a54:	469b      	mov	fp, r3
 8016a56:	9303      	str	r3, [sp, #12]
 8016a58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	2204      	movs	r2, #4
 8016a60:	f102 0514 	add.w	r5, r2, #20
 8016a64:	429d      	cmp	r5, r3
 8016a66:	d926      	bls.n	8016ab6 <_dtoa_r+0x2ae>
 8016a68:	6041      	str	r1, [r0, #4]
 8016a6a:	4648      	mov	r0, r9
 8016a6c:	f000 fd9c 	bl	80175a8 <_Balloc>
 8016a70:	4682      	mov	sl, r0
 8016a72:	2800      	cmp	r0, #0
 8016a74:	d142      	bne.n	8016afc <_dtoa_r+0x2f4>
 8016a76:	4b1e      	ldr	r3, [pc, #120]	@ (8016af0 <_dtoa_r+0x2e8>)
 8016a78:	4602      	mov	r2, r0
 8016a7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8016a7e:	e6da      	b.n	8016836 <_dtoa_r+0x2e>
 8016a80:	2300      	movs	r3, #0
 8016a82:	e7e3      	b.n	8016a4c <_dtoa_r+0x244>
 8016a84:	2300      	movs	r3, #0
 8016a86:	e7d5      	b.n	8016a34 <_dtoa_r+0x22c>
 8016a88:	2401      	movs	r4, #1
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	9307      	str	r3, [sp, #28]
 8016a8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8016a90:	f04f 3bff 	mov.w	fp, #4294967295
 8016a94:	2200      	movs	r2, #0
 8016a96:	f8cd b00c 	str.w	fp, [sp, #12]
 8016a9a:	2312      	movs	r3, #18
 8016a9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8016a9e:	e7db      	b.n	8016a58 <_dtoa_r+0x250>
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016aa4:	e7f4      	b.n	8016a90 <_dtoa_r+0x288>
 8016aa6:	f04f 0b01 	mov.w	fp, #1
 8016aaa:	f8cd b00c 	str.w	fp, [sp, #12]
 8016aae:	465b      	mov	r3, fp
 8016ab0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8016ab4:	e7d0      	b.n	8016a58 <_dtoa_r+0x250>
 8016ab6:	3101      	adds	r1, #1
 8016ab8:	0052      	lsls	r2, r2, #1
 8016aba:	e7d1      	b.n	8016a60 <_dtoa_r+0x258>
 8016abc:	f3af 8000 	nop.w
 8016ac0:	636f4361 	.word	0x636f4361
 8016ac4:	3fd287a7 	.word	0x3fd287a7
 8016ac8:	8b60c8b3 	.word	0x8b60c8b3
 8016acc:	3fc68a28 	.word	0x3fc68a28
 8016ad0:	509f79fb 	.word	0x509f79fb
 8016ad4:	3fd34413 	.word	0x3fd34413
 8016ad8:	0801c3a5 	.word	0x0801c3a5
 8016adc:	0801c3bc 	.word	0x0801c3bc
 8016ae0:	7ff00000 	.word	0x7ff00000
 8016ae4:	0801c375 	.word	0x0801c375
 8016ae8:	3ff80000 	.word	0x3ff80000
 8016aec:	0801c510 	.word	0x0801c510
 8016af0:	0801c414 	.word	0x0801c414
 8016af4:	0801c3a1 	.word	0x0801c3a1
 8016af8:	0801c374 	.word	0x0801c374
 8016afc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016b00:	6018      	str	r0, [r3, #0]
 8016b02:	9b03      	ldr	r3, [sp, #12]
 8016b04:	2b0e      	cmp	r3, #14
 8016b06:	f200 80a1 	bhi.w	8016c4c <_dtoa_r+0x444>
 8016b0a:	2c00      	cmp	r4, #0
 8016b0c:	f000 809e 	beq.w	8016c4c <_dtoa_r+0x444>
 8016b10:	2f00      	cmp	r7, #0
 8016b12:	dd33      	ble.n	8016b7c <_dtoa_r+0x374>
 8016b14:	4b9c      	ldr	r3, [pc, #624]	@ (8016d88 <_dtoa_r+0x580>)
 8016b16:	f007 020f 	and.w	r2, r7, #15
 8016b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b1e:	ed93 7b00 	vldr	d7, [r3]
 8016b22:	05f8      	lsls	r0, r7, #23
 8016b24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8016b28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8016b2c:	d516      	bpl.n	8016b5c <_dtoa_r+0x354>
 8016b2e:	4b97      	ldr	r3, [pc, #604]	@ (8016d8c <_dtoa_r+0x584>)
 8016b30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8016b34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016b38:	f7e9 fe60 	bl	80007fc <__aeabi_ddiv>
 8016b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b40:	f004 040f 	and.w	r4, r4, #15
 8016b44:	2603      	movs	r6, #3
 8016b46:	4d91      	ldr	r5, [pc, #580]	@ (8016d8c <_dtoa_r+0x584>)
 8016b48:	b954      	cbnz	r4, 8016b60 <_dtoa_r+0x358>
 8016b4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016b52:	f7e9 fe53 	bl	80007fc <__aeabi_ddiv>
 8016b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b5a:	e028      	b.n	8016bae <_dtoa_r+0x3a6>
 8016b5c:	2602      	movs	r6, #2
 8016b5e:	e7f2      	b.n	8016b46 <_dtoa_r+0x33e>
 8016b60:	07e1      	lsls	r1, r4, #31
 8016b62:	d508      	bpl.n	8016b76 <_dtoa_r+0x36e>
 8016b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016b68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b6c:	f7e9 fd1c 	bl	80005a8 <__aeabi_dmul>
 8016b70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8016b74:	3601      	adds	r6, #1
 8016b76:	1064      	asrs	r4, r4, #1
 8016b78:	3508      	adds	r5, #8
 8016b7a:	e7e5      	b.n	8016b48 <_dtoa_r+0x340>
 8016b7c:	f000 80af 	beq.w	8016cde <_dtoa_r+0x4d6>
 8016b80:	427c      	negs	r4, r7
 8016b82:	4b81      	ldr	r3, [pc, #516]	@ (8016d88 <_dtoa_r+0x580>)
 8016b84:	4d81      	ldr	r5, [pc, #516]	@ (8016d8c <_dtoa_r+0x584>)
 8016b86:	f004 020f 	and.w	r2, r4, #15
 8016b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8016b96:	f7e9 fd07 	bl	80005a8 <__aeabi_dmul>
 8016b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b9e:	1124      	asrs	r4, r4, #4
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	2602      	movs	r6, #2
 8016ba4:	2c00      	cmp	r4, #0
 8016ba6:	f040 808f 	bne.w	8016cc8 <_dtoa_r+0x4c0>
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d1d3      	bne.n	8016b56 <_dtoa_r+0x34e>
 8016bae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016bb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	f000 8094 	beq.w	8016ce2 <_dtoa_r+0x4da>
 8016bba:	4b75      	ldr	r3, [pc, #468]	@ (8016d90 <_dtoa_r+0x588>)
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	4629      	mov	r1, r5
 8016bc2:	f7e9 ff63 	bl	8000a8c <__aeabi_dcmplt>
 8016bc6:	2800      	cmp	r0, #0
 8016bc8:	f000 808b 	beq.w	8016ce2 <_dtoa_r+0x4da>
 8016bcc:	9b03      	ldr	r3, [sp, #12]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 8087 	beq.w	8016ce2 <_dtoa_r+0x4da>
 8016bd4:	f1bb 0f00 	cmp.w	fp, #0
 8016bd8:	dd34      	ble.n	8016c44 <_dtoa_r+0x43c>
 8016bda:	4620      	mov	r0, r4
 8016bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8016d94 <_dtoa_r+0x58c>)
 8016bde:	2200      	movs	r2, #0
 8016be0:	4629      	mov	r1, r5
 8016be2:	f7e9 fce1 	bl	80005a8 <__aeabi_dmul>
 8016be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016bea:	f107 38ff 	add.w	r8, r7, #4294967295
 8016bee:	3601      	adds	r6, #1
 8016bf0:	465c      	mov	r4, fp
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f7e9 fc6e 	bl	80004d4 <__aeabi_i2d>
 8016bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016bfc:	f7e9 fcd4 	bl	80005a8 <__aeabi_dmul>
 8016c00:	4b65      	ldr	r3, [pc, #404]	@ (8016d98 <_dtoa_r+0x590>)
 8016c02:	2200      	movs	r2, #0
 8016c04:	f7e9 fb1a 	bl	800023c <__adddf3>
 8016c08:	4605      	mov	r5, r0
 8016c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8016c0e:	2c00      	cmp	r4, #0
 8016c10:	d16a      	bne.n	8016ce8 <_dtoa_r+0x4e0>
 8016c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016c16:	4b61      	ldr	r3, [pc, #388]	@ (8016d9c <_dtoa_r+0x594>)
 8016c18:	2200      	movs	r2, #0
 8016c1a:	f7e9 fb0d 	bl	8000238 <__aeabi_dsub>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	460b      	mov	r3, r1
 8016c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016c26:	462a      	mov	r2, r5
 8016c28:	4633      	mov	r3, r6
 8016c2a:	f7e9 ff4d 	bl	8000ac8 <__aeabi_dcmpgt>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	f040 8298 	bne.w	8017164 <_dtoa_r+0x95c>
 8016c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016c38:	462a      	mov	r2, r5
 8016c3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8016c3e:	f7e9 ff25 	bl	8000a8c <__aeabi_dcmplt>
 8016c42:	bb38      	cbnz	r0, 8016c94 <_dtoa_r+0x48c>
 8016c44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8016c48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8016c4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	f2c0 8157 	blt.w	8016f02 <_dtoa_r+0x6fa>
 8016c54:	2f0e      	cmp	r7, #14
 8016c56:	f300 8154 	bgt.w	8016f02 <_dtoa_r+0x6fa>
 8016c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8016d88 <_dtoa_r+0x580>)
 8016c5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016c60:	ed93 7b00 	vldr	d7, [r3]
 8016c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	ed8d 7b00 	vstr	d7, [sp]
 8016c6c:	f280 80e5 	bge.w	8016e3a <_dtoa_r+0x632>
 8016c70:	9b03      	ldr	r3, [sp, #12]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f300 80e1 	bgt.w	8016e3a <_dtoa_r+0x632>
 8016c78:	d10c      	bne.n	8016c94 <_dtoa_r+0x48c>
 8016c7a:	4b48      	ldr	r3, [pc, #288]	@ (8016d9c <_dtoa_r+0x594>)
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	ec51 0b17 	vmov	r0, r1, d7
 8016c82:	f7e9 fc91 	bl	80005a8 <__aeabi_dmul>
 8016c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c8a:	f7e9 ff13 	bl	8000ab4 <__aeabi_dcmpge>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	f000 8266 	beq.w	8017160 <_dtoa_r+0x958>
 8016c94:	2400      	movs	r4, #0
 8016c96:	4625      	mov	r5, r4
 8016c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c9a:	4656      	mov	r6, sl
 8016c9c:	ea6f 0803 	mvn.w	r8, r3
 8016ca0:	2700      	movs	r7, #0
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	4648      	mov	r0, r9
 8016ca6:	f000 fcbf 	bl	8017628 <_Bfree>
 8016caa:	2d00      	cmp	r5, #0
 8016cac:	f000 80bd 	beq.w	8016e2a <_dtoa_r+0x622>
 8016cb0:	b12f      	cbz	r7, 8016cbe <_dtoa_r+0x4b6>
 8016cb2:	42af      	cmp	r7, r5
 8016cb4:	d003      	beq.n	8016cbe <_dtoa_r+0x4b6>
 8016cb6:	4639      	mov	r1, r7
 8016cb8:	4648      	mov	r0, r9
 8016cba:	f000 fcb5 	bl	8017628 <_Bfree>
 8016cbe:	4629      	mov	r1, r5
 8016cc0:	4648      	mov	r0, r9
 8016cc2:	f000 fcb1 	bl	8017628 <_Bfree>
 8016cc6:	e0b0      	b.n	8016e2a <_dtoa_r+0x622>
 8016cc8:	07e2      	lsls	r2, r4, #31
 8016cca:	d505      	bpl.n	8016cd8 <_dtoa_r+0x4d0>
 8016ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016cd0:	f7e9 fc6a 	bl	80005a8 <__aeabi_dmul>
 8016cd4:	3601      	adds	r6, #1
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	1064      	asrs	r4, r4, #1
 8016cda:	3508      	adds	r5, #8
 8016cdc:	e762      	b.n	8016ba4 <_dtoa_r+0x39c>
 8016cde:	2602      	movs	r6, #2
 8016ce0:	e765      	b.n	8016bae <_dtoa_r+0x3a6>
 8016ce2:	9c03      	ldr	r4, [sp, #12]
 8016ce4:	46b8      	mov	r8, r7
 8016ce6:	e784      	b.n	8016bf2 <_dtoa_r+0x3ea>
 8016ce8:	4b27      	ldr	r3, [pc, #156]	@ (8016d88 <_dtoa_r+0x580>)
 8016cea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016cf4:	4454      	add	r4, sl
 8016cf6:	2900      	cmp	r1, #0
 8016cf8:	d054      	beq.n	8016da4 <_dtoa_r+0x59c>
 8016cfa:	4929      	ldr	r1, [pc, #164]	@ (8016da0 <_dtoa_r+0x598>)
 8016cfc:	2000      	movs	r0, #0
 8016cfe:	f7e9 fd7d 	bl	80007fc <__aeabi_ddiv>
 8016d02:	4633      	mov	r3, r6
 8016d04:	462a      	mov	r2, r5
 8016d06:	f7e9 fa97 	bl	8000238 <__aeabi_dsub>
 8016d0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8016d0e:	4656      	mov	r6, sl
 8016d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016d14:	f7e9 fef8 	bl	8000b08 <__aeabi_d2iz>
 8016d18:	4605      	mov	r5, r0
 8016d1a:	f7e9 fbdb 	bl	80004d4 <__aeabi_i2d>
 8016d1e:	4602      	mov	r2, r0
 8016d20:	460b      	mov	r3, r1
 8016d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016d26:	f7e9 fa87 	bl	8000238 <__aeabi_dsub>
 8016d2a:	3530      	adds	r5, #48	@ 0x30
 8016d2c:	4602      	mov	r2, r0
 8016d2e:	460b      	mov	r3, r1
 8016d30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016d34:	f806 5b01 	strb.w	r5, [r6], #1
 8016d38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016d3c:	f7e9 fea6 	bl	8000a8c <__aeabi_dcmplt>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d172      	bne.n	8016e2a <_dtoa_r+0x622>
 8016d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d48:	4911      	ldr	r1, [pc, #68]	@ (8016d90 <_dtoa_r+0x588>)
 8016d4a:	2000      	movs	r0, #0
 8016d4c:	f7e9 fa74 	bl	8000238 <__aeabi_dsub>
 8016d50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016d54:	f7e9 fe9a 	bl	8000a8c <__aeabi_dcmplt>
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	f040 80b4 	bne.w	8016ec6 <_dtoa_r+0x6be>
 8016d5e:	42a6      	cmp	r6, r4
 8016d60:	f43f af70 	beq.w	8016c44 <_dtoa_r+0x43c>
 8016d64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016d68:	4b0a      	ldr	r3, [pc, #40]	@ (8016d94 <_dtoa_r+0x58c>)
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	f7e9 fc1c 	bl	80005a8 <__aeabi_dmul>
 8016d70:	4b08      	ldr	r3, [pc, #32]	@ (8016d94 <_dtoa_r+0x58c>)
 8016d72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8016d76:	2200      	movs	r2, #0
 8016d78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016d7c:	f7e9 fc14 	bl	80005a8 <__aeabi_dmul>
 8016d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016d84:	e7c4      	b.n	8016d10 <_dtoa_r+0x508>
 8016d86:	bf00      	nop
 8016d88:	0801c510 	.word	0x0801c510
 8016d8c:	0801c4e8 	.word	0x0801c4e8
 8016d90:	3ff00000 	.word	0x3ff00000
 8016d94:	40240000 	.word	0x40240000
 8016d98:	401c0000 	.word	0x401c0000
 8016d9c:	40140000 	.word	0x40140000
 8016da0:	3fe00000 	.word	0x3fe00000
 8016da4:	4631      	mov	r1, r6
 8016da6:	4628      	mov	r0, r5
 8016da8:	f7e9 fbfe 	bl	80005a8 <__aeabi_dmul>
 8016dac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8016db0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8016db2:	4656      	mov	r6, sl
 8016db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016db8:	f7e9 fea6 	bl	8000b08 <__aeabi_d2iz>
 8016dbc:	4605      	mov	r5, r0
 8016dbe:	f7e9 fb89 	bl	80004d4 <__aeabi_i2d>
 8016dc2:	4602      	mov	r2, r0
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016dca:	f7e9 fa35 	bl	8000238 <__aeabi_dsub>
 8016dce:	3530      	adds	r5, #48	@ 0x30
 8016dd0:	f806 5b01 	strb.w	r5, [r6], #1
 8016dd4:	4602      	mov	r2, r0
 8016dd6:	460b      	mov	r3, r1
 8016dd8:	42a6      	cmp	r6, r4
 8016dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016dde:	f04f 0200 	mov.w	r2, #0
 8016de2:	d124      	bne.n	8016e2e <_dtoa_r+0x626>
 8016de4:	4baf      	ldr	r3, [pc, #700]	@ (80170a4 <_dtoa_r+0x89c>)
 8016de6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8016dea:	f7e9 fa27 	bl	800023c <__adddf3>
 8016dee:	4602      	mov	r2, r0
 8016df0:	460b      	mov	r3, r1
 8016df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016df6:	f7e9 fe67 	bl	8000ac8 <__aeabi_dcmpgt>
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	d163      	bne.n	8016ec6 <_dtoa_r+0x6be>
 8016dfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8016e02:	49a8      	ldr	r1, [pc, #672]	@ (80170a4 <_dtoa_r+0x89c>)
 8016e04:	2000      	movs	r0, #0
 8016e06:	f7e9 fa17 	bl	8000238 <__aeabi_dsub>
 8016e0a:	4602      	mov	r2, r0
 8016e0c:	460b      	mov	r3, r1
 8016e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e12:	f7e9 fe3b 	bl	8000a8c <__aeabi_dcmplt>
 8016e16:	2800      	cmp	r0, #0
 8016e18:	f43f af14 	beq.w	8016c44 <_dtoa_r+0x43c>
 8016e1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8016e1e:	1e73      	subs	r3, r6, #1
 8016e20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016e22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016e26:	2b30      	cmp	r3, #48	@ 0x30
 8016e28:	d0f8      	beq.n	8016e1c <_dtoa_r+0x614>
 8016e2a:	4647      	mov	r7, r8
 8016e2c:	e03b      	b.n	8016ea6 <_dtoa_r+0x69e>
 8016e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80170a8 <_dtoa_r+0x8a0>)
 8016e30:	f7e9 fbba 	bl	80005a8 <__aeabi_dmul>
 8016e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016e38:	e7bc      	b.n	8016db4 <_dtoa_r+0x5ac>
 8016e3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8016e3e:	4656      	mov	r6, sl
 8016e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e44:	4620      	mov	r0, r4
 8016e46:	4629      	mov	r1, r5
 8016e48:	f7e9 fcd8 	bl	80007fc <__aeabi_ddiv>
 8016e4c:	f7e9 fe5c 	bl	8000b08 <__aeabi_d2iz>
 8016e50:	4680      	mov	r8, r0
 8016e52:	f7e9 fb3f 	bl	80004d4 <__aeabi_i2d>
 8016e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e5a:	f7e9 fba5 	bl	80005a8 <__aeabi_dmul>
 8016e5e:	4602      	mov	r2, r0
 8016e60:	460b      	mov	r3, r1
 8016e62:	4620      	mov	r0, r4
 8016e64:	4629      	mov	r1, r5
 8016e66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8016e6a:	f7e9 f9e5 	bl	8000238 <__aeabi_dsub>
 8016e6e:	f806 4b01 	strb.w	r4, [r6], #1
 8016e72:	9d03      	ldr	r5, [sp, #12]
 8016e74:	eba6 040a 	sub.w	r4, r6, sl
 8016e78:	42a5      	cmp	r5, r4
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	d133      	bne.n	8016ee8 <_dtoa_r+0x6e0>
 8016e80:	f7e9 f9dc 	bl	800023c <__adddf3>
 8016e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e88:	4604      	mov	r4, r0
 8016e8a:	460d      	mov	r5, r1
 8016e8c:	f7e9 fe1c 	bl	8000ac8 <__aeabi_dcmpgt>
 8016e90:	b9c0      	cbnz	r0, 8016ec4 <_dtoa_r+0x6bc>
 8016e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e96:	4620      	mov	r0, r4
 8016e98:	4629      	mov	r1, r5
 8016e9a:	f7e9 fded 	bl	8000a78 <__aeabi_dcmpeq>
 8016e9e:	b110      	cbz	r0, 8016ea6 <_dtoa_r+0x69e>
 8016ea0:	f018 0f01 	tst.w	r8, #1
 8016ea4:	d10e      	bne.n	8016ec4 <_dtoa_r+0x6bc>
 8016ea6:	9902      	ldr	r1, [sp, #8]
 8016ea8:	4648      	mov	r0, r9
 8016eaa:	f000 fbbd 	bl	8017628 <_Bfree>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	7033      	strb	r3, [r6, #0]
 8016eb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016eb4:	3701      	adds	r7, #1
 8016eb6:	601f      	str	r7, [r3, #0]
 8016eb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	f000 824b 	beq.w	8017356 <_dtoa_r+0xb4e>
 8016ec0:	601e      	str	r6, [r3, #0]
 8016ec2:	e248      	b.n	8017356 <_dtoa_r+0xb4e>
 8016ec4:	46b8      	mov	r8, r7
 8016ec6:	4633      	mov	r3, r6
 8016ec8:	461e      	mov	r6, r3
 8016eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ece:	2a39      	cmp	r2, #57	@ 0x39
 8016ed0:	d106      	bne.n	8016ee0 <_dtoa_r+0x6d8>
 8016ed2:	459a      	cmp	sl, r3
 8016ed4:	d1f8      	bne.n	8016ec8 <_dtoa_r+0x6c0>
 8016ed6:	2230      	movs	r2, #48	@ 0x30
 8016ed8:	f108 0801 	add.w	r8, r8, #1
 8016edc:	f88a 2000 	strb.w	r2, [sl]
 8016ee0:	781a      	ldrb	r2, [r3, #0]
 8016ee2:	3201      	adds	r2, #1
 8016ee4:	701a      	strb	r2, [r3, #0]
 8016ee6:	e7a0      	b.n	8016e2a <_dtoa_r+0x622>
 8016ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80170a8 <_dtoa_r+0x8a0>)
 8016eea:	2200      	movs	r2, #0
 8016eec:	f7e9 fb5c 	bl	80005a8 <__aeabi_dmul>
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	460d      	mov	r5, r1
 8016ef8:	f7e9 fdbe 	bl	8000a78 <__aeabi_dcmpeq>
 8016efc:	2800      	cmp	r0, #0
 8016efe:	d09f      	beq.n	8016e40 <_dtoa_r+0x638>
 8016f00:	e7d1      	b.n	8016ea6 <_dtoa_r+0x69e>
 8016f02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f04:	2a00      	cmp	r2, #0
 8016f06:	f000 80ea 	beq.w	80170de <_dtoa_r+0x8d6>
 8016f0a:	9a07      	ldr	r2, [sp, #28]
 8016f0c:	2a01      	cmp	r2, #1
 8016f0e:	f300 80cd 	bgt.w	80170ac <_dtoa_r+0x8a4>
 8016f12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016f14:	2a00      	cmp	r2, #0
 8016f16:	f000 80c1 	beq.w	801709c <_dtoa_r+0x894>
 8016f1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8016f1e:	9c08      	ldr	r4, [sp, #32]
 8016f20:	9e00      	ldr	r6, [sp, #0]
 8016f22:	9a00      	ldr	r2, [sp, #0]
 8016f24:	441a      	add	r2, r3
 8016f26:	9200      	str	r2, [sp, #0]
 8016f28:	9a06      	ldr	r2, [sp, #24]
 8016f2a:	2101      	movs	r1, #1
 8016f2c:	441a      	add	r2, r3
 8016f2e:	4648      	mov	r0, r9
 8016f30:	9206      	str	r2, [sp, #24]
 8016f32:	f000 fc2d 	bl	8017790 <__i2b>
 8016f36:	4605      	mov	r5, r0
 8016f38:	b166      	cbz	r6, 8016f54 <_dtoa_r+0x74c>
 8016f3a:	9b06      	ldr	r3, [sp, #24]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	dd09      	ble.n	8016f54 <_dtoa_r+0x74c>
 8016f40:	42b3      	cmp	r3, r6
 8016f42:	9a00      	ldr	r2, [sp, #0]
 8016f44:	bfa8      	it	ge
 8016f46:	4633      	movge	r3, r6
 8016f48:	1ad2      	subs	r2, r2, r3
 8016f4a:	9200      	str	r2, [sp, #0]
 8016f4c:	9a06      	ldr	r2, [sp, #24]
 8016f4e:	1af6      	subs	r6, r6, r3
 8016f50:	1ad3      	subs	r3, r2, r3
 8016f52:	9306      	str	r3, [sp, #24]
 8016f54:	9b08      	ldr	r3, [sp, #32]
 8016f56:	b30b      	cbz	r3, 8016f9c <_dtoa_r+0x794>
 8016f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	f000 80c6 	beq.w	80170ec <_dtoa_r+0x8e4>
 8016f60:	2c00      	cmp	r4, #0
 8016f62:	f000 80c0 	beq.w	80170e6 <_dtoa_r+0x8de>
 8016f66:	4629      	mov	r1, r5
 8016f68:	4622      	mov	r2, r4
 8016f6a:	4648      	mov	r0, r9
 8016f6c:	f000 fcc8 	bl	8017900 <__pow5mult>
 8016f70:	9a02      	ldr	r2, [sp, #8]
 8016f72:	4601      	mov	r1, r0
 8016f74:	4605      	mov	r5, r0
 8016f76:	4648      	mov	r0, r9
 8016f78:	f000 fc20 	bl	80177bc <__multiply>
 8016f7c:	9902      	ldr	r1, [sp, #8]
 8016f7e:	4680      	mov	r8, r0
 8016f80:	4648      	mov	r0, r9
 8016f82:	f000 fb51 	bl	8017628 <_Bfree>
 8016f86:	9b08      	ldr	r3, [sp, #32]
 8016f88:	1b1b      	subs	r3, r3, r4
 8016f8a:	9308      	str	r3, [sp, #32]
 8016f8c:	f000 80b1 	beq.w	80170f2 <_dtoa_r+0x8ea>
 8016f90:	9a08      	ldr	r2, [sp, #32]
 8016f92:	4641      	mov	r1, r8
 8016f94:	4648      	mov	r0, r9
 8016f96:	f000 fcb3 	bl	8017900 <__pow5mult>
 8016f9a:	9002      	str	r0, [sp, #8]
 8016f9c:	2101      	movs	r1, #1
 8016f9e:	4648      	mov	r0, r9
 8016fa0:	f000 fbf6 	bl	8017790 <__i2b>
 8016fa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016fa6:	4604      	mov	r4, r0
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	f000 81d8 	beq.w	801735e <_dtoa_r+0xb56>
 8016fae:	461a      	mov	r2, r3
 8016fb0:	4601      	mov	r1, r0
 8016fb2:	4648      	mov	r0, r9
 8016fb4:	f000 fca4 	bl	8017900 <__pow5mult>
 8016fb8:	9b07      	ldr	r3, [sp, #28]
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	f300 809f 	bgt.w	8017100 <_dtoa_r+0x8f8>
 8016fc2:	9b04      	ldr	r3, [sp, #16]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f040 8097 	bne.w	80170f8 <_dtoa_r+0x8f0>
 8016fca:	9b05      	ldr	r3, [sp, #20]
 8016fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f040 8093 	bne.w	80170fc <_dtoa_r+0x8f4>
 8016fd6:	9b05      	ldr	r3, [sp, #20]
 8016fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016fdc:	0d1b      	lsrs	r3, r3, #20
 8016fde:	051b      	lsls	r3, r3, #20
 8016fe0:	b133      	cbz	r3, 8016ff0 <_dtoa_r+0x7e8>
 8016fe2:	9b00      	ldr	r3, [sp, #0]
 8016fe4:	3301      	adds	r3, #1
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	9b06      	ldr	r3, [sp, #24]
 8016fea:	3301      	adds	r3, #1
 8016fec:	9306      	str	r3, [sp, #24]
 8016fee:	2301      	movs	r3, #1
 8016ff0:	9308      	str	r3, [sp, #32]
 8016ff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f000 81b8 	beq.w	801736a <_dtoa_r+0xb62>
 8016ffa:	6923      	ldr	r3, [r4, #16]
 8016ffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017000:	6918      	ldr	r0, [r3, #16]
 8017002:	f000 fb79 	bl	80176f8 <__hi0bits>
 8017006:	f1c0 0020 	rsb	r0, r0, #32
 801700a:	9b06      	ldr	r3, [sp, #24]
 801700c:	4418      	add	r0, r3
 801700e:	f010 001f 	ands.w	r0, r0, #31
 8017012:	f000 8082 	beq.w	801711a <_dtoa_r+0x912>
 8017016:	f1c0 0320 	rsb	r3, r0, #32
 801701a:	2b04      	cmp	r3, #4
 801701c:	dd73      	ble.n	8017106 <_dtoa_r+0x8fe>
 801701e:	9b00      	ldr	r3, [sp, #0]
 8017020:	f1c0 001c 	rsb	r0, r0, #28
 8017024:	4403      	add	r3, r0
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	9b06      	ldr	r3, [sp, #24]
 801702a:	4403      	add	r3, r0
 801702c:	4406      	add	r6, r0
 801702e:	9306      	str	r3, [sp, #24]
 8017030:	9b00      	ldr	r3, [sp, #0]
 8017032:	2b00      	cmp	r3, #0
 8017034:	dd05      	ble.n	8017042 <_dtoa_r+0x83a>
 8017036:	9902      	ldr	r1, [sp, #8]
 8017038:	461a      	mov	r2, r3
 801703a:	4648      	mov	r0, r9
 801703c:	f000 fcba 	bl	80179b4 <__lshift>
 8017040:	9002      	str	r0, [sp, #8]
 8017042:	9b06      	ldr	r3, [sp, #24]
 8017044:	2b00      	cmp	r3, #0
 8017046:	dd05      	ble.n	8017054 <_dtoa_r+0x84c>
 8017048:	4621      	mov	r1, r4
 801704a:	461a      	mov	r2, r3
 801704c:	4648      	mov	r0, r9
 801704e:	f000 fcb1 	bl	80179b4 <__lshift>
 8017052:	4604      	mov	r4, r0
 8017054:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017056:	2b00      	cmp	r3, #0
 8017058:	d061      	beq.n	801711e <_dtoa_r+0x916>
 801705a:	9802      	ldr	r0, [sp, #8]
 801705c:	4621      	mov	r1, r4
 801705e:	f000 fd15 	bl	8017a8c <__mcmp>
 8017062:	2800      	cmp	r0, #0
 8017064:	da5b      	bge.n	801711e <_dtoa_r+0x916>
 8017066:	2300      	movs	r3, #0
 8017068:	9902      	ldr	r1, [sp, #8]
 801706a:	220a      	movs	r2, #10
 801706c:	4648      	mov	r0, r9
 801706e:	f000 fafd 	bl	801766c <__multadd>
 8017072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017074:	9002      	str	r0, [sp, #8]
 8017076:	f107 38ff 	add.w	r8, r7, #4294967295
 801707a:	2b00      	cmp	r3, #0
 801707c:	f000 8177 	beq.w	801736e <_dtoa_r+0xb66>
 8017080:	4629      	mov	r1, r5
 8017082:	2300      	movs	r3, #0
 8017084:	220a      	movs	r2, #10
 8017086:	4648      	mov	r0, r9
 8017088:	f000 faf0 	bl	801766c <__multadd>
 801708c:	f1bb 0f00 	cmp.w	fp, #0
 8017090:	4605      	mov	r5, r0
 8017092:	dc6f      	bgt.n	8017174 <_dtoa_r+0x96c>
 8017094:	9b07      	ldr	r3, [sp, #28]
 8017096:	2b02      	cmp	r3, #2
 8017098:	dc49      	bgt.n	801712e <_dtoa_r+0x926>
 801709a:	e06b      	b.n	8017174 <_dtoa_r+0x96c>
 801709c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801709e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80170a2:	e73c      	b.n	8016f1e <_dtoa_r+0x716>
 80170a4:	3fe00000 	.word	0x3fe00000
 80170a8:	40240000 	.word	0x40240000
 80170ac:	9b03      	ldr	r3, [sp, #12]
 80170ae:	1e5c      	subs	r4, r3, #1
 80170b0:	9b08      	ldr	r3, [sp, #32]
 80170b2:	42a3      	cmp	r3, r4
 80170b4:	db09      	blt.n	80170ca <_dtoa_r+0x8c2>
 80170b6:	1b1c      	subs	r4, r3, r4
 80170b8:	9b03      	ldr	r3, [sp, #12]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	f6bf af30 	bge.w	8016f20 <_dtoa_r+0x718>
 80170c0:	9b00      	ldr	r3, [sp, #0]
 80170c2:	9a03      	ldr	r2, [sp, #12]
 80170c4:	1a9e      	subs	r6, r3, r2
 80170c6:	2300      	movs	r3, #0
 80170c8:	e72b      	b.n	8016f22 <_dtoa_r+0x71a>
 80170ca:	9b08      	ldr	r3, [sp, #32]
 80170cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80170ce:	9408      	str	r4, [sp, #32]
 80170d0:	1ae3      	subs	r3, r4, r3
 80170d2:	441a      	add	r2, r3
 80170d4:	9e00      	ldr	r6, [sp, #0]
 80170d6:	9b03      	ldr	r3, [sp, #12]
 80170d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80170da:	2400      	movs	r4, #0
 80170dc:	e721      	b.n	8016f22 <_dtoa_r+0x71a>
 80170de:	9c08      	ldr	r4, [sp, #32]
 80170e0:	9e00      	ldr	r6, [sp, #0]
 80170e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80170e4:	e728      	b.n	8016f38 <_dtoa_r+0x730>
 80170e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80170ea:	e751      	b.n	8016f90 <_dtoa_r+0x788>
 80170ec:	9a08      	ldr	r2, [sp, #32]
 80170ee:	9902      	ldr	r1, [sp, #8]
 80170f0:	e750      	b.n	8016f94 <_dtoa_r+0x78c>
 80170f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80170f6:	e751      	b.n	8016f9c <_dtoa_r+0x794>
 80170f8:	2300      	movs	r3, #0
 80170fa:	e779      	b.n	8016ff0 <_dtoa_r+0x7e8>
 80170fc:	9b04      	ldr	r3, [sp, #16]
 80170fe:	e777      	b.n	8016ff0 <_dtoa_r+0x7e8>
 8017100:	2300      	movs	r3, #0
 8017102:	9308      	str	r3, [sp, #32]
 8017104:	e779      	b.n	8016ffa <_dtoa_r+0x7f2>
 8017106:	d093      	beq.n	8017030 <_dtoa_r+0x828>
 8017108:	9a00      	ldr	r2, [sp, #0]
 801710a:	331c      	adds	r3, #28
 801710c:	441a      	add	r2, r3
 801710e:	9200      	str	r2, [sp, #0]
 8017110:	9a06      	ldr	r2, [sp, #24]
 8017112:	441a      	add	r2, r3
 8017114:	441e      	add	r6, r3
 8017116:	9206      	str	r2, [sp, #24]
 8017118:	e78a      	b.n	8017030 <_dtoa_r+0x828>
 801711a:	4603      	mov	r3, r0
 801711c:	e7f4      	b.n	8017108 <_dtoa_r+0x900>
 801711e:	9b03      	ldr	r3, [sp, #12]
 8017120:	2b00      	cmp	r3, #0
 8017122:	46b8      	mov	r8, r7
 8017124:	dc20      	bgt.n	8017168 <_dtoa_r+0x960>
 8017126:	469b      	mov	fp, r3
 8017128:	9b07      	ldr	r3, [sp, #28]
 801712a:	2b02      	cmp	r3, #2
 801712c:	dd1e      	ble.n	801716c <_dtoa_r+0x964>
 801712e:	f1bb 0f00 	cmp.w	fp, #0
 8017132:	f47f adb1 	bne.w	8016c98 <_dtoa_r+0x490>
 8017136:	4621      	mov	r1, r4
 8017138:	465b      	mov	r3, fp
 801713a:	2205      	movs	r2, #5
 801713c:	4648      	mov	r0, r9
 801713e:	f000 fa95 	bl	801766c <__multadd>
 8017142:	4601      	mov	r1, r0
 8017144:	4604      	mov	r4, r0
 8017146:	9802      	ldr	r0, [sp, #8]
 8017148:	f000 fca0 	bl	8017a8c <__mcmp>
 801714c:	2800      	cmp	r0, #0
 801714e:	f77f ada3 	ble.w	8016c98 <_dtoa_r+0x490>
 8017152:	4656      	mov	r6, sl
 8017154:	2331      	movs	r3, #49	@ 0x31
 8017156:	f806 3b01 	strb.w	r3, [r6], #1
 801715a:	f108 0801 	add.w	r8, r8, #1
 801715e:	e59f      	b.n	8016ca0 <_dtoa_r+0x498>
 8017160:	9c03      	ldr	r4, [sp, #12]
 8017162:	46b8      	mov	r8, r7
 8017164:	4625      	mov	r5, r4
 8017166:	e7f4      	b.n	8017152 <_dtoa_r+0x94a>
 8017168:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801716c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801716e:	2b00      	cmp	r3, #0
 8017170:	f000 8101 	beq.w	8017376 <_dtoa_r+0xb6e>
 8017174:	2e00      	cmp	r6, #0
 8017176:	dd05      	ble.n	8017184 <_dtoa_r+0x97c>
 8017178:	4629      	mov	r1, r5
 801717a:	4632      	mov	r2, r6
 801717c:	4648      	mov	r0, r9
 801717e:	f000 fc19 	bl	80179b4 <__lshift>
 8017182:	4605      	mov	r5, r0
 8017184:	9b08      	ldr	r3, [sp, #32]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d05c      	beq.n	8017244 <_dtoa_r+0xa3c>
 801718a:	6869      	ldr	r1, [r5, #4]
 801718c:	4648      	mov	r0, r9
 801718e:	f000 fa0b 	bl	80175a8 <_Balloc>
 8017192:	4606      	mov	r6, r0
 8017194:	b928      	cbnz	r0, 80171a2 <_dtoa_r+0x99a>
 8017196:	4b82      	ldr	r3, [pc, #520]	@ (80173a0 <_dtoa_r+0xb98>)
 8017198:	4602      	mov	r2, r0
 801719a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801719e:	f7ff bb4a 	b.w	8016836 <_dtoa_r+0x2e>
 80171a2:	692a      	ldr	r2, [r5, #16]
 80171a4:	3202      	adds	r2, #2
 80171a6:	0092      	lsls	r2, r2, #2
 80171a8:	f105 010c 	add.w	r1, r5, #12
 80171ac:	300c      	adds	r0, #12
 80171ae:	f7ff fa92 	bl	80166d6 <memcpy>
 80171b2:	2201      	movs	r2, #1
 80171b4:	4631      	mov	r1, r6
 80171b6:	4648      	mov	r0, r9
 80171b8:	f000 fbfc 	bl	80179b4 <__lshift>
 80171bc:	f10a 0301 	add.w	r3, sl, #1
 80171c0:	9300      	str	r3, [sp, #0]
 80171c2:	eb0a 030b 	add.w	r3, sl, fp
 80171c6:	9308      	str	r3, [sp, #32]
 80171c8:	9b04      	ldr	r3, [sp, #16]
 80171ca:	f003 0301 	and.w	r3, r3, #1
 80171ce:	462f      	mov	r7, r5
 80171d0:	9306      	str	r3, [sp, #24]
 80171d2:	4605      	mov	r5, r0
 80171d4:	9b00      	ldr	r3, [sp, #0]
 80171d6:	9802      	ldr	r0, [sp, #8]
 80171d8:	4621      	mov	r1, r4
 80171da:	f103 3bff 	add.w	fp, r3, #4294967295
 80171de:	f7ff fa88 	bl	80166f2 <quorem>
 80171e2:	4603      	mov	r3, r0
 80171e4:	3330      	adds	r3, #48	@ 0x30
 80171e6:	9003      	str	r0, [sp, #12]
 80171e8:	4639      	mov	r1, r7
 80171ea:	9802      	ldr	r0, [sp, #8]
 80171ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80171ee:	f000 fc4d 	bl	8017a8c <__mcmp>
 80171f2:	462a      	mov	r2, r5
 80171f4:	9004      	str	r0, [sp, #16]
 80171f6:	4621      	mov	r1, r4
 80171f8:	4648      	mov	r0, r9
 80171fa:	f000 fc63 	bl	8017ac4 <__mdiff>
 80171fe:	68c2      	ldr	r2, [r0, #12]
 8017200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017202:	4606      	mov	r6, r0
 8017204:	bb02      	cbnz	r2, 8017248 <_dtoa_r+0xa40>
 8017206:	4601      	mov	r1, r0
 8017208:	9802      	ldr	r0, [sp, #8]
 801720a:	f000 fc3f 	bl	8017a8c <__mcmp>
 801720e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017210:	4602      	mov	r2, r0
 8017212:	4631      	mov	r1, r6
 8017214:	4648      	mov	r0, r9
 8017216:	920c      	str	r2, [sp, #48]	@ 0x30
 8017218:	9309      	str	r3, [sp, #36]	@ 0x24
 801721a:	f000 fa05 	bl	8017628 <_Bfree>
 801721e:	9b07      	ldr	r3, [sp, #28]
 8017220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017222:	9e00      	ldr	r6, [sp, #0]
 8017224:	ea42 0103 	orr.w	r1, r2, r3
 8017228:	9b06      	ldr	r3, [sp, #24]
 801722a:	4319      	orrs	r1, r3
 801722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801722e:	d10d      	bne.n	801724c <_dtoa_r+0xa44>
 8017230:	2b39      	cmp	r3, #57	@ 0x39
 8017232:	d027      	beq.n	8017284 <_dtoa_r+0xa7c>
 8017234:	9a04      	ldr	r2, [sp, #16]
 8017236:	2a00      	cmp	r2, #0
 8017238:	dd01      	ble.n	801723e <_dtoa_r+0xa36>
 801723a:	9b03      	ldr	r3, [sp, #12]
 801723c:	3331      	adds	r3, #49	@ 0x31
 801723e:	f88b 3000 	strb.w	r3, [fp]
 8017242:	e52e      	b.n	8016ca2 <_dtoa_r+0x49a>
 8017244:	4628      	mov	r0, r5
 8017246:	e7b9      	b.n	80171bc <_dtoa_r+0x9b4>
 8017248:	2201      	movs	r2, #1
 801724a:	e7e2      	b.n	8017212 <_dtoa_r+0xa0a>
 801724c:	9904      	ldr	r1, [sp, #16]
 801724e:	2900      	cmp	r1, #0
 8017250:	db04      	blt.n	801725c <_dtoa_r+0xa54>
 8017252:	9807      	ldr	r0, [sp, #28]
 8017254:	4301      	orrs	r1, r0
 8017256:	9806      	ldr	r0, [sp, #24]
 8017258:	4301      	orrs	r1, r0
 801725a:	d120      	bne.n	801729e <_dtoa_r+0xa96>
 801725c:	2a00      	cmp	r2, #0
 801725e:	ddee      	ble.n	801723e <_dtoa_r+0xa36>
 8017260:	9902      	ldr	r1, [sp, #8]
 8017262:	9300      	str	r3, [sp, #0]
 8017264:	2201      	movs	r2, #1
 8017266:	4648      	mov	r0, r9
 8017268:	f000 fba4 	bl	80179b4 <__lshift>
 801726c:	4621      	mov	r1, r4
 801726e:	9002      	str	r0, [sp, #8]
 8017270:	f000 fc0c 	bl	8017a8c <__mcmp>
 8017274:	2800      	cmp	r0, #0
 8017276:	9b00      	ldr	r3, [sp, #0]
 8017278:	dc02      	bgt.n	8017280 <_dtoa_r+0xa78>
 801727a:	d1e0      	bne.n	801723e <_dtoa_r+0xa36>
 801727c:	07da      	lsls	r2, r3, #31
 801727e:	d5de      	bpl.n	801723e <_dtoa_r+0xa36>
 8017280:	2b39      	cmp	r3, #57	@ 0x39
 8017282:	d1da      	bne.n	801723a <_dtoa_r+0xa32>
 8017284:	2339      	movs	r3, #57	@ 0x39
 8017286:	f88b 3000 	strb.w	r3, [fp]
 801728a:	4633      	mov	r3, r6
 801728c:	461e      	mov	r6, r3
 801728e:	3b01      	subs	r3, #1
 8017290:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017294:	2a39      	cmp	r2, #57	@ 0x39
 8017296:	d04e      	beq.n	8017336 <_dtoa_r+0xb2e>
 8017298:	3201      	adds	r2, #1
 801729a:	701a      	strb	r2, [r3, #0]
 801729c:	e501      	b.n	8016ca2 <_dtoa_r+0x49a>
 801729e:	2a00      	cmp	r2, #0
 80172a0:	dd03      	ble.n	80172aa <_dtoa_r+0xaa2>
 80172a2:	2b39      	cmp	r3, #57	@ 0x39
 80172a4:	d0ee      	beq.n	8017284 <_dtoa_r+0xa7c>
 80172a6:	3301      	adds	r3, #1
 80172a8:	e7c9      	b.n	801723e <_dtoa_r+0xa36>
 80172aa:	9a00      	ldr	r2, [sp, #0]
 80172ac:	9908      	ldr	r1, [sp, #32]
 80172ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80172b2:	428a      	cmp	r2, r1
 80172b4:	d028      	beq.n	8017308 <_dtoa_r+0xb00>
 80172b6:	9902      	ldr	r1, [sp, #8]
 80172b8:	2300      	movs	r3, #0
 80172ba:	220a      	movs	r2, #10
 80172bc:	4648      	mov	r0, r9
 80172be:	f000 f9d5 	bl	801766c <__multadd>
 80172c2:	42af      	cmp	r7, r5
 80172c4:	9002      	str	r0, [sp, #8]
 80172c6:	f04f 0300 	mov.w	r3, #0
 80172ca:	f04f 020a 	mov.w	r2, #10
 80172ce:	4639      	mov	r1, r7
 80172d0:	4648      	mov	r0, r9
 80172d2:	d107      	bne.n	80172e4 <_dtoa_r+0xadc>
 80172d4:	f000 f9ca 	bl	801766c <__multadd>
 80172d8:	4607      	mov	r7, r0
 80172da:	4605      	mov	r5, r0
 80172dc:	9b00      	ldr	r3, [sp, #0]
 80172de:	3301      	adds	r3, #1
 80172e0:	9300      	str	r3, [sp, #0]
 80172e2:	e777      	b.n	80171d4 <_dtoa_r+0x9cc>
 80172e4:	f000 f9c2 	bl	801766c <__multadd>
 80172e8:	4629      	mov	r1, r5
 80172ea:	4607      	mov	r7, r0
 80172ec:	2300      	movs	r3, #0
 80172ee:	220a      	movs	r2, #10
 80172f0:	4648      	mov	r0, r9
 80172f2:	f000 f9bb 	bl	801766c <__multadd>
 80172f6:	4605      	mov	r5, r0
 80172f8:	e7f0      	b.n	80172dc <_dtoa_r+0xad4>
 80172fa:	f1bb 0f00 	cmp.w	fp, #0
 80172fe:	bfcc      	ite	gt
 8017300:	465e      	movgt	r6, fp
 8017302:	2601      	movle	r6, #1
 8017304:	4456      	add	r6, sl
 8017306:	2700      	movs	r7, #0
 8017308:	9902      	ldr	r1, [sp, #8]
 801730a:	9300      	str	r3, [sp, #0]
 801730c:	2201      	movs	r2, #1
 801730e:	4648      	mov	r0, r9
 8017310:	f000 fb50 	bl	80179b4 <__lshift>
 8017314:	4621      	mov	r1, r4
 8017316:	9002      	str	r0, [sp, #8]
 8017318:	f000 fbb8 	bl	8017a8c <__mcmp>
 801731c:	2800      	cmp	r0, #0
 801731e:	dcb4      	bgt.n	801728a <_dtoa_r+0xa82>
 8017320:	d102      	bne.n	8017328 <_dtoa_r+0xb20>
 8017322:	9b00      	ldr	r3, [sp, #0]
 8017324:	07db      	lsls	r3, r3, #31
 8017326:	d4b0      	bmi.n	801728a <_dtoa_r+0xa82>
 8017328:	4633      	mov	r3, r6
 801732a:	461e      	mov	r6, r3
 801732c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017330:	2a30      	cmp	r2, #48	@ 0x30
 8017332:	d0fa      	beq.n	801732a <_dtoa_r+0xb22>
 8017334:	e4b5      	b.n	8016ca2 <_dtoa_r+0x49a>
 8017336:	459a      	cmp	sl, r3
 8017338:	d1a8      	bne.n	801728c <_dtoa_r+0xa84>
 801733a:	2331      	movs	r3, #49	@ 0x31
 801733c:	f108 0801 	add.w	r8, r8, #1
 8017340:	f88a 3000 	strb.w	r3, [sl]
 8017344:	e4ad      	b.n	8016ca2 <_dtoa_r+0x49a>
 8017346:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017348:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80173a4 <_dtoa_r+0xb9c>
 801734c:	b11b      	cbz	r3, 8017356 <_dtoa_r+0xb4e>
 801734e:	f10a 0308 	add.w	r3, sl, #8
 8017352:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8017354:	6013      	str	r3, [r2, #0]
 8017356:	4650      	mov	r0, sl
 8017358:	b017      	add	sp, #92	@ 0x5c
 801735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735e:	9b07      	ldr	r3, [sp, #28]
 8017360:	2b01      	cmp	r3, #1
 8017362:	f77f ae2e 	ble.w	8016fc2 <_dtoa_r+0x7ba>
 8017366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017368:	9308      	str	r3, [sp, #32]
 801736a:	2001      	movs	r0, #1
 801736c:	e64d      	b.n	801700a <_dtoa_r+0x802>
 801736e:	f1bb 0f00 	cmp.w	fp, #0
 8017372:	f77f aed9 	ble.w	8017128 <_dtoa_r+0x920>
 8017376:	4656      	mov	r6, sl
 8017378:	9802      	ldr	r0, [sp, #8]
 801737a:	4621      	mov	r1, r4
 801737c:	f7ff f9b9 	bl	80166f2 <quorem>
 8017380:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8017384:	f806 3b01 	strb.w	r3, [r6], #1
 8017388:	eba6 020a 	sub.w	r2, r6, sl
 801738c:	4593      	cmp	fp, r2
 801738e:	ddb4      	ble.n	80172fa <_dtoa_r+0xaf2>
 8017390:	9902      	ldr	r1, [sp, #8]
 8017392:	2300      	movs	r3, #0
 8017394:	220a      	movs	r2, #10
 8017396:	4648      	mov	r0, r9
 8017398:	f000 f968 	bl	801766c <__multadd>
 801739c:	9002      	str	r0, [sp, #8]
 801739e:	e7eb      	b.n	8017378 <_dtoa_r+0xb70>
 80173a0:	0801c414 	.word	0x0801c414
 80173a4:	0801c398 	.word	0x0801c398

080173a8 <_free_r>:
 80173a8:	b538      	push	{r3, r4, r5, lr}
 80173aa:	4605      	mov	r5, r0
 80173ac:	2900      	cmp	r1, #0
 80173ae:	d041      	beq.n	8017434 <_free_r+0x8c>
 80173b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173b4:	1f0c      	subs	r4, r1, #4
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	bfb8      	it	lt
 80173ba:	18e4      	addlt	r4, r4, r3
 80173bc:	f000 f8e8 	bl	8017590 <__malloc_lock>
 80173c0:	4a1d      	ldr	r2, [pc, #116]	@ (8017438 <_free_r+0x90>)
 80173c2:	6813      	ldr	r3, [r2, #0]
 80173c4:	b933      	cbnz	r3, 80173d4 <_free_r+0x2c>
 80173c6:	6063      	str	r3, [r4, #4]
 80173c8:	6014      	str	r4, [r2, #0]
 80173ca:	4628      	mov	r0, r5
 80173cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173d0:	f000 b8e4 	b.w	801759c <__malloc_unlock>
 80173d4:	42a3      	cmp	r3, r4
 80173d6:	d908      	bls.n	80173ea <_free_r+0x42>
 80173d8:	6820      	ldr	r0, [r4, #0]
 80173da:	1821      	adds	r1, r4, r0
 80173dc:	428b      	cmp	r3, r1
 80173de:	bf01      	itttt	eq
 80173e0:	6819      	ldreq	r1, [r3, #0]
 80173e2:	685b      	ldreq	r3, [r3, #4]
 80173e4:	1809      	addeq	r1, r1, r0
 80173e6:	6021      	streq	r1, [r4, #0]
 80173e8:	e7ed      	b.n	80173c6 <_free_r+0x1e>
 80173ea:	461a      	mov	r2, r3
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	b10b      	cbz	r3, 80173f4 <_free_r+0x4c>
 80173f0:	42a3      	cmp	r3, r4
 80173f2:	d9fa      	bls.n	80173ea <_free_r+0x42>
 80173f4:	6811      	ldr	r1, [r2, #0]
 80173f6:	1850      	adds	r0, r2, r1
 80173f8:	42a0      	cmp	r0, r4
 80173fa:	d10b      	bne.n	8017414 <_free_r+0x6c>
 80173fc:	6820      	ldr	r0, [r4, #0]
 80173fe:	4401      	add	r1, r0
 8017400:	1850      	adds	r0, r2, r1
 8017402:	4283      	cmp	r3, r0
 8017404:	6011      	str	r1, [r2, #0]
 8017406:	d1e0      	bne.n	80173ca <_free_r+0x22>
 8017408:	6818      	ldr	r0, [r3, #0]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	6053      	str	r3, [r2, #4]
 801740e:	4408      	add	r0, r1
 8017410:	6010      	str	r0, [r2, #0]
 8017412:	e7da      	b.n	80173ca <_free_r+0x22>
 8017414:	d902      	bls.n	801741c <_free_r+0x74>
 8017416:	230c      	movs	r3, #12
 8017418:	602b      	str	r3, [r5, #0]
 801741a:	e7d6      	b.n	80173ca <_free_r+0x22>
 801741c:	6820      	ldr	r0, [r4, #0]
 801741e:	1821      	adds	r1, r4, r0
 8017420:	428b      	cmp	r3, r1
 8017422:	bf04      	itt	eq
 8017424:	6819      	ldreq	r1, [r3, #0]
 8017426:	685b      	ldreq	r3, [r3, #4]
 8017428:	6063      	str	r3, [r4, #4]
 801742a:	bf04      	itt	eq
 801742c:	1809      	addeq	r1, r1, r0
 801742e:	6021      	streq	r1, [r4, #0]
 8017430:	6054      	str	r4, [r2, #4]
 8017432:	e7ca      	b.n	80173ca <_free_r+0x22>
 8017434:	bd38      	pop	{r3, r4, r5, pc}
 8017436:	bf00      	nop
 8017438:	200024d8 	.word	0x200024d8

0801743c <malloc>:
 801743c:	4b02      	ldr	r3, [pc, #8]	@ (8017448 <malloc+0xc>)
 801743e:	4601      	mov	r1, r0
 8017440:	6818      	ldr	r0, [r3, #0]
 8017442:	f000 b825 	b.w	8017490 <_malloc_r>
 8017446:	bf00      	nop
 8017448:	2000014c 	.word	0x2000014c

0801744c <sbrk_aligned>:
 801744c:	b570      	push	{r4, r5, r6, lr}
 801744e:	4e0f      	ldr	r6, [pc, #60]	@ (801748c <sbrk_aligned+0x40>)
 8017450:	460c      	mov	r4, r1
 8017452:	6831      	ldr	r1, [r6, #0]
 8017454:	4605      	mov	r5, r0
 8017456:	b911      	cbnz	r1, 801745e <sbrk_aligned+0x12>
 8017458:	f000 fec6 	bl	80181e8 <_sbrk_r>
 801745c:	6030      	str	r0, [r6, #0]
 801745e:	4621      	mov	r1, r4
 8017460:	4628      	mov	r0, r5
 8017462:	f000 fec1 	bl	80181e8 <_sbrk_r>
 8017466:	1c43      	adds	r3, r0, #1
 8017468:	d103      	bne.n	8017472 <sbrk_aligned+0x26>
 801746a:	f04f 34ff 	mov.w	r4, #4294967295
 801746e:	4620      	mov	r0, r4
 8017470:	bd70      	pop	{r4, r5, r6, pc}
 8017472:	1cc4      	adds	r4, r0, #3
 8017474:	f024 0403 	bic.w	r4, r4, #3
 8017478:	42a0      	cmp	r0, r4
 801747a:	d0f8      	beq.n	801746e <sbrk_aligned+0x22>
 801747c:	1a21      	subs	r1, r4, r0
 801747e:	4628      	mov	r0, r5
 8017480:	f000 feb2 	bl	80181e8 <_sbrk_r>
 8017484:	3001      	adds	r0, #1
 8017486:	d1f2      	bne.n	801746e <sbrk_aligned+0x22>
 8017488:	e7ef      	b.n	801746a <sbrk_aligned+0x1e>
 801748a:	bf00      	nop
 801748c:	200024d4 	.word	0x200024d4

08017490 <_malloc_r>:
 8017490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017494:	1ccd      	adds	r5, r1, #3
 8017496:	f025 0503 	bic.w	r5, r5, #3
 801749a:	3508      	adds	r5, #8
 801749c:	2d0c      	cmp	r5, #12
 801749e:	bf38      	it	cc
 80174a0:	250c      	movcc	r5, #12
 80174a2:	2d00      	cmp	r5, #0
 80174a4:	4606      	mov	r6, r0
 80174a6:	db01      	blt.n	80174ac <_malloc_r+0x1c>
 80174a8:	42a9      	cmp	r1, r5
 80174aa:	d904      	bls.n	80174b6 <_malloc_r+0x26>
 80174ac:	230c      	movs	r3, #12
 80174ae:	6033      	str	r3, [r6, #0]
 80174b0:	2000      	movs	r0, #0
 80174b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801758c <_malloc_r+0xfc>
 80174ba:	f000 f869 	bl	8017590 <__malloc_lock>
 80174be:	f8d8 3000 	ldr.w	r3, [r8]
 80174c2:	461c      	mov	r4, r3
 80174c4:	bb44      	cbnz	r4, 8017518 <_malloc_r+0x88>
 80174c6:	4629      	mov	r1, r5
 80174c8:	4630      	mov	r0, r6
 80174ca:	f7ff ffbf 	bl	801744c <sbrk_aligned>
 80174ce:	1c43      	adds	r3, r0, #1
 80174d0:	4604      	mov	r4, r0
 80174d2:	d158      	bne.n	8017586 <_malloc_r+0xf6>
 80174d4:	f8d8 4000 	ldr.w	r4, [r8]
 80174d8:	4627      	mov	r7, r4
 80174da:	2f00      	cmp	r7, #0
 80174dc:	d143      	bne.n	8017566 <_malloc_r+0xd6>
 80174de:	2c00      	cmp	r4, #0
 80174e0:	d04b      	beq.n	801757a <_malloc_r+0xea>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	4639      	mov	r1, r7
 80174e6:	4630      	mov	r0, r6
 80174e8:	eb04 0903 	add.w	r9, r4, r3
 80174ec:	f000 fe7c 	bl	80181e8 <_sbrk_r>
 80174f0:	4581      	cmp	r9, r0
 80174f2:	d142      	bne.n	801757a <_malloc_r+0xea>
 80174f4:	6821      	ldr	r1, [r4, #0]
 80174f6:	1a6d      	subs	r5, r5, r1
 80174f8:	4629      	mov	r1, r5
 80174fa:	4630      	mov	r0, r6
 80174fc:	f7ff ffa6 	bl	801744c <sbrk_aligned>
 8017500:	3001      	adds	r0, #1
 8017502:	d03a      	beq.n	801757a <_malloc_r+0xea>
 8017504:	6823      	ldr	r3, [r4, #0]
 8017506:	442b      	add	r3, r5
 8017508:	6023      	str	r3, [r4, #0]
 801750a:	f8d8 3000 	ldr.w	r3, [r8]
 801750e:	685a      	ldr	r2, [r3, #4]
 8017510:	bb62      	cbnz	r2, 801756c <_malloc_r+0xdc>
 8017512:	f8c8 7000 	str.w	r7, [r8]
 8017516:	e00f      	b.n	8017538 <_malloc_r+0xa8>
 8017518:	6822      	ldr	r2, [r4, #0]
 801751a:	1b52      	subs	r2, r2, r5
 801751c:	d420      	bmi.n	8017560 <_malloc_r+0xd0>
 801751e:	2a0b      	cmp	r2, #11
 8017520:	d917      	bls.n	8017552 <_malloc_r+0xc2>
 8017522:	1961      	adds	r1, r4, r5
 8017524:	42a3      	cmp	r3, r4
 8017526:	6025      	str	r5, [r4, #0]
 8017528:	bf18      	it	ne
 801752a:	6059      	strne	r1, [r3, #4]
 801752c:	6863      	ldr	r3, [r4, #4]
 801752e:	bf08      	it	eq
 8017530:	f8c8 1000 	streq.w	r1, [r8]
 8017534:	5162      	str	r2, [r4, r5]
 8017536:	604b      	str	r3, [r1, #4]
 8017538:	4630      	mov	r0, r6
 801753a:	f000 f82f 	bl	801759c <__malloc_unlock>
 801753e:	f104 000b 	add.w	r0, r4, #11
 8017542:	1d23      	adds	r3, r4, #4
 8017544:	f020 0007 	bic.w	r0, r0, #7
 8017548:	1ac2      	subs	r2, r0, r3
 801754a:	bf1c      	itt	ne
 801754c:	1a1b      	subne	r3, r3, r0
 801754e:	50a3      	strne	r3, [r4, r2]
 8017550:	e7af      	b.n	80174b2 <_malloc_r+0x22>
 8017552:	6862      	ldr	r2, [r4, #4]
 8017554:	42a3      	cmp	r3, r4
 8017556:	bf0c      	ite	eq
 8017558:	f8c8 2000 	streq.w	r2, [r8]
 801755c:	605a      	strne	r2, [r3, #4]
 801755e:	e7eb      	b.n	8017538 <_malloc_r+0xa8>
 8017560:	4623      	mov	r3, r4
 8017562:	6864      	ldr	r4, [r4, #4]
 8017564:	e7ae      	b.n	80174c4 <_malloc_r+0x34>
 8017566:	463c      	mov	r4, r7
 8017568:	687f      	ldr	r7, [r7, #4]
 801756a:	e7b6      	b.n	80174da <_malloc_r+0x4a>
 801756c:	461a      	mov	r2, r3
 801756e:	685b      	ldr	r3, [r3, #4]
 8017570:	42a3      	cmp	r3, r4
 8017572:	d1fb      	bne.n	801756c <_malloc_r+0xdc>
 8017574:	2300      	movs	r3, #0
 8017576:	6053      	str	r3, [r2, #4]
 8017578:	e7de      	b.n	8017538 <_malloc_r+0xa8>
 801757a:	230c      	movs	r3, #12
 801757c:	6033      	str	r3, [r6, #0]
 801757e:	4630      	mov	r0, r6
 8017580:	f000 f80c 	bl	801759c <__malloc_unlock>
 8017584:	e794      	b.n	80174b0 <_malloc_r+0x20>
 8017586:	6005      	str	r5, [r0, #0]
 8017588:	e7d6      	b.n	8017538 <_malloc_r+0xa8>
 801758a:	bf00      	nop
 801758c:	200024d8 	.word	0x200024d8

08017590 <__malloc_lock>:
 8017590:	4801      	ldr	r0, [pc, #4]	@ (8017598 <__malloc_lock+0x8>)
 8017592:	f7ff b89e 	b.w	80166d2 <__retarget_lock_acquire_recursive>
 8017596:	bf00      	nop
 8017598:	200024d0 	.word	0x200024d0

0801759c <__malloc_unlock>:
 801759c:	4801      	ldr	r0, [pc, #4]	@ (80175a4 <__malloc_unlock+0x8>)
 801759e:	f7ff b899 	b.w	80166d4 <__retarget_lock_release_recursive>
 80175a2:	bf00      	nop
 80175a4:	200024d0 	.word	0x200024d0

080175a8 <_Balloc>:
 80175a8:	b570      	push	{r4, r5, r6, lr}
 80175aa:	69c6      	ldr	r6, [r0, #28]
 80175ac:	4604      	mov	r4, r0
 80175ae:	460d      	mov	r5, r1
 80175b0:	b976      	cbnz	r6, 80175d0 <_Balloc+0x28>
 80175b2:	2010      	movs	r0, #16
 80175b4:	f7ff ff42 	bl	801743c <malloc>
 80175b8:	4602      	mov	r2, r0
 80175ba:	61e0      	str	r0, [r4, #28]
 80175bc:	b920      	cbnz	r0, 80175c8 <_Balloc+0x20>
 80175be:	4b18      	ldr	r3, [pc, #96]	@ (8017620 <_Balloc+0x78>)
 80175c0:	4818      	ldr	r0, [pc, #96]	@ (8017624 <_Balloc+0x7c>)
 80175c2:	216b      	movs	r1, #107	@ 0x6b
 80175c4:	f000 fe20 	bl	8018208 <__assert_func>
 80175c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80175cc:	6006      	str	r6, [r0, #0]
 80175ce:	60c6      	str	r6, [r0, #12]
 80175d0:	69e6      	ldr	r6, [r4, #28]
 80175d2:	68f3      	ldr	r3, [r6, #12]
 80175d4:	b183      	cbz	r3, 80175f8 <_Balloc+0x50>
 80175d6:	69e3      	ldr	r3, [r4, #28]
 80175d8:	68db      	ldr	r3, [r3, #12]
 80175da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80175de:	b9b8      	cbnz	r0, 8017610 <_Balloc+0x68>
 80175e0:	2101      	movs	r1, #1
 80175e2:	fa01 f605 	lsl.w	r6, r1, r5
 80175e6:	1d72      	adds	r2, r6, #5
 80175e8:	0092      	lsls	r2, r2, #2
 80175ea:	4620      	mov	r0, r4
 80175ec:	f000 fe2a 	bl	8018244 <_calloc_r>
 80175f0:	b160      	cbz	r0, 801760c <_Balloc+0x64>
 80175f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80175f6:	e00e      	b.n	8017616 <_Balloc+0x6e>
 80175f8:	2221      	movs	r2, #33	@ 0x21
 80175fa:	2104      	movs	r1, #4
 80175fc:	4620      	mov	r0, r4
 80175fe:	f000 fe21 	bl	8018244 <_calloc_r>
 8017602:	69e3      	ldr	r3, [r4, #28]
 8017604:	60f0      	str	r0, [r6, #12]
 8017606:	68db      	ldr	r3, [r3, #12]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d1e4      	bne.n	80175d6 <_Balloc+0x2e>
 801760c:	2000      	movs	r0, #0
 801760e:	bd70      	pop	{r4, r5, r6, pc}
 8017610:	6802      	ldr	r2, [r0, #0]
 8017612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017616:	2300      	movs	r3, #0
 8017618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801761c:	e7f7      	b.n	801760e <_Balloc+0x66>
 801761e:	bf00      	nop
 8017620:	0801c3a5 	.word	0x0801c3a5
 8017624:	0801c425 	.word	0x0801c425

08017628 <_Bfree>:
 8017628:	b570      	push	{r4, r5, r6, lr}
 801762a:	69c6      	ldr	r6, [r0, #28]
 801762c:	4605      	mov	r5, r0
 801762e:	460c      	mov	r4, r1
 8017630:	b976      	cbnz	r6, 8017650 <_Bfree+0x28>
 8017632:	2010      	movs	r0, #16
 8017634:	f7ff ff02 	bl	801743c <malloc>
 8017638:	4602      	mov	r2, r0
 801763a:	61e8      	str	r0, [r5, #28]
 801763c:	b920      	cbnz	r0, 8017648 <_Bfree+0x20>
 801763e:	4b09      	ldr	r3, [pc, #36]	@ (8017664 <_Bfree+0x3c>)
 8017640:	4809      	ldr	r0, [pc, #36]	@ (8017668 <_Bfree+0x40>)
 8017642:	218f      	movs	r1, #143	@ 0x8f
 8017644:	f000 fde0 	bl	8018208 <__assert_func>
 8017648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801764c:	6006      	str	r6, [r0, #0]
 801764e:	60c6      	str	r6, [r0, #12]
 8017650:	b13c      	cbz	r4, 8017662 <_Bfree+0x3a>
 8017652:	69eb      	ldr	r3, [r5, #28]
 8017654:	6862      	ldr	r2, [r4, #4]
 8017656:	68db      	ldr	r3, [r3, #12]
 8017658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801765c:	6021      	str	r1, [r4, #0]
 801765e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017662:	bd70      	pop	{r4, r5, r6, pc}
 8017664:	0801c3a5 	.word	0x0801c3a5
 8017668:	0801c425 	.word	0x0801c425

0801766c <__multadd>:
 801766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017670:	690d      	ldr	r5, [r1, #16]
 8017672:	4607      	mov	r7, r0
 8017674:	460c      	mov	r4, r1
 8017676:	461e      	mov	r6, r3
 8017678:	f101 0c14 	add.w	ip, r1, #20
 801767c:	2000      	movs	r0, #0
 801767e:	f8dc 3000 	ldr.w	r3, [ip]
 8017682:	b299      	uxth	r1, r3
 8017684:	fb02 6101 	mla	r1, r2, r1, r6
 8017688:	0c1e      	lsrs	r6, r3, #16
 801768a:	0c0b      	lsrs	r3, r1, #16
 801768c:	fb02 3306 	mla	r3, r2, r6, r3
 8017690:	b289      	uxth	r1, r1
 8017692:	3001      	adds	r0, #1
 8017694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017698:	4285      	cmp	r5, r0
 801769a:	f84c 1b04 	str.w	r1, [ip], #4
 801769e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80176a2:	dcec      	bgt.n	801767e <__multadd+0x12>
 80176a4:	b30e      	cbz	r6, 80176ea <__multadd+0x7e>
 80176a6:	68a3      	ldr	r3, [r4, #8]
 80176a8:	42ab      	cmp	r3, r5
 80176aa:	dc19      	bgt.n	80176e0 <__multadd+0x74>
 80176ac:	6861      	ldr	r1, [r4, #4]
 80176ae:	4638      	mov	r0, r7
 80176b0:	3101      	adds	r1, #1
 80176b2:	f7ff ff79 	bl	80175a8 <_Balloc>
 80176b6:	4680      	mov	r8, r0
 80176b8:	b928      	cbnz	r0, 80176c6 <__multadd+0x5a>
 80176ba:	4602      	mov	r2, r0
 80176bc:	4b0c      	ldr	r3, [pc, #48]	@ (80176f0 <__multadd+0x84>)
 80176be:	480d      	ldr	r0, [pc, #52]	@ (80176f4 <__multadd+0x88>)
 80176c0:	21ba      	movs	r1, #186	@ 0xba
 80176c2:	f000 fda1 	bl	8018208 <__assert_func>
 80176c6:	6922      	ldr	r2, [r4, #16]
 80176c8:	3202      	adds	r2, #2
 80176ca:	f104 010c 	add.w	r1, r4, #12
 80176ce:	0092      	lsls	r2, r2, #2
 80176d0:	300c      	adds	r0, #12
 80176d2:	f7ff f800 	bl	80166d6 <memcpy>
 80176d6:	4621      	mov	r1, r4
 80176d8:	4638      	mov	r0, r7
 80176da:	f7ff ffa5 	bl	8017628 <_Bfree>
 80176de:	4644      	mov	r4, r8
 80176e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80176e4:	3501      	adds	r5, #1
 80176e6:	615e      	str	r6, [r3, #20]
 80176e8:	6125      	str	r5, [r4, #16]
 80176ea:	4620      	mov	r0, r4
 80176ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f0:	0801c414 	.word	0x0801c414
 80176f4:	0801c425 	.word	0x0801c425

080176f8 <__hi0bits>:
 80176f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80176fc:	4603      	mov	r3, r0
 80176fe:	bf36      	itet	cc
 8017700:	0403      	lslcc	r3, r0, #16
 8017702:	2000      	movcs	r0, #0
 8017704:	2010      	movcc	r0, #16
 8017706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801770a:	bf3c      	itt	cc
 801770c:	021b      	lslcc	r3, r3, #8
 801770e:	3008      	addcc	r0, #8
 8017710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017714:	bf3c      	itt	cc
 8017716:	011b      	lslcc	r3, r3, #4
 8017718:	3004      	addcc	r0, #4
 801771a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801771e:	bf3c      	itt	cc
 8017720:	009b      	lslcc	r3, r3, #2
 8017722:	3002      	addcc	r0, #2
 8017724:	2b00      	cmp	r3, #0
 8017726:	db05      	blt.n	8017734 <__hi0bits+0x3c>
 8017728:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801772c:	f100 0001 	add.w	r0, r0, #1
 8017730:	bf08      	it	eq
 8017732:	2020      	moveq	r0, #32
 8017734:	4770      	bx	lr

08017736 <__lo0bits>:
 8017736:	6803      	ldr	r3, [r0, #0]
 8017738:	4602      	mov	r2, r0
 801773a:	f013 0007 	ands.w	r0, r3, #7
 801773e:	d00b      	beq.n	8017758 <__lo0bits+0x22>
 8017740:	07d9      	lsls	r1, r3, #31
 8017742:	d421      	bmi.n	8017788 <__lo0bits+0x52>
 8017744:	0798      	lsls	r0, r3, #30
 8017746:	bf49      	itett	mi
 8017748:	085b      	lsrmi	r3, r3, #1
 801774a:	089b      	lsrpl	r3, r3, #2
 801774c:	2001      	movmi	r0, #1
 801774e:	6013      	strmi	r3, [r2, #0]
 8017750:	bf5c      	itt	pl
 8017752:	6013      	strpl	r3, [r2, #0]
 8017754:	2002      	movpl	r0, #2
 8017756:	4770      	bx	lr
 8017758:	b299      	uxth	r1, r3
 801775a:	b909      	cbnz	r1, 8017760 <__lo0bits+0x2a>
 801775c:	0c1b      	lsrs	r3, r3, #16
 801775e:	2010      	movs	r0, #16
 8017760:	b2d9      	uxtb	r1, r3
 8017762:	b909      	cbnz	r1, 8017768 <__lo0bits+0x32>
 8017764:	3008      	adds	r0, #8
 8017766:	0a1b      	lsrs	r3, r3, #8
 8017768:	0719      	lsls	r1, r3, #28
 801776a:	bf04      	itt	eq
 801776c:	091b      	lsreq	r3, r3, #4
 801776e:	3004      	addeq	r0, #4
 8017770:	0799      	lsls	r1, r3, #30
 8017772:	bf04      	itt	eq
 8017774:	089b      	lsreq	r3, r3, #2
 8017776:	3002      	addeq	r0, #2
 8017778:	07d9      	lsls	r1, r3, #31
 801777a:	d403      	bmi.n	8017784 <__lo0bits+0x4e>
 801777c:	085b      	lsrs	r3, r3, #1
 801777e:	f100 0001 	add.w	r0, r0, #1
 8017782:	d003      	beq.n	801778c <__lo0bits+0x56>
 8017784:	6013      	str	r3, [r2, #0]
 8017786:	4770      	bx	lr
 8017788:	2000      	movs	r0, #0
 801778a:	4770      	bx	lr
 801778c:	2020      	movs	r0, #32
 801778e:	4770      	bx	lr

08017790 <__i2b>:
 8017790:	b510      	push	{r4, lr}
 8017792:	460c      	mov	r4, r1
 8017794:	2101      	movs	r1, #1
 8017796:	f7ff ff07 	bl	80175a8 <_Balloc>
 801779a:	4602      	mov	r2, r0
 801779c:	b928      	cbnz	r0, 80177aa <__i2b+0x1a>
 801779e:	4b05      	ldr	r3, [pc, #20]	@ (80177b4 <__i2b+0x24>)
 80177a0:	4805      	ldr	r0, [pc, #20]	@ (80177b8 <__i2b+0x28>)
 80177a2:	f240 1145 	movw	r1, #325	@ 0x145
 80177a6:	f000 fd2f 	bl	8018208 <__assert_func>
 80177aa:	2301      	movs	r3, #1
 80177ac:	6144      	str	r4, [r0, #20]
 80177ae:	6103      	str	r3, [r0, #16]
 80177b0:	bd10      	pop	{r4, pc}
 80177b2:	bf00      	nop
 80177b4:	0801c414 	.word	0x0801c414
 80177b8:	0801c425 	.word	0x0801c425

080177bc <__multiply>:
 80177bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c0:	4617      	mov	r7, r2
 80177c2:	690a      	ldr	r2, [r1, #16]
 80177c4:	693b      	ldr	r3, [r7, #16]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	bfa8      	it	ge
 80177ca:	463b      	movge	r3, r7
 80177cc:	4689      	mov	r9, r1
 80177ce:	bfa4      	itt	ge
 80177d0:	460f      	movge	r7, r1
 80177d2:	4699      	movge	r9, r3
 80177d4:	693d      	ldr	r5, [r7, #16]
 80177d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	6879      	ldr	r1, [r7, #4]
 80177de:	eb05 060a 	add.w	r6, r5, sl
 80177e2:	42b3      	cmp	r3, r6
 80177e4:	b085      	sub	sp, #20
 80177e6:	bfb8      	it	lt
 80177e8:	3101      	addlt	r1, #1
 80177ea:	f7ff fedd 	bl	80175a8 <_Balloc>
 80177ee:	b930      	cbnz	r0, 80177fe <__multiply+0x42>
 80177f0:	4602      	mov	r2, r0
 80177f2:	4b41      	ldr	r3, [pc, #260]	@ (80178f8 <__multiply+0x13c>)
 80177f4:	4841      	ldr	r0, [pc, #260]	@ (80178fc <__multiply+0x140>)
 80177f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80177fa:	f000 fd05 	bl	8018208 <__assert_func>
 80177fe:	f100 0414 	add.w	r4, r0, #20
 8017802:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8017806:	4623      	mov	r3, r4
 8017808:	2200      	movs	r2, #0
 801780a:	4573      	cmp	r3, lr
 801780c:	d320      	bcc.n	8017850 <__multiply+0x94>
 801780e:	f107 0814 	add.w	r8, r7, #20
 8017812:	f109 0114 	add.w	r1, r9, #20
 8017816:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801781a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801781e:	9302      	str	r3, [sp, #8]
 8017820:	1beb      	subs	r3, r5, r7
 8017822:	3b15      	subs	r3, #21
 8017824:	f023 0303 	bic.w	r3, r3, #3
 8017828:	3304      	adds	r3, #4
 801782a:	3715      	adds	r7, #21
 801782c:	42bd      	cmp	r5, r7
 801782e:	bf38      	it	cc
 8017830:	2304      	movcc	r3, #4
 8017832:	9301      	str	r3, [sp, #4]
 8017834:	9b02      	ldr	r3, [sp, #8]
 8017836:	9103      	str	r1, [sp, #12]
 8017838:	428b      	cmp	r3, r1
 801783a:	d80c      	bhi.n	8017856 <__multiply+0x9a>
 801783c:	2e00      	cmp	r6, #0
 801783e:	dd03      	ble.n	8017848 <__multiply+0x8c>
 8017840:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017844:	2b00      	cmp	r3, #0
 8017846:	d055      	beq.n	80178f4 <__multiply+0x138>
 8017848:	6106      	str	r6, [r0, #16]
 801784a:	b005      	add	sp, #20
 801784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017850:	f843 2b04 	str.w	r2, [r3], #4
 8017854:	e7d9      	b.n	801780a <__multiply+0x4e>
 8017856:	f8b1 a000 	ldrh.w	sl, [r1]
 801785a:	f1ba 0f00 	cmp.w	sl, #0
 801785e:	d01f      	beq.n	80178a0 <__multiply+0xe4>
 8017860:	46c4      	mov	ip, r8
 8017862:	46a1      	mov	r9, r4
 8017864:	2700      	movs	r7, #0
 8017866:	f85c 2b04 	ldr.w	r2, [ip], #4
 801786a:	f8d9 3000 	ldr.w	r3, [r9]
 801786e:	fa1f fb82 	uxth.w	fp, r2
 8017872:	b29b      	uxth	r3, r3
 8017874:	fb0a 330b 	mla	r3, sl, fp, r3
 8017878:	443b      	add	r3, r7
 801787a:	f8d9 7000 	ldr.w	r7, [r9]
 801787e:	0c12      	lsrs	r2, r2, #16
 8017880:	0c3f      	lsrs	r7, r7, #16
 8017882:	fb0a 7202 	mla	r2, sl, r2, r7
 8017886:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801788a:	b29b      	uxth	r3, r3
 801788c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017890:	4565      	cmp	r5, ip
 8017892:	f849 3b04 	str.w	r3, [r9], #4
 8017896:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801789a:	d8e4      	bhi.n	8017866 <__multiply+0xaa>
 801789c:	9b01      	ldr	r3, [sp, #4]
 801789e:	50e7      	str	r7, [r4, r3]
 80178a0:	9b03      	ldr	r3, [sp, #12]
 80178a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80178a6:	3104      	adds	r1, #4
 80178a8:	f1b9 0f00 	cmp.w	r9, #0
 80178ac:	d020      	beq.n	80178f0 <__multiply+0x134>
 80178ae:	6823      	ldr	r3, [r4, #0]
 80178b0:	4647      	mov	r7, r8
 80178b2:	46a4      	mov	ip, r4
 80178b4:	f04f 0a00 	mov.w	sl, #0
 80178b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80178bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80178c0:	fb09 220b 	mla	r2, r9, fp, r2
 80178c4:	4452      	add	r2, sl
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178cc:	f84c 3b04 	str.w	r3, [ip], #4
 80178d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80178d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80178d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80178dc:	fb09 330a 	mla	r3, r9, sl, r3
 80178e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80178e4:	42bd      	cmp	r5, r7
 80178e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80178ea:	d8e5      	bhi.n	80178b8 <__multiply+0xfc>
 80178ec:	9a01      	ldr	r2, [sp, #4]
 80178ee:	50a3      	str	r3, [r4, r2]
 80178f0:	3404      	adds	r4, #4
 80178f2:	e79f      	b.n	8017834 <__multiply+0x78>
 80178f4:	3e01      	subs	r6, #1
 80178f6:	e7a1      	b.n	801783c <__multiply+0x80>
 80178f8:	0801c414 	.word	0x0801c414
 80178fc:	0801c425 	.word	0x0801c425

08017900 <__pow5mult>:
 8017900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017904:	4615      	mov	r5, r2
 8017906:	f012 0203 	ands.w	r2, r2, #3
 801790a:	4607      	mov	r7, r0
 801790c:	460e      	mov	r6, r1
 801790e:	d007      	beq.n	8017920 <__pow5mult+0x20>
 8017910:	4c25      	ldr	r4, [pc, #148]	@ (80179a8 <__pow5mult+0xa8>)
 8017912:	3a01      	subs	r2, #1
 8017914:	2300      	movs	r3, #0
 8017916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801791a:	f7ff fea7 	bl	801766c <__multadd>
 801791e:	4606      	mov	r6, r0
 8017920:	10ad      	asrs	r5, r5, #2
 8017922:	d03d      	beq.n	80179a0 <__pow5mult+0xa0>
 8017924:	69fc      	ldr	r4, [r7, #28]
 8017926:	b97c      	cbnz	r4, 8017948 <__pow5mult+0x48>
 8017928:	2010      	movs	r0, #16
 801792a:	f7ff fd87 	bl	801743c <malloc>
 801792e:	4602      	mov	r2, r0
 8017930:	61f8      	str	r0, [r7, #28]
 8017932:	b928      	cbnz	r0, 8017940 <__pow5mult+0x40>
 8017934:	4b1d      	ldr	r3, [pc, #116]	@ (80179ac <__pow5mult+0xac>)
 8017936:	481e      	ldr	r0, [pc, #120]	@ (80179b0 <__pow5mult+0xb0>)
 8017938:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801793c:	f000 fc64 	bl	8018208 <__assert_func>
 8017940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017944:	6004      	str	r4, [r0, #0]
 8017946:	60c4      	str	r4, [r0, #12]
 8017948:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801794c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017950:	b94c      	cbnz	r4, 8017966 <__pow5mult+0x66>
 8017952:	f240 2171 	movw	r1, #625	@ 0x271
 8017956:	4638      	mov	r0, r7
 8017958:	f7ff ff1a 	bl	8017790 <__i2b>
 801795c:	2300      	movs	r3, #0
 801795e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017962:	4604      	mov	r4, r0
 8017964:	6003      	str	r3, [r0, #0]
 8017966:	f04f 0900 	mov.w	r9, #0
 801796a:	07eb      	lsls	r3, r5, #31
 801796c:	d50a      	bpl.n	8017984 <__pow5mult+0x84>
 801796e:	4631      	mov	r1, r6
 8017970:	4622      	mov	r2, r4
 8017972:	4638      	mov	r0, r7
 8017974:	f7ff ff22 	bl	80177bc <__multiply>
 8017978:	4631      	mov	r1, r6
 801797a:	4680      	mov	r8, r0
 801797c:	4638      	mov	r0, r7
 801797e:	f7ff fe53 	bl	8017628 <_Bfree>
 8017982:	4646      	mov	r6, r8
 8017984:	106d      	asrs	r5, r5, #1
 8017986:	d00b      	beq.n	80179a0 <__pow5mult+0xa0>
 8017988:	6820      	ldr	r0, [r4, #0]
 801798a:	b938      	cbnz	r0, 801799c <__pow5mult+0x9c>
 801798c:	4622      	mov	r2, r4
 801798e:	4621      	mov	r1, r4
 8017990:	4638      	mov	r0, r7
 8017992:	f7ff ff13 	bl	80177bc <__multiply>
 8017996:	6020      	str	r0, [r4, #0]
 8017998:	f8c0 9000 	str.w	r9, [r0]
 801799c:	4604      	mov	r4, r0
 801799e:	e7e4      	b.n	801796a <__pow5mult+0x6a>
 80179a0:	4630      	mov	r0, r6
 80179a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179a6:	bf00      	nop
 80179a8:	0801c4d8 	.word	0x0801c4d8
 80179ac:	0801c3a5 	.word	0x0801c3a5
 80179b0:	0801c425 	.word	0x0801c425

080179b4 <__lshift>:
 80179b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179b8:	460c      	mov	r4, r1
 80179ba:	6849      	ldr	r1, [r1, #4]
 80179bc:	6923      	ldr	r3, [r4, #16]
 80179be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80179c2:	68a3      	ldr	r3, [r4, #8]
 80179c4:	4607      	mov	r7, r0
 80179c6:	4691      	mov	r9, r2
 80179c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80179cc:	f108 0601 	add.w	r6, r8, #1
 80179d0:	42b3      	cmp	r3, r6
 80179d2:	db0b      	blt.n	80179ec <__lshift+0x38>
 80179d4:	4638      	mov	r0, r7
 80179d6:	f7ff fde7 	bl	80175a8 <_Balloc>
 80179da:	4605      	mov	r5, r0
 80179dc:	b948      	cbnz	r0, 80179f2 <__lshift+0x3e>
 80179de:	4602      	mov	r2, r0
 80179e0:	4b28      	ldr	r3, [pc, #160]	@ (8017a84 <__lshift+0xd0>)
 80179e2:	4829      	ldr	r0, [pc, #164]	@ (8017a88 <__lshift+0xd4>)
 80179e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80179e8:	f000 fc0e 	bl	8018208 <__assert_func>
 80179ec:	3101      	adds	r1, #1
 80179ee:	005b      	lsls	r3, r3, #1
 80179f0:	e7ee      	b.n	80179d0 <__lshift+0x1c>
 80179f2:	2300      	movs	r3, #0
 80179f4:	f100 0114 	add.w	r1, r0, #20
 80179f8:	f100 0210 	add.w	r2, r0, #16
 80179fc:	4618      	mov	r0, r3
 80179fe:	4553      	cmp	r3, sl
 8017a00:	db33      	blt.n	8017a6a <__lshift+0xb6>
 8017a02:	6920      	ldr	r0, [r4, #16]
 8017a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017a08:	f104 0314 	add.w	r3, r4, #20
 8017a0c:	f019 091f 	ands.w	r9, r9, #31
 8017a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017a14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017a18:	d02b      	beq.n	8017a72 <__lshift+0xbe>
 8017a1a:	f1c9 0e20 	rsb	lr, r9, #32
 8017a1e:	468a      	mov	sl, r1
 8017a20:	2200      	movs	r2, #0
 8017a22:	6818      	ldr	r0, [r3, #0]
 8017a24:	fa00 f009 	lsl.w	r0, r0, r9
 8017a28:	4310      	orrs	r0, r2
 8017a2a:	f84a 0b04 	str.w	r0, [sl], #4
 8017a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a32:	459c      	cmp	ip, r3
 8017a34:	fa22 f20e 	lsr.w	r2, r2, lr
 8017a38:	d8f3      	bhi.n	8017a22 <__lshift+0x6e>
 8017a3a:	ebac 0304 	sub.w	r3, ip, r4
 8017a3e:	3b15      	subs	r3, #21
 8017a40:	f023 0303 	bic.w	r3, r3, #3
 8017a44:	3304      	adds	r3, #4
 8017a46:	f104 0015 	add.w	r0, r4, #21
 8017a4a:	4560      	cmp	r0, ip
 8017a4c:	bf88      	it	hi
 8017a4e:	2304      	movhi	r3, #4
 8017a50:	50ca      	str	r2, [r1, r3]
 8017a52:	b10a      	cbz	r2, 8017a58 <__lshift+0xa4>
 8017a54:	f108 0602 	add.w	r6, r8, #2
 8017a58:	3e01      	subs	r6, #1
 8017a5a:	4638      	mov	r0, r7
 8017a5c:	612e      	str	r6, [r5, #16]
 8017a5e:	4621      	mov	r1, r4
 8017a60:	f7ff fde2 	bl	8017628 <_Bfree>
 8017a64:	4628      	mov	r0, r5
 8017a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8017a6e:	3301      	adds	r3, #1
 8017a70:	e7c5      	b.n	80179fe <__lshift+0x4a>
 8017a72:	3904      	subs	r1, #4
 8017a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a78:	f841 2f04 	str.w	r2, [r1, #4]!
 8017a7c:	459c      	cmp	ip, r3
 8017a7e:	d8f9      	bhi.n	8017a74 <__lshift+0xc0>
 8017a80:	e7ea      	b.n	8017a58 <__lshift+0xa4>
 8017a82:	bf00      	nop
 8017a84:	0801c414 	.word	0x0801c414
 8017a88:	0801c425 	.word	0x0801c425

08017a8c <__mcmp>:
 8017a8c:	690a      	ldr	r2, [r1, #16]
 8017a8e:	4603      	mov	r3, r0
 8017a90:	6900      	ldr	r0, [r0, #16]
 8017a92:	1a80      	subs	r0, r0, r2
 8017a94:	b530      	push	{r4, r5, lr}
 8017a96:	d10e      	bne.n	8017ab6 <__mcmp+0x2a>
 8017a98:	3314      	adds	r3, #20
 8017a9a:	3114      	adds	r1, #20
 8017a9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017aa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017aa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017aa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017aac:	4295      	cmp	r5, r2
 8017aae:	d003      	beq.n	8017ab8 <__mcmp+0x2c>
 8017ab0:	d205      	bcs.n	8017abe <__mcmp+0x32>
 8017ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab6:	bd30      	pop	{r4, r5, pc}
 8017ab8:	42a3      	cmp	r3, r4
 8017aba:	d3f3      	bcc.n	8017aa4 <__mcmp+0x18>
 8017abc:	e7fb      	b.n	8017ab6 <__mcmp+0x2a>
 8017abe:	2001      	movs	r0, #1
 8017ac0:	e7f9      	b.n	8017ab6 <__mcmp+0x2a>
	...

08017ac4 <__mdiff>:
 8017ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac8:	4689      	mov	r9, r1
 8017aca:	4606      	mov	r6, r0
 8017acc:	4611      	mov	r1, r2
 8017ace:	4648      	mov	r0, r9
 8017ad0:	4614      	mov	r4, r2
 8017ad2:	f7ff ffdb 	bl	8017a8c <__mcmp>
 8017ad6:	1e05      	subs	r5, r0, #0
 8017ad8:	d112      	bne.n	8017b00 <__mdiff+0x3c>
 8017ada:	4629      	mov	r1, r5
 8017adc:	4630      	mov	r0, r6
 8017ade:	f7ff fd63 	bl	80175a8 <_Balloc>
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	b928      	cbnz	r0, 8017af2 <__mdiff+0x2e>
 8017ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8017be4 <__mdiff+0x120>)
 8017ae8:	f240 2137 	movw	r1, #567	@ 0x237
 8017aec:	483e      	ldr	r0, [pc, #248]	@ (8017be8 <__mdiff+0x124>)
 8017aee:	f000 fb8b 	bl	8018208 <__assert_func>
 8017af2:	2301      	movs	r3, #1
 8017af4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017af8:	4610      	mov	r0, r2
 8017afa:	b003      	add	sp, #12
 8017afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b00:	bfbc      	itt	lt
 8017b02:	464b      	movlt	r3, r9
 8017b04:	46a1      	movlt	r9, r4
 8017b06:	4630      	mov	r0, r6
 8017b08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017b0c:	bfba      	itte	lt
 8017b0e:	461c      	movlt	r4, r3
 8017b10:	2501      	movlt	r5, #1
 8017b12:	2500      	movge	r5, #0
 8017b14:	f7ff fd48 	bl	80175a8 <_Balloc>
 8017b18:	4602      	mov	r2, r0
 8017b1a:	b918      	cbnz	r0, 8017b24 <__mdiff+0x60>
 8017b1c:	4b31      	ldr	r3, [pc, #196]	@ (8017be4 <__mdiff+0x120>)
 8017b1e:	f240 2145 	movw	r1, #581	@ 0x245
 8017b22:	e7e3      	b.n	8017aec <__mdiff+0x28>
 8017b24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017b28:	6926      	ldr	r6, [r4, #16]
 8017b2a:	60c5      	str	r5, [r0, #12]
 8017b2c:	f109 0310 	add.w	r3, r9, #16
 8017b30:	f109 0514 	add.w	r5, r9, #20
 8017b34:	f104 0e14 	add.w	lr, r4, #20
 8017b38:	f100 0b14 	add.w	fp, r0, #20
 8017b3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017b40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017b44:	9301      	str	r3, [sp, #4]
 8017b46:	46d9      	mov	r9, fp
 8017b48:	f04f 0c00 	mov.w	ip, #0
 8017b4c:	9b01      	ldr	r3, [sp, #4]
 8017b4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017b52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017b56:	9301      	str	r3, [sp, #4]
 8017b58:	fa1f f38a 	uxth.w	r3, sl
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	b283      	uxth	r3, r0
 8017b60:	1acb      	subs	r3, r1, r3
 8017b62:	0c00      	lsrs	r0, r0, #16
 8017b64:	4463      	add	r3, ip
 8017b66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017b6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017b6e:	b29b      	uxth	r3, r3
 8017b70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017b74:	4576      	cmp	r6, lr
 8017b76:	f849 3b04 	str.w	r3, [r9], #4
 8017b7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017b7e:	d8e5      	bhi.n	8017b4c <__mdiff+0x88>
 8017b80:	1b33      	subs	r3, r6, r4
 8017b82:	3b15      	subs	r3, #21
 8017b84:	f023 0303 	bic.w	r3, r3, #3
 8017b88:	3415      	adds	r4, #21
 8017b8a:	3304      	adds	r3, #4
 8017b8c:	42a6      	cmp	r6, r4
 8017b8e:	bf38      	it	cc
 8017b90:	2304      	movcc	r3, #4
 8017b92:	441d      	add	r5, r3
 8017b94:	445b      	add	r3, fp
 8017b96:	461e      	mov	r6, r3
 8017b98:	462c      	mov	r4, r5
 8017b9a:	4544      	cmp	r4, r8
 8017b9c:	d30e      	bcc.n	8017bbc <__mdiff+0xf8>
 8017b9e:	f108 0103 	add.w	r1, r8, #3
 8017ba2:	1b49      	subs	r1, r1, r5
 8017ba4:	f021 0103 	bic.w	r1, r1, #3
 8017ba8:	3d03      	subs	r5, #3
 8017baa:	45a8      	cmp	r8, r5
 8017bac:	bf38      	it	cc
 8017bae:	2100      	movcc	r1, #0
 8017bb0:	440b      	add	r3, r1
 8017bb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017bb6:	b191      	cbz	r1, 8017bde <__mdiff+0x11a>
 8017bb8:	6117      	str	r7, [r2, #16]
 8017bba:	e79d      	b.n	8017af8 <__mdiff+0x34>
 8017bbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8017bc0:	46e6      	mov	lr, ip
 8017bc2:	0c08      	lsrs	r0, r1, #16
 8017bc4:	fa1c fc81 	uxtah	ip, ip, r1
 8017bc8:	4471      	add	r1, lr
 8017bca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017bce:	b289      	uxth	r1, r1
 8017bd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017bd4:	f846 1b04 	str.w	r1, [r6], #4
 8017bd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017bdc:	e7dd      	b.n	8017b9a <__mdiff+0xd6>
 8017bde:	3f01      	subs	r7, #1
 8017be0:	e7e7      	b.n	8017bb2 <__mdiff+0xee>
 8017be2:	bf00      	nop
 8017be4:	0801c414 	.word	0x0801c414
 8017be8:	0801c425 	.word	0x0801c425

08017bec <__d2b>:
 8017bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017bf0:	460f      	mov	r7, r1
 8017bf2:	2101      	movs	r1, #1
 8017bf4:	ec59 8b10 	vmov	r8, r9, d0
 8017bf8:	4616      	mov	r6, r2
 8017bfa:	f7ff fcd5 	bl	80175a8 <_Balloc>
 8017bfe:	4604      	mov	r4, r0
 8017c00:	b930      	cbnz	r0, 8017c10 <__d2b+0x24>
 8017c02:	4602      	mov	r2, r0
 8017c04:	4b23      	ldr	r3, [pc, #140]	@ (8017c94 <__d2b+0xa8>)
 8017c06:	4824      	ldr	r0, [pc, #144]	@ (8017c98 <__d2b+0xac>)
 8017c08:	f240 310f 	movw	r1, #783	@ 0x30f
 8017c0c:	f000 fafc 	bl	8018208 <__assert_func>
 8017c10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017c14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017c18:	b10d      	cbz	r5, 8017c1e <__d2b+0x32>
 8017c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017c1e:	9301      	str	r3, [sp, #4]
 8017c20:	f1b8 0300 	subs.w	r3, r8, #0
 8017c24:	d023      	beq.n	8017c6e <__d2b+0x82>
 8017c26:	4668      	mov	r0, sp
 8017c28:	9300      	str	r3, [sp, #0]
 8017c2a:	f7ff fd84 	bl	8017736 <__lo0bits>
 8017c2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017c32:	b1d0      	cbz	r0, 8017c6a <__d2b+0x7e>
 8017c34:	f1c0 0320 	rsb	r3, r0, #32
 8017c38:	fa02 f303 	lsl.w	r3, r2, r3
 8017c3c:	430b      	orrs	r3, r1
 8017c3e:	40c2      	lsrs	r2, r0
 8017c40:	6163      	str	r3, [r4, #20]
 8017c42:	9201      	str	r2, [sp, #4]
 8017c44:	9b01      	ldr	r3, [sp, #4]
 8017c46:	61a3      	str	r3, [r4, #24]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	bf0c      	ite	eq
 8017c4c:	2201      	moveq	r2, #1
 8017c4e:	2202      	movne	r2, #2
 8017c50:	6122      	str	r2, [r4, #16]
 8017c52:	b1a5      	cbz	r5, 8017c7e <__d2b+0x92>
 8017c54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017c58:	4405      	add	r5, r0
 8017c5a:	603d      	str	r5, [r7, #0]
 8017c5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017c60:	6030      	str	r0, [r6, #0]
 8017c62:	4620      	mov	r0, r4
 8017c64:	b003      	add	sp, #12
 8017c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c6a:	6161      	str	r1, [r4, #20]
 8017c6c:	e7ea      	b.n	8017c44 <__d2b+0x58>
 8017c6e:	a801      	add	r0, sp, #4
 8017c70:	f7ff fd61 	bl	8017736 <__lo0bits>
 8017c74:	9b01      	ldr	r3, [sp, #4]
 8017c76:	6163      	str	r3, [r4, #20]
 8017c78:	3020      	adds	r0, #32
 8017c7a:	2201      	movs	r2, #1
 8017c7c:	e7e8      	b.n	8017c50 <__d2b+0x64>
 8017c7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017c82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017c86:	6038      	str	r0, [r7, #0]
 8017c88:	6918      	ldr	r0, [r3, #16]
 8017c8a:	f7ff fd35 	bl	80176f8 <__hi0bits>
 8017c8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017c92:	e7e5      	b.n	8017c60 <__d2b+0x74>
 8017c94:	0801c414 	.word	0x0801c414
 8017c98:	0801c425 	.word	0x0801c425

08017c9c <__sfputc_r>:
 8017c9c:	6893      	ldr	r3, [r2, #8]
 8017c9e:	3b01      	subs	r3, #1
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	b410      	push	{r4}
 8017ca4:	6093      	str	r3, [r2, #8]
 8017ca6:	da08      	bge.n	8017cba <__sfputc_r+0x1e>
 8017ca8:	6994      	ldr	r4, [r2, #24]
 8017caa:	42a3      	cmp	r3, r4
 8017cac:	db01      	blt.n	8017cb2 <__sfputc_r+0x16>
 8017cae:	290a      	cmp	r1, #10
 8017cb0:	d103      	bne.n	8017cba <__sfputc_r+0x1e>
 8017cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cb6:	f7fe bbfa 	b.w	80164ae <__swbuf_r>
 8017cba:	6813      	ldr	r3, [r2, #0]
 8017cbc:	1c58      	adds	r0, r3, #1
 8017cbe:	6010      	str	r0, [r2, #0]
 8017cc0:	7019      	strb	r1, [r3, #0]
 8017cc2:	4608      	mov	r0, r1
 8017cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cc8:	4770      	bx	lr

08017cca <__sfputs_r>:
 8017cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ccc:	4606      	mov	r6, r0
 8017cce:	460f      	mov	r7, r1
 8017cd0:	4614      	mov	r4, r2
 8017cd2:	18d5      	adds	r5, r2, r3
 8017cd4:	42ac      	cmp	r4, r5
 8017cd6:	d101      	bne.n	8017cdc <__sfputs_r+0x12>
 8017cd8:	2000      	movs	r0, #0
 8017cda:	e007      	b.n	8017cec <__sfputs_r+0x22>
 8017cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ce0:	463a      	mov	r2, r7
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f7ff ffda 	bl	8017c9c <__sfputc_r>
 8017ce8:	1c43      	adds	r3, r0, #1
 8017cea:	d1f3      	bne.n	8017cd4 <__sfputs_r+0xa>
 8017cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017cf0 <_vfiprintf_r>:
 8017cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf4:	460d      	mov	r5, r1
 8017cf6:	b09d      	sub	sp, #116	@ 0x74
 8017cf8:	4614      	mov	r4, r2
 8017cfa:	4698      	mov	r8, r3
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	b118      	cbz	r0, 8017d08 <_vfiprintf_r+0x18>
 8017d00:	6a03      	ldr	r3, [r0, #32]
 8017d02:	b90b      	cbnz	r3, 8017d08 <_vfiprintf_r+0x18>
 8017d04:	f7fe fae2 	bl	80162cc <__sinit>
 8017d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d0a:	07d9      	lsls	r1, r3, #31
 8017d0c:	d405      	bmi.n	8017d1a <_vfiprintf_r+0x2a>
 8017d0e:	89ab      	ldrh	r3, [r5, #12]
 8017d10:	059a      	lsls	r2, r3, #22
 8017d12:	d402      	bmi.n	8017d1a <_vfiprintf_r+0x2a>
 8017d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d16:	f7fe fcdc 	bl	80166d2 <__retarget_lock_acquire_recursive>
 8017d1a:	89ab      	ldrh	r3, [r5, #12]
 8017d1c:	071b      	lsls	r3, r3, #28
 8017d1e:	d501      	bpl.n	8017d24 <_vfiprintf_r+0x34>
 8017d20:	692b      	ldr	r3, [r5, #16]
 8017d22:	b99b      	cbnz	r3, 8017d4c <_vfiprintf_r+0x5c>
 8017d24:	4629      	mov	r1, r5
 8017d26:	4630      	mov	r0, r6
 8017d28:	f7fe fc00 	bl	801652c <__swsetup_r>
 8017d2c:	b170      	cbz	r0, 8017d4c <_vfiprintf_r+0x5c>
 8017d2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d30:	07dc      	lsls	r4, r3, #31
 8017d32:	d504      	bpl.n	8017d3e <_vfiprintf_r+0x4e>
 8017d34:	f04f 30ff 	mov.w	r0, #4294967295
 8017d38:	b01d      	add	sp, #116	@ 0x74
 8017d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d3e:	89ab      	ldrh	r3, [r5, #12]
 8017d40:	0598      	lsls	r0, r3, #22
 8017d42:	d4f7      	bmi.n	8017d34 <_vfiprintf_r+0x44>
 8017d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d46:	f7fe fcc5 	bl	80166d4 <__retarget_lock_release_recursive>
 8017d4a:	e7f3      	b.n	8017d34 <_vfiprintf_r+0x44>
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d50:	2320      	movs	r3, #32
 8017d52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d5a:	2330      	movs	r3, #48	@ 0x30
 8017d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017f0c <_vfiprintf_r+0x21c>
 8017d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d64:	f04f 0901 	mov.w	r9, #1
 8017d68:	4623      	mov	r3, r4
 8017d6a:	469a      	mov	sl, r3
 8017d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d70:	b10a      	cbz	r2, 8017d76 <_vfiprintf_r+0x86>
 8017d72:	2a25      	cmp	r2, #37	@ 0x25
 8017d74:	d1f9      	bne.n	8017d6a <_vfiprintf_r+0x7a>
 8017d76:	ebba 0b04 	subs.w	fp, sl, r4
 8017d7a:	d00b      	beq.n	8017d94 <_vfiprintf_r+0xa4>
 8017d7c:	465b      	mov	r3, fp
 8017d7e:	4622      	mov	r2, r4
 8017d80:	4629      	mov	r1, r5
 8017d82:	4630      	mov	r0, r6
 8017d84:	f7ff ffa1 	bl	8017cca <__sfputs_r>
 8017d88:	3001      	adds	r0, #1
 8017d8a:	f000 80a7 	beq.w	8017edc <_vfiprintf_r+0x1ec>
 8017d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d90:	445a      	add	r2, fp
 8017d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d94:	f89a 3000 	ldrb.w	r3, [sl]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	f000 809f 	beq.w	8017edc <_vfiprintf_r+0x1ec>
 8017d9e:	2300      	movs	r3, #0
 8017da0:	f04f 32ff 	mov.w	r2, #4294967295
 8017da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017da8:	f10a 0a01 	add.w	sl, sl, #1
 8017dac:	9304      	str	r3, [sp, #16]
 8017dae:	9307      	str	r3, [sp, #28]
 8017db0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017db4:	931a      	str	r3, [sp, #104]	@ 0x68
 8017db6:	4654      	mov	r4, sl
 8017db8:	2205      	movs	r2, #5
 8017dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dbe:	4853      	ldr	r0, [pc, #332]	@ (8017f0c <_vfiprintf_r+0x21c>)
 8017dc0:	f7e8 f9de 	bl	8000180 <memchr>
 8017dc4:	9a04      	ldr	r2, [sp, #16]
 8017dc6:	b9d8      	cbnz	r0, 8017e00 <_vfiprintf_r+0x110>
 8017dc8:	06d1      	lsls	r1, r2, #27
 8017dca:	bf44      	itt	mi
 8017dcc:	2320      	movmi	r3, #32
 8017dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017dd2:	0713      	lsls	r3, r2, #28
 8017dd4:	bf44      	itt	mi
 8017dd6:	232b      	movmi	r3, #43	@ 0x2b
 8017dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8017de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017de2:	d015      	beq.n	8017e10 <_vfiprintf_r+0x120>
 8017de4:	9a07      	ldr	r2, [sp, #28]
 8017de6:	4654      	mov	r4, sl
 8017de8:	2000      	movs	r0, #0
 8017dea:	f04f 0c0a 	mov.w	ip, #10
 8017dee:	4621      	mov	r1, r4
 8017df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017df4:	3b30      	subs	r3, #48	@ 0x30
 8017df6:	2b09      	cmp	r3, #9
 8017df8:	d94b      	bls.n	8017e92 <_vfiprintf_r+0x1a2>
 8017dfa:	b1b0      	cbz	r0, 8017e2a <_vfiprintf_r+0x13a>
 8017dfc:	9207      	str	r2, [sp, #28]
 8017dfe:	e014      	b.n	8017e2a <_vfiprintf_r+0x13a>
 8017e00:	eba0 0308 	sub.w	r3, r0, r8
 8017e04:	fa09 f303 	lsl.w	r3, r9, r3
 8017e08:	4313      	orrs	r3, r2
 8017e0a:	9304      	str	r3, [sp, #16]
 8017e0c:	46a2      	mov	sl, r4
 8017e0e:	e7d2      	b.n	8017db6 <_vfiprintf_r+0xc6>
 8017e10:	9b03      	ldr	r3, [sp, #12]
 8017e12:	1d19      	adds	r1, r3, #4
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	9103      	str	r1, [sp, #12]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	bfbb      	ittet	lt
 8017e1c:	425b      	neglt	r3, r3
 8017e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8017e22:	9307      	strge	r3, [sp, #28]
 8017e24:	9307      	strlt	r3, [sp, #28]
 8017e26:	bfb8      	it	lt
 8017e28:	9204      	strlt	r2, [sp, #16]
 8017e2a:	7823      	ldrb	r3, [r4, #0]
 8017e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e2e:	d10a      	bne.n	8017e46 <_vfiprintf_r+0x156>
 8017e30:	7863      	ldrb	r3, [r4, #1]
 8017e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e34:	d132      	bne.n	8017e9c <_vfiprintf_r+0x1ac>
 8017e36:	9b03      	ldr	r3, [sp, #12]
 8017e38:	1d1a      	adds	r2, r3, #4
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	9203      	str	r2, [sp, #12]
 8017e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e42:	3402      	adds	r4, #2
 8017e44:	9305      	str	r3, [sp, #20]
 8017e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017f1c <_vfiprintf_r+0x22c>
 8017e4a:	7821      	ldrb	r1, [r4, #0]
 8017e4c:	2203      	movs	r2, #3
 8017e4e:	4650      	mov	r0, sl
 8017e50:	f7e8 f996 	bl	8000180 <memchr>
 8017e54:	b138      	cbz	r0, 8017e66 <_vfiprintf_r+0x176>
 8017e56:	9b04      	ldr	r3, [sp, #16]
 8017e58:	eba0 000a 	sub.w	r0, r0, sl
 8017e5c:	2240      	movs	r2, #64	@ 0x40
 8017e5e:	4082      	lsls	r2, r0
 8017e60:	4313      	orrs	r3, r2
 8017e62:	3401      	adds	r4, #1
 8017e64:	9304      	str	r3, [sp, #16]
 8017e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e6a:	4829      	ldr	r0, [pc, #164]	@ (8017f10 <_vfiprintf_r+0x220>)
 8017e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e70:	2206      	movs	r2, #6
 8017e72:	f7e8 f985 	bl	8000180 <memchr>
 8017e76:	2800      	cmp	r0, #0
 8017e78:	d03f      	beq.n	8017efa <_vfiprintf_r+0x20a>
 8017e7a:	4b26      	ldr	r3, [pc, #152]	@ (8017f14 <_vfiprintf_r+0x224>)
 8017e7c:	bb1b      	cbnz	r3, 8017ec6 <_vfiprintf_r+0x1d6>
 8017e7e:	9b03      	ldr	r3, [sp, #12]
 8017e80:	3307      	adds	r3, #7
 8017e82:	f023 0307 	bic.w	r3, r3, #7
 8017e86:	3308      	adds	r3, #8
 8017e88:	9303      	str	r3, [sp, #12]
 8017e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e8c:	443b      	add	r3, r7
 8017e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e90:	e76a      	b.n	8017d68 <_vfiprintf_r+0x78>
 8017e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e96:	460c      	mov	r4, r1
 8017e98:	2001      	movs	r0, #1
 8017e9a:	e7a8      	b.n	8017dee <_vfiprintf_r+0xfe>
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	3401      	adds	r4, #1
 8017ea0:	9305      	str	r3, [sp, #20]
 8017ea2:	4619      	mov	r1, r3
 8017ea4:	f04f 0c0a 	mov.w	ip, #10
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017eae:	3a30      	subs	r2, #48	@ 0x30
 8017eb0:	2a09      	cmp	r2, #9
 8017eb2:	d903      	bls.n	8017ebc <_vfiprintf_r+0x1cc>
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d0c6      	beq.n	8017e46 <_vfiprintf_r+0x156>
 8017eb8:	9105      	str	r1, [sp, #20]
 8017eba:	e7c4      	b.n	8017e46 <_vfiprintf_r+0x156>
 8017ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ec0:	4604      	mov	r4, r0
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e7f0      	b.n	8017ea8 <_vfiprintf_r+0x1b8>
 8017ec6:	ab03      	add	r3, sp, #12
 8017ec8:	9300      	str	r3, [sp, #0]
 8017eca:	462a      	mov	r2, r5
 8017ecc:	4b12      	ldr	r3, [pc, #72]	@ (8017f18 <_vfiprintf_r+0x228>)
 8017ece:	a904      	add	r1, sp, #16
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f7fd fdb9 	bl	8015a48 <_printf_float>
 8017ed6:	4607      	mov	r7, r0
 8017ed8:	1c78      	adds	r0, r7, #1
 8017eda:	d1d6      	bne.n	8017e8a <_vfiprintf_r+0x19a>
 8017edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ede:	07d9      	lsls	r1, r3, #31
 8017ee0:	d405      	bmi.n	8017eee <_vfiprintf_r+0x1fe>
 8017ee2:	89ab      	ldrh	r3, [r5, #12]
 8017ee4:	059a      	lsls	r2, r3, #22
 8017ee6:	d402      	bmi.n	8017eee <_vfiprintf_r+0x1fe>
 8017ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017eea:	f7fe fbf3 	bl	80166d4 <__retarget_lock_release_recursive>
 8017eee:	89ab      	ldrh	r3, [r5, #12]
 8017ef0:	065b      	lsls	r3, r3, #25
 8017ef2:	f53f af1f 	bmi.w	8017d34 <_vfiprintf_r+0x44>
 8017ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ef8:	e71e      	b.n	8017d38 <_vfiprintf_r+0x48>
 8017efa:	ab03      	add	r3, sp, #12
 8017efc:	9300      	str	r3, [sp, #0]
 8017efe:	462a      	mov	r2, r5
 8017f00:	4b05      	ldr	r3, [pc, #20]	@ (8017f18 <_vfiprintf_r+0x228>)
 8017f02:	a904      	add	r1, sp, #16
 8017f04:	4630      	mov	r0, r6
 8017f06:	f7fe f837 	bl	8015f78 <_printf_i>
 8017f0a:	e7e4      	b.n	8017ed6 <_vfiprintf_r+0x1e6>
 8017f0c:	0801c47e 	.word	0x0801c47e
 8017f10:	0801c488 	.word	0x0801c488
 8017f14:	08015a49 	.word	0x08015a49
 8017f18:	08017ccb 	.word	0x08017ccb
 8017f1c:	0801c484 	.word	0x0801c484

08017f20 <__sflush_r>:
 8017f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f28:	0716      	lsls	r6, r2, #28
 8017f2a:	4605      	mov	r5, r0
 8017f2c:	460c      	mov	r4, r1
 8017f2e:	d454      	bmi.n	8017fda <__sflush_r+0xba>
 8017f30:	684b      	ldr	r3, [r1, #4]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	dc02      	bgt.n	8017f3c <__sflush_r+0x1c>
 8017f36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	dd48      	ble.n	8017fce <__sflush_r+0xae>
 8017f3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f3e:	2e00      	cmp	r6, #0
 8017f40:	d045      	beq.n	8017fce <__sflush_r+0xae>
 8017f42:	2300      	movs	r3, #0
 8017f44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017f48:	682f      	ldr	r7, [r5, #0]
 8017f4a:	6a21      	ldr	r1, [r4, #32]
 8017f4c:	602b      	str	r3, [r5, #0]
 8017f4e:	d030      	beq.n	8017fb2 <__sflush_r+0x92>
 8017f50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017f52:	89a3      	ldrh	r3, [r4, #12]
 8017f54:	0759      	lsls	r1, r3, #29
 8017f56:	d505      	bpl.n	8017f64 <__sflush_r+0x44>
 8017f58:	6863      	ldr	r3, [r4, #4]
 8017f5a:	1ad2      	subs	r2, r2, r3
 8017f5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017f5e:	b10b      	cbz	r3, 8017f64 <__sflush_r+0x44>
 8017f60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f62:	1ad2      	subs	r2, r2, r3
 8017f64:	2300      	movs	r3, #0
 8017f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f68:	6a21      	ldr	r1, [r4, #32]
 8017f6a:	4628      	mov	r0, r5
 8017f6c:	47b0      	blx	r6
 8017f6e:	1c43      	adds	r3, r0, #1
 8017f70:	89a3      	ldrh	r3, [r4, #12]
 8017f72:	d106      	bne.n	8017f82 <__sflush_r+0x62>
 8017f74:	6829      	ldr	r1, [r5, #0]
 8017f76:	291d      	cmp	r1, #29
 8017f78:	d82b      	bhi.n	8017fd2 <__sflush_r+0xb2>
 8017f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8018024 <__sflush_r+0x104>)
 8017f7c:	40ca      	lsrs	r2, r1
 8017f7e:	07d6      	lsls	r6, r2, #31
 8017f80:	d527      	bpl.n	8017fd2 <__sflush_r+0xb2>
 8017f82:	2200      	movs	r2, #0
 8017f84:	6062      	str	r2, [r4, #4]
 8017f86:	04d9      	lsls	r1, r3, #19
 8017f88:	6922      	ldr	r2, [r4, #16]
 8017f8a:	6022      	str	r2, [r4, #0]
 8017f8c:	d504      	bpl.n	8017f98 <__sflush_r+0x78>
 8017f8e:	1c42      	adds	r2, r0, #1
 8017f90:	d101      	bne.n	8017f96 <__sflush_r+0x76>
 8017f92:	682b      	ldr	r3, [r5, #0]
 8017f94:	b903      	cbnz	r3, 8017f98 <__sflush_r+0x78>
 8017f96:	6560      	str	r0, [r4, #84]	@ 0x54
 8017f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f9a:	602f      	str	r7, [r5, #0]
 8017f9c:	b1b9      	cbz	r1, 8017fce <__sflush_r+0xae>
 8017f9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017fa2:	4299      	cmp	r1, r3
 8017fa4:	d002      	beq.n	8017fac <__sflush_r+0x8c>
 8017fa6:	4628      	mov	r0, r5
 8017fa8:	f7ff f9fe 	bl	80173a8 <_free_r>
 8017fac:	2300      	movs	r3, #0
 8017fae:	6363      	str	r3, [r4, #52]	@ 0x34
 8017fb0:	e00d      	b.n	8017fce <__sflush_r+0xae>
 8017fb2:	2301      	movs	r3, #1
 8017fb4:	4628      	mov	r0, r5
 8017fb6:	47b0      	blx	r6
 8017fb8:	4602      	mov	r2, r0
 8017fba:	1c50      	adds	r0, r2, #1
 8017fbc:	d1c9      	bne.n	8017f52 <__sflush_r+0x32>
 8017fbe:	682b      	ldr	r3, [r5, #0]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d0c6      	beq.n	8017f52 <__sflush_r+0x32>
 8017fc4:	2b1d      	cmp	r3, #29
 8017fc6:	d001      	beq.n	8017fcc <__sflush_r+0xac>
 8017fc8:	2b16      	cmp	r3, #22
 8017fca:	d11e      	bne.n	801800a <__sflush_r+0xea>
 8017fcc:	602f      	str	r7, [r5, #0]
 8017fce:	2000      	movs	r0, #0
 8017fd0:	e022      	b.n	8018018 <__sflush_r+0xf8>
 8017fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fd6:	b21b      	sxth	r3, r3
 8017fd8:	e01b      	b.n	8018012 <__sflush_r+0xf2>
 8017fda:	690f      	ldr	r7, [r1, #16]
 8017fdc:	2f00      	cmp	r7, #0
 8017fde:	d0f6      	beq.n	8017fce <__sflush_r+0xae>
 8017fe0:	0793      	lsls	r3, r2, #30
 8017fe2:	680e      	ldr	r6, [r1, #0]
 8017fe4:	bf08      	it	eq
 8017fe6:	694b      	ldreq	r3, [r1, #20]
 8017fe8:	600f      	str	r7, [r1, #0]
 8017fea:	bf18      	it	ne
 8017fec:	2300      	movne	r3, #0
 8017fee:	eba6 0807 	sub.w	r8, r6, r7
 8017ff2:	608b      	str	r3, [r1, #8]
 8017ff4:	f1b8 0f00 	cmp.w	r8, #0
 8017ff8:	dde9      	ble.n	8017fce <__sflush_r+0xae>
 8017ffa:	6a21      	ldr	r1, [r4, #32]
 8017ffc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017ffe:	4643      	mov	r3, r8
 8018000:	463a      	mov	r2, r7
 8018002:	4628      	mov	r0, r5
 8018004:	47b0      	blx	r6
 8018006:	2800      	cmp	r0, #0
 8018008:	dc08      	bgt.n	801801c <__sflush_r+0xfc>
 801800a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801800e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018012:	81a3      	strh	r3, [r4, #12]
 8018014:	f04f 30ff 	mov.w	r0, #4294967295
 8018018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801801c:	4407      	add	r7, r0
 801801e:	eba8 0800 	sub.w	r8, r8, r0
 8018022:	e7e7      	b.n	8017ff4 <__sflush_r+0xd4>
 8018024:	20400001 	.word	0x20400001

08018028 <_fflush_r>:
 8018028:	b538      	push	{r3, r4, r5, lr}
 801802a:	690b      	ldr	r3, [r1, #16]
 801802c:	4605      	mov	r5, r0
 801802e:	460c      	mov	r4, r1
 8018030:	b913      	cbnz	r3, 8018038 <_fflush_r+0x10>
 8018032:	2500      	movs	r5, #0
 8018034:	4628      	mov	r0, r5
 8018036:	bd38      	pop	{r3, r4, r5, pc}
 8018038:	b118      	cbz	r0, 8018042 <_fflush_r+0x1a>
 801803a:	6a03      	ldr	r3, [r0, #32]
 801803c:	b90b      	cbnz	r3, 8018042 <_fflush_r+0x1a>
 801803e:	f7fe f945 	bl	80162cc <__sinit>
 8018042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d0f3      	beq.n	8018032 <_fflush_r+0xa>
 801804a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801804c:	07d0      	lsls	r0, r2, #31
 801804e:	d404      	bmi.n	801805a <_fflush_r+0x32>
 8018050:	0599      	lsls	r1, r3, #22
 8018052:	d402      	bmi.n	801805a <_fflush_r+0x32>
 8018054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018056:	f7fe fb3c 	bl	80166d2 <__retarget_lock_acquire_recursive>
 801805a:	4628      	mov	r0, r5
 801805c:	4621      	mov	r1, r4
 801805e:	f7ff ff5f 	bl	8017f20 <__sflush_r>
 8018062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018064:	07da      	lsls	r2, r3, #31
 8018066:	4605      	mov	r5, r0
 8018068:	d4e4      	bmi.n	8018034 <_fflush_r+0xc>
 801806a:	89a3      	ldrh	r3, [r4, #12]
 801806c:	059b      	lsls	r3, r3, #22
 801806e:	d4e1      	bmi.n	8018034 <_fflush_r+0xc>
 8018070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018072:	f7fe fb2f 	bl	80166d4 <__retarget_lock_release_recursive>
 8018076:	e7dd      	b.n	8018034 <_fflush_r+0xc>

08018078 <__swhatbuf_r>:
 8018078:	b570      	push	{r4, r5, r6, lr}
 801807a:	460c      	mov	r4, r1
 801807c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018080:	2900      	cmp	r1, #0
 8018082:	b096      	sub	sp, #88	@ 0x58
 8018084:	4615      	mov	r5, r2
 8018086:	461e      	mov	r6, r3
 8018088:	da0d      	bge.n	80180a6 <__swhatbuf_r+0x2e>
 801808a:	89a3      	ldrh	r3, [r4, #12]
 801808c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018090:	f04f 0100 	mov.w	r1, #0
 8018094:	bf14      	ite	ne
 8018096:	2340      	movne	r3, #64	@ 0x40
 8018098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801809c:	2000      	movs	r0, #0
 801809e:	6031      	str	r1, [r6, #0]
 80180a0:	602b      	str	r3, [r5, #0]
 80180a2:	b016      	add	sp, #88	@ 0x58
 80180a4:	bd70      	pop	{r4, r5, r6, pc}
 80180a6:	466a      	mov	r2, sp
 80180a8:	f000 f87c 	bl	80181a4 <_fstat_r>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	dbec      	blt.n	801808a <__swhatbuf_r+0x12>
 80180b0:	9901      	ldr	r1, [sp, #4]
 80180b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80180b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80180ba:	4259      	negs	r1, r3
 80180bc:	4159      	adcs	r1, r3
 80180be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80180c2:	e7eb      	b.n	801809c <__swhatbuf_r+0x24>

080180c4 <__smakebuf_r>:
 80180c4:	898b      	ldrh	r3, [r1, #12]
 80180c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180c8:	079d      	lsls	r5, r3, #30
 80180ca:	4606      	mov	r6, r0
 80180cc:	460c      	mov	r4, r1
 80180ce:	d507      	bpl.n	80180e0 <__smakebuf_r+0x1c>
 80180d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80180d4:	6023      	str	r3, [r4, #0]
 80180d6:	6123      	str	r3, [r4, #16]
 80180d8:	2301      	movs	r3, #1
 80180da:	6163      	str	r3, [r4, #20]
 80180dc:	b003      	add	sp, #12
 80180de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e0:	ab01      	add	r3, sp, #4
 80180e2:	466a      	mov	r2, sp
 80180e4:	f7ff ffc8 	bl	8018078 <__swhatbuf_r>
 80180e8:	9f00      	ldr	r7, [sp, #0]
 80180ea:	4605      	mov	r5, r0
 80180ec:	4639      	mov	r1, r7
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7ff f9ce 	bl	8017490 <_malloc_r>
 80180f4:	b948      	cbnz	r0, 801810a <__smakebuf_r+0x46>
 80180f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180fa:	059a      	lsls	r2, r3, #22
 80180fc:	d4ee      	bmi.n	80180dc <__smakebuf_r+0x18>
 80180fe:	f023 0303 	bic.w	r3, r3, #3
 8018102:	f043 0302 	orr.w	r3, r3, #2
 8018106:	81a3      	strh	r3, [r4, #12]
 8018108:	e7e2      	b.n	80180d0 <__smakebuf_r+0xc>
 801810a:	89a3      	ldrh	r3, [r4, #12]
 801810c:	6020      	str	r0, [r4, #0]
 801810e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018112:	81a3      	strh	r3, [r4, #12]
 8018114:	9b01      	ldr	r3, [sp, #4]
 8018116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801811a:	b15b      	cbz	r3, 8018134 <__smakebuf_r+0x70>
 801811c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018120:	4630      	mov	r0, r6
 8018122:	f000 f851 	bl	80181c8 <_isatty_r>
 8018126:	b128      	cbz	r0, 8018134 <__smakebuf_r+0x70>
 8018128:	89a3      	ldrh	r3, [r4, #12]
 801812a:	f023 0303 	bic.w	r3, r3, #3
 801812e:	f043 0301 	orr.w	r3, r3, #1
 8018132:	81a3      	strh	r3, [r4, #12]
 8018134:	89a3      	ldrh	r3, [r4, #12]
 8018136:	431d      	orrs	r5, r3
 8018138:	81a5      	strh	r5, [r4, #12]
 801813a:	e7cf      	b.n	80180dc <__smakebuf_r+0x18>

0801813c <_putc_r>:
 801813c:	b570      	push	{r4, r5, r6, lr}
 801813e:	460d      	mov	r5, r1
 8018140:	4614      	mov	r4, r2
 8018142:	4606      	mov	r6, r0
 8018144:	b118      	cbz	r0, 801814e <_putc_r+0x12>
 8018146:	6a03      	ldr	r3, [r0, #32]
 8018148:	b90b      	cbnz	r3, 801814e <_putc_r+0x12>
 801814a:	f7fe f8bf 	bl	80162cc <__sinit>
 801814e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018150:	07d8      	lsls	r0, r3, #31
 8018152:	d405      	bmi.n	8018160 <_putc_r+0x24>
 8018154:	89a3      	ldrh	r3, [r4, #12]
 8018156:	0599      	lsls	r1, r3, #22
 8018158:	d402      	bmi.n	8018160 <_putc_r+0x24>
 801815a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801815c:	f7fe fab9 	bl	80166d2 <__retarget_lock_acquire_recursive>
 8018160:	68a3      	ldr	r3, [r4, #8]
 8018162:	3b01      	subs	r3, #1
 8018164:	2b00      	cmp	r3, #0
 8018166:	60a3      	str	r3, [r4, #8]
 8018168:	da05      	bge.n	8018176 <_putc_r+0x3a>
 801816a:	69a2      	ldr	r2, [r4, #24]
 801816c:	4293      	cmp	r3, r2
 801816e:	db12      	blt.n	8018196 <_putc_r+0x5a>
 8018170:	b2eb      	uxtb	r3, r5
 8018172:	2b0a      	cmp	r3, #10
 8018174:	d00f      	beq.n	8018196 <_putc_r+0x5a>
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	1c5a      	adds	r2, r3, #1
 801817a:	6022      	str	r2, [r4, #0]
 801817c:	701d      	strb	r5, [r3, #0]
 801817e:	b2ed      	uxtb	r5, r5
 8018180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018182:	07da      	lsls	r2, r3, #31
 8018184:	d405      	bmi.n	8018192 <_putc_r+0x56>
 8018186:	89a3      	ldrh	r3, [r4, #12]
 8018188:	059b      	lsls	r3, r3, #22
 801818a:	d402      	bmi.n	8018192 <_putc_r+0x56>
 801818c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801818e:	f7fe faa1 	bl	80166d4 <__retarget_lock_release_recursive>
 8018192:	4628      	mov	r0, r5
 8018194:	bd70      	pop	{r4, r5, r6, pc}
 8018196:	4629      	mov	r1, r5
 8018198:	4622      	mov	r2, r4
 801819a:	4630      	mov	r0, r6
 801819c:	f7fe f987 	bl	80164ae <__swbuf_r>
 80181a0:	4605      	mov	r5, r0
 80181a2:	e7ed      	b.n	8018180 <_putc_r+0x44>

080181a4 <_fstat_r>:
 80181a4:	b538      	push	{r3, r4, r5, lr}
 80181a6:	4d07      	ldr	r5, [pc, #28]	@ (80181c4 <_fstat_r+0x20>)
 80181a8:	2300      	movs	r3, #0
 80181aa:	4604      	mov	r4, r0
 80181ac:	4608      	mov	r0, r1
 80181ae:	4611      	mov	r1, r2
 80181b0:	602b      	str	r3, [r5, #0]
 80181b2:	f7f0 fcc9 	bl	8008b48 <_fstat>
 80181b6:	1c43      	adds	r3, r0, #1
 80181b8:	d102      	bne.n	80181c0 <_fstat_r+0x1c>
 80181ba:	682b      	ldr	r3, [r5, #0]
 80181bc:	b103      	cbz	r3, 80181c0 <_fstat_r+0x1c>
 80181be:	6023      	str	r3, [r4, #0]
 80181c0:	bd38      	pop	{r3, r4, r5, pc}
 80181c2:	bf00      	nop
 80181c4:	200024cc 	.word	0x200024cc

080181c8 <_isatty_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	4d06      	ldr	r5, [pc, #24]	@ (80181e4 <_isatty_r+0x1c>)
 80181cc:	2300      	movs	r3, #0
 80181ce:	4604      	mov	r4, r0
 80181d0:	4608      	mov	r0, r1
 80181d2:	602b      	str	r3, [r5, #0]
 80181d4:	f7f0 fcc8 	bl	8008b68 <_isatty>
 80181d8:	1c43      	adds	r3, r0, #1
 80181da:	d102      	bne.n	80181e2 <_isatty_r+0x1a>
 80181dc:	682b      	ldr	r3, [r5, #0]
 80181de:	b103      	cbz	r3, 80181e2 <_isatty_r+0x1a>
 80181e0:	6023      	str	r3, [r4, #0]
 80181e2:	bd38      	pop	{r3, r4, r5, pc}
 80181e4:	200024cc 	.word	0x200024cc

080181e8 <_sbrk_r>:
 80181e8:	b538      	push	{r3, r4, r5, lr}
 80181ea:	4d06      	ldr	r5, [pc, #24]	@ (8018204 <_sbrk_r+0x1c>)
 80181ec:	2300      	movs	r3, #0
 80181ee:	4604      	mov	r4, r0
 80181f0:	4608      	mov	r0, r1
 80181f2:	602b      	str	r3, [r5, #0]
 80181f4:	f7f0 fcd0 	bl	8008b98 <_sbrk>
 80181f8:	1c43      	adds	r3, r0, #1
 80181fa:	d102      	bne.n	8018202 <_sbrk_r+0x1a>
 80181fc:	682b      	ldr	r3, [r5, #0]
 80181fe:	b103      	cbz	r3, 8018202 <_sbrk_r+0x1a>
 8018200:	6023      	str	r3, [r4, #0]
 8018202:	bd38      	pop	{r3, r4, r5, pc}
 8018204:	200024cc 	.word	0x200024cc

08018208 <__assert_func>:
 8018208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801820a:	4614      	mov	r4, r2
 801820c:	461a      	mov	r2, r3
 801820e:	4b09      	ldr	r3, [pc, #36]	@ (8018234 <__assert_func+0x2c>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	4605      	mov	r5, r0
 8018214:	68d8      	ldr	r0, [r3, #12]
 8018216:	b14c      	cbz	r4, 801822c <__assert_func+0x24>
 8018218:	4b07      	ldr	r3, [pc, #28]	@ (8018238 <__assert_func+0x30>)
 801821a:	9100      	str	r1, [sp, #0]
 801821c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018220:	4906      	ldr	r1, [pc, #24]	@ (801823c <__assert_func+0x34>)
 8018222:	462b      	mov	r3, r5
 8018224:	f000 f842 	bl	80182ac <fiprintf>
 8018228:	f000 f852 	bl	80182d0 <abort>
 801822c:	4b04      	ldr	r3, [pc, #16]	@ (8018240 <__assert_func+0x38>)
 801822e:	461c      	mov	r4, r3
 8018230:	e7f3      	b.n	801821a <__assert_func+0x12>
 8018232:	bf00      	nop
 8018234:	2000014c 	.word	0x2000014c
 8018238:	0801c499 	.word	0x0801c499
 801823c:	0801c4a6 	.word	0x0801c4a6
 8018240:	0801c4d4 	.word	0x0801c4d4

08018244 <_calloc_r>:
 8018244:	b570      	push	{r4, r5, r6, lr}
 8018246:	fba1 5402 	umull	r5, r4, r1, r2
 801824a:	b934      	cbnz	r4, 801825a <_calloc_r+0x16>
 801824c:	4629      	mov	r1, r5
 801824e:	f7ff f91f 	bl	8017490 <_malloc_r>
 8018252:	4606      	mov	r6, r0
 8018254:	b928      	cbnz	r0, 8018262 <_calloc_r+0x1e>
 8018256:	4630      	mov	r0, r6
 8018258:	bd70      	pop	{r4, r5, r6, pc}
 801825a:	220c      	movs	r2, #12
 801825c:	6002      	str	r2, [r0, #0]
 801825e:	2600      	movs	r6, #0
 8018260:	e7f9      	b.n	8018256 <_calloc_r+0x12>
 8018262:	462a      	mov	r2, r5
 8018264:	4621      	mov	r1, r4
 8018266:	f7fe f9b7 	bl	80165d8 <memset>
 801826a:	e7f4      	b.n	8018256 <_calloc_r+0x12>

0801826c <__ascii_mbtowc>:
 801826c:	b082      	sub	sp, #8
 801826e:	b901      	cbnz	r1, 8018272 <__ascii_mbtowc+0x6>
 8018270:	a901      	add	r1, sp, #4
 8018272:	b142      	cbz	r2, 8018286 <__ascii_mbtowc+0x1a>
 8018274:	b14b      	cbz	r3, 801828a <__ascii_mbtowc+0x1e>
 8018276:	7813      	ldrb	r3, [r2, #0]
 8018278:	600b      	str	r3, [r1, #0]
 801827a:	7812      	ldrb	r2, [r2, #0]
 801827c:	1e10      	subs	r0, r2, #0
 801827e:	bf18      	it	ne
 8018280:	2001      	movne	r0, #1
 8018282:	b002      	add	sp, #8
 8018284:	4770      	bx	lr
 8018286:	4610      	mov	r0, r2
 8018288:	e7fb      	b.n	8018282 <__ascii_mbtowc+0x16>
 801828a:	f06f 0001 	mvn.w	r0, #1
 801828e:	e7f8      	b.n	8018282 <__ascii_mbtowc+0x16>

08018290 <__ascii_wctomb>:
 8018290:	4603      	mov	r3, r0
 8018292:	4608      	mov	r0, r1
 8018294:	b141      	cbz	r1, 80182a8 <__ascii_wctomb+0x18>
 8018296:	2aff      	cmp	r2, #255	@ 0xff
 8018298:	d904      	bls.n	80182a4 <__ascii_wctomb+0x14>
 801829a:	228a      	movs	r2, #138	@ 0x8a
 801829c:	601a      	str	r2, [r3, #0]
 801829e:	f04f 30ff 	mov.w	r0, #4294967295
 80182a2:	4770      	bx	lr
 80182a4:	700a      	strb	r2, [r1, #0]
 80182a6:	2001      	movs	r0, #1
 80182a8:	4770      	bx	lr
	...

080182ac <fiprintf>:
 80182ac:	b40e      	push	{r1, r2, r3}
 80182ae:	b503      	push	{r0, r1, lr}
 80182b0:	4601      	mov	r1, r0
 80182b2:	ab03      	add	r3, sp, #12
 80182b4:	4805      	ldr	r0, [pc, #20]	@ (80182cc <fiprintf+0x20>)
 80182b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80182ba:	6800      	ldr	r0, [r0, #0]
 80182bc:	9301      	str	r3, [sp, #4]
 80182be:	f7ff fd17 	bl	8017cf0 <_vfiprintf_r>
 80182c2:	b002      	add	sp, #8
 80182c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80182c8:	b003      	add	sp, #12
 80182ca:	4770      	bx	lr
 80182cc:	2000014c 	.word	0x2000014c

080182d0 <abort>:
 80182d0:	b508      	push	{r3, lr}
 80182d2:	2006      	movs	r0, #6
 80182d4:	f000 f82c 	bl	8018330 <raise>
 80182d8:	2001      	movs	r0, #1
 80182da:	f7f0 fbe5 	bl	8008aa8 <_exit>

080182de <_raise_r>:
 80182de:	291f      	cmp	r1, #31
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4605      	mov	r5, r0
 80182e4:	460c      	mov	r4, r1
 80182e6:	d904      	bls.n	80182f2 <_raise_r+0x14>
 80182e8:	2316      	movs	r3, #22
 80182ea:	6003      	str	r3, [r0, #0]
 80182ec:	f04f 30ff 	mov.w	r0, #4294967295
 80182f0:	bd38      	pop	{r3, r4, r5, pc}
 80182f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80182f4:	b112      	cbz	r2, 80182fc <_raise_r+0x1e>
 80182f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80182fa:	b94b      	cbnz	r3, 8018310 <_raise_r+0x32>
 80182fc:	4628      	mov	r0, r5
 80182fe:	f000 f831 	bl	8018364 <_getpid_r>
 8018302:	4622      	mov	r2, r4
 8018304:	4601      	mov	r1, r0
 8018306:	4628      	mov	r0, r5
 8018308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801830c:	f000 b818 	b.w	8018340 <_kill_r>
 8018310:	2b01      	cmp	r3, #1
 8018312:	d00a      	beq.n	801832a <_raise_r+0x4c>
 8018314:	1c59      	adds	r1, r3, #1
 8018316:	d103      	bne.n	8018320 <_raise_r+0x42>
 8018318:	2316      	movs	r3, #22
 801831a:	6003      	str	r3, [r0, #0]
 801831c:	2001      	movs	r0, #1
 801831e:	e7e7      	b.n	80182f0 <_raise_r+0x12>
 8018320:	2100      	movs	r1, #0
 8018322:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018326:	4620      	mov	r0, r4
 8018328:	4798      	blx	r3
 801832a:	2000      	movs	r0, #0
 801832c:	e7e0      	b.n	80182f0 <_raise_r+0x12>
	...

08018330 <raise>:
 8018330:	4b02      	ldr	r3, [pc, #8]	@ (801833c <raise+0xc>)
 8018332:	4601      	mov	r1, r0
 8018334:	6818      	ldr	r0, [r3, #0]
 8018336:	f7ff bfd2 	b.w	80182de <_raise_r>
 801833a:	bf00      	nop
 801833c:	2000014c 	.word	0x2000014c

08018340 <_kill_r>:
 8018340:	b538      	push	{r3, r4, r5, lr}
 8018342:	4d07      	ldr	r5, [pc, #28]	@ (8018360 <_kill_r+0x20>)
 8018344:	2300      	movs	r3, #0
 8018346:	4604      	mov	r4, r0
 8018348:	4608      	mov	r0, r1
 801834a:	4611      	mov	r1, r2
 801834c:	602b      	str	r3, [r5, #0]
 801834e:	f7f0 fb9b 	bl	8008a88 <_kill>
 8018352:	1c43      	adds	r3, r0, #1
 8018354:	d102      	bne.n	801835c <_kill_r+0x1c>
 8018356:	682b      	ldr	r3, [r5, #0]
 8018358:	b103      	cbz	r3, 801835c <_kill_r+0x1c>
 801835a:	6023      	str	r3, [r4, #0]
 801835c:	bd38      	pop	{r3, r4, r5, pc}
 801835e:	bf00      	nop
 8018360:	200024cc 	.word	0x200024cc

08018364 <_getpid_r>:
 8018364:	f7f0 bb88 	b.w	8008a78 <_getpid>

08018368 <pow>:
 8018368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801836a:	ed2d 8b02 	vpush	{d8}
 801836e:	eeb0 8a40 	vmov.f32	s16, s0
 8018372:	eef0 8a60 	vmov.f32	s17, s1
 8018376:	ec55 4b11 	vmov	r4, r5, d1
 801837a:	f000 f871 	bl	8018460 <__ieee754_pow>
 801837e:	4622      	mov	r2, r4
 8018380:	462b      	mov	r3, r5
 8018382:	4620      	mov	r0, r4
 8018384:	4629      	mov	r1, r5
 8018386:	ec57 6b10 	vmov	r6, r7, d0
 801838a:	f7e8 fba7 	bl	8000adc <__aeabi_dcmpun>
 801838e:	2800      	cmp	r0, #0
 8018390:	d13b      	bne.n	801840a <pow+0xa2>
 8018392:	ec51 0b18 	vmov	r0, r1, d8
 8018396:	2200      	movs	r2, #0
 8018398:	2300      	movs	r3, #0
 801839a:	f7e8 fb6d 	bl	8000a78 <__aeabi_dcmpeq>
 801839e:	b1b8      	cbz	r0, 80183d0 <pow+0x68>
 80183a0:	2200      	movs	r2, #0
 80183a2:	2300      	movs	r3, #0
 80183a4:	4620      	mov	r0, r4
 80183a6:	4629      	mov	r1, r5
 80183a8:	f7e8 fb66 	bl	8000a78 <__aeabi_dcmpeq>
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d146      	bne.n	801843e <pow+0xd6>
 80183b0:	ec45 4b10 	vmov	d0, r4, r5
 80183b4:	f000 f848 	bl	8018448 <finite>
 80183b8:	b338      	cbz	r0, 801840a <pow+0xa2>
 80183ba:	2200      	movs	r2, #0
 80183bc:	2300      	movs	r3, #0
 80183be:	4620      	mov	r0, r4
 80183c0:	4629      	mov	r1, r5
 80183c2:	f7e8 fb63 	bl	8000a8c <__aeabi_dcmplt>
 80183c6:	b300      	cbz	r0, 801840a <pow+0xa2>
 80183c8:	f7fe f958 	bl	801667c <__errno>
 80183cc:	2322      	movs	r3, #34	@ 0x22
 80183ce:	e01b      	b.n	8018408 <pow+0xa0>
 80183d0:	ec47 6b10 	vmov	d0, r6, r7
 80183d4:	f000 f838 	bl	8018448 <finite>
 80183d8:	b9e0      	cbnz	r0, 8018414 <pow+0xac>
 80183da:	eeb0 0a48 	vmov.f32	s0, s16
 80183de:	eef0 0a68 	vmov.f32	s1, s17
 80183e2:	f000 f831 	bl	8018448 <finite>
 80183e6:	b1a8      	cbz	r0, 8018414 <pow+0xac>
 80183e8:	ec45 4b10 	vmov	d0, r4, r5
 80183ec:	f000 f82c 	bl	8018448 <finite>
 80183f0:	b180      	cbz	r0, 8018414 <pow+0xac>
 80183f2:	4632      	mov	r2, r6
 80183f4:	463b      	mov	r3, r7
 80183f6:	4630      	mov	r0, r6
 80183f8:	4639      	mov	r1, r7
 80183fa:	f7e8 fb6f 	bl	8000adc <__aeabi_dcmpun>
 80183fe:	2800      	cmp	r0, #0
 8018400:	d0e2      	beq.n	80183c8 <pow+0x60>
 8018402:	f7fe f93b 	bl	801667c <__errno>
 8018406:	2321      	movs	r3, #33	@ 0x21
 8018408:	6003      	str	r3, [r0, #0]
 801840a:	ecbd 8b02 	vpop	{d8}
 801840e:	ec47 6b10 	vmov	d0, r6, r7
 8018412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018414:	2200      	movs	r2, #0
 8018416:	2300      	movs	r3, #0
 8018418:	4630      	mov	r0, r6
 801841a:	4639      	mov	r1, r7
 801841c:	f7e8 fb2c 	bl	8000a78 <__aeabi_dcmpeq>
 8018420:	2800      	cmp	r0, #0
 8018422:	d0f2      	beq.n	801840a <pow+0xa2>
 8018424:	eeb0 0a48 	vmov.f32	s0, s16
 8018428:	eef0 0a68 	vmov.f32	s1, s17
 801842c:	f000 f80c 	bl	8018448 <finite>
 8018430:	2800      	cmp	r0, #0
 8018432:	d0ea      	beq.n	801840a <pow+0xa2>
 8018434:	ec45 4b10 	vmov	d0, r4, r5
 8018438:	f000 f806 	bl	8018448 <finite>
 801843c:	e7c3      	b.n	80183c6 <pow+0x5e>
 801843e:	4f01      	ldr	r7, [pc, #4]	@ (8018444 <pow+0xdc>)
 8018440:	2600      	movs	r6, #0
 8018442:	e7e2      	b.n	801840a <pow+0xa2>
 8018444:	3ff00000 	.word	0x3ff00000

08018448 <finite>:
 8018448:	b082      	sub	sp, #8
 801844a:	ed8d 0b00 	vstr	d0, [sp]
 801844e:	9801      	ldr	r0, [sp, #4]
 8018450:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8018454:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8018458:	0fc0      	lsrs	r0, r0, #31
 801845a:	b002      	add	sp, #8
 801845c:	4770      	bx	lr
	...

08018460 <__ieee754_pow>:
 8018460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018464:	b091      	sub	sp, #68	@ 0x44
 8018466:	ed8d 1b00 	vstr	d1, [sp]
 801846a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801846e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8018472:	ea5a 0001 	orrs.w	r0, sl, r1
 8018476:	ec57 6b10 	vmov	r6, r7, d0
 801847a:	d113      	bne.n	80184a4 <__ieee754_pow+0x44>
 801847c:	19b3      	adds	r3, r6, r6
 801847e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8018482:	4152      	adcs	r2, r2
 8018484:	4298      	cmp	r0, r3
 8018486:	4b9a      	ldr	r3, [pc, #616]	@ (80186f0 <__ieee754_pow+0x290>)
 8018488:	4193      	sbcs	r3, r2
 801848a:	f080 84ee 	bcs.w	8018e6a <__ieee754_pow+0xa0a>
 801848e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018492:	4630      	mov	r0, r6
 8018494:	4639      	mov	r1, r7
 8018496:	f7e7 fed1 	bl	800023c <__adddf3>
 801849a:	ec41 0b10 	vmov	d0, r0, r1
 801849e:	b011      	add	sp, #68	@ 0x44
 80184a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a4:	4a93      	ldr	r2, [pc, #588]	@ (80186f4 <__ieee754_pow+0x294>)
 80184a6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80184aa:	4295      	cmp	r5, r2
 80184ac:	46b8      	mov	r8, r7
 80184ae:	4633      	mov	r3, r6
 80184b0:	d80a      	bhi.n	80184c8 <__ieee754_pow+0x68>
 80184b2:	d104      	bne.n	80184be <__ieee754_pow+0x5e>
 80184b4:	2e00      	cmp	r6, #0
 80184b6:	d1ea      	bne.n	801848e <__ieee754_pow+0x2e>
 80184b8:	45aa      	cmp	sl, r5
 80184ba:	d8e8      	bhi.n	801848e <__ieee754_pow+0x2e>
 80184bc:	e001      	b.n	80184c2 <__ieee754_pow+0x62>
 80184be:	4592      	cmp	sl, r2
 80184c0:	d802      	bhi.n	80184c8 <__ieee754_pow+0x68>
 80184c2:	4592      	cmp	sl, r2
 80184c4:	d10f      	bne.n	80184e6 <__ieee754_pow+0x86>
 80184c6:	b171      	cbz	r1, 80184e6 <__ieee754_pow+0x86>
 80184c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80184cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80184d0:	ea58 0803 	orrs.w	r8, r8, r3
 80184d4:	d1db      	bne.n	801848e <__ieee754_pow+0x2e>
 80184d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80184da:	18db      	adds	r3, r3, r3
 80184dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80184e0:	4152      	adcs	r2, r2
 80184e2:	4598      	cmp	r8, r3
 80184e4:	e7cf      	b.n	8018486 <__ieee754_pow+0x26>
 80184e6:	f1b8 0f00 	cmp.w	r8, #0
 80184ea:	46ab      	mov	fp, r5
 80184ec:	da43      	bge.n	8018576 <__ieee754_pow+0x116>
 80184ee:	4a82      	ldr	r2, [pc, #520]	@ (80186f8 <__ieee754_pow+0x298>)
 80184f0:	4592      	cmp	sl, r2
 80184f2:	d856      	bhi.n	80185a2 <__ieee754_pow+0x142>
 80184f4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80184f8:	4592      	cmp	sl, r2
 80184fa:	f240 84c5 	bls.w	8018e88 <__ieee754_pow+0xa28>
 80184fe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8018502:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8018506:	2a14      	cmp	r2, #20
 8018508:	dd18      	ble.n	801853c <__ieee754_pow+0xdc>
 801850a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801850e:	fa21 f402 	lsr.w	r4, r1, r2
 8018512:	fa04 f202 	lsl.w	r2, r4, r2
 8018516:	428a      	cmp	r2, r1
 8018518:	f040 84b6 	bne.w	8018e88 <__ieee754_pow+0xa28>
 801851c:	f004 0401 	and.w	r4, r4, #1
 8018520:	f1c4 0402 	rsb	r4, r4, #2
 8018524:	2900      	cmp	r1, #0
 8018526:	d159      	bne.n	80185dc <__ieee754_pow+0x17c>
 8018528:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801852c:	d148      	bne.n	80185c0 <__ieee754_pow+0x160>
 801852e:	4632      	mov	r2, r6
 8018530:	463b      	mov	r3, r7
 8018532:	4630      	mov	r0, r6
 8018534:	4639      	mov	r1, r7
 8018536:	f7e8 f837 	bl	80005a8 <__aeabi_dmul>
 801853a:	e7ae      	b.n	801849a <__ieee754_pow+0x3a>
 801853c:	2900      	cmp	r1, #0
 801853e:	d14c      	bne.n	80185da <__ieee754_pow+0x17a>
 8018540:	f1c2 0214 	rsb	r2, r2, #20
 8018544:	fa4a f402 	asr.w	r4, sl, r2
 8018548:	fa04 f202 	lsl.w	r2, r4, r2
 801854c:	4552      	cmp	r2, sl
 801854e:	f040 8498 	bne.w	8018e82 <__ieee754_pow+0xa22>
 8018552:	f004 0401 	and.w	r4, r4, #1
 8018556:	f1c4 0402 	rsb	r4, r4, #2
 801855a:	4a68      	ldr	r2, [pc, #416]	@ (80186fc <__ieee754_pow+0x29c>)
 801855c:	4592      	cmp	sl, r2
 801855e:	d1e3      	bne.n	8018528 <__ieee754_pow+0xc8>
 8018560:	f1b9 0f00 	cmp.w	r9, #0
 8018564:	f280 8489 	bge.w	8018e7a <__ieee754_pow+0xa1a>
 8018568:	4964      	ldr	r1, [pc, #400]	@ (80186fc <__ieee754_pow+0x29c>)
 801856a:	4632      	mov	r2, r6
 801856c:	463b      	mov	r3, r7
 801856e:	2000      	movs	r0, #0
 8018570:	f7e8 f944 	bl	80007fc <__aeabi_ddiv>
 8018574:	e791      	b.n	801849a <__ieee754_pow+0x3a>
 8018576:	2400      	movs	r4, #0
 8018578:	bb81      	cbnz	r1, 80185dc <__ieee754_pow+0x17c>
 801857a:	4a5e      	ldr	r2, [pc, #376]	@ (80186f4 <__ieee754_pow+0x294>)
 801857c:	4592      	cmp	sl, r2
 801857e:	d1ec      	bne.n	801855a <__ieee754_pow+0xfa>
 8018580:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8018584:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8018588:	431a      	orrs	r2, r3
 801858a:	f000 846e 	beq.w	8018e6a <__ieee754_pow+0xa0a>
 801858e:	4b5c      	ldr	r3, [pc, #368]	@ (8018700 <__ieee754_pow+0x2a0>)
 8018590:	429d      	cmp	r5, r3
 8018592:	d908      	bls.n	80185a6 <__ieee754_pow+0x146>
 8018594:	f1b9 0f00 	cmp.w	r9, #0
 8018598:	f280 846b 	bge.w	8018e72 <__ieee754_pow+0xa12>
 801859c:	2000      	movs	r0, #0
 801859e:	2100      	movs	r1, #0
 80185a0:	e77b      	b.n	801849a <__ieee754_pow+0x3a>
 80185a2:	2402      	movs	r4, #2
 80185a4:	e7e8      	b.n	8018578 <__ieee754_pow+0x118>
 80185a6:	f1b9 0f00 	cmp.w	r9, #0
 80185aa:	f04f 0000 	mov.w	r0, #0
 80185ae:	f04f 0100 	mov.w	r1, #0
 80185b2:	f6bf af72 	bge.w	801849a <__ieee754_pow+0x3a>
 80185b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80185ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80185be:	e76c      	b.n	801849a <__ieee754_pow+0x3a>
 80185c0:	4a50      	ldr	r2, [pc, #320]	@ (8018704 <__ieee754_pow+0x2a4>)
 80185c2:	4591      	cmp	r9, r2
 80185c4:	d10a      	bne.n	80185dc <__ieee754_pow+0x17c>
 80185c6:	f1b8 0f00 	cmp.w	r8, #0
 80185ca:	db07      	blt.n	80185dc <__ieee754_pow+0x17c>
 80185cc:	ec47 6b10 	vmov	d0, r6, r7
 80185d0:	b011      	add	sp, #68	@ 0x44
 80185d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d6:	f000 bd4f 	b.w	8019078 <__ieee754_sqrt>
 80185da:	2400      	movs	r4, #0
 80185dc:	ec47 6b10 	vmov	d0, r6, r7
 80185e0:	9302      	str	r3, [sp, #8]
 80185e2:	f000 fc87 	bl	8018ef4 <fabs>
 80185e6:	9b02      	ldr	r3, [sp, #8]
 80185e8:	ec51 0b10 	vmov	r0, r1, d0
 80185ec:	bb43      	cbnz	r3, 8018640 <__ieee754_pow+0x1e0>
 80185ee:	4b43      	ldr	r3, [pc, #268]	@ (80186fc <__ieee754_pow+0x29c>)
 80185f0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d000      	beq.n	80185fa <__ieee754_pow+0x19a>
 80185f8:	bb15      	cbnz	r5, 8018640 <__ieee754_pow+0x1e0>
 80185fa:	f1b9 0f00 	cmp.w	r9, #0
 80185fe:	da05      	bge.n	801860c <__ieee754_pow+0x1ac>
 8018600:	4602      	mov	r2, r0
 8018602:	460b      	mov	r3, r1
 8018604:	2000      	movs	r0, #0
 8018606:	493d      	ldr	r1, [pc, #244]	@ (80186fc <__ieee754_pow+0x29c>)
 8018608:	f7e8 f8f8 	bl	80007fc <__aeabi_ddiv>
 801860c:	f1b8 0f00 	cmp.w	r8, #0
 8018610:	f6bf af43 	bge.w	801849a <__ieee754_pow+0x3a>
 8018614:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8018618:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801861c:	4325      	orrs	r5, r4
 801861e:	d108      	bne.n	8018632 <__ieee754_pow+0x1d2>
 8018620:	4602      	mov	r2, r0
 8018622:	460b      	mov	r3, r1
 8018624:	4610      	mov	r0, r2
 8018626:	4619      	mov	r1, r3
 8018628:	f7e7 fe06 	bl	8000238 <__aeabi_dsub>
 801862c:	4602      	mov	r2, r0
 801862e:	460b      	mov	r3, r1
 8018630:	e79e      	b.n	8018570 <__ieee754_pow+0x110>
 8018632:	2c01      	cmp	r4, #1
 8018634:	f47f af31 	bne.w	801849a <__ieee754_pow+0x3a>
 8018638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801863c:	4619      	mov	r1, r3
 801863e:	e72c      	b.n	801849a <__ieee754_pow+0x3a>
 8018640:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8018644:	3b01      	subs	r3, #1
 8018646:	ea53 0204 	orrs.w	r2, r3, r4
 801864a:	d102      	bne.n	8018652 <__ieee754_pow+0x1f2>
 801864c:	4632      	mov	r2, r6
 801864e:	463b      	mov	r3, r7
 8018650:	e7e8      	b.n	8018624 <__ieee754_pow+0x1c4>
 8018652:	3c01      	subs	r4, #1
 8018654:	431c      	orrs	r4, r3
 8018656:	d016      	beq.n	8018686 <__ieee754_pow+0x226>
 8018658:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80186e0 <__ieee754_pow+0x280>
 801865c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8018660:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018664:	f240 8110 	bls.w	8018888 <__ieee754_pow+0x428>
 8018668:	4b27      	ldr	r3, [pc, #156]	@ (8018708 <__ieee754_pow+0x2a8>)
 801866a:	459a      	cmp	sl, r3
 801866c:	4b24      	ldr	r3, [pc, #144]	@ (8018700 <__ieee754_pow+0x2a0>)
 801866e:	d916      	bls.n	801869e <__ieee754_pow+0x23e>
 8018670:	429d      	cmp	r5, r3
 8018672:	d80b      	bhi.n	801868c <__ieee754_pow+0x22c>
 8018674:	f1b9 0f00 	cmp.w	r9, #0
 8018678:	da0b      	bge.n	8018692 <__ieee754_pow+0x232>
 801867a:	2000      	movs	r0, #0
 801867c:	b011      	add	sp, #68	@ 0x44
 801867e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018682:	f000 bcf1 	b.w	8019068 <__math_oflow>
 8018686:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80186e8 <__ieee754_pow+0x288>
 801868a:	e7e7      	b.n	801865c <__ieee754_pow+0x1fc>
 801868c:	f1b9 0f00 	cmp.w	r9, #0
 8018690:	dcf3      	bgt.n	801867a <__ieee754_pow+0x21a>
 8018692:	2000      	movs	r0, #0
 8018694:	b011      	add	sp, #68	@ 0x44
 8018696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869a:	f000 bcdd 	b.w	8019058 <__math_uflow>
 801869e:	429d      	cmp	r5, r3
 80186a0:	d20c      	bcs.n	80186bc <__ieee754_pow+0x25c>
 80186a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186a6:	2200      	movs	r2, #0
 80186a8:	2300      	movs	r3, #0
 80186aa:	f7e8 f9ef 	bl	8000a8c <__aeabi_dcmplt>
 80186ae:	3800      	subs	r0, #0
 80186b0:	bf18      	it	ne
 80186b2:	2001      	movne	r0, #1
 80186b4:	f1b9 0f00 	cmp.w	r9, #0
 80186b8:	daec      	bge.n	8018694 <__ieee754_pow+0x234>
 80186ba:	e7df      	b.n	801867c <__ieee754_pow+0x21c>
 80186bc:	4b0f      	ldr	r3, [pc, #60]	@ (80186fc <__ieee754_pow+0x29c>)
 80186be:	429d      	cmp	r5, r3
 80186c0:	f04f 0200 	mov.w	r2, #0
 80186c4:	d922      	bls.n	801870c <__ieee754_pow+0x2ac>
 80186c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186ca:	2300      	movs	r3, #0
 80186cc:	f7e8 f9de 	bl	8000a8c <__aeabi_dcmplt>
 80186d0:	3800      	subs	r0, #0
 80186d2:	bf18      	it	ne
 80186d4:	2001      	movne	r0, #1
 80186d6:	f1b9 0f00 	cmp.w	r9, #0
 80186da:	dccf      	bgt.n	801867c <__ieee754_pow+0x21c>
 80186dc:	e7da      	b.n	8018694 <__ieee754_pow+0x234>
 80186de:	bf00      	nop
 80186e0:	00000000 	.word	0x00000000
 80186e4:	3ff00000 	.word	0x3ff00000
 80186e8:	00000000 	.word	0x00000000
 80186ec:	bff00000 	.word	0xbff00000
 80186f0:	fff00000 	.word	0xfff00000
 80186f4:	7ff00000 	.word	0x7ff00000
 80186f8:	433fffff 	.word	0x433fffff
 80186fc:	3ff00000 	.word	0x3ff00000
 8018700:	3fefffff 	.word	0x3fefffff
 8018704:	3fe00000 	.word	0x3fe00000
 8018708:	43f00000 	.word	0x43f00000
 801870c:	4b5a      	ldr	r3, [pc, #360]	@ (8018878 <__ieee754_pow+0x418>)
 801870e:	f7e7 fd93 	bl	8000238 <__aeabi_dsub>
 8018712:	a351      	add	r3, pc, #324	@ (adr r3, 8018858 <__ieee754_pow+0x3f8>)
 8018714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018718:	4604      	mov	r4, r0
 801871a:	460d      	mov	r5, r1
 801871c:	f7e7 ff44 	bl	80005a8 <__aeabi_dmul>
 8018720:	a34f      	add	r3, pc, #316	@ (adr r3, 8018860 <__ieee754_pow+0x400>)
 8018722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018726:	4606      	mov	r6, r0
 8018728:	460f      	mov	r7, r1
 801872a:	4620      	mov	r0, r4
 801872c:	4629      	mov	r1, r5
 801872e:	f7e7 ff3b 	bl	80005a8 <__aeabi_dmul>
 8018732:	4b52      	ldr	r3, [pc, #328]	@ (801887c <__ieee754_pow+0x41c>)
 8018734:	4682      	mov	sl, r0
 8018736:	468b      	mov	fp, r1
 8018738:	2200      	movs	r2, #0
 801873a:	4620      	mov	r0, r4
 801873c:	4629      	mov	r1, r5
 801873e:	f7e7 ff33 	bl	80005a8 <__aeabi_dmul>
 8018742:	4602      	mov	r2, r0
 8018744:	460b      	mov	r3, r1
 8018746:	a148      	add	r1, pc, #288	@ (adr r1, 8018868 <__ieee754_pow+0x408>)
 8018748:	e9d1 0100 	ldrd	r0, r1, [r1]
 801874c:	f7e7 fd74 	bl	8000238 <__aeabi_dsub>
 8018750:	4622      	mov	r2, r4
 8018752:	462b      	mov	r3, r5
 8018754:	f7e7 ff28 	bl	80005a8 <__aeabi_dmul>
 8018758:	4602      	mov	r2, r0
 801875a:	460b      	mov	r3, r1
 801875c:	2000      	movs	r0, #0
 801875e:	4948      	ldr	r1, [pc, #288]	@ (8018880 <__ieee754_pow+0x420>)
 8018760:	f7e7 fd6a 	bl	8000238 <__aeabi_dsub>
 8018764:	4622      	mov	r2, r4
 8018766:	4680      	mov	r8, r0
 8018768:	4689      	mov	r9, r1
 801876a:	462b      	mov	r3, r5
 801876c:	4620      	mov	r0, r4
 801876e:	4629      	mov	r1, r5
 8018770:	f7e7 ff1a 	bl	80005a8 <__aeabi_dmul>
 8018774:	4602      	mov	r2, r0
 8018776:	460b      	mov	r3, r1
 8018778:	4640      	mov	r0, r8
 801877a:	4649      	mov	r1, r9
 801877c:	f7e7 ff14 	bl	80005a8 <__aeabi_dmul>
 8018780:	a33b      	add	r3, pc, #236	@ (adr r3, 8018870 <__ieee754_pow+0x410>)
 8018782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018786:	f7e7 ff0f 	bl	80005a8 <__aeabi_dmul>
 801878a:	4602      	mov	r2, r0
 801878c:	460b      	mov	r3, r1
 801878e:	4650      	mov	r0, sl
 8018790:	4659      	mov	r1, fp
 8018792:	f7e7 fd51 	bl	8000238 <__aeabi_dsub>
 8018796:	4602      	mov	r2, r0
 8018798:	460b      	mov	r3, r1
 801879a:	4680      	mov	r8, r0
 801879c:	4689      	mov	r9, r1
 801879e:	4630      	mov	r0, r6
 80187a0:	4639      	mov	r1, r7
 80187a2:	f7e7 fd4b 	bl	800023c <__adddf3>
 80187a6:	2400      	movs	r4, #0
 80187a8:	4632      	mov	r2, r6
 80187aa:	463b      	mov	r3, r7
 80187ac:	4620      	mov	r0, r4
 80187ae:	460d      	mov	r5, r1
 80187b0:	f7e7 fd42 	bl	8000238 <__aeabi_dsub>
 80187b4:	4602      	mov	r2, r0
 80187b6:	460b      	mov	r3, r1
 80187b8:	4640      	mov	r0, r8
 80187ba:	4649      	mov	r1, r9
 80187bc:	f7e7 fd3c 	bl	8000238 <__aeabi_dsub>
 80187c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80187c8:	2300      	movs	r3, #0
 80187ca:	9304      	str	r3, [sp, #16]
 80187cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80187d0:	4606      	mov	r6, r0
 80187d2:	460f      	mov	r7, r1
 80187d4:	465b      	mov	r3, fp
 80187d6:	4652      	mov	r2, sl
 80187d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187dc:	f7e7 fd2c 	bl	8000238 <__aeabi_dsub>
 80187e0:	4622      	mov	r2, r4
 80187e2:	462b      	mov	r3, r5
 80187e4:	f7e7 fee0 	bl	80005a8 <__aeabi_dmul>
 80187e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187ec:	4680      	mov	r8, r0
 80187ee:	4689      	mov	r9, r1
 80187f0:	4630      	mov	r0, r6
 80187f2:	4639      	mov	r1, r7
 80187f4:	f7e7 fed8 	bl	80005a8 <__aeabi_dmul>
 80187f8:	4602      	mov	r2, r0
 80187fa:	460b      	mov	r3, r1
 80187fc:	4640      	mov	r0, r8
 80187fe:	4649      	mov	r1, r9
 8018800:	f7e7 fd1c 	bl	800023c <__adddf3>
 8018804:	465b      	mov	r3, fp
 8018806:	4606      	mov	r6, r0
 8018808:	460f      	mov	r7, r1
 801880a:	4652      	mov	r2, sl
 801880c:	4620      	mov	r0, r4
 801880e:	4629      	mov	r1, r5
 8018810:	f7e7 feca 	bl	80005a8 <__aeabi_dmul>
 8018814:	460b      	mov	r3, r1
 8018816:	4602      	mov	r2, r0
 8018818:	4680      	mov	r8, r0
 801881a:	4689      	mov	r9, r1
 801881c:	4630      	mov	r0, r6
 801881e:	4639      	mov	r1, r7
 8018820:	f7e7 fd0c 	bl	800023c <__adddf3>
 8018824:	4b17      	ldr	r3, [pc, #92]	@ (8018884 <__ieee754_pow+0x424>)
 8018826:	4299      	cmp	r1, r3
 8018828:	4604      	mov	r4, r0
 801882a:	460d      	mov	r5, r1
 801882c:	468b      	mov	fp, r1
 801882e:	f340 820b 	ble.w	8018c48 <__ieee754_pow+0x7e8>
 8018832:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8018836:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801883a:	4303      	orrs	r3, r0
 801883c:	f000 81ea 	beq.w	8018c14 <__ieee754_pow+0x7b4>
 8018840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018844:	2200      	movs	r2, #0
 8018846:	2300      	movs	r3, #0
 8018848:	f7e8 f920 	bl	8000a8c <__aeabi_dcmplt>
 801884c:	3800      	subs	r0, #0
 801884e:	bf18      	it	ne
 8018850:	2001      	movne	r0, #1
 8018852:	e713      	b.n	801867c <__ieee754_pow+0x21c>
 8018854:	f3af 8000 	nop.w
 8018858:	60000000 	.word	0x60000000
 801885c:	3ff71547 	.word	0x3ff71547
 8018860:	f85ddf44 	.word	0xf85ddf44
 8018864:	3e54ae0b 	.word	0x3e54ae0b
 8018868:	55555555 	.word	0x55555555
 801886c:	3fd55555 	.word	0x3fd55555
 8018870:	652b82fe 	.word	0x652b82fe
 8018874:	3ff71547 	.word	0x3ff71547
 8018878:	3ff00000 	.word	0x3ff00000
 801887c:	3fd00000 	.word	0x3fd00000
 8018880:	3fe00000 	.word	0x3fe00000
 8018884:	408fffff 	.word	0x408fffff
 8018888:	4bd5      	ldr	r3, [pc, #852]	@ (8018be0 <__ieee754_pow+0x780>)
 801888a:	ea08 0303 	and.w	r3, r8, r3
 801888e:	2200      	movs	r2, #0
 8018890:	b92b      	cbnz	r3, 801889e <__ieee754_pow+0x43e>
 8018892:	4bd4      	ldr	r3, [pc, #848]	@ (8018be4 <__ieee754_pow+0x784>)
 8018894:	f7e7 fe88 	bl	80005a8 <__aeabi_dmul>
 8018898:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801889c:	468b      	mov	fp, r1
 801889e:	ea4f 532b 	mov.w	r3, fp, asr #20
 80188a2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80188a6:	4413      	add	r3, r2
 80188a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80188aa:	4bcf      	ldr	r3, [pc, #828]	@ (8018be8 <__ieee754_pow+0x788>)
 80188ac:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80188b0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80188b4:	459b      	cmp	fp, r3
 80188b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80188ba:	dd08      	ble.n	80188ce <__ieee754_pow+0x46e>
 80188bc:	4bcb      	ldr	r3, [pc, #812]	@ (8018bec <__ieee754_pow+0x78c>)
 80188be:	459b      	cmp	fp, r3
 80188c0:	f340 81a5 	ble.w	8018c0e <__ieee754_pow+0x7ae>
 80188c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188c6:	3301      	adds	r3, #1
 80188c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80188ca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80188ce:	f04f 0a00 	mov.w	sl, #0
 80188d2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80188d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80188d8:	4bc5      	ldr	r3, [pc, #788]	@ (8018bf0 <__ieee754_pow+0x790>)
 80188da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80188de:	ed93 7b00 	vldr	d7, [r3]
 80188e2:	4629      	mov	r1, r5
 80188e4:	ec53 2b17 	vmov	r2, r3, d7
 80188e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80188ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80188f0:	f7e7 fca2 	bl	8000238 <__aeabi_dsub>
 80188f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80188f8:	4606      	mov	r6, r0
 80188fa:	460f      	mov	r7, r1
 80188fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018900:	f7e7 fc9c 	bl	800023c <__adddf3>
 8018904:	4602      	mov	r2, r0
 8018906:	460b      	mov	r3, r1
 8018908:	2000      	movs	r0, #0
 801890a:	49ba      	ldr	r1, [pc, #744]	@ (8018bf4 <__ieee754_pow+0x794>)
 801890c:	f7e7 ff76 	bl	80007fc <__aeabi_ddiv>
 8018910:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8018914:	4602      	mov	r2, r0
 8018916:	460b      	mov	r3, r1
 8018918:	4630      	mov	r0, r6
 801891a:	4639      	mov	r1, r7
 801891c:	f7e7 fe44 	bl	80005a8 <__aeabi_dmul>
 8018920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018924:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8018928:	106d      	asrs	r5, r5, #1
 801892a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801892e:	f04f 0b00 	mov.w	fp, #0
 8018932:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8018936:	4661      	mov	r1, ip
 8018938:	2200      	movs	r2, #0
 801893a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801893e:	4658      	mov	r0, fp
 8018940:	46e1      	mov	r9, ip
 8018942:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8018946:	4614      	mov	r4, r2
 8018948:	461d      	mov	r5, r3
 801894a:	f7e7 fe2d 	bl	80005a8 <__aeabi_dmul>
 801894e:	4602      	mov	r2, r0
 8018950:	460b      	mov	r3, r1
 8018952:	4630      	mov	r0, r6
 8018954:	4639      	mov	r1, r7
 8018956:	f7e7 fc6f 	bl	8000238 <__aeabi_dsub>
 801895a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801895e:	4606      	mov	r6, r0
 8018960:	460f      	mov	r7, r1
 8018962:	4620      	mov	r0, r4
 8018964:	4629      	mov	r1, r5
 8018966:	f7e7 fc67 	bl	8000238 <__aeabi_dsub>
 801896a:	4602      	mov	r2, r0
 801896c:	460b      	mov	r3, r1
 801896e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018972:	f7e7 fc61 	bl	8000238 <__aeabi_dsub>
 8018976:	465a      	mov	r2, fp
 8018978:	464b      	mov	r3, r9
 801897a:	f7e7 fe15 	bl	80005a8 <__aeabi_dmul>
 801897e:	4602      	mov	r2, r0
 8018980:	460b      	mov	r3, r1
 8018982:	4630      	mov	r0, r6
 8018984:	4639      	mov	r1, r7
 8018986:	f7e7 fc57 	bl	8000238 <__aeabi_dsub>
 801898a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801898e:	f7e7 fe0b 	bl	80005a8 <__aeabi_dmul>
 8018992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018996:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801899a:	4610      	mov	r0, r2
 801899c:	4619      	mov	r1, r3
 801899e:	f7e7 fe03 	bl	80005a8 <__aeabi_dmul>
 80189a2:	a37d      	add	r3, pc, #500	@ (adr r3, 8018b98 <__ieee754_pow+0x738>)
 80189a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a8:	4604      	mov	r4, r0
 80189aa:	460d      	mov	r5, r1
 80189ac:	f7e7 fdfc 	bl	80005a8 <__aeabi_dmul>
 80189b0:	a37b      	add	r3, pc, #492	@ (adr r3, 8018ba0 <__ieee754_pow+0x740>)
 80189b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b6:	f7e7 fc41 	bl	800023c <__adddf3>
 80189ba:	4622      	mov	r2, r4
 80189bc:	462b      	mov	r3, r5
 80189be:	f7e7 fdf3 	bl	80005a8 <__aeabi_dmul>
 80189c2:	a379      	add	r3, pc, #484	@ (adr r3, 8018ba8 <__ieee754_pow+0x748>)
 80189c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c8:	f7e7 fc38 	bl	800023c <__adddf3>
 80189cc:	4622      	mov	r2, r4
 80189ce:	462b      	mov	r3, r5
 80189d0:	f7e7 fdea 	bl	80005a8 <__aeabi_dmul>
 80189d4:	a376      	add	r3, pc, #472	@ (adr r3, 8018bb0 <__ieee754_pow+0x750>)
 80189d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189da:	f7e7 fc2f 	bl	800023c <__adddf3>
 80189de:	4622      	mov	r2, r4
 80189e0:	462b      	mov	r3, r5
 80189e2:	f7e7 fde1 	bl	80005a8 <__aeabi_dmul>
 80189e6:	a374      	add	r3, pc, #464	@ (adr r3, 8018bb8 <__ieee754_pow+0x758>)
 80189e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ec:	f7e7 fc26 	bl	800023c <__adddf3>
 80189f0:	4622      	mov	r2, r4
 80189f2:	462b      	mov	r3, r5
 80189f4:	f7e7 fdd8 	bl	80005a8 <__aeabi_dmul>
 80189f8:	a371      	add	r3, pc, #452	@ (adr r3, 8018bc0 <__ieee754_pow+0x760>)
 80189fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189fe:	f7e7 fc1d 	bl	800023c <__adddf3>
 8018a02:	4622      	mov	r2, r4
 8018a04:	4606      	mov	r6, r0
 8018a06:	460f      	mov	r7, r1
 8018a08:	462b      	mov	r3, r5
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	4629      	mov	r1, r5
 8018a0e:	f7e7 fdcb 	bl	80005a8 <__aeabi_dmul>
 8018a12:	4602      	mov	r2, r0
 8018a14:	460b      	mov	r3, r1
 8018a16:	4630      	mov	r0, r6
 8018a18:	4639      	mov	r1, r7
 8018a1a:	f7e7 fdc5 	bl	80005a8 <__aeabi_dmul>
 8018a1e:	465a      	mov	r2, fp
 8018a20:	4604      	mov	r4, r0
 8018a22:	460d      	mov	r5, r1
 8018a24:	464b      	mov	r3, r9
 8018a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a2a:	f7e7 fc07 	bl	800023c <__adddf3>
 8018a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a32:	f7e7 fdb9 	bl	80005a8 <__aeabi_dmul>
 8018a36:	4622      	mov	r2, r4
 8018a38:	462b      	mov	r3, r5
 8018a3a:	f7e7 fbff 	bl	800023c <__adddf3>
 8018a3e:	465a      	mov	r2, fp
 8018a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018a44:	464b      	mov	r3, r9
 8018a46:	4658      	mov	r0, fp
 8018a48:	4649      	mov	r1, r9
 8018a4a:	f7e7 fdad 	bl	80005a8 <__aeabi_dmul>
 8018a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8018bf8 <__ieee754_pow+0x798>)
 8018a50:	2200      	movs	r2, #0
 8018a52:	4606      	mov	r6, r0
 8018a54:	460f      	mov	r7, r1
 8018a56:	f7e7 fbf1 	bl	800023c <__adddf3>
 8018a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018a5e:	f7e7 fbed 	bl	800023c <__adddf3>
 8018a62:	46d8      	mov	r8, fp
 8018a64:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8018a68:	460d      	mov	r5, r1
 8018a6a:	465a      	mov	r2, fp
 8018a6c:	460b      	mov	r3, r1
 8018a6e:	4640      	mov	r0, r8
 8018a70:	4649      	mov	r1, r9
 8018a72:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8018a76:	f7e7 fd97 	bl	80005a8 <__aeabi_dmul>
 8018a7a:	465c      	mov	r4, fp
 8018a7c:	4680      	mov	r8, r0
 8018a7e:	4689      	mov	r9, r1
 8018a80:	4b5d      	ldr	r3, [pc, #372]	@ (8018bf8 <__ieee754_pow+0x798>)
 8018a82:	2200      	movs	r2, #0
 8018a84:	4620      	mov	r0, r4
 8018a86:	4629      	mov	r1, r5
 8018a88:	f7e7 fbd6 	bl	8000238 <__aeabi_dsub>
 8018a8c:	4632      	mov	r2, r6
 8018a8e:	463b      	mov	r3, r7
 8018a90:	f7e7 fbd2 	bl	8000238 <__aeabi_dsub>
 8018a94:	4602      	mov	r2, r0
 8018a96:	460b      	mov	r3, r1
 8018a98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018a9c:	f7e7 fbcc 	bl	8000238 <__aeabi_dsub>
 8018aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018aa4:	f7e7 fd80 	bl	80005a8 <__aeabi_dmul>
 8018aa8:	4622      	mov	r2, r4
 8018aaa:	4606      	mov	r6, r0
 8018aac:	460f      	mov	r7, r1
 8018aae:	462b      	mov	r3, r5
 8018ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ab4:	f7e7 fd78 	bl	80005a8 <__aeabi_dmul>
 8018ab8:	4602      	mov	r2, r0
 8018aba:	460b      	mov	r3, r1
 8018abc:	4630      	mov	r0, r6
 8018abe:	4639      	mov	r1, r7
 8018ac0:	f7e7 fbbc 	bl	800023c <__adddf3>
 8018ac4:	4606      	mov	r6, r0
 8018ac6:	460f      	mov	r7, r1
 8018ac8:	4602      	mov	r2, r0
 8018aca:	460b      	mov	r3, r1
 8018acc:	4640      	mov	r0, r8
 8018ace:	4649      	mov	r1, r9
 8018ad0:	f7e7 fbb4 	bl	800023c <__adddf3>
 8018ad4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8018ad8:	a33b      	add	r3, pc, #236	@ (adr r3, 8018bc8 <__ieee754_pow+0x768>)
 8018ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ade:	4658      	mov	r0, fp
 8018ae0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8018ae4:	460d      	mov	r5, r1
 8018ae6:	f7e7 fd5f 	bl	80005a8 <__aeabi_dmul>
 8018aea:	465c      	mov	r4, fp
 8018aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018af0:	4642      	mov	r2, r8
 8018af2:	464b      	mov	r3, r9
 8018af4:	4620      	mov	r0, r4
 8018af6:	4629      	mov	r1, r5
 8018af8:	f7e7 fb9e 	bl	8000238 <__aeabi_dsub>
 8018afc:	4602      	mov	r2, r0
 8018afe:	460b      	mov	r3, r1
 8018b00:	4630      	mov	r0, r6
 8018b02:	4639      	mov	r1, r7
 8018b04:	f7e7 fb98 	bl	8000238 <__aeabi_dsub>
 8018b08:	a331      	add	r3, pc, #196	@ (adr r3, 8018bd0 <__ieee754_pow+0x770>)
 8018b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b0e:	f7e7 fd4b 	bl	80005a8 <__aeabi_dmul>
 8018b12:	a331      	add	r3, pc, #196	@ (adr r3, 8018bd8 <__ieee754_pow+0x778>)
 8018b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b18:	4606      	mov	r6, r0
 8018b1a:	460f      	mov	r7, r1
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	4629      	mov	r1, r5
 8018b20:	f7e7 fd42 	bl	80005a8 <__aeabi_dmul>
 8018b24:	4602      	mov	r2, r0
 8018b26:	460b      	mov	r3, r1
 8018b28:	4630      	mov	r0, r6
 8018b2a:	4639      	mov	r1, r7
 8018b2c:	f7e7 fb86 	bl	800023c <__adddf3>
 8018b30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018b32:	4b32      	ldr	r3, [pc, #200]	@ (8018bfc <__ieee754_pow+0x79c>)
 8018b34:	4413      	add	r3, r2
 8018b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3a:	f7e7 fb7f 	bl	800023c <__adddf3>
 8018b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018b44:	f7e7 fcc6 	bl	80004d4 <__aeabi_i2d>
 8018b48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8018c00 <__ieee754_pow+0x7a0>)
 8018b4c:	4413      	add	r3, r2
 8018b4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018b52:	4606      	mov	r6, r0
 8018b54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b58:	460f      	mov	r7, r1
 8018b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b5e:	f7e7 fb6d 	bl	800023c <__adddf3>
 8018b62:	4642      	mov	r2, r8
 8018b64:	464b      	mov	r3, r9
 8018b66:	f7e7 fb69 	bl	800023c <__adddf3>
 8018b6a:	4632      	mov	r2, r6
 8018b6c:	463b      	mov	r3, r7
 8018b6e:	f7e7 fb65 	bl	800023c <__adddf3>
 8018b72:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8018b76:	4632      	mov	r2, r6
 8018b78:	463b      	mov	r3, r7
 8018b7a:	4658      	mov	r0, fp
 8018b7c:	460d      	mov	r5, r1
 8018b7e:	f7e7 fb5b 	bl	8000238 <__aeabi_dsub>
 8018b82:	4642      	mov	r2, r8
 8018b84:	464b      	mov	r3, r9
 8018b86:	f7e7 fb57 	bl	8000238 <__aeabi_dsub>
 8018b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b8e:	f7e7 fb53 	bl	8000238 <__aeabi_dsub>
 8018b92:	465c      	mov	r4, fp
 8018b94:	e036      	b.n	8018c04 <__ieee754_pow+0x7a4>
 8018b96:	bf00      	nop
 8018b98:	4a454eef 	.word	0x4a454eef
 8018b9c:	3fca7e28 	.word	0x3fca7e28
 8018ba0:	93c9db65 	.word	0x93c9db65
 8018ba4:	3fcd864a 	.word	0x3fcd864a
 8018ba8:	a91d4101 	.word	0xa91d4101
 8018bac:	3fd17460 	.word	0x3fd17460
 8018bb0:	518f264d 	.word	0x518f264d
 8018bb4:	3fd55555 	.word	0x3fd55555
 8018bb8:	db6fabff 	.word	0xdb6fabff
 8018bbc:	3fdb6db6 	.word	0x3fdb6db6
 8018bc0:	33333303 	.word	0x33333303
 8018bc4:	3fe33333 	.word	0x3fe33333
 8018bc8:	e0000000 	.word	0xe0000000
 8018bcc:	3feec709 	.word	0x3feec709
 8018bd0:	dc3a03fd 	.word	0xdc3a03fd
 8018bd4:	3feec709 	.word	0x3feec709
 8018bd8:	145b01f5 	.word	0x145b01f5
 8018bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8018be0:	7ff00000 	.word	0x7ff00000
 8018be4:	43400000 	.word	0x43400000
 8018be8:	0003988e 	.word	0x0003988e
 8018bec:	000bb679 	.word	0x000bb679
 8018bf0:	0801c700 	.word	0x0801c700
 8018bf4:	3ff00000 	.word	0x3ff00000
 8018bf8:	40080000 	.word	0x40080000
 8018bfc:	0801c6e0 	.word	0x0801c6e0
 8018c00:	0801c6f0 	.word	0x0801c6f0
 8018c04:	4602      	mov	r2, r0
 8018c06:	460b      	mov	r3, r1
 8018c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018c0c:	e5d6      	b.n	80187bc <__ieee754_pow+0x35c>
 8018c0e:	f04f 0a01 	mov.w	sl, #1
 8018c12:	e65e      	b.n	80188d2 <__ieee754_pow+0x472>
 8018c14:	a3b5      	add	r3, pc, #724	@ (adr r3, 8018eec <__ieee754_pow+0xa8c>)
 8018c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	4639      	mov	r1, r7
 8018c1e:	f7e7 fb0d 	bl	800023c <__adddf3>
 8018c22:	4642      	mov	r2, r8
 8018c24:	e9cd 0100 	strd	r0, r1, [sp]
 8018c28:	464b      	mov	r3, r9
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	4629      	mov	r1, r5
 8018c2e:	f7e7 fb03 	bl	8000238 <__aeabi_dsub>
 8018c32:	4602      	mov	r2, r0
 8018c34:	460b      	mov	r3, r1
 8018c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c3a:	f7e7 ff45 	bl	8000ac8 <__aeabi_dcmpgt>
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	f47f adfe 	bne.w	8018840 <__ieee754_pow+0x3e0>
 8018c44:	4ba2      	ldr	r3, [pc, #648]	@ (8018ed0 <__ieee754_pow+0xa70>)
 8018c46:	e022      	b.n	8018c8e <__ieee754_pow+0x82e>
 8018c48:	4ca2      	ldr	r4, [pc, #648]	@ (8018ed4 <__ieee754_pow+0xa74>)
 8018c4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018c4e:	42a3      	cmp	r3, r4
 8018c50:	d919      	bls.n	8018c86 <__ieee754_pow+0x826>
 8018c52:	4ba1      	ldr	r3, [pc, #644]	@ (8018ed8 <__ieee754_pow+0xa78>)
 8018c54:	440b      	add	r3, r1
 8018c56:	4303      	orrs	r3, r0
 8018c58:	d009      	beq.n	8018c6e <__ieee754_pow+0x80e>
 8018c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c5e:	2200      	movs	r2, #0
 8018c60:	2300      	movs	r3, #0
 8018c62:	f7e7 ff13 	bl	8000a8c <__aeabi_dcmplt>
 8018c66:	3800      	subs	r0, #0
 8018c68:	bf18      	it	ne
 8018c6a:	2001      	movne	r0, #1
 8018c6c:	e512      	b.n	8018694 <__ieee754_pow+0x234>
 8018c6e:	4642      	mov	r2, r8
 8018c70:	464b      	mov	r3, r9
 8018c72:	f7e7 fae1 	bl	8000238 <__aeabi_dsub>
 8018c76:	4632      	mov	r2, r6
 8018c78:	463b      	mov	r3, r7
 8018c7a:	f7e7 ff1b 	bl	8000ab4 <__aeabi_dcmpge>
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	d1eb      	bne.n	8018c5a <__ieee754_pow+0x7fa>
 8018c82:	4b96      	ldr	r3, [pc, #600]	@ (8018edc <__ieee754_pow+0xa7c>)
 8018c84:	e003      	b.n	8018c8e <__ieee754_pow+0x82e>
 8018c86:	4a96      	ldr	r2, [pc, #600]	@ (8018ee0 <__ieee754_pow+0xa80>)
 8018c88:	4293      	cmp	r3, r2
 8018c8a:	f240 80e7 	bls.w	8018e5c <__ieee754_pow+0x9fc>
 8018c8e:	151b      	asrs	r3, r3, #20
 8018c90:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8018c94:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8018c98:	fa4a fa03 	asr.w	sl, sl, r3
 8018c9c:	44da      	add	sl, fp
 8018c9e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8018ca2:	4890      	ldr	r0, [pc, #576]	@ (8018ee4 <__ieee754_pow+0xa84>)
 8018ca4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8018ca8:	4108      	asrs	r0, r1
 8018caa:	ea00 030a 	and.w	r3, r0, sl
 8018cae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8018cb2:	f1c1 0114 	rsb	r1, r1, #20
 8018cb6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8018cba:	fa4a fa01 	asr.w	sl, sl, r1
 8018cbe:	f1bb 0f00 	cmp.w	fp, #0
 8018cc2:	4640      	mov	r0, r8
 8018cc4:	4649      	mov	r1, r9
 8018cc6:	f04f 0200 	mov.w	r2, #0
 8018cca:	bfb8      	it	lt
 8018ccc:	f1ca 0a00 	rsblt	sl, sl, #0
 8018cd0:	f7e7 fab2 	bl	8000238 <__aeabi_dsub>
 8018cd4:	4680      	mov	r8, r0
 8018cd6:	4689      	mov	r9, r1
 8018cd8:	4632      	mov	r2, r6
 8018cda:	463b      	mov	r3, r7
 8018cdc:	4640      	mov	r0, r8
 8018cde:	4649      	mov	r1, r9
 8018ce0:	f7e7 faac 	bl	800023c <__adddf3>
 8018ce4:	2400      	movs	r4, #0
 8018ce6:	a36a      	add	r3, pc, #424	@ (adr r3, 8018e90 <__ieee754_pow+0xa30>)
 8018ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cec:	4620      	mov	r0, r4
 8018cee:	460d      	mov	r5, r1
 8018cf0:	f7e7 fc5a 	bl	80005a8 <__aeabi_dmul>
 8018cf4:	4642      	mov	r2, r8
 8018cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8018cfa:	464b      	mov	r3, r9
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	4629      	mov	r1, r5
 8018d00:	f7e7 fa9a 	bl	8000238 <__aeabi_dsub>
 8018d04:	4602      	mov	r2, r0
 8018d06:	460b      	mov	r3, r1
 8018d08:	4630      	mov	r0, r6
 8018d0a:	4639      	mov	r1, r7
 8018d0c:	f7e7 fa94 	bl	8000238 <__aeabi_dsub>
 8018d10:	a361      	add	r3, pc, #388	@ (adr r3, 8018e98 <__ieee754_pow+0xa38>)
 8018d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d16:	f7e7 fc47 	bl	80005a8 <__aeabi_dmul>
 8018d1a:	a361      	add	r3, pc, #388	@ (adr r3, 8018ea0 <__ieee754_pow+0xa40>)
 8018d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d20:	4680      	mov	r8, r0
 8018d22:	4689      	mov	r9, r1
 8018d24:	4620      	mov	r0, r4
 8018d26:	4629      	mov	r1, r5
 8018d28:	f7e7 fc3e 	bl	80005a8 <__aeabi_dmul>
 8018d2c:	4602      	mov	r2, r0
 8018d2e:	460b      	mov	r3, r1
 8018d30:	4640      	mov	r0, r8
 8018d32:	4649      	mov	r1, r9
 8018d34:	f7e7 fa82 	bl	800023c <__adddf3>
 8018d38:	4604      	mov	r4, r0
 8018d3a:	460d      	mov	r5, r1
 8018d3c:	4602      	mov	r2, r0
 8018d3e:	460b      	mov	r3, r1
 8018d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018d44:	f7e7 fa7a 	bl	800023c <__adddf3>
 8018d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d4c:	4680      	mov	r8, r0
 8018d4e:	4689      	mov	r9, r1
 8018d50:	f7e7 fa72 	bl	8000238 <__aeabi_dsub>
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	4620      	mov	r0, r4
 8018d5a:	4629      	mov	r1, r5
 8018d5c:	f7e7 fa6c 	bl	8000238 <__aeabi_dsub>
 8018d60:	4642      	mov	r2, r8
 8018d62:	4606      	mov	r6, r0
 8018d64:	460f      	mov	r7, r1
 8018d66:	464b      	mov	r3, r9
 8018d68:	4640      	mov	r0, r8
 8018d6a:	4649      	mov	r1, r9
 8018d6c:	f7e7 fc1c 	bl	80005a8 <__aeabi_dmul>
 8018d70:	a34d      	add	r3, pc, #308	@ (adr r3, 8018ea8 <__ieee754_pow+0xa48>)
 8018d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d76:	4604      	mov	r4, r0
 8018d78:	460d      	mov	r5, r1
 8018d7a:	f7e7 fc15 	bl	80005a8 <__aeabi_dmul>
 8018d7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8018eb0 <__ieee754_pow+0xa50>)
 8018d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d84:	f7e7 fa58 	bl	8000238 <__aeabi_dsub>
 8018d88:	4622      	mov	r2, r4
 8018d8a:	462b      	mov	r3, r5
 8018d8c:	f7e7 fc0c 	bl	80005a8 <__aeabi_dmul>
 8018d90:	a349      	add	r3, pc, #292	@ (adr r3, 8018eb8 <__ieee754_pow+0xa58>)
 8018d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d96:	f7e7 fa51 	bl	800023c <__adddf3>
 8018d9a:	4622      	mov	r2, r4
 8018d9c:	462b      	mov	r3, r5
 8018d9e:	f7e7 fc03 	bl	80005a8 <__aeabi_dmul>
 8018da2:	a347      	add	r3, pc, #284	@ (adr r3, 8018ec0 <__ieee754_pow+0xa60>)
 8018da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da8:	f7e7 fa46 	bl	8000238 <__aeabi_dsub>
 8018dac:	4622      	mov	r2, r4
 8018dae:	462b      	mov	r3, r5
 8018db0:	f7e7 fbfa 	bl	80005a8 <__aeabi_dmul>
 8018db4:	a344      	add	r3, pc, #272	@ (adr r3, 8018ec8 <__ieee754_pow+0xa68>)
 8018db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dba:	f7e7 fa3f 	bl	800023c <__adddf3>
 8018dbe:	4622      	mov	r2, r4
 8018dc0:	462b      	mov	r3, r5
 8018dc2:	f7e7 fbf1 	bl	80005a8 <__aeabi_dmul>
 8018dc6:	4602      	mov	r2, r0
 8018dc8:	460b      	mov	r3, r1
 8018dca:	4640      	mov	r0, r8
 8018dcc:	4649      	mov	r1, r9
 8018dce:	f7e7 fa33 	bl	8000238 <__aeabi_dsub>
 8018dd2:	4604      	mov	r4, r0
 8018dd4:	460d      	mov	r5, r1
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	460b      	mov	r3, r1
 8018dda:	4640      	mov	r0, r8
 8018ddc:	4649      	mov	r1, r9
 8018dde:	f7e7 fbe3 	bl	80005a8 <__aeabi_dmul>
 8018de2:	2200      	movs	r2, #0
 8018de4:	e9cd 0100 	strd	r0, r1, [sp]
 8018de8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018dec:	4620      	mov	r0, r4
 8018dee:	4629      	mov	r1, r5
 8018df0:	f7e7 fa22 	bl	8000238 <__aeabi_dsub>
 8018df4:	4602      	mov	r2, r0
 8018df6:	460b      	mov	r3, r1
 8018df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018dfc:	f7e7 fcfe 	bl	80007fc <__aeabi_ddiv>
 8018e00:	4632      	mov	r2, r6
 8018e02:	4604      	mov	r4, r0
 8018e04:	460d      	mov	r5, r1
 8018e06:	463b      	mov	r3, r7
 8018e08:	4640      	mov	r0, r8
 8018e0a:	4649      	mov	r1, r9
 8018e0c:	f7e7 fbcc 	bl	80005a8 <__aeabi_dmul>
 8018e10:	4632      	mov	r2, r6
 8018e12:	463b      	mov	r3, r7
 8018e14:	f7e7 fa12 	bl	800023c <__adddf3>
 8018e18:	4602      	mov	r2, r0
 8018e1a:	460b      	mov	r3, r1
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	4629      	mov	r1, r5
 8018e20:	f7e7 fa0a 	bl	8000238 <__aeabi_dsub>
 8018e24:	4642      	mov	r2, r8
 8018e26:	464b      	mov	r3, r9
 8018e28:	f7e7 fa06 	bl	8000238 <__aeabi_dsub>
 8018e2c:	460b      	mov	r3, r1
 8018e2e:	4602      	mov	r2, r0
 8018e30:	492d      	ldr	r1, [pc, #180]	@ (8018ee8 <__ieee754_pow+0xa88>)
 8018e32:	2000      	movs	r0, #0
 8018e34:	f7e7 fa00 	bl	8000238 <__aeabi_dsub>
 8018e38:	ec41 0b10 	vmov	d0, r0, r1
 8018e3c:	ee10 3a90 	vmov	r3, s1
 8018e40:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018e48:	da0b      	bge.n	8018e62 <__ieee754_pow+0xa02>
 8018e4a:	4650      	mov	r0, sl
 8018e4c:	f000 f85c 	bl	8018f08 <scalbn>
 8018e50:	ec51 0b10 	vmov	r0, r1, d0
 8018e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e58:	f7ff bb6d 	b.w	8018536 <__ieee754_pow+0xd6>
 8018e5c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018e60:	e73a      	b.n	8018cd8 <__ieee754_pow+0x878>
 8018e62:	ec51 0b10 	vmov	r0, r1, d0
 8018e66:	4619      	mov	r1, r3
 8018e68:	e7f4      	b.n	8018e54 <__ieee754_pow+0x9f4>
 8018e6a:	491f      	ldr	r1, [pc, #124]	@ (8018ee8 <__ieee754_pow+0xa88>)
 8018e6c:	2000      	movs	r0, #0
 8018e6e:	f7ff bb14 	b.w	801849a <__ieee754_pow+0x3a>
 8018e72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e76:	f7ff bb10 	b.w	801849a <__ieee754_pow+0x3a>
 8018e7a:	4630      	mov	r0, r6
 8018e7c:	4639      	mov	r1, r7
 8018e7e:	f7ff bb0c 	b.w	801849a <__ieee754_pow+0x3a>
 8018e82:	460c      	mov	r4, r1
 8018e84:	f7ff bb69 	b.w	801855a <__ieee754_pow+0xfa>
 8018e88:	2400      	movs	r4, #0
 8018e8a:	f7ff bb4b 	b.w	8018524 <__ieee754_pow+0xc4>
 8018e8e:	bf00      	nop
 8018e90:	00000000 	.word	0x00000000
 8018e94:	3fe62e43 	.word	0x3fe62e43
 8018e98:	fefa39ef 	.word	0xfefa39ef
 8018e9c:	3fe62e42 	.word	0x3fe62e42
 8018ea0:	0ca86c39 	.word	0x0ca86c39
 8018ea4:	be205c61 	.word	0xbe205c61
 8018ea8:	72bea4d0 	.word	0x72bea4d0
 8018eac:	3e663769 	.word	0x3e663769
 8018eb0:	c5d26bf1 	.word	0xc5d26bf1
 8018eb4:	3ebbbd41 	.word	0x3ebbbd41
 8018eb8:	af25de2c 	.word	0xaf25de2c
 8018ebc:	3f11566a 	.word	0x3f11566a
 8018ec0:	16bebd93 	.word	0x16bebd93
 8018ec4:	3f66c16c 	.word	0x3f66c16c
 8018ec8:	5555553e 	.word	0x5555553e
 8018ecc:	3fc55555 	.word	0x3fc55555
 8018ed0:	40900000 	.word	0x40900000
 8018ed4:	4090cbff 	.word	0x4090cbff
 8018ed8:	3f6f3400 	.word	0x3f6f3400
 8018edc:	4090cc00 	.word	0x4090cc00
 8018ee0:	3fe00000 	.word	0x3fe00000
 8018ee4:	fff00000 	.word	0xfff00000
 8018ee8:	3ff00000 	.word	0x3ff00000
 8018eec:	652b82fe 	.word	0x652b82fe
 8018ef0:	3c971547 	.word	0x3c971547

08018ef4 <fabs>:
 8018ef4:	ec51 0b10 	vmov	r0, r1, d0
 8018ef8:	4602      	mov	r2, r0
 8018efa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018efe:	ec43 2b10 	vmov	d0, r2, r3
 8018f02:	4770      	bx	lr
 8018f04:	0000      	movs	r0, r0
	...

08018f08 <scalbn>:
 8018f08:	b570      	push	{r4, r5, r6, lr}
 8018f0a:	ec55 4b10 	vmov	r4, r5, d0
 8018f0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018f12:	4606      	mov	r6, r0
 8018f14:	462b      	mov	r3, r5
 8018f16:	b991      	cbnz	r1, 8018f3e <scalbn+0x36>
 8018f18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8018f1c:	4323      	orrs	r3, r4
 8018f1e:	d03b      	beq.n	8018f98 <scalbn+0x90>
 8018f20:	4b33      	ldr	r3, [pc, #204]	@ (8018ff0 <scalbn+0xe8>)
 8018f22:	4620      	mov	r0, r4
 8018f24:	4629      	mov	r1, r5
 8018f26:	2200      	movs	r2, #0
 8018f28:	f7e7 fb3e 	bl	80005a8 <__aeabi_dmul>
 8018f2c:	4b31      	ldr	r3, [pc, #196]	@ (8018ff4 <scalbn+0xec>)
 8018f2e:	429e      	cmp	r6, r3
 8018f30:	4604      	mov	r4, r0
 8018f32:	460d      	mov	r5, r1
 8018f34:	da0f      	bge.n	8018f56 <scalbn+0x4e>
 8018f36:	a326      	add	r3, pc, #152	@ (adr r3, 8018fd0 <scalbn+0xc8>)
 8018f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f3c:	e01e      	b.n	8018f7c <scalbn+0x74>
 8018f3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018f42:	4291      	cmp	r1, r2
 8018f44:	d10b      	bne.n	8018f5e <scalbn+0x56>
 8018f46:	4622      	mov	r2, r4
 8018f48:	4620      	mov	r0, r4
 8018f4a:	4629      	mov	r1, r5
 8018f4c:	f7e7 f976 	bl	800023c <__adddf3>
 8018f50:	4604      	mov	r4, r0
 8018f52:	460d      	mov	r5, r1
 8018f54:	e020      	b.n	8018f98 <scalbn+0x90>
 8018f56:	460b      	mov	r3, r1
 8018f58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018f5c:	3936      	subs	r1, #54	@ 0x36
 8018f5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018f62:	4296      	cmp	r6, r2
 8018f64:	dd0d      	ble.n	8018f82 <scalbn+0x7a>
 8018f66:	2d00      	cmp	r5, #0
 8018f68:	a11b      	add	r1, pc, #108	@ (adr r1, 8018fd8 <scalbn+0xd0>)
 8018f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f6e:	da02      	bge.n	8018f76 <scalbn+0x6e>
 8018f70:	a11b      	add	r1, pc, #108	@ (adr r1, 8018fe0 <scalbn+0xd8>)
 8018f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f76:	a318      	add	r3, pc, #96	@ (adr r3, 8018fd8 <scalbn+0xd0>)
 8018f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f7c:	f7e7 fb14 	bl	80005a8 <__aeabi_dmul>
 8018f80:	e7e6      	b.n	8018f50 <scalbn+0x48>
 8018f82:	1872      	adds	r2, r6, r1
 8018f84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018f88:	428a      	cmp	r2, r1
 8018f8a:	dcec      	bgt.n	8018f66 <scalbn+0x5e>
 8018f8c:	2a00      	cmp	r2, #0
 8018f8e:	dd06      	ble.n	8018f9e <scalbn+0x96>
 8018f90:	f36f 531e 	bfc	r3, #20, #11
 8018f94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018f98:	ec45 4b10 	vmov	d0, r4, r5
 8018f9c:	bd70      	pop	{r4, r5, r6, pc}
 8018f9e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018fa2:	da08      	bge.n	8018fb6 <scalbn+0xae>
 8018fa4:	2d00      	cmp	r5, #0
 8018fa6:	a10a      	add	r1, pc, #40	@ (adr r1, 8018fd0 <scalbn+0xc8>)
 8018fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fac:	dac3      	bge.n	8018f36 <scalbn+0x2e>
 8018fae:	a10e      	add	r1, pc, #56	@ (adr r1, 8018fe8 <scalbn+0xe0>)
 8018fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fb4:	e7bf      	b.n	8018f36 <scalbn+0x2e>
 8018fb6:	3236      	adds	r2, #54	@ 0x36
 8018fb8:	f36f 531e 	bfc	r3, #20, #11
 8018fbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8018ff8 <scalbn+0xf0>)
 8018fc4:	4629      	mov	r1, r5
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	e7d8      	b.n	8018f7c <scalbn+0x74>
 8018fca:	bf00      	nop
 8018fcc:	f3af 8000 	nop.w
 8018fd0:	c2f8f359 	.word	0xc2f8f359
 8018fd4:	01a56e1f 	.word	0x01a56e1f
 8018fd8:	8800759c 	.word	0x8800759c
 8018fdc:	7e37e43c 	.word	0x7e37e43c
 8018fe0:	8800759c 	.word	0x8800759c
 8018fe4:	fe37e43c 	.word	0xfe37e43c
 8018fe8:	c2f8f359 	.word	0xc2f8f359
 8018fec:	81a56e1f 	.word	0x81a56e1f
 8018ff0:	43500000 	.word	0x43500000
 8018ff4:	ffff3cb0 	.word	0xffff3cb0
 8018ff8:	3c900000 	.word	0x3c900000

08018ffc <with_errno>:
 8018ffc:	b510      	push	{r4, lr}
 8018ffe:	ed2d 8b02 	vpush	{d8}
 8019002:	eeb0 8a40 	vmov.f32	s16, s0
 8019006:	eef0 8a60 	vmov.f32	s17, s1
 801900a:	4604      	mov	r4, r0
 801900c:	f7fd fb36 	bl	801667c <__errno>
 8019010:	eeb0 0a48 	vmov.f32	s0, s16
 8019014:	eef0 0a68 	vmov.f32	s1, s17
 8019018:	ecbd 8b02 	vpop	{d8}
 801901c:	6004      	str	r4, [r0, #0]
 801901e:	bd10      	pop	{r4, pc}

08019020 <xflow>:
 8019020:	4603      	mov	r3, r0
 8019022:	b507      	push	{r0, r1, r2, lr}
 8019024:	ec51 0b10 	vmov	r0, r1, d0
 8019028:	b183      	cbz	r3, 801904c <xflow+0x2c>
 801902a:	4602      	mov	r2, r0
 801902c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019030:	e9cd 2300 	strd	r2, r3, [sp]
 8019034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019038:	f7e7 fab6 	bl	80005a8 <__aeabi_dmul>
 801903c:	ec41 0b10 	vmov	d0, r0, r1
 8019040:	2022      	movs	r0, #34	@ 0x22
 8019042:	b003      	add	sp, #12
 8019044:	f85d eb04 	ldr.w	lr, [sp], #4
 8019048:	f7ff bfd8 	b.w	8018ffc <with_errno>
 801904c:	4602      	mov	r2, r0
 801904e:	460b      	mov	r3, r1
 8019050:	e7ee      	b.n	8019030 <xflow+0x10>
 8019052:	0000      	movs	r0, r0
 8019054:	0000      	movs	r0, r0
	...

08019058 <__math_uflow>:
 8019058:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019060 <__math_uflow+0x8>
 801905c:	f7ff bfe0 	b.w	8019020 <xflow>
 8019060:	00000000 	.word	0x00000000
 8019064:	10000000 	.word	0x10000000

08019068 <__math_oflow>:
 8019068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019070 <__math_oflow+0x8>
 801906c:	f7ff bfd8 	b.w	8019020 <xflow>
 8019070:	00000000 	.word	0x00000000
 8019074:	70000000 	.word	0x70000000

08019078 <__ieee754_sqrt>:
 8019078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801907c:	4a66      	ldr	r2, [pc, #408]	@ (8019218 <__ieee754_sqrt+0x1a0>)
 801907e:	ec55 4b10 	vmov	r4, r5, d0
 8019082:	43aa      	bics	r2, r5
 8019084:	462b      	mov	r3, r5
 8019086:	4621      	mov	r1, r4
 8019088:	d110      	bne.n	80190ac <__ieee754_sqrt+0x34>
 801908a:	4622      	mov	r2, r4
 801908c:	4620      	mov	r0, r4
 801908e:	4629      	mov	r1, r5
 8019090:	f7e7 fa8a 	bl	80005a8 <__aeabi_dmul>
 8019094:	4602      	mov	r2, r0
 8019096:	460b      	mov	r3, r1
 8019098:	4620      	mov	r0, r4
 801909a:	4629      	mov	r1, r5
 801909c:	f7e7 f8ce 	bl	800023c <__adddf3>
 80190a0:	4604      	mov	r4, r0
 80190a2:	460d      	mov	r5, r1
 80190a4:	ec45 4b10 	vmov	d0, r4, r5
 80190a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ac:	2d00      	cmp	r5, #0
 80190ae:	dc0e      	bgt.n	80190ce <__ieee754_sqrt+0x56>
 80190b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80190b4:	4322      	orrs	r2, r4
 80190b6:	d0f5      	beq.n	80190a4 <__ieee754_sqrt+0x2c>
 80190b8:	b19d      	cbz	r5, 80190e2 <__ieee754_sqrt+0x6a>
 80190ba:	4622      	mov	r2, r4
 80190bc:	4620      	mov	r0, r4
 80190be:	4629      	mov	r1, r5
 80190c0:	f7e7 f8ba 	bl	8000238 <__aeabi_dsub>
 80190c4:	4602      	mov	r2, r0
 80190c6:	460b      	mov	r3, r1
 80190c8:	f7e7 fb98 	bl	80007fc <__aeabi_ddiv>
 80190cc:	e7e8      	b.n	80190a0 <__ieee754_sqrt+0x28>
 80190ce:	152a      	asrs	r2, r5, #20
 80190d0:	d115      	bne.n	80190fe <__ieee754_sqrt+0x86>
 80190d2:	2000      	movs	r0, #0
 80190d4:	e009      	b.n	80190ea <__ieee754_sqrt+0x72>
 80190d6:	0acb      	lsrs	r3, r1, #11
 80190d8:	3a15      	subs	r2, #21
 80190da:	0549      	lsls	r1, r1, #21
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d0fa      	beq.n	80190d6 <__ieee754_sqrt+0x5e>
 80190e0:	e7f7      	b.n	80190d2 <__ieee754_sqrt+0x5a>
 80190e2:	462a      	mov	r2, r5
 80190e4:	e7fa      	b.n	80190dc <__ieee754_sqrt+0x64>
 80190e6:	005b      	lsls	r3, r3, #1
 80190e8:	3001      	adds	r0, #1
 80190ea:	02dc      	lsls	r4, r3, #11
 80190ec:	d5fb      	bpl.n	80190e6 <__ieee754_sqrt+0x6e>
 80190ee:	1e44      	subs	r4, r0, #1
 80190f0:	1b12      	subs	r2, r2, r4
 80190f2:	f1c0 0420 	rsb	r4, r0, #32
 80190f6:	fa21 f404 	lsr.w	r4, r1, r4
 80190fa:	4323      	orrs	r3, r4
 80190fc:	4081      	lsls	r1, r0
 80190fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019102:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8019106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801910a:	07d2      	lsls	r2, r2, #31
 801910c:	bf5c      	itt	pl
 801910e:	005b      	lslpl	r3, r3, #1
 8019110:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8019114:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019118:	bf58      	it	pl
 801911a:	0049      	lslpl	r1, r1, #1
 801911c:	2600      	movs	r6, #0
 801911e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8019122:	107f      	asrs	r7, r7, #1
 8019124:	0049      	lsls	r1, r1, #1
 8019126:	2016      	movs	r0, #22
 8019128:	4632      	mov	r2, r6
 801912a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801912e:	1915      	adds	r5, r2, r4
 8019130:	429d      	cmp	r5, r3
 8019132:	bfde      	ittt	le
 8019134:	192a      	addle	r2, r5, r4
 8019136:	1b5b      	suble	r3, r3, r5
 8019138:	1936      	addle	r6, r6, r4
 801913a:	0fcd      	lsrs	r5, r1, #31
 801913c:	3801      	subs	r0, #1
 801913e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8019142:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019146:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801914a:	d1f0      	bne.n	801912e <__ieee754_sqrt+0xb6>
 801914c:	4605      	mov	r5, r0
 801914e:	2420      	movs	r4, #32
 8019150:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019154:	4293      	cmp	r3, r2
 8019156:	eb0c 0e00 	add.w	lr, ip, r0
 801915a:	dc02      	bgt.n	8019162 <__ieee754_sqrt+0xea>
 801915c:	d113      	bne.n	8019186 <__ieee754_sqrt+0x10e>
 801915e:	458e      	cmp	lr, r1
 8019160:	d811      	bhi.n	8019186 <__ieee754_sqrt+0x10e>
 8019162:	f1be 0f00 	cmp.w	lr, #0
 8019166:	eb0e 000c 	add.w	r0, lr, ip
 801916a:	da3f      	bge.n	80191ec <__ieee754_sqrt+0x174>
 801916c:	2800      	cmp	r0, #0
 801916e:	db3d      	blt.n	80191ec <__ieee754_sqrt+0x174>
 8019170:	f102 0801 	add.w	r8, r2, #1
 8019174:	1a9b      	subs	r3, r3, r2
 8019176:	458e      	cmp	lr, r1
 8019178:	bf88      	it	hi
 801917a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801917e:	eba1 010e 	sub.w	r1, r1, lr
 8019182:	4465      	add	r5, ip
 8019184:	4642      	mov	r2, r8
 8019186:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801918a:	3c01      	subs	r4, #1
 801918c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019190:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019194:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019198:	d1dc      	bne.n	8019154 <__ieee754_sqrt+0xdc>
 801919a:	4319      	orrs	r1, r3
 801919c:	d01b      	beq.n	80191d6 <__ieee754_sqrt+0x15e>
 801919e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801921c <__ieee754_sqrt+0x1a4>
 80191a2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8019220 <__ieee754_sqrt+0x1a8>
 80191a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80191aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80191ae:	f7e7 f843 	bl	8000238 <__aeabi_dsub>
 80191b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80191b6:	4602      	mov	r2, r0
 80191b8:	460b      	mov	r3, r1
 80191ba:	4640      	mov	r0, r8
 80191bc:	4649      	mov	r1, r9
 80191be:	f7e7 fc6f 	bl	8000aa0 <__aeabi_dcmple>
 80191c2:	b140      	cbz	r0, 80191d6 <__ieee754_sqrt+0x15e>
 80191c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80191c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80191cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80191d0:	d10e      	bne.n	80191f0 <__ieee754_sqrt+0x178>
 80191d2:	3601      	adds	r6, #1
 80191d4:	4625      	mov	r5, r4
 80191d6:	1073      	asrs	r3, r6, #1
 80191d8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80191dc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80191e0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80191e4:	086b      	lsrs	r3, r5, #1
 80191e6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80191ea:	e759      	b.n	80190a0 <__ieee754_sqrt+0x28>
 80191ec:	4690      	mov	r8, r2
 80191ee:	e7c1      	b.n	8019174 <__ieee754_sqrt+0xfc>
 80191f0:	f7e7 f824 	bl	800023c <__adddf3>
 80191f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80191f8:	4602      	mov	r2, r0
 80191fa:	460b      	mov	r3, r1
 80191fc:	4640      	mov	r0, r8
 80191fe:	4649      	mov	r1, r9
 8019200:	f7e7 fc44 	bl	8000a8c <__aeabi_dcmplt>
 8019204:	b120      	cbz	r0, 8019210 <__ieee754_sqrt+0x198>
 8019206:	1cab      	adds	r3, r5, #2
 8019208:	bf08      	it	eq
 801920a:	3601      	addeq	r6, #1
 801920c:	3502      	adds	r5, #2
 801920e:	e7e2      	b.n	80191d6 <__ieee754_sqrt+0x15e>
 8019210:	1c6b      	adds	r3, r5, #1
 8019212:	f023 0501 	bic.w	r5, r3, #1
 8019216:	e7de      	b.n	80191d6 <__ieee754_sqrt+0x15e>
 8019218:	7ff00000 	.word	0x7ff00000
 801921c:	0801c718 	.word	0x0801c718
 8019220:	0801c710 	.word	0x0801c710

08019224 <_init>:
 8019224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019226:	bf00      	nop
 8019228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801922a:	bc08      	pop	{r3}
 801922c:	469e      	mov	lr, r3
 801922e:	4770      	bx	lr

08019230 <_fini>:
 8019230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019232:	bf00      	nop
 8019234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019236:	bc08      	pop	{r3}
 8019238:	469e      	mov	lr, r3
 801923a:	4770      	bx	lr
