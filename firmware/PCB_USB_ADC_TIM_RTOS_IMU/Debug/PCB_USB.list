
PCB_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080092b4  080092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093f0  080093f0  0000a3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093f8  080093f8  0000a3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080093fc  080093fc  0000a3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000150  20000008  08009400  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b60  20000158  08009550  0000b158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001cb8  08009550  0000bcb8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012886  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034c2  00000000  00000000  0001da0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001540  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fc3  00000000  00000000  00022410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023756  00000000  00000000  000233d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014dc8  00000000  00000000  00046b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d4aef  00000000  00000000  0005b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001303e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b24  00000000  00000000  00130424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  00135f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000158 	.word	0x20000158
 800015c:	00000000 	.word	0x00000000
 8000160:	0800929c 	.word	0x0800929c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000015c 	.word	0x2000015c
 800017c:	0800929c 	.word	0x0800929c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000230:	f023 0218 	bic.w	r2, r3, #24
 8000234:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4313      	orrs	r3, r2
 800023c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000258:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800025a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000268:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000270:	68fb      	ldr	r3, [r7, #12]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 f9fa 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f838 	bl	80002fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800028c:	f000 f8a6 	bl	80003dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f8c1 	bl	8000416 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000294:	f007 fe02 	bl	8007e9c <MX_USB_Device_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(HELLO_GPIO_Port,HELLO_Pin);
 8000298:	2120      	movs	r1, #32
 800029a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029e:	f000 fd2f 	bl	8000d00 <HAL_GPIO_TogglePin>
	  test++;
 80002a2:	4b13      	ldr	r3, [pc, #76]	@ (80002f0 <main+0x70>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <main+0x70>)
 80002ac:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(HELL_GPIO_Port,HELL_Pin);
 80002ae:	2110      	movs	r1, #16
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b4:	f000 fd24 	bl	8000d00 <HAL_GPIO_TogglePin>
	  test++;
 80002b8:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <main+0x70>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <main+0x70>)
 80002c2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(HEL_GPIO_Port,HEL_Pin);
 80002c4:	2108      	movs	r1, #8
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ca:	f000 fd19 	bl	8000d00 <HAL_GPIO_TogglePin>
	  test = 0;
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <main+0x70>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "PCB Hello World \r\n");
 80002d4:	4907      	ldr	r1, [pc, #28]	@ (80002f4 <main+0x74>)
 80002d6:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <main+0x78>)
 80002d8:	f008 fb40 	bl	800895c <siprintf>
	  CDC_Transmit_FS(msg, sizeof(msg));
 80002dc:	2114      	movs	r1, #20
 80002de:	4806      	ldr	r0, [pc, #24]	@ (80002f8 <main+0x78>)
 80002e0:	f007 fe9a 	bl	8008018 <CDC_Transmit_FS>

	  HAL_Delay(100);
 80002e4:	2064      	movs	r0, #100	@ 0x64
 80002e6:	f000 fa4f 	bl	8000788 <HAL_Delay>
	  HAL_GPIO_TogglePin(HELLO_GPIO_Port,HELLO_Pin);
 80002ea:	bf00      	nop
 80002ec:	e7d4      	b.n	8000298 <main+0x18>
 80002ee:	bf00      	nop
 80002f0:	20000174 	.word	0x20000174
 80002f4:	080092b4 	.word	0x080092b4
 80002f8:	20000178 	.word	0x20000178

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b09a      	sub	sp, #104	@ 0x68
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0320 	add.w	r3, r7, #32
 8000306:	2248      	movs	r2, #72	@ 0x48
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f008 fb48 	bl	80089a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]
 800031e:	615a      	str	r2, [r3, #20]
 8000320:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000322:	f002 fa09 	bl	8002738 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000326:	2010      	movs	r0, #16
 8000328:	f7ff ff7a 	bl	8000220 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800032c:	4b2a      	ldr	r3, [pc, #168]	@ (80003d8 <SystemClock_Config+0xdc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000334:	4a28      	ldr	r2, [pc, #160]	@ (80003d8 <SystemClock_Config+0xdc>)
 8000336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemClock_Config+0xdc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000348:	2326      	movs	r3, #38	@ 0x26
 800034a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2340      	movs	r3, #64	@ 0x40
 800035c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800035e:	2300      	movs	r3, #0
 8000360:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000362:	2360      	movs	r3, #96	@ 0x60
 8000364:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800036a:	2301      	movs	r3, #1
 800036c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000372:	2318      	movs	r3, #24
 8000374:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000376:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800037a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000380:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000386:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0320 	add.w	r3, r7, #32
 800038c:	4618      	mov	r0, r3
 800038e:	f002 fd5f 	bl	8002e50 <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000398:	f000 f868 	bl	800046c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800039c:	236f      	movs	r3, #111	@ 0x6f
 800039e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	2303      	movs	r3, #3
 80003a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2102      	movs	r1, #2
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f8bb 	bl	8003538 <HAL_RCC_ClockConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80003c8:	f000 f850 	bl	800046c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80003cc:	f003 fe4c 	bl	8004068 <HAL_RCCEx_EnableMSIPLLMode>
}
 80003d0:	bf00      	nop
 80003d2:	3768      	adds	r7, #104	@ 0x68
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	58000400 	.word	0x58000400

080003dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b094      	sub	sp, #80	@ 0x50
 80003e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2250      	movs	r2, #80	@ 0x50
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f008 fad9 	bl	80089a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80003ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003f4:	2300      	movs	r3, #0
 80003f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80003f8:	2310      	movs	r3, #16
 80003fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003fc:	463b      	mov	r3, r7
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 fcbc 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800040a:	f000 f82f 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800040e:	bf00      	nop
 8000410:	3750      	adds	r7, #80	@ 0x50
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b086      	sub	sp, #24
 800041a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	2004      	movs	r0, #4
 800042c:	f7ff ff0e 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	2001      	movs	r0, #1
 8000432:	f7ff ff0b 	bl	800024c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	2002      	movs	r0, #2
 8000438:	f7ff ff08 	bl	800024c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEL_Pin|HELL_Pin|HELLO_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2138      	movs	r1, #56	@ 0x38
 8000440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000444:	f000 fc44 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEL_Pin HELL_Pin HELLO_Pin */
  GPIO_InitStruct.Pin = HEL_Pin|HELL_Pin|HELLO_Pin;
 8000448:	2338      	movs	r3, #56	@ 0x38
 800044a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4619      	mov	r1, r3
 800045c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000460:	f000 fac6 	bl	80009f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000464:	bf00      	nop
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800048a:	bf00      	nop
 800048c:	e7fd      	b.n	800048a <NMI_Handler+0x4>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	bf00      	nop
 8000494:	e7fd      	b.n	8000492 <HardFault_Handler+0x4>

08000496 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049a:	bf00      	nop
 800049c:	e7fd      	b.n	800049a <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	bf00      	nop
 80004a4:	e7fd      	b.n	80004a2 <BusFault_Handler+0x4>

080004a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004aa:	bf00      	nop
 80004ac:	e7fd      	b.n	80004aa <UsageFault_Handler+0x4>

080004ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004dc:	f000 f928 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004e8:	4802      	ldr	r0, [pc, #8]	@ (80004f4 <USB_LP_IRQHandler+0x10>)
 80004ea:	f000 fd13 	bl	8000f14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20001674 	.word	0x20001674

080004f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <_sbrk+0x5c>)
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <_sbrk+0x60>)
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800050c:	4b13      	ldr	r3, [pc, #76]	@ (800055c <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <_sbrk+0x64>)
 8000516:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <_sbrk+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	429a      	cmp	r2, r3
 8000526:	d207      	bcs.n	8000538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000528:	f008 fa42 	bl	80089b0 <__errno>
 800052c:	4603      	mov	r3, r0
 800052e:	220c      	movs	r2, #12
 8000530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	e009      	b.n	800054c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	4a05      	ldr	r2, [pc, #20]	@ (800055c <_sbrk+0x64>)
 8000548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20030000 	.word	0x20030000
 8000558:	00000400 	.word	0x00000400
 800055c:	2000018c 	.word	0x2000018c
 8000560:	20001cb8 	.word	0x20001cb8

08000564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <SystemInit+0x98>)
 800056a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800056e:	4a23      	ldr	r2, [pc, #140]	@ (80005fc <SystemInit+0x98>)
 8000570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000590:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <SystemInit+0x9c>)
 800059e:	4013      	ands	r3, r2
 80005a0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005ae:	f023 0305 	bic.w	r3, r3, #5
 80005b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80005be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005c2:	f023 0301 	bic.w	r3, r3, #1
 80005c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80005ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <SystemInit+0xa0>)
 80005d0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <SystemInit+0xa0>)
 80005d8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80005e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	faf6fefb 	.word	0xfaf6fefb
 8000604:	22041000 	.word	0x22041000

08000608 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000608:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060c:	3304      	adds	r3, #4

0800060e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000610:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000612:	d3f9      	bcc.n	8000608 <CopyDataInit>
  bx lr
 8000614:	4770      	bx	lr

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000616:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000618:	3004      	adds	r0, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800061a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>
  bx lr
 800061e:	4770      	bx	lr

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f7ff ff9e 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <LoopForever+0x6>)
 800062a:	490c      	ldr	r1, [pc, #48]	@ (800065c <LoopForever+0xa>)
 800062c:	4a0c      	ldr	r2, [pc, #48]	@ (8000660 <LoopForever+0xe>)
 800062e:	2300      	movs	r3, #0
 8000630:	f7ff ffed 	bl	800060e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000634:	480b      	ldr	r0, [pc, #44]	@ (8000664 <LoopForever+0x12>)
 8000636:	490c      	ldr	r1, [pc, #48]	@ (8000668 <LoopForever+0x16>)
 8000638:	4a0c      	ldr	r2, [pc, #48]	@ (800066c <LoopForever+0x1a>)
 800063a:	2300      	movs	r3, #0
 800063c:	f7ff ffe7 	bl	800060e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <LoopForever+0x1e>)
 8000642:	490c      	ldr	r1, [pc, #48]	@ (8000674 <LoopForever+0x22>)
 8000644:	2300      	movs	r3, #0
 8000646:	f7ff ffe8 	bl	800061a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f008 f9b7 	bl	80089bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800064e:	f7ff fe17 	bl	8000280 <main>

08000652 <LoopForever>:

LoopForever:
  b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000658:	20000008 	.word	0x20000008
 800065c:	20000158 	.word	0x20000158
 8000660:	08009400 	.word	0x08009400
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000664:	20030000 	.word	0x20030000
 8000668:	20030000 	.word	0x20030000
 800066c:	08009550 	.word	0x08009550
  INIT_BSS _sbss, _ebss
 8000670:	20000158 	.word	0x20000158
 8000674:	20001cb8 	.word	0x20001cb8

08000678 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <HAL_Init+0x3c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0b      	ldr	r2, [pc, #44]	@ (80006b8 <HAL_Init+0x3c>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000690:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000692:	2003      	movs	r0, #3
 8000694:	f000 f96c 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000698:	200f      	movs	r0, #15
 800069a:	f000 f80f 	bl	80006bc <HAL_InitTick>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	e001      	b.n	80006ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006aa:	f7ff fee5 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	58004000 	.word	0x58004000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_InitTick+0x6c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d024      	beq.n	800071a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d0:	f003 f8e0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_InitTick+0x6c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f974 	bl	80009d6 <HAL_SYSTICK_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10f      	bne.n	8000714 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d809      	bhi.n	800070e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fa:	2200      	movs	r2, #0
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	f000 f940 	bl	8000986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000706:	4a09      	ldr	r2, [pc, #36]	@ (800072c <HAL_InitTick+0x70>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e007      	b.n	800071e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e004      	b.n	800071e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e001      	b.n	800071e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000010 	.word	0x20000010
 800072c:	2000000c 	.word	0x2000000c

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_IncTick+0x20>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_IncTick+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <HAL_IncTick+0x24>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000010 	.word	0x20000010
 8000754:	20000190 	.word	0x20000190

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000190 	.word	0x20000190

08000770 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <HAL_GetTickPrio+0x14>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	2000000c 	.word	0x2000000c

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff ffe2 	bl	8000758 <HAL_GetTick>
 8000794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_Delay+0x44>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ae:	bf00      	nop
 80007b0:	f7ff ffd2 	bl	8000758 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000010 	.word	0x20000010

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4907      	ldr	r1, [pc, #28]	@ (800086c <__NVIC_EnableIRQ+0x38>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	@ 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f7ff ff8e 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	@ (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff29 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff40 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff90 	bl	80008c4 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5f 	bl	8000870 <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff33 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffa4 	bl	800092c <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e14c      	b.n	8000c9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 813e 	beq.w	8000c94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d005      	beq.n	8000a30 <HAL_GPIO_Init+0x40>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d130      	bne.n	8000a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a66:	2201      	movs	r2, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	f003 0201 	and.w	r2, r3, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d017      	beq.n	8000ace <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d123      	bne.n	8000b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	08da      	lsrs	r2, r3, #3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3208      	adds	r2, #8
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	691a      	ldr	r2, [r3, #16]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0203 	and.w	r2, r3, #3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8098 	beq.w	8000c94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b64:	4a54      	ldr	r2, [pc, #336]	@ (8000cb8 <HAL_GPIO_Init+0x2c8>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b8e:	d019      	beq.n	8000bc4 <HAL_GPIO_Init+0x1d4>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4a      	ldr	r2, [pc, #296]	@ (8000cbc <HAL_GPIO_Init+0x2cc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x1d0>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a49      	ldr	r2, [pc, #292]	@ (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1cc>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a48      	ldr	r2, [pc, #288]	@ (8000cc4 <HAL_GPIO_Init+0x2d4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1c8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a47      	ldr	r2, [pc, #284]	@ (8000cc8 <HAL_GPIO_Init+0x2d8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1c4>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e008      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e004      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	f002 0203 	and.w	r2, r2, #3
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd6:	4938      	ldr	r1, [pc, #224]	@ (8000cb8 <HAL_GPIO_Init+0x2c8>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be4:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c08:	4a30      	ldr	r2, [pc, #192]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c32:	4a26      	ldr	r2, [pc, #152]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f47f aeab 	bne.w	8000a00 <HAL_GPIO_Init+0x10>
  }
}
 8000caa:	bf00      	nop
 8000cac:	bf00      	nop
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	58000800 	.word	0x58000800

08000cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4013      	ands	r3, r2
 8000d18:	041a      	lsls	r2, r3, #16
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43d9      	mvns	r1, r3
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	400b      	ands	r3, r1
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0c0      	b.n	8000ec8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d106      	bne.n	8000d60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f007 fad6 	bl	800830c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2203      	movs	r2, #3
 8000d64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 faa9 	bl	80042c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e03e      	b.n	8000df6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	3311      	adds	r3, #17
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3310      	adds	r3, #16
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000da0:	7bfa      	ldrb	r2, [r7, #15]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3313      	adds	r3, #19
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	3320      	adds	r3, #32
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	3324      	adds	r3, #36	@ 0x24
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3301      	adds	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3bb      	bcc.n	8000d78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e044      	b.n	8000e90 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	440b      	add	r3, r1
 8000e14:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e2e:	7bfa      	ldrb	r2, [r7, #15]
 8000e30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	440b      	add	r3, r1
 8000e56:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	7bfa      	ldrb	r2, [r7, #15]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3b5      	bcc.n	8000e06 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000ea6:	f003 fa28 	bl	80042fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7a9b      	ldrb	r3, [r3, #10]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d102      	bne.n	8000ec6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f001 fc0e 	bl	80026e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_PCD_Start+0x16>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e012      	b.n	8000f0c <HAL_PCD_Start+0x3c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f9cf 	bl	8004296 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 ffad 	bl	8005e5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 ffb2 	bl	8005e8a <USB_ReadInterrupts>
 8000f26:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fb06 	bl	8001544 <PCD_EP_ISR_Handler>

    return;
 8000f38:	e110      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d013      	beq.n	8000f6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f56:	b292      	uxth	r2, r2
 8000f58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f007 fa88 	bl	8008472 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f62:	2100      	movs	r1, #0
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f8fc 	bl	8001162 <HAL_PCD_SetAddress>

    return;
 8000f6a:	e0f7      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00c      	beq.n	8000f90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000f8e:	e0e5      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00c      	beq.n	8000fb4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000fb2:	e0d3      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d034      	beq.n	8001028 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0204 	bic.w	r2, r2, #4
 8000fd0:	b292      	uxth	r2, r2
 8000fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0208 	bic.w	r2, r2, #8
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f007 fc2a 	bl	800885c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f007 fa6b 	bl	80084e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001016:	b29a      	uxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001020:	b292      	uxth	r2, r2
 8001022:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001026:	e099      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800102e:	2b00      	cmp	r3, #0
 8001030:	d027      	beq.n	8001082 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0208 	orr.w	r2, r2, #8
 8001044:	b292      	uxth	r2, r2
 8001046:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	b292      	uxth	r2, r2
 8001076:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f007 fa18 	bl	80084b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001080:	e06c      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001088:	2b00      	cmp	r3, #0
 800108a:	d040      	beq.n	800110e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800109e:	b292      	uxth	r2, r2
 80010a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d12b      	bne.n	8001106 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0204 	orr.w	r2, r2, #4
 80010c0:	b292      	uxth	r2, r2
 80010c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0208 	orr.w	r2, r2, #8
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80010fc:	2101      	movs	r1, #1
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f007 fbac 	bl	800885c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001104:	e02a      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f007 f9d2 	bl	80084b0 <HAL_PCD_SuspendCallback>
    return;
 800110c:	e026      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00f      	beq.n	8001138 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800112a:	b292      	uxth	r2, r2
 800112c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f007 f990 	bl	8008456 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001136:	e011      	b.n	800115c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00c      	beq.n	800115c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001154:	b292      	uxth	r2, r2
 8001156:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800115a:	bf00      	nop
  }
}
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_PCD_SetAddress+0x1a>
 8001178:	2302      	movs	r3, #2
 800117a:	e012      	b.n	80011a2 <HAL_PCD_SetAddress+0x40>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f004 fe4e 	bl	8005e34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	4608      	mov	r0, r1
 80011b4:	4611      	mov	r1, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	70fb      	strb	r3, [r7, #3]
 80011bc:	460b      	mov	r3, r1
 80011be:	803b      	strh	r3, [r7, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da0e      	bge.n	80011ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	f003 0207 	and.w	r2, r3, #7
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	3310      	adds	r3, #16
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2201      	movs	r2, #1
 80011ea:	705a      	strb	r2, [r3, #1]
 80011ec:	e00e      	b.n	800120c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	f003 0207 	and.w	r2, r3, #7
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	b2da      	uxtb	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001218:	883b      	ldrh	r3, [r7, #0]
 800121a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	78ba      	ldrb	r2, [r7, #2]
 8001226:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d102      	bne.n	8001234 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_PCD_EP_Open+0x98>
 800123e:	2302      	movs	r3, #2
 8001240:	e00e      	b.n	8001260 <HAL_PCD_EP_Open+0xb6>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68f9      	ldr	r1, [r7, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 f871 	bl	8004338 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800125e:	7afb      	ldrb	r3, [r7, #11]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da0e      	bge.n	800129a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	f003 0207 	and.w	r2, r3, #7
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	3310      	adds	r3, #16
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	705a      	strb	r2, [r3, #1]
 8001298:	e00e      	b.n	80012b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	f003 0207 	and.w	r2, r3, #7
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_PCD_EP_Close+0x6a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e00e      	b.n	80012f0 <HAL_PCD_EP_Close+0x88>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fd11 	bl	8004d08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	460b      	mov	r3, r1
 8001306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	f003 0207 	and.w	r2, r3, #7
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2200      	movs	r2, #0
 8001336:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	b2da      	uxtb	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6979      	ldr	r1, [r7, #20]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fec9 	bl	80050e2 <USB_EPStartXfer>

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	f003 0207 	and.w	r2, r3, #7
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800137c:	681b      	ldr	r3, [r3, #0]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	460b      	mov	r3, r1
 8001398:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	f003 0207 	and.w	r2, r3, #7
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	3310      	adds	r3, #16
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2200      	movs	r2, #0
 80013ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2201      	movs	r2, #1
 80013d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6979      	ldr	r1, [r7, #20]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fe7a 	bl	80050e2 <USB_EPStartXfer>

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	7912      	ldrb	r2, [r2, #4]
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e03e      	b.n	8001494 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da0e      	bge.n	800143c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	f003 0207 	and.w	r2, r3, #7
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	3310      	adds	r3, #16
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	705a      	strb	r2, [r3, #1]
 800143a:	e00c      	b.n	8001456 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	b2da      	uxtb	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_PCD_EP_SetStall+0x7e>
 8001472:	2302      	movs	r3, #2
 8001474:	e00e      	b.n	8001494 <HAL_PCD_EP_SetStall+0x9c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fbdb 	bl	8005c40 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	7912      	ldrb	r2, [r2, #4]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e040      	b.n	800153c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da0e      	bge.n	80014e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 0207 	and.w	r2, r3, #7
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	3310      	adds	r3, #16
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	705a      	strb	r2, [r3, #1]
 80014de:	e00e      	b.n	80014fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0207 	and.w	r2, r3, #7
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2da      	uxtb	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_PCD_EP_ClrStall+0x82>
 800151a:	2302      	movs	r3, #2
 800151c:	e00e      	b.n	800153c <HAL_PCD_EP_ClrStall+0xa0>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f004 fbd8 	bl	8005ce2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b092      	sub	sp, #72	@ 0x48
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800154c:	e333      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001556:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001558:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001564:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 8108 	bne.w	800177e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800156e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d14c      	bne.n	8001612 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001588:	813b      	strh	r3, [r7, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	893b      	ldrh	r3, [r7, #8]
 8001590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001598:	b29b      	uxth	r3, r3
 800159a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3310      	adds	r3, #16
 80015a0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	441a      	add	r2, r3
 80015d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f006 ff21 	bl	8008422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7b1b      	ldrb	r3, [r3, #12]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 82e5 	beq.w	8001bb6 <PCD_EP_ISR_Handler+0x672>
 80015ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f040 82e0 	bne.w	8001bb6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7b1b      	ldrb	r3, [r3, #12]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001600:	b2da      	uxtb	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	731a      	strb	r2, [r3, #12]
 8001610:	e2d1      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001618:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001622:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001628:	2b00      	cmp	r3, #0
 800162a:	d032      	beq.n	8001692 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4413      	add	r3, r2
 8001646:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001652:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800165e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001660:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001664:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001666:	b29b      	uxth	r3, r3
 8001668:	f004 fc62 	bl	8005f30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29a      	uxth	r2, r3
 8001674:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001678:	4013      	ands	r3, r2
 800167a:	817b      	strh	r3, [r7, #10]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	897a      	ldrh	r2, [r7, #10]
 8001682:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001686:	b292      	uxth	r2, r2
 8001688:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f006 fe9c 	bl	80083c8 <HAL_PCD_SetupStageCallback>
 8001690:	e291      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001692:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001696:	2b00      	cmp	r3, #0
 8001698:	f280 828d 	bge.w	8001bb6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80016a8:	4013      	ands	r3, r2
 80016aa:	81fb      	strh	r3, [r7, #14]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	89fa      	ldrh	r2, [r7, #14]
 80016b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016b6:	b292      	uxth	r2, r2
 80016b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <PCD_EP_ISR_Handler+0x1da>
 80016ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d015      	beq.n	800171e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016f8:	6959      	ldr	r1, [r3, #20]
 80016fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001700:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001702:	b29b      	uxth	r3, r3
 8001704:	f004 fc14 	bl	8005f30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	441a      	add	r2, r3
 8001712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001714:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f006 fe67 	bl	80083ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001726:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 8242 	bne.w	8001bb6 <PCD_EP_ISR_Handler+0x672>
 8001732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001734:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001738:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800173c:	f000 823b 	beq.w	8001bb6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800174c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001750:	81bb      	strh	r3, [r7, #12]
 8001752:	89bb      	ldrh	r3, [r7, #12]
 8001754:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001758:	81bb      	strh	r3, [r7, #12]
 800175a:	89bb      	ldrh	r3, [r7, #12]
 800175c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001760:	81bb      	strh	r3, [r7, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	89bb      	ldrh	r3, [r7, #12]
 8001768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800176c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001778:	b29b      	uxth	r3, r3
 800177a:	8013      	strh	r3, [r2, #0]
 800177c:	e21b      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001790:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001794:	2b00      	cmp	r3, #0
 8001796:	f280 80f1 	bge.w	800197c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017b0:	4013      	ands	r3, r2
 80017b2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80017c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017c8:	b292      	uxth	r2, r2
 80017ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017cc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017e4:	7b1b      	ldrb	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d123      	bne.n	8001832 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4413      	add	r3, r2
 8001804:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800180e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001812:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 808b 	beq.w	8001932 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001822:	6959      	ldr	r1, [r3, #20]
 8001824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001826:	88da      	ldrh	r2, [r3, #6]
 8001828:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800182c:	f004 fb80 	bl	8005f30 <USB_ReadPMA>
 8001830:	e07f      	b.n	8001932 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001834:	78db      	ldrb	r3, [r3, #3]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d109      	bne.n	800184e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800183a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800183c:	461a      	mov	r2, r3
 800183e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f9c6 	bl	8001bd2 <HAL_PCD_EP_DB_Receive>
 8001846:	4603      	mov	r3, r0
 8001848:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800184c:	e071      	b.n	8001932 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001868:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	441a      	add	r2, r3
 8001878:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800187a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800187e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001886:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800188a:	b29b      	uxth	r3, r3
 800188c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d022      	beq.n	80018ee <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80018d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d02c      	beq.n	8001932 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018de:	6959      	ldr	r1, [r3, #20]
 80018e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018e2:	891a      	ldrh	r2, [r3, #8]
 80018e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80018e8:	f004 fb22 	bl	8005f30 <USB_ReadPMA>
 80018ec:	e021      	b.n	8001932 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	4413      	add	r3, r2
 8001908:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001912:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001916:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001924:	6959      	ldr	r1, [r3, #20]
 8001926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001928:	895a      	ldrh	r2, [r3, #10]
 800192a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800192e:	f004 faff 	bl	8005f30 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800193a:	441a      	add	r2, r3
 800193c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800193e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001948:	441a      	add	r2, r3
 800194a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800194c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <PCD_EP_ISR_Handler+0x41e>
 8001956:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800195a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	429a      	cmp	r2, r3
 8001960:	d206      	bcs.n	8001970 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f006 fd3f 	bl	80083ec <HAL_PCD_DataOutStageCallback>
 800196e:	e005      	b.n	800197c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fbb3 	bl	80050e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800197c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8117 	beq.w	8001bb6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001988:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	3310      	adds	r3, #16
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80019b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	441a      	add	r2, r3
 80019c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80019c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80019d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d6:	78db      	ldrb	r3, [r3, #3]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f040 80a1 	bne.w	8001b20 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80019de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80019e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e6:	7b1b      	ldrb	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8092 	beq.w	8001b12 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80019f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d046      	beq.n	8001a86 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d126      	bne.n	8001a4e <PCD_EP_ISR_Handler+0x50a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	00da      	lsls	r2, r3, #3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	4413      	add	r3, r2
 8001a22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	e061      	b.n	8001b12 <PCD_EP_ISR_Handler+0x5ce>
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d15d      	bne.n	8001b12 <PCD_EP_ISR_Handler+0x5ce>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	00da      	lsls	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2200      	movs	r2, #0
 8001a82:	801a      	strh	r2, [r3, #0]
 8001a84:	e045      	b.n	8001b12 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d126      	bne.n	8001ae2 <PCD_EP_ISR_Handler+0x59e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	4413      	add	r3, r2
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	00da      	lsls	r2, r3, #3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	801a      	strh	r2, [r3, #0]
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	e017      	b.n	8001b12 <PCD_EP_ISR_Handler+0x5ce>
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d113      	bne.n	8001b12 <PCD_EP_ISR_Handler+0x5ce>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	4413      	add	r3, r2
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00da      	lsls	r2, r3, #3
 8001b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b04:	4413      	add	r3, r2
 8001b06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f006 fc82 	bl	8008422 <HAL_PCD_DataInStageCallback>
 8001b1e:	e04a      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d13f      	bne.n	8001baa <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b4e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8001b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d906      	bls.n	8001b68 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e002      	b.n	8001b6e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f006 fc50 	bl	8008422 <HAL_PCD_DataInStageCallback>
 8001b82:	e018      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001b8a:	441a      	add	r2, r3
 8001b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001b96:	441a      	add	r2, r3
 8001b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b9a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fa9d 	bl	80050e2 <USB_EPStartXfer>
 8001ba8:	e005      	b.n	8001bb6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001baa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001bac:	461a      	mov	r2, r3
 8001bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f917 	bl	8001de4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f6ff acc3 	blt.w	800154e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3748      	adds	r7, #72	@ 0x48
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b088      	sub	sp, #32
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d07c      	beq.n	8001ce4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	8b7b      	ldrh	r3, [r7, #26]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d306      	bcc.n	8001c28 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	619a      	str	r2, [r3, #24]
 8001c26:	e002      	b.n	8001c2e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d123      	bne.n	8001c7e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c50:	833b      	strh	r3, [r7, #24]
 8001c52:	8b3b      	ldrh	r3, [r7, #24]
 8001c54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c58:	833b      	strh	r3, [r7, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	441a      	add	r2, r3
 8001c68:	8b3b      	ldrh	r3, [r7, #24]
 8001c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01f      	beq.n	8001cc8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ca2:	82fb      	strh	r3, [r7, #22]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	441a      	add	r2, r3
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8085 	beq.w	8001dda <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	6959      	ldr	r1, [r3, #20]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	891a      	ldrh	r2, [r3, #8]
 8001cdc:	8b7b      	ldrh	r3, [r7, #26]
 8001cde:	f004 f927 	bl	8005f30 <USB_ReadPMA>
 8001ce2:	e07a      	b.n	8001dda <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	8b7b      	ldrh	r3, [r7, #26]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d306      	bcc.n	8001d22 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	619a      	str	r2, [r3, #24]
 8001d20:	e002      	b.n	8001d28 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d123      	bne.n	8001d78 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4a:	83fb      	strh	r3, [r7, #30]
 8001d4c:	8bfb      	ldrh	r3, [r7, #30]
 8001d4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d52:	83fb      	strh	r3, [r7, #30]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	441a      	add	r2, r3
 8001d62:	8bfb      	ldrh	r3, [r7, #30]
 8001d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d11f      	bne.n	8001dc2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9c:	83bb      	strh	r3, [r7, #28]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	441a      	add	r2, r3
 8001dac:	8bbb      	ldrh	r3, [r7, #28]
 8001dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dc2:	8b7b      	ldrh	r3, [r7, #26]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6959      	ldr	r1, [r3, #20]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	895a      	ldrh	r2, [r3, #10]
 8001dd4:	8b7b      	ldrh	r3, [r7, #26]
 8001dd6:	f004 f8ab 	bl	8005f30 <USB_ReadPMA>
    }
  }

  return count;
 8001dda:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0a6      	sub	sp, #152	@ 0x98
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 81f7 	beq.w	80021ec <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d907      	bls.n	8001e42 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001e3a:	1ad2      	subs	r2, r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	e002      	b.n	8001e48 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 80e1 	bne.w	8002014 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d126      	bne.n	8001ea8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6e:	4413      	add	r3, r2
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	00da      	lsls	r2, r3, #3
 8001e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	e01a      	b.n	8001ede <HAL_PCD_EP_DB_Transmit+0xfa>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d116      	bne.n	8001ede <HAL_PCD_EP_DB_Transmit+0xfa>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec4:	4413      	add	r3, r2
 8001ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00da      	lsls	r2, r3, #3
 8001ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eda:	2200      	movs	r2, #0
 8001edc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d126      	bne.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x156>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	4413      	add	r3, r2
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	00da      	lsls	r2, r3, #3
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e017      	b.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x186>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d113      	bne.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x186>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f50:	4413      	add	r3, r2
 8001f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	00da      	lsls	r2, r3, #3
 8001f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	2200      	movs	r2, #0
 8001f68:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d123      	bne.n	8001fba <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f8c:	837b      	strh	r3, [r7, #26]
 8001f8e:	8b7b      	ldrh	r3, [r7, #26]
 8001f90:	f083 0320 	eor.w	r3, r3, #32
 8001f94:	837b      	strh	r3, [r7, #26]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	441a      	add	r2, r3
 8001fa4:	8b7b      	ldrh	r3, [r7, #26]
 8001fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f006 fa2e 	bl	8008422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01f      	beq.n	8002010 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fea:	833b      	strh	r3, [r7, #24]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	441a      	add	r2, r3
 8001ffa:	8b3b      	ldrh	r3, [r7, #24]
 8001ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002004:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800200c:	b29b      	uxth	r3, r3
 800200e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e31f      	b.n	8002654 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d021      	beq.n	8002062 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002038:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800204e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002056:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800205a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800205e:	b29b      	uxth	r3, r3
 8002060:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 82ca 	bne.w	8002602 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002076:	441a      	add	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002084:	441a      	add	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	429a      	cmp	r2, r3
 8002094:	d309      	bcc.n	80020aa <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	621a      	str	r2, [r3, #32]
 80020a8:	e015      	b.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80020b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80020b6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80020c0:	e009      	b.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d15f      	bne.n	800219e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f2:	4413      	add	r3, r2
 80020f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fe:	4413      	add	r3, r2
 8002100:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002110:	b29a      	uxth	r2, r3
 8002112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_PCD_EP_DB_Transmit+0x34e>
 800211c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212a:	b29a      	uxth	r2, r3
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	e051      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002134:	2b3e      	cmp	r3, #62	@ 0x3e
 8002136:	d816      	bhi.n	8002166 <HAL_PCD_EP_DB_Transmit+0x382>
 8002138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	653b      	str	r3, [r7, #80]	@ 0x50
 800213e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800214a:	3301      	adds	r3, #1
 800214c:	653b      	str	r3, [r7, #80]	@ 0x50
 800214e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29a      	uxth	r2, r3
 8002154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	029b      	lsls	r3, r3, #10
 800215a:	b29b      	uxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b29a      	uxth	r2, r3
 8002160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	e037      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	653b      	str	r3, [r7, #80]	@ 0x50
 800216c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_PCD_EP_DB_Transmit+0x398>
 8002176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002178:	3b01      	subs	r3, #1
 800217a:	653b      	str	r3, [r7, #80]	@ 0x50
 800217c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29a      	uxth	r2, r3
 8002182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	029b      	lsls	r3, r3, #10
 8002188:	b29b      	uxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002196:	b29a      	uxth	r2, r3
 8002198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800219a:	801a      	strh	r2, [r3, #0]
 800219c:	e01b      	b.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d117      	bne.n	80021d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021ba:	4413      	add	r3, r2
 80021bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	00da      	lsls	r2, r3, #3
 80021c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021c6:	4413      	add	r3, r2
 80021c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80021cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6959      	ldr	r1, [r3, #20]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	891a      	ldrh	r2, [r3, #8]
 80021e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f003 fe60 	bl	8005eaa <USB_WritePMA>
 80021ea:	e20a      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	4413      	add	r3, r2
 8002206:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002210:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800221c:	429a      	cmp	r2, r3
 800221e:	d307      	bcc.n	8002230 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	619a      	str	r2, [r3, #24]
 800222e:	e002      	b.n	8002236 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80f6 	bne.w	800242c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d126      	bne.n	8002296 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	677b      	str	r3, [r7, #116]	@ 0x74
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800225c:	4413      	add	r3, r2
 800225e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	00da      	lsls	r2, r3, #3
 8002266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002268:	4413      	add	r3, r2
 800226a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800226e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002270:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227a:	b29a      	uxth	r2, r3
 800227c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800227e:	801a      	strh	r2, [r3, #0]
 8002280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228e:	b29a      	uxth	r2, r3
 8002290:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002292:	801a      	strh	r2, [r3, #0]
 8002294:	e01a      	b.n	80022cc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d116      	bne.n	80022cc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022b2:	4413      	add	r3, r2
 80022b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00da      	lsls	r2, r3, #3
 80022bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022be:	4413      	add	r3, r2
 80022c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022c8:	2200      	movs	r2, #0
 80022ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d12f      	bne.n	800233c <HAL_PCD_EP_DB_Transmit+0x558>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022f4:	4413      	add	r3, r2
 80022f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	00da      	lsls	r2, r3, #3
 8002300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002304:	4413      	add	r3, r2
 8002306:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800230a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800230e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231a:	b29a      	uxth	r2, r3
 800231c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002320:	801a      	strh	r2, [r3, #0]
 8002322:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002332:	b29a      	uxth	r2, r3
 8002334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	e01c      	b.n	8002376 <HAL_PCD_EP_DB_Transmit+0x592>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	785b      	ldrb	r3, [r3, #1]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d118      	bne.n	8002376 <HAL_PCD_EP_DB_Transmit+0x592>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002354:	4413      	add	r3, r2
 8002356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	00da      	lsls	r2, r3, #3
 8002360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002364:	4413      	add	r3, r2
 8002366:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800236e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002372:	2200      	movs	r2, #0
 8002374:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	78db      	ldrb	r3, [r3, #3]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d127      	bne.n	80023ce <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002398:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800239c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80023a0:	f083 0320 	eor.w	r3, r3, #32
 80023a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	441a      	add	r2, r3
 80023b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80023ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f006 f824 	bl	8008422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d121      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fe:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002414:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002418:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800241c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002424:	b29b      	uxth	r3, r3
 8002426:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e113      	b.n	8002654 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d121      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800244c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002450:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800246a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800246e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002476:	b29b      	uxth	r3, r3
 8002478:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002480:	2b01      	cmp	r3, #1
 8002482:	f040 80be 	bne.w	8002602 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800248e:	441a      	add	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800249c:	441a      	add	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d309      	bcc.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	621a      	str	r2, [r3, #32]
 80024c0:	e015      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80024ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80024ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80024d8:	e009      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d15f      	bne.n	80025bc <HAL_PCD_EP_DB_Transmit+0x7d8>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002510:	4413      	add	r3, r2
 8002512:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00da      	lsls	r2, r3, #3
 800251a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800251c:	4413      	add	r3, r2
 800251e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002522:	667b      	str	r3, [r7, #100]	@ 0x64
 8002524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252e:	b29a      	uxth	r2, r3
 8002530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x76c>
 800253a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002548:	b29a      	uxth	r2, r3
 800254a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	e04e      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x80a>
 8002550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002552:	2b3e      	cmp	r3, #62	@ 0x3e
 8002554:	d816      	bhi.n	8002584 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	663b      	str	r3, [r7, #96]	@ 0x60
 800255c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_PCD_EP_DB_Transmit+0x788>
 8002566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002568:	3301      	adds	r3, #1
 800256a:	663b      	str	r3, [r7, #96]	@ 0x60
 800256c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29a      	uxth	r2, r3
 8002572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002574:	b29b      	uxth	r3, r3
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	b29b      	uxth	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b29a      	uxth	r2, r3
 800257e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e034      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x80a>
 8002584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	663b      	str	r3, [r7, #96]	@ 0x60
 800258a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8002594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002596:	3b01      	subs	r3, #1
 8002598:	663b      	str	r3, [r7, #96]	@ 0x60
 800259a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025b8:	801a      	strh	r2, [r3, #0]
 80025ba:	e018      	b.n	80025ee <HAL_PCD_EP_DB_Transmit+0x80a>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d114      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0x80a>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d2:	4413      	add	r3, r2
 80025d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	00da      	lsls	r2, r3, #3
 80025dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025de:	4413      	add	r3, r2
 80025e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	895a      	ldrh	r2, [r3, #10]
 80025fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f003 fc54 	bl	8005eaa <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800261c:	82fb      	strh	r3, [r7, #22]
 800261e:	8afb      	ldrh	r3, [r7, #22]
 8002620:	f083 0310 	eor.w	r3, r3, #16
 8002624:	82fb      	strh	r3, [r7, #22]
 8002626:	8afb      	ldrh	r3, [r7, #22]
 8002628:	f083 0320 	eor.w	r3, r3, #32
 800262c:	82fb      	strh	r3, [r7, #22]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	441a      	add	r2, r3
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800264a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3798      	adds	r7, #152	@ 0x98
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	4613      	mov	r3, r2
 800266c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	f003 0207 	and.w	r2, r3, #7
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3310      	adds	r3, #16
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e009      	b.n	80026a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002692:	897a      	ldrh	r2, [r7, #10]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026a6:	893b      	ldrh	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2200      	movs	r2, #0
 80026b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	80da      	strh	r2, [r3, #6]
 80026ba:	e00b      	b.n	80026d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2201      	movs	r2, #1
 80026c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002706:	b29b      	uxth	r3, r3
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800271a:	b29b      	uxth	r3, r3
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	58000400 	.word	0x58000400

08002758 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <HAL_PWREx_GetVoltageRange+0x18>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	58000400 	.word	0x58000400

08002774 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_PWREx_EnableVddUSB+0x1c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_PWREx_EnableVddUSB+0x1c>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002782:	6053      	str	r3, [r2, #4]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	58000400 	.word	0x58000400

08002794 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027a6:	d101      	bne.n	80027ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_HSE_Enable>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_HSE_Disable>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_RCC_HSE_IsReady>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002806:	d101      	bne.n	800280c <LL_RCC_HSE_IsReady+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_RCC_HSE_IsReady+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_RCC_HSI_Enable>:
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_RCC_HSI_Disable>:
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_RCC_HSI_IsReady>:
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002866:	d101      	bne.n	800286c <LL_RCC_HSI_IsReady+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_RCC_HSI_IsReady+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_HSI48_Enable>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_HSI48_Disable>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_HSI48_IsReady>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d101      	bne.n	80028fe <LL_RCC_HSI48_IsReady+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_RCC_HSI48_IsReady+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_LSE_Enable>:
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_RCC_LSE_Disable>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_RCC_LSE_EnableBypass>:
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_RCC_LSE_DisableBypass>:
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d101      	bne.n	80029aa <LL_RCC_LSE_IsReady+0x18>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_RCC_LSE_IsReady+0x1a>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d101      	bne.n	8002a12 <LL_RCC_LSI1_IsReady+0x18>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_RCC_LSI1_IsReady+0x1a>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d101      	bne.n	8002a7a <LL_RCC_LSI2_IsReady+0x18>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_RCC_LSI2_IsReady+0x1a>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6013      	str	r3, [r2, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d101      	bne.n	8002b06 <LL_RCC_MSI_IsReady+0x16>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_RCC_MSI_IsReady+0x18>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002b50:	d901      	bls.n	8002b56 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002b52:	23b0      	movs	r3, #176	@ 0xb0
 8002b54:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002b56:	687b      	ldr	r3, [r7, #4]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 0203 	bic.w	r2, r3, #3
 8002ba0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c32:	f023 020f 	bic.w	r2, r3, #15
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d22:	d101      	bne.n	8002d28 <LL_RCC_PLL_IsReady+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_RCC_PLL_IsReady+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da8:	d101      	bne.n	8002dae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dce:	d101      	bne.n	8002dd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df4:	d101      	bne.n	8002dfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e18:	d101      	bne.n	8002e1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e3c:	d101      	bne.n	8002e42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b08d      	sub	sp, #52	@ 0x34
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e363      	b.n	800352a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 808d 	beq.w	8002f8a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e70:	f7ff fea1 	bl	8002bb6 <LL_RCC_GetSysClkSource>
 8002e74:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e76:	f7ff ff82 	bl	8002d7e <LL_RCC_PLL_GetMainSource>
 8002e7a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x3e>
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d147      	bne.n	8002f18 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d144      	bne.n	8002f18 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e347      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002e9e:	f7ff fe4c 	bl	8002b3a <LL_RCC_MSI_GetRange>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d914      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fd05 	bl	80038bc <RCC_SetFlashLatencyFromMSIRange>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e336      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe26 	bl	8002b12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fe4a 	bl	8002b64 <LL_RCC_MSI_SetCalibTrimming>
 8002ed0:	e013      	b.n	8002efa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe1b 	bl	8002b12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fe3f 	bl	8002b64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fce6 	bl	80038bc <RCC_SetFlashLatencyFromMSIRange>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e317      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002efa:	f000 fccb 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4aa4      	ldr	r2, [pc, #656]	@ (8003194 <HAL_RCC_OscConfig+0x344>)
 8002f02:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f04:	4ba4      	ldr	r3, [pc, #656]	@ (8003198 <HAL_RCC_OscConfig+0x348>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fbd7 	bl	80006bc <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d039      	beq.n	8002f88 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e308      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01e      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f20:	f7ff fdc8 	bl	8002ab4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f24:	f7fd fc18 	bl	8000758 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2c:	f7fd fc14 	bl	8000758 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e2f5      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f3e:	f7ff fdd7 	bl	8002af0 <LL_RCC_MSI_IsReady>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f1      	beq.n	8002f2c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fde0 	bl	8002b12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe04 	bl	8002b64 <LL_RCC_MSI_SetCalibTrimming>
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f5e:	f7ff fdb8 	bl	8002ad2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fbf9 	bl	8000758 <HAL_GetTick>
 8002f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fbf5 	bl	8000758 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e2d6      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f7c:	f7ff fdb8 	bl	8002af0 <LL_RCC_MSI_IsReady>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f1      	bne.n	8002f6a <HAL_RCC_OscConfig+0x11a>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d047      	beq.n	8003026 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	f7ff fe0e 	bl	8002bb6 <LL_RCC_GetSysClkSource>
 8002f9a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9c:	f7ff feef 	bl	8002d7e <LL_RCC_PLL_GetMainSource>
 8002fa0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x164>
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d134      	bne.n	8003026 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e2b4      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x180>
 8002fca:	f7ff fbf5 	bl	80027b8 <LL_RCC_HSE_Enable>
 8002fce:	e001      	b.n	8002fd4 <HAL_RCC_OscConfig+0x184>
 8002fd0:	f7ff fc01 	bl	80027d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fbbc 	bl	8000758 <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fbb8 	bl	8000758 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e299      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ff6:	f7ff fbfd 	bl	80027f4 <LL_RCC_HSE_IsReady>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f1      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x194>
 8003000:	e011      	b.n	8003026 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fd fba9 	bl	8000758 <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300a:	f7fd fba5 	bl	8000758 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	@ 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e286      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800301c:	f7ff fbea 	bl	80027f4 <LL_RCC_HSE_IsReady>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f1      	bne.n	800300a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d04c      	beq.n	80030cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003032:	f7ff fdc0 	bl	8002bb6 <LL_RCC_GetSysClkSource>
 8003036:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003038:	f7ff fea1 	bl	8002d7e <LL_RCC_PLL_GetMainSource>
 800303c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d10e      	bne.n	8003068 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e266      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fc09 	bl	8002878 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003066:	e031      	b.n	80030cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d019      	beq.n	80030a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003070:	f7ff fbd2 	bl	8002818 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fd fb70 	bl	8000758 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307c:	f7fd fb6c 	bl	8000758 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e24d      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800308e:	f7ff fbe1 	bl	8002854 <LL_RCC_HSI_IsReady>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fbeb 	bl	8002878 <LL_RCC_HSI_SetCalibTrimming>
 80030a2:	e013      	b.n	80030cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a4:	f7ff fbc7 	bl	8002836 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fd fb56 	bl	8000758 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fd fb52 	bl	8000758 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e233      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030c2:	f7ff fbc7 	bl	8002854 <LL_RCC_HSI_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f1      	bne.n	80030b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a3 	beq.w	800322c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d076      	beq.n	80031dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d046      	beq.n	8003188 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80030fa:	f7ff fc7e 	bl	80029fa <LL_RCC_LSI1_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003104:	f7ff fc57 	bl	80029b6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003108:	f7fd fb26 	bl	8000758 <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003110:	f7fd fb22 	bl	8000758 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e203      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003122:	f7ff fc6a 	bl	80029fa <LL_RCC_LSI1_IsReady>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f1      	beq.n	8003110 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800312c:	f7ff fc77 	bl	8002a1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fd fb12 	bl	8000758 <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003138:	f7fd fb0e 	bl	8000758 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1ef      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800314a:	f7ff fc8a 	bl	8002a62 <LL_RCC_LSI2_IsReady>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f1      	beq.n	8003138 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fc94 	bl	8002a86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800315e:	f7ff fc3b 	bl	80029d8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fd faf9 	bl	8000758 <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800316a:	f7fd faf5 	bl	8000758 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1d6      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800317c:	f7ff fc3d 	bl	80029fa <LL_RCC_LSI1_IsReady>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f1      	bne.n	800316a <HAL_RCC_OscConfig+0x31a>
 8003186:	e051      	b.n	800322c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003188:	f7ff fc15 	bl	80029b6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fd fae4 	bl	8000758 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003192:	e00c      	b.n	80031ae <HAL_RCC_OscConfig+0x35e>
 8003194:	20000008 	.word	0x20000008
 8003198:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800319c:	f7fd fadc 	bl	8000758 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1bd      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80031ae:	f7ff fc24 	bl	80029fa <LL_RCC_LSI1_IsReady>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f1      	beq.n	800319c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80031b8:	f7ff fc42 	bl	8002a40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031be:	f7fd facb 	bl	8000758 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1ac      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80031d0:	f7ff fc47 	bl	8002a62 <LL_RCC_LSI2_IsReady>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f1      	bne.n	80031be <HAL_RCC_OscConfig+0x36e>
 80031da:	e027      	b.n	800322c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80031dc:	f7ff fc30 	bl	8002a40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd faba 	bl	8000758 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031e8:	f7fd fab6 	bl	8000758 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e197      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031fa:	f7ff fc32 	bl	8002a62 <LL_RCC_LSI2_IsReady>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f1      	bne.n	80031e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003204:	f7ff fbe8 	bl	80029d8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fd faa6 	bl	8000758 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003210:	f7fd faa2 	bl	8000758 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e183      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003222:	f7ff fbea 	bl	80029fa <LL_RCC_LSI1_IsReady>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f1      	bne.n	8003210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003238:	4ba7      	ldr	r3, [pc, #668]	@ (80034d8 <HAL_RCC_OscConfig+0x688>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d114      	bne.n	800326e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003244:	f7ff fa78 	bl	8002738 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003248:	f7fd fa86 	bl	8000758 <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fd fa82 	bl	8000758 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e163      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	4b9d      	ldr	r3, [pc, #628]	@ (80034d8 <HAL_RCC_OscConfig+0x688>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_RCC_OscConfig+0x42c>
 8003276:	f7ff fb48 	bl	800290a <LL_RCC_LSE_Enable>
 800327a:	e00c      	b.n	8003296 <HAL_RCC_OscConfig+0x446>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d104      	bne.n	800328e <HAL_RCC_OscConfig+0x43e>
 8003284:	f7ff fb63 	bl	800294e <LL_RCC_LSE_EnableBypass>
 8003288:	f7ff fb3f 	bl	800290a <LL_RCC_LSE_Enable>
 800328c:	e003      	b.n	8003296 <HAL_RCC_OscConfig+0x446>
 800328e:	f7ff fb4d 	bl	800292c <LL_RCC_LSE_Disable>
 8003292:	f7ff fb6d 	bl	8002970 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d014      	beq.n	80032c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fd fa5b 	bl	8000758 <HAL_GetTick>
 80032a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd fa57 	bl	8000758 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e136      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032bc:	f7ff fb69 	bl	8002992 <LL_RCC_LSE_IsReady>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ef      	beq.n	80032a6 <HAL_RCC_OscConfig+0x456>
 80032c6:	e013      	b.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd fa46 	bl	8000758 <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fd fa42 	bl	8000758 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e121      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032e6:	f7ff fb54 	bl	8002992 <LL_RCC_LSE_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ef      	bne.n	80032d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02c      	beq.n	8003356 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d014      	beq.n	800332e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003304:	f7ff facd 	bl	80028a2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fd fa26 	bl	8000758 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003310:	f7fd fa22 	bl	8000758 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e103      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003322:	f7ff fae0 	bl	80028e6 <LL_RCC_HSI48_IsReady>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f1      	beq.n	8003310 <HAL_RCC_OscConfig+0x4c0>
 800332c:	e013      	b.n	8003356 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800332e:	f7ff fac9 	bl	80028c4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd fa11 	bl	8000758 <HAL_GetTick>
 8003336:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333a:	f7fd fa0d 	bl	8000758 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0ee      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800334c:	f7ff facb 	bl	80028e6 <LL_RCC_HSI48_IsReady>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f1      	bne.n	800333a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80e4 	beq.w	8003528 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003360:	f7ff fc29 	bl	8002bb6 <LL_RCC_GetSysClkSource>
 8003364:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	2b02      	cmp	r3, #2
 8003374:	f040 80b4 	bne.w	80034e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	429a      	cmp	r2, r3
 8003384:	d123      	bne.n	80033ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d11c      	bne.n	80033ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d114      	bne.n	80033ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d10d      	bne.n	80033ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d05d      	beq.n	800348a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d058      	beq.n	8003486 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0a1      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033e6:	f7ff fc84 	bl	8002cf2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033ea:	f7fd f9b5 	bl	8000758 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fd f9b1 	bl	8000758 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e092      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ef      	bne.n	80033f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	4b30      	ldr	r3, [pc, #192]	@ (80034dc <HAL_RCC_OscConfig+0x68c>)
 800341a:	4013      	ands	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800342a:	0212      	lsls	r2, r2, #8
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003438:	4311      	orrs	r1, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800343e:	430a      	orrs	r2, r1
 8003440:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003444:	4313      	orrs	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003448:	f7ff fc44 	bl	8002cd4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800344c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800345c:	f7fd f97c 	bl	8000758 <HAL_GetTick>
 8003460:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd f978 	bl	8000758 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e059      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ef      	beq.n	8003464 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003484:	e050      	b.n	8003528 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e04f      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d147      	bne.n	8003528 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003498:	f7ff fc1c 	bl	8002cd4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ac:	f7fd f954 	bl	8000758 <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fd f950 	bl	8000758 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e031      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ef      	beq.n	80034b4 <HAL_RCC_OscConfig+0x664>
 80034d4:	e028      	b.n	8003528 <HAL_RCC_OscConfig+0x6d8>
 80034d6:	bf00      	nop
 80034d8:	58000400 	.word	0x58000400
 80034dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d01e      	beq.n	8003524 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	f7ff fc04 	bl	8002cf2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fd f935 	bl	8000758 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fd f931 	bl	8000758 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e012      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_RCC_OscConfig+0x6e4>)
 800351e:	4013      	ands	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
 8003522:	e001      	b.n	8003528 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3734      	adds	r7, #52	@ 0x34
 800352e:	46bd      	mov	sp, r7
 8003530:	bd90      	pop	{r4, r7, pc}
 8003532:	bf00      	nop
 8003534:	eefefffc 	.word	0xeefefffc

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e12d      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b98      	ldr	r3, [pc, #608]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d91b      	bls.n	8003592 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b95      	ldr	r3, [pc, #596]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4993      	ldr	r1, [pc, #588]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356a:	f7fd f8f5 	bl	8000758 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003570:	e008      	b.n	8003584 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003572:	f7fd f8f1 	bl	8000758 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e111      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003584:	4b8a      	ldr	r3, [pc, #552]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d1ef      	bne.n	8003572 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fb13 	bl	8002bce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a8:	f7fd f8d6 	bl	8000758 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035b0:	f7fd f8d2 	bl	8000758 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0f2      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035c2:	f7ff fbe8 	bl	8002d96 <LL_RCC_IsActiveFlag_HPRE>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f1      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d016      	beq.n	8003606 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fb0a 	bl	8002bf6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035e2:	f7fd f8b9 	bl	8000758 <HAL_GetTick>
 80035e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ea:	f7fd f8b5 	bl	8000758 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0d5      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035fc:	f7ff fbdd 	bl	8002dba <LL_RCC_IsActiveFlag_C2HPRE>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f1      	beq.n	80035ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fb03 	bl	8002c22 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800361c:	f7fd f89c 	bl	8000758 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003624:	f7fd f898 	bl	8000758 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0b8      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003636:	f7ff fbd3 	bl	8002de0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f1      	beq.n	8003624 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fafd 	bl	8002c50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003656:	f7fd f87f 	bl	8000758 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800365e:	f7fd f87b 	bl	8000758 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e09b      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003670:	f7ff fbc9 	bl	8002e06 <LL_RCC_IsActiveFlag_PPRE1>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f1      	beq.n	800365e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff faf3 	bl	8002c78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003692:	f7fd f861 	bl	8000758 <HAL_GetTick>
 8003696:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800369a:	f7fd f85d 	bl	8000758 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e07d      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036ac:	f7ff fbbd 	bl	8002e2a <LL_RCC_IsActiveFlag_PPRE2>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f1      	beq.n	800369a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d043      	beq.n	800374a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80036ca:	f7ff f893 	bl	80027f4 <LL_RCC_HSE_IsReady>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11e      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e067      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d106      	bne.n	80036ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036e0:	f7ff fb16 	bl	8002d10 <LL_RCC_PLL_IsReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d113      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e05c      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036f6:	f7ff f9fb 	bl	8002af0 <LL_RCC_MSI_IsReady>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e051      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003704:	f7ff f8a6 	bl	8002854 <LL_RCC_HSI_IsReady>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e04a      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa39 	bl	8002b8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fd f81c 	bl	8000758 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fd f818 	bl	8000758 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e036      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	f7ff fa3c 	bl	8002bb6 <LL_RCC_GetSysClkSource>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	429a      	cmp	r2, r3
 8003748:	d1ec      	bne.n	8003724 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374a:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d21b      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003758:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 0207 	bic.w	r2, r3, #7
 8003760:	4913      	ldr	r1, [pc, #76]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fc fff6 	bl	8000758 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	e008      	b.n	8003782 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003770:	f7fc fff2 	bl	8000758 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e012      	b.n	80037a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_ClockConfig+0x278>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d1ef      	bne.n	8003770 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003790:	f000 f880 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 8003794:	4603      	mov	r3, r0
 8003796:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <HAL_RCC_ClockConfig+0x27c>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800379a:	f7fc ffe9 	bl	8000770 <HAL_GetTickPrio>
 800379e:	4603      	mov	r3, r0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc ff8b 	bl	80006bc <HAL_InitTick>
 80037a6:	4603      	mov	r3, r0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	58004000 	.word	0x58004000
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037be:	f7ff f9fa 	bl	8002bb6 <LL_RCC_GetSysClkSource>
 80037c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037ca:	f7ff f9b6 	bl	8002b3a <LL_RCC_MSI_GetRange>
 80037ce:	4603      	mov	r3, r0
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003884 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e04b      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d102      	bne.n	80037ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e6:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e045      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d10a      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037f2:	f7fe ffcf 	bl	8002794 <LL_RCC_HSE_IsEnabledDiv2>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80037fc:	4b23      	ldr	r3, [pc, #140]	@ (800388c <HAL_RCC_GetSysClockFreq+0xd4>)
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e03a      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e037      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003808:	f7ff fab9 	bl	8002d7e <LL_RCC_PLL_GetMainSource>
 800380c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d003      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x64>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x6a>
 800381a:	e00d      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_RCC_GetSysClockFreq+0xd0>)
 800381e:	60bb      	str	r3, [r7, #8]
        break;
 8003820:	e015      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003822:	f7fe ffb7 	bl	8002794 <LL_RCC_HSE_IsEnabledDiv2>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800382c:	4b17      	ldr	r3, [pc, #92]	@ (800388c <HAL_RCC_GetSysClockFreq+0xd4>)
 800382e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003830:	e00d      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003832:	4b17      	ldr	r3, [pc, #92]	@ (8003890 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003834:	60bb      	str	r3, [r7, #8]
        break;
 8003836:	e00a      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003838:	f7ff f97f 	bl	8002b3a <LL_RCC_MSI_GetRange>
 800383c:	4603      	mov	r3, r0
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	4a0f      	ldr	r2, [pc, #60]	@ (8003884 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384a:	60bb      	str	r3, [r7, #8]
        break;
 800384c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800384e:	f7ff fa71 	bl	8002d34 <LL_RCC_PLL_GetN>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	fb03 f402 	mul.w	r4, r3, r2
 800385a:	f7ff fa84 	bl	8002d66 <LL_RCC_PLL_GetDivider>
 800385e:	4603      	mov	r3, r0
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	3301      	adds	r3, #1
 8003864:	fbb4 f4f3 	udiv	r4, r4, r3
 8003868:	f7ff fa71 	bl	8002d4e <LL_RCC_PLL_GetR>
 800386c:	4603      	mov	r3, r0
 800386e:	0f5b      	lsrs	r3, r3, #29
 8003870:	3301      	adds	r3, #1
 8003872:	fbb4 f3f3 	udiv	r3, r4, r3
 8003876:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	bf00      	nop
 8003884:	0800937c 	.word	0x0800937c
 8003888:	00f42400 	.word	0x00f42400
 800388c:	003d0900 	.word	0x003d0900
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b598      	push	{r3, r4, r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003898:	f7ff ff8e 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 800389c:	4604      	mov	r4, r0
 800389e:	f7ff f9ff 	bl	8002ca0 <LL_RCC_GetAHBPrescaler>
 80038a2:	4603      	mov	r3, r0
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	4a03      	ldr	r2, [pc, #12]	@ (80038b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd98      	pop	{r3, r4, r7, pc}
 80038b8:	0800933c 	.word	0x0800933c

080038bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80038c8:	d903      	bls.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e007      	b.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	4a11      	ldr	r2, [pc, #68]	@ (8003920 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80038e2:	f7ff f9e9 	bl	8002cb8 <LL_RCC_GetAHB4Prescaler>
 80038e6:	4603      	mov	r3, r0
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	0c9c      	lsrs	r4, r3, #18
 8003906:	f7fe ff27 	bl	8002758 <HAL_PWREx_GetVoltageRange>
 800390a:	4603      	mov	r3, r0
 800390c:	4619      	mov	r1, r3
 800390e:	4620      	mov	r0, r4
 8003910:	f000 f80c 	bl	800392c <RCC_SetFlashLatency>
 8003914:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}
 800391e:	bf00      	nop
 8003920:	0800937c 	.word	0x0800937c
 8003924:	0800933c 	.word	0x0800933c
 8003928:	431bde83 	.word	0x431bde83

0800392c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b093      	sub	sp, #76	@ 0x4c
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003936:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <RCC_SetFlashLatency+0xe8>)
 8003938:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800393c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003942:	4a35      	ldr	r2, [pc, #212]	@ (8003a18 <RCC_SetFlashLatency+0xec>)
 8003944:	f107 031c 	add.w	r3, r7, #28
 8003948:	ca07      	ldmia	r2, {r0, r1, r2}
 800394a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800394e:	4b33      	ldr	r3, [pc, #204]	@ (8003a1c <RCC_SetFlashLatency+0xf0>)
 8003950:	f107 040c 	add.w	r4, r7, #12
 8003954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003956:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800395a:	2300      	movs	r3, #0
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003964:	d11a      	bne.n	800399c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003966:	2300      	movs	r3, #0
 8003968:	643b      	str	r3, [r7, #64]	@ 0x40
 800396a:	e013      	b.n	8003994 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800396c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	3348      	adds	r3, #72	@ 0x48
 8003972:	443b      	add	r3, r7
 8003974:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d807      	bhi.n	800398e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800397e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	3348      	adds	r3, #72	@ 0x48
 8003984:	443b      	add	r3, r7
 8003986:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800398a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800398c:	e020      	b.n	80039d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800398e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003990:	3301      	adds	r3, #1
 8003992:	643b      	str	r3, [r7, #64]	@ 0x40
 8003994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003996:	2b03      	cmp	r3, #3
 8003998:	d9e8      	bls.n	800396c <RCC_SetFlashLatency+0x40>
 800399a:	e019      	b.n	80039d0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a0:	e013      	b.n	80039ca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	3348      	adds	r3, #72	@ 0x48
 80039a8:	443b      	add	r3, r7
 80039aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d807      	bhi.n	80039c4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3348      	adds	r3, #72	@ 0x48
 80039ba:	443b      	add	r3, r7
 80039bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80039c2:	e005      	b.n	80039d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c6:	3301      	adds	r3, #1
 80039c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d9e8      	bls.n	80039a2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80039d0:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <RCC_SetFlashLatency+0xf4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 0207 	bic.w	r2, r3, #7
 80039d8:	4911      	ldr	r1, [pc, #68]	@ (8003a20 <RCC_SetFlashLatency+0xf4>)
 80039da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039e0:	f7fc feba 	bl	8000758 <HAL_GetTick>
 80039e4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039e6:	e008      	b.n	80039fa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039e8:	f7fc feb6 	bl	8000758 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e007      	b.n	8003a0a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039fa:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <RCC_SetFlashLatency+0xf4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1ef      	bne.n	80039e8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	374c      	adds	r7, #76	@ 0x4c
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	bf00      	nop
 8003a14:	080092c8 	.word	0x080092c8
 8003a18:	080092d8 	.word	0x080092d8
 8003a1c:	080092e4 	.word	0x080092e4
 8003a20:	58004000 	.word	0x58004000

08003a24 <LL_RCC_LSE_IsEnabled>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <LL_RCC_LSE_IsEnabled+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_RCC_LSE_IsEnabled+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_LSE_IsReady>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d101      	bne.n	8003a60 <LL_RCC_LSE_IsReady+0x18>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_RCC_LSE_IsReady+0x1a>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_RCC_MSI_EnablePLLMode>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_RCC_SetRFWKPClockSource>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_SetSMPSClockSource>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	f023 0203 	bic.w	r2, r3, #3
 8003ac8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_RCC_SetSMPSPrescaler>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003af0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_RCC_SetUSARTClockSource>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_SetLPUARTClockSource>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_SetI2CClockSource>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b76:	43db      	mvns	r3, r3
 8003b78:	401a      	ands	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_RCC_SetLPTIMClockSource>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_SetSAIClockSource>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bdc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003be0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_SetRNGClockSource>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_SetCLK48ClockSource>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_RCC_SetUSBClockSource>:
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ffe3 	bl	8003c24 <LL_RCC_SetCLK48ClockSource>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <LL_RCC_SetADCClockSource>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_SetRTCClockSource>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_GetRTCClockSource>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_RCC_ForceBackupDomainReset>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_ReleaseBackupDomainReset>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_RCC_PLLSAI1_Enable>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_PLLSAI1_Disable>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d4c:	6013      	str	r3, [r2, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_PLLSAI1_IsReady>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d6a:	d101      	bne.n	8003d70 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d034      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003da0:	d021      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003da2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003da6:	d81b      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dac:	d01d      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003dae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003db2:	d815      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dbc:	d110      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dce:	e00d      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f94d 	bl	8004074 <RCCEx_PLLSAI1_ConfigNP>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003dde:	e005      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77fb      	strb	r3, [r7, #31]
        break;
 8003de4:	e002      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dec:	7ffb      	ldrb	r3, [r7, #31]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fee8 	bl	8003bcc <LL_RCC_SetSAIClockSource>
 8003dfc:	e001      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d046      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e0e:	f7ff ff56 	bl	8003cbe <LL_RCC_GetRTCClockSource>
 8003e12:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d03c      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e1e:	f7fe fc8b 	bl	8002738 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff30 	bl	8003c92 <LL_RCC_SetRTCClockSource>
 8003e32:	e02e      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e3e:	f7ff ff4b 	bl	8003cd8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e42:	f7ff ff5a 	bl	8003cfa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003e5e:	f7ff fde1 	bl	8003a24 <LL_RCC_LSE_IsEnabled>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d114      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e68:	f7fc fc76 	bl	8000758 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fc fc72 	bl	8000758 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	77fb      	strb	r3, [r7, #31]
              break;
 8003e86:	e004      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003e88:	f7ff fdde 	bl	8003a48 <LL_RCC_LSE_IsReady>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d1ee      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	77bb      	strb	r3, [r7, #30]
 8003e96:	e001      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
 8003e9a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fe2a 	bl	8003b06 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fe35 	bl	8003b32 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fe5d 	bl	8003b98 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fe52 	bl	8003b98 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fe2a 	bl	8003b5e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fe1f 	bl	8003b5e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fe8d 	bl	8003c50 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f8e3 	bl	800412a <RCCEx_PLLSAI1_ConfigNQ>
 8003f64:	4603      	mov	r3, r0
 8003f66:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
 8003f70:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02b      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f86:	d008      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fe2a 	bl	8003bf8 <LL_RCC_SetRNGClockSource>
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7ff fe21 	bl	8003bf8 <LL_RCC_SetRNGClockSource>
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff fe34 	bl	8003c24 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d022      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fe3d 	bl	8003c66 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff4:	d107      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800400e:	d10b      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f8e3 	bl	80041e0 <RCCEx_PLLSAI1_ConfigNR>
 800401a:	4603      	mov	r3, r0
 800401c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800401e:	7ffb      	ldrb	r3, [r7, #31]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004024:	7ffb      	ldrb	r3, [r7, #31]
 8004026:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fd26 	bl	8003a8a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fd45 	bl	8003ade <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fd2c 	bl	8003ab6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800405e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800406c:	f7ff fcfe 	bl	8003a6c <LL_RCC_MSI_EnablePLLMode>
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}

08004074 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004080:	f7ff fe5b 	bl	8003d3a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004084:	f7fc fb68 	bl	8000758 <HAL_GetTick>
 8004088:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800408a:	e009      	b.n	80040a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800408c:	f7fc fb64 	bl	8000758 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d902      	bls.n	80040a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	73fb      	strb	r3, [r7, #15]
      break;
 800409e:	e004      	b.n	80040aa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040a0:	f7ff fe5a 	bl	8003d58 <LL_RCC_PLLSAI1_IsReady>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d137      	bne.n	8004120 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c4:	4313      	orrs	r3, r2
 80040c6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040de:	f7ff fe1d 	bl	8003d1c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e2:	f7fc fb39 	bl	8000758 <HAL_GetTick>
 80040e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040e8:	e009      	b.n	80040fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ea:	f7fc fb35 	bl	8000758 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	73fb      	strb	r3, [r7, #15]
        break;
 80040fc:	e004      	b.n	8004108 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040fe:	f7ff fe2b 	bl	8003d58 <LL_RCC_PLLSAI1_IsReady>
 8004102:	4603      	mov	r3, r0
 8004104:	2b01      	cmp	r3, #1
 8004106:	d1f0      	bne.n	80040ea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d108      	bne.n	8004120 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800411c:	4313      	orrs	r3, r2
 800411e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004136:	f7ff fe00 	bl	8003d3a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800413a:	f7fc fb0d 	bl	8000758 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004140:	e009      	b.n	8004156 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004142:	f7fc fb09 	bl	8000758 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d902      	bls.n	8004156 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e004      	b.n	8004160 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004156:	f7ff fdff 	bl	8003d58 <LL_RCC_PLLSAI1_IsReady>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d137      	bne.n	80041d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004194:	f7ff fdc2 	bl	8003d1c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fc fade 	bl	8000758 <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800419e:	e009      	b.n	80041b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a0:	f7fc fada 	bl	8000758 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d902      	bls.n	80041b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	73fb      	strb	r3, [r7, #15]
        break;
 80041b2:	e004      	b.n	80041be <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041b4:	f7ff fdd0 	bl	8003d58 <LL_RCC_PLLSAI1_IsReady>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d1f0      	bne.n	80041a0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041d2:	4313      	orrs	r3, r2
 80041d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80041ec:	f7ff fda5 	bl	8003d3a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041f0:	f7fc fab2 	bl	8000758 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041f6:	e009      	b.n	800420c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f8:	f7fc faae 	bl	8000758 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	73fb      	strb	r3, [r7, #15]
      break;
 800420a:	e004      	b.n	8004216 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800420c:	f7ff fda4 	bl	8003d58 <LL_RCC_PLLSAI1_IsReady>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d137      	bne.n	800428c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800421c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004230:	4313      	orrs	r3, r2
 8004232:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800424a:	f7ff fd67 	bl	8003d1c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424e:	f7fc fa83 	bl	8000758 <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004254:	e009      	b.n	800426a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004256:	f7fc fa7f 	bl	8000758 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d902      	bls.n	800426a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	73fb      	strb	r3, [r7, #15]
        break;
 8004268:	e004      	b.n	8004274 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800426a:	f7ff fd75 	bl	8003d58 <LL_RCC_PLLSAI1_IsReady>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d1f0      	bne.n	8004256 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004288:	4313      	orrs	r3, r2
 800428a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80042aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042cc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80042d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004338:	b480      	push	{r7}
 800433a:	b0a7      	sub	sp, #156	@ 0x9c
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800435a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	78db      	ldrb	r3, [r3, #3]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d81f      	bhi.n	80043aa <USB_ActivateEndpoint+0x72>
 800436a:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <USB_ActivateEndpoint+0x38>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004381 	.word	0x08004381
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043b3 	.word	0x080043b3
 800437c:	0800438f 	.word	0x0800438f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004380:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004384:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004388:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800438c:	e012      	b.n	80043b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800438e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004392:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004396:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800439a:	e00b      	b.n	80043b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800439c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80043a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80043a8:	e004      	b.n	80043b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80043b0:	e000      	b.n	80043b4 <USB_ActivateEndpoint+0x7c>
      break;
 80043b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b21b      	sxth	r3, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800440c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800441c:	b29b      	uxth	r3, r3
 800441e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	7b1b      	ldrb	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 8180 	bne.w	800472a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	785b      	ldrb	r3, [r3, #1]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8084 	beq.w	800453c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	00da      	lsls	r2, r3, #3
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	88db      	ldrh	r3, [r3, #6]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	827b      	strh	r3, [r7, #18]
 8004476:	8a7b      	ldrh	r3, [r7, #18]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01b      	beq.n	80044b8 <USB_ActivateEndpoint+0x180>
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	823b      	strh	r3, [r7, #16]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	8a3b      	ldrh	r3, [r7, #16]
 80044a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	78db      	ldrb	r3, [r3, #3]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d020      	beq.n	8004502 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044d6:	81bb      	strh	r3, [r7, #12]
 80044d8:	89bb      	ldrh	r3, [r7, #12]
 80044da:	f083 0320 	eor.w	r3, r3, #32
 80044de:	81bb      	strh	r3, [r7, #12]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	89bb      	ldrh	r3, [r7, #12]
 80044ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	8013      	strh	r3, [r2, #0]
 8004500:	e3f9      	b.n	8004cf6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004518:	81fb      	strh	r3, [r7, #14]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	441a      	add	r2, r3
 8004524:	89fb      	ldrh	r3, [r7, #14]
 8004526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800452a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800452e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004536:	b29b      	uxth	r3, r3
 8004538:	8013      	strh	r3, [r2, #0]
 800453a:	e3dc      	b.n	8004cf6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	4413      	add	r3, r2
 800454e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	00da      	lsls	r2, r3, #3
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	4413      	add	r3, r2
 800455a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	88db      	ldrh	r3, [r3, #6]
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	b29b      	uxth	r3, r3
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	4413      	add	r3, r2
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	00da      	lsls	r2, r3, #3
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	4413      	add	r3, r2
 800458e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <USB_ActivateEndpoint+0x28a>
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	e041      	b.n	8004646 <USB_ActivateEndpoint+0x30e>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80045c8:	d81c      	bhi.n	8004604 <USB_ActivateEndpoint+0x2cc>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <USB_ActivateEndpoint+0x2b2>
 80045e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045e4:	3301      	adds	r3, #1
 80045e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	029b      	lsls	r3, r3, #10
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	4313      	orrs	r3, r2
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e020      	b.n	8004646 <USB_ActivateEndpoint+0x30e>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <USB_ActivateEndpoint+0x2ec>
 800461a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800461e:	3b01      	subs	r3, #1
 8004620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29a      	uxth	r2, r3
 800462a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800462e:	b29b      	uxth	r3, r3
 8004630:	029b      	lsls	r3, r3, #10
 8004632:	b29b      	uxth	r3, r3
 8004634:	4313      	orrs	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004640:	b29a      	uxth	r2, r3
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004654:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01b      	beq.n	8004696 <USB_ActivateEndpoint+0x35e>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004674:	843b      	strh	r3, [r7, #32]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	8c3b      	ldrh	r3, [r7, #32]
 8004682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800468e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004692:	b29b      	uxth	r3, r3
 8004694:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d124      	bne.n	80046e8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b4:	83bb      	strh	r3, [r7, #28]
 80046b6:	8bbb      	ldrh	r3, [r7, #28]
 80046b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046bc:	83bb      	strh	r3, [r7, #28]
 80046be:	8bbb      	ldrh	r3, [r7, #28]
 80046c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046c4:	83bb      	strh	r3, [r7, #28]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8bbb      	ldrh	r3, [r7, #28]
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
 80046e6:	e306      	b.n	8004cf6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fe:	83fb      	strh	r3, [r7, #30]
 8004700:	8bfb      	ldrh	r3, [r7, #30]
 8004702:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004706:	83fb      	strh	r3, [r7, #30]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	8bfb      	ldrh	r3, [r7, #30]
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
 8004728:	e2e5      	b.n	8004cf6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	78db      	ldrb	r3, [r3, #3]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d11e      	bne.n	8004770 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004748:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004762:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e01d      	b.n	80047ac <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004786:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047bc:	4413      	add	r3, r2
 80047be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	00da      	lsls	r2, r3, #3
 80047c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	891b      	ldrh	r3, [r3, #8]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f0:	4413      	add	r3, r2
 80047f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	00da      	lsls	r2, r3, #3
 80047fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004802:	673b      	str	r3, [r7, #112]	@ 0x70
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	895b      	ldrh	r3, [r3, #10]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004812:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 81af 	bne.w	8004b7c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800482e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8004832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01d      	beq.n	8004876 <USB_ActivateEndpoint+0x53e>
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004850:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800486a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800486e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8004886:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800488a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01d      	beq.n	80048ce <USB_ActivateEndpoint+0x596>
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d16b      	bne.n	80049ae <USB_ActivateEndpoint+0x676>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e6:	4413      	add	r3, r2
 80048e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	00da      	lsls	r2, r3, #3
 80048f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f2:	4413      	add	r3, r2
 80048f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004904:	b29a      	uxth	r2, r3
 8004906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004908:	801a      	strh	r2, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <USB_ActivateEndpoint+0x5f0>
 8004912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004920:	b29a      	uxth	r2, r3
 8004922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e05d      	b.n	80049e4 <USB_ActivateEndpoint+0x6ac>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b3e      	cmp	r3, #62	@ 0x3e
 800492e:	d81c      	bhi.n	800496a <USB_ActivateEndpoint+0x632>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <USB_ActivateEndpoint+0x618>
 8004946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800494a:	3301      	adds	r3, #1
 800494c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29a      	uxth	r2, r3
 8004956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800495a:	b29b      	uxth	r3, r3
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	b29b      	uxth	r3, r3
 8004960:	4313      	orrs	r3, r2
 8004962:	b29a      	uxth	r2, r3
 8004964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	e03c      	b.n	80049e4 <USB_ActivateEndpoint+0x6ac>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2b00      	cmp	r3, #0
 800497e:	d104      	bne.n	800498a <USB_ActivateEndpoint+0x652>
 8004980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004984:	3b01      	subs	r3, #1
 8004986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800498a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29a      	uxth	r2, r3
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004994:	b29b      	uxth	r3, r3
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	b29b      	uxth	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e01a      	b.n	80049e4 <USB_ActivateEndpoint+0x6ac>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d116      	bne.n	80049e4 <USB_ActivateEndpoint+0x6ac>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c6:	4413      	add	r3, r2
 80049c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	00da      	lsls	r2, r3, #3
 80049d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d2:	4413      	add	r3, r2
 80049d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d16b      	bne.n	8004ac8 <USB_ActivateEndpoint+0x790>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a00:	4413      	add	r3, r2
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	00da      	lsls	r2, r3, #3
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	801a      	strh	r2, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <USB_ActivateEndpoint+0x70a>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	e05b      	b.n	8004afa <USB_ActivateEndpoint+0x7c2>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a48:	d81c      	bhi.n	8004a84 <USB_ActivateEndpoint+0x74c>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <USB_ActivateEndpoint+0x732>
 8004a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a64:	3301      	adds	r3, #1
 8004a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	029b      	lsls	r3, r3, #10
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	e03a      	b.n	8004afa <USB_ActivateEndpoint+0x7c2>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <USB_ActivateEndpoint+0x76c>
 8004a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	e018      	b.n	8004afa <USB_ActivateEndpoint+0x7c2>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d114      	bne.n	8004afa <USB_ActivateEndpoint+0x7c2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004adc:	4413      	add	r3, r2
 8004ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	00da      	lsls	r2, r3, #3
 8004ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b10:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b18:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b20:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b58:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8013      	strh	r3, [r2, #0]
 8004b7a:	e0bc      	b.n	8004cf6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8004b8c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01d      	beq.n	8004bd4 <USB_ActivateEndpoint+0x89c>
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004be4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01d      	beq.n	8004c2c <USB_ActivateEndpoint+0x8f4>
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c06:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8004c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d024      	beq.n	8004c7e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004c4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c52:	f083 0320 	eor.w	r3, r3, #32
 8004c56:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]
 8004c7c:	e01d      	b.n	8004cba <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c94:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cf6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	379c      	adds	r7, #156	@ 0x9c
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08d      	sub	sp, #52	@ 0x34
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7b1b      	ldrb	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 808e 	bne.w	8004e38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d044      	beq.n	8004dae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	81bb      	strh	r3, [r7, #12]
 8004d32:	89bb      	ldrh	r3, [r7, #12]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <USB_DeactivateEndpoint+0x6c>
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	817b      	strh	r3, [r7, #10]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d8a:	813b      	strh	r3, [r7, #8]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
 8004dac:	e192      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	827b      	strh	r3, [r7, #18]
 8004dbc:	8a7b      	ldrh	r3, [r7, #18]
 8004dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01b      	beq.n	8004dfe <USB_DeactivateEndpoint+0xf6>
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ddc:	823b      	strh	r3, [r7, #16]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	8a3b      	ldrh	r3, [r7, #16]
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e14:	81fb      	strh	r3, [r7, #14]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]
 8004e36:	e14d      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 80a5 	bne.w	8004f8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	843b      	strh	r3, [r7, #32]
 8004e50:	8c3b      	ldrh	r3, [r7, #32]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01b      	beq.n	8004e92 <USB_DeactivateEndpoint+0x18a>
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e70:	83fb      	strh	r3, [r7, #30]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	8bfb      	ldrh	r3, [r7, #30]
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	83bb      	strh	r3, [r7, #28]
 8004ea0:	8bbb      	ldrh	r3, [r7, #28]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01b      	beq.n	8004ee2 <USB_DeactivateEndpoint+0x1da>
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec0:	837b      	strh	r3, [r7, #26]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef8:	833b      	strh	r3, [r7, #24]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8b3b      	ldrh	r3, [r7, #24]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f30:	82fb      	strh	r3, [r7, #22]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8afb      	ldrh	r3, [r7, #22]
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	82bb      	strh	r3, [r7, #20]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	441a      	add	r2, r3
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
 8004f8a:	e0a3      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004f9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <USB_DeactivateEndpoint+0x2d4>
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004fea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <USB_DeactivateEndpoint+0x324>
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800505c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800507a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3734      	adds	r7, #52	@ 0x34
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b0ac      	sub	sp, #176	@ 0xb0
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	f040 84ca 	bne.w	8005a8a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d904      	bls.n	800510c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800510a:	e003      	b.n	8005114 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	7b1b      	ldrb	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d122      	bne.n	8005162 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6959      	ldr	r1, [r3, #20]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	88da      	ldrh	r2, [r3, #6]
 8005124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005128:	b29b      	uxth	r3, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 febd 	bl	8005eaa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800513a:	b29b      	uxth	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	00da      	lsls	r2, r3, #3
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4413      	add	r3, r2
 800514e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	f000 bc6f 	b.w	8005a40 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	78db      	ldrb	r3, [r3, #3]
 8005166:	2b02      	cmp	r3, #2
 8005168:	f040 831e 	bne.w	80057a8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	f240 82cf 	bls.w	8005718 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005190:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80051ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 814f 	beq.w	800547a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d16b      	bne.n	80052c0 <USB_EPStartXfer+0x1de>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	4413      	add	r3, r2
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	00da      	lsls	r2, r3, #3
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	4413      	add	r3, r2
 8005206:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005216:	b29a      	uxth	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <USB_EPStartXfer+0x158>
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005232:	b29a      	uxth	r2, r3
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e05b      	b.n	80052f2 <USB_EPStartXfer+0x210>
 800523a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800523e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005240:	d81c      	bhi.n	800527c <USB_EPStartXfer+0x19a>
 8005242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800524c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <USB_EPStartXfer+0x180>
 8005258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800525c:	3301      	adds	r3, #1
 800525e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29b      	uxth	r3, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	b29a      	uxth	r2, r3
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e03a      	b.n	80052f2 <USB_EPStartXfer+0x210>
 800527c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <USB_EPStartXfer+0x1ba>
 8005292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005296:	3b01      	subs	r3, #1
 8005298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	e018      	b.n	80052f2 <USB_EPStartXfer+0x210>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d114      	bne.n	80052f2 <USB_EPStartXfer+0x210>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	4413      	add	r3, r2
 80052d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	00da      	lsls	r2, r3, #3
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	895b      	ldrh	r3, [r3, #10]
 80052f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6959      	ldr	r1, [r3, #20]
 80052fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005302:	b29b      	uxth	r3, r3
 8005304:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fdce 	bl	8005eaa <USB_WritePMA>
            ep->xfer_buff += len;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005316:	441a      	add	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	429a      	cmp	r2, r3
 8005326:	d907      	bls.n	8005338 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005330:	1ad2      	subs	r2, r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	621a      	str	r2, [r3, #32]
 8005336:	e006      	b.n	8005346 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d16b      	bne.n	8005426 <USB_EPStartXfer+0x344>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4413      	add	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00da      	lsls	r2, r3, #3
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4413      	add	r3, r2
 800536c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537c:	b29a      	uxth	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <USB_EPStartXfer+0x2be>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005398:	b29a      	uxth	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e05d      	b.n	800545c <USB_EPStartXfer+0x37a>
 80053a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80053a6:	d81c      	bhi.n	80053e2 <USB_EPStartXfer+0x300>
 80053a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <USB_EPStartXfer+0x2e6>
 80053be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053c2:	3301      	adds	r3, #1
 80053c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b29a      	uxth	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e03c      	b.n	800545c <USB_EPStartXfer+0x37a>
 80053e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <USB_EPStartXfer+0x320>
 80053f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053fc:	3b01      	subs	r3, #1
 80053fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29a      	uxth	r2, r3
 8005408:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800540c:	b29b      	uxth	r3, r3
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	b29b      	uxth	r3, r3
 8005412:	4313      	orrs	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541e:	b29a      	uxth	r2, r3
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	e01a      	b.n	800545c <USB_EPStartXfer+0x37a>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d116      	bne.n	800545c <USB_EPStartXfer+0x37a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	4413      	add	r3, r2
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	00da      	lsls	r2, r3, #3
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	4413      	add	r3, r2
 800544c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005456:	b29a      	uxth	r2, r3
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	891b      	ldrh	r3, [r3, #8]
 8005460:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6959      	ldr	r1, [r3, #20]
 8005468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800546c:	b29b      	uxth	r3, r3
 800546e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fd19 	bl	8005eaa <USB_WritePMA>
 8005478:	e2e2      	b.n	8005a40 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d16b      	bne.n	800555a <USB_EPStartXfer+0x478>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800548c:	b29b      	uxth	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005492:	4413      	add	r3, r2
 8005494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	00da      	lsls	r2, r3, #3
 800549c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800549e:	4413      	add	r3, r2
 80054a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <USB_EPStartXfer+0x3f2>
 80054be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e05d      	b.n	8005590 <USB_EPStartXfer+0x4ae>
 80054d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80054da:	d81c      	bhi.n	8005516 <USB_EPStartXfer+0x434>
 80054dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <USB_EPStartXfer+0x41a>
 80054f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054f6:	3301      	adds	r3, #1
 80054f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29a      	uxth	r2, r3
 8005502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005506:	b29b      	uxth	r3, r3
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	b29b      	uxth	r3, r3
 800550c:	4313      	orrs	r3, r2
 800550e:	b29a      	uxth	r2, r3
 8005510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e03c      	b.n	8005590 <USB_EPStartXfer+0x4ae>
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005524:	f003 031f 	and.w	r3, r3, #31
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <USB_EPStartXfer+0x454>
 800552c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005530:	3b01      	subs	r3, #1
 8005532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29a      	uxth	r2, r3
 800553c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005540:	b29b      	uxth	r3, r3
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	b29b      	uxth	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	b29a      	uxth	r2, r3
 8005554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	e01a      	b.n	8005590 <USB_EPStartXfer+0x4ae>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d116      	bne.n	8005590 <USB_EPStartXfer+0x4ae>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	653b      	str	r3, [r7, #80]	@ 0x50
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005572:	4413      	add	r3, r2
 8005574:	653b      	str	r3, [r7, #80]	@ 0x50
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	00da      	lsls	r2, r3, #3
 800557c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800557e:	4413      	add	r3, r2
 8005580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800558a:	b29a      	uxth	r2, r3
 800558c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800558e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	891b      	ldrh	r3, [r3, #8]
 8005594:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6959      	ldr	r1, [r3, #20]
 800559c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc7f 	bl	8005eaa <USB_WritePMA>
            ep->xfer_buff += len;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055b4:	441a      	add	r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d907      	bls.n	80055d6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6a1a      	ldr	r2, [r3, #32]
 80055ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055ce:	1ad2      	subs	r2, r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	621a      	str	r2, [r3, #32]
 80055d4:	e006      	b.n	80055e4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d16b      	bne.n	80056c8 <USB_EPStartXfer+0x5e6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005600:	4413      	add	r3, r2
 8005602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	00da      	lsls	r2, r3, #3
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	4413      	add	r3, r2
 800560e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005612:	637b      	str	r3, [r7, #52]	@ 0x34
 8005614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	b29a      	uxth	r2, r3
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <USB_EPStartXfer+0x560>
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563a:	b29a      	uxth	r2, r3
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e05b      	b.n	80056fa <USB_EPStartXfer+0x618>
 8005642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005646:	2b3e      	cmp	r3, #62	@ 0x3e
 8005648:	d81c      	bhi.n	8005684 <USB_EPStartXfer+0x5a2>
 800564a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <USB_EPStartXfer+0x588>
 8005660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005674:	b29b      	uxth	r3, r3
 8005676:	029b      	lsls	r3, r3, #10
 8005678:	b29b      	uxth	r3, r3
 800567a:	4313      	orrs	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e03a      	b.n	80056fa <USB_EPStartXfer+0x618>
 8005684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800568e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <USB_EPStartXfer+0x5c2>
 800569a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800569e:	3b01      	subs	r3, #1
 80056a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e018      	b.n	80056fa <USB_EPStartXfer+0x618>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d114      	bne.n	80056fa <USB_EPStartXfer+0x618>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056dc:	4413      	add	r3, r2
 80056de:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	00da      	lsls	r2, r3, #3
 80056e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e8:	4413      	add	r3, r2
 80056ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	895b      	ldrh	r3, [r3, #10]
 80056fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6959      	ldr	r1, [r3, #20]
 8005706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800570a:	b29b      	uxth	r3, r3
 800570c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fbca 	bl	8005eaa <USB_WritePMA>
 8005716:	e193      	b.n	8005a40 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005736:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800576c:	4413      	add	r3, r2
 800576e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	00da      	lsls	r2, r3, #3
 8005776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005778:	4413      	add	r3, r2
 800577a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800577e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005784:	b29a      	uxth	r2, r3
 8005786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005788:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	891b      	ldrh	r3, [r3, #8]
 800578e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6959      	ldr	r1, [r3, #20]
 8005796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800579a:	b29b      	uxth	r3, r3
 800579c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fb82 	bl	8005eaa <USB_WritePMA>
 80057a6:	e14b      	b.n	8005a40 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 809a 	beq.w	8005902 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d16b      	bne.n	80058b2 <USB_EPStartXfer+0x7d0>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ea:	4413      	add	r3, r2
 80057ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	00da      	lsls	r2, r3, #3
 80057f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80057fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005808:	b29a      	uxth	r2, r3
 800580a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <USB_EPStartXfer+0x74a>
 8005816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005824:	b29a      	uxth	r2, r3
 8005826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	e05b      	b.n	80058e4 <USB_EPStartXfer+0x802>
 800582c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005830:	2b3e      	cmp	r3, #62	@ 0x3e
 8005832:	d81c      	bhi.n	800586e <USB_EPStartXfer+0x78c>
 8005834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800583e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <USB_EPStartXfer+0x772>
 800584a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800584e:	3301      	adds	r3, #1
 8005850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29a      	uxth	r2, r3
 800585a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800585e:	b29b      	uxth	r3, r3
 8005860:	029b      	lsls	r3, r3, #10
 8005862:	b29b      	uxth	r3, r3
 8005864:	4313      	orrs	r3, r2
 8005866:	b29a      	uxth	r2, r3
 8005868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	e03a      	b.n	80058e4 <USB_EPStartXfer+0x802>
 800586e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <USB_EPStartXfer+0x7ac>
 8005884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005888:	3b01      	subs	r3, #1
 800588a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800588e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29a      	uxth	r2, r3
 8005894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005898:	b29b      	uxth	r3, r3
 800589a:	029b      	lsls	r3, r3, #10
 800589c:	b29b      	uxth	r3, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	e018      	b.n	80058e4 <USB_EPStartXfer+0x802>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d114      	bne.n	80058e4 <USB_EPStartXfer+0x802>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c6:	4413      	add	r3, r2
 80058c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	00da      	lsls	r2, r3, #3
 80058d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	895b      	ldrh	r3, [r3, #10]
 80058e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	6959      	ldr	r1, [r3, #20]
 80058f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fad5 	bl	8005eaa <USB_WritePMA>
 8005900:	e09e      	b.n	8005a40 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d16b      	bne.n	80059e2 <USB_EPStartXfer+0x900>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800591a:	4413      	add	r3, r2
 800591c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	00da      	lsls	r2, r3, #3
 8005924:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005926:	4413      	add	r3, r2
 8005928:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800592c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800592e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005938:	b29a      	uxth	r2, r3
 800593a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <USB_EPStartXfer+0x87a>
 8005946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005954:	b29a      	uxth	r2, r3
 8005956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e063      	b.n	8005a24 <USB_EPStartXfer+0x942>
 800595c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005960:	2b3e      	cmp	r3, #62	@ 0x3e
 8005962:	d81c      	bhi.n	800599e <USB_EPStartXfer+0x8bc>
 8005964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800596e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <USB_EPStartXfer+0x8a2>
 800597a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800597e:	3301      	adds	r3, #1
 8005980:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29b      	uxth	r3, r3
 8005994:	4313      	orrs	r3, r2
 8005996:	b29a      	uxth	r2, r3
 8005998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e042      	b.n	8005a24 <USB_EPStartXfer+0x942>
 800599e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <USB_EPStartXfer+0x8dc>
 80059b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	029b      	lsls	r3, r3, #10
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e020      	b.n	8005a24 <USB_EPStartXfer+0x942>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d11c      	bne.n	8005a24 <USB_EPStartXfer+0x942>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059fe:	4413      	add	r3, r2
 8005a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	00da      	lsls	r2, r3, #3
 8005a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a0e:	4413      	add	r3, r2
 8005a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	891b      	ldrh	r3, [r3, #8]
 8005a28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6959      	ldr	r1, [r3, #20]
 8005a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa35 	bl	8005eaa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a56:	817b      	strh	r3, [r7, #10]
 8005a58:	897b      	ldrh	r3, [r7, #10]
 8005a5a:	f083 0310 	eor.w	r3, r3, #16
 8005a5e:	817b      	strh	r3, [r7, #10]
 8005a60:	897b      	ldrh	r3, [r7, #10]
 8005a62:	f083 0320 	eor.w	r3, r3, #32
 8005a66:	817b      	strh	r3, [r7, #10]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]
 8005a88:	e0d5      	b.n	8005c36 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	7b1b      	ldrb	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d156      	bne.n	8005b40 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d122      	bne.n	8005ae0 <USB_EPStartXfer+0x9fe>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	78db      	ldrb	r3, [r3, #3]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d11e      	bne.n	8005ae0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
 8005ade:	e01d      	b.n	8005b1c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	441a      	add	r2, r3
 8005b04:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8005b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d907      	bls.n	8005b38 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	e054      	b.n	8005be2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	619a      	str	r2, [r3, #24]
 8005b3e:	e050      	b.n	8005be2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	78db      	ldrb	r3, [r3, #3]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d142      	bne.n	8005bce <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d048      	beq.n	8005be2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <USB_EPStartXfer+0xa96>
 8005b6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d12e      	bne.n	8005be2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b84:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d128      	bne.n	8005be2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8005bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8013      	strh	r3, [r2, #0]
 8005bcc:	e009      	b.n	8005be2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	78db      	ldrb	r3, [r3, #3]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d103      	bne.n	8005bde <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	619a      	str	r2, [r3, #24]
 8005bdc:	e001      	b.n	8005be2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e02a      	b.n	8005c38 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005bfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	37b0      	adds	r7, #176	@ 0xb0
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d020      	beq.n	8005c94 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c68:	81bb      	strh	r3, [r7, #12]
 8005c6a:	89bb      	ldrh	r3, [r7, #12]
 8005c6c:	f083 0310 	eor.w	r3, r3, #16
 8005c70:	81bb      	strh	r3, [r7, #12]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	89bb      	ldrh	r3, [r7, #12]
 8005c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	8013      	strh	r3, [r2, #0]
 8005c92:	e01f      	b.n	8005cd4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	81fb      	strh	r3, [r7, #14]
 8005cac:	89fb      	ldrh	r3, [r7, #14]
 8005cae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cb2:	81fb      	strh	r3, [r7, #14]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	89fb      	ldrh	r3, [r7, #14]
 8005cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b087      	sub	sp, #28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04c      	beq.n	8005d8e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	823b      	strh	r3, [r7, #16]
 8005d02:	8a3b      	ldrh	r3, [r7, #16]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <USB_EPClearStall+0x62>
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d22:	81fb      	strh	r3, [r7, #14]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	89fb      	ldrh	r3, [r7, #14]
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d06c      	beq.n	8005e26 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d62:	81bb      	strh	r3, [r7, #12]
 8005d64:	89bb      	ldrh	r3, [r7, #12]
 8005d66:	f083 0320 	eor.w	r3, r3, #32
 8005d6a:	81bb      	strh	r3, [r7, #12]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	89bb      	ldrh	r3, [r7, #12]
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
 8005d8c:	e04b      	b.n	8005e26 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	82fb      	strh	r3, [r7, #22]
 8005d9c:	8afb      	ldrh	r3, [r7, #22]
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01b      	beq.n	8005dde <USB_EPClearStall+0xfc>
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbc:	82bb      	strh	r3, [r7, #20]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	8abb      	ldrh	r3, [r7, #20]
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df4:	827b      	strh	r3, [r7, #18]
 8005df6:	8a7b      	ldrh	r3, [r7, #18]
 8005df8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005dfc:	827b      	strh	r3, [r7, #18]
 8005dfe:	8a7b      	ldrh	r3, [r7, #18]
 8005e00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e04:	827b      	strh	r3, [r7, #18]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	8a7b      	ldrh	r3, [r7, #18]
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2280      	movs	r2, #128	@ 0x80
 8005e4a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b08b      	sub	sp, #44	@ 0x2c
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	460b      	mov	r3, r1
 8005eba:	80fb      	strh	r3, [r7, #6]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ec0:	88bb      	ldrh	r3, [r7, #4]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eda:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee0:	e01c      	b.n	8005f1c <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	b21a      	sxth	r2, r3
 8005ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	8a7a      	ldrh	r2, [r7, #18]
 8005f02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	3302      	adds	r3, #2
 8005f08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	3301      	adds	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1df      	bne.n	8005ee2 <USB_WritePMA+0x38>
  }
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	372c      	adds	r7, #44	@ 0x2c
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b08b      	sub	sp, #44	@ 0x2c
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	460b      	mov	r3, r1
 8005f40:	80fb      	strh	r3, [r7, #6]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f46:	88bb      	ldrh	r3, [r7, #4]
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f66:	e018      	b.n	8005f9a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	3302      	adds	r3, #2
 8005f74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	3301      	adds	r3, #1
 8005f92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	3b01      	subs	r3, #1
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e3      	bne.n	8005f68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005fa0:	88bb      	ldrh	r3, [r7, #4]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	701a      	strb	r2, [r3, #0]
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	372c      	adds	r7, #44	@ 0x2c
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fd4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005fd8:	f002 fc76 	bl	80088c8 <USBD_static_malloc>
 8005fdc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d109      	bne.n	8005ff8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	32b0      	adds	r2, #176	@ 0xb0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e0d4      	b.n	80061a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ff8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f002 fcce 	bl	80089a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	32b0      	adds	r2, #176	@ 0xb0
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	32b0      	adds	r2, #176	@ 0xb0
 800601e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7c1b      	ldrb	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d138      	bne.n	80060a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006030:	4b5e      	ldr	r3, [pc, #376]	@ (80061ac <USBD_CDC_Init+0x1e4>)
 8006032:	7819      	ldrb	r1, [r3, #0]
 8006034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006038:	2202      	movs	r2, #2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f002 faeb 	bl	8008616 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006040:	4b5a      	ldr	r3, [pc, #360]	@ (80061ac <USBD_CDC_Init+0x1e4>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f003 020f 	and.w	r2, r3, #15
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	3324      	adds	r3, #36	@ 0x24
 8006056:	2201      	movs	r2, #1
 8006058:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800605a:	4b55      	ldr	r3, [pc, #340]	@ (80061b0 <USBD_CDC_Init+0x1e8>)
 800605c:	7819      	ldrb	r1, [r3, #0]
 800605e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006062:	2202      	movs	r2, #2
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f002 fad6 	bl	8008616 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800606a:	4b51      	ldr	r3, [pc, #324]	@ (80061b0 <USBD_CDC_Init+0x1e8>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006082:	2201      	movs	r2, #1
 8006084:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006086:	4b4b      	ldr	r3, [pc, #300]	@ (80061b4 <USBD_CDC_Init+0x1ec>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3326      	adds	r3, #38	@ 0x26
 800609c:	2210      	movs	r2, #16
 800609e:	801a      	strh	r2, [r3, #0]
 80060a0:	e035      	b.n	800610e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060a2:	4b42      	ldr	r3, [pc, #264]	@ (80061ac <USBD_CDC_Init+0x1e4>)
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	2340      	movs	r3, #64	@ 0x40
 80060a8:	2202      	movs	r2, #2
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f002 fab3 	bl	8008616 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060b0:	4b3e      	ldr	r3, [pc, #248]	@ (80061ac <USBD_CDC_Init+0x1e4>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3324      	adds	r3, #36	@ 0x24
 80060c6:	2201      	movs	r2, #1
 80060c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <USBD_CDC_Init+0x1e8>)
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	2340      	movs	r3, #64	@ 0x40
 80060d0:	2202      	movs	r2, #2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f002 fa9f 	bl	8008616 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060d8:	4b35      	ldr	r3, [pc, #212]	@ (80061b0 <USBD_CDC_Init+0x1e8>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060f0:	2201      	movs	r2, #1
 80060f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060f4:	4b2f      	ldr	r3, [pc, #188]	@ (80061b4 <USBD_CDC_Init+0x1ec>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	3326      	adds	r3, #38	@ 0x26
 800610a:	2210      	movs	r2, #16
 800610c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800610e:	4b29      	ldr	r3, [pc, #164]	@ (80061b4 <USBD_CDC_Init+0x1ec>)
 8006110:	7819      	ldrb	r1, [r3, #0]
 8006112:	2308      	movs	r3, #8
 8006114:	2203      	movs	r2, #3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f002 fa7d 	bl	8008616 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <USBD_CDC_Init+0x1ec>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 020f 	and.w	r2, r3, #15
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	3324      	adds	r3, #36	@ 0x24
 8006132:	2201      	movs	r2, #1
 8006134:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	33b0      	adds	r3, #176	@ 0xb0
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800616c:	2302      	movs	r3, #2
 800616e:	e018      	b.n	80061a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7c1b      	ldrb	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006178:	4b0d      	ldr	r3, [pc, #52]	@ (80061b0 <USBD_CDC_Init+0x1e8>)
 800617a:	7819      	ldrb	r1, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f002 fb34 	bl	80087f4 <USBD_LL_PrepareReceive>
 800618c:	e008      	b.n	80061a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800618e:	4b08      	ldr	r3, [pc, #32]	@ (80061b0 <USBD_CDC_Init+0x1e8>)
 8006190:	7819      	ldrb	r1, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006198:	2340      	movs	r3, #64	@ 0x40
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f002 fb2a 	bl	80087f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	2000009b 	.word	0x2000009b
 80061b0:	2000009c 	.word	0x2000009c
 80061b4:	2000009d 	.word	0x2000009d

080061b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061c4:	4b3a      	ldr	r3, [pc, #232]	@ (80062b0 <USBD_CDC_DeInit+0xf8>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f002 fa49 	bl	8008662 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80061d0:	4b37      	ldr	r3, [pc, #220]	@ (80062b0 <USBD_CDC_DeInit+0xf8>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f003 020f 	and.w	r2, r3, #15
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	3324      	adds	r3, #36	@ 0x24
 80061e6:	2200      	movs	r2, #0
 80061e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061ea:	4b32      	ldr	r3, [pc, #200]	@ (80062b4 <USBD_CDC_DeInit+0xfc>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f002 fa36 	bl	8008662 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061f6:	4b2f      	ldr	r3, [pc, #188]	@ (80062b4 <USBD_CDC_DeInit+0xfc>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f003 020f 	and.w	r2, r3, #15
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800620e:	2200      	movs	r2, #0
 8006210:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006212:	4b29      	ldr	r3, [pc, #164]	@ (80062b8 <USBD_CDC_DeInit+0x100>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f002 fa22 	bl	8008662 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800621e:	4b26      	ldr	r3, [pc, #152]	@ (80062b8 <USBD_CDC_DeInit+0x100>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 020f 	and.w	r2, r3, #15
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3324      	adds	r3, #36	@ 0x24
 8006234:	2200      	movs	r2, #0
 8006236:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006238:	4b1f      	ldr	r3, [pc, #124]	@ (80062b8 <USBD_CDC_DeInit+0x100>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 020f 	and.w	r2, r3, #15
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3326      	adds	r3, #38	@ 0x26
 800624e:	2200      	movs	r2, #0
 8006250:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	32b0      	adds	r2, #176	@ 0xb0
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01f      	beq.n	80062a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	33b0      	adds	r3, #176	@ 0xb0
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32b0      	adds	r2, #176	@ 0xb0
 8006282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006286:	4618      	mov	r0, r3
 8006288:	f002 fb2c 	bl	80088e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32b0      	adds	r2, #176	@ 0xb0
 8006296:	2100      	movs	r1, #0
 8006298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2000009b 	.word	0x2000009b
 80062b4:	2000009c 	.word	0x2000009c
 80062b8:	2000009d 	.word	0x2000009d

080062bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	32b0      	adds	r2, #176	@ 0xb0
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e0bf      	b.n	800646c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d050      	beq.n	800639a <USBD_CDC_Setup+0xde>
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	f040 80af 	bne.w	800645c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	88db      	ldrh	r3, [r3, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d03a      	beq.n	800637c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	b25b      	sxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	da1b      	bge.n	8006348 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	33b0      	adds	r3, #176	@ 0xb0
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006326:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	88d2      	ldrh	r2, [r2, #6]
 800632c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	88db      	ldrh	r3, [r3, #6]
 8006332:	2b07      	cmp	r3, #7
 8006334:	bf28      	it	cs
 8006336:	2307      	movcs	r3, #7
 8006338:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	89fa      	ldrh	r2, [r7, #14]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fd2b 	bl	8007d9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006346:	e090      	b.n	800646a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	785a      	ldrb	r2, [r3, #1]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	88db      	ldrh	r3, [r3, #6]
 8006356:	2b3f      	cmp	r3, #63	@ 0x3f
 8006358:	d803      	bhi.n	8006362 <USBD_CDC_Setup+0xa6>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	88db      	ldrh	r3, [r3, #6]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	e000      	b.n	8006364 <USBD_CDC_Setup+0xa8>
 8006362:	2240      	movs	r2, #64	@ 0x40
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006372:	461a      	mov	r2, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fd3d 	bl	8007df4 <USBD_CtlPrepareRx>
      break;
 800637a:	e076      	b.n	800646a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	33b0      	adds	r3, #176	@ 0xb0
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	7850      	ldrb	r0, [r2, #1]
 8006392:	2200      	movs	r2, #0
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	4798      	blx	r3
      break;
 8006398:	e067      	b.n	800646a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b0b      	cmp	r3, #11
 80063a0:	d851      	bhi.n	8006446 <USBD_CDC_Setup+0x18a>
 80063a2:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <USBD_CDC_Setup+0xec>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063d9 	.word	0x080063d9
 80063ac:	08006455 	.word	0x08006455
 80063b0:	08006447 	.word	0x08006447
 80063b4:	08006447 	.word	0x08006447
 80063b8:	08006447 	.word	0x08006447
 80063bc:	08006447 	.word	0x08006447
 80063c0:	08006447 	.word	0x08006447
 80063c4:	08006447 	.word	0x08006447
 80063c8:	08006447 	.word	0x08006447
 80063cc:	08006447 	.word	0x08006447
 80063d0:	08006403 	.word	0x08006403
 80063d4:	0800642d 	.word	0x0800642d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d107      	bne.n	80063f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063e4:	f107 030a 	add.w	r3, r7, #10
 80063e8:	2202      	movs	r2, #2
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fcd5 	bl	8007d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063f2:	e032      	b.n	800645a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fc53 	bl	8007ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	75fb      	strb	r3, [r7, #23]
          break;
 8006400:	e02b      	b.n	800645a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d107      	bne.n	800641e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800640e:	f107 030d 	add.w	r3, r7, #13
 8006412:	2201      	movs	r2, #1
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fcc0 	bl	8007d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800641c:	e01d      	b.n	800645a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fc3e 	bl	8007ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006426:	2303      	movs	r3, #3
 8006428:	75fb      	strb	r3, [r7, #23]
          break;
 800642a:	e016      	b.n	800645a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b03      	cmp	r3, #3
 8006436:	d00f      	beq.n	8006458 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fc31 	bl	8007ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006440:	2303      	movs	r3, #3
 8006442:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006444:	e008      	b.n	8006458 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fc2a 	bl	8007ca2 <USBD_CtlError>
          ret = USBD_FAIL;
 800644e:	2303      	movs	r3, #3
 8006450:	75fb      	strb	r3, [r7, #23]
          break;
 8006452:	e002      	b.n	800645a <USBD_CDC_Setup+0x19e>
          break;
 8006454:	bf00      	nop
 8006456:	e008      	b.n	800646a <USBD_CDC_Setup+0x1ae>
          break;
 8006458:	bf00      	nop
      }
      break;
 800645a:	e006      	b.n	800646a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 fc1f 	bl	8007ca2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006464:	2303      	movs	r3, #3
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	bf00      	nop
  }

  return (uint8_t)ret;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006486:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	32b0      	adds	r2, #176	@ 0xb0
 8006492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800649a:	2303      	movs	r3, #3
 800649c:	e065      	b.n	800656a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	32b0      	adds	r2, #176	@ 0xb0
 80064a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	3318      	adds	r3, #24
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02f      	beq.n	8006528 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	3318      	adds	r3, #24
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	f003 010f 	and.w	r1, r3, #15
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	460b      	mov	r3, r1
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4403      	add	r3, r0
 80064f0:	3320      	adds	r3, #32
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d112      	bne.n	8006528 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	f003 020f 	and.w	r2, r3, #15
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	3318      	adds	r3, #24
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800651a:	78f9      	ldrb	r1, [r7, #3]
 800651c:	2300      	movs	r3, #0
 800651e:	2200      	movs	r2, #0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f002 f946 	bl	80087b2 <USBD_LL_Transmit>
 8006526:	e01f      	b.n	8006568 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	33b0      	adds	r3, #176	@ 0xb0
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	33b0      	adds	r3, #176	@ 0xb0
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	32b0      	adds	r2, #176	@ 0xb0
 8006588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	32b0      	adds	r2, #176	@ 0xb0
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e01a      	b.n	80065da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 f944 	bl	8008836 <USBD_LL_GetRxDataSize>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	33b0      	adds	r3, #176	@ 0xb0
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80065d4:	4611      	mov	r1, r2
 80065d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	32b0      	adds	r2, #176	@ 0xb0
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	e024      	b.n	800664e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	33b0      	adds	r3, #176	@ 0xb0
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d019      	beq.n	800664c <USBD_CDC_EP0_RxReady+0x6a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800661e:	2bff      	cmp	r3, #255	@ 0xff
 8006620:	d014      	beq.n	800664c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	33b0      	adds	r3, #176	@ 0xb0
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800663a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006642:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	22ff      	movs	r2, #255	@ 0xff
 8006648:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006660:	2182      	movs	r1, #130	@ 0x82
 8006662:	4818      	ldr	r0, [pc, #96]	@ (80066c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006664:	f000 fcbd 	bl	8006fe2 <USBD_GetEpDesc>
 8006668:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800666a:	2101      	movs	r1, #1
 800666c:	4815      	ldr	r0, [pc, #84]	@ (80066c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800666e:	f000 fcb8 	bl	8006fe2 <USBD_GetEpDesc>
 8006672:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006674:	2181      	movs	r1, #129	@ 0x81
 8006676:	4813      	ldr	r0, [pc, #76]	@ (80066c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006678:	f000 fcb3 	bl	8006fe2 <USBD_GetEpDesc>
 800667c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2210      	movs	r2, #16
 8006688:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d006      	beq.n	800669e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2200      	movs	r2, #0
 8006694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006698:	711a      	strb	r2, [r3, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066ac:	711a      	strb	r2, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2243      	movs	r2, #67	@ 0x43
 80066b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066b8:	4b02      	ldr	r3, [pc, #8]	@ (80066c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000058 	.word	0x20000058

080066c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066d0:	2182      	movs	r1, #130	@ 0x82
 80066d2:	4818      	ldr	r0, [pc, #96]	@ (8006734 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066d4:	f000 fc85 	bl	8006fe2 <USBD_GetEpDesc>
 80066d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066da:	2101      	movs	r1, #1
 80066dc:	4815      	ldr	r0, [pc, #84]	@ (8006734 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066de:	f000 fc80 	bl	8006fe2 <USBD_GetEpDesc>
 80066e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066e4:	2181      	movs	r1, #129	@ 0x81
 80066e6:	4813      	ldr	r0, [pc, #76]	@ (8006734 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066e8:	f000 fc7b 	bl	8006fe2 <USBD_GetEpDesc>
 80066ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2210      	movs	r2, #16
 80066f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2200      	movs	r2, #0
 8006704:	711a      	strb	r2, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f042 0202 	orr.w	r2, r2, #2
 800670c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	711a      	strb	r2, [r3, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f042 0202 	orr.w	r2, r2, #2
 8006720:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2243      	movs	r2, #67	@ 0x43
 8006726:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006728:	4b02      	ldr	r3, [pc, #8]	@ (8006734 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000058 	.word	0x20000058

08006738 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006740:	2182      	movs	r1, #130	@ 0x82
 8006742:	4818      	ldr	r0, [pc, #96]	@ (80067a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006744:	f000 fc4d 	bl	8006fe2 <USBD_GetEpDesc>
 8006748:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800674a:	2101      	movs	r1, #1
 800674c:	4815      	ldr	r0, [pc, #84]	@ (80067a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800674e:	f000 fc48 	bl	8006fe2 <USBD_GetEpDesc>
 8006752:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006754:	2181      	movs	r1, #129	@ 0x81
 8006756:	4813      	ldr	r0, [pc, #76]	@ (80067a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006758:	f000 fc43 	bl	8006fe2 <USBD_GetEpDesc>
 800675c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2210      	movs	r2, #16
 8006768:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2200      	movs	r2, #0
 8006774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006778:	711a      	strb	r2, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d006      	beq.n	8006792 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800678c:	711a      	strb	r2, [r3, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2243      	movs	r2, #67	@ 0x43
 8006796:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006798:	4b02      	ldr	r3, [pc, #8]	@ (80067a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000058 	.word	0x20000058

080067a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	220a      	movs	r2, #10
 80067b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067b6:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	20000014 	.word	0x20000014

080067c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067d8:	2303      	movs	r3, #3
 80067da:	e009      	b.n	80067f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	33b0      	adds	r3, #176	@ 0xb0
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	32b0      	adds	r2, #176	@ 0xb0
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800681e:	2303      	movs	r3, #3
 8006820:	e008      	b.n	8006834 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32b0      	adds	r2, #176	@ 0xb0
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006860:	2303      	movs	r3, #3
 8006862:	e004      	b.n	800686e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	32b0      	adds	r2, #176	@ 0xb0
 800688e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006892:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	e025      	b.n	80068ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d11f      	bne.n	80068ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80068b4:	4b10      	ldr	r3, [pc, #64]	@ (80068f8 <USBD_CDC_TransmitPacket+0x7c>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 020f 	and.w	r2, r3, #15
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4403      	add	r3, r0
 80068ce:	3318      	adds	r3, #24
 80068d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80068d2:	4b09      	ldr	r3, [pc, #36]	@ (80068f8 <USBD_CDC_TransmitPacket+0x7c>)
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 ff65 	bl	80087b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	2000009b 	.word	0x2000009b

080068fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32b0      	adds	r2, #176	@ 0xb0
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32b0      	adds	r2, #176	@ 0xb0
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006926:	2303      	movs	r3, #3
 8006928:	e018      	b.n	800695c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7c1b      	ldrb	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <USBD_CDC_ReceivePacket+0x68>)
 8006934:	7819      	ldrb	r1, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800693c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 ff57 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006946:	e008      	b.n	800695a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006948:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <USBD_CDC_ReceivePacket+0x68>)
 800694a:	7819      	ldrb	r1, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006952:	2340      	movs	r3, #64	@ 0x40
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 ff4d 	bl	80087f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	2000009c 	.word	0x2000009c

08006968 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	e01f      	b.n	80069c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	79fa      	ldrb	r2, [r7, #7]
 80069b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f001 fdb1 	bl	800851c <USBD_LL_Init>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e025      	b.n	8006a2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32ae      	adds	r2, #174	@ 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00f      	beq.n	8006a1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	32ae      	adds	r2, #174	@ 0xae
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f107 020e 	add.w	r2, r7, #14
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fdcf 	bl	80085e0 <USBD_LL_Start>
 8006a42:	4603      	mov	r3, r0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	4611      	mov	r1, r2
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 f8a4 	bl	8007c2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d01a      	beq.n	8006b40 <USBD_LL_SetupStage+0x72>
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d822      	bhi.n	8006b54 <USBD_LL_SetupStage+0x86>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <USBD_LL_SetupStage+0x4a>
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d00a      	beq.n	8006b2c <USBD_LL_SetupStage+0x5e>
 8006b16:	e01d      	b.n	8006b54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fad1 	bl	80070c8 <USBD_StdDevReq>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2a:	e020      	b.n	8006b6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fb39 	bl	80071ac <USBD_StdItfReq>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3e:	e016      	b.n	8006b6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fb9b 	bl	8007284 <USBD_StdEPReq>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
      break;
 8006b52:	e00c      	b.n	8006b6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fd9c 	bl	80086a0 <USBD_LL_StallEP>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6c:	bf00      	nop
  }

  return ret;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	460b      	mov	r3, r1
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d16e      	bne.n	8006c6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	f040 8098 	bne.w	8006cd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d913      	bls.n	8006bd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	bf28      	it	cs
 8006bca:	4613      	movcs	r3, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f001 f92c 	bl	8007e2e <USBD_CtlContinueRx>
 8006bd6:	e07d      	b.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d014      	beq.n	8006c10 <USBD_LL_DataOutStage+0x98>
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d81d      	bhi.n	8006c26 <USBD_LL_DataOutStage+0xae>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <USBD_LL_DataOutStage+0x7c>
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d003      	beq.n	8006bfa <USBD_LL_DataOutStage+0x82>
 8006bf2:	e018      	b.n	8006c26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf8:	e018      	b.n	8006c2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f9d2 	bl	8006fae <USBD_CoreFindIF>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006c0e:	e00d      	b.n	8006c2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f9d4 	bl	8006fc8 <USBD_CoreFindEP>
 8006c20:	4603      	mov	r3, r0
 8006c22:	75bb      	strb	r3, [r7, #22]
            break;
 8006c24:	e002      	b.n	8006c2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75bb      	strb	r3, [r7, #22]
            break;
 8006c2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d113      	bne.n	8006c66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c3e:	7dba      	ldrb	r2, [r7, #22]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	32ae      	adds	r2, #174	@ 0xae
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c4e:	7dba      	ldrb	r2, [r7, #22]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c56:	7dba      	ldrb	r2, [r7, #22]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	32ae      	adds	r2, #174	@ 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 f8f2 	bl	8007e50 <USBD_CtlSendStatus>
 8006c6c:	e032      	b.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f9a5 	bl	8006fc8 <USBD_CoreFindEP>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c82:	7dbb      	ldrb	r3, [r7, #22]
 8006c84:	2bff      	cmp	r3, #255	@ 0xff
 8006c86:	d025      	beq.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
 8006c88:	7dbb      	ldrb	r3, [r7, #22]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d122      	bne.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d117      	bne.n	8006cca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c9a:	7dba      	ldrb	r2, [r7, #22]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	32ae      	adds	r2, #174	@ 0xae
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00f      	beq.n	8006cca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006caa:	7dba      	ldrb	r2, [r7, #22]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006cb2:	7dba      	ldrb	r2, [r7, #22]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	32ae      	adds	r2, #174	@ 0xae
 8006cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	7afa      	ldrb	r2, [r7, #11]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	4798      	blx	r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	e000      	b.n	8006cd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d16f      	bne.n	8006dd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d15a      	bne.n	8006db8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d914      	bls.n	8006d38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 f854 	bl	8007dd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f001 fd5f 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006d36:	e03f      	b.n	8006db8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d11c      	bne.n	8006d7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d316      	bcc.n	8006d7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d20f      	bcs.n	8006d7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2100      	movs	r1, #0
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f001 f835 	bl	8007dd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d70:	2300      	movs	r3, #0
 8006d72:	2200      	movs	r2, #0
 8006d74:	2100      	movs	r1, #0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f001 fd3c 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006d7c:	e01c      	b.n	8006db8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d10f      	bne.n	8006daa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f001 fc77 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f001 f85f 	bl	8007e76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fe42 	bl	8006a4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006dd0:	e032      	b.n	8006e38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f8f3 	bl	8006fc8 <USBD_CoreFindEP>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2bff      	cmp	r3, #255	@ 0xff
 8006dea:	d025      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d122      	bne.n	8006e38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d11c      	bne.n	8006e38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006dfe:	7dfa      	ldrb	r2, [r7, #23]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	32ae      	adds	r2, #174	@ 0xae
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d014      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e0e:	7dfa      	ldrb	r2, [r7, #23]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e16:	7dfa      	ldrb	r2, [r7, #23]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	32ae      	adds	r2, #174	@ 0xae
 8006e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	7afa      	ldrb	r2, [r7, #11]
 8006e24:	4611      	mov	r1, r2
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	4798      	blx	r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e2e:	7dbb      	ldrb	r3, [r7, #22]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e34:	7dbb      	ldrb	r3, [r7, #22]
 8006e36:	e000      	b.n	8006e3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d014      	beq.n	8006ea8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00e      	beq.n	8006ea8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6852      	ldr	r2, [r2, #4]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	4611      	mov	r1, r2
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ea8:	2340      	movs	r3, #64	@ 0x40
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fbb1 	bl	8008616 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2240      	movs	r2, #64	@ 0x40
 8006ec0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ec4:	2340      	movs	r3, #64	@ 0x40
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2180      	movs	r1, #128	@ 0x80
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fba3 	bl	8008616 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2240      	movs	r2, #64	@ 0x40
 8006eda:	621a      	str	r2, [r3, #32]

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d006      	beq.n	8006f28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d106      	bne.n	8006f60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d110      	bne.n	8006fa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	4293      	cmp	r3, r2
 8007006:	d91f      	bls.n	8007048 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800700e:	e013      	b.n	8007038 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007010:	f107 030a 	add.w	r3, r7, #10
 8007014:	4619      	mov	r1, r3
 8007016:	6978      	ldr	r0, [r7, #20]
 8007018:	f000 f81b 	bl	8007052 <USBD_GetNextDesc>
 800701c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b05      	cmp	r3, #5
 8007024:	d108      	bne.n	8007038 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	789b      	ldrb	r3, [r3, #2]
 800702e:	78fa      	ldrb	r2, [r7, #3]
 8007030:	429a      	cmp	r2, r3
 8007032:	d008      	beq.n	8007046 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	885b      	ldrh	r3, [r3, #2]
 800703c:	b29a      	uxth	r2, r3
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	429a      	cmp	r2, r3
 8007042:	d8e5      	bhi.n	8007010 <USBD_GetEpDesc+0x2e>
 8007044:	e000      	b.n	8007048 <USBD_GetEpDesc+0x66>
          break;
 8007046:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007048:	693b      	ldr	r3, [r7, #16]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	4413      	add	r3, r2
 800706a:	b29a      	uxth	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800707c:	68fb      	ldr	r3, [r7, #12]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800708a:	b480      	push	{r7}
 800708c:	b087      	sub	sp, #28
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	3301      	adds	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	b21a      	sxth	r2, r3
 80070b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070ba:	89fb      	ldrh	r3, [r7, #14]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070de:	2b40      	cmp	r3, #64	@ 0x40
 80070e0:	d005      	beq.n	80070ee <USBD_StdDevReq+0x26>
 80070e2:	2b40      	cmp	r3, #64	@ 0x40
 80070e4:	d857      	bhi.n	8007196 <USBD_StdDevReq+0xce>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00f      	beq.n	800710a <USBD_StdDevReq+0x42>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d153      	bne.n	8007196 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	32ae      	adds	r2, #174	@ 0xae
 80070f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e04a      	b.n	80071a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	2b09      	cmp	r3, #9
 8007110:	d83b      	bhi.n	800718a <USBD_StdDevReq+0xc2>
 8007112:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <USBD_StdDevReq+0x50>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	0800716d 	.word	0x0800716d
 800711c:	08007181 	.word	0x08007181
 8007120:	0800718b 	.word	0x0800718b
 8007124:	08007177 	.word	0x08007177
 8007128:	0800718b 	.word	0x0800718b
 800712c:	0800714b 	.word	0x0800714b
 8007130:	08007141 	.word	0x08007141
 8007134:	0800718b 	.word	0x0800718b
 8007138:	08007163 	.word	0x08007163
 800713c:	08007155 	.word	0x08007155
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa3c 	bl	80075c0 <USBD_GetDescriptor>
          break;
 8007148:	e024      	b.n	8007194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fbcb 	bl	80078e8 <USBD_SetAddress>
          break;
 8007152:	e01f      	b.n	8007194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fc0a 	bl	8007970 <USBD_SetConfig>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
          break;
 8007160:	e018      	b.n	8007194 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fcad 	bl	8007ac4 <USBD_GetConfig>
          break;
 800716a:	e013      	b.n	8007194 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fcde 	bl	8007b30 <USBD_GetStatus>
          break;
 8007174:	e00e      	b.n	8007194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fd0d 	bl	8007b98 <USBD_SetFeature>
          break;
 800717e:	e009      	b.n	8007194 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fd31 	bl	8007bea <USBD_ClrFeature>
          break;
 8007188:	e004      	b.n	8007194 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fd88 	bl	8007ca2 <USBD_CtlError>
          break;
 8007192:	bf00      	nop
      }
      break;
 8007194:	e004      	b.n	80071a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fd82 	bl	8007ca2 <USBD_CtlError>
      break;
 800719e:	bf00      	nop
  }

  return ret;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop

080071ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071c2:	2b40      	cmp	r3, #64	@ 0x40
 80071c4:	d005      	beq.n	80071d2 <USBD_StdItfReq+0x26>
 80071c6:	2b40      	cmp	r3, #64	@ 0x40
 80071c8:	d852      	bhi.n	8007270 <USBD_StdItfReq+0xc4>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <USBD_StdItfReq+0x26>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d14e      	bne.n	8007270 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d840      	bhi.n	8007262 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	889b      	ldrh	r3, [r3, #4]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d836      	bhi.n	8007258 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	889b      	ldrh	r3, [r3, #4]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff fedb 	bl	8006fae <USBD_CoreFindIF>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2bff      	cmp	r3, #255	@ 0xff
 8007200:	d01d      	beq.n	800723e <USBD_StdItfReq+0x92>
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007208:	7bba      	ldrb	r2, [r7, #14]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	32ae      	adds	r2, #174	@ 0xae
 800720e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00f      	beq.n	8007238 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007218:	7bba      	ldrb	r2, [r7, #14]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007220:	7bba      	ldrb	r2, [r7, #14]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	@ 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007236:	e004      	b.n	8007242 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800723c:	e001      	b.n	8007242 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800723e:	2303      	movs	r3, #3
 8007240:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d110      	bne.n	800726c <USBD_StdItfReq+0xc0>
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10d      	bne.n	800726c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fdfd 	bl	8007e50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007256:	e009      	b.n	800726c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fd21 	bl	8007ca2 <USBD_CtlError>
          break;
 8007260:	e004      	b.n	800726c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fd1c 	bl	8007ca2 <USBD_CtlError>
          break;
 800726a:	e000      	b.n	800726e <USBD_StdItfReq+0xc2>
          break;
 800726c:	bf00      	nop
      }
      break;
 800726e:	e004      	b.n	800727a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fd15 	bl	8007ca2 <USBD_CtlError>
      break;
 8007278:	bf00      	nop
  }

  return ret;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	889b      	ldrh	r3, [r3, #4]
 8007296:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d007      	beq.n	80072b4 <USBD_StdEPReq+0x30>
 80072a4:	2b40      	cmp	r3, #64	@ 0x40
 80072a6:	f200 817f 	bhi.w	80075a8 <USBD_StdEPReq+0x324>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02a      	beq.n	8007304 <USBD_StdEPReq+0x80>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	f040 817a 	bne.w	80075a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff fe85 	bl	8006fc8 <USBD_CoreFindEP>
 80072be:	4603      	mov	r3, r0
 80072c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c2:	7b7b      	ldrb	r3, [r7, #13]
 80072c4:	2bff      	cmp	r3, #255	@ 0xff
 80072c6:	f000 8174 	beq.w	80075b2 <USBD_StdEPReq+0x32e>
 80072ca:	7b7b      	ldrb	r3, [r7, #13]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8170 	bne.w	80075b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072d2:	7b7a      	ldrb	r2, [r7, #13]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072da:	7b7a      	ldrb	r2, [r7, #13]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32ae      	adds	r2, #174	@ 0xae
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 8163 	beq.w	80075b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072ec:	7b7a      	ldrb	r2, [r7, #13]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32ae      	adds	r2, #174	@ 0xae
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007302:	e156      	b.n	80075b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d008      	beq.n	800731e <USBD_StdEPReq+0x9a>
 800730c:	2b03      	cmp	r3, #3
 800730e:	f300 8145 	bgt.w	800759c <USBD_StdEPReq+0x318>
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 809b 	beq.w	800744e <USBD_StdEPReq+0x1ca>
 8007318:	2b01      	cmp	r3, #1
 800731a:	d03c      	beq.n	8007396 <USBD_StdEPReq+0x112>
 800731c:	e13e      	b.n	800759c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d002      	beq.n	8007330 <USBD_StdEPReq+0xac>
 800732a:	2b03      	cmp	r3, #3
 800732c:	d016      	beq.n	800735c <USBD_StdEPReq+0xd8>
 800732e:	e02c      	b.n	800738a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <USBD_StdEPReq+0xce>
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b80      	cmp	r3, #128	@ 0x80
 800733a:	d00a      	beq.n	8007352 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f9ad 	bl	80086a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007346:	2180      	movs	r1, #128	@ 0x80
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f9a9 	bl	80086a0 <USBD_LL_StallEP>
 800734e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007350:	e020      	b.n	8007394 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fca4 	bl	8007ca2 <USBD_CtlError>
              break;
 800735a:	e01b      	b.n	8007394 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	885b      	ldrh	r3, [r3, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10e      	bne.n	8007382 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <USBD_StdEPReq+0xfe>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b80      	cmp	r3, #128	@ 0x80
 800736e:	d008      	beq.n	8007382 <USBD_StdEPReq+0xfe>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	88db      	ldrh	r3, [r3, #6]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f98f 	bl	80086a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fd64 	bl	8007e50 <USBD_CtlSendStatus>

              break;
 8007388:	e004      	b.n	8007394 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fc88 	bl	8007ca2 <USBD_CtlError>
              break;
 8007392:	bf00      	nop
          }
          break;
 8007394:	e107      	b.n	80075a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d002      	beq.n	80073a8 <USBD_StdEPReq+0x124>
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d016      	beq.n	80073d4 <USBD_StdEPReq+0x150>
 80073a6:	e04b      	b.n	8007440 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <USBD_StdEPReq+0x146>
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b80      	cmp	r3, #128	@ 0x80
 80073b2:	d00a      	beq.n	80073ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f971 	bl	80086a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073be:	2180      	movs	r1, #128	@ 0x80
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f96d 	bl	80086a0 <USBD_LL_StallEP>
 80073c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c8:	e040      	b.n	800744c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc68 	bl	8007ca2 <USBD_CtlError>
              break;
 80073d2:	e03b      	b.n	800744c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	885b      	ldrh	r3, [r3, #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d136      	bne.n	800744a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 f977 	bl	80086de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fd2d 	bl	8007e50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fde4 	bl	8006fc8 <USBD_CoreFindEP>
 8007400:	4603      	mov	r3, r0
 8007402:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007404:	7b7b      	ldrb	r3, [r7, #13]
 8007406:	2bff      	cmp	r3, #255	@ 0xff
 8007408:	d01f      	beq.n	800744a <USBD_StdEPReq+0x1c6>
 800740a:	7b7b      	ldrb	r3, [r7, #13]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d11c      	bne.n	800744a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007410:	7b7a      	ldrb	r2, [r7, #13]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007418:	7b7a      	ldrb	r2, [r7, #13]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32ae      	adds	r2, #174	@ 0xae
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007428:	7b7a      	ldrb	r2, [r7, #13]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	32ae      	adds	r2, #174	@ 0xae
 800742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800743e:	e004      	b.n	800744a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fc2d 	bl	8007ca2 <USBD_CtlError>
              break;
 8007448:	e000      	b.n	800744c <USBD_StdEPReq+0x1c8>
              break;
 800744a:	bf00      	nop
          }
          break;
 800744c:	e0ab      	b.n	80075a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d002      	beq.n	8007460 <USBD_StdEPReq+0x1dc>
 800745a:	2b03      	cmp	r3, #3
 800745c:	d032      	beq.n	80074c4 <USBD_StdEPReq+0x240>
 800745e:	e097      	b.n	8007590 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <USBD_StdEPReq+0x1f2>
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b80      	cmp	r3, #128	@ 0x80
 800746a:	d004      	beq.n	8007476 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fc17 	bl	8007ca2 <USBD_CtlError>
                break;
 8007474:	e091      	b.n	800759a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da0b      	bge.n	8007496 <USBD_StdEPReq+0x212>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	3310      	adds	r3, #16
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	3304      	adds	r3, #4
 8007494:	e00b      	b.n	80074ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	3304      	adds	r3, #4
 80074ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2202      	movs	r2, #2
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc6d 	bl	8007d9c <USBD_CtlSendData>
              break;
 80074c2:	e06a      	b.n	800759a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	da11      	bge.n	80074f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	f003 020f 	and.w	r2, r3, #15
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	3324      	adds	r3, #36	@ 0x24
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d117      	bne.n	8007516 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fbda 	bl	8007ca2 <USBD_CtlError>
                  break;
 80074ee:	e054      	b.n	800759a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	f003 020f 	and.w	r2, r3, #15
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fbc7 	bl	8007ca2 <USBD_CtlError>
                  break;
 8007514:	e041      	b.n	800759a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800751a:	2b00      	cmp	r3, #0
 800751c:	da0b      	bge.n	8007536 <USBD_StdEPReq+0x2b2>
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	3310      	adds	r3, #16
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	3304      	adds	r3, #4
 8007534:	e00b      	b.n	800754e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	3304      	adds	r3, #4
 800754e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <USBD_StdEPReq+0x2d8>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b80      	cmp	r3, #128	@ 0x80
 800755a:	d103      	bne.n	8007564 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e00e      	b.n	8007582 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f8d7 	bl	800871c <USBD_LL_IsStallEP>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2201      	movs	r2, #1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e002      	b.n	8007582 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2202      	movs	r2, #2
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fc07 	bl	8007d9c <USBD_CtlSendData>
              break;
 800758e:	e004      	b.n	800759a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fb85 	bl	8007ca2 <USBD_CtlError>
              break;
 8007598:	bf00      	nop
          }
          break;
 800759a:	e004      	b.n	80075a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fb7f 	bl	8007ca2 <USBD_CtlError>
          break;
 80075a4:	bf00      	nop
      }
      break;
 80075a6:	e005      	b.n	80075b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fb79 	bl	8007ca2 <USBD_CtlError>
      break;
 80075b0:	e000      	b.n	80075b4 <USBD_StdEPReq+0x330>
      break;
 80075b2:	bf00      	nop
  }

  return ret;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	2b0e      	cmp	r3, #14
 80075e2:	f200 8152 	bhi.w	800788a <USBD_GetDescriptor+0x2ca>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <USBD_GetDescriptor+0x2c>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	0800765d 	.word	0x0800765d
 80075f0:	08007675 	.word	0x08007675
 80075f4:	080076b5 	.word	0x080076b5
 80075f8:	0800788b 	.word	0x0800788b
 80075fc:	0800788b 	.word	0x0800788b
 8007600:	0800782b 	.word	0x0800782b
 8007604:	08007857 	.word	0x08007857
 8007608:	0800788b 	.word	0x0800788b
 800760c:	0800788b 	.word	0x0800788b
 8007610:	0800788b 	.word	0x0800788b
 8007614:	0800788b 	.word	0x0800788b
 8007618:	0800788b 	.word	0x0800788b
 800761c:	0800788b 	.word	0x0800788b
 8007620:	0800788b 	.word	0x0800788b
 8007624:	08007629 	.word	0x08007629
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	7c12      	ldrb	r2, [r2, #16]
 8007640:	f107 0108 	add.w	r1, r7, #8
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
 8007648:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800764a:	e126      	b.n	800789a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fb27 	bl	8007ca2 <USBD_CtlError>
        err++;
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	3301      	adds	r3, #1
 8007658:	72fb      	strb	r3, [r7, #11]
      break;
 800765a:	e11e      	b.n	800789a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
      break;
 8007672:	e112      	b.n	800789a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7c1b      	ldrb	r3, [r3, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10d      	bne.n	8007698 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	f107 0208 	add.w	r2, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	2202      	movs	r2, #2
 8007694:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007696:	e100      	b.n	800789a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	f107 0208 	add.w	r2, r7, #8
 80076a4:	4610      	mov	r0, r2
 80076a6:	4798      	blx	r3
 80076a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	2202      	movs	r2, #2
 80076b0:	701a      	strb	r2, [r3, #0]
      break;
 80076b2:	e0f2      	b.n	800789a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	885b      	ldrh	r3, [r3, #2]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	f200 80ac 	bhi.w	8007818 <USBD_GetDescriptor+0x258>
 80076c0:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <USBD_GetDescriptor+0x108>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	08007715 	.word	0x08007715
 80076d0:	08007749 	.word	0x08007749
 80076d4:	0800777d 	.word	0x0800777d
 80076d8:	080077b1 	.word	0x080077b1
 80076dc:	080077e5 	.word	0x080077e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007702:	e091      	b.n	8007828 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 facb 	bl	8007ca2 <USBD_CtlError>
            err++;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	3301      	adds	r3, #1
 8007710:	72fb      	strb	r3, [r7, #11]
          break;
 8007712:	e089      	b.n	8007828 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	7c12      	ldrb	r2, [r2, #16]
 800772c:	f107 0108 	add.w	r1, r7, #8
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007736:	e077      	b.n	8007828 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fab1 	bl	8007ca2 <USBD_CtlError>
            err++;
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	3301      	adds	r3, #1
 8007744:	72fb      	strb	r3, [r7, #11]
          break;
 8007746:	e06f      	b.n	8007828 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776a:	e05d      	b.n	8007828 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa97 	bl	8007ca2 <USBD_CtlError>
            err++;
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	3301      	adds	r3, #1
 8007778:	72fb      	strb	r3, [r7, #11]
          break;
 800777a:	e055      	b.n	8007828 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 0108 	add.w	r1, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779e:	e043      	b.n	8007828 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa7d 	bl	8007ca2 <USBD_CtlError>
            err++;
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	3301      	adds	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
          break;
 80077ae:	e03b      	b.n	8007828 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d2:	e029      	b.n	8007828 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa63 	bl	8007ca2 <USBD_CtlError>
            err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
          break;
 80077e2:	e021      	b.n	8007828 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	7c12      	ldrb	r2, [r2, #16]
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007806:	e00f      	b.n	8007828 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa49 	bl	8007ca2 <USBD_CtlError>
            err++;
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	3301      	adds	r3, #1
 8007814:	72fb      	strb	r3, [r7, #11]
          break;
 8007816:	e007      	b.n	8007828 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa41 	bl	8007ca2 <USBD_CtlError>
          err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007826:	bf00      	nop
      }
      break;
 8007828:	e037      	b.n	800789a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c1b      	ldrb	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	4610      	mov	r0, r2
 8007840:	4798      	blx	r3
 8007842:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007844:	e029      	b.n	800789a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa2a 	bl	8007ca2 <USBD_CtlError>
        err++;
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	3301      	adds	r3, #1
 8007852:	72fb      	strb	r3, [r7, #11]
      break;
 8007854:	e021      	b.n	800789a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10d      	bne.n	800787a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007866:	f107 0208 	add.w	r2, r7, #8
 800786a:	4610      	mov	r0, r2
 800786c:	4798      	blx	r3
 800786e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	2207      	movs	r2, #7
 8007876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007878:	e00f      	b.n	800789a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fa10 	bl	8007ca2 <USBD_CtlError>
        err++;
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	3301      	adds	r3, #1
 8007886:	72fb      	strb	r3, [r7, #11]
      break;
 8007888:	e007      	b.n	800789a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa08 	bl	8007ca2 <USBD_CtlError>
      err++;
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	3301      	adds	r3, #1
 8007896:	72fb      	strb	r3, [r7, #11]
      break;
 8007898:	bf00      	nop
  }

  if (err != 0U)
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d11e      	bne.n	80078de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	88db      	ldrh	r3, [r3, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d016      	beq.n	80078d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078a8:	893b      	ldrh	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00e      	beq.n	80078cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88da      	ldrh	r2, [r3, #6]
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	4293      	cmp	r3, r2
 80078b6:	bf28      	it	cs
 80078b8:	4613      	movcs	r3, r2
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078be:	893b      	ldrh	r3, [r7, #8]
 80078c0:	461a      	mov	r2, r3
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fa69 	bl	8007d9c <USBD_CtlSendData>
 80078ca:	e009      	b.n	80078e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9e7 	bl	8007ca2 <USBD_CtlError>
 80078d4:	e004      	b.n	80078e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 faba 	bl	8007e50 <USBD_CtlSendStatus>
 80078dc:	e000      	b.n	80078e0 <USBD_GetDescriptor+0x320>
    return;
 80078de:	bf00      	nop
  }
}
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop

080078e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	889b      	ldrh	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d131      	bne.n	800795e <USBD_SetAddress+0x76>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d12d      	bne.n	800795e <USBD_SetAddress+0x76>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	885b      	ldrh	r3, [r3, #2]
 8007906:	2b7f      	cmp	r3, #127	@ 0x7f
 8007908:	d829      	bhi.n	800795e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d104      	bne.n	800792c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9bc 	bl	8007ca2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792a:	e01d      	b.n	8007968 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7bfa      	ldrb	r2, [r7, #15]
 8007930:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 ff1b 	bl	8008774 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa86 	bl	8007e50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007952:	e009      	b.n	8007968 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795c:	e004      	b.n	8007968 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f99e 	bl	8007ca2 <USBD_CtlError>
  }
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	b2da      	uxtb	r2, r3
 8007984:	4b4e      	ldr	r3, [pc, #312]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007988:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac0 <USBD_SetConfig+0x150>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d905      	bls.n	800799c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f985 	bl	8007ca2 <USBD_CtlError>
    return USBD_FAIL;
 8007998:	2303      	movs	r3, #3
 800799a:	e08c      	b.n	8007ab6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d002      	beq.n	80079ae <USBD_SetConfig+0x3e>
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d029      	beq.n	8007a00 <USBD_SetConfig+0x90>
 80079ac:	e075      	b.n	8007a9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079ae:	4b44      	ldr	r3, [pc, #272]	@ (8007ac0 <USBD_SetConfig+0x150>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d020      	beq.n	80079f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079b6:	4b42      	ldr	r3, [pc, #264]	@ (8007ac0 <USBD_SetConfig+0x150>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac0 <USBD_SetConfig+0x150>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff f84b 	bl	8006a62 <USBD_SetClassConfig>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f962 	bl	8007ca2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079e6:	e065      	b.n	8007ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa31 	bl	8007e50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2203      	movs	r2, #3
 80079f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079f6:	e05d      	b.n	8007ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa29 	bl	8007e50 <USBD_CtlSendStatus>
      break;
 80079fe:	e059      	b.n	8007ab4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a00:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d112      	bne.n	8007a2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a10:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a1a:	4b29      	ldr	r3, [pc, #164]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff f83a 	bl	8006a9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa12 	bl	8007e50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a2c:	e042      	b.n	8007ab4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d02a      	beq.n	8007a92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff f828 	bl	8006a9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a54:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff f801 	bl	8006a62 <USBD_SetClassConfig>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00f      	beq.n	8007a8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f918 	bl	8007ca2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff f80d 	bl	8006a9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a88:	e014      	b.n	8007ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9e0 	bl	8007e50 <USBD_CtlSendStatus>
      break;
 8007a90:	e010      	b.n	8007ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9dc 	bl	8007e50 <USBD_CtlSendStatus>
      break;
 8007a98:	e00c      	b.n	8007ab4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f900 	bl	8007ca2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aa2:	4b07      	ldr	r3, [pc, #28]	@ (8007ac0 <USBD_SetConfig+0x150>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fe fff6 	bl	8006a9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab2:	bf00      	nop
  }

  return ret;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000194 	.word	0x20000194

08007ac4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d004      	beq.n	8007ae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8e2 	bl	8007ca2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ade:	e023      	b.n	8007b28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	dc02      	bgt.n	8007af2 <USBD_GetConfig+0x2e>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc03      	bgt.n	8007af8 <USBD_GetConfig+0x34>
 8007af0:	e015      	b.n	8007b1e <USBD_GetConfig+0x5a>
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d00b      	beq.n	8007b0e <USBD_GetConfig+0x4a>
 8007af6:	e012      	b.n	8007b1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3308      	adds	r3, #8
 8007b02:	2201      	movs	r2, #1
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f948 	bl	8007d9c <USBD_CtlSendData>
        break;
 8007b0c:	e00c      	b.n	8007b28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3304      	adds	r3, #4
 8007b12:	2201      	movs	r2, #1
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f940 	bl	8007d9c <USBD_CtlSendData>
        break;
 8007b1c:	e004      	b.n	8007b28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f8be 	bl	8007ca2 <USBD_CtlError>
        break;
 8007b26:	bf00      	nop
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d81e      	bhi.n	8007b86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	88db      	ldrh	r3, [r3, #6]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d004      	beq.n	8007b5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8a5 	bl	8007ca2 <USBD_CtlError>
        break;
 8007b58:	e01a      	b.n	8007b90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f043 0202 	orr.w	r2, r3, #2
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f90c 	bl	8007d9c <USBD_CtlSendData>
      break;
 8007b84:	e004      	b.n	8007b90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f88a 	bl	8007ca2 <USBD_CtlError>
      break;
 8007b8e:	bf00      	nop
  }
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d107      	bne.n	8007bba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f94c 	bl	8007e50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bb8:	e013      	b.n	8007be2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d10b      	bne.n	8007bda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	889b      	ldrh	r3, [r3, #4]
 8007bc6:	0a1b      	lsrs	r3, r3, #8
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f93c 	bl	8007e50 <USBD_CtlSendStatus>
}
 8007bd8:	e003      	b.n	8007be2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f860 	bl	8007ca2 <USBD_CtlError>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d80b      	bhi.n	8007c1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10c      	bne.n	8007c24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f91c 	bl	8007e50 <USBD_CtlSendStatus>
      }
      break;
 8007c18:	e004      	b.n	8007c24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f840 	bl	8007ca2 <USBD_CtlError>
      break;
 8007c22:	e000      	b.n	8007c26 <USBD_ClrFeature+0x3c>
      break;
 8007c24:	bf00      	nop
  }
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3301      	adds	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff fa16 	bl	800708a <SWAPBYTE>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	461a      	mov	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff fa09 	bl	800708a <SWAPBYTE>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff f9fc 	bl	800708a <SWAPBYTE>
 8007c92:	4603      	mov	r3, r0
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	80da      	strh	r2, [r3, #6]
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cac:	2180      	movs	r1, #128	@ 0x80
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fcf6 	bl	80086a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fcf2 	bl	80086a0 <USBD_LL_StallEP>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d042      	beq.n	8007d60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007cde:	6938      	ldr	r0, [r7, #16]
 8007ce0:	f000 f842 	bl	8007d68 <USBD_GetLen>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cee:	d808      	bhi.n	8007d02 <USBD_GetString+0x3e>
 8007cf0:	6938      	ldr	r0, [r7, #16]
 8007cf2:	f000 f839 	bl	8007d68 <USBD_GetLen>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	e001      	b.n	8007d06 <USBD_GetString+0x42>
 8007d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	2203      	movs	r2, #3
 8007d24:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d2c:	e013      	b.n	8007d56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	4413      	add	r3, r2
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	7812      	ldrb	r2, [r2, #0]
 8007d38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
    idx++;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	3301      	adds	r3, #1
 8007d44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	3301      	adds	r3, #1
 8007d54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e7      	bne.n	8007d2e <USBD_GetString+0x6a>
 8007d5e:	e000      	b.n	8007d62 <USBD_GetString+0x9e>
    return;
 8007d60:	bf00      	nop
  }
}
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d78:	e005      	b.n	8007d86 <USBD_GetLen+0x1e>
  {
    len++;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3301      	adds	r3, #1
 8007d84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f5      	bne.n	8007d7a <USBD_GetLen+0x12>
  }

  return len;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fcf5 	bl	80087b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	2100      	movs	r1, #0
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 fce4 	bl	80087b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2203      	movs	r2, #3
 8007e04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fce8 	bl	80087f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fcd7 	bl	80087f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e60:	2300      	movs	r3, #0
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fca3 	bl	80087b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2205      	movs	r2, #5
 8007e82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e86:	2300      	movs	r3, #0
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fcb1 	bl	80087f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4912      	ldr	r1, [pc, #72]	@ (8007eec <MX_USB_Device_Init+0x50>)
 8007ea4:	4812      	ldr	r0, [pc, #72]	@ (8007ef0 <MX_USB_Device_Init+0x54>)
 8007ea6:	f7fe fd5f 	bl	8006968 <USBD_Init>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007eb0:	f7f8 fadc 	bl	800046c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007eb4:	490f      	ldr	r1, [pc, #60]	@ (8007ef4 <MX_USB_Device_Init+0x58>)
 8007eb6:	480e      	ldr	r0, [pc, #56]	@ (8007ef0 <MX_USB_Device_Init+0x54>)
 8007eb8:	f7fe fd86 	bl	80069c8 <USBD_RegisterClass>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007ec2:	f7f8 fad3 	bl	800046c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007ec6:	490c      	ldr	r1, [pc, #48]	@ (8007ef8 <MX_USB_Device_Init+0x5c>)
 8007ec8:	4809      	ldr	r0, [pc, #36]	@ (8007ef0 <MX_USB_Device_Init+0x54>)
 8007eca:	f7fe fc7d 	bl	80067c8 <USBD_CDC_RegisterInterface>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007ed4:	f7f8 faca 	bl	800046c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007ed8:	4805      	ldr	r0, [pc, #20]	@ (8007ef0 <MX_USB_Device_Init+0x54>)
 8007eda:	f7fe fdab 	bl	8006a34 <USBD_Start>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007ee4:	f7f8 fac2 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007ee8:	bf00      	nop
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	200000b4 	.word	0x200000b4
 8007ef0:	20000198 	.word	0x20000198
 8007ef4:	20000020 	.word	0x20000020
 8007ef8:	200000a0 	.word	0x200000a0

08007efc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f00:	2200      	movs	r2, #0
 8007f02:	4905      	ldr	r1, [pc, #20]	@ (8007f18 <CDC_Init_FS+0x1c>)
 8007f04:	4805      	ldr	r0, [pc, #20]	@ (8007f1c <CDC_Init_FS+0x20>)
 8007f06:	f7fe fc79 	bl	80067fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f0a:	4905      	ldr	r1, [pc, #20]	@ (8007f20 <CDC_Init_FS+0x24>)
 8007f0c:	4803      	ldr	r0, [pc, #12]	@ (8007f1c <CDC_Init_FS+0x20>)
 8007f0e:	f7fe fc97 	bl	8006840 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000c74 	.word	0x20000c74
 8007f1c:	20000198 	.word	0x20000198
 8007f20:	20000474 	.word	0x20000474

08007f24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
 8007f40:	4613      	mov	r3, r2
 8007f42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b23      	cmp	r3, #35	@ 0x23
 8007f48:	d84a      	bhi.n	8007fe0 <CDC_Control_FS+0xac>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <CDC_Control_FS+0x1c>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007fe1 	.word	0x08007fe1
 8007f54:	08007fe1 	.word	0x08007fe1
 8007f58:	08007fe1 	.word	0x08007fe1
 8007f5c:	08007fe1 	.word	0x08007fe1
 8007f60:	08007fe1 	.word	0x08007fe1
 8007f64:	08007fe1 	.word	0x08007fe1
 8007f68:	08007fe1 	.word	0x08007fe1
 8007f6c:	08007fe1 	.word	0x08007fe1
 8007f70:	08007fe1 	.word	0x08007fe1
 8007f74:	08007fe1 	.word	0x08007fe1
 8007f78:	08007fe1 	.word	0x08007fe1
 8007f7c:	08007fe1 	.word	0x08007fe1
 8007f80:	08007fe1 	.word	0x08007fe1
 8007f84:	08007fe1 	.word	0x08007fe1
 8007f88:	08007fe1 	.word	0x08007fe1
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007fe1 	.word	0x08007fe1
 8007f94:	08007fe1 	.word	0x08007fe1
 8007f98:	08007fe1 	.word	0x08007fe1
 8007f9c:	08007fe1 	.word	0x08007fe1
 8007fa0:	08007fe1 	.word	0x08007fe1
 8007fa4:	08007fe1 	.word	0x08007fe1
 8007fa8:	08007fe1 	.word	0x08007fe1
 8007fac:	08007fe1 	.word	0x08007fe1
 8007fb0:	08007fe1 	.word	0x08007fe1
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08007fe1 	.word	0x08007fe1
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08007fe1 	.word	0x08007fe1
 8007fcc:	08007fe1 	.word	0x08007fe1
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08007fe1 	.word	0x08007fe1
 8007fd8:	08007fe1 	.word	0x08007fe1
 8007fdc:	08007fe1 	.word	0x08007fe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fe0:	bf00      	nop
  }

  return (USBD_OK);
 8007fe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4805      	ldr	r0, [pc, #20]	@ (8008014 <CDC_Receive_FS+0x24>)
 8007ffe:	f7fe fc1f 	bl	8006840 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008002:	4804      	ldr	r0, [pc, #16]	@ (8008014 <CDC_Receive_FS+0x24>)
 8008004:	f7fe fc7a 	bl	80068fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008008:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000198 	.word	0x20000198

08008018 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008028:	4b0d      	ldr	r3, [pc, #52]	@ (8008060 <CDC_Transmit_FS+0x48>)
 800802a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800802e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800803a:	2301      	movs	r3, #1
 800803c:	e00b      	b.n	8008056 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800803e:	887b      	ldrh	r3, [r7, #2]
 8008040:	461a      	mov	r2, r3
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4806      	ldr	r0, [pc, #24]	@ (8008060 <CDC_Transmit_FS+0x48>)
 8008046:	f7fe fbd9 	bl	80067fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800804a:	4805      	ldr	r0, [pc, #20]	@ (8008060 <CDC_Transmit_FS+0x48>)
 800804c:	f7fe fc16 	bl	800687c <USBD_CDC_TransmitPacket>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000198 	.word	0x20000198

08008064 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2212      	movs	r2, #18
 8008098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	@ (80080a8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	200000d4 	.word	0x200000d4

080080ac <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2204      	movs	r2, #4
 80080bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080be:	4b03      	ldr	r3, [pc, #12]	@ (80080cc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	200000e8 	.word	0x200000e8

080080d0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d105      	bne.n	80080ee <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4907      	ldr	r1, [pc, #28]	@ (8008104 <USBD_CDC_ProductStrDescriptor+0x34>)
 80080e6:	4808      	ldr	r0, [pc, #32]	@ (8008108 <USBD_CDC_ProductStrDescriptor+0x38>)
 80080e8:	f7ff fdec 	bl	8007cc4 <USBD_GetString>
 80080ec:	e004      	b.n	80080f8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4904      	ldr	r1, [pc, #16]	@ (8008104 <USBD_CDC_ProductStrDescriptor+0x34>)
 80080f2:	4805      	ldr	r0, [pc, #20]	@ (8008108 <USBD_CDC_ProductStrDescriptor+0x38>)
 80080f4:	f7ff fde6 	bl	8007cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f8:	4b02      	ldr	r3, [pc, #8]	@ (8008104 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20001474 	.word	0x20001474
 8008108:	080092f4 	.word	0x080092f4

0800810c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	4904      	ldr	r1, [pc, #16]	@ (800812c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800811c:	4804      	ldr	r0, [pc, #16]	@ (8008130 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800811e:	f7ff fdd1 	bl	8007cc4 <USBD_GetString>
  return USBD_StrDesc;
 8008122:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20001474 	.word	0x20001474
 8008130:	0800930c 	.word	0x0800930c

08008134 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	221a      	movs	r2, #26
 8008144:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008146:	f000 f843 	bl	80081d0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800814a:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200000ec 	.word	0x200000ec

08008158 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4907      	ldr	r1, [pc, #28]	@ (800818c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800816e:	4808      	ldr	r0, [pc, #32]	@ (8008190 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008170:	f7ff fda8 	bl	8007cc4 <USBD_GetString>
 8008174:	e004      	b.n	8008180 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4904      	ldr	r1, [pc, #16]	@ (800818c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800817a:	4805      	ldr	r0, [pc, #20]	@ (8008190 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800817c:	f7ff fda2 	bl	8007cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008180:	4b02      	ldr	r3, [pc, #8]	@ (800818c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20001474 	.word	0x20001474
 8008190:	08009320 	.word	0x08009320

08008194 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	4907      	ldr	r1, [pc, #28]	@ (80081c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80081aa:	4808      	ldr	r0, [pc, #32]	@ (80081cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80081ac:	f7ff fd8a 	bl	8007cc4 <USBD_GetString>
 80081b0:	e004      	b.n	80081bc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4904      	ldr	r1, [pc, #16]	@ (80081c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80081b6:	4805      	ldr	r0, [pc, #20]	@ (80081cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80081b8:	f7ff fd84 	bl	8007cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081bc:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20001474 	.word	0x20001474
 80081cc:	0800932c 	.word	0x0800932c

080081d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008214 <Get_SerialNum+0x44>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <Get_SerialNum+0x48>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081e2:	4b0e      	ldr	r3, [pc, #56]	@ (800821c <Get_SerialNum+0x4c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4413      	add	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081f6:	2208      	movs	r2, #8
 80081f8:	4909      	ldr	r1, [pc, #36]	@ (8008220 <Get_SerialNum+0x50>)
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f814 	bl	8008228 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008200:	2204      	movs	r2, #4
 8008202:	4908      	ldr	r1, [pc, #32]	@ (8008224 <Get_SerialNum+0x54>)
 8008204:	68b8      	ldr	r0, [r7, #8]
 8008206:	f000 f80f 	bl	8008228 <IntToUnicode>
  }
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	1fff7590 	.word	0x1fff7590
 8008218:	1fff7594 	.word	0x1fff7594
 800821c:	1fff7598 	.word	0x1fff7598
 8008220:	200000ee 	.word	0x200000ee
 8008224:	200000fe 	.word	0x200000fe

08008228 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800823a:	2300      	movs	r3, #0
 800823c:	75fb      	strb	r3, [r7, #23]
 800823e:	e027      	b.n	8008290 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	0f1b      	lsrs	r3, r3, #28
 8008244:	2b09      	cmp	r3, #9
 8008246:	d80b      	bhi.n	8008260 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	0f1b      	lsrs	r3, r3, #28
 800824c:	b2da      	uxtb	r2, r3
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4619      	mov	r1, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	440b      	add	r3, r1
 8008258:	3230      	adds	r2, #48	@ 0x30
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e00a      	b.n	8008276 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	0f1b      	lsrs	r3, r3, #28
 8008264:	b2da      	uxtb	r2, r3
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	4619      	mov	r1, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	440b      	add	r3, r1
 8008270:	3237      	adds	r2, #55	@ 0x37
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	3301      	adds	r3, #1
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	3301      	adds	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
 8008290:	7dfa      	ldrb	r2, [r7, #23]
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	429a      	cmp	r2, r3
 8008296:	d3d3      	bcc.n	8008240 <IntToUnicode+0x18>
  }
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <LL_AHB2_GRP1_EnableClock>:
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80082ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80082be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4013      	ands	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082ca:	68fb      	ldr	r3, [r7, #12]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80082e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80082f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4013      	ands	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b09c      	sub	sp, #112	@ 0x70
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008314:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008324:	f107 030c 	add.w	r3, r7, #12
 8008328:	2250      	movs	r2, #80	@ 0x50
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fb37 	bl	80089a0 <memset>
  if(pcdHandle->Instance==USB)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a23      	ldr	r2, [pc, #140]	@ (80083c4 <HAL_PCD_MspInit+0xb8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d13e      	bne.n	80083ba <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800833c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008340:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008342:	2318      	movs	r3, #24
 8008344:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008346:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800834a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800834c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008350:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008352:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008356:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8008358:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800835c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800835e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008362:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f7fb fd07 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008374:	f7f8 f87a 	bl	800046c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008378:	2001      	movs	r0, #1
 800837a:	f7ff ff94 	bl	80082a6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800837e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008382:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008384:	2302      	movs	r3, #2
 8008386:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008388:	2300      	movs	r3, #0
 800838a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800838c:	2300      	movs	r3, #0
 800838e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008390:	230a      	movs	r3, #10
 8008392:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008394:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008398:	4619      	mov	r1, r3
 800839a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800839e:	f7f8 fb27 	bl	80009f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083a2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80083a6:	f7ff ff97 	bl	80082d8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80083aa:	2200      	movs	r2, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	2014      	movs	r0, #20
 80083b0:	f7f8 fae9 	bl	8000986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80083b4:	2014      	movs	r0, #20
 80083b6:	f7f8 fb00 	bl	80009ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083ba:	bf00      	nop
 80083bc:	3770      	adds	r7, #112	@ 0x70
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40006800 	.word	0x40006800

080083c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f7fe fb75 	bl	8006ace <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	440b      	add	r3, r1
 800840c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	4619      	mov	r1, r3
 8008416:	f7fe fbaf 	bl	8006b78 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8008434:	78fa      	ldrb	r2, [r7, #3]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	440b      	add	r3, r1
 8008442:	3324      	adds	r3, #36	@ 0x24
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	4619      	mov	r1, r3
 800844a:	f7fe fc48 	bl	8006cde <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008464:	4618      	mov	r0, r3
 8008466:	f7fe fd82 	bl	8006f6e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800847a:	2301      	movs	r3, #1
 800847c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	795b      	ldrb	r3, [r3, #5]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d001      	beq.n	800848a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008486:	f7f7 fff1 	bl	800046c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008490:	7bfa      	ldrb	r2, [r7, #15]
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe fd26 	bl	8006ee6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fcce 	bl	8006e42 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe fd21 	bl	8006f06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7a5b      	ldrb	r3, [r3, #9]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084cc:	4b04      	ldr	r3, [pc, #16]	@ (80084e0 <HAL_PCD_SuspendCallback+0x30>)
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	4a03      	ldr	r2, [pc, #12]	@ (80084e0 <HAL_PCD_SuspendCallback+0x30>)
 80084d2:	f043 0306 	orr.w	r3, r3, #6
 80084d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	e000ed00 	.word	0xe000ed00

080084e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	7a5b      	ldrb	r3, [r3, #9]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084f4:	4b08      	ldr	r3, [pc, #32]	@ (8008518 <HAL_PCD_ResumeCallback+0x34>)
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	4a07      	ldr	r2, [pc, #28]	@ (8008518 <HAL_PCD_ResumeCallback+0x34>)
 80084fa:	f023 0306 	bic.w	r3, r3, #6
 80084fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008500:	f000 f9fa 	bl	80088f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fd17 	bl	8006f3e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed00 	.word	0xe000ed00

0800851c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008524:	4a2c      	ldr	r2, [pc, #176]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a2a      	ldr	r2, [pc, #168]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008530:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008534:	f7fa f91e 	bl	8002774 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8008538:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <USBD_LL_Init+0xbc>)
 800853a:	4a28      	ldr	r2, [pc, #160]	@ (80085dc <USBD_LL_Init+0xc0>)
 800853c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800853e:	4b26      	ldr	r3, [pc, #152]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008540:	2208      	movs	r2, #8
 8008542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008544:	4b24      	ldr	r3, [pc, #144]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008546:	2202      	movs	r2, #2
 8008548:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800854a:	4b23      	ldr	r3, [pc, #140]	@ (80085d8 <USBD_LL_Init+0xbc>)
 800854c:	2202      	movs	r2, #2
 800854e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008550:	4b21      	ldr	r3, [pc, #132]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008552:	2200      	movs	r2, #0
 8008554:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008556:	4b20      	ldr	r3, [pc, #128]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008558:	2200      	movs	r2, #0
 800855a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800855c:	4b1e      	ldr	r3, [pc, #120]	@ (80085d8 <USBD_LL_Init+0xbc>)
 800855e:	2200      	movs	r2, #0
 8008560:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008562:	4b1d      	ldr	r3, [pc, #116]	@ (80085d8 <USBD_LL_Init+0xbc>)
 8008564:	2200      	movs	r2, #0
 8008566:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008568:	481b      	ldr	r0, [pc, #108]	@ (80085d8 <USBD_LL_Init+0xbc>)
 800856a:	f7f8 fbe3 	bl	8000d34 <HAL_PCD_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008574:	f7f7 ff7a 	bl	800046c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800857e:	2318      	movs	r3, #24
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	f7fa f86a 	bl	800265c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800858e:	2358      	movs	r3, #88	@ 0x58
 8008590:	2200      	movs	r2, #0
 8008592:	2180      	movs	r1, #128	@ 0x80
 8008594:	f7fa f862 	bl	800265c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800859e:	23c0      	movs	r3, #192	@ 0xc0
 80085a0:	2200      	movs	r2, #0
 80085a2:	2181      	movs	r1, #129	@ 0x81
 80085a4:	f7fa f85a 	bl	800265c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80085b2:	2200      	movs	r2, #0
 80085b4:	2101      	movs	r1, #1
 80085b6:	f7fa f851 	bl	800265c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085c4:	2200      	movs	r2, #0
 80085c6:	2182      	movs	r1, #130	@ 0x82
 80085c8:	f7fa f848 	bl	800265c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20001674 	.word	0x20001674
 80085dc:	40006800 	.word	0x40006800

080085e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f8 fc6a 	bl	8000ed0 <HAL_PCD_Start>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f97e 	bl	8008904 <USBD_Get_USB_Status>
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860c:	7bbb      	ldrb	r3, [r7, #14]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	4608      	mov	r0, r1
 8008620:	4611      	mov	r1, r2
 8008622:	461a      	mov	r2, r3
 8008624:	4603      	mov	r3, r0
 8008626:	70fb      	strb	r3, [r7, #3]
 8008628:	460b      	mov	r3, r1
 800862a:	70bb      	strb	r3, [r7, #2]
 800862c:	4613      	mov	r3, r2
 800862e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800863e:	78bb      	ldrb	r3, [r7, #2]
 8008640:	883a      	ldrh	r2, [r7, #0]
 8008642:	78f9      	ldrb	r1, [r7, #3]
 8008644:	f7f8 fdb1 	bl	80011aa <HAL_PCD_EP_Open>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f958 	bl	8008904 <USBD_Get_USB_Status>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008658:	7bbb      	ldrb	r3, [r7, #14]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7f8 fdf1 	bl	8001268 <HAL_PCD_EP_Close>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f939 	bl	8008904 <USBD_Get_USB_Status>
 8008692:	4603      	mov	r3, r0
 8008694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008696:	7bbb      	ldrb	r3, [r7, #14]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f8 fe9a 	bl	80013f8 <HAL_PCD_EP_SetStall>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f91a 	bl	8008904 <USBD_Get_USB_Status>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7f8 fecd 	bl	800149c <HAL_PCD_EP_ClrStall>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 f8fb 	bl	8008904 <USBD_Get_USB_Status>
 800870e:	4603      	mov	r3, r0
 8008710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008712:	7bbb      	ldrb	r3, [r7, #14]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800872e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008734:	2b00      	cmp	r3, #0
 8008736:	da0b      	bge.n	8008750 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	440b      	add	r3, r1
 800874a:	3312      	adds	r3, #18
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	e00b      	b.n	8008768 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	4613      	mov	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	440b      	add	r3, r1
 8008762:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008766:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7f8 fce5 	bl	8001162 <HAL_PCD_SetAddress>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f8b0 	bl	8008904 <USBD_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	460b      	mov	r3, r1
 80087c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80087d0:	7af9      	ldrb	r1, [r7, #11]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	f7f8 fdd8 	bl	800138a <HAL_PCD_EP_Transmit>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 f88f 	bl	8008904 <USBD_Get_USB_Status>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	460b      	mov	r3, r1
 8008802:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008812:	7af9      	ldrb	r1, [r7, #11]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	f7f8 fd6e 	bl	80012f8 <HAL_PCD_EP_Receive>
 800881c:	4603      	mov	r3, r0
 800881e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f86e 	bl	8008904 <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800882c:	7dbb      	ldrb	r3, [r7, #22]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f7f8 fd84 	bl	800135a <HAL_PCD_EP_GetRxCount>
 8008852:	4603      	mov	r3, r0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_PCDEx_LPM_Callback+0x18>
 800886e:	2b01      	cmp	r3, #1
 8008870:	d013      	beq.n	800889a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008872:	e023      	b.n	80088bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	7a5b      	ldrb	r3, [r3, #9]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800887c:	f000 f83c 	bl	80088f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008880:	4b10      	ldr	r3, [pc, #64]	@ (80088c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	4a0f      	ldr	r2, [pc, #60]	@ (80088c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008886:	f023 0306 	bic.w	r3, r3, #6
 800888a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fb53 	bl	8006f3e <USBD_LL_Resume>
    break;
 8008898:	e010      	b.n	80088bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe fb30 	bl	8006f06 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7a5b      	ldrb	r3, [r3, #9]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088ae:	4b05      	ldr	r3, [pc, #20]	@ (80088c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	4a04      	ldr	r2, [pc, #16]	@ (80088c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80088b4:	f043 0306 	orr.w	r3, r3, #6
 80088b8:	6113      	str	r3, [r2, #16]
    break;
 80088ba:	bf00      	nop
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000ed00 	.word	0xe000ed00

080088c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088d0:	4b03      	ldr	r3, [pc, #12]	@ (80088e0 <USBD_static_malloc+0x18>)
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20001950 	.word	0x20001950

080088e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088fc:	f7f7 fcfe 	bl	80002fc <SystemClock_Config>
}
 8008900:	bf00      	nop
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d817      	bhi.n	8008948 <USBD_Get_USB_Status+0x44>
 8008918:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <USBD_Get_USB_Status+0x1c>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008931 	.word	0x08008931
 8008924:	08008937 	.word	0x08008937
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008943 	.word	0x08008943
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
    break;
 8008934:	e00b      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008936:	2303      	movs	r3, #3
 8008938:	73fb      	strb	r3, [r7, #15]
    break;
 800893a:	e008      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e005      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
    break;
 8008946:	e002      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008948:	2303      	movs	r3, #3
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	bf00      	nop
  }
  return usb_status;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <siprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b510      	push	{r4, lr}
 8008960:	b09d      	sub	sp, #116	@ 0x74
 8008962:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008964:	9002      	str	r0, [sp, #8]
 8008966:	9006      	str	r0, [sp, #24]
 8008968:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800896c:	480a      	ldr	r0, [pc, #40]	@ (8008998 <siprintf+0x3c>)
 800896e:	9107      	str	r1, [sp, #28]
 8008970:	9104      	str	r1, [sp, #16]
 8008972:	490a      	ldr	r1, [pc, #40]	@ (800899c <siprintf+0x40>)
 8008974:	f853 2b04 	ldr.w	r2, [r3], #4
 8008978:	9105      	str	r1, [sp, #20]
 800897a:	2400      	movs	r4, #0
 800897c:	a902      	add	r1, sp, #8
 800897e:	6800      	ldr	r0, [r0, #0]
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008984:	f000 f994 	bl	8008cb0 <_svfiprintf_r>
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	701c      	strb	r4, [r3, #0]
 800898c:	b01d      	add	sp, #116	@ 0x74
 800898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008992:	b003      	add	sp, #12
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20000108 	.word	0x20000108
 800899c:	ffff0208 	.word	0xffff0208

080089a0 <memset>:
 80089a0:	4402      	add	r2, r0
 80089a2:	4603      	mov	r3, r0
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d100      	bne.n	80089aa <memset+0xa>
 80089a8:	4770      	bx	lr
 80089aa:	f803 1b01 	strb.w	r1, [r3], #1
 80089ae:	e7f9      	b.n	80089a4 <memset+0x4>

080089b0 <__errno>:
 80089b0:	4b01      	ldr	r3, [pc, #4]	@ (80089b8 <__errno+0x8>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20000108 	.word	0x20000108

080089bc <__libc_init_array>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4d0d      	ldr	r5, [pc, #52]	@ (80089f4 <__libc_init_array+0x38>)
 80089c0:	4c0d      	ldr	r4, [pc, #52]	@ (80089f8 <__libc_init_array+0x3c>)
 80089c2:	1b64      	subs	r4, r4, r5
 80089c4:	10a4      	asrs	r4, r4, #2
 80089c6:	2600      	movs	r6, #0
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	d109      	bne.n	80089e0 <__libc_init_array+0x24>
 80089cc:	4d0b      	ldr	r5, [pc, #44]	@ (80089fc <__libc_init_array+0x40>)
 80089ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008a00 <__libc_init_array+0x44>)
 80089d0:	f000 fc64 	bl	800929c <_init>
 80089d4:	1b64      	subs	r4, r4, r5
 80089d6:	10a4      	asrs	r4, r4, #2
 80089d8:	2600      	movs	r6, #0
 80089da:	42a6      	cmp	r6, r4
 80089dc:	d105      	bne.n	80089ea <__libc_init_array+0x2e>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e4:	4798      	blx	r3
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7ee      	b.n	80089c8 <__libc_init_array+0xc>
 80089ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ee:	4798      	blx	r3
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7f2      	b.n	80089da <__libc_init_array+0x1e>
 80089f4:	080093f8 	.word	0x080093f8
 80089f8:	080093f8 	.word	0x080093f8
 80089fc:	080093f8 	.word	0x080093f8
 8008a00:	080093fc 	.word	0x080093fc

08008a04 <__retarget_lock_acquire_recursive>:
 8008a04:	4770      	bx	lr

08008a06 <__retarget_lock_release_recursive>:
 8008a06:	4770      	bx	lr

08008a08 <_free_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d041      	beq.n	8008a94 <_free_r+0x8c>
 8008a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a14:	1f0c      	subs	r4, r1, #4
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfb8      	it	lt
 8008a1a:	18e4      	addlt	r4, r4, r3
 8008a1c:	f000 f8e0 	bl	8008be0 <__malloc_lock>
 8008a20:	4a1d      	ldr	r2, [pc, #116]	@ (8008a98 <_free_r+0x90>)
 8008a22:	6813      	ldr	r3, [r2, #0]
 8008a24:	b933      	cbnz	r3, 8008a34 <_free_r+0x2c>
 8008a26:	6063      	str	r3, [r4, #4]
 8008a28:	6014      	str	r4, [r2, #0]
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a30:	f000 b8dc 	b.w	8008bec <__malloc_unlock>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d908      	bls.n	8008a4a <_free_r+0x42>
 8008a38:	6820      	ldr	r0, [r4, #0]
 8008a3a:	1821      	adds	r1, r4, r0
 8008a3c:	428b      	cmp	r3, r1
 8008a3e:	bf01      	itttt	eq
 8008a40:	6819      	ldreq	r1, [r3, #0]
 8008a42:	685b      	ldreq	r3, [r3, #4]
 8008a44:	1809      	addeq	r1, r1, r0
 8008a46:	6021      	streq	r1, [r4, #0]
 8008a48:	e7ed      	b.n	8008a26 <_free_r+0x1e>
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b10b      	cbz	r3, 8008a54 <_free_r+0x4c>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d9fa      	bls.n	8008a4a <_free_r+0x42>
 8008a54:	6811      	ldr	r1, [r2, #0]
 8008a56:	1850      	adds	r0, r2, r1
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d10b      	bne.n	8008a74 <_free_r+0x6c>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	4401      	add	r1, r0
 8008a60:	1850      	adds	r0, r2, r1
 8008a62:	4283      	cmp	r3, r0
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	d1e0      	bne.n	8008a2a <_free_r+0x22>
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	6053      	str	r3, [r2, #4]
 8008a6e:	4408      	add	r0, r1
 8008a70:	6010      	str	r0, [r2, #0]
 8008a72:	e7da      	b.n	8008a2a <_free_r+0x22>
 8008a74:	d902      	bls.n	8008a7c <_free_r+0x74>
 8008a76:	230c      	movs	r3, #12
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	e7d6      	b.n	8008a2a <_free_r+0x22>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	1821      	adds	r1, r4, r0
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf04      	itt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	bf04      	itt	eq
 8008a8c:	1809      	addeq	r1, r1, r0
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	6054      	str	r4, [r2, #4]
 8008a92:	e7ca      	b.n	8008a2a <_free_r+0x22>
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	20001cb4 	.word	0x20001cb4

08008a9c <sbrk_aligned>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8008adc <sbrk_aligned+0x40>)
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	6831      	ldr	r1, [r6, #0]
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	b911      	cbnz	r1, 8008aae <sbrk_aligned+0x12>
 8008aa8:	f000 fba4 	bl	80091f4 <_sbrk_r>
 8008aac:	6030      	str	r0, [r6, #0]
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f000 fb9f 	bl	80091f4 <_sbrk_r>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	d103      	bne.n	8008ac2 <sbrk_aligned+0x26>
 8008aba:	f04f 34ff 	mov.w	r4, #4294967295
 8008abe:	4620      	mov	r0, r4
 8008ac0:	bd70      	pop	{r4, r5, r6, pc}
 8008ac2:	1cc4      	adds	r4, r0, #3
 8008ac4:	f024 0403 	bic.w	r4, r4, #3
 8008ac8:	42a0      	cmp	r0, r4
 8008aca:	d0f8      	beq.n	8008abe <sbrk_aligned+0x22>
 8008acc:	1a21      	subs	r1, r4, r0
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 fb90 	bl	80091f4 <_sbrk_r>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d1f2      	bne.n	8008abe <sbrk_aligned+0x22>
 8008ad8:	e7ef      	b.n	8008aba <sbrk_aligned+0x1e>
 8008ada:	bf00      	nop
 8008adc:	20001cb0 	.word	0x20001cb0

08008ae0 <_malloc_r>:
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	1ccd      	adds	r5, r1, #3
 8008ae6:	f025 0503 	bic.w	r5, r5, #3
 8008aea:	3508      	adds	r5, #8
 8008aec:	2d0c      	cmp	r5, #12
 8008aee:	bf38      	it	cc
 8008af0:	250c      	movcc	r5, #12
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	4606      	mov	r6, r0
 8008af6:	db01      	blt.n	8008afc <_malloc_r+0x1c>
 8008af8:	42a9      	cmp	r1, r5
 8008afa:	d904      	bls.n	8008b06 <_malloc_r+0x26>
 8008afc:	230c      	movs	r3, #12
 8008afe:	6033      	str	r3, [r6, #0]
 8008b00:	2000      	movs	r0, #0
 8008b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bdc <_malloc_r+0xfc>
 8008b0a:	f000 f869 	bl	8008be0 <__malloc_lock>
 8008b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b12:	461c      	mov	r4, r3
 8008b14:	bb44      	cbnz	r4, 8008b68 <_malloc_r+0x88>
 8008b16:	4629      	mov	r1, r5
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff ffbf 	bl	8008a9c <sbrk_aligned>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	4604      	mov	r4, r0
 8008b22:	d158      	bne.n	8008bd6 <_malloc_r+0xf6>
 8008b24:	f8d8 4000 	ldr.w	r4, [r8]
 8008b28:	4627      	mov	r7, r4
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	d143      	bne.n	8008bb6 <_malloc_r+0xd6>
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d04b      	beq.n	8008bca <_malloc_r+0xea>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	4639      	mov	r1, r7
 8008b36:	4630      	mov	r0, r6
 8008b38:	eb04 0903 	add.w	r9, r4, r3
 8008b3c:	f000 fb5a 	bl	80091f4 <_sbrk_r>
 8008b40:	4581      	cmp	r9, r0
 8008b42:	d142      	bne.n	8008bca <_malloc_r+0xea>
 8008b44:	6821      	ldr	r1, [r4, #0]
 8008b46:	1a6d      	subs	r5, r5, r1
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ffa6 	bl	8008a9c <sbrk_aligned>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d03a      	beq.n	8008bca <_malloc_r+0xea>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	442b      	add	r3, r5
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	bb62      	cbnz	r2, 8008bbc <_malloc_r+0xdc>
 8008b62:	f8c8 7000 	str.w	r7, [r8]
 8008b66:	e00f      	b.n	8008b88 <_malloc_r+0xa8>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	1b52      	subs	r2, r2, r5
 8008b6c:	d420      	bmi.n	8008bb0 <_malloc_r+0xd0>
 8008b6e:	2a0b      	cmp	r2, #11
 8008b70:	d917      	bls.n	8008ba2 <_malloc_r+0xc2>
 8008b72:	1961      	adds	r1, r4, r5
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	6025      	str	r5, [r4, #0]
 8008b78:	bf18      	it	ne
 8008b7a:	6059      	strne	r1, [r3, #4]
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	bf08      	it	eq
 8008b80:	f8c8 1000 	streq.w	r1, [r8]
 8008b84:	5162      	str	r2, [r4, r5]
 8008b86:	604b      	str	r3, [r1, #4]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f82f 	bl	8008bec <__malloc_unlock>
 8008b8e:	f104 000b 	add.w	r0, r4, #11
 8008b92:	1d23      	adds	r3, r4, #4
 8008b94:	f020 0007 	bic.w	r0, r0, #7
 8008b98:	1ac2      	subs	r2, r0, r3
 8008b9a:	bf1c      	itt	ne
 8008b9c:	1a1b      	subne	r3, r3, r0
 8008b9e:	50a3      	strne	r3, [r4, r2]
 8008ba0:	e7af      	b.n	8008b02 <_malloc_r+0x22>
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	bf0c      	ite	eq
 8008ba8:	f8c8 2000 	streq.w	r2, [r8]
 8008bac:	605a      	strne	r2, [r3, #4]
 8008bae:	e7eb      	b.n	8008b88 <_malloc_r+0xa8>
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	6864      	ldr	r4, [r4, #4]
 8008bb4:	e7ae      	b.n	8008b14 <_malloc_r+0x34>
 8008bb6:	463c      	mov	r4, r7
 8008bb8:	687f      	ldr	r7, [r7, #4]
 8008bba:	e7b6      	b.n	8008b2a <_malloc_r+0x4a>
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d1fb      	bne.n	8008bbc <_malloc_r+0xdc>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6053      	str	r3, [r2, #4]
 8008bc8:	e7de      	b.n	8008b88 <_malloc_r+0xa8>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f80c 	bl	8008bec <__malloc_unlock>
 8008bd4:	e794      	b.n	8008b00 <_malloc_r+0x20>
 8008bd6:	6005      	str	r5, [r0, #0]
 8008bd8:	e7d6      	b.n	8008b88 <_malloc_r+0xa8>
 8008bda:	bf00      	nop
 8008bdc:	20001cb4 	.word	0x20001cb4

08008be0 <__malloc_lock>:
 8008be0:	4801      	ldr	r0, [pc, #4]	@ (8008be8 <__malloc_lock+0x8>)
 8008be2:	f7ff bf0f 	b.w	8008a04 <__retarget_lock_acquire_recursive>
 8008be6:	bf00      	nop
 8008be8:	20001cac 	.word	0x20001cac

08008bec <__malloc_unlock>:
 8008bec:	4801      	ldr	r0, [pc, #4]	@ (8008bf4 <__malloc_unlock+0x8>)
 8008bee:	f7ff bf0a 	b.w	8008a06 <__retarget_lock_release_recursive>
 8008bf2:	bf00      	nop
 8008bf4:	20001cac 	.word	0x20001cac

08008bf8 <__ssputs_r>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	688e      	ldr	r6, [r1, #8]
 8008bfe:	461f      	mov	r7, r3
 8008c00:	42be      	cmp	r6, r7
 8008c02:	680b      	ldr	r3, [r1, #0]
 8008c04:	4682      	mov	sl, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	4690      	mov	r8, r2
 8008c0a:	d82d      	bhi.n	8008c68 <__ssputs_r+0x70>
 8008c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c14:	d026      	beq.n	8008c64 <__ssputs_r+0x6c>
 8008c16:	6965      	ldr	r5, [r4, #20]
 8008c18:	6909      	ldr	r1, [r1, #16]
 8008c1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c1e:	eba3 0901 	sub.w	r9, r3, r1
 8008c22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c26:	1c7b      	adds	r3, r7, #1
 8008c28:	444b      	add	r3, r9
 8008c2a:	106d      	asrs	r5, r5, #1
 8008c2c:	429d      	cmp	r5, r3
 8008c2e:	bf38      	it	cc
 8008c30:	461d      	movcc	r5, r3
 8008c32:	0553      	lsls	r3, r2, #21
 8008c34:	d527      	bpl.n	8008c86 <__ssputs_r+0x8e>
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7ff ff52 	bl	8008ae0 <_malloc_r>
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	b360      	cbz	r0, 8008c9a <__ssputs_r+0xa2>
 8008c40:	6921      	ldr	r1, [r4, #16]
 8008c42:	464a      	mov	r2, r9
 8008c44:	f000 fae6 	bl	8009214 <memcpy>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	6126      	str	r6, [r4, #16]
 8008c56:	6165      	str	r5, [r4, #20]
 8008c58:	444e      	add	r6, r9
 8008c5a:	eba5 0509 	sub.w	r5, r5, r9
 8008c5e:	6026      	str	r6, [r4, #0]
 8008c60:	60a5      	str	r5, [r4, #8]
 8008c62:	463e      	mov	r6, r7
 8008c64:	42be      	cmp	r6, r7
 8008c66:	d900      	bls.n	8008c6a <__ssputs_r+0x72>
 8008c68:	463e      	mov	r6, r7
 8008c6a:	6820      	ldr	r0, [r4, #0]
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	4641      	mov	r1, r8
 8008c70:	f000 faa6 	bl	80091c0 <memmove>
 8008c74:	68a3      	ldr	r3, [r4, #8]
 8008c76:	1b9b      	subs	r3, r3, r6
 8008c78:	60a3      	str	r3, [r4, #8]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	4433      	add	r3, r6
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	2000      	movs	r0, #0
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	462a      	mov	r2, r5
 8008c88:	f000 fad2 	bl	8009230 <_realloc_r>
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d1e0      	bne.n	8008c54 <__ssputs_r+0x5c>
 8008c92:	6921      	ldr	r1, [r4, #16]
 8008c94:	4650      	mov	r0, sl
 8008c96:	f7ff feb7 	bl	8008a08 <_free_r>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	f8ca 3000 	str.w	r3, [sl]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e7e9      	b.n	8008c82 <__ssputs_r+0x8a>
	...

08008cb0 <_svfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	898b      	ldrh	r3, [r1, #12]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	b09d      	sub	sp, #116	@ 0x74
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	d510      	bpl.n	8008ce6 <_svfiprintf_r+0x36>
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	b973      	cbnz	r3, 8008ce6 <_svfiprintf_r+0x36>
 8008cc8:	2140      	movs	r1, #64	@ 0x40
 8008cca:	f7ff ff09 	bl	8008ae0 <_malloc_r>
 8008cce:	6028      	str	r0, [r5, #0]
 8008cd0:	6128      	str	r0, [r5, #16]
 8008cd2:	b930      	cbnz	r0, 8008ce2 <_svfiprintf_r+0x32>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	b01d      	add	sp, #116	@ 0x74
 8008cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce2:	2340      	movs	r3, #64	@ 0x40
 8008ce4:	616b      	str	r3, [r5, #20]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cea:	2320      	movs	r3, #32
 8008cec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf4:	2330      	movs	r3, #48	@ 0x30
 8008cf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e94 <_svfiprintf_r+0x1e4>
 8008cfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cfe:	f04f 0901 	mov.w	r9, #1
 8008d02:	4623      	mov	r3, r4
 8008d04:	469a      	mov	sl, r3
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	b10a      	cbz	r2, 8008d10 <_svfiprintf_r+0x60>
 8008d0c:	2a25      	cmp	r2, #37	@ 0x25
 8008d0e:	d1f9      	bne.n	8008d04 <_svfiprintf_r+0x54>
 8008d10:	ebba 0b04 	subs.w	fp, sl, r4
 8008d14:	d00b      	beq.n	8008d2e <_svfiprintf_r+0x7e>
 8008d16:	465b      	mov	r3, fp
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff ff6b 	bl	8008bf8 <__ssputs_r>
 8008d22:	3001      	adds	r0, #1
 8008d24:	f000 80a7 	beq.w	8008e76 <_svfiprintf_r+0x1c6>
 8008d28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2a:	445a      	add	r2, fp
 8008d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 809f 	beq.w	8008e76 <_svfiprintf_r+0x1c6>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d42:	f10a 0a01 	add.w	sl, sl, #1
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d50:	4654      	mov	r4, sl
 8008d52:	2205      	movs	r2, #5
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	484e      	ldr	r0, [pc, #312]	@ (8008e94 <_svfiprintf_r+0x1e4>)
 8008d5a:	f7f7 fa11 	bl	8000180 <memchr>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	b9d8      	cbnz	r0, 8008d9a <_svfiprintf_r+0xea>
 8008d62:	06d0      	lsls	r0, r2, #27
 8008d64:	bf44      	itt	mi
 8008d66:	2320      	movmi	r3, #32
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6c:	0711      	lsls	r1, r2, #28
 8008d6e:	bf44      	itt	mi
 8008d70:	232b      	movmi	r3, #43	@ 0x2b
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d7c:	d015      	beq.n	8008daa <_svfiprintf_r+0xfa>
 8008d7e:	9a07      	ldr	r2, [sp, #28]
 8008d80:	4654      	mov	r4, sl
 8008d82:	2000      	movs	r0, #0
 8008d84:	f04f 0c0a 	mov.w	ip, #10
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8e:	3b30      	subs	r3, #48	@ 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d94b      	bls.n	8008e2c <_svfiprintf_r+0x17c>
 8008d94:	b1b0      	cbz	r0, 8008dc4 <_svfiprintf_r+0x114>
 8008d96:	9207      	str	r2, [sp, #28]
 8008d98:	e014      	b.n	8008dc4 <_svfiprintf_r+0x114>
 8008d9a:	eba0 0308 	sub.w	r3, r0, r8
 8008d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	46a2      	mov	sl, r4
 8008da8:	e7d2      	b.n	8008d50 <_svfiprintf_r+0xa0>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbb      	ittet	lt
 8008db6:	425b      	neglt	r3, r3
 8008db8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbc:	9307      	strge	r3, [sp, #28]
 8008dbe:	9307      	strlt	r3, [sp, #28]
 8008dc0:	bfb8      	it	lt
 8008dc2:	9204      	strlt	r2, [sp, #16]
 8008dc4:	7823      	ldrb	r3, [r4, #0]
 8008dc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dc8:	d10a      	bne.n	8008de0 <_svfiprintf_r+0x130>
 8008dca:	7863      	ldrb	r3, [r4, #1]
 8008dcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dce:	d132      	bne.n	8008e36 <_svfiprintf_r+0x186>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	1d1a      	adds	r2, r3, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	9203      	str	r2, [sp, #12]
 8008dd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ddc:	3402      	adds	r4, #2
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ea4 <_svfiprintf_r+0x1f4>
 8008de4:	7821      	ldrb	r1, [r4, #0]
 8008de6:	2203      	movs	r2, #3
 8008de8:	4650      	mov	r0, sl
 8008dea:	f7f7 f9c9 	bl	8000180 <memchr>
 8008dee:	b138      	cbz	r0, 8008e00 <_svfiprintf_r+0x150>
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	eba0 000a 	sub.w	r0, r0, sl
 8008df6:	2240      	movs	r2, #64	@ 0x40
 8008df8:	4082      	lsls	r2, r0
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	3401      	adds	r4, #1
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	4824      	ldr	r0, [pc, #144]	@ (8008e98 <_svfiprintf_r+0x1e8>)
 8008e06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	f7f7 f9b8 	bl	8000180 <memchr>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d036      	beq.n	8008e82 <_svfiprintf_r+0x1d2>
 8008e14:	4b21      	ldr	r3, [pc, #132]	@ (8008e9c <_svfiprintf_r+0x1ec>)
 8008e16:	bb1b      	cbnz	r3, 8008e60 <_svfiprintf_r+0x1b0>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3307      	adds	r3, #7
 8008e1c:	f023 0307 	bic.w	r3, r3, #7
 8008e20:	3308      	adds	r3, #8
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e26:	4433      	add	r3, r6
 8008e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2a:	e76a      	b.n	8008d02 <_svfiprintf_r+0x52>
 8008e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e30:	460c      	mov	r4, r1
 8008e32:	2001      	movs	r0, #1
 8008e34:	e7a8      	b.n	8008d88 <_svfiprintf_r+0xd8>
 8008e36:	2300      	movs	r3, #0
 8008e38:	3401      	adds	r4, #1
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4620      	mov	r0, r4
 8008e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e48:	3a30      	subs	r2, #48	@ 0x30
 8008e4a:	2a09      	cmp	r2, #9
 8008e4c:	d903      	bls.n	8008e56 <_svfiprintf_r+0x1a6>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0c6      	beq.n	8008de0 <_svfiprintf_r+0x130>
 8008e52:	9105      	str	r1, [sp, #20]
 8008e54:	e7c4      	b.n	8008de0 <_svfiprintf_r+0x130>
 8008e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e7f0      	b.n	8008e42 <_svfiprintf_r+0x192>
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	f3af 8000 	nop.w
 8008e70:	1c42      	adds	r2, r0, #1
 8008e72:	4606      	mov	r6, r0
 8008e74:	d1d6      	bne.n	8008e24 <_svfiprintf_r+0x174>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	065b      	lsls	r3, r3, #25
 8008e7a:	f53f af2d 	bmi.w	8008cd8 <_svfiprintf_r+0x28>
 8008e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e80:	e72c      	b.n	8008cdc <_svfiprintf_r+0x2c>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f000 f879 	bl	8008f84 <_printf_i>
 8008e92:	e7ed      	b.n	8008e70 <_svfiprintf_r+0x1c0>
 8008e94:	080093bc 	.word	0x080093bc
 8008e98:	080093c6 	.word	0x080093c6
 8008e9c:	00000000 	.word	0x00000000
 8008ea0:	08008bf9 	.word	0x08008bf9
 8008ea4:	080093c2 	.word	0x080093c2

08008ea8 <_printf_common>:
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	4616      	mov	r6, r2
 8008eae:	4698      	mov	r8, r3
 8008eb0:	688a      	ldr	r2, [r1, #8]
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	bfb8      	it	lt
 8008ebc:	4613      	movlt	r3, r2
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	b10a      	cbz	r2, 8008ece <_printf_common+0x26>
 8008eca:	3301      	adds	r3, #1
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	0699      	lsls	r1, r3, #26
 8008ed2:	bf42      	ittt	mi
 8008ed4:	6833      	ldrmi	r3, [r6, #0]
 8008ed6:	3302      	addmi	r3, #2
 8008ed8:	6033      	strmi	r3, [r6, #0]
 8008eda:	6825      	ldr	r5, [r4, #0]
 8008edc:	f015 0506 	ands.w	r5, r5, #6
 8008ee0:	d106      	bne.n	8008ef0 <_printf_common+0x48>
 8008ee2:	f104 0a19 	add.w	sl, r4, #25
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	6832      	ldr	r2, [r6, #0]
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dc26      	bgt.n	8008f3e <_printf_common+0x96>
 8008ef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	3b00      	subs	r3, #0
 8008ef8:	bf18      	it	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	0692      	lsls	r2, r2, #26
 8008efe:	d42b      	bmi.n	8008f58 <_printf_common+0xb0>
 8008f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f04:	4641      	mov	r1, r8
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c8      	blx	r9
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d01e      	beq.n	8008f4c <_printf_common+0xa4>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	6922      	ldr	r2, [r4, #16]
 8008f12:	f003 0306 	and.w	r3, r3, #6
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	bf02      	ittt	eq
 8008f1a:	68e5      	ldreq	r5, [r4, #12]
 8008f1c:	6833      	ldreq	r3, [r6, #0]
 8008f1e:	1aed      	subeq	r5, r5, r3
 8008f20:	68a3      	ldr	r3, [r4, #8]
 8008f22:	bf0c      	ite	eq
 8008f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f28:	2500      	movne	r5, #0
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	bfc4      	itt	gt
 8008f2e:	1a9b      	subgt	r3, r3, r2
 8008f30:	18ed      	addgt	r5, r5, r3
 8008f32:	2600      	movs	r6, #0
 8008f34:	341a      	adds	r4, #26
 8008f36:	42b5      	cmp	r5, r6
 8008f38:	d11a      	bne.n	8008f70 <_printf_common+0xc8>
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	e008      	b.n	8008f50 <_printf_common+0xa8>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	4641      	mov	r1, r8
 8008f44:	4638      	mov	r0, r7
 8008f46:	47c8      	blx	r9
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d103      	bne.n	8008f54 <_printf_common+0xac>
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f54:	3501      	adds	r5, #1
 8008f56:	e7c6      	b.n	8008ee6 <_printf_common+0x3e>
 8008f58:	18e1      	adds	r1, r4, r3
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	2030      	movs	r0, #48	@ 0x30
 8008f5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f62:	4422      	add	r2, r4
 8008f64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	e7c7      	b.n	8008f00 <_printf_common+0x58>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4622      	mov	r2, r4
 8008f74:	4641      	mov	r1, r8
 8008f76:	4638      	mov	r0, r7
 8008f78:	47c8      	blx	r9
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d0e6      	beq.n	8008f4c <_printf_common+0xa4>
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7d9      	b.n	8008f36 <_printf_common+0x8e>
	...

08008f84 <_printf_i>:
 8008f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	7e0f      	ldrb	r7, [r1, #24]
 8008f8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f8c:	2f78      	cmp	r7, #120	@ 0x78
 8008f8e:	4691      	mov	r9, r2
 8008f90:	4680      	mov	r8, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	469a      	mov	sl, r3
 8008f96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f9a:	d807      	bhi.n	8008fac <_printf_i+0x28>
 8008f9c:	2f62      	cmp	r7, #98	@ 0x62
 8008f9e:	d80a      	bhi.n	8008fb6 <_printf_i+0x32>
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	f000 80d1 	beq.w	8009148 <_printf_i+0x1c4>
 8008fa6:	2f58      	cmp	r7, #88	@ 0x58
 8008fa8:	f000 80b8 	beq.w	800911c <_printf_i+0x198>
 8008fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fb4:	e03a      	b.n	800902c <_printf_i+0xa8>
 8008fb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fba:	2b15      	cmp	r3, #21
 8008fbc:	d8f6      	bhi.n	8008fac <_printf_i+0x28>
 8008fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8008fc4 <_printf_i+0x40>)
 8008fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fc4:	0800901d 	.word	0x0800901d
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08008fad 	.word	0x08008fad
 8008fd0:	08008fad 	.word	0x08008fad
 8008fd4:	08008fad 	.word	0x08008fad
 8008fd8:	08008fad 	.word	0x08008fad
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08008fad 	.word	0x08008fad
 8008fe4:	08008fad 	.word	0x08008fad
 8008fe8:	08008fad 	.word	0x08008fad
 8008fec:	08008fad 	.word	0x08008fad
 8008ff0:	0800912f 	.word	0x0800912f
 8008ff4:	0800905b 	.word	0x0800905b
 8008ff8:	080090e9 	.word	0x080090e9
 8008ffc:	08008fad 	.word	0x08008fad
 8009000:	08008fad 	.word	0x08008fad
 8009004:	08009151 	.word	0x08009151
 8009008:	08008fad 	.word	0x08008fad
 800900c:	0800905b 	.word	0x0800905b
 8009010:	08008fad 	.word	0x08008fad
 8009014:	08008fad 	.word	0x08008fad
 8009018:	080090f1 	.word	0x080090f1
 800901c:	6833      	ldr	r3, [r6, #0]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6032      	str	r2, [r6, #0]
 8009024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800902c:	2301      	movs	r3, #1
 800902e:	e09c      	b.n	800916a <_printf_i+0x1e6>
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	6820      	ldr	r0, [r4, #0]
 8009034:	1d19      	adds	r1, r3, #4
 8009036:	6031      	str	r1, [r6, #0]
 8009038:	0606      	lsls	r6, r0, #24
 800903a:	d501      	bpl.n	8009040 <_printf_i+0xbc>
 800903c:	681d      	ldr	r5, [r3, #0]
 800903e:	e003      	b.n	8009048 <_printf_i+0xc4>
 8009040:	0645      	lsls	r5, r0, #25
 8009042:	d5fb      	bpl.n	800903c <_printf_i+0xb8>
 8009044:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009048:	2d00      	cmp	r5, #0
 800904a:	da03      	bge.n	8009054 <_printf_i+0xd0>
 800904c:	232d      	movs	r3, #45	@ 0x2d
 800904e:	426d      	negs	r5, r5
 8009050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009054:	4858      	ldr	r0, [pc, #352]	@ (80091b8 <_printf_i+0x234>)
 8009056:	230a      	movs	r3, #10
 8009058:	e011      	b.n	800907e <_printf_i+0xfa>
 800905a:	6821      	ldr	r1, [r4, #0]
 800905c:	6833      	ldr	r3, [r6, #0]
 800905e:	0608      	lsls	r0, r1, #24
 8009060:	f853 5b04 	ldr.w	r5, [r3], #4
 8009064:	d402      	bmi.n	800906c <_printf_i+0xe8>
 8009066:	0649      	lsls	r1, r1, #25
 8009068:	bf48      	it	mi
 800906a:	b2ad      	uxthmi	r5, r5
 800906c:	2f6f      	cmp	r7, #111	@ 0x6f
 800906e:	4852      	ldr	r0, [pc, #328]	@ (80091b8 <_printf_i+0x234>)
 8009070:	6033      	str	r3, [r6, #0]
 8009072:	bf14      	ite	ne
 8009074:	230a      	movne	r3, #10
 8009076:	2308      	moveq	r3, #8
 8009078:	2100      	movs	r1, #0
 800907a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800907e:	6866      	ldr	r6, [r4, #4]
 8009080:	60a6      	str	r6, [r4, #8]
 8009082:	2e00      	cmp	r6, #0
 8009084:	db05      	blt.n	8009092 <_printf_i+0x10e>
 8009086:	6821      	ldr	r1, [r4, #0]
 8009088:	432e      	orrs	r6, r5
 800908a:	f021 0104 	bic.w	r1, r1, #4
 800908e:	6021      	str	r1, [r4, #0]
 8009090:	d04b      	beq.n	800912a <_printf_i+0x1a6>
 8009092:	4616      	mov	r6, r2
 8009094:	fbb5 f1f3 	udiv	r1, r5, r3
 8009098:	fb03 5711 	mls	r7, r3, r1, r5
 800909c:	5dc7      	ldrb	r7, [r0, r7]
 800909e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090a2:	462f      	mov	r7, r5
 80090a4:	42bb      	cmp	r3, r7
 80090a6:	460d      	mov	r5, r1
 80090a8:	d9f4      	bls.n	8009094 <_printf_i+0x110>
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d10b      	bne.n	80090c6 <_printf_i+0x142>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	07df      	lsls	r7, r3, #31
 80090b2:	d508      	bpl.n	80090c6 <_printf_i+0x142>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	6861      	ldr	r1, [r4, #4]
 80090b8:	4299      	cmp	r1, r3
 80090ba:	bfde      	ittt	le
 80090bc:	2330      	movle	r3, #48	@ 0x30
 80090be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090c6:	1b92      	subs	r2, r2, r6
 80090c8:	6122      	str	r2, [r4, #16]
 80090ca:	f8cd a000 	str.w	sl, [sp]
 80090ce:	464b      	mov	r3, r9
 80090d0:	aa03      	add	r2, sp, #12
 80090d2:	4621      	mov	r1, r4
 80090d4:	4640      	mov	r0, r8
 80090d6:	f7ff fee7 	bl	8008ea8 <_printf_common>
 80090da:	3001      	adds	r0, #1
 80090dc:	d14a      	bne.n	8009174 <_printf_i+0x1f0>
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	b004      	add	sp, #16
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	f043 0320 	orr.w	r3, r3, #32
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	4832      	ldr	r0, [pc, #200]	@ (80091bc <_printf_i+0x238>)
 80090f2:	2778      	movs	r7, #120	@ 0x78
 80090f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	6831      	ldr	r1, [r6, #0]
 80090fc:	061f      	lsls	r7, r3, #24
 80090fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8009102:	d402      	bmi.n	800910a <_printf_i+0x186>
 8009104:	065f      	lsls	r7, r3, #25
 8009106:	bf48      	it	mi
 8009108:	b2ad      	uxthmi	r5, r5
 800910a:	6031      	str	r1, [r6, #0]
 800910c:	07d9      	lsls	r1, r3, #31
 800910e:	bf44      	itt	mi
 8009110:	f043 0320 	orrmi.w	r3, r3, #32
 8009114:	6023      	strmi	r3, [r4, #0]
 8009116:	b11d      	cbz	r5, 8009120 <_printf_i+0x19c>
 8009118:	2310      	movs	r3, #16
 800911a:	e7ad      	b.n	8009078 <_printf_i+0xf4>
 800911c:	4826      	ldr	r0, [pc, #152]	@ (80091b8 <_printf_i+0x234>)
 800911e:	e7e9      	b.n	80090f4 <_printf_i+0x170>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	f023 0320 	bic.w	r3, r3, #32
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	e7f6      	b.n	8009118 <_printf_i+0x194>
 800912a:	4616      	mov	r6, r2
 800912c:	e7bd      	b.n	80090aa <_printf_i+0x126>
 800912e:	6833      	ldr	r3, [r6, #0]
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	6961      	ldr	r1, [r4, #20]
 8009134:	1d18      	adds	r0, r3, #4
 8009136:	6030      	str	r0, [r6, #0]
 8009138:	062e      	lsls	r6, r5, #24
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	d501      	bpl.n	8009142 <_printf_i+0x1be>
 800913e:	6019      	str	r1, [r3, #0]
 8009140:	e002      	b.n	8009148 <_printf_i+0x1c4>
 8009142:	0668      	lsls	r0, r5, #25
 8009144:	d5fb      	bpl.n	800913e <_printf_i+0x1ba>
 8009146:	8019      	strh	r1, [r3, #0]
 8009148:	2300      	movs	r3, #0
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	4616      	mov	r6, r2
 800914e:	e7bc      	b.n	80090ca <_printf_i+0x146>
 8009150:	6833      	ldr	r3, [r6, #0]
 8009152:	1d1a      	adds	r2, r3, #4
 8009154:	6032      	str	r2, [r6, #0]
 8009156:	681e      	ldr	r6, [r3, #0]
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	2100      	movs	r1, #0
 800915c:	4630      	mov	r0, r6
 800915e:	f7f7 f80f 	bl	8000180 <memchr>
 8009162:	b108      	cbz	r0, 8009168 <_printf_i+0x1e4>
 8009164:	1b80      	subs	r0, r0, r6
 8009166:	6060      	str	r0, [r4, #4]
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2300      	movs	r3, #0
 800916e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009172:	e7aa      	b.n	80090ca <_printf_i+0x146>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	4632      	mov	r2, r6
 8009178:	4649      	mov	r1, r9
 800917a:	4640      	mov	r0, r8
 800917c:	47d0      	blx	sl
 800917e:	3001      	adds	r0, #1
 8009180:	d0ad      	beq.n	80090de <_printf_i+0x15a>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	079b      	lsls	r3, r3, #30
 8009186:	d413      	bmi.n	80091b0 <_printf_i+0x22c>
 8009188:	68e0      	ldr	r0, [r4, #12]
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	4298      	cmp	r0, r3
 800918e:	bfb8      	it	lt
 8009190:	4618      	movlt	r0, r3
 8009192:	e7a6      	b.n	80090e2 <_printf_i+0x15e>
 8009194:	2301      	movs	r3, #1
 8009196:	4632      	mov	r2, r6
 8009198:	4649      	mov	r1, r9
 800919a:	4640      	mov	r0, r8
 800919c:	47d0      	blx	sl
 800919e:	3001      	adds	r0, #1
 80091a0:	d09d      	beq.n	80090de <_printf_i+0x15a>
 80091a2:	3501      	adds	r5, #1
 80091a4:	68e3      	ldr	r3, [r4, #12]
 80091a6:	9903      	ldr	r1, [sp, #12]
 80091a8:	1a5b      	subs	r3, r3, r1
 80091aa:	42ab      	cmp	r3, r5
 80091ac:	dcf2      	bgt.n	8009194 <_printf_i+0x210>
 80091ae:	e7eb      	b.n	8009188 <_printf_i+0x204>
 80091b0:	2500      	movs	r5, #0
 80091b2:	f104 0619 	add.w	r6, r4, #25
 80091b6:	e7f5      	b.n	80091a4 <_printf_i+0x220>
 80091b8:	080093cd 	.word	0x080093cd
 80091bc:	080093de 	.word	0x080093de

080091c0 <memmove>:
 80091c0:	4288      	cmp	r0, r1
 80091c2:	b510      	push	{r4, lr}
 80091c4:	eb01 0402 	add.w	r4, r1, r2
 80091c8:	d902      	bls.n	80091d0 <memmove+0x10>
 80091ca:	4284      	cmp	r4, r0
 80091cc:	4623      	mov	r3, r4
 80091ce:	d807      	bhi.n	80091e0 <memmove+0x20>
 80091d0:	1e43      	subs	r3, r0, #1
 80091d2:	42a1      	cmp	r1, r4
 80091d4:	d008      	beq.n	80091e8 <memmove+0x28>
 80091d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091de:	e7f8      	b.n	80091d2 <memmove+0x12>
 80091e0:	4402      	add	r2, r0
 80091e2:	4601      	mov	r1, r0
 80091e4:	428a      	cmp	r2, r1
 80091e6:	d100      	bne.n	80091ea <memmove+0x2a>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091f2:	e7f7      	b.n	80091e4 <memmove+0x24>

080091f4 <_sbrk_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	@ (8009210 <_sbrk_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f7 f97a 	bl	80004f8 <_sbrk>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_sbrk_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_sbrk_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20001ca8 	.word	0x20001ca8

08009214 <memcpy>:
 8009214:	440a      	add	r2, r1
 8009216:	4291      	cmp	r1, r2
 8009218:	f100 33ff 	add.w	r3, r0, #4294967295
 800921c:	d100      	bne.n	8009220 <memcpy+0xc>
 800921e:	4770      	bx	lr
 8009220:	b510      	push	{r4, lr}
 8009222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800922a:	4291      	cmp	r1, r2
 800922c:	d1f9      	bne.n	8009222 <memcpy+0xe>
 800922e:	bd10      	pop	{r4, pc}

08009230 <_realloc_r>:
 8009230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009234:	4607      	mov	r7, r0
 8009236:	4614      	mov	r4, r2
 8009238:	460d      	mov	r5, r1
 800923a:	b921      	cbnz	r1, 8009246 <_realloc_r+0x16>
 800923c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	4611      	mov	r1, r2
 8009242:	f7ff bc4d 	b.w	8008ae0 <_malloc_r>
 8009246:	b92a      	cbnz	r2, 8009254 <_realloc_r+0x24>
 8009248:	f7ff fbde 	bl	8008a08 <_free_r>
 800924c:	4625      	mov	r5, r4
 800924e:	4628      	mov	r0, r5
 8009250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009254:	f000 f81a 	bl	800928c <_malloc_usable_size_r>
 8009258:	4284      	cmp	r4, r0
 800925a:	4606      	mov	r6, r0
 800925c:	d802      	bhi.n	8009264 <_realloc_r+0x34>
 800925e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009262:	d8f4      	bhi.n	800924e <_realloc_r+0x1e>
 8009264:	4621      	mov	r1, r4
 8009266:	4638      	mov	r0, r7
 8009268:	f7ff fc3a 	bl	8008ae0 <_malloc_r>
 800926c:	4680      	mov	r8, r0
 800926e:	b908      	cbnz	r0, 8009274 <_realloc_r+0x44>
 8009270:	4645      	mov	r5, r8
 8009272:	e7ec      	b.n	800924e <_realloc_r+0x1e>
 8009274:	42b4      	cmp	r4, r6
 8009276:	4622      	mov	r2, r4
 8009278:	4629      	mov	r1, r5
 800927a:	bf28      	it	cs
 800927c:	4632      	movcs	r2, r6
 800927e:	f7ff ffc9 	bl	8009214 <memcpy>
 8009282:	4629      	mov	r1, r5
 8009284:	4638      	mov	r0, r7
 8009286:	f7ff fbbf 	bl	8008a08 <_free_r>
 800928a:	e7f1      	b.n	8009270 <_realloc_r+0x40>

0800928c <_malloc_usable_size_r>:
 800928c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009290:	1f18      	subs	r0, r3, #4
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfbc      	itt	lt
 8009296:	580b      	ldrlt	r3, [r1, r0]
 8009298:	18c0      	addlt	r0, r0, r3
 800929a:	4770      	bx	lr

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
