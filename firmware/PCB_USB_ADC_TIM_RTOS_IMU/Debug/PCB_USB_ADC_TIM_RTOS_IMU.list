
PCB_USB_ADC_TIM_RTOS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019114  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031e0  08019258  08019258  0001a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c438  0801c438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c440  0801c440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c444  0801c444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000178  20000008  0801c448  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ad88  20000180  0801c5c0  0001e180  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000af08  0801c5c0  0001ef08  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001e180  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003da39  00000000  00000000  0001e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000707e  00000000  00000000  0005bbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003868  00000000  00000000  00062c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002ba9  00000000  00000000  000664d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002c4f7  00000000  00000000  00069079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a260  00000000  00000000  00095570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010f645  00000000  00000000  000cf7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dee15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000100dc  00000000  00000000  001dee58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001eef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	0801923c 	.word	0x0801923c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	0801923c 	.word	0x0801923c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8000ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c54 <bmi2_sec_init+0xbc>)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bae:	6018      	str	r0, [r3, #0]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f001 fcb3 	bl	8002520 <null_ptr_check>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d140      	bne.n	8000c48 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7a5b      	ldrb	r3, [r3, #9]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d108      	bne.n	8000be8 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000bd6:	f107 010e 	add.w	r1, r7, #14
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f83a 	bl	8000c58 <bmi2_get_regs>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8000be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d12b      	bne.n	8000c48 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000bf0:	f107 010e 	add.w	r1, r7, #14
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f82d 	bl	8000c58 <bmi2_get_regs>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d11e      	bne.n	8000c48 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d114      	bne.n	8000c3e <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2210      	movs	r2, #16
 8000c18:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3328      	adds	r3, #40	@ 0x28
 8000c24:	f107 0208 	add.w	r2, r7, #8
 8000c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2c:	6018      	str	r0, [r3, #0]
 8000c2e:	3304      	adds	r3, #4
 8000c30:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f906 	bl	8000e44 <bmi2_soft_reset>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e004      	b.n	8000c48 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 8000c3e:	7bba      	ldrb	r2, [r7, #14]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 8000c44:	23fd      	movs	r3, #253	@ 0xfd
 8000c46:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08019258 	.word	0x08019258

08000c58 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b0a7      	sub	sp, #156	@ 0x9c
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	4613      	mov	r3, r2
 8000c68:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f001 fc55 	bl	8002520 <null_ptr_check>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8000c7c:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d153      	bne.n	8000d2c <bmi2_get_regs+0xd4>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d050      	beq.n	8000d2c <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7a5b      	ldrb	r3, [r3, #9]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c98:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7ad2      	ldrb	r2, [r2, #11]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	7bf8      	ldrb	r0, [r7, #15]
 8000cb2:	47a0      	blx	r4
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6852      	ldr	r2, [r2, #4]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000cd4:	4798      	blx	r3
 8000cd6:	e006      	b.n	8000ce6 <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6852      	ldr	r2, [r2, #4]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d119      	bne.n	8000d24 <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8000cf0:	e012      	b.n	8000d18 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8000cf2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	7ad2      	ldrb	r2, [r2, #11]
 8000cfa:	441a      	add	r2, r3
 8000cfc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	440b      	add	r3, r1
 8000d04:	3298      	adds	r2, #152	@ 0x98
 8000d06:	443a      	add	r2, r7
 8000d08:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8000d0c:	701a      	strb	r2, [r3, #0]
                index++;
 8000d0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000d12:	3301      	adds	r3, #1
 8000d14:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8000d18:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000d1c:	89bb      	ldrh	r3, [r7, #12]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e7      	bcc.n	8000cf2 <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8000d22:	e006      	b.n	8000d32 <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 8000d24:	23fe      	movs	r3, #254	@ 0xfe
 8000d26:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8000d2a:	e002      	b.n	8000d32 <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8000d2c:	23ff      	movs	r3, #255	@ 0xff
 8000d2e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8000d32:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	379c      	adds	r7, #156	@ 0x9c
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}

08000d3e <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b087      	sub	sp, #28
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 fbe5 	bl	8002520 <null_ptr_check>
 8000d56:	4603      	mov	r3, r0
 8000d58:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 8000d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d168      	bne.n	8000e34 <bmi2_set_regs+0xf6>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d065      	beq.n	8000e34 <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7a5b      	ldrb	r3, [r3, #9]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d76:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d129      	bne.n	8000dd6 <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	82bb      	strh	r3, [r7, #20]
 8000d86:	e021      	b.n	8000dcc <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8000d8c:	8abb      	ldrh	r3, [r7, #20]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	4413      	add	r3, r2
 8000d94:	b2d8      	uxtb	r0, r3
 8000d96:	8abb      	ldrh	r3, [r7, #20]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	18d1      	adds	r1, r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	47a0      	blx	r4
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6852      	ldr	r2, [r2, #4]
 8000db4:	4611      	mov	r1, r2
 8000db6:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000dba:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d11b      	bne.n	8000dfe <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8000dc6:	8abb      	ldrh	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	82bb      	strh	r3, [r7, #20]
 8000dcc:	8aba      	ldrh	r2, [r7, #20]
 8000dce:	89bb      	ldrh	r3, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3d9      	bcc.n	8000d88 <bmi2_set_regs+0x4a>
 8000dd4:	e014      	b.n	8000e00 <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8000dda:	89ba      	ldrh	r2, [r7, #12]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	7bf8      	ldrb	r0, [r7, #15]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	47a0      	blx	r4
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	4611      	mov	r1, r2
 8000df8:	2002      	movs	r0, #2
 8000dfa:	4798      	blx	r3
 8000dfc:	e000      	b.n	8000e00 <bmi2_set_regs+0xc2>
                    break;
 8000dfe:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e04:	d10e      	bne.n	8000e24 <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8000e1a:	e003      	b.n	8000e24 <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 8000e2e:	23fe      	movs	r3, #254	@ 0xfe
 8000e30:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8000e32:	e001      	b.n	8000e38 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8000e34:	23ff      	movs	r3, #255	@ 0xff
 8000e36:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 8000e4c:	23b6      	movs	r3, #182	@ 0xb6
 8000e4e:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f001 fb63 	bl	8002520 <null_ptr_check>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d139      	bne.n	8000eda <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 8000e66:	f107 010e 	add.w	r1, r7, #14
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	207e      	movs	r0, #126	@ 0x7e
 8000e70:	f7ff ff65 	bl	8000d3e <bmi2_set_regs>
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6852      	ldr	r2, [r2, #4]
 8000e80:	4611      	mov	r1, r2
 8000e82:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e86:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 8000e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10c      	bne.n	8000eb2 <bmi2_soft_reset+0x6e>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7a5b      	ldrb	r3, [r3, #9]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d108      	bne.n	8000eb2 <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8000ea0:	f107 010d 	add.w	r1, r7, #13
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fed5 	bl	8000c58 <bmi2_get_regs>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f85f 	bl	8000f7e <bmi2_write_config_file>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	6039      	str	r1, [r7, #0]
 8000ef0:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000ef6:	6838      	ldr	r0, [r7, #0]
 8000ef8:	f001 fb12 	bl	8002520 <null_ptr_check>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d134      	bne.n	8000f72 <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8000f08:	f107 010e 	add.w	r1, r7, #14
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	207c      	movs	r0, #124	@ 0x7c
 8000f12:	f7ff fea1 	bl	8000c58 <bmi2_get_regs>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d127      	bne.n	8000f72 <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8000f3e:	f107 010e 	add.w	r1, r7, #14
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2201      	movs	r2, #1
 8000f46:	207c      	movs	r0, #124	@ 0x7c
 8000f48:	f7ff fef9 	bl	8000d3e <bmi2_set_regs>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 8000f58:	23f3      	movs	r3, #243	@ 0xf3
 8000f5a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f001 fac8 	bl	8002520 <null_ptr_check>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d13b      	bne.n	8001014 <bmi2_write_config_file+0x96>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d036      	beq.n	8001014 <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	89db      	ldrh	r3, [r3, #14]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	89db      	ldrh	r3, [r3, #14]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d802      	bhi.n	8000fce <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fbdd 	bl	800178e <write_config_file>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11c      	bne.n	800101a <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 8000fe0:	f107 030e 	add.w	r3, r7, #14
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fae0 	bl	80015ac <bmi2_get_internal_status>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 8000ffa:	7bba      	ldrb	r2, [r7, #14]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d108      	bne.n	800101a <bmi2_write_config_file+0x9c>
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 800100e:	23f7      	movs	r3, #247	@ 0xf7
 8001010:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001012:	e002      	b.n	800101a <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001014:	23ff      	movs	r3, #255	@ 0xff
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e000      	b.n	800101c <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 800101a:	bf00      	nop
    }

    return rslt;
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <bmi2_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi2_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	460b      	mov	r3, r1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f001 fa6c 	bl	8002520 <null_ptr_check>
 8001048:	4603      	mov	r3, r0
 800104a:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 800104c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d117      	bne.n	8001084 <bmi2_sensor_enable+0x5c>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d014      	beq.n	8001084 <bmi2_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 800105a:	f107 0210 	add.w	r2, r7, #16
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	4619      	mov	r1, r3
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f001 fb9c 	bl	80027a0 <select_sensor>
 8001068:	4603      	mov	r3, r0
 800106a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 800106c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d109      	bne.n	8001088 <bmi2_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 8001074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	f001 fbec 	bl	8002856 <sensor_enable>
 800107e:	4603      	mov	r3, r0
 8001080:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8001082:	e001      	b.n	8001088 <bmi2_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001084:	23ff      	movs	r3, #255	@ 0xff
 8001086:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001088:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	460b      	mov	r3, r1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fa3a 	bl	8002520 <null_ptr_check>
 80010ac:	4603      	mov	r3, r0
 80010ae:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 80010b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f040 8099 	bne.w	80011ec <bmi2_set_sensor_config+0x158>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 8095 	beq.w	80011ec <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80010c8:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75bb      	strb	r3, [r7, #22]
 80010ce:	e079      	b.n	80011c4 <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d105      	bne.n	80010e2 <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff04 	bl	8000ee6 <bmi2_set_adv_power_save>
 80010de:	4603      	mov	r3, r0
 80010e0:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 80010e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d165      	bne.n	80011b6 <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 80010ea:	7dba      	ldrb	r2, [r7, #22]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d857      	bhi.n	80011b0 <bmi2_set_sensor_config+0x11c>
 8001100:	a201      	add	r2, pc, #4	@ (adr r2, 8001108 <bmi2_set_sensor_config+0x74>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001131 	.word	0x08001131
 800110c:	08001151 	.word	0x08001151
 8001110:	08001171 	.word	0x08001171
 8001114:	080011b1 	.word	0x080011b1
 8001118:	080011b1 	.word	0x080011b1
 800111c:	080011b1 	.word	0x080011b1
 8001120:	080011b1 	.word	0x080011b1
 8001124:	080011b1 	.word	0x080011b1
 8001128:	080011b1 	.word	0x080011b1
 800112c:	08001191 	.word	0x08001191
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001130:	7dba      	ldrb	r2, [r7, #22]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	3304      	adds	r3, #4
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	f001 f8ee 	bl	8002326 <set_accel_config>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
                        break;
 800114e:	e032      	b.n	80011b6 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8001150:	7dba      	ldrb	r2, [r7, #22]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	3304      	adds	r3, #4
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f955 	bl	8002414 <set_gyro_config>
 800116a:	4603      	mov	r3, r0
 800116c:	75fb      	strb	r3, [r7, #23]
                        break;
 800116e:	e022      	b.n	80011b6 <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8001170:	7dba      	ldrb	r2, [r7, #22]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	3304      	adds	r3, #4
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fcfb 	bl	8001b80 <set_aux_config>
 800118a:	4603      	mov	r3, r0
 800118c:	75fb      	strb	r3, [r7, #23]
                        break;
 800118e:	e012      	b.n	80011b6 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 8001190:	7dba      	ldrb	r2, [r7, #22]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	3304      	adds	r3, #4
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd1a 	bl	8001bde <set_gyro_user_gain_config>
 80011aa:	4603      	mov	r3, r0
 80011ac:	75fb      	strb	r3, [r7, #23]
                        break;
 80011ae:	e002      	b.n	80011b6 <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80011b0:	23f8      	movs	r3, #248	@ 0xf8
 80011b2:	75fb      	strb	r3, [r7, #23]
                        break;
 80011b4:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 80011b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d107      	bne.n	80011ce <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 80011be:	7dbb      	ldrb	r3, [r7, #22]
 80011c0:	3301      	adds	r3, #1
 80011c2:	75bb      	strb	r3, [r7, #22]
 80011c4:	7dba      	ldrb	r2, [r7, #22]
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d381      	bcc.n	80010d0 <bmi2_set_sensor_config+0x3c>
 80011cc:	e000      	b.n	80011d0 <bmi2_set_sensor_config+0x13c>
            {
                break;
 80011ce:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10d      	bne.n	80011f2 <bmi2_set_sensor_config+0x15e>
 80011d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fe80 	bl	8000ee6 <bmi2_set_adv_power_save>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80011ea:	e002      	b.n	80011f2 <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80011ec:	23ff      	movs	r3, #255	@ 0xff
 80011ee:	75fb      	strb	r3, [r7, #23]
 80011f0:	e000      	b.n	80011f4 <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80011f2:	bf00      	nop
    }

    return rslt;
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	460b      	mov	r3, r1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f001 f984 	bl	8002520 <null_ptr_check>
 8001218:	4603      	mov	r3, r0
 800121a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 800121c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15c      	bne.n	80012de <bmi2_get_feature_data+0xde>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d059      	beq.n	80012de <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001230:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8001232:	2300      	movs	r3, #0
 8001234:	75bb      	strb	r3, [r7, #22]
 8001236:	e04b      	b.n	80012d0 <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 8001238:	7dbb      	ldrb	r3, [r7, #22]
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d908      	bls.n	8001258 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 8001246:	7d7b      	ldrb	r3, [r7, #21]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff fe49 	bl	8000ee6 <bmi2_set_adv_power_save>
 8001254:	4603      	mov	r3, r0
 8001256:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8001258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d127      	bne.n	80012b0 <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 8001260:	7dbb      	ldrb	r3, [r7, #22]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b09      	cmp	r3, #9
 800126c:	d00d      	beq.n	800128a <bmi2_get_feature_data+0x8a>
 800126e:	2b29      	cmp	r3, #41	@ 0x29
 8001270:	d117      	bne.n	80012a2 <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fa08 	bl	8002694 <get_gyro_cross_sense>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
                        break;
 8001288:	e00e      	b.n	80012a8 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	3304      	adds	r3, #4
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f961 	bl	800255e <get_gyro_gain_update_status>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
                        break;
 80012a0:	e002      	b.n	80012a8 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80012a2:	23f8      	movs	r3, #248	@ 0xf8
 80012a4:	75fb      	strb	r3, [r7, #23]
                        break;
 80012a6:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 80012a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d114      	bne.n	80012da <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80012b0:	7d7b      	ldrb	r3, [r7, #21]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d109      	bne.n	80012ca <bmi2_get_feature_data+0xca>
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d105      	bne.n	80012ca <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fe10 	bl	8000ee6 <bmi2_set_adv_power_save>
 80012c6:	4603      	mov	r3, r0
 80012c8:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	3301      	adds	r3, #1
 80012ce:	75bb      	strb	r3, [r7, #22]
 80012d0:	7dba      	ldrb	r2, [r7, #22]
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3af      	bcc.n	8001238 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80012d8:	e003      	b.n	80012e2 <bmi2_get_feature_data+0xe2>
                    break;
 80012da:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80012dc:	e001      	b.n	80012e2 <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80012de:	23ff      	movs	r3, #255	@ 0xff
 80012e0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bmi2_get_sensor_data>:
/*!
 * @brief This API gets the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_get_sensor_data(struct bmi2_sens_data *data, struct bmi2_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b08a      	sub	sp, #40	@ 0x28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]

    /* Array to hold register sensor data */
    uint8_t sensor_data[BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES];

    /* Null-pointer check */
    if (data != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d018      	beq.n	8001330 <bmi2_get_sensor_data+0x42>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, sensor_data, BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES, dev);
 80012fe:	f107 010c 	add.w	r1, r7, #12
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2218      	movs	r2, #24
 8001306:	2003      	movs	r0, #3
 8001308:	f7ff fca6 	bl	8000c58 <bmi2_get_regs>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI2_OK)
 8001312:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <bmi2_get_sensor_data+0x48>
        {
            rslt = bmi2_parse_sensor_data(sensor_data, data, dev);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f80d 	bl	8001342 <bmi2_parse_sensor_data>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800132e:	e002      	b.n	8001336 <bmi2_get_sensor_data+0x48>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001330:	23ff      	movs	r3, #255	@ 0xff
 8001332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001336:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800133a:	4618      	mov	r0, r3
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <bmi2_parse_sensor_data>:
/*!
 * @brief This API parses the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_parse_sensor_data(const uint8_t *sensor_data, struct bmi2_sens_data *data, const struct bmi2_dev *dev)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b088      	sub	sp, #32
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variables to define loop */
    uint8_t count = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	77bb      	strb	r3, [r7, #30]

    uint8_t index = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	777b      	strb	r3, [r7, #29]

    uint32_t sensor_time_byte3 = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
    uint16_t sensor_time_byte2 = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	82fb      	strh	r3, [r7, #22]
    uint8_t sensor_time_byte1 = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f001 f8dc 	bl	8002520 <null_ptr_check>
 8001368:	4603      	mov	r3, r0
 800136a:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMI2_OK) && (data != NULL))
 800136c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d156      	bne.n	8001422 <bmi2_parse_sensor_data+0xe0>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d053      	beq.n	8001422 <bmi2_parse_sensor_data+0xe0>
    {
        /* Update auxiliary sensor data length */
        index = BMI2_AUX_START_INDEX;
 800137a:	2301      	movs	r3, #1
 800137c:	777b      	strb	r3, [r7, #29]

        /* Get the 8 bytes of auxiliary data */
        do
        {
            *(data->aux_data + count++) = (sensor_data[index++]);
 800137e:	7f7b      	ldrb	r3, [r7, #29]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	777a      	strb	r2, [r7, #29]
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	441a      	add	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f103 0118 	add.w	r1, r3, #24
 8001390:	7fbb      	ldrb	r3, [r7, #30]
 8001392:	1c58      	adds	r0, r3, #1
 8001394:	77b8      	strb	r0, [r7, #30]
 8001396:	440b      	add	r3, r1
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	701a      	strb	r2, [r3, #0]
        } while (count < BMI2_AUX_NUM_BYTES);
 800139c:	7fbb      	ldrb	r3, [r7, #30]
 800139e:	2b07      	cmp	r3, #7
 80013a0:	d9ed      	bls.n	800137e <bmi2_parse_sensor_data+0x3c>

        /* Update accelerometer sensor data length */
        index = BMI2_ACC_START_INDEX;
 80013a2:	2309      	movs	r3, #9
 80013a4:	777b      	strb	r3, [r7, #29]

        /* Get accelerometer data from the register */
        get_acc_gyr_data(&data->acc, &sensor_data[index]);
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	7f7b      	ldrb	r3, [r7, #29]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f000 fe42 	bl	8002038 <get_acc_gyr_data>

        /* Get the re-mapped accelerometer data */
        get_remapped_data(&data->acc, dev);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fea1 	bl	8002100 <get_remapped_data>

        /* Update gyroscope sensor data length */
        index = BMI2_GYR_START_INDEX;
 80013be:	230f      	movs	r3, #15
 80013c0:	777b      	strb	r3, [r7, #29]

        /* Get gyroscope data from the register */
        get_acc_gyr_data(&data->gyr, &sensor_data[index]);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f103 000c 	add.w	r0, r3, #12
 80013c8:	7f7b      	ldrb	r3, [r7, #29]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f000 fe32 	bl	8002038 <get_acc_gyr_data>

        /* Get the compensated gyroscope data */
        comp_gyro_cross_axis_sensitivity(&data->gyr, dev);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	330c      	adds	r3, #12
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 ff43 	bl	8002266 <comp_gyro_cross_axis_sensitivity>

        /* Get the re-mapped gyroscope data */
        get_remapped_data(&data->gyr, dev);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	330c      	adds	r3, #12
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fe8a 	bl	8002100 <get_remapped_data>

        sensor_time_byte3 = sensor_data[BMI2_PARSE_SENSOR_TIME_MSB_BYTE] << 16;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3317      	adds	r3, #23
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	61bb      	str	r3, [r7, #24]
        sensor_time_byte2 = sensor_data[BMI2_PARSE_SENSOR_TIME_XLSB_BYTE] << 8;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3316      	adds	r3, #22
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	82fb      	strh	r3, [r7, #22]
        sensor_time_byte1 = sensor_data[BMI2_PARSE_SENSOR_TIME_LSB_BYTE];
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3315      	adds	r3, #21
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	757b      	strb	r3, [r7, #21]

        data->sens_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
 8001408:	8afa      	ldrh	r2, [r7, #22]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	431a      	orrs	r2, r3
 800140e:	7d7b      	ldrb	r3, [r7, #21]
 8001410:	431a      	orrs	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	621a      	str	r2, [r3, #32]

        /* Store status register value in structure */
        data->status = sensor_data[BMI2_STATUS_INDEX];
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001420:	e001      	b.n	8001426 <bmi2_parse_sensor_data+0xe4>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001422:	23ff      	movs	r3, #255	@ 0xff
 8001424:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001426:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f001 f86f 	bl	8002520 <null_ptr_check>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10b      	bne.n	8001466 <bmi2_get_status+0x34>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	2003      	movs	r0, #3
 800145c:	f7ff fbfc 	bl	8000c58 <bmi2_get_regs>
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e001      	b.n	800146a <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001466:	23ff      	movs	r3, #255	@ 0xff
 8001468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <bmi2_map_data_int>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi2_map_data_int(uint8_t data_int, enum bmi2_hw_int_pin int_pin, struct bmi2_dev *dev)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	603a      	str	r2, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	460b      	mov	r3, r1
 8001486:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to mask interrupt pin 1 - lower nibble */
    uint8_t int1_mask = data_int;
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	73bb      	strb	r3, [r7, #14]

    /* Variable to mask interrupt pin 2 - higher nibble */
    uint8_t int2_mask = (uint8_t)(data_int << 4);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	737b      	strb	r3, [r7, #13]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	733b      	strb	r3, [r7, #12]

    /* Read interrupt map1 and map2 and register */
    rslt = bmi2_get_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 8001496:	f107 010c 	add.w	r1, r7, #12
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2201      	movs	r2, #1
 800149e:	2058      	movs	r0, #88	@ 0x58
 80014a0:	f7ff fbda 	bl	8000c58 <bmi2_get_regs>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80014a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d141      	bne.n	8001534 <bmi2_map_data_int+0xbc>
    {
        if (int_pin < BMI2_INT_PIN_MAX)
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d83c      	bhi.n	8001530 <bmi2_map_data_int+0xb8>
        {
            switch (int_pin)
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d82e      	bhi.n	800151a <bmi2_map_data_int+0xa2>
 80014bc:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <bmi2_map_data_int+0x4c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	080014fd 	.word	0x080014fd
 80014d0:	08001509 	.word	0x08001509
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data &= ~(int1_mask | int2_mask);
 80014d4:	7bba      	ldrb	r2, [r7, #14]
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	4313      	orrs	r3, r2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	7b3b      	ldrb	r3, [r7, #12]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	4013      	ands	r3, r2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	733b      	strb	r3, [r7, #12]
                    break;
 80014ee:	e015      	b.n	800151c <bmi2_map_data_int+0xa4>
                case BMI2_INT1:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 1
                     */
                    reg_data |= int1_mask;
 80014f0:	7b3a      	ldrb	r2, [r7, #12]
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	733b      	strb	r3, [r7, #12]
                    break;
 80014fa:	e00f      	b.n	800151c <bmi2_map_data_int+0xa4>
                case BMI2_INT2:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 2
                     */
                    reg_data |= int2_mask;
 80014fc:	7b3a      	ldrb	r2, [r7, #12]
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	4313      	orrs	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]
                    break;
 8001506:	e009      	b.n	800151c <bmi2_map_data_int+0xa4>
                case BMI2_INT_BOTH:

                    /* Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data |= (int1_mask | int2_mask);
 8001508:	7bba      	ldrb	r2, [r7, #14]
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	4313      	orrs	r3, r2
 800150e:	b2da      	uxtb	r2, r3
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	733b      	strb	r3, [r7, #12]
                    break;
 8001518:	e000      	b.n	800151c <bmi2_map_data_int+0xa4>
                default:
                    break;
 800151a:	bf00      	nop
            }

            /* Set the interrupts in the map register */
            rslt = bmi2_set_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 800151c:	f107 010c 	add.w	r1, r7, #12
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	2058      	movs	r0, #88	@ 0x58
 8001526:	f7ff fc0a 	bl	8000d3e <bmi2_set_regs>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e001      	b.n	8001534 <bmi2_map_data_int+0xbc>
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 8001530:	23f4      	movs	r3, #244	@ 0xf4
 8001532:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d020      	beq.n	800159c <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 ffe0 	bl	8002520 <null_ptr_check>
 8001560:	4603      	mov	r3, r0
 8001562:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8001564:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d114      	bne.n	8001596 <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 800156c:	2329      	movs	r3, #41	@ 0x29
 800156e:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	2101      	movs	r1, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe41 	bl	8001200 <bmi2_get_feature_data>
 800157e:	4603      	mov	r3, r0
 8001580:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8001582:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10a      	bne.n	80015a0 <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 800158a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001594:	e004      	b.n	80015a0 <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8001596:	23ff      	movs	r3, #255	@ 0xff
 8001598:	77fb      	strb	r3, [r7, #31]
 800159a:	e001      	b.n	80015a0 <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800159c:	23f8      	movs	r3, #248	@ 0xf8
 800159e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80015a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f000 ffb2 	bl	8002520 <null_ptr_check>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d113      	bne.n	80015f0 <bmi2_get_internal_status+0x44>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d010      	beq.n	80015f0 <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6852      	ldr	r2, [r2, #4]
 80015d6:	4611      	mov	r1, r2
 80015d8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80015dc:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2021      	movs	r0, #33	@ 0x21
 80015e6:	f7ff fb37 	bl	8000c58 <bmi2_get_regs>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	e001      	b.n	80015f4 <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80015f0:	23ff      	movs	r3, #255	@ 0xff
 80015f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 800160e:	2310      	movs	r3, #16
 8001610:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 8001616:	2330      	movs	r3, #48	@ 0x30
 8001618:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <bmi2_get_feat_config+0x2a>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 800162a:	23ff      	movs	r3, #255	@ 0xff
 800162c:	75fb      	strb	r3, [r7, #23]
 800162e:	e073      	b.n	8001718 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e1a      	ldrb	r2, [r3, #24]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	429a      	cmp	r2, r3
 8001638:	d96c      	bls.n	8001714 <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 800163a:	f107 010f 	add.w	r1, r7, #15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	202f      	movs	r0, #47	@ 0x2f
 8001644:	f7ff fb7b 	bl	8000d3e <bmi2_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d152      	bne.n	80016fa <bmi2_get_feat_config+0xfa>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	89db      	ldrh	r3, [r3, #14]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d84e      	bhi.n	80016fa <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	89db      	ldrh	r3, [r3, #14]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d041      	beq.n	80016ee <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	89db      	ldrh	r3, [r3, #14]
 800166e:	3b01      	subs	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8001676:	e03a      	b.n	80016ee <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8001678:	7dbb      	ldrb	r3, [r7, #22]
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	89db      	ldrh	r3, [r3, #14]
 8001680:	429a      	cmp	r2, r3
 8001682:	d31d      	bcc.n	80016c0 <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 8001684:	7cfb      	ldrb	r3, [r7, #19]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	18d1      	adds	r1, r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	89da      	ldrh	r2, [r3, #14]
 800168e:	7d38      	ldrb	r0, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f7ff fae1 	bl	8000c58 <bmi2_get_regs>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	89db      	ldrh	r3, [r3, #14]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	7cfb      	ldrb	r3, [r7, #19]
 80016a2:	4413      	add	r3, r2
 80016a4:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	89db      	ldrh	r3, [r3, #14]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	7d3b      	ldrb	r3, [r7, #20]
 80016ae:	4413      	add	r3, r2
 80016b0:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	89db      	ldrh	r3, [r3, #14]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	7d7b      	ldrb	r3, [r7, #21]
 80016ba:	4413      	add	r3, r2
 80016bc:	757b      	strb	r3, [r7, #21]
 80016be:	e00e      	b.n	80016de <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 80016c0:	7cfb      	ldrb	r3, [r7, #19]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	18d1      	adds	r1, r2, r3
 80016c6:	7dbb      	ldrb	r3, [r7, #22]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	7d38      	ldrb	r0, [r7, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f7ff fac3 	bl	8000c58 <bmi2_get_regs>
 80016d2:	4603      	mov	r3, r0
 80016d4:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 80016d6:	7d7a      	ldrb	r2, [r7, #21]
 80016d8:	7dbb      	ldrb	r3, [r7, #22]
 80016da:	4413      	add	r3, r2
 80016dc:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 80016de:	7d7b      	ldrb	r3, [r7, #21]
 80016e0:	f1c3 0310 	rsb	r3, r3, #16
 80016e4:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 80016e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 80016ee:	7dbb      	ldrb	r3, [r7, #22]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1c1      	bne.n	8001678 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80016f4:	e010      	b.n	8001718 <bmi2_get_feat_config+0x118>
                    {
                        break;
 80016f6:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80016f8:	e00e      	b.n	8001718 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 80016fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2210      	movs	r2, #16
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	2030      	movs	r0, #48	@ 0x30
 800170a:	f7ff faa5 	bl	8000c58 <bmi2_get_regs>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
 8001712:	e001      	b.n	8001718 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 8001714:	23f6      	movs	r3, #246	@ 0xf6
 8001716:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	460b      	mov	r3, r1
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8001736:	2300      	movs	r3, #0
 8001738:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 800173a:	e01c      	b.n	8001776 <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a19      	ldr	r1, [r3, #32]
 8001740:	7dfa      	ldrb	r2, [r7, #23]
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	440b      	add	r3, r1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	7afa      	ldrb	r2, [r7, #11]
 800174e:	429a      	cmp	r2, r3
 8001750:	d10e      	bne.n	8001770 <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a19      	ldr	r1, [r3, #32]
 8001756:	7dfa      	ldrb	r2, [r7, #23]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	18ca      	adds	r2, r1, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8811      	ldrh	r1, [r2, #0]
 8001764:	7892      	ldrb	r2, [r2, #2]
 8001766:	8019      	strh	r1, [r3, #0]
 8001768:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 800176a:	2301      	movs	r3, #1
 800176c:	75bb      	strb	r3, [r7, #22]
            break;
 800176e:	e007      	b.n	8001780 <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	3301      	adds	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7e5b      	ldrb	r3, [r3, #25]
 800177a:	7dfa      	ldrb	r2, [r7, #23]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3dd      	bcc.n	800173c <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8001780:	7dbb      	ldrb	r3, [r7, #22]
}
 8001782:	4618      	mov	r0, r3
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80017a0:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	89da      	ldrh	r2, [r3, #14]
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80017ac:	fb01 f202 	mul.w	r2, r1, r2
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fb90 	bl	8000ee6 <bmi2_set_adv_power_save>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 80017ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8088 	bne.w	80018e4 <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 f88a 	bl	80018f0 <set_config_load>
 80017dc:	4603      	mov	r3, r0
 80017de:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 80017e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d17d      	bne.n	80018e4 <write_config_file+0x156>
        {
            if (!remain)
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11c      	bne.n	8001828 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 80017ee:	2300      	movs	r3, #0
 80017f0:	82bb      	strh	r3, [r7, #20]
 80017f2:	e010      	b.n	8001816 <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	8abb      	ldrh	r3, [r7, #20]
 80017fa:	18d0      	adds	r0, r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	89da      	ldrh	r2, [r3, #14]
 8001800:	8ab9      	ldrh	r1, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f000 f8a6 	bl	8001954 <upload_file>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	89da      	ldrh	r2, [r3, #14]
 8001810:	8abb      	ldrh	r3, [r7, #20]
 8001812:	4413      	add	r3, r2
 8001814:	82bb      	strh	r3, [r7, #20]
 8001816:	8aba      	ldrh	r2, [r7, #20]
 8001818:	8a7b      	ldrh	r3, [r7, #18]
 800181a:	429a      	cmp	r2, r3
 800181c:	d24e      	bcs.n	80018bc <write_config_file+0x12e>
 800181e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0e6      	beq.n	80017f4 <write_config_file+0x66>
 8001826:	e049      	b.n	80018bc <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8001828:	7c7b      	ldrb	r3, [r7, #17]
 800182a:	b29b      	uxth	r3, r3
 800182c:	8a7a      	ldrh	r2, [r7, #18]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001832:	2300      	movs	r3, #0
 8001834:	82bb      	strh	r3, [r7, #20]
 8001836:	e010      	b.n	800185a <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	8abb      	ldrh	r3, [r7, #20]
 800183e:	18d0      	adds	r0, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	89da      	ldrh	r2, [r3, #14]
 8001844:	8ab9      	ldrh	r1, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f000 f884 	bl	8001954 <upload_file>
 800184c:	4603      	mov	r3, r0
 800184e:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	89da      	ldrh	r2, [r3, #14]
 8001854:	8abb      	ldrh	r3, [r7, #20]
 8001856:	4413      	add	r3, r2
 8001858:	82bb      	strh	r3, [r7, #20]
 800185a:	8aba      	ldrh	r2, [r7, #20]
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	429a      	cmp	r2, r3
 8001860:	d203      	bcs.n	800186a <write_config_file+0xdc>
 8001862:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0e6      	beq.n	8001838 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 800186a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d124      	bne.n	80018bc <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	89db      	ldrh	r3, [r3, #14]
 8001876:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	82bb      	strh	r3, [r7, #20]
 8001882:	e010      	b.n	80018a6 <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	8abb      	ldrh	r3, [r7, #20]
 800188a:	18d0      	adds	r0, r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	89da      	ldrh	r2, [r3, #14]
 8001890:	8ab9      	ldrh	r1, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f000 f85e 	bl	8001954 <upload_file>
 8001898:	4603      	mov	r3, r0
 800189a:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	89da      	ldrh	r2, [r3, #14]
 80018a0:	8abb      	ldrh	r3, [r7, #20]
 80018a2:	4413      	add	r3, r2
 80018a4:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 80018a6:	8aba      	ldrh	r2, [r7, #20]
 80018a8:	8a7b      	ldrh	r3, [r7, #18]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d203      	bcs.n	80018b6 <write_config_file+0x128>
 80018ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0e6      	beq.n	8001884 <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	89ba      	ldrh	r2, [r7, #12]
 80018ba:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 80018bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10f      	bne.n	80018e4 <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 f812 	bl	80018f0 <set_config_load>
 80018cc:	4603      	mov	r3, r0
 80018ce:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 80018d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fb03 	bl	8000ee6 <bmi2_set_adv_power_save>
 80018e0:	4603      	mov	r3, r0
 80018e2:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80018e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001900:	f107 010e 	add.w	r1, r7, #14
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	2059      	movs	r0, #89	@ 0x59
 800190a:	f7ff f9a5 	bl	8000c58 <bmi2_get_regs>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	b25a      	sxtb	r2, r3
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b25b      	sxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b25b      	sxtb	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001936:	f107 010e 	add.w	r1, r7, #14
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	2059      	movs	r0, #89	@ 0x59
 8001940:	f7ff f9fd 	bl	8000d3e <bmi2_set_regs>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	817b      	strh	r3, [r7, #10]
 8001962:	4613      	mov	r3, r2
 8001964:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 8001966:	2300      	movs	r3, #0
 8001968:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d024      	beq.n	80019ba <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 8001970:	897b      	ldrh	r3, [r7, #10]
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	b2db      	uxtb	r3, r3
 800197e:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	b29b      	uxth	r3, r3
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 800198e:	f107 0114 	add.w	r1, r7, #20
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	205b      	movs	r0, #91	@ 0x5b
 8001998:	f7ff f9d1 	bl	8000d3e <bmi2_set_regs>
 800199c:	4603      	mov	r3, r0
 800199e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 80019a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10a      	bne.n	80019be <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	205e      	movs	r0, #94	@ 0x5e
 80019b0:	f7ff f9c5 	bl	8000d3e <bmi2_set_regs>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
 80019b8:	e001      	b.n	80019be <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80019ba:	23ff      	movs	r3, #255	@ 0xff
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80019be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	2100      	movs	r1, #0
 80019dc:	68b8      	ldr	r0, [r7, #8]
 80019de:	f000 fc6b 	bl	80022b8 <check_boundary_val>
 80019e2:	4603      	mov	r3, r0
 80019e4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 80019e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d114      	bne.n	8001a18 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	2100      	movs	r1, #0
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fc5b 	bl	80022b8 <check_boundary_val>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
 8001a06:	e007      	b.n	8001a18 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fc52 	bl	80022b8 <check_boundary_val>
 8001a14:	4603      	mov	r3, r0
 8001a16:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	220c      	movs	r2, #12
 8001a34:	2101      	movs	r1, #1
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fc3e 	bl	80022b8 <check_boundary_val>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fc32 	bl	80022b8 <check_boundary_val>
 8001a54:	4603      	mov	r3, r0
 8001a56:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	1c98      	adds	r0, r3, #2
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	2100      	movs	r1, #0
 8001a78:	f000 fc1e 	bl	80022b8 <check_boundary_val>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d13b      	bne.n	8001b00 <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	1c58      	adds	r0, r3, #1
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	2100      	movs	r1, #0
 8001a92:	f000 fc11 	bl	80022b8 <check_boundary_val>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12e      	bne.n	8001b00 <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	1d58      	adds	r0, r3, #5
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2100      	movs	r1, #0
 8001aac:	f000 fc04 	bl	80022b8 <check_boundary_val>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8001ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d121      	bne.n	8001b00 <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	220d      	movs	r2, #13
 8001ac2:	2106      	movs	r1, #6
 8001ac4:	f000 fbf8 	bl	80022b8 <check_boundary_val>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8001acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d115      	bne.n	8001b00 <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	1cd8      	adds	r0, r3, #3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	2100      	movs	r1, #0
 8001ade:	f000 fbeb 	bl	80022b8 <check_boundary_val>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d108      	bne.n	8001b00 <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	1d18      	adds	r0, r3, #4
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2204      	movs	r2, #4
 8001af6:	2100      	movs	r1, #0
 8001af8:	f000 fbde 	bl	80022b8 <check_boundary_val>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 8001b14:	f107 010e 	add.w	r1, r7, #14
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	201b      	movs	r0, #27
 8001b1e:	f7ff f89b 	bl	8000c58 <bmi2_get_regs>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d121      	bne.n	8001b72 <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	109b      	asrs	r3, r3, #2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d816      	bhi.n	8001b70 <cfg_error_status+0x64>
 8001b42:	a201      	add	r2, pc, #4	@ (adr r2, 8001b48 <cfg_error_status+0x3c>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b5f 	.word	0x08001b5f
 8001b50:	08001b65 	.word	0x08001b65
 8001b54:	08001b6b 	.word	0x08001b6b
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
                break;
 8001b5c:	e009      	b.n	8001b72 <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 8001b5e:	23fb      	movs	r3, #251	@ 0xfb
 8001b60:	73fb      	strb	r3, [r7, #15]
                break;
 8001b62:	e006      	b.n	8001b72 <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 8001b64:	23fa      	movs	r3, #250	@ 0xfa
 8001b66:	73fb      	strb	r3, [r7, #15]
                break;
 8001b68:	e003      	b.n	8001b72 <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 8001b6a:	23f9      	movs	r3, #249	@ 0xf9
 8001b6c:	73fb      	strb	r3, [r7, #15]
                break;
 8001b6e:	e000      	b.n	8001b72 <cfg_error_status+0x66>
            default:
                break;
 8001b70:	bf00      	nop
        }
    }

    return rslt;
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop

08001b80 <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fa3f 	bl	8002010 <validate_aux_config>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 8001b9e:	6839      	ldr	r1, [r7, #0]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8f7 	bl	8001d94 <set_aux_interface>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f91f 	bl	8001df8 <config_aux_interface>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f9db 	bl	8001f84 <config_aux>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b08a      	sub	sp, #40	@ 0x28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 8001c02:	2300      	movs	r3, #0
 8001c04:	723b      	strb	r3, [r7, #8]
 8001c06:	2300      	movs	r3, #0
 8001c08:	727b      	strb	r3, [r7, #9]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	2109      	movs	r1, #9
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fd81 	bl	8001724 <bmi2_extract_input_feat_config>
 8001c22:	4603      	mov	r3, r0
 8001c24:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8001c26:	7ffb      	ldrb	r3, [r7, #31]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80aa 	beq.w	8001d82 <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8001c2e:	7a7b      	ldrb	r3, [r7, #9]
 8001c30:	f107 010c 	add.w	r1, r7, #12
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fce2 	bl	8001600 <bmi2_get_feat_config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8001c42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 809e 	bne.w	8001d88 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8001c4c:	7abb      	ldrb	r3, [r7, #10]
 8001c4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8001c52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 8001c5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	6a3a      	ldr	r2, [r7, #32]
 8001c64:	4413      	add	r3, r2
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c6e:	f023 0307 	bic.w	r3, r3, #7
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b219      	sxth	r1, r3
 8001c84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b28a      	uxth	r2, r1
 8001c90:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 8001c92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c96:	3301      	adds	r3, #1
 8001c98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 8001c9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	6a3a      	ldr	r2, [r7, #32]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cae:	f023 0307 	bic.w	r3, r3, #7
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	885b      	ldrh	r3, [r3, #2]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b219      	sxth	r1, r3
 8001cc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	6a3a      	ldr	r2, [r7, #32]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b28a      	uxth	r2, r1
 8001cd0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 8001cd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 8001cdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	6a3a      	ldr	r2, [r7, #32]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cee:	f023 0307 	bic.w	r3, r3, #7
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b219      	sxth	r1, r3
 8001d04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	6a3a      	ldr	r2, [r7, #32]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b28a      	uxth	r2, r1
 8001d10:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8001d12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d16:	3301      	adds	r3, #1
 8001d18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 8001d1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	7abb      	ldrb	r3, [r7, #10]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001d32:	e015      	b.n	8001d60 <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8001d34:	7abb      	ldrb	r3, [r7, #10]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d3c:	4413      	add	r3, r2
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d4a:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	3328      	adds	r3, #40	@ 0x28
 8001d50:	443b      	add	r3, r7
 8001d52:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8001d56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001d60:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d3e3      	bcc.n	8001d34 <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8001d6c:	f107 010c 	add.w	r1, r7, #12
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2210      	movs	r2, #16
 8001d74:	2030      	movs	r0, #48	@ 0x30
 8001d76:	f7fe ffe2 	bl	8000d3e <bmi2_set_regs>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d80:	e002      	b.n	8001d88 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8001d82:	23f8      	movs	r3, #248	@ 0xf8
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001d88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8001d9e:	f107 010e 	add.w	r1, r7, #14
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	206b      	movs	r0, #107	@ 0x6b
 8001da8:	f7fe ff56 	bl	8000c58 <bmi2_get_regs>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d119      	bne.n	8001dec <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f023 0320 	bic.w	r3, r3, #32
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8001dda:	f107 010e 	add.w	r1, r7, #14
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	206b      	movs	r0, #107	@ 0x6b
 8001de4:	f7fe ffab 	bl	8000d3e <bmi2_set_regs>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001e02:	2300      	movs	r3, #0
 8001e04:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8001e0e:	f107 010c 	add.w	r1, r7, #12
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	204b      	movs	r0, #75	@ 0x4b
 8001e18:	f7fe ff1e 	bl	8000c58 <bmi2_get_regs>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 80a7 	bne.w	8001f78 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 8001e2a:	7b3b      	ldrb	r3, [r7, #12]
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	79db      	ldrb	r3, [r3, #7]
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 8001e46:	7b7b      	ldrb	r3, [r7, #13]
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e4e:	b25a      	sxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	01db      	lsls	r3, r3, #7
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 8001e62:	7b7b      	ldrb	r3, [r7, #13]
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e6a:	b25a      	sxtb	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	789b      	ldrb	r3, [r3, #2]
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 8001e84:	7b7b      	ldrb	r3, [r7, #13]
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	f023 030c 	bic.w	r3, r3, #12
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	78db      	ldrb	r3, [r3, #3]
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	791b      	ldrb	r3, [r3, #4]
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 8001ec4:	f107 030b 	add.w	r3, r7, #11
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fab1 	bl	8001432 <bmi2_get_status>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 8001ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d13b      	bne.n	8001f54 <config_aux_interface+0x15c>
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d136      	bne.n	8001f54 <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8001ee6:	f107 010c 	add.w	r1, r7, #12
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2202      	movs	r2, #2
 8001eee:	204b      	movs	r0, #75	@ 0x4b
 8001ef0:	f7fe ff25 	bl	8000d3e <bmi2_set_regs>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	6852      	ldr	r2, [r2, #4]
 8001f00:	4611      	mov	r1, r2
 8001f02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f06:	4798      	blx	r3
                if (rslt == BMI2_OK)
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d132      	bne.n	8001f76 <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d115      	bne.n	8001f44 <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f103 0108 	add.w	r1, r3, #8
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	204d      	movs	r0, #77	@ 0x4d
 8001f2a:	f7fe ff08 	bl	8000d3e <bmi2_set_regs>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6852      	ldr	r2, [r2, #4]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f40:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 8001f42:	e018      	b.n	8001f76 <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	78da      	ldrb	r2, [r3, #3]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	771a      	strb	r2, [r3, #28]
                break;
 8001f52:	e010      	b.n	8001f76 <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6852      	ldr	r2, [r2, #4]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001f62:	4798      	blx	r3
            count++;
 8001f64:	7bbb      	ldrb	r3, [r7, #14]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	2b14      	cmp	r3, #20
 8001f6e:	d9a9      	bls.n	8001ec4 <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 8001f70:	23f1      	movs	r3, #241	@ 0xf1
 8001f72:	73fb      	strb	r3, [r7, #15]
                break;
 8001f74:	e000      	b.n	8001f78 <config_aux_interface+0x180>
                break;
 8001f76:	bf00      	nop
            }
        }
    }

    return rslt;
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 8001f8e:	f107 010e 	add.w	r1, r7, #14
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	2044      	movs	r0, #68	@ 0x44
 8001f98:	f7fe fe5e 	bl	8000c58 <bmi2_get_regs>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12d      	bne.n	8002004 <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	b25a      	sxtb	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	799b      	ldrb	r3, [r3, #6]
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f023 030f 	bic.w	r3, r3, #15
 8001fcc:	b25a      	sxtb	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	795b      	ldrb	r3, [r3, #5]
 8001fd2:	b25b      	sxtb	r3, r3
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 8001fe2:	f107 010e 	add.w	r1, r7, #14
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2044      	movs	r0, #68	@ 0x44
 8001fec:	f7fe fea7 	bl	8000d3e <bmi2_set_regs>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	6852      	ldr	r2, [r2, #4]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002002:	4798      	blx	r3
    }

    return rslt;
 8002004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	1d58      	adds	r0, r3, #5
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	220b      	movs	r2, #11
 8002022:	2101      	movs	r1, #1
 8002024:	f000 f948 	bl	80022b8 <check_boundary_val>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800202c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <get_acc_gyr_data>:

/*!
 * @brief This internal API gets the accelerometer/gyroscope data.
 */
static void get_acc_gyr_data(struct bmi2_sens_axes_data *data, const uint8_t *reg_data)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

    /* Variables to store both msb and lsb value */
    uint16_t msb_lsb;

    /* Variables to define index */
    uint8_t index = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]

    /* Read x-axis data */
    lsb = reg_data[index++];
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	73fa      	strb	r2, [r7, #15]
 800204c:	461a      	mov	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	73fa      	strb	r2, [r7, #15]
 800205c:	461a      	mov	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	b21b      	sxth	r3, r3
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b21a      	sxth	r2, r3
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	b21b      	sxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b21b      	sxth	r3, r3
 8002076:	817b      	strh	r3, [r7, #10]
    data->x = (int16_t) msb_lsb;
 8002078:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	801a      	strh	r2, [r3, #0]

    /* Read y-axis data */
    lsb = reg_data[index++];
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	73fa      	strb	r2, [r7, #15]
 8002086:	461a      	mov	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	73fa      	strb	r2, [r7, #15]
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80020a0:	7b7b      	ldrb	r3, [r7, #13]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	817b      	strh	r3, [r7, #10]
    data->y = (int16_t) msb_lsb;
 80020b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	805a      	strh	r2, [r3, #2]

    /* Read z-axis data */
    lsb = reg_data[index++];
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	73fa      	strb	r2, [r7, #15]
 80020c0:	461a      	mov	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	73fa      	strb	r2, [r7, #15]
 80020d0:	461a      	mov	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80020da:	7b7b      	ldrb	r3, [r7, #13]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	7bbb      	ldrb	r3, [r7, #14]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	817b      	strh	r3, [r7, #10]
    data->z = (int16_t) msb_lsb;
 80020ec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	809a      	strh	r2, [r3, #4]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <get_remapped_data>:

/*!
 * @brief This internal API gets the re-mapped accelerometer/gyroscope data.
 */
static void get_remapped_data(struct bmi2_sens_axes_data *data, const struct bmi2_dev *dev)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
    /* Array to defined the re-mapped sensor data */
    int16_t remap_data[3] = { 0 };
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	809a      	strh	r2, [r3, #4]
    int16_t pos_multiplier = INT16_C(1);
 8002114:	2301      	movs	r3, #1
 8002116:	82fb      	strh	r3, [r7, #22]
    int16_t neg_multiplier = INT16_C(-1);
 8002118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800211c:	82bb      	strh	r3, [r7, #20]

    /* Fill the array with the un-mapped sensor data */
    remap_data[0] = data->x;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002124:	81bb      	strh	r3, [r7, #12]
    remap_data[1] = data->y;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800212c:	81fb      	strh	r3, [r7, #14]
    remap_data[2] = data->z;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002134:	823b      	strh	r3, [r7, #16]

    /* Get the re-mapped x axis data */
    if (dev->remap.x_axis_sign == BMI2_POS_SIGN)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800213c:	2b00      	cmp	r3, #0
 800213e:	d110      	bne.n	8002162 <get_remapped_data+0x62>
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * pos_multiplier);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	3318      	adds	r3, #24
 800214a:	443b      	add	r3, r7
 800214c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002150:	b29a      	uxth	r2, r3
 8002152:	8afb      	ldrh	r3, [r7, #22]
 8002154:	fb12 f303 	smulbb	r3, r2, r3
 8002158:	b29b      	uxth	r3, r3
 800215a:	b21a      	sxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	801a      	strh	r2, [r3, #0]
 8002160:	e00f      	b.n	8002182 <get_remapped_data+0x82>
    }
    else
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * neg_multiplier);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	3318      	adds	r3, #24
 800216c:	443b      	add	r3, r7
 800216e:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002172:	b29a      	uxth	r2, r3
 8002174:	8abb      	ldrh	r3, [r7, #20]
 8002176:	fb12 f303 	smulbb	r3, r2, r3
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21a      	sxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
    }

    /* Get the re-mapped y axis data */
    if (dev->remap.y_axis_sign == BMI2_POS_SIGN)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d110      	bne.n	80021ae <get_remapped_data+0xae>
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * pos_multiplier);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	3318      	adds	r3, #24
 8002196:	443b      	add	r3, r7
 8002198:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800219c:	b29a      	uxth	r2, r3
 800219e:	8afb      	ldrh	r3, [r7, #22]
 80021a0:	fb12 f303 	smulbb	r3, r2, r3
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	805a      	strh	r2, [r3, #2]
 80021ac:	e00f      	b.n	80021ce <get_remapped_data+0xce>
    }
    else
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * neg_multiplier);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	3318      	adds	r3, #24
 80021b8:	443b      	add	r3, r7
 80021ba:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	8abb      	ldrh	r3, [r7, #20]
 80021c2:	fb12 f303 	smulbb	r3, r2, r3
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	805a      	strh	r2, [r3, #2]
    }

    /* Get the re-mapped z axis data */
    if (dev->remap.z_axis_sign == BMI2_POS_SIGN)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d110      	bne.n	80021fa <get_remapped_data+0xfa>
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * pos_multiplier);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	3318      	adds	r3, #24
 80021e2:	443b      	add	r3, r7
 80021e4:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	8afb      	ldrh	r3, [r7, #22]
 80021ec:	fb12 f303 	smulbb	r3, r2, r3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
    }
}
 80021f8:	e00f      	b.n	800221a <get_remapped_data+0x11a>
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	3318      	adds	r3, #24
 8002204:	443b      	add	r3, r7
 8002206:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800220a:	b29a      	uxth	r2, r3
 800220c:	8abb      	ldrh	r3, [r7, #20]
 800220e:	fb12 f303 	smulbb	r3, r2, r3
 8002212:	b29b      	uxth	r3, r3
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	809a      	strh	r2, [r3, #4]
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <saturate>:

/*!
 * @brief This internal API clips the gyroscope cross-axis sensitivity within signed 16-bit limit
 */
static int16_t saturate(int32_t value, uint16_t saturation_val)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]
    int16_t retval = (int16_t)value;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	81fb      	strh	r3, [r7, #14]

    if (value > (int32_t)saturation_val)
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	dd02      	ble.n	8002244 <saturate+0x1e>
    {
        retval = (int16_t)saturation_val;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	81fb      	strh	r3, [r7, #14]
 8002242:	e008      	b.n	8002256 <saturate+0x30>
    }
    else if (value < (-(int32_t)saturation_val - 1))
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	43db      	mvns	r3, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	da03      	bge.n	8002256 <saturate+0x30>
    {
        retval = -(int16_t)saturation_val - 1;
 800224e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002252:	43db      	mvns	r3, r3
 8002254:	81fb      	strh	r3, [r7, #14]
    }

    return retval;
 8002256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <comp_gyro_cross_axis_sensitivity>:
/*!
 * @brief This internal API corrects the gyroscope cross-axis sensitivity
 * between the z and the x axis.
 */
static void comp_gyro_cross_axis_sensitivity(struct bmi2_sens_axes_data *gyr_data, const struct bmi2_dev *dev)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
    uint16_t int16_max = UINT16_C(32767);
 8002270:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002274:	81fb      	strh	r3, [r7, #14]

    /* Get the compensated gyroscope x-axis */
    gyr_data->x =
        saturate((int32_t)(gyr_data->x - (int16_t)(((int32_t) dev->gyr_cross_sens_zx * (int32_t) gyr_data->z) / 512)),
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800227c:	461a      	mov	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8002284:	4619      	mov	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	da01      	bge.n	8002298 <comp_gyro_cross_axis_sensitivity+0x32>
 8002294:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002298:	125b      	asrs	r3, r3, #9
 800229a:	b21b      	sxth	r3, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	89fa      	ldrh	r2, [r7, #14]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ffbf 	bl	8002226 <saturate>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
    gyr_data->x =
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	801a      	strh	r2, [r3, #0]
                 int16_max);
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	72fb      	strb	r3, [r7, #11]
 80022c6:	4613      	mov	r3, r2
 80022c8:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01e      	beq.n	8002312 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	7afa      	ldrb	r2, [r7, #11]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d909      	bls.n	80022f2 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	7afa      	ldrb	r2, [r7, #11]
 80022e2:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7a1b      	ldrb	r3, [r3, #8]
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	7aba      	ldrb	r2, [r7, #10]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d20c      	bcs.n	8002316 <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	7aba      	ldrb	r2, [r7, #10]
 8002300:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	b2da      	uxtb	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	721a      	strb	r2, [r3, #8]
 8002310:	e001      	b.n	8002316 <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8002312:	23ff      	movs	r3, #255	@ 0xff
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800231a:	4618      	mov	r0, r3
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8002330:	2300      	movs	r3, #0
 8002332:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1c58      	adds	r0, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3302      	adds	r3, #2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff fb43 	bl	80019ca <validate_bw_perf_mode>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d15b      	bne.n	8002408 <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3303      	adds	r3, #3
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f7ff fb63 	bl	8001a24 <validate_odr_range>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d14e      	bne.n	8002408 <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 800236a:	7b3b      	ldrb	r3, [r7, #12]
 800236c:	b25b      	sxtb	r3, r3
 800236e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002372:	b25a      	sxtb	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	789b      	ldrb	r3, [r3, #2]
 8002378:	b25b      	sxtb	r3, r3
 800237a:	01db      	lsls	r3, r3, #7
 800237c:	b25b      	sxtb	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b25b      	sxtb	r3, r3
 8002382:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8002384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800238c:	b25a      	sxtb	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	b25b      	sxtb	r3, r3
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	b25b      	sxtb	r3, r3
 8002398:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800239c:	b25b      	sxtb	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 80023a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023a8:	f023 030f 	bic.w	r3, r3, #15
 80023ac:	b25a      	sxtb	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 80023c4:	7b7b      	ldrb	r3, [r7, #13]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	f023 0303 	bic.w	r3, r3, #3
 80023cc:	b25a      	sxtb	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	78db      	ldrb	r3, [r3, #3]
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 80023e0:	7bbb      	ldrb	r3, [r7, #14]
 80023e2:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 80023e4:	f107 010c 	add.w	r1, r7, #12
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2202      	movs	r2, #2
 80023ec:	2040      	movs	r0, #64	@ 0x40
 80023ee:	f7fe fca6 	bl	8000d3e <bmi2_set_regs>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d104      	bne.n	8002408 <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	f7ff fb84 	bl	8001b0c <cfg_error_status>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 800241e:	2300      	movs	r3, #0
 8002420:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8002422:	6839      	ldr	r1, [r7, #0]
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fb1d 	bl	8001a64 <validate_gyro_config>
 800242a:	4603      	mov	r3, r0
 800242c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d16e      	bne.n	8002514 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8002436:	7b3b      	ldrb	r3, [r7, #12]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800243e:	b25a      	sxtb	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	b25b      	sxtb	r3, r3
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	b25b      	sxtb	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b25b      	sxtb	r3, r3
 800244e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8002450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002458:	b25a      	sxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	795b      	ldrb	r3, [r3, #5]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	019b      	lsls	r3, r3, #6
 8002462:	b25b      	sxtb	r3, r3
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	b25b      	sxtb	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b25b      	sxtb	r3, r3
 800246e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 8002470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002474:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002478:	b25a      	sxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	b25b      	sxtb	r3, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	b25b      	sxtb	r3, r3
 8002484:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002488:	b25b      	sxtb	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b25b      	sxtb	r3, r3
 800248e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 8002490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002494:	f023 030f 	bic.w	r3, r3, #15
 8002498:	b25a      	sxtb	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 80024ac:	7bbb      	ldrb	r3, [r7, #14]
 80024ae:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 80024b0:	7b7b      	ldrb	r3, [r7, #13]
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	f023 0308 	bic.w	r3, r3, #8
 80024b8:	b25a      	sxtb	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	78db      	ldrb	r3, [r3, #3]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 80024d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024d4:	f023 0307 	bic.w	r3, r3, #7
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 80024f0:	f107 010c 	add.w	r1, r7, #12
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	2042      	movs	r0, #66	@ 0x42
 80024fa:	f7fe fc20 	bl	8000d3e <bmi2_set_regs>
 80024fe:	4603      	mov	r3, r0
 8002500:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 800250a:	6838      	ldr	r0, [r7, #0]
 800250c:	f7ff fafe 	bl	8001b0c <cfg_error_status>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <null_ptr_check+0x2a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <null_ptr_check+0x2a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <null_ptr_check+0x2a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 800254a:	23ff      	movs	r3, #255	@ 0xff
 800254c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b088      	sub	sp, #32
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 800257a:	2300      	movs	r3, #0
 800257c:	723b      	strb	r3, [r7, #8]
 800257e:	2300      	movs	r3, #0
 8002580:	727b      	strb	r3, [r7, #9]
 8002582:	2300      	movs	r3, #0
 8002584:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	2109      	movs	r1, #9
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f84b 	bl	800262a <extract_output_feat_config>
 8002594:	4603      	mov	r3, r0
 8002596:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8002598:	7f7b      	ldrb	r3, [r7, #29]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03d      	beq.n	800261a <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 800259e:	7a7b      	ldrb	r3, [r7, #9]
 80025a0:	f107 010c 	add.w	r1, r7, #12
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f82a 	bl	8001600 <bmi2_get_feat_config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80025b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d132      	bne.n	800261e <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 80025b8:	7abb      	ldrb	r3, [r7, #10]
 80025ba:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 80025bc:	7fbb      	ldrb	r3, [r7, #30]
 80025be:	3320      	adds	r3, #32
 80025c0:	443b      	add	r3, r7
 80025c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 80025d0:	7fbb      	ldrb	r3, [r7, #30]
 80025d2:	3320      	adds	r3, #32
 80025d4:	443b      	add	r3, r7
 80025d6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025da:	105b      	asrs	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 80025e8:	7fbb      	ldrb	r3, [r7, #30]
 80025ea:	3320      	adds	r3, #32
 80025ec:	443b      	add	r3, r7
 80025ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025f2:	109b      	asrs	r3, r3, #2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8002600:	7fbb      	ldrb	r3, [r7, #30]
 8002602:	3320      	adds	r3, #32
 8002604:	443b      	add	r3, r7
 8002606:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800260a:	10db      	asrs	r3, r3, #3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	b2da      	uxtb	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	70da      	strb	r2, [r3, #3]
 8002618:	e001      	b.n	800261e <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800261a:	23f8      	movs	r3, #248	@ 0xf8
 800261c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800261e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	460b      	mov	r3, r1
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 800263c:	2300      	movs	r3, #0
 800263e:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8002640:	e01c      	b.n	800267c <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002646:	7dfa      	ldrb	r2, [r7, #23]
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	440b      	add	r3, r1
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	7afa      	ldrb	r2, [r7, #11]
 8002654:	429a      	cmp	r2, r3
 8002656:	d10e      	bne.n	8002676 <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800265c:	7dfa      	ldrb	r2, [r7, #23]
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	18ca      	adds	r2, r1, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8811      	ldrh	r1, [r2, #0]
 800266a:	7892      	ldrb	r2, [r2, #2]
 800266c:	8019      	strh	r1, [r3, #0]
 800266e:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8002670:	2301      	movs	r3, #1
 8002672:	75bb      	strb	r3, [r7, #22]
            break;
 8002674:	e007      	b.n	8002686 <extract_output_feat_config+0x5c>
        }

        loop++;
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	3301      	adds	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e9b      	ldrb	r3, [r3, #26]
 8002680:	7dfa      	ldrb	r2, [r7, #23]
 8002682:	429a      	cmp	r2, r3
 8002684:	d3dd      	bcc.n	8002642 <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8002686:	7dbb      	ldrb	r3, [r7, #22]
}
 8002688:	4618      	mov	r0, r3
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 80026b0:	2300      	movs	r3, #0
 80026b2:	723b      	strb	r3, [r7, #8]
 80026b4:	2300      	movs	r3, #0
 80026b6:	727b      	strb	r3, [r7, #9]
 80026b8:	2300      	movs	r3, #0
 80026ba:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01d      	beq.n	8002706 <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 80026ca:	f107 010b 	add.w	r1, r7, #11
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	201e      	movs	r0, #30
 80026d4:	f7fe fac0 	bl	8000c58 <bmi2_get_regs>
 80026d8:	4603      	mov	r3, r0
 80026da:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80026dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	3b80      	subs	r3, #128	@ 0x80
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	e04b      	b.n	8002794 <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	b21a      	sxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e046      	b.n	8002794 <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	2129      	movs	r1, #41	@ 0x29
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff8b 	bl	800262a <extract_output_feat_config>
 8002714:	4603      	mov	r3, r0
 8002716:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8002718:	7f7b      	ldrb	r3, [r7, #29]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d038      	beq.n	8002790 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 800271e:	7a7b      	ldrb	r3, [r7, #9]
 8002720:	f107 010c 	add.w	r1, r7, #12
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe ff6a 	bl	8001600 <bmi2_get_feat_config>
 800272c:	4603      	mov	r3, r0
 800272e:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8002730:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12d      	bne.n	8002794 <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8002738:	7abb      	ldrb	r3, [r7, #10]
 800273a:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 800273c:	7fbb      	ldrb	r3, [r7, #30]
 800273e:	3320      	adds	r3, #32
 8002740:	443b      	add	r3, r7
 8002742:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8002746:	7fbb      	ldrb	r3, [r7, #30]
 8002748:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	3320      	adds	r3, #32
 8002750:	443b      	add	r3, r7
 8002752:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8002756:	7fbb      	ldrb	r3, [r7, #30]
 8002758:	3320      	adds	r3, #32
 800275a:	443b      	add	r3, r7
 800275c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 8002768:	7fbb      	ldrb	r3, [r7, #30]
 800276a:	3320      	adds	r3, #32
 800276c:	443b      	add	r3, r7
 800276e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002772:	3b80      	subs	r3, #128	@ 0x80
 8002774:	b29b      	uxth	r3, r3
 8002776:	b21a      	sxth	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	e00a      	b.n	8002794 <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 800277e:	7fbb      	ldrb	r3, [r7, #30]
 8002780:	3320      	adds	r3, #32
 8002782:	443b      	add	r3, r7
 8002784:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002788:	b21a      	sxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	e001      	b.n	8002794 <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 8002790:	23f8      	movs	r3, #248	@ 0xf8
 8002792:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8002794:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 80027a0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027a4:	b089      	sub	sp, #36	@ 0x24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6178      	str	r0, [r7, #20]
 80027aa:	460b      	mov	r3, r1
 80027ac:	60fa      	str	r2, [r7, #12]
 80027ae:	74fb      	strb	r3, [r7, #19]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	77bb      	strb	r3, [r7, #30]
 80027b8:	e041      	b.n	800283e <select_sensor+0x9e>
    {
        switch (sens_list[count])
 80027ba:	7fbb      	ldrb	r3, [r7, #30]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d028      	beq.n	8002818 <select_sensor+0x78>
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	dc33      	bgt.n	8002832 <select_sensor+0x92>
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d01a      	beq.n	8002804 <select_sensor+0x64>
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	dc2f      	bgt.n	8002832 <select_sensor+0x92>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <select_sensor+0x3c>
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d00a      	beq.n	80027f0 <select_sensor+0x50>
 80027da:	e02a      	b.n	8002832 <select_sensor+0x92>
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f042 0401 	orr.w	r4, r2, #1
 80027e6:	461d      	mov	r5, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 80027ee:	e023      	b.n	8002838 <select_sensor+0x98>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f042 0802 	orr.w	r8, r2, #2
 80027fa:	4699      	mov	r9, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 8002802:	e019      	b.n	8002838 <select_sensor+0x98>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f042 0a04 	orr.w	sl, r2, #4
 800280e:	469b      	mov	fp, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8002816:	e00f      	b.n	8002838 <select_sensor+0x98>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	603a      	str	r2, [r7, #0]
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	e9d7 1200 	ldrd	r1, r2, [r7]
 800282c:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8002830:	e002      	b.n	8002838 <select_sensor+0x98>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8002832:	23f8      	movs	r3, #248	@ 0xf8
 8002834:	77fb      	strb	r3, [r7, #31]
                break;
 8002836:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 8002838:	7fbb      	ldrb	r3, [r7, #30]
 800283a:	3301      	adds	r3, #1
 800283c:	77bb      	strb	r3, [r7, #30]
 800283e:	7fba      	ldrb	r2, [r7, #30]
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3b9      	bcc.n	80027ba <select_sensor+0x1a>
        }
    }

    return rslt;
 8002846:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002854:	4770      	bx	lr

08002856 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8002856:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002862:	617a      	str	r2, [r7, #20]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 800286a:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2201      	movs	r2, #1
 8002872:	207d      	movs	r0, #125	@ 0x7d
 8002874:	f7fe f9f0 	bl	8000c58 <bmi2_get_regs>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI2_OK)
 800287e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002882:	2b00      	cmp	r3, #0
 8002884:	d158      	bne.n	8002938 <sensor_enable+0xe2>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 8002886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288a:	f002 0301 	and.w	r3, r2, #1
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002898:	460b      	mov	r3, r1
 800289a:	4313      	orrs	r3, r2
 800289c:	d006      	beq.n	80028ac <sensor_enable+0x56>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 800289e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 80028ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b0:	f002 0302 	and.w	r3, r2, #2
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028be:	460b      	mov	r3, r1
 80028c0:	4313      	orrs	r3, r2
 80028c2:	d006      	beq.n	80028d2 <sensor_enable+0x7c>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 80028c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 80028d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d6:	f002 0a04 	and.w	sl, r2, #4
 80028da:	f04f 0b00 	mov.w	fp, #0
 80028de:	ea5a 030b 	orrs.w	r3, sl, fp
 80028e2:	d006      	beq.n	80028f2 <sensor_enable+0x9c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 80028e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 80028f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f6:	f04f 0800 	mov.w	r8, #0
 80028fa:	f003 0901 	and.w	r9, r3, #1
 80028fe:	ea58 0309 	orrs.w	r3, r8, r9
 8002902:	d006      	beq.n	8002912 <sensor_enable+0xbc>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 8002904:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002908:	f043 0308 	orr.w	r3, r3, #8
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 8002912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002916:	f002 0407 	and.w	r4, r2, #7
 800291a:	f003 0501 	and.w	r5, r3, #1
 800291e:	ea54 0305 	orrs.w	r3, r4, r5
 8002922:	d009      	beq.n	8002938 <sensor_enable+0xe2>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8002924:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2201      	movs	r2, #1
 800292c:	207d      	movs	r0, #125	@ 0x7d
 800292e:	f7fe fa06 	bl	8000d3e <bmi2_set_regs>
 8002932:	4603      	mov	r3, r0
 8002934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8002938:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	@ 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002948 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8e5 	bl	8002b20 <null_ptr_check>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d141      	bne.n	80029e6 <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2224      	movs	r2, #36	@ 0x24
 8002966:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800296e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7a5b      	ldrb	r3, [r3, #9]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	72da      	strb	r2, [r3, #11]
 8002988:	e002      	b.n	8002990 <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <bmi270_init+0xac>)
 800299c:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f8fa 	bl	8000b98 <bmi2_sec_init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80029a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d11a      	bne.n	80029e6 <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <bmi270_init+0xb0>)
 80029b4:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <bmi270_init+0xb4>)
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2208      	movs	r2, #8
 80029c0:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2211      	movs	r2, #17
 80029c6:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2207      	movs	r2, #7
 80029cc:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a00 <bmi270_init+0xb8>)
 80029d2:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2208      	movs	r2, #8
 80029d8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe fdaf 	bl	8001540 <bmi2_get_gyro_cross_sense>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	0801a258 	.word	0x0801a258
 80029f8:	0801c258 	.word	0x0801c258
 80029fc:	0801c28c 	.word	0x0801c28c
 8002a00:	20000008 	.word	0x20000008

08002a04 <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f882 	bl	8002b20 <null_ptr_check>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8002a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d171      	bne.n	8002b0c <bmi270_set_sensor_config+0x108>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06e      	beq.n	8002b0c <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002a34:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	75bb      	strb	r3, [r7, #22]
 8002a3a:	e053      	b.n	8002ae4 <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8002a3c:	7dba      	ldrb	r2, [r7, #22]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d020      	beq.n	8002a94 <bmi270_set_sensor_config+0x90>
 8002a52:	7dba      	ldrb	r2, [r7, #22]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d015      	beq.n	8002a94 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8002a68:	7dba      	ldrb	r2, [r7, #22]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d00a      	beq.n	8002a94 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8002a7e:	7dba      	ldrb	r2, [r7, #22]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b09      	cmp	r3, #9
 8002a92:	d10f      	bne.n	8002ab4 <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 8002a94:	7dba      	ldrb	r2, [r7, #22]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe faf3 	bl	8001094 <bmi2_set_sensor_config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	e014      	b.n	8002ade <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 8002ab4:	7d7b      	ldrb	r3, [r7, #21]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fe fa12 	bl	8000ee6 <bmi2_set_adv_power_save>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 8002ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 8002ace:	7dbb      	ldrb	r3, [r7, #22]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fdf7 	bl	80036c8 <set_feat_config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 8002ade:	7dbb      	ldrb	r3, [r7, #22]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	75bb      	strb	r3, [r7, #22]
 8002ae4:	7dba      	ldrb	r2, [r7, #22]
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d3a7      	bcc.n	8002a3c <bmi270_set_sensor_config+0x38>
 8002aec:	e000      	b.n	8002af0 <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 8002aee:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8002af0:	7d7b      	ldrb	r3, [r7, #21]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10d      	bne.n	8002b12 <bmi270_set_sensor_config+0x10e>
 8002af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7fe f9f0 	bl	8000ee6 <bmi2_set_adv_power_save>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8002b0a:	e002      	b.n	8002b12 <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8002b0c:	23ff      	movs	r3, #255	@ 0xff
 8002b0e:	75fb      	strb	r3, [r7, #23]
 8002b10:	e000      	b.n	8002b14 <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8002b12:	bf00      	nop
    }

    return rslt;
 8002b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <null_ptr_check+0x2a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <null_ptr_check+0x2a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <null_ptr_check+0x2a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8002b4a:	23ff      	movs	r3, #255	@ 0xff
 8002b4c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08a      	sub	sp, #40	@ 0x28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8002b82:	2300      	movs	r3, #0
 8002b84:	723b      	strb	r3, [r7, #8]
 8002b86:	2300      	movs	r3, #0
 8002b88:	727b      	strb	r3, [r7, #9]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8002b94:	f107 0308 	add.w	r3, r7, #8
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fdc1 	bl	8001724 <bmi2_extract_input_feat_config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8002ba6:	7ffb      	ldrb	r3, [r7, #31]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80d8 	beq.w	8002d5e <set_any_motion_config+0x200>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8002bae:	7a7b      	ldrb	r3, [r7, #9]
 8002bb0:	f107 010c 	add.w	r1, r7, #12
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fd22 	bl	8001600 <bmi2_get_feat_config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8002bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 80cc 	bne.w	8002d64 <set_any_motion_config+0x206>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 8002bcc:	7abb      	ldrb	r3, [r7, #10]
 8002bce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8002bd2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8002bdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	6a3a      	ldr	r2, [r7, #32]
 8002be4:	4413      	add	r3, r2
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002bee:	f023 031f 	bic.w	r3, r3, #31
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b219      	sxth	r1, r3
 8002c04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b28a      	uxth	r2, r1
 8002c10:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8002c12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	889b      	ldrh	r3, [r3, #4]
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	035b      	lsls	r3, r3, #13
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b219      	sxth	r1, r3
 8002c3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	4413      	add	r3, r2
 8002c44:	b28a      	uxth	r2, r1
 8002c46:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8002c48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	6a3a      	ldr	r2, [r7, #32]
 8002c50:	4413      	add	r3, r2
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c5a:	b21a      	sxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	88db      	ldrh	r3, [r3, #6]
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	039b      	lsls	r3, r3, #14
 8002c64:	b21b      	sxth	r3, r3
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b219      	sxth	r1, r3
 8002c70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	6a3a      	ldr	r2, [r7, #32]
 8002c78:	4413      	add	r3, r2
 8002c7a:	b28a      	uxth	r2, r1
 8002c7c:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8002c7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	6a3a      	ldr	r2, [r7, #32]
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	891b      	ldrh	r3, [r3, #8]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	03db      	lsls	r3, r3, #15
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	b219      	sxth	r1, r3
 8002ca0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b28a      	uxth	r2, r1
 8002cac:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8002cae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8002cb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	6a3a      	ldr	r2, [r7, #32]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	b21a      	sxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	885b      	ldrh	r3, [r3, #2]
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b219      	sxth	r1, r3
 8002ce0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	6a3a      	ldr	r2, [r7, #32]
 8002ce8:	4413      	add	r3, r2
 8002cea:	b28a      	uxth	r2, r1
 8002cec:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8002cee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 8002cf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	7abb      	ldrb	r3, [r7, #10]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002d0e:	e015      	b.n	8002d3c <set_any_motion_config+0x1de>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8002d10:	7abb      	ldrb	r3, [r7, #10]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d18:	4413      	add	r3, r2
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 8002d1e:	7abb      	ldrb	r3, [r7, #10]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d26:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	3328      	adds	r3, #40	@ 0x28
 8002d2c:	443b      	add	r3, r7
 8002d2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8002d32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d36:	3301      	adds	r3, #1
 8002d38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002d3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002d40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3e3      	bcc.n	8002d10 <set_any_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8002d48:	f107 010c 	add.w	r1, r7, #12
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2210      	movs	r2, #16
 8002d50:	2030      	movs	r0, #48	@ 0x30
 8002d52:	f7fd fff4 	bl	8000d3e <bmi2_set_regs>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d5c:	e002      	b.n	8002d64 <set_any_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002d5e:	23f8      	movs	r3, #248	@ 0xf8
 8002d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8002d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3728      	adds	r7, #40	@ 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	@ 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002d7a:	f107 030c 	add.w	r3, r7, #12
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8002d94:	2300      	movs	r3, #0
 8002d96:	723b      	strb	r3, [r7, #8]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	727b      	strb	r3, [r7, #9]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	2105      	movs	r1, #5
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fcb8 	bl	8001724 <bmi2_extract_input_feat_config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8002db8:	7ffb      	ldrb	r3, [r7, #31]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80d8 	beq.w	8002f70 <set_no_motion_config+0x200>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 8002dc0:	7a7b      	ldrb	r3, [r7, #9]
 8002dc2:	f107 010c 	add.w	r1, r7, #12
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fc19 	bl	8001600 <bmi2_get_feat_config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8002dd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 80cc 	bne.w	8002f76 <set_no_motion_config+0x206>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 8002dde:	7abb      	ldrb	r3, [r7, #10]
 8002de0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8002de4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 8002dee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	4413      	add	r3, r2
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002e00:	f023 031f 	bic.w	r3, r3, #31
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b219      	sxth	r1, r3
 8002e16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b28a      	uxth	r2, r1
 8002e22:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8002e24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	889b      	ldrh	r3, [r3, #4]
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	035b      	lsls	r3, r3, #13
 8002e40:	b21b      	sxth	r3, r3
 8002e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b219      	sxth	r1, r3
 8002e4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	4413      	add	r3, r2
 8002e56:	b28a      	uxth	r2, r1
 8002e58:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8002e5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e6c:	b21a      	sxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	88db      	ldrh	r3, [r3, #6]
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	039b      	lsls	r3, r3, #14
 8002e76:	b21b      	sxth	r3, r3
 8002e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b219      	sxth	r1, r3
 8002e82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b28a      	uxth	r2, r1
 8002e8e:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8002e90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	6a3a      	ldr	r2, [r7, #32]
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	891b      	ldrh	r3, [r3, #8]
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	03db      	lsls	r3, r3, #15
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b219      	sxth	r1, r3
 8002eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b28a      	uxth	r2, r1
 8002ebe:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8002ec0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8002eca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002edc:	f023 0307 	bic.w	r3, r3, #7
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	885b      	ldrh	r3, [r3, #2]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b219      	sxth	r1, r3
 8002ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	6a3a      	ldr	r2, [r7, #32]
 8002efa:	4413      	add	r3, r2
 8002efc:	b28a      	uxth	r2, r1
 8002efe:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8002f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f04:	3301      	adds	r3, #1
 8002f06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 8002f0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	7abb      	ldrb	r3, [r7, #10]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002f20:	e015      	b.n	8002f4e <set_no_motion_config+0x1de>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8002f22:	7abb      	ldrb	r3, [r7, #10]
 8002f24:	461a      	mov	r2, r3
 8002f26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f2a:	4413      	add	r3, r2
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 8002f30:	7abb      	ldrb	r3, [r7, #10]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f38:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	3328      	adds	r3, #40	@ 0x28
 8002f3e:	443b      	add	r3, r7
 8002f40:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8002f44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002f4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002f52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3e3      	bcc.n	8002f22 <set_no_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8002f5a:	f107 010c 	add.w	r1, r7, #12
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2210      	movs	r2, #16
 8002f62:	2030      	movs	r0, #48	@ 0x30
 8002f64:	f7fd feeb 	bl	8000d3e <bmi2_set_regs>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f6e:	e002      	b.n	8002f76 <set_no_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002f70:	23f8      	movs	r3, #248	@ 0xf8
 8002f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8002f76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3728      	adds	r7, #40	@ 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b08a      	sub	sp, #40	@ 0x28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	723b      	strb	r3, [r7, #8]
 8002faa:	2300      	movs	r3, #0
 8002fac:	727b      	strb	r3, [r7, #9]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fbaf 	bl	8001724 <bmi2_extract_input_feat_config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d055      	beq.n	800307c <set_sig_motion_config+0xfa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8002fd0:	7a7b      	ldrb	r3, [r7, #9]
 8002fd2:	f107 010c 	add.w	r1, r7, #12
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fb11 	bl	8001600 <bmi2_get_feat_config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8002fe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d14a      	bne.n	8003082 <set_sig_motion_config+0x100>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 8002fec:	7abb      	ldrb	r3, [r7, #10]
 8002fee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8002ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 8002ffc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	6a3a      	ldr	r2, [r7, #32]
 8003004:	4413      	add	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	8812      	ldrh	r2, [r2, #0]
 800300a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 800300c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003010:	3301      	adds	r3, #1
 8003012:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 8003016:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	7abb      	ldrb	r3, [r7, #10]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800302c:	e015      	b.n	800305a <set_sig_motion_config+0xd8>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 800302e:	7abb      	ldrb	r3, [r7, #10]
 8003030:	461a      	mov	r2, r3
 8003032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003036:	4413      	add	r3, r2
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 800303c:	7abb      	ldrb	r3, [r7, #10]
 800303e:	4619      	mov	r1, r3
 8003040:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003044:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	3328      	adds	r3, #40	@ 0x28
 800304a:	443b      	add	r3, r7
 800304c:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003050:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003054:	3301      	adds	r3, #1
 8003056:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800305a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800305e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003062:	429a      	cmp	r2, r3
 8003064:	d3e3      	bcc.n	800302e <set_sig_motion_config+0xac>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003066:	f107 010c 	add.w	r1, r7, #12
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2210      	movs	r2, #16
 800306e:	2030      	movs	r0, #48	@ 0x30
 8003070:	f7fd fe65 	bl	8000d3e <bmi2_set_regs>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800307a:	e002      	b.n	8003082 <set_sig_motion_config+0x100>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800307c:	23f8      	movs	r3, #248	@ 0xf8
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003082:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003086:	4618      	mov	r0, r3
 8003088:	3728      	adds	r7, #40	@ 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	@ 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t index = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 80030b2:	2300      	movs	r3, #0
 80030b4:	723b      	strb	r3, [r7, #8]
 80030b6:	2300      	movs	r3, #0
 80030b8:	727b      	strb	r3, [r7, #9]
 80030ba:	2300      	movs	r3, #0
 80030bc:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 80030be:	2332      	movs	r3, #50	@ 0x32
 80030c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 80030c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 80030ce:	2308      	movs	r3, #8
 80030d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	211d      	movs	r1, #29
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fb1b 	bl	8001724 <bmi2_extract_input_feat_config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8099 	beq.w	800322c <set_step_count_params_config+0x19e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 80030fa:	7a7b      	ldrb	r3, [r7, #9]
 80030fc:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 80030fe:	7fba      	ldrb	r2, [r7, #30]
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003104:	4413      	add	r3, r2
 8003106:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 8003108:	7abb      	ldrb	r3, [r7, #10]
 800310a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 800310e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b2da      	uxtb	r2, r3
 800311e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003122:	4413      	add	r3, r2
 8003124:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8003126:	7fbb      	ldrb	r3, [r7, #30]
 8003128:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800312c:	e078      	b.n	8003220 <set_step_count_params_config+0x192>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 800312e:	f107 010c 	add.w	r1, r7, #12
 8003132:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe fa61 	bl	8001600 <bmi2_get_feat_config>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 8003144:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d164      	bne.n	8003216 <set_step_count_params_config+0x188>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 800314c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003150:	7fbb      	ldrb	r3, [r7, #30]
 8003152:	429a      	cmp	r2, r3
 8003154:	d902      	bls.n	800315c <set_step_count_params_config+0xce>
                {
                    start_addr = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 800315c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003160:	7f7b      	ldrb	r3, [r7, #29]
 8003162:	429a      	cmp	r2, r3
 8003164:	d103      	bne.n	800316e <set_step_count_params_config+0xe0>
                {
                    max_len = (remain_len / 2);
 8003166:	7f3b      	ldrb	r3, [r7, #28]
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 800316e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 8003178:	e015      	b.n	80031a6 <set_step_count_params_config+0x118>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 800317a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	441a      	add	r2, r3
 8003184:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	6a39      	ldr	r1, [r7, #32]
 800318c:	440b      	add	r3, r1
 800318e:	8812      	ldrh	r2, [r2, #0]
 8003190:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 8003192:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003196:	3301      	adds	r3, #1
 8003198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 800319c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80031a0:	3301      	adds	r3, #1
 80031a2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 80031a6:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80031aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3e3      	bcc.n	800317a <set_step_count_params_config+0xec>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 80031b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	7abb      	ldrb	r3, [r7, #10]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80031c8:	e015      	b.n	80031f6 <set_step_count_params_config+0x168>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 80031ca:	7abb      	ldrb	r3, [r7, #10]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031d2:	4413      	add	r3, r2
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 80031d8:	7abb      	ldrb	r3, [r7, #10]
 80031da:	4619      	mov	r1, r3
 80031dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031e0:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	3330      	adds	r3, #48	@ 0x30
 80031e6:	443b      	add	r3, r7
 80031e8:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 80031ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031f0:	3301      	adds	r3, #1
 80031f2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80031f6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80031fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3e3      	bcc.n	80031ca <set_step_count_params_config+0x13c>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003202:	f107 010c 	add.w	r1, r7, #12
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2210      	movs	r2, #16
 800320a:	2030      	movs	r0, #48	@ 0x30
 800320c:	f7fd fd97 	bl	8000d3e <bmi2_set_regs>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8003216:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800321a:	3301      	adds	r3, #1
 800321c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003220:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003224:	7f7b      	ldrb	r3, [r7, #29]
 8003226:	429a      	cmp	r2, r3
 8003228:	d981      	bls.n	800312e <set_step_count_params_config+0xa0>
 800322a:	e002      	b.n	8003232 <set_step_count_params_config+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800322c:	23f8      	movs	r3, #248	@ 0xf8
 800322e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003232:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003236:	4618      	mov	r0, r3
 8003238:	3730      	adds	r7, #48	@ 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	@ 0x28
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8003262:	2300      	movs	r3, #0
 8003264:	723b      	strb	r3, [r7, #8]
 8003266:	2300      	movs	r3, #0
 8003268:	727b      	strb	r3, [r7, #9]
 800326a:	2300      	movs	r3, #0
 800326c:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	2107      	movs	r1, #7
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fa51 	bl	8001724 <bmi2_extract_input_feat_config>
 8003282:	4603      	mov	r3, r0
 8003284:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8084 	beq.w	8003396 <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 800328e:	7a7b      	ldrb	r3, [r7, #9]
 8003290:	f107 010c 	add.w	r1, r7, #12
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f9b2 	bl	8001600 <bmi2_get_feat_config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80032a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d178      	bne.n	800339c <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 80032aa:	7abb      	ldrb	r3, [r7, #10]
 80032ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80032b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 80032ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b21b      	sxth	r3, r3
 80032c8:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032cc:	f023 0303 	bic.w	r3, r3, #3
 80032d0:	b21a      	sxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032dc:	b21b      	sxth	r3, r3
 80032de:	4313      	orrs	r3, r2
 80032e0:	b219      	sxth	r1, r3
 80032e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	4413      	add	r3, r2
 80032ec:	b28a      	uxth	r2, r1
 80032ee:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 80032f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	4413      	add	r3, r2
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003302:	b21a      	sxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	885b      	ldrh	r3, [r3, #2]
 8003308:	b21b      	sxth	r3, r3
 800330a:	029b      	lsls	r3, r3, #10
 800330c:	b21b      	sxth	r3, r3
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	b21b      	sxth	r3, r3
 8003314:	4313      	orrs	r3, r2
 8003316:	b219      	sxth	r1, r3
 8003318:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	4413      	add	r3, r2
 8003322:	b28a      	uxth	r2, r1
 8003324:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 8003326:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800332a:	3301      	adds	r3, #1
 800332c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 8003330:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	7abb      	ldrb	r3, [r7, #10]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003346:	e015      	b.n	8003374 <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003348:	7abb      	ldrb	r3, [r7, #10]
 800334a:	461a      	mov	r2, r3
 800334c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003350:	4413      	add	r3, r2
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 8003356:	7abb      	ldrb	r3, [r7, #10]
 8003358:	4619      	mov	r1, r3
 800335a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800335e:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	3328      	adds	r3, #40	@ 0x28
 8003364:	443b      	add	r3, r7
 8003366:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 800336a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800336e:	3301      	adds	r3, #1
 8003370:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003374:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003378:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800337c:	429a      	cmp	r2, r3
 800337e:	d3e3      	bcc.n	8003348 <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003380:	f107 010c 	add.w	r1, r7, #12
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2210      	movs	r2, #16
 8003388:	2030      	movs	r0, #48	@ 0x30
 800338a:	f7fd fcd8 	bl	8000d3e <bmi2_set_regs>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003394:	e002      	b.n	800339c <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003396:	23f8      	movs	r3, #248	@ 0xf8
 8003398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800339c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3728      	adds	r7, #40	@ 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	@ 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 80033cc:	2300      	movs	r3, #0
 80033ce:	723b      	strb	r3, [r7, #8]
 80033d0:	2300      	movs	r3, #0
 80033d2:	727b      	strb	r3, [r7, #9]
 80033d4:	2300      	movs	r3, #0
 80033d6:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 80033de:	f107 0308 	add.w	r3, r7, #8
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	2113      	movs	r1, #19
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe f99c 	bl	8001724 <bmi2_extract_input_feat_config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8091 	beq.w	800351a <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 80033f8:	7a7b      	ldrb	r3, [r7, #9]
 80033fa:	f107 010c 	add.w	r1, r7, #12
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe f8fd 	bl	8001600 <bmi2_get_feat_config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800340c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8085 	bne.w	8003520 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 8003416:	7abb      	ldrb	r3, [r7, #10]
 8003418:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800341c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 8003426:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	4413      	add	r3, r2
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b21b      	sxth	r3, r3
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	b21a      	sxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b21b      	sxth	r3, r3
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	b21b      	sxth	r3, r3
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	b21b      	sxth	r3, r3
 800344a:	4313      	orrs	r3, r2
 800344c:	b219      	sxth	r1, r3
 800344e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	4413      	add	r3, r2
 8003458:	b28a      	uxth	r2, r1
 800345a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 800345c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003460:	3301      	adds	r3, #1
 8003462:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 8003466:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	4413      	add	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	8852      	ldrh	r2, [r2, #2]
 8003474:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 8003476:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800347a:	3301      	adds	r3, #1
 800347c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 8003480:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	4413      	add	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	8892      	ldrh	r2, [r2, #4]
 800348e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 8003490:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003494:	3301      	adds	r3, #1
 8003496:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 800349a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	4413      	add	r3, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	88d2      	ldrh	r2, [r2, #6]
 80034a8:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80034aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034ae:	3301      	adds	r3, #1
 80034b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 80034b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	7abb      	ldrb	r3, [r7, #10]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80034ca:	e015      	b.n	80034f8 <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 80034cc:	7abb      	ldrb	r3, [r7, #10]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80034d4:	4413      	add	r3, r2
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 80034da:	7abb      	ldrb	r3, [r7, #10]
 80034dc:	4619      	mov	r1, r3
 80034de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80034e2:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	3328      	adds	r3, #40	@ 0x28
 80034e8:	443b      	add	r3, r7
 80034ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80034ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80034f2:	3301      	adds	r3, #1
 80034f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80034f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80034fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003500:	429a      	cmp	r2, r3
 8003502:	d3e3      	bcc.n	80034cc <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003504:	f107 010c 	add.w	r1, r7, #12
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	2030      	movs	r0, #48	@ 0x30
 800350e:	f7fd fc16 	bl	8000d3e <bmi2_set_regs>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003518:	e002      	b.n	8003520 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800351a:	23f8      	movs	r3, #248	@ 0xf8
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003520:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8003550:	2300      	movs	r3, #0
 8003552:	723b      	strb	r3, [r7, #8]
 8003554:	2300      	movs	r3, #0
 8003556:	727b      	strb	r3, [r7, #9]
 8003558:	2300      	movs	r3, #0
 800355a:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	2114      	movs	r1, #20
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe f8da 	bl	8001724 <bmi2_extract_input_feat_config>
 8003570:	4603      	mov	r3, r0
 8003572:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003574:	7ffb      	ldrb	r3, [r7, #31]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 809d 	beq.w	80036b6 <set_wrist_wear_wake_up_config+0x18a>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 800357c:	7a7b      	ldrb	r3, [r7, #9]
 800357e:	f107 010c 	add.w	r1, r7, #12
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe f83b 	bl	8001600 <bmi2_get_feat_config>
 800358a:	4603      	mov	r3, r0
 800358c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003590:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 8091 	bne.w	80036bc <set_wrist_wear_wake_up_config+0x190>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 800359a:	7abb      	ldrb	r3, [r7, #10]
 800359c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80035a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 80035aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035ae:	3301      	adds	r3, #1
 80035b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 80035b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	4413      	add	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 80035c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035c8:	3301      	adds	r3, #1
 80035ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 80035ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	4413      	add	r3, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	8852      	ldrh	r2, [r2, #2]
 80035dc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 80035de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035e2:	3301      	adds	r3, #1
 80035e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 80035e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	4413      	add	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	8892      	ldrh	r2, [r2, #4]
 80035f6:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 80035f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035fc:	3301      	adds	r3, #1
 80035fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 8003602:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	4413      	add	r3, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	88d2      	ldrh	r2, [r2, #6]
 8003610:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 8003612:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003616:	3301      	adds	r3, #1
 8003618:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 800361c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	6a3a      	ldr	r2, [r7, #32]
 8003624:	4413      	add	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	8912      	ldrh	r2, [r2, #8]
 800362a:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 800362c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003630:	3301      	adds	r3, #1
 8003632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 8003636:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	4413      	add	r3, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	8952      	ldrh	r2, [r2, #10]
 8003644:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003646:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800364a:	3301      	adds	r3, #1
 800364c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 8003650:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	7abb      	ldrb	r3, [r7, #10]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003666:	e015      	b.n	8003694 <set_wrist_wear_wake_up_config+0x168>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003668:	7abb      	ldrb	r3, [r7, #10]
 800366a:	461a      	mov	r2, r3
 800366c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003670:	4413      	add	r3, r2
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 8003676:	7abb      	ldrb	r3, [r7, #10]
 8003678:	4619      	mov	r1, r3
 800367a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800367e:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	3328      	adds	r3, #40	@ 0x28
 8003684:	443b      	add	r3, r7
 8003686:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 800368a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800368e:	3301      	adds	r3, #1
 8003690:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003694:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003698:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800369c:	429a      	cmp	r2, r3
 800369e:	d3e3      	bcc.n	8003668 <set_wrist_wear_wake_up_config+0x13c>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80036a0:	f107 010c 	add.w	r1, r7, #12
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2210      	movs	r2, #16
 80036a8:	2030      	movs	r0, #48	@ 0x30
 80036aa:	f7fd fb48 	bl	8000d3e <bmi2_set_regs>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80036b4:	e002      	b.n	80036bc <set_wrist_wear_wake_up_config+0x190>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80036b6:	23f8      	movs	r3, #248	@ 0xf8
 80036b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80036bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3728      	adds	r7, #40	@ 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	460b      	mov	r3, r1
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 80036d6:	7afa      	ldrb	r2, [r7, #11]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	461a      	mov	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	2b1a      	cmp	r3, #26
 80036ec:	f200 80aa 	bhi.w	8003844 <set_feat_config+0x17c>
 80036f0:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <set_feat_config+0x30>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	080037a5 	.word	0x080037a5
 80036fc:	08003765 	.word	0x08003765
 8003700:	08003785 	.word	0x08003785
 8003704:	080037e5 	.word	0x080037e5
 8003708:	080037e5 	.word	0x080037e5
 800370c:	080037e5 	.word	0x080037e5
 8003710:	08003845 	.word	0x08003845
 8003714:	08003845 	.word	0x08003845
 8003718:	08003845 	.word	0x08003845
 800371c:	08003845 	.word	0x08003845
 8003720:	08003845 	.word	0x08003845
 8003724:	08003845 	.word	0x08003845
 8003728:	08003845 	.word	0x08003845
 800372c:	08003845 	.word	0x08003845
 8003730:	08003845 	.word	0x08003845
 8003734:	08003845 	.word	0x08003845
 8003738:	08003805 	.word	0x08003805
 800373c:	08003825 	.word	0x08003825
 8003740:	08003845 	.word	0x08003845
 8003744:	08003845 	.word	0x08003845
 8003748:	08003845 	.word	0x08003845
 800374c:	08003845 	.word	0x08003845
 8003750:	08003845 	.word	0x08003845
 8003754:	08003845 	.word	0x08003845
 8003758:	08003845 	.word	0x08003845
 800375c:	08003845 	.word	0x08003845
 8003760:	080037c5 	.word	0x080037c5
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8003764:	7afa      	ldrb	r2, [r7, #11]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff f9f0 	bl	8002b5e <set_any_motion_config>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]
            break;
 8003782:	e062      	b.n	800384a <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8003784:	7afa      	ldrb	r2, [r7, #11]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fae9 	bl	8002d70 <set_no_motion_config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]
            break;
 80037a2:	e052      	b.n	800384a <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80037a4:	7afa      	ldrb	r2, [r7, #11]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fbe2 	bl	8002f82 <set_sig_motion_config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]
            break;
 80037c2:	e042      	b.n	800384a <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 80037c4:	7afa      	ldrb	r2, [r7, #11]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fc58 	bl	800308e <set_step_count_params_config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]
            break;
 80037e2:	e032      	b.n	800384a <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 80037e4:	7afa      	ldrb	r2, [r7, #11]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fd20 	bl	800323e <set_step_config>
 80037fe:	4603      	mov	r3, r0
 8003800:	75fb      	strb	r3, [r7, #23]
            break;
 8003802:	e022      	b.n	800384a <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 8003804:	7afa      	ldrb	r2, [r7, #11]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fdc5 	bl	80033a8 <set_wrist_gest_config>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]
            break;
 8003822:	e012      	b.n	800384a <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 8003824:	7afa      	ldrb	r2, [r7, #11]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fe77 	bl	800352c <set_wrist_wear_wake_up_config>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]
            break;
 8003842:	e002      	b.n	800384a <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 8003844:	23f8      	movs	r3, #248	@ 0xf8
 8003846:	75fb      	strb	r3, [r7, #23]
            break;
 8003848:	bf00      	nop
    }

    return rslt;
 800384a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop

08003858 <bmi2_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4603      	mov	r3, r0
 8003866:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	f107 0314 	add.w	r3, r7, #20
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Read(intf_info.bus, intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Read(intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
 8003872:	7d38      	ldrb	r0, [r7, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	b29b      	uxth	r3, r3
 8003878:	7bf9      	ldrb	r1, [r7, #15]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f003 fdce 	bl	800741c <SensorAPI_I2Cx_Read>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <bmi2_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Write(intf_info.bus, intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Write(intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
 80038a4:	7d38      	ldrb	r0, [r7, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	7bf9      	ldrb	r1, [r7, #15]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	f003 fdd7 	bl	8007460 <SensorAPI_I2Cx_Write>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <bmi2_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bmi2_delay_us(uint32_t period, void *intf_ptr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
	bmi160_delay_us(period);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f003 fd8e 	bl	80073e8 <bmi160_delay_us>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <bmi2_interface_init>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t bmi2_interface_init(struct bmi2_dev *bmi, uint8_t intf)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMI2_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]

    if (bmi != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d026      	beq.n	8003938 <bmi2_interface_init+0x64>
//
//            return COINES_E_UNABLE_OPEN_DEVICE;
//        }

        /* Bus configuration : I2C */
        if (intf == BMI2_I2C_INTF)
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10e      	bne.n	800390e <bmi2_interface_init+0x3a>
        {
            printf("I2C Interface \n");
 80038f0:	4815      	ldr	r0, [pc, #84]	@ (8003948 <bmi2_interface_init+0x74>)
 80038f2:	f013 fcab 	bl	801724c <puts>

            /* To initialize the user I2C function */
            dev_addr = BMI2_I2C_SEC_ADDR;
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <bmi2_interface_init+0x78>)
 80038f8:	2269      	movs	r2, #105	@ 0x69
 80038fa:	701a      	strb	r2, [r3, #0]
            bmi->intf = BMI2_I2C_INTF;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	725a      	strb	r2, [r3, #9]
            bmi->read = bmi2_i2c_read;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <bmi2_interface_init+0x7c>)
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38
            bmi->write = bmi2_i2c_write;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a12      	ldr	r2, [pc, #72]	@ (8003954 <bmi2_interface_init+0x80>)
 800390c:	63da      	str	r2, [r3, #60]	@ 0x3c
//        }

//        if (COINES_SUCCESS == result)
//        {
            /* Assign device address and bus instance to interface pointer */
            intf_conf.bus = bus_inst;
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <bmi2_interface_init+0x84>)
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <bmi2_interface_init+0x88>)
 8003914:	705a      	strb	r2, [r3, #1]
            intf_conf.dev_addr = dev_addr;
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <bmi2_interface_init+0x78>)
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <bmi2_interface_init+0x88>)
 800391c:	701a      	strb	r2, [r3, #0]
            bmi->intf_ptr = ((void *)&intf_conf);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a0e      	ldr	r2, [pc, #56]	@ (800395c <bmi2_interface_init+0x88>)
 8003922:	605a      	str	r2, [r3, #4]

            /* Configure delay in microseconds */
            bmi->delay_us = bmi2_delay_us;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <bmi2_interface_init+0x8c>)
 8003928:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
            bmi->read_write_len = READ_WRITE_LEN;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	222e      	movs	r2, #46	@ 0x2e
 800392e:	81da      	strh	r2, [r3, #14]

            /* Assign to NULL to load the default config file. */
            bmi->config_file_ptr = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	615a      	str	r2, [r3, #20]
 8003936:	e001      	b.n	800393c <bmi2_interface_init+0x68>
//            rslt = COINES_E_COMM_INIT_FAILED;
//        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003938:	23ff      	movs	r3, #255	@ 0xff
 800393a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800393c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	08019260 	.word	0x08019260
 800394c:	2000019c 	.word	0x2000019c
 8003950:	08003859 	.word	0x08003859
 8003954:	0800388b 	.word	0x0800388b
 8003958:	2000019d 	.word	0x2000019d
 800395c:	200001a0 	.word	0x200001a0
 8003960:	080038bd 	.word	0x080038bd

08003964 <bmi2_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi2_error_codes_print_result(int8_t rslt)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
    switch (rslt)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	3322      	adds	r3, #34	@ 0x22
 8003974:	2b24      	cmp	r3, #36	@ 0x24
 8003976:	f200 812d 	bhi.w	8003bd4 <bmi2_error_codes_print_result+0x270>
 800397a:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <bmi2_error_codes_print_result+0x1c>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	08003bc7 	.word	0x08003bc7
 8003984:	08003bb9 	.word	0x08003bb9
 8003988:	08003bab 	.word	0x08003bab
 800398c:	08003bd5 	.word	0x08003bd5
 8003990:	08003b9d 	.word	0x08003b9d
 8003994:	08003bd5 	.word	0x08003bd5
 8003998:	08003bd5 	.word	0x08003bd5
 800399c:	08003b8f 	.word	0x08003b8f
 80039a0:	08003b81 	.word	0x08003b81
 80039a4:	08003b73 	.word	0x08003b73
 80039a8:	08003b65 	.word	0x08003b65
 80039ac:	08003b57 	.word	0x08003b57
 80039b0:	08003b49 	.word	0x08003b49
 80039b4:	08003b3b 	.word	0x08003b3b
 80039b8:	08003b2d 	.word	0x08003b2d
 80039bc:	08003b1f 	.word	0x08003b1f
 80039c0:	08003b11 	.word	0x08003b11
 80039c4:	08003b03 	.word	0x08003b03
 80039c8:	08003a69 	.word	0x08003a69
 80039cc:	08003af5 	.word	0x08003af5
 80039d0:	08003ae7 	.word	0x08003ae7
 80039d4:	08003ad9 	.word	0x08003ad9
 80039d8:	08003a77 	.word	0x08003a77
 80039dc:	08003bd5 	.word	0x08003bd5
 80039e0:	08003acb 	.word	0x08003acb
 80039e4:	08003abd 	.word	0x08003abd
 80039e8:	08003a5b 	.word	0x08003a5b
 80039ec:	08003aaf 	.word	0x08003aaf
 80039f0:	08003aa1 	.word	0x08003aa1
 80039f4:	08003a93 	.word	0x08003a93
 80039f8:	08003a85 	.word	0x08003a85
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a3f 	.word	0x08003a3f
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003be3 	.word	0x08003be3
 8003a0c:	08003a15 	.word	0x08003a15
 8003a10:	08003a23 	.word	0x08003a23

            /* Do nothing */
            break;

        case BMI2_W_FIFO_EMPTY:
            printf("Warning [%d] : FIFO empty\r\n", rslt);
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4874      	ldr	r0, [pc, #464]	@ (8003bec <bmi2_error_codes_print_result+0x288>)
 8003a1c:	f013 fbae 	bl	801717c <iprintf>
            break;
 8003a20:	e0e0      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>
        case BMI2_W_PARTIAL_READ:
            printf("Warning [%d] : FIFO partial read\r\n", rslt);
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4871      	ldr	r0, [pc, #452]	@ (8003bf0 <bmi2_error_codes_print_result+0x28c>)
 8003a2a:	f013 fba7 	bl	801717c <iprintf>
            break;
 8003a2e:	e0d9      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>
        case BMI2_E_NULL_PTR:
            printf(
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	4619      	mov	r1, r3
 8003a36:	486f      	ldr	r0, [pc, #444]	@ (8003bf4 <bmi2_error_codes_print_result+0x290>)
 8003a38:	f013 fba0 	bl	801717c <iprintf>
                "Error [%d] : Null pointer error. It occurs when the user tries to assign value (not address) to a pointer," " which has been initialized to NULL.\r\n",
                rslt);
            break;
 8003a3c:	e0d2      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_COM_FAIL:
            printf(
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	4619      	mov	r1, r3
 8003a44:	486c      	ldr	r0, [pc, #432]	@ (8003bf8 <bmi2_error_codes_print_result+0x294>)
 8003a46:	f013 fb99 	bl	801717c <iprintf>
                "Error [%d] : Communication failure error. It occurs due to read/write operation failure and also due " "to power failure during communication\r\n",
                rslt);
            break;
 8003a4a:	e0cb      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DEV_NOT_FOUND:
            printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	4619      	mov	r1, r3
 8003a52:	486a      	ldr	r0, [pc, #424]	@ (8003bfc <bmi2_error_codes_print_result+0x298>)
 8003a54:	f013 fb92 	bl	801717c <iprintf>
                   rslt);
            break;
 8003a58:	e0c4      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_SENSOR:
            printf(
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4867      	ldr	r0, [pc, #412]	@ (8003c00 <bmi2_error_codes_print_result+0x29c>)
 8003a62:	f013 fb8b 	bl	801717c <iprintf>
                "Error [%d] : Invalid sensor error. It occurs when there is a mismatch in the requested feature with the " "available one\r\n",
                rslt);
            break;
 8003a66:	e0bd      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_FAIL:
            printf(
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4865      	ldr	r0, [pc, #404]	@ (8003c04 <bmi2_error_codes_print_result+0x2a0>)
 8003a70:	f013 fb84 	bl	801717c <iprintf>
                "Error [%d] : Self-test failed error. It occurs when the validation of accel self-test data is " "not satisfied\r\n",
                rslt);
            break;
 8003a74:	e0b6      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INT_PIN:
            printf(
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4862      	ldr	r0, [pc, #392]	@ (8003c08 <bmi2_error_codes_print_result+0x2a4>)
 8003a7e:	f013 fb7d 	bl	801717c <iprintf>
                "Error [%d] : Invalid interrupt pin error. It occurs when the user tries to configure interrupt pins " "apart from INT1 and INT2\r\n",
                rslt);
            break;
 8003a82:	e0af      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_OUT_OF_RANGE:
            printf(
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4860      	ldr	r0, [pc, #384]	@ (8003c0c <bmi2_error_codes_print_result+0x2a8>)
 8003a8c:	f013 fb76 	bl	801717c <iprintf>
                "Error [%d] : Out of range error. It occurs when the data exceeds from filtered or unfiltered data from " "fifo and also when the range exceeds the maximum range for accel and gyro while performing FOC\r\n",
                rslt);
            break;
 8003a90:	e0a8      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_INVALID_CFG:
            printf(
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	4619      	mov	r1, r3
 8003a98:	485d      	ldr	r0, [pc, #372]	@ (8003c10 <bmi2_error_codes_print_result+0x2ac>)
 8003a9a:	f013 fb6f 	bl	801717c <iprintf>
                "Error [%d] : Invalid Accel configuration error. It occurs when there is an error in accel configuration" " register which could be one among range, BW or filter performance in reg address 0x40\r\n",
                rslt);
            break;
 8003a9e:	e0a1      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYRO_INVALID_CFG:
            printf(
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	485b      	ldr	r0, [pc, #364]	@ (8003c14 <bmi2_error_codes_print_result+0x2b0>)
 8003aa8:	f013 fb68 	bl	801717c <iprintf>
                "Error [%d] : Invalid Gyro configuration error. It occurs when there is a error in gyro configuration" "register which could be one among range, BW or filter performance in reg address 0x42\r\n",
                rslt);
            break;
 8003aac:	e09a      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_GYR_INVALID_CFG:
            printf(
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4858      	ldr	r0, [pc, #352]	@ (8003c18 <bmi2_error_codes_print_result+0x2b4>)
 8003ab6:	f013 fb61 	bl	801717c <iprintf>
                "Error [%d] : Invalid Accel-Gyro configuration error. It occurs when there is a error in accel and gyro" " configuration registers which could be one among range, BW or filter performance in reg address 0x40 " "and 0x42\r\n",
                rslt);
            break;
 8003aba:	e093      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CONFIG_LOAD:
            printf(
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4856      	ldr	r0, [pc, #344]	@ (8003c1c <bmi2_error_codes_print_result+0x2b8>)
 8003ac4:	f013 fb5a 	bl	801717c <iprintf>
                "Error [%d] : Configuration load error. It occurs when failure observed while loading the configuration " "into the sensor\r\n",
                rslt);
            break;
 8003ac8:	e08c      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_PAGE:
            printf(
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4853      	ldr	r0, [pc, #332]	@ (8003c20 <bmi2_error_codes_print_result+0x2bc>)
 8003ad2:	f013 fb53 	bl	801717c <iprintf>
                "Error [%d] : Invalid page error. It occurs due to failure in writing the correct feature configuration " "from selected page\r\n",
                rslt);
            break;
 8003ad6:	e085      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SET_APS_FAIL:
            printf(
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4851      	ldr	r0, [pc, #324]	@ (8003c24 <bmi2_error_codes_print_result+0x2c0>)
 8003ae0:	f013 fb4c 	bl	801717c <iprintf>
                "Error [%d] : APS failure error. It occurs due to failure in write of advance power mode configuration " "register\r\n",
                rslt);
            break;
 8003ae4:	e07e      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_INVALID_CFG:
            printf(
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	4619      	mov	r1, r3
 8003aec:	484e      	ldr	r0, [pc, #312]	@ (8003c28 <bmi2_error_codes_print_result+0x2c4>)
 8003aee:	f013 fb45 	bl	801717c <iprintf>
                "Error [%d] : Invalid AUX configuration error. It occurs when the auxiliary interface settings are not " "enabled properly\r\n",
                rslt);
            break;
 8003af2:	e077      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_BUSY:
            printf(
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	4619      	mov	r1, r3
 8003afa:	484c      	ldr	r0, [pc, #304]	@ (8003c2c <bmi2_error_codes_print_result+0x2c8>)
 8003afc:	f013 fb3e 	bl	801717c <iprintf>
                "Error [%d] : AUX busy error. It occurs when the auxiliary interface buses are engaged while configuring" " the AUX\r\n",
                rslt);
            break;
 8003b00:	e070      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_REMAP_ERROR:
            printf(
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4849      	ldr	r0, [pc, #292]	@ (8003c30 <bmi2_error_codes_print_result+0x2cc>)
 8003b0a:	f013 fb37 	bl	801717c <iprintf>
                "Error [%d] : Remap error. It occurs due to failure in assigning the remap axes data for all the axes " "after change in axis position\r\n",
                rslt);
            break;
 8003b0e:	e069      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYR_USER_GAIN_UPD_FAIL:
            printf(
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	4619      	mov	r1, r3
 8003b16:	4847      	ldr	r0, [pc, #284]	@ (8003c34 <bmi2_error_codes_print_result+0x2d0>)
 8003b18:	f013 fb30 	bl	801717c <iprintf>
                "Error [%d] : Gyro user gain update fail error. It occurs when the reading of user gain update status " "fails\r\n",
                rslt);
            break;
 8003b1c:	e062      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_NOT_DONE:
            printf(
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	4619      	mov	r1, r3
 8003b24:	4844      	ldr	r0, [pc, #272]	@ (8003c38 <bmi2_error_codes_print_result+0x2d4>)
 8003b26:	f013 fb29 	bl	801717c <iprintf>
                "Error [%d] : Self-test not done error. It occurs when the self-test process is ongoing or not " "completed\r\n",
                rslt);
            break;
 8003b2a:	e05b      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INPUT:
            printf("Error [%d] : Invalid input error. It occurs when the sensor input validity fails\r\n", rslt);
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4842      	ldr	r0, [pc, #264]	@ (8003c3c <bmi2_error_codes_print_result+0x2d8>)
 8003b34:	f013 fb22 	bl	801717c <iprintf>
            break;
 8003b38:	e054      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_STATUS:
            printf("Error [%d] : Invalid status error. It occurs when the feature/sensor validity fails\r\n", rslt);
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	483f      	ldr	r0, [pc, #252]	@ (8003c40 <bmi2_error_codes_print_result+0x2dc>)
 8003b42:	f013 fb1b 	bl	801717c <iprintf>
            break;
 8003b46:	e04d      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_ERROR:
            printf("Error [%d] : CRT error. It occurs when the CRT test has failed\r\n", rslt);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	483d      	ldr	r0, [pc, #244]	@ (8003c44 <bmi2_error_codes_print_result+0x2e0>)
 8003b50:	f013 fb14 	bl	801717c <iprintf>
            break;
 8003b54:	e046      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_ALREADY_RUNNING:
            printf(
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	483a      	ldr	r0, [pc, #232]	@ (8003c48 <bmi2_error_codes_print_result+0x2e4>)
 8003b5e:	f013 fb0d 	bl	801717c <iprintf>
                "Error [%d] : Self-test already running error. It occurs when the self-test is already running and " "another has been initiated\r\n",
                rslt);
            break;
 8003b62:	e03f      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_READY_FOR_DL_FAIL_ABORT:
            printf(
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4838      	ldr	r0, [pc, #224]	@ (8003c4c <bmi2_error_codes_print_result+0x2e8>)
 8003b6c:	f013 fb06 	bl	801717c <iprintf>
                "Error [%d] : CRT ready for download fail abort error. It occurs when download in CRT fails due to wrong " "address location\r\n",
                rslt);
            break;
 8003b70:	e038      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DL_ERROR:
            printf(
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	4619      	mov	r1, r3
 8003b78:	4835      	ldr	r0, [pc, #212]	@ (8003c50 <bmi2_error_codes_print_result+0x2ec>)
 8003b7a:	f013 faff 	bl	801717c <iprintf>
                "Error [%d] : Download error. It occurs when write length exceeds that of the maximum burst length\r\n",
                rslt);
            break;
 8003b7e:	e031      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_PRECON_ERROR:
            printf(
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	4619      	mov	r1, r3
 8003b86:	4833      	ldr	r0, [pc, #204]	@ (8003c54 <bmi2_error_codes_print_result+0x2f0>)
 8003b88:	f013 faf8 	bl	801717c <iprintf>
                "Error [%d] : Pre-conditional error. It occurs when precondition to start the feature was not " "completed\r\n",
                rslt);
            break;
 8003b8c:	e02a      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ABORT_ERROR:
            printf("Error [%d] : Abort error. It occurs when the device was shaken during CRT test\r\n", rslt);
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4830      	ldr	r0, [pc, #192]	@ (8003c58 <bmi2_error_codes_print_result+0x2f4>)
 8003b96:	f013 faf1 	bl	801717c <iprintf>
            break;
 8003b9a:	e023      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_WRITE_CYCLE_ONGOING:
            printf(
 8003b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	482e      	ldr	r0, [pc, #184]	@ (8003c5c <bmi2_error_codes_print_result+0x2f8>)
 8003ba4:	f013 faea 	bl	801717c <iprintf>
                "Error [%d] : Write cycle ongoing error. It occurs when the write cycle is already running and another " "has been initiated\r\n",
                rslt);
            break;
 8003ba8:	e01c      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_NOT_RUNING:
            printf(
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	482b      	ldr	r0, [pc, #172]	@ (8003c60 <bmi2_error_codes_print_result+0x2fc>)
 8003bb2:	f013 fae3 	bl	801717c <iprintf>
                "Error [%d] : Self-test is not running error. It occurs when self-test running is disabled while it's " "running\r\n",
                rslt);
            break;
 8003bb6:	e015      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DATA_RDY_INT_FAILED:
            printf(
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4829      	ldr	r0, [pc, #164]	@ (8003c64 <bmi2_error_codes_print_result+0x300>)
 8003bc0:	f013 fadc 	bl	801717c <iprintf>
                "Error [%d] : Data ready interrupt error. It occurs when the sample count exceeds the FOC sample limit " "and data ready status is not updated\r\n",
                rslt);
            break;
 8003bc4:	e00e      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_FOC_POSITION:
            printf(
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4826      	ldr	r0, [pc, #152]	@ (8003c68 <bmi2_error_codes_print_result+0x304>)
 8003bce:	f013 fad5 	bl	801717c <iprintf>
                "Error [%d] : Invalid FOC position error. It occurs when average FOC data is obtained for the wrong" " axes\r\n",
                rslt);
            break;
 8003bd2:	e007      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>

        default:
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4824      	ldr	r0, [pc, #144]	@ (8003c6c <bmi2_error_codes_print_result+0x308>)
 8003bdc:	f013 face 	bl	801717c <iprintf>
            break;
 8003be0:	e000      	b.n	8003be4 <bmi2_error_codes_print_result+0x280>
            break;
 8003be2:	bf00      	nop
    }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08019270 	.word	0x08019270
 8003bf0:	0801928c 	.word	0x0801928c
 8003bf4:	080192b0 	.word	0x080192b0
 8003bf8:	08019344 	.word	0x08019344
 8003bfc:	080193d4 	.word	0x080193d4
 8003c00:	08019434 	.word	0x08019434
 8003c04:	080194ac 	.word	0x080194ac
 8003c08:	0801951c 	.word	0x0801951c
 8003c0c:	0801959c 	.word	0x0801959c
 8003c10:	08019664 	.word	0x08019664
 8003c14:	08019724 	.word	0x08019724
 8003c18:	080197e0 	.word	0x080197e0
 8003c1c:	080198b8 	.word	0x080198b8
 8003c20:	08019934 	.word	0x08019934
 8003c24:	080199b0 	.word	0x080199b0
 8003c28:	08019a24 	.word	0x08019a24
 8003c2c:	08019aa0 	.word	0x08019aa0
 8003c30:	08019b14 	.word	0x08019b14
 8003c34:	08019b9c 	.word	0x08019b9c
 8003c38:	08019c0c 	.word	0x08019c0c
 8003c3c:	08019c78 	.word	0x08019c78
 8003c40:	08019ccc 	.word	0x08019ccc
 8003c44:	08019d24 	.word	0x08019d24
 8003c48:	08019d68 	.word	0x08019d68
 8003c4c:	08019de8 	.word	0x08019de8
 8003c50:	08019e64 	.word	0x08019e64
 8003c54:	08019ec8 	.word	0x08019ec8
 8003c58:	08019f34 	.word	0x08019f34
 8003c5c:	08019f88 	.word	0x08019f88
 8003c60:	0801a004 	.word	0x0801a004
 8003c64:	0801a074 	.word	0x0801a074
 8003c68:	0801a104 	.word	0x0801a104
 8003c6c:	0801a170 	.word	0x0801a170

08003c70 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <bmi160_get_regs+0x24>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8003c94:	23ff      	movs	r3, #255	@ 0xff
 8003c96:	75fb      	strb	r3, [r7, #23]
 8003c98:	e017      	b.n	8003cca <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8003c9a:	89bb      	ldrh	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8003ca0:	23f4      	movs	r3, #244	@ 0xf4
 8003ca2:	75fb      	strb	r3, [r7, #23]
 8003ca4:	e011      	b.n	8003cca <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	789b      	ldrb	r3, [r3, #2]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d103      	bne.n	8003cb6 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cb4:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69dc      	ldr	r4, [r3, #28]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7858      	ldrb	r0, [r3, #1]
 8003cbe:	89bb      	ldrh	r3, [r7, #12]
 8003cc0:	7bf9      	ldrb	r1, [r7, #15]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	47a0      	blx	r4
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8003cd6:	b590      	push	{r4, r7, lr}
 8003cd8:	b087      	sub	sp, #28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <bmi160_set_regs+0x28>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8003cfe:	23ff      	movs	r3, #255	@ 0xff
 8003d00:	75fb      	strb	r3, [r7, #23]
 8003d02:	e045      	b.n	8003d90 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8003d04:	89bb      	ldrh	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8003d0a:	23f4      	movs	r3, #244	@ 0xf4
 8003d0c:	75fb      	strb	r3, [r7, #23]
 8003d0e:	e03f      	b.n	8003d90 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	789b      	ldrb	r3, [r3, #2]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d103      	bne.n	8003d20 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1e:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7a1b      	ldrb	r3, [r3, #8]
 8003d24:	2b11      	cmp	r3, #17
 8003d26:	d003      	beq.n	8003d30 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8003d2c:	2b15      	cmp	r3, #21
 8003d2e:	d124      	bne.n	8003d7a <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1c      	ldr	r4, [r3, #32]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7858      	ldrb	r0, [r3, #1]
 8003d38:	89bb      	ldrh	r3, [r7, #12]
 8003d3a:	7bf9      	ldrb	r1, [r7, #15]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	47a0      	blx	r4
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	2001      	movs	r0, #1
 8003d4a:	4798      	blx	r3
 8003d4c:	e01a      	b.n	8003d84 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1c      	ldr	r4, [r3, #32]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7858      	ldrb	r0, [r3, #1]
 8003d56:	7dbb      	ldrb	r3, [r7, #22]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	7bf9      	ldrb	r1, [r7, #15]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	47a0      	blx	r4
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	2001      	movs	r0, #1
 8003d72:	4798      	blx	r3
            for (; count < len; count++)
 8003d74:	7dbb      	ldrb	r3, [r7, #22]
 8003d76:	3301      	adds	r3, #1
 8003d78:	75bb      	strb	r3, [r7, #22]
 8003d7a:	7dbb      	ldrb	r3, [r7, #22]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	89ba      	ldrh	r2, [r7, #12]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d8e4      	bhi.n	8003d4e <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8003d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8003d8c:	23fe      	movs	r3, #254	@ 0xfe
 8003d8e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd90      	pop	{r4, r7, pc}

08003d9c <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8003da4:	2303      	movs	r3, #3
 8003da6:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fd3c 	bl	8004826 <null_ptr_check>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <bmi160_init+0x38>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	789b      	ldrb	r3, [r3, #2]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d108      	bne.n	8003dd4 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8003dc2:	f107 010d 	add.w	r1, r7, #13
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	207f      	movs	r0, #127	@ 0x7f
 8003dcc:	f7ff ff50 	bl	8003c70 <bmi160_get_regs>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8003dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d127      	bne.n	8003e2c <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8003de2:	e007      	b.n	8003df4 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	2024      	movs	r0, #36	@ 0x24
 8003dec:	f7ff ff40 	bl	8003c70 <bmi160_get_regs>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8003df4:	7bbb      	ldrb	r3, [r7, #14]
 8003df6:	1e5a      	subs	r2, r3, #1
 8003df8:	73ba      	strb	r2, [r7, #14]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <bmi160_init+0x6a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2bd1      	cmp	r3, #209	@ 0xd1
 8003e04:	d1ee      	bne.n	8003de4 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <bmi160_init+0x8c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2bd1      	cmp	r3, #209	@ 0xd1
 8003e14:	d108      	bne.n	8003e28 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	22ff      	movs	r2, #255	@ 0xff
 8003e1a:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f80b 	bl	8003e38 <bmi160_soft_reset>
 8003e22:	4603      	mov	r3, r0
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	e001      	b.n	8003e2c <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8003e28:	23fd      	movs	r3, #253	@ 0xfd
 8003e2a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8003e40:	23b6      	movs	r3, #182	@ 0xb6
 8003e42:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <bmi160_soft_reset+0x1a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003e52:	23ff      	movs	r3, #255	@ 0xff
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	e024      	b.n	8003ea2 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8003e58:	f107 010e 	add.w	r1, r7, #14
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	207e      	movs	r0, #126	@ 0x7e
 8003e62:	f7ff ff38 	bl	8003cd6 <bmi160_set_regs>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	2001      	movs	r0, #1
 8003e70:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8003e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <bmi160_soft_reset+0x5c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	789b      	ldrb	r3, [r3, #2]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d108      	bne.n	8003e94 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8003e82:	f107 010e 	add.w	r1, r7, #14
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	207f      	movs	r0, #127	@ 0x7f
 8003e8c:	f7ff fef0 	bl	8003c70 <bmi160_get_regs>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8003e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fce2 	bl	8004866 <default_param_settg>
        }
    }

    return rslt;
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <bmi160_set_sens_conf+0x1a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003ec8:	23ff      	movs	r3, #255	@ 0xff
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	e01f      	b.n	8003f0e <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fcf3 	bl	80048ba <set_accel_conf>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d116      	bne.n	8003f0e <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fe2f 	bl	8004b44 <set_gyro_conf>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10d      	bne.n	8003f0e <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f811 	bl	8003f1a <bmi160_set_power_mode>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8003efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d104      	bne.n	8003f0e <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fde8 	bl	8004ada <check_invalid_settg>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <bmi160_set_power_mode+0x1a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8003f34:	23ff      	movs	r3, #255	@ 0xff
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e00d      	b.n	8003f56 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 ff0c 	bl	8004d58 <set_accel_pwr>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 ff9a 	bl	8004e86 <set_gyro_pwr>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8003f82:	7d7b      	ldrb	r3, [r7, #21]
 8003f84:	109b      	asrs	r3, r3, #2
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8003f8e:	7d7b      	ldrb	r3, [r7, #21]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8003f96:	7d3b      	ldrb	r3, [r7, #20]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d03c      	beq.n	8004020 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8003fa6:	7d7b      	ldrb	r3, [r7, #21]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d024      	beq.n	8003ff6 <bmi160_get_sensor_data+0x94>
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	dc34      	bgt.n	800401a <bmi160_get_sensor_data+0xb8>
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <bmi160_get_sensor_data+0x58>
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d00f      	beq.n	8003fd8 <bmi160_get_sensor_data+0x76>
 8003fb8:	e02f      	b.n	800401a <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003fc0:	23ff      	movs	r3, #255	@ 0xff
 8003fc2:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8003fc4:	e02e      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8003fc6:	7dbb      	ldrb	r3, [r7, #22]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 ff9e 	bl	8004f0e <get_accel_data>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	75fb      	strb	r3, [r7, #23]
                break;
 8003fd6:	e025      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8003fde:	23ff      	movs	r3, #255	@ 0xff
 8003fe0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8003fe2:	e01f      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8003fe4:	7dbb      	ldrb	r3, [r7, #22]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f85b 	bl	80050a6 <get_gyro_data>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]
                break;
 8003ff4:	e016      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <bmi160_get_sensor_data+0xa0>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004002:	23ff      	movs	r3, #255	@ 0xff
 8004004:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8004006:	e00d      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8004008:	7db8      	ldrb	r0, [r7, #22]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	f001 f997 	bl	8005342 <get_accel_gyro_data>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]
                break;
 8004018:	e004      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 800401a:	23fb      	movs	r3, #251	@ 0xfb
 800401c:	75fb      	strb	r3, [r7, #23]
                break;
 800401e:	e001      	b.n	8004024 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8004020:	23ff      	movs	r3, #255	@ 0xff
 8004022:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b0d      	cmp	r3, #13
 8004044:	d879      	bhi.n	800413a <bmi160_set_int_config+0x10a>
 8004046:	a201      	add	r2, pc, #4	@ (adr r2, 800404c <bmi160_set_int_config+0x1c>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	08004085 	.word	0x08004085
 8004050:	08004093 	.word	0x08004093
 8004054:	080040bd 	.word	0x080040bd
 8004058:	080040af 	.word	0x080040af
 800405c:	080040af 	.word	0x080040af
 8004060:	080040cb 	.word	0x080040cb
 8004064:	080040d9 	.word	0x080040d9
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040e7 	.word	0x080040e7
 8004070:	080040a1 	.word	0x080040a1
 8004074:	08004103 	.word	0x08004103
 8004078:	08004111 	.word	0x08004111
 800407c:	0800411f 	.word	0x0800411f
 8004080:	0800412d 	.word	0x0800412d
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f963 	bl	8004352 <set_accel_any_motion_int>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]
            break;
 8004090:	e054      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8004092:	6839      	ldr	r1, [r7, #0]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9f6 	bl	8004486 <set_accel_sig_motion_int>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
            break;
 800409e:	e04d      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa1d 	bl	80044e2 <set_accel_no_motion_int>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
            break;
 80040ac:	e046      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80040ae:	6839      	ldr	r1, [r7, #0]
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f97c 	bl	80043ae <set_accel_tap_int>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
            break;
 80040ba:	e03f      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa3d 	bl	800453e <set_accel_step_detect_int>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
            break;
 80040c8:	e038      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa77 	bl	80045c0 <set_accel_orientation_int>
 80040d2:	4603      	mov	r3, r0
 80040d4:	73fb      	strb	r3, [r7, #15]
            break;
 80040d6:	e031      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fab1 	bl	8004642 <set_accel_flat_detect_int>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]
            break;
 80040e4:	e02a      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 faeb 	bl	80046c4 <set_accel_low_g_int>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
            break;
 80040f2:	e023      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fb2f 	bl	800475a <set_accel_high_g_int>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
            break;
 8004100:	e01c      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f98b 	bl	8004420 <set_accel_gyro_data_ready_int>
 800410a:	4603      	mov	r3, r0
 800410c:	73fb      	strb	r3, [r7, #15]
            break;
 800410e:	e015      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f002 fd7d 	bl	8006c12 <set_fifo_full_int>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
            break;
 800411c:	e00e      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f002 fdde 	bl	8006ce2 <set_fifo_watermark_int>
 8004126:	4603      	mov	r3, r0
 8004128:	73fb      	strb	r3, [r7, #15]
            break;
 800412a:	e007      	b.n	800413c <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb5e 	bl	80047f0 <set_intr_pin_config>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
            break;
 8004138:	e000      	b.n	800413c <bmi160_set_int_config+0x10c>
        default:
            break;
 800413a:	bf00      	nop
    }

    return rslt;
 800413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fb66 	bl	8004826 <null_ptr_check>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 800415e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8004166:	23ff      	movs	r3, #255	@ 0xff
 8004168:	75fb      	strb	r3, [r7, #23]
 800416a:	e06b      	b.n	8004244 <bmi160_start_foc+0xfc>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f002 fe3f 	bl	8006df2 <configure_offset_enable>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8004178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d161      	bne.n	8004244 <bmi160_start_foc+0xfc>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004180:	f107 0116 	add.w	r1, r7, #22
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	2069      	movs	r0, #105	@ 0x69
 800418a:	f7ff fd71 	bl	8003c70 <bmi160_get_regs>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8004192:	7dbb      	ldrb	r3, [r7, #22]
 8004194:	b25b      	sxtb	r3, r3
 8004196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800419a:	b25a      	sxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	019b      	lsls	r3, r3, #6
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80041b4:	7dbb      	ldrb	r3, [r7, #22]
 80041b6:	b25b      	sxtb	r3, r3
 80041b8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80041bc:	b25a      	sxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	b25b      	sxtb	r3, r3
 80041c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80041d6:	7dbb      	ldrb	r3, [r7, #22]
 80041d8:	b25b      	sxtb	r3, r3
 80041da:	f023 030c 	bic.w	r3, r3, #12
 80041de:	b25a      	sxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	789b      	ldrb	r3, [r3, #2]
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80041f8:	7dbb      	ldrb	r3, [r7, #22]
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	f023 0303 	bic.w	r3, r3, #3
 8004200:	b25a      	sxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	78db      	ldrb	r3, [r3, #3]
 8004206:	b25b      	sxtb	r3, r3
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	b25b      	sxtb	r3, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	b25b      	sxtb	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8004216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d112      	bne.n	8004244 <bmi160_start_foc+0xfc>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800421e:	f107 0116 	add.w	r1, r7, #22
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	2069      	movs	r0, #105	@ 0x69
 8004228:	f7ff fd55 	bl	8003cd6 <bmi160_set_regs>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8004230:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <bmi160_start_foc+0xfc>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f002 fe25 	bl	8006e8a <trigger_foc>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800425a:	6838      	ldr	r0, [r7, #0]
 800425c:	f000 fae3 	bl	8004826 <null_ptr_check>
 8004260:	4603      	mov	r3, r0
 8004262:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004264:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800426c:	23ff      	movs	r3, #255	@ 0xff
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e069      	b.n	8004346 <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004272:	f107 010c 	add.w	r1, r7, #12
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2207      	movs	r2, #7
 800427a:	2071      	movs	r0, #113	@ 0x71
 800427c:	f7ff fcf8 	bl	8003c70 <bmi160_get_regs>
 8004280:	4603      	mov	r3, r0
 8004282:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004284:	7b3b      	ldrb	r3, [r7, #12]
 8004286:	b25a      	sxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 800428c:	7b7b      	ldrb	r3, [r7, #13]
 800428e:	b25a      	sxtb	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	b25a      	sxtb	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80042a0:	7cbb      	ldrb	r3, [r7, #18]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80042a8:	7f7b      	ldrb	r3, [r7, #29]
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	039b      	lsls	r3, r3, #14
 80042ae:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80042b0:	7fbb      	ldrb	r3, [r7, #30]
 80042b2:	b21b      	sxth	r3, r3
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80042b8:	8b7a      	ldrh	r2, [r7, #26]
 80042ba:	8b3b      	ldrh	r3, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80042c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da00      	bge.n	80042ca <bmi160_get_offsets+0x7a>
 80042c8:	333f      	adds	r3, #63	@ 0x3f
 80042ca:	119b      	asrs	r3, r3, #6
 80042cc:	b21a      	sxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80042d2:	7c3b      	ldrb	r3, [r7, #16]
 80042d4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80042d6:	7cbb      	ldrb	r3, [r7, #18]
 80042d8:	109b      	asrs	r3, r3, #2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80042e2:	7f7b      	ldrb	r3, [r7, #29]
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	039b      	lsls	r3, r3, #14
 80042e8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80042ea:	7fbb      	ldrb	r3, [r7, #30]
 80042ec:	b21b      	sxth	r3, r3
 80042ee:	019b      	lsls	r3, r3, #6
 80042f0:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80042f2:	8b7a      	ldrh	r2, [r7, #26]
 80042f4:	8b3b      	ldrh	r3, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80042fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da00      	bge.n	8004304 <bmi160_get_offsets+0xb4>
 8004302:	333f      	adds	r3, #63	@ 0x3f
 8004304:	119b      	asrs	r3, r3, #6
 8004306:	b21a      	sxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800430c:	7c7b      	ldrb	r3, [r7, #17]
 800430e:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8004310:	7cbb      	ldrb	r3, [r7, #18]
 8004312:	111b      	asrs	r3, r3, #4
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800431c:	7f7b      	ldrb	r3, [r7, #29]
 800431e:	b21b      	sxth	r3, r3
 8004320:	039b      	lsls	r3, r3, #14
 8004322:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004324:	7fbb      	ldrb	r3, [r7, #30]
 8004326:	b21b      	sxth	r3, r3
 8004328:	019b      	lsls	r3, r3, #6
 800432a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800432c:	8b7a      	ldrh	r2, [r7, #26]
 800432e:	8b3b      	ldrh	r3, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004334:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004338:	2b00      	cmp	r3, #0
 800433a:	da00      	bge.n	800433e <bmi160_get_offsets+0xee>
 800433c:	333f      	adds	r3, #63	@ 0x3f
 800433e:	119b      	asrs	r3, r3, #6
 8004340:	b21a      	sxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8004346:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800435c:	6838      	ldr	r0, [r7, #0]
 800435e:	f000 fa62 	bl	8004826 <null_ptr_check>
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <set_accel_any_motion_int+0x22>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004374:	23ff      	movs	r3, #255	@ 0xff
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	e013      	b.n	80043a2 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	68b8      	ldr	r0, [r7, #8]
 8004384:	f001 f920 	bl	80055c8 <enable_accel_any_motion_int>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d106      	bne.n	80043a2 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f001 fb4b 	bl	8005a34 <config_any_motion_int_settg>
 800439e:	4603      	mov	r3, r0
 80043a0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f000 fa34 	bl	8004826 <null_ptr_check>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80043c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <set_accel_tap_int+0x22>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d102      	bne.n	80043d6 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80043d0:	23ff      	movs	r3, #255	@ 0xff
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	e01e      	b.n	8004414 <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
 80043da:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f001 fe8d 	bl	8006100 <enable_tap_int>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80043ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d110      	bne.n	8004414 <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f9fb 	bl	80047f0 <set_intr_pin_config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80043fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f001 fecd 	bl	80061aa <config_tap_int_settg>
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800442a:	6838      	ldr	r0, [r7, #0]
 800442c:	f000 f9fb 	bl	8004826 <null_ptr_check>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <set_accel_gyro_data_ready_int+0x22>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004442:	23ff      	movs	r3, #255	@ 0xff
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e018      	b.n	800447a <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8004448:	6838      	ldr	r0, [r7, #0]
 800444a:	f001 fb2c 	bl	8005aa6 <enable_data_ready_int>
 800444e:	4603      	mov	r3, r0
 8004450:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f9c7 	bl	80047f0 <set_intr_pin_config>
 8004462:	4603      	mov	r3, r0
 8004464:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f001 f9df 	bl	8005834 <map_hardware_interrupt>
 8004476:	4603      	mov	r3, r0
 8004478:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800447a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004490:	6838      	ldr	r0, [r7, #0]
 8004492:	f000 f9c8 	bl	8004826 <null_ptr_check>
 8004496:	4603      	mov	r3, r0
 8004498:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <set_accel_sig_motion_int+0x22>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80044a8:	23ff      	movs	r3, #255	@ 0xff
 80044aa:	73fb      	strb	r3, [r7, #15]
 80044ac:	e013      	b.n	80044d6 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	68b8      	ldr	r0, [r7, #8]
 80044b8:	f001 fc4d 	bl	8005d56 <enable_sig_motion_int>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80044c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 fc83 	bl	8005dd8 <config_sig_motion_int_settg>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80044d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80044ec:	6838      	ldr	r0, [r7, #0]
 80044ee:	f000 f99a 	bl	8004826 <null_ptr_check>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <set_accel_no_motion_int+0x22>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004504:	23ff      	movs	r3, #255	@ 0xff
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e013      	b.n	8004532 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	68b8      	ldr	r0, [r7, #8]
 8004514:	f001 faf4 	bl	8005b00 <enable_no_motion_int>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800451c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f001 fb3e 	bl	8005baa <config_no_motion_int_settg>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004548:	6838      	ldr	r0, [r7, #0]
 800454a:	f000 f96c 	bl	8004826 <null_ptr_check>
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <set_accel_step_detect_int+0x22>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004560:	23ff      	movs	r3, #255	@ 0xff
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	e026      	b.n	80045b4 <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f001 fd0b 	bl	8005f8a <enable_step_detect_int>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d119      	bne.n	80045b4 <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f934 	bl	80047f0 <set_intr_pin_config>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800458c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10f      	bne.n	80045b4 <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 f8b8 	bl	800570c <map_feature_interrupt>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80045a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	68b8      	ldr	r0, [r7, #8]
 80045ac:	f001 fd27 	bl	8005ffe <config_step_detect>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80045b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80045ca:	6838      	ldr	r0, [r7, #0]
 80045cc:	f000 f92b 	bl	8004826 <null_ptr_check>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80045d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <set_accel_orientation_int+0x22>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80045e2:	23ff      	movs	r3, #255	@ 0xff
 80045e4:	73fb      	strb	r3, [r7, #15]
 80045e6:	e026      	b.n	8004636 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	68b8      	ldr	r0, [r7, #8]
 80045f2:	f001 fee1 	bl	80063b8 <enable_orient_int>
 80045f6:	4603      	mov	r3, r0
 80045f8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80045fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f8f3 	bl	80047f0 <set_intr_pin_config>
 800460a:	4603      	mov	r3, r0
 800460c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800460e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 f877 	bl	800570c <map_feature_interrupt>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f001 fefd 	bl	800642c <config_orient_int_settg>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800464c:	6838      	ldr	r0, [r7, #0]
 800464e:	f000 f8ea 	bl	8004826 <null_ptr_check>
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <set_accel_flat_detect_int+0x22>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004664:	23ff      	movs	r3, #255	@ 0xff
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	e026      	b.n	80046b8 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	68b8      	ldr	r0, [r7, #8]
 8004674:	f001 ff6d 	bl	8006552 <enable_flat_int>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800467c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d119      	bne.n	80046b8 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f8b2 	bl	80047f0 <set_intr_pin_config>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 f836 	bl	800570c <map_feature_interrupt>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80046a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f001 ff86 	bl	80065c0 <config_flat_int_settg>
 80046b4:	4603      	mov	r3, r0
 80046b6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80046b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80046ce:	6838      	ldr	r0, [r7, #0]
 80046d0:	f000 f8a9 	bl	8004826 <null_ptr_check>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80046d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <set_accel_low_g_int+0x22>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80046e6:	23ff      	movs	r3, #255	@ 0xff
 80046e8:	73fb      	strb	r3, [r7, #15]
 80046ea:	e030      	b.n	800474e <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f001 ffc0 	bl	800667a <enable_low_g_int>
 80046fa:	4603      	mov	r3, r0
 80046fc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80046fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d123      	bne.n	800474e <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f871 	bl	80047f0 <set_intr_pin_config>
 800470e:	4603      	mov	r3, r0
 8004710:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fff5 	bl	800570c <map_feature_interrupt>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f001 ffdc 	bl	80066ee <config_low_g_data_src>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 800473a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 8004742:	6839      	ldr	r1, [r7, #0]
 8004744:	68b8      	ldr	r0, [r7, #8]
 8004746:	f002 f809 	bl	800675c <config_low_g_int_settg>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800474e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004764:	6838      	ldr	r0, [r7, #0]
 8004766:	f000 f85e 	bl	8004826 <null_ptr_check>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800476e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <set_accel_high_g_int+0x22>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800477c:	23ff      	movs	r3, #255	@ 0xff
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e030      	b.n	80047e4 <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	68b8      	ldr	r0, [r7, #8]
 800478c:	f002 f83a 	bl	8006804 <enable_high_g_int>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d123      	bne.n	80047e4 <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f826 	bl	80047f0 <set_intr_pin_config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d119      	bne.n	80047e4 <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 ffaa 	bl	800570c <map_feature_interrupt>
 80047b8:	4603      	mov	r3, r0
 80047ba:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80047bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10f      	bne.n	80047e4 <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f002 f879 	bl	80068be <config_high_g_data_src>
 80047cc:	4603      	mov	r3, r0
 80047ce:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80047d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	68b8      	ldr	r0, [r7, #8]
 80047dc:	f002 f8a6 	bl	800692c <config_high_g_int_settg>
 80047e0:	4603      	mov	r3, r0
 80047e2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80047e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f002 f8d7 	bl	80069b0 <config_int_out_ctrl>
 8004802:	4603      	mov	r3, r0
 8004804:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 800480e:	6839      	ldr	r1, [r7, #0]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f002 f999 	bl	8006b48 <config_int_latch>
 8004816:	4603      	mov	r3, r0
 8004818:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <null_ptr_check+0x26>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <null_ptr_check+0x26>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <null_ptr_check+0x26>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 800484c:	23ff      	movs	r3, #255	@ 0xff
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e001      	b.n	8004856 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2208      	movs	r2, #8
 8004878:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2210      	movs	r2, #16
 800487e:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2203      	movs	r2, #3
 8004884:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2208      	movs	r2, #8
 8004890:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2214      	movs	r2, #20
 8004896:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6852      	ldr	r2, [r2, #4]
 80048a4:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68d2      	ldr	r2, [r2, #12]
 80048ac:	611a      	str	r2, [r3, #16]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80048c2:	2300      	movs	r3, #0
 80048c4:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f833 	bl	8004938 <check_accel_config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80048d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d126      	bne.n	800492c <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80048de:	f107 010c 	add.w	r1, r7, #12
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	2040      	movs	r0, #64	@ 0x40
 80048e8:	f7ff f9f5 	bl	8003cd6 <bmi160_set_regs>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80048f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d119      	bne.n	800492c <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	795a      	ldrb	r2, [r3, #5]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	79da      	ldrb	r2, [r3, #7]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	1c59      	adds	r1, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	2041      	movs	r0, #65	@ 0x41
 8004914:	f7ff f9df 	bl	8003cd6 <bmi160_set_regs>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	799a      	ldrb	r2, [r3, #6]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 800492c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2202      	movs	r2, #2
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	2040      	movs	r0, #64	@ 0x40
 800494a:	f7ff f991 	bl	8003c70 <bmi160_get_regs>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11b      	bne.n	8004992 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f81e 	bl	800499e <process_accel_odr>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d111      	bne.n	8004992 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f848 	bl	8004a06 <process_accel_bw>
 8004976:	4603      	mov	r3, r0
 8004978:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800497a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3301      	adds	r3, #1
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f872 	bl	8004a72 <process_accel_range>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	795b      	ldrb	r3, [r3, #5]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d81a      	bhi.n	80049f2 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	795a      	ldrb	r2, [r3, #5]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	7a5b      	ldrb	r3, [r3, #9]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d016      	beq.n	80049f6 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	795b      	ldrb	r3, [r3, #5]
 80049cc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f023 030f 	bic.w	r3, r3, #15
 80049d6:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80049d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	b25a      	sxtb	r2, r3
 80049e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e001      	b.n	80049f6 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80049f2:	23fc      	movs	r3, #252	@ 0xfc
 80049f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	79db      	ldrb	r3, [r3, #7]
 8004a20:	2b07      	cmp	r3, #7
 8004a22:	d81c      	bhi.n	8004a5e <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	79da      	ldrb	r2, [r3, #7]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	7adb      	ldrb	r3, [r3, #11]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d018      	beq.n	8004a62 <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	79db      	ldrb	r3, [r3, #7]
 8004a34:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8004a40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a4c:	b25a      	sxtb	r2, r3
 8004a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e001      	b.n	8004a62 <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004a5e:	23fc      	movs	r3, #252	@ 0xfc
 8004a60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	799b      	ldrb	r3, [r3, #6]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d81a      	bhi.n	8004ac6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	799a      	ldrb	r2, [r3, #6]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7a9b      	ldrb	r3, [r3, #10]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d016      	beq.n	8004aca <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	799b      	ldrb	r3, [r3, #6]
 8004aa0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	f023 030f 	bic.w	r3, r3, #15
 8004aaa:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8004aac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	b25a      	sxtb	r2, r3
 8004ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b25b      	sxtb	r3, r3
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e001      	b.n	8004aca <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004ac6:	23fc      	movs	r3, #252	@ 0xfc
 8004ac8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8004ae6:	f107 010e 	add.w	r1, r7, #14
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	2002      	movs	r0, #2
 8004af0:	f7ff f8be 	bl	8003c70 <bmi160_get_regs>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8004af8:	7bbb      	ldrb	r3, [r7, #14]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8004b00:	7bbb      	ldrb	r3, [r7, #14]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d102      	bne.n	8004b16 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8004b10:	23fa      	movs	r3, #250	@ 0xfa
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	e010      	b.n	8004b38 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d102      	bne.n	8004b22 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8004b1c:	23f9      	movs	r3, #249	@ 0xf9
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e00a      	b.n	8004b38 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d102      	bne.n	8004b2e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8004b28:	23f8      	movs	r3, #248	@ 0xf8
 8004b2a:	73fb      	strb	r3, [r7, #15]
 8004b2c:	e004      	b.n	8004b38 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	2b07      	cmp	r3, #7
 8004b32:	d101      	bne.n	8004b38 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8004b34:	23f7      	movs	r3, #247	@ 0xf7
 8004b36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8004b50:	f107 030c 	add.w	r3, r7, #12
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f833 	bl	8004bc2 <check_gyro_config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d126      	bne.n	8004bb6 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8004b68:	f107 010c 	add.w	r1, r7, #12
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	2042      	movs	r0, #66	@ 0x42
 8004b72:	f7ff f8b0 	bl	8003cd6 <bmi160_set_regs>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d119      	bne.n	8004bb6 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7b5a      	ldrb	r2, [r3, #13]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7bda      	ldrb	r2, [r3, #15]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2043      	movs	r0, #67	@ 0x43
 8004b9e:	f7ff f89a 	bl	8003cd6 <bmi160_set_regs>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7b9a      	ldrb	r2, [r3, #14]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8004bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	2042      	movs	r0, #66	@ 0x42
 8004bd4:	f7ff f84c 	bl	8003c70 <bmi160_get_regs>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11b      	bne.n	8004c1c <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f81e 	bl	8004c28 <process_gyro_odr>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d111      	bne.n	8004c1c <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f848 	bl	8004c90 <process_gyro_bw>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d107      	bne.n	8004c1c <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f86c 	bl	8004cf0 <process_gyro_range>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	7b5b      	ldrb	r3, [r3, #13]
 8004c42:	2b0d      	cmp	r3, #13
 8004c44:	d81a      	bhi.n	8004c7c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	7b5a      	ldrb	r2, [r3, #13]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	7c5b      	ldrb	r3, [r3, #17]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d016      	beq.n	8004c80 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	7b5b      	ldrb	r3, [r3, #13]
 8004c56:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	f023 030f 	bic.w	r3, r3, #15
 8004c60:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8004c62:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	b25a      	sxtb	r2, r3
 8004c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e001      	b.n	8004c80 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004c7c:	23fc      	movs	r3, #252	@ 0xfc
 8004c7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	7bdb      	ldrb	r3, [r3, #15]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d816      	bhi.n	8004cdc <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	7bdb      	ldrb	r3, [r3, #15]
 8004cb2:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004cbc:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8004cbe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cca:	b25a      	sxtb	r2, r3
 8004ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e001      	b.n	8004ce0 <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004cdc:	23fc      	movs	r3, #252	@ 0xfc
 8004cde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	7b9b      	ldrb	r3, [r3, #14]
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d81a      	bhi.n	8004d44 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	7b9a      	ldrb	r2, [r3, #14]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7c9b      	ldrb	r3, [r3, #18]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d016      	beq.n	8004d48 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	7b9b      	ldrb	r3, [r3, #14]
 8004d1e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f023 0307 	bic.w	r3, r3, #7
 8004d28:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8004d2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	b25a      	sxtb	r2, r3
 8004d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e001      	b.n	8004d48 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004d44:	23fc      	movs	r3, #252	@ 0xfc
 8004d46:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	791b      	ldrb	r3, [r3, #4]
 8004d6c:	2b0f      	cmp	r3, #15
 8004d6e:	d92b      	bls.n	8004dc8 <set_accel_pwr+0x70>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	791b      	ldrb	r3, [r3, #4]
 8004d74:	2b12      	cmp	r3, #18
 8004d76:	d827      	bhi.n	8004dc8 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	791a      	ldrb	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	7a1b      	ldrb	r3, [r3, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d024      	beq.n	8004dce <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8004d84:	f107 030e 	add.w	r3, r7, #14
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f826 	bl	8004ddc <process_under_sampling>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d118      	bne.n	8004dce <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1d19      	adds	r1, r3, #4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	207e      	movs	r0, #126	@ 0x7e
 8004da6:	f7fe ff96 	bl	8003cd6 <bmi160_set_regs>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7a1b      	ldrb	r3, [r3, #8]
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d103      	bne.n	8004dbe <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	2005      	movs	r0, #5
 8004dbc:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	791a      	ldrb	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004dc6:	e002      	b.n	8004dce <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8004dc8:	23f3      	movs	r3, #243	@ 0xf3
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	e000      	b.n	8004dd0 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004dce:	bf00      	nop
    }

    return rslt;
 8004dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8004dea:	2300      	movs	r3, #0
 8004dec:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	2040      	movs	r0, #64	@ 0x40
 8004df6:	f7fe ff3b 	bl	8003c70 <bmi160_get_regs>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d139      	bne.n	8004e7a <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	791b      	ldrb	r3, [r3, #4]
 8004e0a:	2b12      	cmp	r3, #18
 8004e0c:	d120      	bne.n	8004e50 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e16:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	2040      	movs	r0, #64	@ 0x40
 8004e2c:	f7fe ff53 	bl	8003cd6 <bmi160_set_regs>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8004e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11e      	bne.n	8004e7a <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8004e3c:	f107 010c 	add.w	r1, r7, #12
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2202      	movs	r2, #2
 8004e44:	2058      	movs	r0, #88	@ 0x58
 8004e46:	f7fe ff46 	bl	8003cd6 <bmi160_set_regs>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	e014      	b.n	8004e7a <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da0f      	bge.n	8004e7a <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e62:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7bba      	ldrb	r2, [r7, #14]
 8004e68:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	2040      	movs	r0, #64	@ 0x40
 8004e72:	f7fe ff30 	bl	8003cd6 <bmi160_set_regs>
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	7b1b      	ldrb	r3, [r3, #12]
 8004e96:	2b14      	cmp	r3, #20
 8004e98:	d007      	beq.n	8004eaa <set_gyro_pwr+0x24>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7b1b      	ldrb	r3, [r3, #12]
 8004e9e:	2b15      	cmp	r3, #21
 8004ea0:	d003      	beq.n	8004eaa <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004ea6:	2b17      	cmp	r3, #23
 8004ea8:	d129      	bne.n	8004efe <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	7b1a      	ldrb	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7c1b      	ldrb	r3, [r3, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d025      	beq.n	8004f02 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f103 010c 	add.w	r1, r3, #12
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	207e      	movs	r0, #126	@ 0x7e
 8004ec2:	f7fe ff08 	bl	8003cd6 <bmi160_set_regs>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7c1b      	ldrb	r3, [r3, #16]
 8004ece:	2b14      	cmp	r3, #20
 8004ed0:	d104      	bne.n	8004edc <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	2050      	movs	r0, #80	@ 0x50
 8004ed8:	4798      	blx	r3
 8004eda:	e00b      	b.n	8004ef4 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7c1b      	ldrb	r3, [r3, #16]
 8004ee0:	2b17      	cmp	r3, #23
 8004ee2:	d107      	bne.n	8004ef4 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004ee8:	2b15      	cmp	r3, #21
 8004eea:	d103      	bne.n	8004ef4 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	200a      	movs	r0, #10
 8004ef2:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	7b1a      	ldrb	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004efc:	e001      	b.n	8004f02 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8004efe:	23f3      	movs	r3, #243	@ 0xf3
 8004f00:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b08c      	sub	sp, #48	@ 0x30
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3306      	adds	r3, #6
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f107 0114 	add.w	r1, r7, #20
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2012      	movs	r0, #18
 8004f4c:	f7fe fe90 	bl	8003c70 <bmi160_get_regs>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8004f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 809a 	bne.w	8005094 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8004f60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004f6a:	3330      	adds	r3, #48	@ 0x30
 8004f6c:	443b      	add	r3, r7
 8004f6e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8004f76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004f80:	3330      	adds	r3, #48	@ 0x30
 8004f82:	443b      	add	r3, r7
 8004f84:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	b21a      	sxth	r2, r3
 8004f96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	8c3a      	ldrh	r2, [r7, #32]
 8004fa4:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8004fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004fb0:	3330      	adds	r3, #48	@ 0x30
 8004fb2:	443b      	add	r3, r7
 8004fb4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8004fbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004fc6:	3330      	adds	r3, #48	@ 0x30
 8004fc8:	443b      	add	r3, r7
 8004fca:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004fce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8004fd2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004fd6:	b21b      	sxth	r3, r3
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	b21a      	sxth	r2, r3
 8004fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	8c3a      	ldrh	r2, [r7, #32]
 8004fea:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8004fec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004ff6:	3330      	adds	r3, #48	@ 0x30
 8004ff8:	443b      	add	r3, r7
 8004ffa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005002:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800500c:	3330      	adds	r3, #48	@ 0x30
 800500e:	443b      	add	r3, r7
 8005010:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005018:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800501c:	b21b      	sxth	r3, r3
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	b21a      	sxth	r2, r3
 8005022:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005026:	b21b      	sxth	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	8c3a      	ldrh	r2, [r7, #32]
 8005030:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d129      	bne.n	800508c <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 8005038:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005042:	3330      	adds	r3, #48	@ 0x30
 8005044:	443b      	add	r3, r7
 8005046:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800504a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800504e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005058:	3330      	adds	r3, #48	@ 0x30
 800505a:	443b      	add	r3, r7
 800505c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005064:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800506e:	3330      	adds	r3, #48	@ 0x30
 8005070:	443b      	add	r3, r7
 8005072:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800507a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	431a      	orrs	r2, r3
 8005080:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005084:	431a      	orrs	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	e006      	b.n	800509a <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	e002      	b.n	800509a <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005094:	23fe      	movs	r3, #254	@ 0xfe
 8005096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800509a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3730      	adds	r7, #48	@ 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b08c      	sub	sp, #48	@ 0x30
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4603      	mov	r3, r0
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d17e      	bne.n	80051dc <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80050de:	f107 0110 	add.w	r1, r7, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2206      	movs	r2, #6
 80050e6:	200c      	movs	r0, #12
 80050e8:	f7fe fdc2 	bl	8003c70 <bmi160_get_regs>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80050f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d16c      	bne.n	80051d4 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80050fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005104:	3330      	adds	r3, #48	@ 0x30
 8005106:	443b      	add	r3, r7
 8005108:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800510c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005110:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800511a:	3330      	adds	r3, #48	@ 0x30
 800511c:	443b      	add	r3, r7
 800511e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005122:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005126:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800512a:	b21b      	sxth	r3, r3
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	b21a      	sxth	r2, r3
 8005130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005134:	b21b      	sxth	r3, r3
 8005136:	4313      	orrs	r3, r2
 8005138:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	8c3a      	ldrh	r2, [r7, #32]
 800513e:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005140:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800514a:	3330      	adds	r3, #48	@ 0x30
 800514c:	443b      	add	r3, r7
 800514e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005156:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005160:	3330      	adds	r3, #48	@ 0x30
 8005162:	443b      	add	r3, r7
 8005164:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800516c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005170:	b21b      	sxth	r3, r3
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	b21a      	sxth	r2, r3
 8005176:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800517a:	b21b      	sxth	r3, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	8c3a      	ldrh	r2, [r7, #32]
 8005184:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005186:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005190:	3330      	adds	r3, #48	@ 0x30
 8005192:	443b      	add	r3, r7
 8005194:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005198:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800519c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80051a6:	3330      	adds	r3, #48	@ 0x30
 80051a8:	443b      	add	r3, r7
 80051aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80051b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80051b6:	b21b      	sxth	r3, r3
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	8c3a      	ldrh	r2, [r7, #32]
 80051ca:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	e0b0      	b.n	8005336 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80051d4:	23fe      	movs	r3, #254	@ 0xfe
 80051d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80051da:	e0ac      	b.n	8005336 <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	330c      	adds	r3, #12
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	f107 0110 	add.w	r1, r7, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	200c      	movs	r0, #12
 80051ec:	f7fe fd40 	bl	8003c70 <bmi160_get_regs>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80051f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 8098 	bne.w	8005330 <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8005200:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800520a:	3330      	adds	r3, #48	@ 0x30
 800520c:	443b      	add	r3, r7
 800520e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005216:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005220:	3330      	adds	r3, #48	@ 0x30
 8005222:	443b      	add	r3, r7
 8005224:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800522c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005230:	b21b      	sxth	r3, r3
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b21a      	sxth	r2, r3
 8005236:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800523a:	b21b      	sxth	r3, r3
 800523c:	4313      	orrs	r3, r2
 800523e:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	8c3a      	ldrh	r2, [r7, #32]
 8005244:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005246:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005250:	3330      	adds	r3, #48	@ 0x30
 8005252:	443b      	add	r3, r7
 8005254:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800525c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005266:	3330      	adds	r3, #48	@ 0x30
 8005268:	443b      	add	r3, r7
 800526a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800526e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005272:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005276:	b21b      	sxth	r3, r3
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	b21a      	sxth	r2, r3
 800527c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005280:	b21b      	sxth	r3, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	8c3a      	ldrh	r2, [r7, #32]
 800528a:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800528c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005296:	3330      	adds	r3, #48	@ 0x30
 8005298:	443b      	add	r3, r7
 800529a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80052a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80052ac:	3330      	adds	r3, #48	@ 0x30
 80052ae:	443b      	add	r3, r7
 80052b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80052b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80052bc:	b21b      	sxth	r3, r3
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	b21a      	sxth	r2, r3
 80052c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	4313      	orrs	r3, r2
 80052ca:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	8c3a      	ldrh	r2, [r7, #32]
 80052d0:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80052d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052d6:	3306      	adds	r3, #6
 80052d8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 80052dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80052e6:	3330      	adds	r3, #48	@ 0x30
 80052e8:	443b      	add	r3, r7
 80052ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80052f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80052fc:	3330      	adds	r3, #48	@ 0x30
 80052fe:	443b      	add	r3, r7
 8005300:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005308:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005312:	3330      	adds	r3, #48	@ 0x30
 8005314:	443b      	add	r3, r7
 8005316:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800531e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	431a      	orrs	r2, r3
 8005324:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005328:	431a      	orrs	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	609a      	str	r2, [r3, #8]
 800532e:	e002      	b.n	8005336 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005330:	23fe      	movs	r3, #254	@ 0xfe
 8005332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 8005336:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800533a:	4618      	mov	r0, r3
 800533c:	3730      	adds	r7, #48	@ 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08c      	sub	sp, #48	@ 0x30
 8005346:	af00      	add	r7, sp, #0
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4603      	mov	r3, r0
 8005350:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005358:	f107 0310 	add.w	r3, r7, #16
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	b29b      	uxth	r3, r3
 800537a:	330c      	adds	r3, #12
 800537c:	b29a      	uxth	r2, r3
 800537e:	f107 0110 	add.w	r1, r7, #16
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	200c      	movs	r0, #12
 8005386:	f7fe fc73 	bl	8003c70 <bmi160_get_regs>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005390:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 810e 	bne.w	80055b6 <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 800539a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80053a4:	3330      	adds	r3, #48	@ 0x30
 80053a6:	443b      	add	r3, r7
 80053a8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80053b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80053ba:	3330      	adds	r3, #48	@ 0x30
 80053bc:	443b      	add	r3, r7
 80053be:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80053c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80053ca:	b21b      	sxth	r3, r3
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	b21a      	sxth	r2, r3
 80053d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8c3a      	ldrh	r2, [r7, #32]
 80053de:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80053e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80053ea:	3330      	adds	r3, #48	@ 0x30
 80053ec:	443b      	add	r3, r7
 80053ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80053f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005400:	3330      	adds	r3, #48	@ 0x30
 8005402:	443b      	add	r3, r7
 8005404:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800540c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005410:	b21b      	sxth	r3, r3
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	b21a      	sxth	r2, r3
 8005416:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800541a:	b21b      	sxth	r3, r3
 800541c:	4313      	orrs	r3, r2
 800541e:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8c3a      	ldrh	r2, [r7, #32]
 8005424:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005426:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005430:	3330      	adds	r3, #48	@ 0x30
 8005432:	443b      	add	r3, r7
 8005434:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800543c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005446:	3330      	adds	r3, #48	@ 0x30
 8005448:	443b      	add	r3, r7
 800544a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800544e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005452:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005456:	b21b      	sxth	r3, r3
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	b21a      	sxth	r2, r3
 800545c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005460:	b21b      	sxth	r3, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8c3a      	ldrh	r2, [r7, #32]
 800546a:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800546c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005476:	3330      	adds	r3, #48	@ 0x30
 8005478:	443b      	add	r3, r7
 800547a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005482:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800548c:	3330      	adds	r3, #48	@ 0x30
 800548e:	443b      	add	r3, r7
 8005490:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005498:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800549c:	b21b      	sxth	r3, r3
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054a6:	b21b      	sxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	8c3a      	ldrh	r2, [r7, #32]
 80054b0:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80054b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80054bc:	3330      	adds	r3, #48	@ 0x30
 80054be:	443b      	add	r3, r7
 80054c0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80054c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80054c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80054d2:	3330      	adds	r3, #48	@ 0x30
 80054d4:	443b      	add	r3, r7
 80054d6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80054da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80054de:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80054e2:	b21b      	sxth	r3, r3
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	b21a      	sxth	r2, r3
 80054e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054ec:	b21b      	sxth	r3, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	8c3a      	ldrh	r2, [r7, #32]
 80054f6:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80054f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005502:	3330      	adds	r3, #48	@ 0x30
 8005504:	443b      	add	r3, r7
 8005506:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800550e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005518:	3330      	adds	r3, #48	@ 0x30
 800551a:	443b      	add	r3, r7
 800551c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005524:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005528:	b21b      	sxth	r3, r3
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	b21a      	sxth	r2, r3
 800552e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005532:	b21b      	sxth	r3, r3
 8005534:	4313      	orrs	r3, r2
 8005536:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	8c3a      	ldrh	r2, [r7, #32]
 800553c:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d131      	bne.n	80055a8 <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 8005544:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800554e:	3330      	adds	r3, #48	@ 0x30
 8005550:	443b      	add	r3, r7
 8005552:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005556:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800555a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005564:	3330      	adds	r3, #48	@ 0x30
 8005566:	443b      	add	r3, r7
 8005568:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005570:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800557a:	3330      	adds	r3, #48	@ 0x30
 800557c:	443b      	add	r3, r7
 800557e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005586:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	431a      	orrs	r2, r3
 800558c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005590:	431a      	orrs	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005596:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	431a      	orrs	r2, r3
 800559c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]
 80055a6:	e009      	b.n	80055bc <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	e002      	b.n	80055bc <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80055b6:	23fe      	movs	r3, #254	@ 0xfe
 80055b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80055bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3730      	adds	r7, #48	@ 0x30
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80055da:	f107 010d 	add.w	r1, r7, #13
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	2050      	movs	r0, #80	@ 0x50
 80055e4:	f7fe fb44 	bl	8003c70 <bmi160_get_regs>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80055ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d153      	bne.n	800569c <enable_accel_any_motion_int+0xd4>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d03b      	beq.n	800567a <enable_accel_any_motion_int+0xb2>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 8005602:	7b7b      	ldrb	r3, [r7, #13]
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	4313      	orrs	r3, r2
 800561a:	b2db      	uxtb	r3, r3
 800561c:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800561e:	7b7b      	ldrb	r3, [r7, #13]
 8005620:	f023 0302 	bic.w	r3, r3, #2
 8005624:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	b25b      	sxtb	r3, r3
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	b25b      	sxtb	r3, r3
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	b25a      	sxtb	r2, r3
 800563c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005640:	4313      	orrs	r3, r2
 8005642:	b25b      	sxtb	r3, r3
 8005644:	b2db      	uxtb	r3, r3
 8005646:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8005648:	7b7b      	ldrb	r3, [r7, #13]
 800564a:	f023 0304 	bic.w	r3, r3, #4
 800564e:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	b25b      	sxtb	r3, r3
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	b25b      	sxtb	r3, r3
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	b25a      	sxtb	r2, r3
 8005666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800566a:	4313      	orrs	r3, r2
 800566c:	b25b      	sxtb	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	70da      	strb	r2, [r3, #3]
 8005678:	e007      	b.n	800568a <enable_accel_any_motion_int+0xc2>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 800567a:	7b7b      	ldrb	r3, [r7, #13]
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	b2db      	uxtb	r3, r3
 8005682:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	22ff      	movs	r2, #255	@ 0xff
 8005688:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800568a:	f107 010d 	add.w	r1, r7, #13
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2201      	movs	r2, #1
 8005692:	2050      	movs	r0, #80	@ 0x50
 8005694:	f7fe fb1f 	bl	8003cd6 <bmi160_set_regs>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800569c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80056b8:	f107 010d 	add.w	r1, r7, #13
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	2062      	movs	r0, #98	@ 0x62
 80056c2:	f7fe fad5 	bl	8003c70 <bmi160_get_regs>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80056ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d115      	bne.n	80056fe <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 80056d2:	7b7b      	ldrb	r3, [r7, #13]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	73bb      	strb	r3, [r7, #14]
        if (temp)
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 80056e0:	7b7b      	ldrb	r3, [r7, #13]
 80056e2:	f023 0302 	bic.w	r3, r3, #2
 80056e6:	73bb      	strb	r3, [r7, #14]
            data = temp;
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80056ec:	f107 010d 	add.w	r1, r7, #13
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	2062      	movs	r0, #98	@ 0x62
 80056f6:	f7fe faee 	bl	8003cd6 <bmi160_set_regs>
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80056fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 8005716:	f107 030c 	add.w	r3, r7, #12
 800571a:	2100      	movs	r1, #0
 800571c:	460a      	mov	r2, r1
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	460a      	mov	r2, r1
 8005722:	709a      	strb	r2, [r3, #2]
    uint8_t temp[3] = { 0, 0, 0 };
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	2100      	movs	r1, #0
 800572a:	460a      	mov	r2, r1
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	460a      	mov	r2, r1
 8005730:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005732:	f107 010c 	add.w	r1, r7, #12
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2203      	movs	r2, #3
 800573a:	2055      	movs	r0, #85	@ 0x55
 800573c:	f7fe fa98 	bl	8003c70 <bmi160_get_regs>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d16a      	bne.n	8005822 <map_feature_interrupt+0x116>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800574c:	7b3b      	ldrb	r3, [r7, #12]
 800574e:	b25a      	sxtb	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	4619      	mov	r1, r3
 8005756:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <map_feature_interrupt+0x124>)
 8005758:	5c5b      	ldrb	r3, [r3, r1]
 800575a:	b25b      	sxtb	r3, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	b25b      	sxtb	r3, r3
 8005760:	4013      	ands	r3, r2
 8005762:	b25b      	sxtb	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	b25a      	sxtb	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	4619      	mov	r1, r3
 8005772:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <map_feature_interrupt+0x124>)
 8005774:	5c5b      	ldrb	r3, [r3, r1]
 8005776:	b25b      	sxtb	r3, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	b25b      	sxtb	r3, r3
 800577c:	4013      	ands	r3, r2
 800577e:	b25b      	sxtb	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d83b      	bhi.n	8005804 <map_feature_interrupt+0xf8>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <map_feature_interrupt+0x88>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057af 	.word	0x080057af
 800579c:	080057c7 	.word	0x080057c7
 80057a0:	080057df 	.word	0x080057df
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80057a4:	7a3b      	ldrb	r3, [r7, #8]
 80057a6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80057a8:	7abb      	ldrb	r3, [r7, #10]
 80057aa:	73bb      	strb	r3, [r7, #14]
                break;
 80057ac:	e02c      	b.n	8005808 <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80057ae:	7a3a      	ldrb	r2, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	4619      	mov	r1, r3
 80057b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <map_feature_interrupt+0x124>)
 80057b8:	5c5b      	ldrb	r3, [r3, r1]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80057c0:	7abb      	ldrb	r3, [r7, #10]
 80057c2:	73bb      	strb	r3, [r7, #14]
                break;
 80057c4:	e020      	b.n	8005808 <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 80057c6:	7aba      	ldrb	r2, [r7, #10]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4b18      	ldr	r3, [pc, #96]	@ (8005830 <map_feature_interrupt+0x124>)
 80057d0:	5c5b      	ldrb	r3, [r3, r1]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 80057d8:	7a3b      	ldrb	r3, [r7, #8]
 80057da:	733b      	strb	r3, [r7, #12]
                break;
 80057dc:	e014      	b.n	8005808 <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80057de:	7a3a      	ldrb	r2, [r7, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	4619      	mov	r1, r3
 80057e6:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <map_feature_interrupt+0x124>)
 80057e8:	5c5b      	ldrb	r3, [r3, r1]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 80057f0:	7aba      	ldrb	r2, [r7, #10]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <map_feature_interrupt+0x124>)
 80057fa:	5c5b      	ldrb	r3, [r3, r1]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	73bb      	strb	r3, [r7, #14]
                break;
 8005802:	e001      	b.n	8005808 <map_feature_interrupt+0xfc>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005804:	23fc      	movs	r3, #252	@ 0xfc
 8005806:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d108      	bne.n	8005822 <map_feature_interrupt+0x116>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005810:	f107 010c 	add.w	r1, r7, #12
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2203      	movs	r2, #3
 8005818:	2055      	movs	r0, #85	@ 0x55
 800581a:	f7fe fa5c 	bl	8003cd6 <bmi160_set_regs>
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	0801c2a4 	.word	0x0801c2a4

08005834 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8005846:	f107 010d 	add.w	r1, r7, #13
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2201      	movs	r2, #1
 800584e:	2056      	movs	r0, #86	@ 0x56
 8005850:	f7fe fa0e 	bl	8003c70 <bmi160_get_regs>
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d168      	bne.n	8005932 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	461a      	mov	r2, r3
 8005866:	4b36      	ldr	r3, [pc, #216]	@ (8005940 <map_hardware_interrupt+0x10c>)
 8005868:	5c9b      	ldrb	r3, [r3, r2]
 800586a:	b25b      	sxtb	r3, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	b25a      	sxtb	r2, r3
 8005870:	7b7b      	ldrb	r3, [r7, #13]
 8005872:	b25b      	sxtb	r3, r3
 8005874:	4013      	ands	r3, r2
 8005876:	b25b      	sxtb	r3, r3
 8005878:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	461a      	mov	r2, r3
 8005880:	4b2f      	ldr	r3, [pc, #188]	@ (8005940 <map_hardware_interrupt+0x10c>)
 8005882:	5c9b      	ldrb	r3, [r3, r2]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	b2db      	uxtb	r3, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	b2db      	uxtb	r3, r3
 800588c:	b25a      	sxtb	r2, r3
 800588e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005892:	4013      	ands	r3, r2
 8005894:	b25b      	sxtb	r3, r3
 8005896:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d839      	bhi.n	8005914 <map_hardware_interrupt+0xe0>
 80058a0:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <map_hardware_interrupt+0x74>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058bf 	.word	0x080058bf
 80058b0:	080058d7 	.word	0x080058d7
 80058b4:	080058eb 	.word	0x080058eb
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	737b      	strb	r3, [r7, #13]
                break;
 80058bc:	e02c      	b.n	8005918 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	461a      	mov	r2, r3
 80058c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005940 <map_hardware_interrupt+0x10c>)
 80058c6:	5c9b      	ldrb	r3, [r3, r2]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	737b      	strb	r3, [r7, #13]
                break;
 80058d4:	e020      	b.n	8005918 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	461a      	mov	r2, r3
 80058dc:	4b18      	ldr	r3, [pc, #96]	@ (8005940 <map_hardware_interrupt+0x10c>)
 80058de:	5c9a      	ldrb	r2, [r3, r2]
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	737b      	strb	r3, [r7, #13]
                break;
 80058e8:	e016      	b.n	8005918 <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	461a      	mov	r2, r3
 80058f0:	4b13      	ldr	r3, [pc, #76]	@ (8005940 <map_hardware_interrupt+0x10c>)
 80058f2:	5c9a      	ldrb	r2, [r3, r2]
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	461a      	mov	r2, r3
 8005902:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <map_hardware_interrupt+0x10c>)
 8005904:	5c9b      	ldrb	r3, [r3, r2]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	b2da      	uxtb	r2, r3
 800590a:	7b7b      	ldrb	r3, [r7, #13]
 800590c:	4313      	orrs	r3, r2
 800590e:	b2db      	uxtb	r3, r3
 8005910:	737b      	strb	r3, [r7, #13]
                break;
 8005912:	e001      	b.n	8005918 <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005914:	23fc      	movs	r3, #252	@ 0xfc
 8005916:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8005920:	f107 010d 	add.w	r1, r7, #13
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	2056      	movs	r0, #86	@ 0x56
 800592a:	f7fe f9d4 	bl	8003cd6 <bmi160_set_regs>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	0801c2a4 	.word	0x0801c2a4

08005944 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005956:	f107 010d 	add.w	r1, r7, #13
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	2059      	movs	r0, #89	@ 0x59
 8005960:	f7fe f986 	bl	8003c70 <bmi160_get_regs>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11a      	bne.n	80059a6 <config_any_motion_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005970:	7b7b      	ldrb	r3, [r7, #13]
 8005972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005976:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	b25b      	sxtb	r3, r3
 8005984:	01db      	lsls	r3, r3, #7
 8005986:	b25a      	sxtb	r2, r3
 8005988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598c:	4313      	orrs	r3, r2
 800598e:	b25b      	sxtb	r3, r3
 8005990:	b2db      	uxtb	r3, r3
 8005992:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005994:	f107 010d 	add.w	r1, r7, #13
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2201      	movs	r2, #1
 800599c:	2059      	movs	r0, #89	@ 0x59
 800599e:	f7fe f99a 	bl	8003cd6 <bmi160_set_regs>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80059a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 80059c4:	2300      	movs	r3, #0
 80059c6:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 80059c8:	f107 010c 	add.w	r1, r7, #12
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	205f      	movs	r0, #95	@ 0x5f
 80059d2:	f7fe f94d 	bl	8003c70 <bmi160_get_regs>
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80059da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d122      	bne.n	8005a28 <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 80059ee:	7b3b      	ldrb	r3, [r7, #12]
 80059f0:	f023 0303 	bic.w	r3, r3, #3
 80059f4:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 80059f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80059fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80059fe:	b25a      	sxtb	r2, r3
 8005a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 8005a0c:	7b3b      	ldrb	r3, [r7, #12]
 8005a0e:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8005a16:	f107 0108 	add.w	r1, r7, #8
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	205f      	movs	r0, #95	@ 0x5f
 8005a20:	f7fe f959 	bl	8003cd6 <bmi160_set_regs>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7fe fed4 	bl	80047f0 <set_intr_pin_config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d122      	bne.n	8005a9a <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fe27 	bl	80056a8 <disable_sig_motion_int>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d119      	bne.n	8005a9a <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff fe4f 	bl	800570c <map_feature_interrupt>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10f      	bne.n	8005a9a <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f7ff ff61 	bl	8005944 <config_any_motion_src>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8005a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	68b8      	ldr	r0, [r7, #8]
 8005a92:	f7ff ff8e 	bl	80059b2 <config_any_dur_threshold>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8005a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005ab6:	f107 010d 	add.w	r1, r7, #13
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	2051      	movs	r0, #81	@ 0x51
 8005ac0:	f7fe f8d6 	bl	8003c70 <bmi160_get_regs>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d111      	bne.n	8005af4 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8005ad0:	7b7b      	ldrb	r3, [r7, #13]
 8005ad2:	f023 0310 	bic.w	r3, r3, #16
 8005ad6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	f043 0310 	orr.w	r3, r3, #16
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8005ae2:	f107 010d 	add.w	r1, r7, #13
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2051      	movs	r0, #81	@ 0x51
 8005aec:	f7fe f8f3 	bl	8003cd6 <bmi160_set_regs>
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005b12:	f107 010d 	add.w	r1, r7, #13
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2052      	movs	r0, #82	@ 0x52
 8005b1c:	f7fe f8a8 	bl	8003c70 <bmi160_get_regs>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d138      	bne.n	8005b9e <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 8005b3a:	7b7b      	ldrb	r3, [r7, #13]
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 8005b5a:	7b7b      	ldrb	r3, [r7, #13]
 8005b5c:	f023 0302 	bic.w	r3, r3, #2
 8005b60:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8005b7a:	7b7b      	ldrb	r3, [r7, #13]
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	f043 0304 	orr.w	r3, r3, #4
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005b8c:	f107 010d 	add.w	r1, r7, #13
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2201      	movs	r2, #1
 8005b94:	2052      	movs	r0, #82	@ 0x52
 8005b96:	f7fe f89e 	bl	8003cd6 <bmi160_set_regs>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7fe fe19 	bl	80047f0 <set_intr_pin_config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d119      	bne.n	8005bfe <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff fd9d 	bl	800570c <map_feature_interrupt>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	68b8      	ldr	r0, [r7, #8]
 8005be2:	f000 f812 	bl	8005c0a <config_no_motion_data_src>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	68b8      	ldr	r0, [r7, #8]
 8005bf6:	f000 f83f 	bl	8005c78 <config_no_motion_dur_thr>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005c1c:	f107 010d 	add.w	r1, r7, #13
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	2059      	movs	r0, #89	@ 0x59
 8005c26:	f7fe f823 	bl	8003c70 <bmi160_get_regs>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d11a      	bne.n	8005c6c <config_no_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005c36:	7b7b      	ldrb	r3, [r7, #13]
 8005c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	01db      	lsls	r3, r3, #7
 8005c4c:	b25a      	sxtb	r2, r3
 8005c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005c5a:	f107 010d 	add.w	r1, r7, #13
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	2059      	movs	r0, #89	@ 0x59
 8005c64:	f7fe f837 	bl	8003cd6 <bmi160_set_regs>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8005c8e:	2300      	movs	r3, #0
 8005c90:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8005c92:	235f      	movs	r3, #95	@ 0x5f
 8005c94:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8005c96:	f107 010b 	add.w	r1, r7, #11
 8005c9a:	7b38      	ldrb	r0, [r7, #12]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f7fd ffe6 	bl	8003c70 <bmi160_get_regs>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d14c      	bne.n	8005d4a <config_no_motion_dur_thr+0xd2>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	b25b      	sxtb	r3, r3
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	b25a      	sxtb	r2, r3
 8005cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b25b      	sxtb	r3, r3
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8005cd4:	f107 010b 	add.w	r1, r7, #11
 8005cd8:	7b38      	ldrb	r0, [r7, #12]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f7fd fffa 	bl	8003cd6 <bmi160_set_regs>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d12d      	bne.n	8005d4a <config_no_motion_dur_thr+0xd2>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8005cee:	2362      	movs	r3, #98	@ 0x62
 8005cf0:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8005cf2:	f107 010b 	add.w	r1, r7, #11
 8005cf6:	7b38      	ldrb	r0, [r7, #12]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f7fd ffb8 	bl	8003c70 <bmi160_get_regs>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11e      	bne.n	8005d4a <config_no_motion_dur_thr+0xd2>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8005d0c:	7afb      	ldrb	r3, [r7, #11]
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8005d20:	7bba      	ldrb	r2, [r7, #14]
 8005d22:	7b7b      	ldrb	r3, [r7, #13]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	789b      	ldrb	r3, [r3, #2]
 8005d32:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8005d34:	2361      	movs	r3, #97	@ 0x61
 8005d36:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8005d38:	f107 0108 	add.w	r1, r7, #8
 8005d3c:	7b38      	ldrb	r0, [r7, #12]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f7fd ffc8 	bl	8003cd6 <bmi160_set_regs>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005d68:	f107 010d 	add.w	r1, r7, #13
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	2050      	movs	r0, #80	@ 0x50
 8005d72:	f7fd ff7d 	bl	8003c70 <bmi160_get_regs>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d124      	bne.n	8005dcc <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00c      	beq.n	8005daa <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8005d90:	7b7b      	ldrb	r3, [r7, #13]
 8005d92:	f023 0307 	bic.w	r3, r3, #7
 8005d96:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	f043 0307 	orr.w	r3, r3, #7
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2201      	movs	r2, #1
 8005da6:	70da      	strb	r2, [r3, #3]
 8005da8:	e007      	b.n	8005dba <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8005daa:	7b7b      	ldrb	r3, [r7, #13]
 8005dac:	f023 0307 	bic.w	r3, r3, #7
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	22ff      	movs	r2, #255	@ 0xff
 8005db8:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005dba:	f107 010d 	add.w	r1, r7, #13
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	2050      	movs	r0, #80	@ 0x50
 8005dc4:	f7fd ff87 	bl	8003cd6 <bmi160_set_regs>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7fe fd02 	bl	80047f0 <set_intr_pin_config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8005df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d119      	bne.n	8005e2c <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fc86 	bl	800570c <map_feature_interrupt>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8005e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10f      	bne.n	8005e2c <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	68b8      	ldr	r0, [r7, #8]
 8005e10:	f000 f812 	bl	8005e38 <config_sig_motion_data_src>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8005e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	68b8      	ldr	r0, [r7, #8]
 8005e24:	f000 f83f 	bl	8005ea6 <config_sig_dur_threshold>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8005e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005e4a:	f107 010d 	add.w	r1, r7, #13
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2201      	movs	r2, #1
 8005e52:	2059      	movs	r0, #89	@ 0x59
 8005e54:	f7fd ff0c 	bl	8003c70 <bmi160_get_regs>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11a      	bne.n	8005e9a <config_sig_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005e64:	7b7b      	ldrb	r3, [r7, #13]
 8005e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e6a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	01db      	lsls	r3, r3, #7
 8005e7a:	b25a      	sxtb	r2, r3
 8005e7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005e88:	f107 010d 	add.w	r1, r7, #13
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	2059      	movs	r0, #89	@ 0x59
 8005e92:	f7fd ff20 	bl	8003cd6 <bmi160_set_regs>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 8005eba:	f107 010d 	add.w	r1, r7, #13
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	2060      	movs	r0, #96	@ 0x60
 8005ec4:	f7fd ff07 	bl	8003cd6 <bmi160_set_regs>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d154      	bne.n	8005f7e <config_sig_dur_threshold+0xd8>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005ed4:	f107 010d 	add.w	r1, r7, #13
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2201      	movs	r2, #1
 8005edc:	2062      	movs	r0, #98	@ 0x62
 8005ede:	f7fd fec7 	bl	8003c70 <bmi160_get_regs>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d147      	bne.n	8005f7e <config_sig_dur_threshold+0xd8>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	f023 030c 	bic.w	r3, r3, #12
 8005ef4:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	b25a      	sxtb	r2, r3
 8005f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	b25b      	sxtb	r3, r3
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8005f18:	7b7b      	ldrb	r3, [r7, #13]
 8005f1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005f1e:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	b25b      	sxtb	r3, r3
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f34:	b25a      	sxtb	r2, r3
 8005f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005f42:	7b7b      	ldrb	r3, [r7, #13]
 8005f44:	f023 0302 	bic.w	r3, r3, #2
 8005f48:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	b25b      	sxtb	r3, r3
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	b25a      	sxtb	r2, r3
 8005f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005f6c:	f107 010d 	add.w	r1, r7, #13
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2201      	movs	r2, #1
 8005f74:	2062      	movs	r0, #98	@ 0x62
 8005f76:	f7fd feae 	bl	8003cd6 <bmi160_set_regs>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005f9c:	f107 010d 	add.w	r1, r7, #13
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	2052      	movs	r0, #82	@ 0x52
 8005fa6:	f7fd fe63 	bl	8003c70 <bmi160_get_regs>
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11d      	bne.n	8005ff2 <enable_step_detect_int+0x68>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	f023 0308 	bic.w	r3, r3, #8
 8005fbc:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	b25a      	sxtb	r2, r3
 8005fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8005fe0:	f107 010d 	add.w	r1, r7, #13
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2052      	movs	r0, #82	@ 0x52
 8005fea:	f7fd fe74 	bl	8003cd6 <bmi160_set_regs>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 800600c:	2300      	movs	r3, #0
 800600e:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 800601e:	2315      	movs	r3, #21
 8006020:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8006022:	2303      	movs	r3, #3
 8006024:	737b      	strb	r3, [r7, #13]
 8006026:	e05c      	b.n	80060e2 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b40      	cmp	r3, #64	@ 0x40
 8006034:	d104      	bne.n	8006040 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8006036:	232d      	movs	r3, #45	@ 0x2d
 8006038:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 800603a:	2300      	movs	r3, #0
 800603c:	737b      	strb	r3, [r7, #13]
 800603e:	e050      	b.n	80060e2 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d104      	bne.n	8006058 <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 800604e:	231d      	movs	r3, #29
 8006050:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8006052:	2307      	movs	r3, #7
 8006054:	737b      	strb	r3, [r7, #13]
 8006056:	e044      	b.n	80060e2 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2bc0      	cmp	r3, #192	@ 0xc0
 8006064:	d13d      	bne.n	80060e2 <config_step_detect+0xe4>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8006066:	f107 010c 	add.w	r1, r7, #12
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2202      	movs	r2, #2
 800606e:	207a      	movs	r0, #122	@ 0x7a
 8006070:	f7fd fdfe 	bl	8003c70 <bmi160_get_regs>
 8006074:	4603      	mov	r3, r0
 8006076:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8006078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d130      	bne.n	80060e2 <config_step_detect+0xe4>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8006080:	7b3b      	ldrb	r3, [r7, #12]
 8006082:	f023 0318 	bic.w	r3, r3, #24
 8006086:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006090:	b2db      	uxtb	r3, r3
 8006092:	b25b      	sxtb	r3, r3
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	b25b      	sxtb	r3, r3
 8006098:	f003 0318 	and.w	r3, r3, #24
 800609c:	b25a      	sxtb	r2, r3
 800609e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 80060aa:	7b3b      	ldrb	r3, [r7, #12]
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 80060c6:	7b7b      	ldrb	r3, [r7, #13]
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	4313      	orrs	r3, r2
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 80060e2:	f107 010c 	add.w	r1, r7, #12
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2202      	movs	r2, #2
 80060ea:	207a      	movs	r0, #122	@ 0x7a
 80060ec:	f7fd fdf3 	bl	8003cd6 <bmi160_set_regs>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73bb      	strb	r3, [r7, #14]

    return rslt;
 80060f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006114:	f107 0115 	add.w	r1, r7, #21
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	2050      	movs	r0, #80	@ 0x50
 800611e:	f7fd fda7 	bl	8003c70 <bmi160_get_regs>
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d137      	bne.n	800619e <enable_tap_int+0x9e>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d115      	bne.n	8006162 <enable_tap_int+0x62>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8006136:	7d7b      	ldrb	r3, [r7, #21]
 8006138:	f023 0320 	bic.w	r3, r3, #32
 800613c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	b25b      	sxtb	r3, r3
 800614a:	015b      	lsls	r3, r3, #5
 800614c:	b25b      	sxtb	r3, r3
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	b25a      	sxtb	r2, r3
 8006154:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006158:	4313      	orrs	r3, r2
 800615a:	b25b      	sxtb	r3, r3
 800615c:	b2db      	uxtb	r3, r3
 800615e:	757b      	strb	r3, [r7, #21]
 8006160:	e014      	b.n	800618c <enable_tap_int+0x8c>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8006162:	7d7b      	ldrb	r3, [r7, #21]
 8006164:	f023 0310 	bic.w	r3, r3, #16
 8006168:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006172:	b2db      	uxtb	r3, r3
 8006174:	b25b      	sxtb	r3, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	b25b      	sxtb	r3, r3
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	b25a      	sxtb	r2, r3
 8006180:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006184:	4313      	orrs	r3, r2
 8006186:	b25b      	sxtb	r3, r3
 8006188:	b2db      	uxtb	r3, r3
 800618a:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800618c:	f107 0115 	add.w	r1, r7, #21
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	2050      	movs	r0, #80	@ 0x50
 8006196:	f7fd fd9e 	bl	8003cd6 <bmi160_set_regs>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800619e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7fe fb19 	bl	80047f0 <set_intr_pin_config>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80061c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d11a      	bne.n	8006200 <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fa9d 	bl	800570c <map_feature_interrupt>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80061d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d110      	bne.n	8006200 <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f000 f813 	bl	800620c <config_tap_data_src>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80061ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f842 	bl	8006280 <config_tap_param>
 80061fc:	4603      	mov	r3, r0
 80061fe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006200:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800621e:	f107 010d 	add.w	r1, r7, #13
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2201      	movs	r2, #1
 8006226:	2058      	movs	r0, #88	@ 0x58
 8006228:	f7fd fd22 	bl	8003c70 <bmi160_get_regs>
 800622c:	4603      	mov	r3, r0
 800622e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11d      	bne.n	8006274 <config_tap_data_src+0x68>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8006238:	7b7b      	ldrb	r3, [r7, #13]
 800623a:	f023 0308 	bic.w	r3, r3, #8
 800623e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006248:	b2db      	uxtb	r3, r3
 800624a:	b25b      	sxtb	r3, r3
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	b25b      	sxtb	r3, r3
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	b25a      	sxtb	r2, r3
 8006256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800625a:	4313      	orrs	r3, r2
 800625c:	b25b      	sxtb	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006262:	f107 010d 	add.w	r1, r7, #13
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	2058      	movs	r0, #88	@ 0x58
 800626c:	f7fd fd33 	bl	8003cd6 <bmi160_set_regs>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8006294:	2300      	movs	r3, #0
 8006296:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 800629c:	f107 0114 	add.w	r1, r7, #20
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	2063      	movs	r0, #99	@ 0x63
 80062a6:	f7fd fce3 	bl	8003c70 <bmi160_get_regs>
 80062aa:	4603      	mov	r3, r0
 80062ac:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80062ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d17a      	bne.n	80063ac <config_tap_param+0x12c>
    {
        data = data_array[count];
 80062b6:	7f3b      	ldrb	r3, [r7, #28]
 80062b8:	3320      	adds	r3, #32
 80062ba:	443b      	add	r3, r7
 80062bc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80062c0:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d113      	bne.n	80062f2 <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 80062d6:	7fbb      	ldrb	r3, [r7, #30]
 80062d8:	f023 0307 	bic.w	r3, r3, #7
 80062dc:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 80062de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	b25a      	sxtb	r2, r3
 80062e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b25b      	sxtb	r3, r3
 80062f0:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 80062fe:	7fbb      	ldrb	r3, [r7, #30]
 8006300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006304:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8006306:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800630a:	019b      	lsls	r3, r3, #6
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006312:	b25a      	sxtb	r2, r3
 8006314:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006318:	4313      	orrs	r3, r2
 800631a:	b25b      	sxtb	r3, r3
 800631c:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 800632a:	7fbb      	ldrb	r3, [r7, #30]
 800632c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006330:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8006332:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006336:	01db      	lsls	r3, r3, #7
 8006338:	b25a      	sxtb	r2, r3
 800633a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800633e:	4313      	orrs	r3, r2
 8006340:	b25b      	sxtb	r3, r3
 8006342:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006344:	7f3b      	ldrb	r3, [r7, #28]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	773a      	strb	r2, [r7, #28]
 800634a:	3320      	adds	r3, #32
 800634c:	443b      	add	r3, r7
 800634e:	7fba      	ldrb	r2, [r7, #30]
 8006350:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8006354:	7f3b      	ldrb	r3, [r7, #28]
 8006356:	3320      	adds	r3, #32
 8006358:	443b      	add	r3, r7
 800635a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800635e:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006368:	b2db      	uxtb	r3, r3
 800636a:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 800636c:	7fbb      	ldrb	r3, [r7, #30]
 800636e:	f023 031f 	bic.w	r3, r3, #31
 8006372:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8006374:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	b25a      	sxtb	r2, r3
 800637e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006382:	4313      	orrs	r3, r2
 8006384:	b25b      	sxtb	r3, r3
 8006386:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006388:	7f3b      	ldrb	r3, [r7, #28]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	773a      	strb	r2, [r7, #28]
 800638e:	3320      	adds	r3, #32
 8006390:	443b      	add	r3, r7
 8006392:	7fba      	ldrb	r2, [r7, #30]
 8006394:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8006398:	7f3b      	ldrb	r3, [r7, #28]
 800639a:	b29a      	uxth	r2, r3
 800639c:	f107 0114 	add.w	r1, r7, #20
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2063      	movs	r0, #99	@ 0x63
 80063a4:	f7fd fc97 	bl	8003cd6 <bmi160_set_regs>
 80063a8:	4603      	mov	r3, r0
 80063aa:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80063ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80063ca:	f107 010d 	add.w	r1, r7, #13
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2201      	movs	r2, #1
 80063d2:	2050      	movs	r0, #80	@ 0x50
 80063d4:	f7fd fc4c 	bl	8003c70 <bmi160_get_regs>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80063dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11d      	bne.n	8006420 <enable_orient_int+0x68>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 80063e4:	7b7b      	ldrb	r3, [r7, #13]
 80063e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ea:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	789b      	ldrb	r3, [r3, #2]
 80063f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	019b      	lsls	r3, r3, #6
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006400:	b25a      	sxtb	r2, r3
 8006402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006406:	4313      	orrs	r3, r2
 8006408:	b25b      	sxtb	r3, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800640e:	f107 010d 	add.w	r1, r7, #13
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2201      	movs	r2, #1
 8006416:	2050      	movs	r0, #80	@ 0x50
 8006418:	f7fd fc5d 	bl	8003cd6 <bmi160_set_regs>
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 800643e:	2300      	movs	r3, #0
 8006440:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006442:	f107 0108 	add.w	r1, r7, #8
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2202      	movs	r2, #2
 800644a:	2065      	movs	r0, #101	@ 0x65
 800644c:	f7fd fc10 	bl	8003c70 <bmi160_get_regs>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d174      	bne.n	8006546 <config_orient_int_settg+0x11a>
    {
        data = data_array[0];
 800645c:	7a3b      	ldrb	r3, [r7, #8]
 800645e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006470:	b2db      	uxtb	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	7b7b      	ldrb	r3, [r7, #13]
 8006476:	4313      	orrs	r3, r2
 8006478:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	f023 030c 	bic.w	r3, r3, #12
 8006480:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800648a:	b2db      	uxtb	r3, r3
 800648c:	b25b      	sxtb	r3, r3
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	b25b      	sxtb	r3, r3
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	b25a      	sxtb	r2, r3
 8006498:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800649c:	4313      	orrs	r3, r2
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	b25a      	sxtb	r2, r3
 80064ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80064be:	4313      	orrs	r3, r2
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80064c8:	7a7b      	ldrb	r3, [r7, #9]
 80064ca:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80064d2:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	7b7b      	ldrb	r3, [r7, #13]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	b25b      	sxtb	r3, r3
 80064fa:	019b      	lsls	r3, r3, #6
 80064fc:	b25b      	sxtb	r3, r3
 80064fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006502:	b25a      	sxtb	r2, r3
 8006504:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006508:	4313      	orrs	r3, r2
 800650a:	b25b      	sxtb	r3, r3
 800650c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006514:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	b25b      	sxtb	r3, r3
 8006522:	01db      	lsls	r3, r3, #7
 8006524:	b25a      	sxtb	r2, r3
 8006526:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800652a:	4313      	orrs	r3, r2
 800652c:	b25b      	sxtb	r3, r3
 800652e:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2202      	movs	r2, #2
 800653c:	2065      	movs	r0, #101	@ 0x65
 800653e:	f7fd fbca 	bl	8003cd6 <bmi160_set_regs>
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006564:	f107 010d 	add.w	r1, r7, #13
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2201      	movs	r2, #1
 800656c:	2050      	movs	r0, #80	@ 0x50
 800656e:	f7fd fb7f 	bl	8003c70 <bmi160_get_regs>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11a      	bne.n	80065b4 <enable_flat_int+0x62>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 800657e:	7b7b      	ldrb	r3, [r7, #13]
 8006580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006584:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	b25b      	sxtb	r3, r3
 8006592:	01db      	lsls	r3, r3, #7
 8006594:	b25a      	sxtb	r2, r3
 8006596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800659a:	4313      	orrs	r3, r2
 800659c:	b25b      	sxtb	r3, r3
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80065a2:	f107 010d 	add.w	r1, r7, #13
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2201      	movs	r2, #1
 80065aa:	2050      	movs	r0, #80	@ 0x50
 80065ac:	f7fd fb93 	bl	8003cd6 <bmi160_set_regs>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80065b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 80065d2:	2300      	movs	r3, #0
 80065d4:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 80065d6:	f107 0108 	add.w	r1, r7, #8
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2202      	movs	r2, #2
 80065de:	2067      	movs	r0, #103	@ 0x67
 80065e0:	f7fd fb46 	bl	8003c70 <bmi160_get_regs>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80065e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d13e      	bne.n	800666e <config_flat_int_settg+0xae>
    {
        data = data_array[0];
 80065f0:	7a3b      	ldrb	r3, [r7, #8]
 80065f2:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065fa:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	7b7b      	ldrb	r3, [r7, #13]
 800660a:	4313      	orrs	r3, r2
 800660c:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006612:	7a7b      	ldrb	r3, [r7, #9]
 8006614:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800661c:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006626:	b2db      	uxtb	r3, r3
 8006628:	b25b      	sxtb	r3, r3
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	b25b      	sxtb	r3, r3
 800662e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006632:	b25a      	sxtb	r2, r3
 8006634:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006638:	4313      	orrs	r3, r2
 800663a:	b25b      	sxtb	r3, r3
 800663c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	f023 0307 	bic.w	r3, r3, #7
 8006644:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800664e:	b2db      	uxtb	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	7b7b      	ldrb	r3, [r7, #13]
 8006654:	4313      	orrs	r3, r2
 8006656:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 800665c:	f107 0108 	add.w	r1, r7, #8
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2202      	movs	r2, #2
 8006664:	2067      	movs	r0, #103	@ 0x67
 8006666:	f7fd fb36 	bl	8003cd6 <bmi160_set_regs>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800666e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800668c:	f107 010d 	add.w	r1, r7, #13
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2201      	movs	r2, #1
 8006694:	2051      	movs	r0, #81	@ 0x51
 8006696:	f7fd faeb 	bl	8003c70 <bmi160_get_regs>
 800669a:	4603      	mov	r3, r0
 800669c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800669e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d11d      	bne.n	80066e2 <enable_low_g_int+0x68>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 80066a6:	7b7b      	ldrb	r3, [r7, #13]
 80066a8:	f023 0308 	bic.w	r3, r3, #8
 80066ac:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	789b      	ldrb	r3, [r3, #2]
 80066b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	b25a      	sxtb	r2, r3
 80066c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80066d0:	f107 010d 	add.w	r1, r7, #13
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2201      	movs	r2, #1
 80066d8:	2051      	movs	r0, #81	@ 0x51
 80066da:	f7fd fafc 	bl	8003cd6 <bmi160_set_regs>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80066e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006700:	f107 010d 	add.w	r1, r7, #13
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	2058      	movs	r0, #88	@ 0x58
 800670a:	f7fd fab1 	bl	8003c70 <bmi160_get_regs>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11a      	bne.n	8006750 <config_low_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 800671a:	7b7b      	ldrb	r3, [r7, #13]
 800671c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006720:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	789b      	ldrb	r3, [r3, #2]
 8006726:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800672a:	b2db      	uxtb	r3, r3
 800672c:	b25b      	sxtb	r3, r3
 800672e:	01db      	lsls	r3, r3, #7
 8006730:	b25a      	sxtb	r2, r3
 8006732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006736:	4313      	orrs	r3, r2
 8006738:	b25b      	sxtb	r3, r3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800673e:	f107 010d 	add.w	r1, r7, #13
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	2058      	movs	r0, #88	@ 0x58
 8006748:	f7fd fac5 	bl	8003cd6 <bmi160_set_regs>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 800676a:	f107 0308 	add.w	r3, r7, #8
 800676e:	2100      	movs	r1, #0
 8006770:	460a      	mov	r2, r1
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	460a      	mov	r2, r1
 8006776:	709a      	strb	r2, [r3, #2]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8006778:	f107 0308 	add.w	r3, r7, #8
 800677c:	1c99      	adds	r1, r3, #2
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2201      	movs	r2, #1
 8006782:	205c      	movs	r0, #92	@ 0x5c
 8006784:	f7fd fa74 	bl	8003c70 <bmi160_get_regs>
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800678c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d131      	bne.n	80067f8 <config_low_g_int_settg+0x9c>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8006794:	7abb      	ldrb	r3, [r7, #10]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	789b      	ldrb	r3, [r3, #2]
 80067a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80067b0:	7abb      	ldrb	r3, [r7, #10]
 80067b2:	f023 0304 	bic.w	r3, r3, #4
 80067b6:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	789b      	ldrb	r3, [r3, #2]
 80067bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	b25b      	sxtb	r3, r3
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	b25b      	sxtb	r3, r3
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	b25a      	sxtb	r2, r3
 80067ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 80067e6:	f107 0108 	add.w	r1, r7, #8
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2203      	movs	r2, #3
 80067ee:	205a      	movs	r0, #90	@ 0x5a
 80067f0:	f7fd fa71 	bl	8003cd6 <bmi160_set_regs>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80067f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006816:	f107 010d 	add.w	r1, r7, #13
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	2051      	movs	r0, #81	@ 0x51
 8006820:	f7fd fa26 	bl	8003c70 <bmi160_get_regs>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d140      	bne.n	80068b2 <enable_high_g_int+0xae>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8006830:	7b7b      	ldrb	r3, [r7, #13]
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	4313      	orrs	r3, r2
 8006848:	b2db      	uxtb	r3, r3
 800684a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800684c:	7b7b      	ldrb	r3, [r7, #13]
 800684e:	f023 0302 	bic.w	r3, r3, #2
 8006852:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800685c:	b2db      	uxtb	r3, r3
 800685e:	b25b      	sxtb	r3, r3
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	b25b      	sxtb	r3, r3
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	b25a      	sxtb	r2, r3
 800686a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800686e:	4313      	orrs	r3, r2
 8006870:	b25b      	sxtb	r3, r3
 8006872:	b2db      	uxtb	r3, r3
 8006874:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8006876:	7b7b      	ldrb	r3, [r7, #13]
 8006878:	f023 0304 	bic.w	r3, r3, #4
 800687c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	b25b      	sxtb	r3, r3
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	b25b      	sxtb	r3, r3
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	b25a      	sxtb	r2, r3
 8006894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006898:	4313      	orrs	r3, r2
 800689a:	b25b      	sxtb	r3, r3
 800689c:	b2db      	uxtb	r3, r3
 800689e:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80068a0:	f107 010d 	add.w	r1, r7, #13
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2201      	movs	r2, #1
 80068a8:	2051      	movs	r0, #81	@ 0x51
 80068aa:	f7fd fa14 	bl	8003cd6 <bmi160_set_regs>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80068b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80068d0:	f107 010d 	add.w	r1, r7, #13
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2201      	movs	r2, #1
 80068d8:	2058      	movs	r0, #88	@ 0x58
 80068da:	f7fd f9c9 	bl	8003c70 <bmi160_get_regs>
 80068de:	4603      	mov	r3, r0
 80068e0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80068e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d11a      	bne.n	8006920 <config_high_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80068ea:	7b7b      	ldrb	r3, [r7, #13]
 80068ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f0:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	01db      	lsls	r3, r3, #7
 8006900:	b25a      	sxtb	r2, r3
 8006902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006906:	4313      	orrs	r3, r2
 8006908:	b25b      	sxtb	r3, r3
 800690a:	b2db      	uxtb	r3, r3
 800690c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800690e:	f107 010d 	add.w	r1, r7, #13
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	2058      	movs	r0, #88	@ 0x58
 8006918:	f7fd f9dd 	bl	8003cd6 <bmi160_set_regs>
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	2100      	movs	r1, #0
 8006940:	460a      	mov	r2, r1
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	460a      	mov	r2, r1
 8006946:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8006948:	f107 0108 	add.w	r1, r7, #8
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2201      	movs	r2, #1
 8006950:	205c      	movs	r0, #92	@ 0x5c
 8006952:	f7fd f98d 	bl	8003c70 <bmi160_get_regs>
 8006956:	4603      	mov	r3, r0
 8006958:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d120      	bne.n	80069a4 <config_high_g_int_settg+0x78>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8006962:	7a3b      	ldrb	r3, [r7, #8]
 8006964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006968:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006972:	b2db      	uxtb	r3, r3
 8006974:	b25b      	sxtb	r3, r3
 8006976:	019b      	lsls	r3, r3, #6
 8006978:	b25a      	sxtb	r2, r3
 800697a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800697e:	4313      	orrs	r3, r2
 8006980:	b25b      	sxtb	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	789b      	ldrb	r3, [r3, #2]
 800698a:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8006992:	f107 0108 	add.w	r1, r7, #8
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2203      	movs	r2, #3
 800699a:	205c      	movs	r0, #92	@ 0x5c
 800699c:	f7fd f99b 	bl	8003cd6 <bmi160_set_regs>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80069a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80069c2:	f107 010f 	add.w	r1, r7, #15
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	2053      	movs	r0, #83	@ 0x53
 80069cc:	f7fd f950 	bl	8003c70 <bmi160_get_regs>
 80069d0:	4603      	mov	r3, r0
 80069d2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80069d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 80af 	bne.w	8006b3c <config_int_out_ctrl+0x18c>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3302      	adds	r3, #2
 80069e2:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d14d      	bne.n	8006a88 <config_int_out_ctrl+0xd8>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	f023 0308 	bic.w	r3, r3, #8
 80069f2:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	b25a      	sxtb	r2, r3
 8006a0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b25b      	sxtb	r3, r3
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	f023 0304 	bic.w	r3, r3, #4
 8006a1c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	b25b      	sxtb	r3, r3
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	b25a      	sxtb	r2, r3
 8006a34:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	b25b      	sxtb	r3, r3
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	f023 0302 	bic.w	r3, r3, #2
 8006a46:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	b25a      	sxtb	r2, r3
 8006a5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	7dbb      	ldrb	r3, [r7, #22]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	73fb      	strb	r3, [r7, #15]
 8006a86:	e050      	b.n	8006b2a <config_int_out_ctrl+0x17a>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a8e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	01db      	lsls	r3, r3, #7
 8006a9e:	b25a      	sxtb	r2, r3
 8006aa0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	b25b      	sxtb	r3, r3
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab2:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	b25b      	sxtb	r3, r3
 8006ac0:	019b      	lsls	r3, r3, #6
 8006ac2:	b25b      	sxtb	r3, r3
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	b25a      	sxtb	r2, r3
 8006aca:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	f023 0320 	bic.w	r3, r3, #32
 8006adc:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	015b      	lsls	r3, r3, #5
 8006aec:	b25b      	sxtb	r3, r3
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	b25a      	sxtb	r2, r3
 8006af4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	b25b      	sxtb	r3, r3
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	b25a      	sxtb	r2, r3
 8006b1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8006b2a:	f107 010f 	add.w	r1, r7, #15
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2201      	movs	r2, #1
 8006b32:	2053      	movs	r0, #83	@ 0x53
 8006b34:	f7fd f8cf 	bl	8003cd6 <bmi160_set_regs>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006b5a:	f107 010f 	add.w	r1, r7, #15
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	2054      	movs	r0, #84	@ 0x54
 8006b64:	f7fd f884 	bl	8003c70 <bmi160_get_regs>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d148      	bne.n	8006c06 <config_int_latch+0xbe>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3302      	adds	r3, #2
 8006b78:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d115      	bne.n	8006bae <config_int_latch+0x66>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	f023 0310 	bic.w	r3, r3, #16
 8006b88:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	f003 0310 	and.w	r3, r3, #16
 8006b9e:	b25a      	sxtb	r2, r3
 8006ba0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	b25b      	sxtb	r3, r3
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	73fb      	strb	r3, [r7, #15]
 8006bac:	e014      	b.n	8006bd8 <config_int_latch+0x90>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	f023 0320 	bic.w	r3, r3, #32
 8006bb4:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	015b      	lsls	r3, r3, #5
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	b25a      	sxtb	r2, r3
 8006bcc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	f023 030f 	bic.w	r3, r3, #15
 8006bde:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	7dbb      	ldrb	r3, [r7, #22]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8006bf4:	f107 010f 	add.w	r1, r7, #15
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	2054      	movs	r0, #84	@ 0x54
 8006bfe:	f7fd f86a 	bl	8003cd6 <bmi160_set_regs>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <set_fifo_full_int+0x1c>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006c2e:	23ff      	movs	r3, #255	@ 0xff
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e019      	b.n	8006c68 <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f81c 	bl	8006c74 <enable_fifo_full_int>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10f      	bne.n	8006c68 <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fd fdd0 	bl	80047f0 <set_intr_pin_config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fe fde8 	bl	8005834 <map_hardware_interrupt>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006c82:	f107 010e 	add.w	r1, r7, #14
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2051      	movs	r0, #81	@ 0x51
 8006c8c:	f7fc fff0 	bl	8003c70 <bmi160_get_regs>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11c      	bne.n	8006cd6 <enable_fifo_full_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	f023 0320 	bic.w	r3, r3, #32
 8006ca4:	b25a      	sxtb	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7a1b      	ldrb	r3, [r3, #8]
 8006caa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	015b      	lsls	r3, r3, #5
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	b25b      	sxtb	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006cc4:	f107 010e 	add.w	r1, r7, #14
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	2051      	movs	r0, #81	@ 0x51
 8006cce:	f7fd f802 	bl	8003cd6 <bmi160_set_regs>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <set_fifo_watermark_int+0x1c>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006cfe:	23ff      	movs	r3, #255	@ 0xff
 8006d00:	73fb      	strb	r3, [r7, #15]
 8006d02:	e019      	b.n	8006d38 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f81c 	bl	8006d44 <enable_fifo_wtm_int>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10f      	bne.n	8006d38 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fd fd68 	bl	80047f0 <set_intr_pin_config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe fd80 	bl	8005834 <map_hardware_interrupt>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006d52:	f107 010e 	add.w	r1, r7, #14
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	2051      	movs	r0, #81	@ 0x51
 8006d5c:	f7fc ff88 	bl	8003c70 <bmi160_get_regs>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11c      	bne.n	8006da6 <enable_fifo_wtm_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d74:	b25a      	sxtb	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	7a1b      	ldrb	r3, [r3, #8]
 8006d7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	019b      	lsls	r3, r3, #6
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	b25b      	sxtb	r3, r3
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	b25b      	sxtb	r3, r3
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006d94:	f107 010e 	add.w	r1, r7, #14
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	2051      	movs	r0, #81	@ 0x51
 8006d9e:	f7fc ff9a 	bl	8003cd6 <bmi160_set_regs>
 8006da2:	4603      	mov	r3, r0
 8006da4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 8006dbc:	f107 010e 	add.w	r1, r7, #14
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	201b      	movs	r0, #27
 8006dc6:	f7fc ff53 	bl	8003c70 <bmi160_get_regs>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	10db      	asrs	r3, r3, #3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8006de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8006dfc:	6838      	ldr	r0, [r7, #0]
 8006dfe:	f7fd fd12 	bl	8004826 <null_ptr_check>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8006e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8006e0e:	23ff      	movs	r3, #255	@ 0xff
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e034      	b.n	8006e7e <configure_offset_enable+0x8c>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8006e14:	f107 010e 	add.w	r1, r7, #14
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	2077      	movs	r0, #119	@ 0x77
 8006e1e:	f7fc ff27 	bl	8003c70 <bmi160_get_regs>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d127      	bne.n	8006e7e <configure_offset_enable+0x8c>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e36:	b25a      	sxtb	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	795b      	ldrb	r3, [r3, #5]
 8006e3c:	b25b      	sxtb	r3, r3
 8006e3e:	01db      	lsls	r3, r3, #7
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e52:	b25a      	sxtb	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	791b      	ldrb	r3, [r3, #4]
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	019b      	lsls	r3, r3, #6
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e62:	b25b      	sxtb	r3, r3
 8006e64:	4313      	orrs	r3, r2
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8006e6c:	f107 010e 	add.w	r1, r7, #14
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	2077      	movs	r0, #119	@ 0x77
 8006e76:	f7fc ff2e 	bl	8003cd6 <bmi160_set_regs>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b088      	sub	sp, #32
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8006ea0:	f107 011c 	add.w	r1, r7, #28
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	207e      	movs	r0, #126	@ 0x7e
 8006eaa:	f7fc ff14 	bl	8003cd6 <bmi160_set_regs>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d141      	bne.n	8006f3e <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 8006eba:	f107 031d 	add.w	r3, r7, #29
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff76 	bl	8006db2 <get_foc_status>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 8006eca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d112      	bne.n	8006ef8 <trigger_foc+0x6e>
 8006ed2:	7f7b      	ldrb	r3, [r7, #29]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d025      	beq.n	8006f24 <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8006ed8:	e00e      	b.n	8006ef8 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	2019      	movs	r0, #25
 8006ee0:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 8006ee2:	f107 031d 	add.w	r3, r7, #29
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ff62 	bl	8006db2 <get_foc_status>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	77fb      	strb	r3, [r7, #31]
                timeout++;
 8006ef2:	7fbb      	ldrb	r3, [r7, #30]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8006ef8:	7f7b      	ldrb	r3, [r7, #29]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d002      	beq.n	8006f04 <trigger_foc+0x7a>
 8006efe:	7fbb      	ldrb	r3, [r7, #30]
 8006f00:	2b1f      	cmp	r3, #31
 8006f02:	d9ea      	bls.n	8006eda <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 8006f04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <trigger_foc+0x96>
 8006f0c:	7f7b      	ldrb	r3, [r7, #29]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d106      	bne.n	8006f20 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fd f99b 	bl	8004250 <bmi160_get_offsets>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e001      	b.n	8006f24 <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8006f20:	23f5      	movs	r3, #245	@ 0xf5
 8006f22:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8006f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d108      	bne.n	8006f3e <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2214      	movs	r2, #20
 8006f34:	200c      	movs	r0, #12
 8006f36:	f7fc fe9b 	bl	8003c70 <bmi160_get_regs>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8006f3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8006f54:	f000 f970 	bl	8007238 <set_bmi160_Ares>
	set_bmi160_Gres();
 8006f58:	f000 f99a 	bl	8007290 <set_bmi160_Gres>
	get_bmi160_Ares();
 8006f5c:	f000 f9ca 	bl	80072f4 <get_bmi160_Ares>
	get_bmi160_Gres();
 8006f60:	f000 f9fe 	bl	8007360 <get_bmi160_Gres>

    sensor.id = 0;
 8006f64:	4b52      	ldr	r3, [pc, #328]	@ (80070b0 <BMI160_init+0x164>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8006f6a:	4b51      	ldr	r3, [pc, #324]	@ (80070b0 <BMI160_init+0x164>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8006f70:	4b4f      	ldr	r3, [pc, #316]	@ (80070b0 <BMI160_init+0x164>)
 8006f72:	4a50      	ldr	r2, [pc, #320]	@ (80070b4 <BMI160_init+0x168>)
 8006f74:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 8006f76:	4b4e      	ldr	r3, [pc, #312]	@ (80070b0 <BMI160_init+0x164>)
 8006f78:	4a4f      	ldr	r2, [pc, #316]	@ (80070b8 <BMI160_init+0x16c>)
 8006f7a:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8006f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80070b0 <BMI160_init+0x164>)
 8006f7e:	4a4f      	ldr	r2, [pc, #316]	@ (80070bc <BMI160_init+0x170>)
 8006f80:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 8006f82:	4b4b      	ldr	r3, [pc, #300]	@ (80070b0 <BMI160_init+0x164>)
 8006f84:	2220      	movs	r2, #32
 8006f86:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8006f88:	4849      	ldr	r0, [pc, #292]	@ (80070b0 <BMI160_init+0x164>)
 8006f8a:	f7fc ff55 	bl	8003e38 <bmi160_soft_reset>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 8006f92:	4b47      	ldr	r3, [pc, #284]	@ (80070b0 <BMI160_init+0x164>)
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	20c8      	movs	r0, #200	@ 0xc8
 8006f98:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 8006f9a:	4845      	ldr	r0, [pc, #276]	@ (80070b0 <BMI160_init+0x164>)
 8006f9c:	f7fc fefe 	bl	8003d9c <bmi160_init>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 8006fa4:	2324      	movs	r3, #36	@ 0x24
 8006fa6:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8006fac:	2301      	movs	r3, #1
 8006fae:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8006fb0:	89ba      	ldrh	r2, [r7, #12]
 8006fb2:	f107 010b 	add.w	r1, r7, #11
 8006fb6:	7bb8      	ldrb	r0, [r7, #14]
 8006fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80070b0 <BMI160_init+0x164>)
 8006fba:	f7fc fe59 	bl	8003c70 <bmi160_get_regs>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 8006fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80070b0 <BMI160_init+0x164>)
 8006fc4:	220b      	movs	r2, #11
 8006fc6:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 8006fc8:	4b39      	ldr	r3, [pc, #228]	@ (80070b0 <BMI160_init+0x164>)
 8006fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fcc:	2064      	movs	r0, #100	@ 0x64
 8006fce:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8006fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80070c0 <BMI160_init+0x174>)
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	4b36      	ldr	r3, [pc, #216]	@ (80070b0 <BMI160_init+0x164>)
 8006fd6:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 8006fd8:	4b35      	ldr	r3, [pc, #212]	@ (80070b0 <BMI160_init+0x164>)
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	2064      	movs	r0, #100	@ 0x64
 8006fde:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8006fe0:	4b33      	ldr	r3, [pc, #204]	@ (80070b0 <BMI160_init+0x164>)
 8006fe2:	2211      	movs	r2, #17
 8006fe4:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 8006fe6:	4b32      	ldr	r3, [pc, #200]	@ (80070b0 <BMI160_init+0x164>)
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	2064      	movs	r0, #100	@ 0x64
 8006fec:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 8006fee:	4b30      	ldr	r3, [pc, #192]	@ (80070b0 <BMI160_init+0x164>)
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 8006ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80070b0 <BMI160_init+0x164>)
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	2064      	movs	r0, #100	@ 0x64
 8006ffa:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8006ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80070b0 <BMI160_init+0x164>)
 8006ffe:	220b      	movs	r2, #11
 8007000:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8007002:	4b2b      	ldr	r3, [pc, #172]	@ (80070b0 <BMI160_init+0x164>)
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	2064      	movs	r0, #100	@ 0x64
 8007008:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 800700a:	4b2e      	ldr	r3, [pc, #184]	@ (80070c4 <BMI160_init+0x178>)
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	4b28      	ldr	r3, [pc, #160]	@ (80070b0 <BMI160_init+0x164>)
 8007010:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8007012:	4b27      	ldr	r3, [pc, #156]	@ (80070b0 <BMI160_init+0x164>)
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	2064      	movs	r0, #100	@ 0x64
 8007018:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800701a:	4b25      	ldr	r3, [pc, #148]	@ (80070b0 <BMI160_init+0x164>)
 800701c:	2215      	movs	r2, #21
 800701e:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8007020:	4b23      	ldr	r3, [pc, #140]	@ (80070b0 <BMI160_init+0x164>)
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	2064      	movs	r0, #100	@ 0x64
 8007026:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8007028:	4b21      	ldr	r3, [pc, #132]	@ (80070b0 <BMI160_init+0x164>)
 800702a:	2202      	movs	r2, #2
 800702c:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 800702e:	4b20      	ldr	r3, [pc, #128]	@ (80070b0 <BMI160_init+0x164>)
 8007030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007032:	2064      	movs	r0, #100	@ 0x64
 8007034:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8007036:	481e      	ldr	r0, [pc, #120]	@ (80070b0 <BMI160_init+0x164>)
 8007038:	f7fc ff39 	bl	8003eae <bmi160_set_sens_conf>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8007040:	f000 f844 	bl	80070cc <start_foc>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8007048:	4b1f      	ldr	r3, [pc, #124]	@ (80070c8 <BMI160_init+0x17c>)
 800704a:	2201      	movs	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 800704e:	4b1e      	ldr	r3, [pc, #120]	@ (80070c8 <BMI160_init+0x17c>)
 8007050:	220a      	movs	r2, #10
 8007052:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8007054:	4a1c      	ldr	r2, [pc, #112]	@ (80070c8 <BMI160_init+0x17c>)
 8007056:	7893      	ldrb	r3, [r2, #2]
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 800705e:	4a1a      	ldr	r2, [pc, #104]	@ (80070c8 <BMI160_init+0x17c>)
 8007060:	7893      	ldrb	r3, [r2, #2]
 8007062:	f023 0302 	bic.w	r3, r3, #2
 8007066:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8007068:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <BMI160_init+0x17c>)
 800706a:	7893      	ldrb	r3, [r2, #2]
 800706c:	f023 0304 	bic.w	r3, r3, #4
 8007070:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8007072:	4a15      	ldr	r2, [pc, #84]	@ (80070c8 <BMI160_init+0x17c>)
 8007074:	7893      	ldrb	r3, [r2, #2]
 8007076:	f043 0308 	orr.w	r3, r3, #8
 800707a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 800707c:	4a12      	ldr	r2, [pc, #72]	@ (80070c8 <BMI160_init+0x17c>)
 800707e:	7893      	ldrb	r3, [r2, #2]
 8007080:	f023 0310 	bic.w	r3, r3, #16
 8007084:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8007086:	4a10      	ldr	r2, [pc, #64]	@ (80070c8 <BMI160_init+0x17c>)
 8007088:	8853      	ldrh	r3, [r2, #2]
 800708a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800708e:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8007090:	4907      	ldr	r1, [pc, #28]	@ (80070b0 <BMI160_init+0x164>)
 8007092:	480d      	ldr	r0, [pc, #52]	@ (80070c8 <BMI160_init+0x17c>)
 8007094:	f7fc ffcc 	bl	8004030 <bmi160_set_int_config>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7bfa      	ldrb	r2, [r7, #15]
 80070a0:	761a      	strb	r2, [r3, #24]
    return rslt;
 80070a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	200001a4 	.word	0x200001a4
 80070b4:	0800741d 	.word	0x0800741d
 80070b8:	08007461 	.word	0x08007461
 80070bc:	080084b5 	.word	0x080084b5
 80070c0:	20000206 	.word	0x20000206
 80070c4:	20000207 	.word	0x20000207
 80070c8:	200001fc 	.word	0x200001fc

080070cc <start_foc>:

int8_t start_foc()
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 80070d6:	4b13      	ldr	r3, [pc, #76]	@ (8007124 <start_foc+0x58>)
 80070d8:	2201      	movs	r2, #1
 80070da:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 80070dc:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <start_foc+0x58>)
 80070de:	2203      	movs	r2, #3
 80070e0:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <start_foc+0x58>)
 80070e4:	2203      	movs	r2, #3
 80070e6:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 80070e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007124 <start_foc+0x58>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 80070ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007128 <start_foc+0x5c>)
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	2064      	movs	r0, #100	@ 0x64
 80070f4:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <start_foc+0x58>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 80070fc:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <start_foc+0x58>)
 80070fe:	2201      	movs	r2, #1
 8007100:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8007102:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <start_foc+0x5c>)
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	2064      	movs	r0, #100	@ 0x64
 8007108:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 800710a:	4a07      	ldr	r2, [pc, #28]	@ (8007128 <start_foc+0x5c>)
 800710c:	4907      	ldr	r1, [pc, #28]	@ (800712c <start_foc+0x60>)
 800710e:	4805      	ldr	r0, [pc, #20]	@ (8007124 <start_foc+0x58>)
 8007110:	f7fd f81a 	bl	8004148 <bmi160_start_foc>
 8007114:	4603      	mov	r3, r0
 8007116:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8007118:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	200001e8 	.word	0x200001e8
 8007128:	200001a4 	.word	0x200001a4
 800712c:	200001f0 	.word	0x200001f0

08007130 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	@ 0x28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8007138:	4b3a      	ldr	r3, [pc, #232]	@ (8007224 <bmi160ReadAccelGyro+0xf4>)
 800713a:	4a3b      	ldr	r2, [pc, #236]	@ (8007228 <bmi160ReadAccelGyro+0xf8>)
 800713c:	493b      	ldr	r1, [pc, #236]	@ (800722c <bmi160ReadAccelGyro+0xfc>)
 800713e:	2003      	movs	r0, #3
 8007140:	f7fc ff0f 	bl	8003f62 <bmi160_get_sensor_data>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 800714a:	4b38      	ldr	r3, [pc, #224]	@ (800722c <bmi160ReadAccelGyro+0xfc>)
 800714c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007158:	4b35      	ldr	r3, [pc, #212]	@ (8007230 <bmi160ReadAccelGyro+0x100>)
 800715a:	ed93 7a00 	vldr	s14, [r3]
 800715e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007162:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 8007166:	4b31      	ldr	r3, [pc, #196]	@ (800722c <bmi160ReadAccelGyro+0xfc>)
 8007168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007174:	4b2e      	ldr	r3, [pc, #184]	@ (8007230 <bmi160ReadAccelGyro+0x100>)
 8007176:	ed93 7a00 	vldr	s14, [r3]
 800717a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8007182:	4b2a      	ldr	r3, [pc, #168]	@ (800722c <bmi160ReadAccelGyro+0xfc>)
 8007184:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007190:	4b27      	ldr	r3, [pc, #156]	@ (8007230 <bmi160ReadAccelGyro+0x100>)
 8007192:	ed93 7a00 	vldr	s14, [r3]
 8007196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719a:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 800719e:	4b22      	ldr	r3, [pc, #136]	@ (8007228 <bmi160ReadAccelGyro+0xf8>)
 80071a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80071ac:	4b21      	ldr	r3, [pc, #132]	@ (8007234 <bmi160ReadAccelGyro+0x104>)
 80071ae:	ed93 7a00 	vldr	s14, [r3]
 80071b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b6:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 80071ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007228 <bmi160ReadAccelGyro+0xf8>)
 80071bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80071c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <bmi160ReadAccelGyro+0x104>)
 80071ca:	ed93 7a00 	vldr	s14, [r3]
 80071ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d2:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 80071d6:	4b14      	ldr	r3, [pc, #80]	@ (8007228 <bmi160ReadAccelGyro+0xf8>)
 80071d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80071e4:	4b13      	ldr	r3, [pc, #76]	@ (8007234 <bmi160ReadAccelGyro+0x104>)
 80071e6:	ed93 7a00 	vldr	s14, [r3]
 80071ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ee:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	615a      	str	r2, [r3, #20]

	return rslt;
 8007216:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800721a:	4618      	mov	r0, r3
 800721c:	3728      	adds	r7, #40	@ 0x28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	200001a4 	.word	0x200001a4
 8007228:	200001dc 	.word	0x200001dc
 800722c:	200001d0 	.word	0x200001d0
 8007230:	20000208 	.word	0x20000208
 8007234:	2000020c 	.word	0x2000020c

08007238 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 800723c:	4b12      	ldr	r3, [pc, #72]	@ (8007288 <set_bmi160_Ares+0x50>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	2b03      	cmp	r3, #3
 8007244:	d81a      	bhi.n	800727c <set_bmi160_Ares+0x44>
 8007246:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <set_bmi160_Ares+0x14>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	0800725d 	.word	0x0800725d
 8007250:	08007265 	.word	0x08007265
 8007254:	0800726d 	.word	0x0800726d
 8007258:	08007275 	.word	0x08007275
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 800725c:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <set_bmi160_Ares+0x54>)
 800725e:	2203      	movs	r2, #3
 8007260:	701a      	strb	r2, [r3, #0]
			break;
 8007262:	e00b      	b.n	800727c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8007264:	4b09      	ldr	r3, [pc, #36]	@ (800728c <set_bmi160_Ares+0x54>)
 8007266:	2205      	movs	r2, #5
 8007268:	701a      	strb	r2, [r3, #0]
			break;
 800726a:	e007      	b.n	800727c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 800726c:	4b07      	ldr	r3, [pc, #28]	@ (800728c <set_bmi160_Ares+0x54>)
 800726e:	2208      	movs	r2, #8
 8007270:	701a      	strb	r2, [r3, #0]
			break;
 8007272:	e003      	b.n	800727c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8007274:	4b05      	ldr	r3, [pc, #20]	@ (800728c <set_bmi160_Ares+0x54>)
 8007276:	220c      	movs	r2, #12
 8007278:	701a      	strb	r2, [r3, #0]
			break;
 800727a:	bf00      	nop
	}
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20000018 	.word	0x20000018
 800728c:	20000206 	.word	0x20000206

08007290 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8007294:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <set_bmi160_Gres+0x5c>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	2b04      	cmp	r3, #4
 800729c:	d820      	bhi.n	80072e0 <set_bmi160_Gres+0x50>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <set_bmi160_Gres+0x14>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072b9 	.word	0x080072b9
 80072a8:	080072c1 	.word	0x080072c1
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072d1 	.word	0x080072d1
 80072b4:	080072d9 	.word	0x080072d9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 80072b8:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <set_bmi160_Gres+0x60>)
 80072ba:	2204      	movs	r2, #4
 80072bc:	701a      	strb	r2, [r3, #0]
			break;
 80072be:	e00f      	b.n	80072e0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 80072c0:	4b0b      	ldr	r3, [pc, #44]	@ (80072f0 <set_bmi160_Gres+0x60>)
 80072c2:	2203      	movs	r2, #3
 80072c4:	701a      	strb	r2, [r3, #0]
			break;
 80072c6:	e00b      	b.n	80072e0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 80072c8:	4b09      	ldr	r3, [pc, #36]	@ (80072f0 <set_bmi160_Gres+0x60>)
 80072ca:	2202      	movs	r2, #2
 80072cc:	701a      	strb	r2, [r3, #0]
			break;
 80072ce:	e007      	b.n	80072e0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 80072d0:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <set_bmi160_Gres+0x60>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	701a      	strb	r2, [r3, #0]
			break;
 80072d6:	e003      	b.n	80072e0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <set_bmi160_Gres+0x60>)
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
			break;
 80072de:	bf00      	nop
	}
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000019 	.word	0x20000019
 80072f0:	20000207 	.word	0x20000207

080072f4 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <get_bmi160_Ares+0x64>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d826      	bhi.n	800734e <get_bmi160_Ares+0x5a>
 8007300:	a201      	add	r2, pc, #4	@ (adr r2, 8007308 <get_bmi160_Ares+0x14>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	0800731d 	.word	0x0800731d
 800730c:	08007327 	.word	0x08007327
 8007310:	08007331 	.word	0x08007331
 8007314:	0800733b 	.word	0x0800733b
 8007318:	08007345 	.word	0x08007345
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 800731c:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <get_bmi160_Ares+0x68>)
 800731e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007322:	601a      	str	r2, [r3, #0]
			break;
 8007324:	e013      	b.n	800734e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8007326:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <get_bmi160_Ares+0x68>)
 8007328:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800732c:	601a      	str	r2, [r3, #0]
			break;
 800732e:	e00e      	b.n	800734e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <get_bmi160_Ares+0x68>)
 8007332:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8007336:	601a      	str	r2, [r3, #0]
			break;
 8007338:	e009      	b.n	800734e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 800733a:	4b08      	ldr	r3, [pc, #32]	@ (800735c <get_bmi160_Ares+0x68>)
 800733c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8007340:	601a      	str	r2, [r3, #0]
			break;
 8007342:	e004      	b.n	800734e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <get_bmi160_Ares+0x68>)
 8007346:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800734a:	601a      	str	r2, [r3, #0]
			break;
 800734c:	bf00      	nop
	}
}
 800734e:	bf00      	nop
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	2000001a 	.word	0x2000001a
 800735c:	20000208 	.word	0x20000208

08007360 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8007364:	4b18      	ldr	r3, [pc, #96]	@ (80073c8 <get_bmi160_Gres+0x68>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b05      	cmp	r3, #5
 800736a:	d828      	bhi.n	80073be <get_bmi160_Gres+0x5e>
 800736c:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <get_bmi160_Gres+0x14>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	0800738d 	.word	0x0800738d
 8007378:	08007397 	.word	0x08007397
 800737c:	0800739f 	.word	0x0800739f
 8007380:	080073a7 	.word	0x080073a7
 8007384:	080073af 	.word	0x080073af
 8007388:	080073b7 	.word	0x080073b7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 800738c:	4b0f      	ldr	r3, [pc, #60]	@ (80073cc <get_bmi160_Gres+0x6c>)
 800738e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007392:	601a      	str	r2, [r3, #0]
			break;
 8007394:	e013      	b.n	80073be <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8007396:	4b0e      	ldr	r3, [pc, #56]	@ (80073d0 <get_bmi160_Gres+0x70>)
 8007398:	4a0e      	ldr	r2, [pc, #56]	@ (80073d4 <get_bmi160_Gres+0x74>)
 800739a:	601a      	str	r2, [r3, #0]
			break;
 800739c:	e00f      	b.n	80073be <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 800739e:	4b0c      	ldr	r3, [pc, #48]	@ (80073d0 <get_bmi160_Gres+0x70>)
 80073a0:	4a0d      	ldr	r2, [pc, #52]	@ (80073d8 <get_bmi160_Gres+0x78>)
 80073a2:	601a      	str	r2, [r3, #0]
			break;
 80073a4:	e00b      	b.n	80073be <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 80073a6:	4b0a      	ldr	r3, [pc, #40]	@ (80073d0 <get_bmi160_Gres+0x70>)
 80073a8:	4a0c      	ldr	r2, [pc, #48]	@ (80073dc <get_bmi160_Gres+0x7c>)
 80073aa:	601a      	str	r2, [r3, #0]
			break;
 80073ac:	e007      	b.n	80073be <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 80073ae:	4b08      	ldr	r3, [pc, #32]	@ (80073d0 <get_bmi160_Gres+0x70>)
 80073b0:	4a0b      	ldr	r2, [pc, #44]	@ (80073e0 <get_bmi160_Gres+0x80>)
 80073b2:	601a      	str	r2, [r3, #0]
			break;
 80073b4:	e003      	b.n	80073be <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 80073b6:	4b06      	ldr	r3, [pc, #24]	@ (80073d0 <get_bmi160_Gres+0x70>)
 80073b8:	4a0a      	ldr	r2, [pc, #40]	@ (80073e4 <get_bmi160_Gres+0x84>)
 80073ba:	601a      	str	r2, [r3, #0]
			break;
 80073bc:	bf00      	nop
	}
}
 80073be:	bf00      	nop
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	2000001b 	.word	0x2000001b
 80073cc:	20000208 	.word	0x20000208
 80073d0:	2000020c 	.word	0x2000020c
 80073d4:	43833333 	.word	0x43833333
 80073d8:	43033333 	.word	0x43033333
 80073dc:	42833333 	.word	0x42833333
 80073e0:	42033333 	.word	0x42033333
 80073e4:	41833333 	.word	0x41833333

080073e8 <bmi160_delay_us>:
		}
	}
}

void bmi160_delay_us(uint32_t period)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 80073f0:	e008      	b.n	8007404 <bmi160_delay_us+0x1c>
	{
		for(i = 0; i < 84; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e002      	b.n	80073fe <bmi160_delay_us+0x16>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b53      	cmp	r3, #83	@ 0x53
 8007402:	d9f9      	bls.n	80073f8 <bmi160_delay_us+0x10>
	while(period--)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f1      	bne.n	80073f2 <bmi160_delay_us+0xa>
		{
			;
		}
	}
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af02      	add	r7, sp, #8
 8007422:	603a      	str	r2, [r7, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	4603      	mov	r3, r0
 8007428:	71fb      	strb	r3, [r7, #7]
 800742a:	460b      	mov	r3, r1
 800742c:	71bb      	strb	r3, [r7, #6]
 800742e:	4613      	mov	r3, r2
 8007430:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8007432:	1dba      	adds	r2, r7, #6
 8007434:	2364      	movs	r3, #100	@ 0x64
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	2301      	movs	r3, #1
 800743a:	21d0      	movs	r1, #208	@ 0xd0
 800743c:	4807      	ldr	r0, [pc, #28]	@ (800745c <SensorAPI_I2Cx_Read+0x40>)
 800743e:	f003 f871 	bl	800a524 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8007442:	88bb      	ldrh	r3, [r7, #4]
 8007444:	2264      	movs	r2, #100	@ 0x64
 8007446:	9200      	str	r2, [sp, #0]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	21d0      	movs	r1, #208	@ 0xd0
 800744c:	4803      	ldr	r0, [pc, #12]	@ (800745c <SensorAPI_I2Cx_Read+0x40>)
 800744e:	f003 f981 	bl	800a754 <HAL_I2C_Master_Receive>
	return 0;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200004f0 	.word	0x200004f0

08007460 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af02      	add	r7, sp, #8
 8007466:	603a      	str	r2, [r7, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	4603      	mov	r3, r0
 800746c:	71fb      	strb	r3, [r7, #7]
 800746e:	460b      	mov	r3, r1
 8007470:	71bb      	strb	r3, [r7, #6]
 8007472:	4613      	mov	r3, r2
 8007474:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8007476:	4a0c      	ldr	r2, [pc, #48]	@ (80074a8 <SensorAPI_I2Cx_Write+0x48>)
 8007478:	79bb      	ldrb	r3, [r7, #6]
 800747a:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 800747c:	88bb      	ldrh	r3, [r7, #4]
 800747e:	461a      	mov	r2, r3
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	480a      	ldr	r0, [pc, #40]	@ (80074ac <SensorAPI_I2Cx_Write+0x4c>)
 8007484:	f010 f8bd 	bl	8017602 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8007488:	88bb      	ldrh	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	b29b      	uxth	r3, r3
 800748e:	2264      	movs	r2, #100	@ 0x64
 8007490:	9200      	str	r2, [sp, #0]
 8007492:	4a05      	ldr	r2, [pc, #20]	@ (80074a8 <SensorAPI_I2Cx_Write+0x48>)
 8007494:	21d0      	movs	r1, #208	@ 0xd0
 8007496:	4806      	ldr	r0, [pc, #24]	@ (80074b0 <SensorAPI_I2Cx_Write+0x50>)
 8007498:	f003 f844 	bl	800a524 <HAL_I2C_Master_Transmit>
	return 0;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000210 	.word	0x20000210
 80074ac:	20000211 	.word	0x20000211
 80074b0:	200004f0 	.word	0x200004f0

080074b4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80074bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80074cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4013      	ands	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80074ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4013      	ands	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800751c:	f000 ff7e 	bl	800841c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007520:	f000 f866 	bl	80075f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007524:	f000 f8ce 	bl	80076c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007528:	f000 f9ee 	bl	8007908 <MX_GPIO_Init>
  MX_DMA_Init();
 800752c:	f000 f9da 	bl	80078e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8007530:	f000 f8e6 	bl	8007700 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007534:	f000 f988 	bl	8007848 <MX_TIM2_Init>
  MX_I2C1_Init();
 8007538:	f000 f946 	bl	80077c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  test++;
 800753c:	4b1d      	ldr	r3, [pc, #116]	@ (80075b4 <main+0x9c>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	4b1b      	ldr	r3, [pc, #108]	@ (80075b4 <main+0x9c>)
 8007546:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_reading, 1);
 8007548:	2201      	movs	r2, #1
 800754a:	491b      	ldr	r1, [pc, #108]	@ (80075b8 <main+0xa0>)
 800754c:	481b      	ldr	r0, [pc, #108]	@ (80075bc <main+0xa4>)
 800754e:	f001 fb09 	bl	8008b64 <HAL_ADC_Start_DMA>
  test++;
 8007552:	4b18      	ldr	r3, [pc, #96]	@ (80075b4 <main+0x9c>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4b16      	ldr	r3, [pc, #88]	@ (80075b4 <main+0x9c>)
 800755c:	701a      	strb	r2, [r3, #0]
  status = HAL_TIM_Base_Start_IT(&htim2);
 800755e:	4818      	ldr	r0, [pc, #96]	@ (80075c0 <main+0xa8>)
 8007560:	f007 f88a 	bl	800e678 <HAL_TIM_Base_Start_IT>
 8007564:	4603      	mov	r3, r0
 8007566:	461a      	mov	r2, r3
 8007568:	4b16      	ldr	r3, [pc, #88]	@ (80075c4 <main+0xac>)
 800756a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800756c:	f00b fa94 	bl	8012a98 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of TransmitMutex */
  TransmitMutexHandle = osMutexNew(&TransmitMutex_attributes);
 8007570:	4815      	ldr	r0, [pc, #84]	@ (80075c8 <main+0xb0>)
 8007572:	f00b fc44 	bl	8012dfe <osMutexNew>
 8007576:	4603      	mov	r3, r0
 8007578:	4a14      	ldr	r2, [pc, #80]	@ (80075cc <main+0xb4>)
 800757a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (1, sizeof(uint8_t*), &AudioQueue_attributes);
 800757c:	4a14      	ldr	r2, [pc, #80]	@ (80075d0 <main+0xb8>)
 800757e:	2104      	movs	r1, #4
 8007580:	2001      	movs	r0, #1
 8007582:	f00b fd4a 	bl	801301a <osMessageQueueNew>
 8007586:	4603      	mov	r3, r0
 8007588:	4a12      	ldr	r2, [pc, #72]	@ (80075d4 <main+0xbc>)
 800758a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800758c:	4a12      	ldr	r2, [pc, #72]	@ (80075d8 <main+0xc0>)
 800758e:	2100      	movs	r1, #0
 8007590:	4812      	ldr	r0, [pc, #72]	@ (80075dc <main+0xc4>)
 8007592:	f00b facb 	bl	8012b2c <osThreadNew>
 8007596:	4603      	mov	r3, r0
 8007598:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <main+0xc8>)
 800759a:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_handler, NULL, &Task1_attributes);
 800759c:	4a11      	ldr	r2, [pc, #68]	@ (80075e4 <main+0xcc>)
 800759e:	2100      	movs	r1, #0
 80075a0:	4811      	ldr	r0, [pc, #68]	@ (80075e8 <main+0xd0>)
 80075a2:	f00b fac3 	bl	8012b2c <osThreadNew>
 80075a6:	4603      	mov	r3, r0
 80075a8:	4a10      	ldr	r2, [pc, #64]	@ (80075ec <main+0xd4>)
 80075aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80075ac:	f00b fa98 	bl	8012ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075b0:	bf00      	nop
 80075b2:	e7fd      	b.n	80075b0 <main+0x98>
 80075b4:	200005a2 	.word	0x200005a2
 80075b8:	200005a0 	.word	0x200005a0
 80075bc:	2000042c 	.word	0x2000042c
 80075c0:	20000544 	.word	0x20000544
 80075c4:	2000001c 	.word	0x2000001c
 80075c8:	0801c314 	.word	0x0801c314
 80075cc:	2000059c 	.word	0x2000059c
 80075d0:	0801c2fc 	.word	0x0801c2fc
 80075d4:	20000598 	.word	0x20000598
 80075d8:	0801c2b4 	.word	0x0801c2b4
 80075dc:	08007b5d 	.word	0x08007b5d
 80075e0:	20000590 	.word	0x20000590
 80075e4:	0801c2d8 	.word	0x0801c2d8
 80075e8:	08007bf1 	.word	0x08007bf1
 80075ec:	20000594 	.word	0x20000594

080075f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b09a      	sub	sp, #104	@ 0x68
 80075f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075f6:	f107 0320 	add.w	r3, r7, #32
 80075fa:	2248      	movs	r2, #72	@ 0x48
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f00f ff26 	bl	8017450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007604:	1d3b      	adds	r3, r7, #4
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	605a      	str	r2, [r3, #4]
 800760c:	609a      	str	r2, [r3, #8]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	611a      	str	r2, [r3, #16]
 8007612:	615a      	str	r2, [r3, #20]
 8007614:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007616:	4b2a      	ldr	r3, [pc, #168]	@ (80076c0 <SystemClock_Config+0xd0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800761e:	4a28      	ldr	r2, [pc, #160]	@ (80076c0 <SystemClock_Config+0xd0>)
 8007620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	4b26      	ldr	r3, [pc, #152]	@ (80076c0 <SystemClock_Config+0xd0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8007632:	2362      	movs	r3, #98	@ 0x62
 8007634:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800763a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800763c:	2301      	movs	r3, #1
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007640:	2301      	movs	r3, #1
 8007642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007644:	2340      	movs	r3, #64	@ 0x40
 8007646:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007648:	2300      	movs	r3, #0
 800764a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800764c:	2360      	movs	r3, #96	@ 0x60
 800764e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007650:	2302      	movs	r3, #2
 8007652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007654:	2301      	movs	r3, #1
 8007656:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007658:	2300      	movs	r3, #0
 800765a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800765c:	2320      	movs	r3, #32
 800765e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007660:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007666:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800766a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800766c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007670:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007672:	f107 0320 	add.w	r3, r7, #32
 8007676:	4618      	mov	r0, r3
 8007678:	f005 fd50 	bl	800d11c <HAL_RCC_OscConfig>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007682:	f000 fb9d 	bl	8007dc0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8007686:	236f      	movs	r3, #111	@ 0x6f
 8007688:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800768a:	2303      	movs	r3, #3
 800768c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800769a:	2380      	movs	r3, #128	@ 0x80
 800769c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	2103      	movs	r1, #3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f006 f8ac 	bl	800d804 <HAL_RCC_ClockConfig>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80076b2:	f000 fb85 	bl	8007dc0 <Error_Handler>
  }
}
 80076b6:	bf00      	nop
 80076b8:	3768      	adds	r7, #104	@ 0x68
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	58000400 	.word	0x58000400

080076c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b094      	sub	sp, #80	@ 0x50
 80076c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80076ca:	463b      	mov	r3, r7
 80076cc:	2250      	movs	r2, #80	@ 0x50
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f00f febd 	bl	8017450 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80076d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80076da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80076dc:	2300      	movs	r3, #0
 80076de:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80076e0:	2310      	movs	r3, #16
 80076e2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076e4:	463b      	mov	r3, r7
 80076e6:	4618      	mov	r0, r3
 80076e8:	f006 fce7 	bl	800e0ba <HAL_RCCEx_PeriphCLKConfig>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80076f2:	f000 fb65 	bl	8007dc0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80076f6:	bf00      	nop
 80076f8:	3750      	adds	r7, #80	@ 0x50
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007706:	463b      	mov	r3, r7
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	611a      	str	r2, [r3, #16]
 8007714:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007716:	4b29      	ldr	r3, [pc, #164]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007718:	4a29      	ldr	r2, [pc, #164]	@ (80077c0 <MX_ADC1_Init+0xc0>)
 800771a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800771c:	4b27      	ldr	r3, [pc, #156]	@ (80077bc <MX_ADC1_Init+0xbc>)
 800771e:	2200      	movs	r2, #0
 8007720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007722:	4b26      	ldr	r3, [pc, #152]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007724:	2200      	movs	r2, #0
 8007726:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007728:	4b24      	ldr	r3, [pc, #144]	@ (80077bc <MX_ADC1_Init+0xbc>)
 800772a:	2200      	movs	r2, #0
 800772c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800772e:	4b23      	ldr	r3, [pc, #140]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007730:	2200      	movs	r2, #0
 8007732:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007734:	4b21      	ldr	r3, [pc, #132]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007736:	2204      	movs	r2, #4
 8007738:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800773a:	4b20      	ldr	r3, [pc, #128]	@ (80077bc <MX_ADC1_Init+0xbc>)
 800773c:	2200      	movs	r2, #0
 800773e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007740:	4b1e      	ldr	r3, [pc, #120]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007742:	2201      	movs	r2, #1
 8007744:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007746:	4b1d      	ldr	r3, [pc, #116]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007748:	2201      	movs	r2, #1
 800774a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800774c:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <MX_ADC1_Init+0xbc>)
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007754:	4b19      	ldr	r3, [pc, #100]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007756:	2200      	movs	r2, #0
 8007758:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800775a:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <MX_ADC1_Init+0xbc>)
 800775c:	2200      	movs	r2, #0
 800775e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007760:	4b16      	ldr	r3, [pc, #88]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007768:	4b14      	ldr	r3, [pc, #80]	@ (80077bc <MX_ADC1_Init+0xbc>)
 800776a:	2200      	movs	r2, #0
 800776c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800776e:	4b13      	ldr	r3, [pc, #76]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007776:	4811      	ldr	r0, [pc, #68]	@ (80077bc <MX_ADC1_Init+0xbc>)
 8007778:	f001 f8a8 	bl	80088cc <HAL_ADC_Init>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8007782:	f000 fb1d 	bl	8007dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007786:	4b0f      	ldr	r3, [pc, #60]	@ (80077c4 <MX_ADC1_Init+0xc4>)
 8007788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800778a:	2306      	movs	r3, #6
 800778c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800778e:	2306      	movs	r3, #6
 8007790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007792:	237f      	movs	r3, #127	@ 0x7f
 8007794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007796:	2304      	movs	r3, #4
 8007798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800779e:	463b      	mov	r3, r7
 80077a0:	4619      	mov	r1, r3
 80077a2:	4806      	ldr	r0, [pc, #24]	@ (80077bc <MX_ADC1_Init+0xbc>)
 80077a4:	f001 fc40 	bl	8009028 <HAL_ADC_ConfigChannel>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80077ae:	f000 fb07 	bl	8007dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80077b2:	bf00      	nop
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	2000042c 	.word	0x2000042c
 80077c0:	50040000 	.word	0x50040000
 80077c4:	14f00020 	.word	0x14f00020

080077c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077cc:	4b1b      	ldr	r3, [pc, #108]	@ (800783c <MX_I2C1_Init+0x74>)
 80077ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007840 <MX_I2C1_Init+0x78>)
 80077d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80077d2:	4b1a      	ldr	r3, [pc, #104]	@ (800783c <MX_I2C1_Init+0x74>)
 80077d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007844 <MX_I2C1_Init+0x7c>)
 80077d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80077d8:	4b18      	ldr	r3, [pc, #96]	@ (800783c <MX_I2C1_Init+0x74>)
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077de:	4b17      	ldr	r3, [pc, #92]	@ (800783c <MX_I2C1_Init+0x74>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077e4:	4b15      	ldr	r3, [pc, #84]	@ (800783c <MX_I2C1_Init+0x74>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077ea:	4b14      	ldr	r3, [pc, #80]	@ (800783c <MX_I2C1_Init+0x74>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077f0:	4b12      	ldr	r3, [pc, #72]	@ (800783c <MX_I2C1_Init+0x74>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077f6:	4b11      	ldr	r3, [pc, #68]	@ (800783c <MX_I2C1_Init+0x74>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077fc:	4b0f      	ldr	r3, [pc, #60]	@ (800783c <MX_I2C1_Init+0x74>)
 80077fe:	2200      	movs	r2, #0
 8007800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007802:	480e      	ldr	r0, [pc, #56]	@ (800783c <MX_I2C1_Init+0x74>)
 8007804:	f002 fdf2 	bl	800a3ec <HAL_I2C_Init>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800780e:	f000 fad7 	bl	8007dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007812:	2100      	movs	r1, #0
 8007814:	4809      	ldr	r0, [pc, #36]	@ (800783c <MX_I2C1_Init+0x74>)
 8007816:	f003 fb39 	bl	800ae8c <HAL_I2CEx_ConfigAnalogFilter>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007820:	f000 face 	bl	8007dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007824:	2100      	movs	r1, #0
 8007826:	4805      	ldr	r0, [pc, #20]	@ (800783c <MX_I2C1_Init+0x74>)
 8007828:	f003 fb7b 	bl	800af22 <HAL_I2CEx_ConfigDigitalFilter>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007832:	f000 fac5 	bl	8007dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007836:	bf00      	nop
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200004f0 	.word	0x200004f0
 8007840:	40005400 	.word	0x40005400
 8007844:	10b17db5 	.word	0x10b17db5

08007848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800784e:	f107 0310 	add.w	r3, r7, #16
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	605a      	str	r2, [r3, #4]
 8007858:	609a      	str	r2, [r3, #8]
 800785a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800785c:	1d3b      	adds	r3, r7, #4
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007866:	4b1d      	ldr	r3, [pc, #116]	@ (80078dc <MX_TIM2_Init+0x94>)
 8007868:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800786c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800786e:	4b1b      	ldr	r3, [pc, #108]	@ (80078dc <MX_TIM2_Init+0x94>)
 8007870:	2200      	movs	r2, #0
 8007872:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007874:	4b19      	ldr	r3, [pc, #100]	@ (80078dc <MX_TIM2_Init+0x94>)
 8007876:	2200      	movs	r2, #0
 8007878:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2560000-1;
 800787a:	4b18      	ldr	r3, [pc, #96]	@ (80078dc <MX_TIM2_Init+0x94>)
 800787c:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <MX_TIM2_Init+0x98>)
 800787e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007880:	4b16      	ldr	r3, [pc, #88]	@ (80078dc <MX_TIM2_Init+0x94>)
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007886:	4b15      	ldr	r3, [pc, #84]	@ (80078dc <MX_TIM2_Init+0x94>)
 8007888:	2280      	movs	r2, #128	@ 0x80
 800788a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800788c:	4813      	ldr	r0, [pc, #76]	@ (80078dc <MX_TIM2_Init+0x94>)
 800788e:	f006 fe9b 	bl	800e5c8 <HAL_TIM_Base_Init>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007898:	f000 fa92 	bl	8007dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800789c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80078a2:	f107 0310 	add.w	r3, r7, #16
 80078a6:	4619      	mov	r1, r3
 80078a8:	480c      	ldr	r0, [pc, #48]	@ (80078dc <MX_TIM2_Init+0x94>)
 80078aa:	f007 f83a 	bl	800e922 <HAL_TIM_ConfigClockSource>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80078b4:	f000 fa84 	bl	8007dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80078b8:	2320      	movs	r3, #32
 80078ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	4619      	mov	r1, r3
 80078c4:	4805      	ldr	r0, [pc, #20]	@ (80078dc <MX_TIM2_Init+0x94>)
 80078c6:	f007 fa23 	bl	800ed10 <HAL_TIMEx_MasterConfigSynchronization>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80078d0:	f000 fa76 	bl	8007dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80078d4:	bf00      	nop
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000544 	.word	0x20000544
 80078e0:	00270fff 	.word	0x00270fff

080078e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80078e8:	2004      	movs	r0, #4
 80078ea:	f7ff fde3 	bl	80074b4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078ee:	2001      	movs	r0, #1
 80078f0:	f7ff fde0 	bl	80074b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2105      	movs	r1, #5
 80078f8:	200b      	movs	r0, #11
 80078fa:	f002 f953 	bl	8009ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80078fe:	200b      	movs	r0, #11
 8007900:	f002 f96a 	bl	8009bd8 <HAL_NVIC_EnableIRQ>

}
 8007904:	bf00      	nop
 8007906:	bd80      	pop	{r7, pc}

08007908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800790e:	1d3b      	adds	r3, r7, #4
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800791c:	2004      	movs	r0, #4
 800791e:	f7ff fde2 	bl	80074e6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007922:	2001      	movs	r0, #1
 8007924:	f7ff fddf 	bl	80074e6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007928:	2002      	movs	r0, #2
 800792a:	f7ff fddc 	bl	80074e6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEL_Pin|HELL_Pin|HELLO_Pin, GPIO_PIN_RESET);
 800792e:	2200      	movs	r2, #0
 8007930:	2138      	movs	r1, #56	@ 0x38
 8007932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007936:	f002 fd41 	bl	800a3bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEL_Pin HELL_Pin HELLO_Pin */
  GPIO_InitStruct.Pin = HEL_Pin|HELL_Pin|HELLO_Pin;
 800793a:	2338      	movs	r3, #56	@ 0x38
 800793c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800793e:	2301      	movs	r3, #1
 8007940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	4619      	mov	r1, r3
 800794e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007952:	f002 fbc3 	bl	800a0dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <USB_transmit>:

/* USER CODE BEGIN 4 */
void USB_transmit(uint8_t *buffer, size_t length){
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	osStatus_t status;

	osMutexAcquire(TransmitMutexHandle, osWaitForever);
 800796a:	4b0c      	ldr	r3, [pc, #48]	@ (800799c <USB_transmit+0x3c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f04f 31ff 	mov.w	r1, #4294967295
 8007972:	4618      	mov	r0, r3
 8007974:	f00b fac9 	bl	8012f0a <osMutexAcquire>
	status = CDC_Transmit_FS(buffer, length);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f00e fea8 	bl	80166d4 <CDC_Transmit_FS>
 8007984:	4603      	mov	r3, r0
 8007986:	60fb      	str	r3, [r7, #12]
	osMutexRelease(TransmitMutexHandle);
 8007988:	4b04      	ldr	r3, [pc, #16]	@ (800799c <USB_transmit+0x3c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4618      	mov	r0, r3
 800798e:	f00b fb07 	bl	8012fa0 <osMutexRelease>
		//sprintf(msg, "Error, status code: %d \r\n", status);
		//sprintf(msg, "Error");
		//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	}
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	2000059c 	.word	0x2000059c

080079a0 <set_accel_gyro_config>:

/* BMI 270 Functions */
static int8_t set_accel_gyro_config(struct bmi2_dev *bmi)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b0a0      	sub	sp, #128	@ 0x80
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

    /* Structure to define accelerometer and gyro configuration. */
    struct bmi2_sens_config config[2];

    /* Configure the type of feature. */
    config[ACCEL].type = BMI2_ACCEL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	733b      	strb	r3, [r7, #12]
    config[GYRO].type = BMI2_GYRO;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Get default configurations for the type of feature selected. */
    rslt = bmi270_set_sensor_config(config, 2, bmi);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	2102      	movs	r1, #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fb f822 	bl	8002a04 <bmi270_set_sensor_config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 80079c6:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fb ffca 	bl	8003964 <bmi2_error_codes_print_result>

    /* Map data ready interrupt to interrupt pin. */
    rslt = bmi2_map_data_int(BMI2_DRDY_INT, BMI2_INT1, bmi);
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	2101      	movs	r1, #1
 80079d4:	2004      	movs	r0, #4
 80079d6:	f7f9 fd4f 	bl	8001478 <bmi2_map_data_int>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 80079e0:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fb ffbd 	bl	8003964 <bmi2_error_codes_print_result>

    if (rslt == BMI2_OK)
 80079ea:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d125      	bne.n	8007a3e <set_accel_gyro_config+0x9e>
    {
        /* NOTE: The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[ACCEL].cfg.acc.odr = BMI2_ACC_ODR_800HZ;
 80079f2:	230b      	movs	r3, #11
 80079f4:	743b      	strb	r3, [r7, #16]

        /* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
        config[ACCEL].cfg.acc.range = BMI2_ACC_RANGE_2G;
 80079f6:	2300      	movs	r3, #0
 80079f8:	74fb      	strb	r3, [r7, #19]
         * are averaged, resulting in 4 averaged samples.
         * Note1 : For more information, refer the datasheet.
         * Note2 : A higher number of averaged samples will result in a lower noise level of the signal, but
         * this has an adverse effect on the power consumed.
         */
        config[ACCEL].cfg.acc.bwp = BMI2_ACC_NORMAL_AVG4;
 80079fa:	2302      	movs	r3, #2
 80079fc:	747b      	strb	r3, [r7, #17]
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         * For more info refer datasheet.
         */
        config[ACCEL].cfg.acc.filter_perf = BMI2_PERF_OPT_MODE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	74bb      	strb	r3, [r7, #18]

        /* The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[GYRO].cfg.gyr.odr = BMI2_GYR_ODR_800HZ;
 8007a02:	230b      	movs	r3, #11
 8007a04:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        /* Gyroscope Angular Rate Measurement Range.By default the range is 2000dps. */
        config[GYRO].cfg.gyr.range = BMI2_GYR_RANGE_2000;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        /* Gyroscope bandwidth parameters. By default the gyro bandwidth is in normal mode. */
        config[GYRO].cfg.gyr.bwp = BMI2_GYR_NORMAL_MODE;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        /* Enable/Disable the noise performance mode for precision yaw rate sensing
         * There are two modes
         *  0 -> Ultra low power mode(Default)
         *  1 -> High performance mode
         */
        config[GYRO].cfg.gyr.noise_perf = BMI2_POWER_OPT_MODE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
         * will be done based on above set bandwidth and ODR.
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         */
        config[GYRO].cfg.gyr.filter_perf = BMI2_PERF_OPT_MODE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

        /* Set the accel and gyro configurations. */
        rslt = bmi270_set_sensor_config(config, 2, bmi);
 8007a20:	f107 030c 	add.w	r3, r7, #12
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	2102      	movs	r1, #2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fa ffeb 	bl	8002a04 <bmi270_set_sensor_config>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        bmi2_error_codes_print_result(rslt);
 8007a34:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fb ff93 	bl	8003964 <bmi2_error_codes_print_result>
    }

    return rslt;
 8007a3e:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3780      	adds	r7, #128	@ 0x80
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <lsb_to_mps2>:

static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	ed87 0a00 	vstr	s0, [r7]
 8007a58:	460a      	mov	r2, r1
 8007a5a:	80fb      	strh	r3, [r7, #6]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a68:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8007a6c:	797b      	ldrb	r3, [r7, #5]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fd18 	bl	80004a4 <__aeabi_ui2d>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	ec43 2b11 	vmov	d1, r2, r3
 8007a7c:	ed97 0b04 	vldr	d0, [r7, #16]
 8007a80:	f010 fc7c 	bl	801837c <pow>
 8007a84:	ec51 0b10 	vmov	r0, r1, d0
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a90:	f7f8 feac 	bl	80007ec <__aeabi_ddiv>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f7f9 f82c 	bl	8000af8 <__aeabi_d2f>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8007aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8007ad8 <lsb_to_mps2+0x8c>
 8007ab4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ab8:	edd7 7a00 	vldr	s15, [r7]
 8007abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ac4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ac8:	eef0 7a66 	vmov.f32	s15, s13
}
 8007acc:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	411ce80a 	.word	0x411ce80a

08007adc <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	ed87 0a00 	vstr	s0, [r7]
 8007ae8:	460a      	mov	r2, r1
 8007aea:	80fb      	strh	r3, [r7, #6]
 8007aec:	4613      	mov	r3, r2
 8007aee:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007af8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8007afc:	797b      	ldrb	r3, [r7, #5]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7f8 fcd0 	bl	80004a4 <__aeabi_ui2d>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	ec43 2b11 	vmov	d1, r2, r3
 8007b0c:	ed97 0b04 	vldr	d0, [r7, #16]
 8007b10:	f010 fc34 	bl	801837c <pow>
 8007b14:	ec51 0b10 	vmov	r0, r1, d0
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b20:	f7f8 fe64 	bl	80007ec <__aeabi_ddiv>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f7f8 ffe4 	bl	8000af8 <__aeabi_d2f>
 8007b30:	4603      	mov	r3, r0
 8007b32:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8007b34:	edd7 6a00 	vldr	s13, [r7]
 8007b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b44:	ee07 3a90 	vmov	s15, r3
 8007b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8007b50:	eeb0 0a67 	vmov.f32	s0, s15
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007b5c:	b590      	push	{r4, r7, lr}
 8007b5e:	b0bb      	sub	sp, #236	@ 0xec
 8007b60:	af04      	add	r7, sp, #16
 8007b62:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8007b64:	f00e fcf8 	bl	8016558 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  //RAVEN initiate sensor

  /* IMU Variable Setup */
  	int8_t rslt;
  	uint8_t sensor_list[2] = { BMI2_ACCEL, BMI2_GYRO };
 8007b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b6c:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
  	struct bmi2_dev bmi; // MACIEJ transfer me to task1_handler
  	struct bmi2_sens_data sensor_data = { { 0 } };
 8007b70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007b74:	2228      	movs	r2, #40	@ 0x28
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f00f fc69 	bl	8017450 <memset>
  	struct bmi2_sens_config config;
  /* IMU Variable Setup END */

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8007b7e:	bf00      	nop
 8007b80:	4b1a      	ldr	r3, [pc, #104]	@ (8007bec <StartDefaultTask+0x90>)
 8007b82:	466c      	mov	r4, sp
 8007b84:	f103 0210 	add.w	r2, r3, #16
 8007b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b90:	f7ff f9dc 	bl	8006f4c <BMI160_init>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d0f2      	beq.n	8007b80 <StartDefaultTask+0x24>
  rslt = bmi2_interface_init(&bmi, BMI2_I2C_INTF);
 8007b9a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fb fe97 	bl	80038d4 <bmi2_interface_init>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  //bmi2_error_codes_print_result(rslt);
  rslt = bmi270_init(&bmi);
 8007bac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fa fec9 	bl	8002948 <bmi270_init>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  //bmi2_error_codes_print_result(rslt);
  rslt = set_accel_gyro_config(&bmi);
 8007bbc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff feed 	bl	80079a0 <set_accel_gyro_config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  //bmi2_error_codes_print_result(rslt);
  rslt = bmi2_sensor_enable(sensor_list, 2, &bmi);
 8007bcc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8007bd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7f9 fa26 	bl	8001028 <bmi2_sensor_enable>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  //bmi2_error_codes_print_result(rslt);
  config.type = BMI2_ACCEL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	723b      	strb	r3, [r7, #8]
	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
  }
  /* Infinite loop */
  for(;;)
  {
	osThreadExit();
 8007be6:	f00b f833 	bl	8012c50 <osThreadExit>
 8007bea:	bf00      	nop
 8007bec:	20000410 	.word	0x20000410

08007bf0 <task1_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_handler */
void task1_handler(void *argument)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b0b2      	sub	sp, #200	@ 0xc8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task1_handler */
	uint8_t buffer[20];
	//RAVEN set up variables - if there are things needed both for initiation and taking measurements, talk to me
	/* IMU */
	float IMU_reading[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}; // GX, GY, GZ, AX, AY, AZ
 8007bf8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	605a      	str	r2, [r3, #4]
 8007c02:	609a      	str	r2, [r3, #8]
 8007c04:	60da      	str	r2, [r3, #12]
 8007c06:	611a      	str	r2, [r3, #16]
 8007c08:	615a      	str	r2, [r3, #20]
	/* IMU END */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2001      	movs	r0, #1
 8007c12:	f00b f873 	bl	8012cfc <osThreadFlagsWait>
	  //RAVEN take measurement
	  /* IMU Variable Setup */
		int8_t rslt;
		struct bmi2_dev bmi; // MACIEJ I must be transfered from StartDefaultTask
		struct bmi2_sens_data sensor_data = { { 0 } };
 8007c16:	f107 0308 	add.w	r3, r7, #8
 8007c1a:	2228      	movs	r2, #40	@ 0x28
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f00f fc16 	bl	8017450 <memset>
	  /* IMU Variable Setup END */

	  bmi160ReadAccelGyro(&imu_t);
 8007c24:	4854      	ldr	r0, [pc, #336]	@ (8007d78 <task1_handler+0x188>)
 8007c26:	f7ff fa83 	bl	8007130 <bmi160ReadAccelGyro>
	  rslt = bmi2_get_sensor_data(&sensor_data, &bmi);
 8007c2a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007c2e:	f107 0308 	add.w	r3, r7, #8
 8007c32:	4611      	mov	r1, r2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7f9 fb5a 	bl	80012ee <bmi2_get_sensor_data>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
	  bmi2_error_codes_print_result(rslt);
 8007c40:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fb fe8d 	bl	8003964 <bmi2_error_codes_print_result>

	  /* Converting lsb to meter per second squared for 16 bit accelerometer at 2G range. */
	  IMU_reading[5] = lsb_to_mps2(sensor_data.acc.x, (float)2, bmi.resolution);
 8007c4a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007c4e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007c52:	4611      	mov	r1, r2
 8007c54:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fef7 	bl	8007a4c <lsb_to_mps2>
 8007c5e:	eef0 7a40 	vmov.f32	s15, s0
 8007c62:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	  IMU_reading[6] = lsb_to_mps2(sensor_data.acc.y, (float)2, bmi.resolution);
 8007c66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c6a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007c6e:	4611      	mov	r1, r2
 8007c70:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fee9 	bl	8007a4c <lsb_to_mps2>
 8007c7a:	eef0 7a40 	vmov.f32	s15, s0
 8007c7e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	  IMU_reading[4] = lsb_to_mps2(sensor_data.acc.z, (float)2, bmi.resolution);
 8007c82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c86:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff fedb 	bl	8007a4c <lsb_to_mps2>
 8007c96:	eef0 7a40 	vmov.f32	s15, s0
 8007c9a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8

	  /* Converting lsb to degree per second for 16 bit gyro at 2000dps range. */
	  IMU_reading[1] = lsb_to_dps(sensor_data.gyr.x, (float)2000, bmi.resolution)*0.0174533;
 8007c9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ca2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8007d7c <task1_handler+0x18c>
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff ff15 	bl	8007adc <lsb_to_dps>
 8007cb2:	ee10 3a10 	vmov	r3, s0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7f8 fc16 	bl	80004e8 <__aeabi_f2d>
 8007cbc:	a32c      	add	r3, pc, #176	@ (adr r3, 8007d70 <task1_handler+0x180>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fc69 	bl	8000598 <__aeabi_dmul>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4610      	mov	r0, r2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f7f8 ff13 	bl	8000af8 <__aeabi_d2f>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	  IMU_reading[2] = lsb_to_dps(sensor_data.gyr.y, (float)2000, bmi.resolution)*0.0174533;
 8007cd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cdc:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8007d7c <task1_handler+0x18c>
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fef8 	bl	8007adc <lsb_to_dps>
 8007cec:	ee10 3a10 	vmov	r3, s0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7f8 fbf9 	bl	80004e8 <__aeabi_f2d>
 8007cf6:	a31e      	add	r3, pc, #120	@ (adr r3, 8007d70 <task1_handler+0x180>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fc4c 	bl	8000598 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4610      	mov	r0, r2
 8007d06:	4619      	mov	r1, r3
 8007d08:	f7f8 fef6 	bl	8000af8 <__aeabi_d2f>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  IMU_reading[0] = lsb_to_dps(sensor_data.gyr.z, (float)2000, bmi.resolution)*0.0174533;
 8007d12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007d16:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007d7c <task1_handler+0x18c>
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff fedb 	bl	8007adc <lsb_to_dps>
 8007d26:	ee10 3a10 	vmov	r3, s0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fbdc 	bl	80004e8 <__aeabi_f2d>
 8007d30:	a30f      	add	r3, pc, #60	@ (adr r3, 8007d70 <task1_handler+0x180>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f7f8 fc2f 	bl	8000598 <__aeabi_dmul>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7f8 fed9 	bl	8000af8 <__aeabi_d2f>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	  sprintf((char*)buffer,"%d\r\n",IMU_reading);
 8007d4c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8007d50:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8007d54:	490a      	ldr	r1, [pc, #40]	@ (8007d80 <task1_handler+0x190>)
 8007d56:	4618      	mov	r0, r3
 8007d58:	f00f fa80 	bl	801725c <siprintf>
	  USB_transmit(buffer, sizeof(buffer));
 8007d5c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8007d60:	2114      	movs	r1, #20
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fdfc 	bl	8007960 <USB_transmit>
  {
 8007d68:	bf00      	nop
 8007d6a:	e74e      	b.n	8007c0a <task1_handler+0x1a>
 8007d6c:	f3af 8000 	nop.w
 8007d70:	22d4405f 	.word	0x22d4405f
 8007d74:	3f91df47 	.word	0x3f91df47
 8007d78:	20000410 	.word	0x20000410
 8007d7c:	44fa0000 	.word	0x44fa0000
 8007d80:	0801a1c4 	.word	0x0801a1c4

08007d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a09      	ldr	r2, [pc, #36]	@ (8007db8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d101      	bne.n	8007d9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8007d96:	f000 fb61 	bl	800845c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da2:	d105      	bne.n	8007db0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		osThreadFlagsSet(Task1Handle, 0x01);
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2101      	movs	r1, #1
 8007daa:	4618      	mov	r0, r3
 8007dac:	f00a ff58 	bl	8012c60 <osThreadFlagsSet>
  		sample_count = 0;
  		osThreadFlagsSet(Task1Handle, 0x01);
  	}*/
    }
  /* USER CODE END Callback 1 */
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	20000594 	.word	0x20000594

08007dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007dc4:	b672      	cpsid	i
}
 8007dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007dc8:	bf00      	nop
 8007dca:	e7fd      	b.n	8007dc8 <Error_Handler+0x8>

08007dcc <LL_AHB2_GRP1_EnableClock>:
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4013      	ands	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007df0:	68fb      	ldr	r3, [r7, #12]
}
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e22:	68fb      	ldr	r3, [r7, #12]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007e34:	2200      	movs	r2, #0
 8007e36:	210f      	movs	r1, #15
 8007e38:	f06f 0001 	mvn.w	r0, #1
 8007e3c:	f001 feb2 	bl	8009ba4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e40:	bf00      	nop
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b09c      	sub	sp, #112	@ 0x70
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	2250      	movs	r2, #80	@ 0x50
 8007e62:	2100      	movs	r1, #0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f00f faf3 	bl	8017450 <memset>
  if(hadc->Instance==ADC1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a36      	ldr	r2, [pc, #216]	@ (8007f48 <HAL_ADC_MspInit+0x104>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d164      	bne.n	8007f3e <HAL_ADC_MspInit+0xfa>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8007e7a:	2318      	movs	r3, #24
 8007e7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8007e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007e82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8007e84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8007e8a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007e8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8007e90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e94:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007e96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f006 f90a 	bl	800e0ba <HAL_RCCEx_PeriphCLKConfig>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8007eac:	f7ff ff88 	bl	8007dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007eb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007eb4:	f7ff ff8a 	bl	8007dcc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7ff ff87 	bl	8007dcc <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007ed4:	f002 f902 	bl	800a0dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007eda:	4a1d      	ldr	r2, [pc, #116]	@ (8007f50 <HAL_ADC_MspInit+0x10c>)
 8007edc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007ede:	4b1b      	ldr	r3, [pc, #108]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007ee0:	2205      	movs	r2, #5
 8007ee2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ee4:	4b19      	ldr	r3, [pc, #100]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eea:	4b18      	ldr	r3, [pc, #96]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007ef0:	4b16      	ldr	r3, [pc, #88]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007ef2:	2280      	movs	r2, #128	@ 0x80
 8007ef4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ef6:	4b15      	ldr	r3, [pc, #84]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007efc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007efe:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007f06:	4b11      	ldr	r3, [pc, #68]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007f08:	2220      	movs	r2, #32
 8007f0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007f12:	480e      	ldr	r0, [pc, #56]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007f14:	f001 fe6e 	bl	8009bf4 <HAL_DMA_Init>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8007f1e:	f7ff ff4f 	bl	8007dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007f26:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007f28:	4a08      	ldr	r2, [pc, #32]	@ (8007f4c <HAL_ADC_MspInit+0x108>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2105      	movs	r1, #5
 8007f32:	2012      	movs	r0, #18
 8007f34:	f001 fe36 	bl	8009ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8007f38:	2012      	movs	r0, #18
 8007f3a:	f001 fe4d 	bl	8009bd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8007f3e:	bf00      	nop
 8007f40:	3770      	adds	r7, #112	@ 0x70
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	50040000 	.word	0x50040000
 8007f4c:	20000490 	.word	0x20000490
 8007f50:	40020008 	.word	0x40020008

08007f54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b09c      	sub	sp, #112	@ 0x70
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f6c:	f107 030c 	add.w	r3, r7, #12
 8007f70:	2250      	movs	r2, #80	@ 0x50
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f00f fa6b 	bl	8017450 <memset>
  if(hi2c->Instance==I2C1)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a16      	ldr	r2, [pc, #88]	@ (8007fd8 <HAL_I2C_MspInit+0x84>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d125      	bne.n	8007fd0 <HAL_I2C_MspInit+0x7c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007f84:	2304      	movs	r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007f88:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f8e:	f107 030c 	add.w	r3, r7, #12
 8007f92:	4618      	mov	r0, r3
 8007f94:	f006 f891 	bl	800e0ba <HAL_RCCEx_PeriphCLKConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007f9e:	f7ff ff0f 	bl	8007dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fa2:	2002      	movs	r0, #2
 8007fa4:	f7ff ff12 	bl	8007dcc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007fa8:	23c0      	movs	r3, #192	@ 0xc0
 8007faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fac:	2312      	movs	r3, #18
 8007fae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007fb8:	2304      	movs	r3, #4
 8007fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4806      	ldr	r0, [pc, #24]	@ (8007fdc <HAL_I2C_MspInit+0x88>)
 8007fc4:	f002 f88a 	bl	800a0dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007fc8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007fcc:	f7ff ff17 	bl	8007dfe <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007fd0:	bf00      	nop
 8007fd2:	3770      	adds	r7, #112	@ 0x70
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40005400 	.word	0x40005400
 8007fdc:	48000400 	.word	0x48000400

08007fe0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff0:	d10a      	bne.n	8008008 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	f7ff ff03 	bl	8007dfe <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2105      	movs	r1, #5
 8007ffc:	201c      	movs	r0, #28
 8007ffe:	f001 fdd1 	bl	8009ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008002:	201c      	movs	r0, #28
 8008004:	f001 fde8 	bl	8009bd8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800801c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800801e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4313      	orrs	r3, r2
 8008026:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800802c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4013      	ands	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008034:	68fb      	ldr	r3, [r7, #12]
}
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08e      	sub	sp, #56	@ 0x38
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800805a:	2200      	movs	r2, #0
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	2019      	movs	r0, #25
 8008060:	f001 fda0 	bl	8009ba4 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008064:	2019      	movs	r0, #25
 8008066:	f001 fdb7 	bl	8009bd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800806a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800806e:	f7ff ffcf 	bl	8008010 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008072:	f107 020c 	add.w	r2, r7, #12
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f005 fd99 	bl	800dbb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008082:	f005 fd81 	bl	800db88 <HAL_RCC_GetPCLK2Freq>
 8008086:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	4a21      	ldr	r2, [pc, #132]	@ (8008110 <HAL_InitTick+0xcc>)
 800808c:	fba2 2303 	umull	r2, r3, r2, r3
 8008090:	0c9b      	lsrs	r3, r3, #18
 8008092:	3b01      	subs	r3, #1
 8008094:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008096:	4b1f      	ldr	r3, [pc, #124]	@ (8008114 <HAL_InitTick+0xd0>)
 8008098:	4a1f      	ldr	r2, [pc, #124]	@ (8008118 <HAL_InitTick+0xd4>)
 800809a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800809c:	4b1d      	ldr	r3, [pc, #116]	@ (8008114 <HAL_InitTick+0xd0>)
 800809e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80080a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80080a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008114 <HAL_InitTick+0xd0>)
 80080a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80080aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008114 <HAL_InitTick+0xd0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080b0:	4b18      	ldr	r3, [pc, #96]	@ (8008114 <HAL_InitTick+0xd0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80080b6:	4817      	ldr	r0, [pc, #92]	@ (8008114 <HAL_InitTick+0xd0>)
 80080b8:	f006 fa86 	bl	800e5c8 <HAL_TIM_Base_Init>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80080c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d11b      	bne.n	8008102 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80080ca:	4812      	ldr	r0, [pc, #72]	@ (8008114 <HAL_InitTick+0xd0>)
 80080cc:	f006 fad4 	bl	800e678 <HAL_TIM_Base_Start_IT>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80080d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d111      	bne.n	8008102 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80080de:	2019      	movs	r0, #25
 80080e0:	f001 fd7a 	bl	8009bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d808      	bhi.n	80080fc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80080ea:	2200      	movs	r2, #0
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	2019      	movs	r0, #25
 80080f0:	f001 fd58 	bl	8009ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80080f4:	4a09      	ldr	r2, [pc, #36]	@ (800811c <HAL_InitTick+0xd8>)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	e002      	b.n	8008102 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8008102:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8008106:	4618      	mov	r0, r3
 8008108:	3738      	adds	r7, #56	@ 0x38
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	431bde83 	.word	0x431bde83
 8008114:	200005a4 	.word	0x200005a4
 8008118:	40012c00 	.word	0x40012c00
 800811c:	20000024 	.word	0x20000024

08008120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <NMI_Handler+0x4>

08008128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <HardFault_Handler+0x4>

08008130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <MemManage_Handler+0x4>

08008138 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <BusFault_Handler+0x4>

08008140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <UsageFault_Handler+0x4>

08008148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800814c:	bf00      	nop
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800815c:	4802      	ldr	r0, [pc, #8]	@ (8008168 <DMA1_Channel1_IRQHandler+0x10>)
 800815e:	f001 fe6c 	bl	8009e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008162:	bf00      	nop
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000490 	.word	0x20000490

0800816c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008170:	4802      	ldr	r0, [pc, #8]	@ (800817c <ADC1_IRQHandler+0x10>)
 8008172:	f000 fd7b 	bl	8008c6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8008176:	bf00      	nop
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	2000042c 	.word	0x2000042c

08008180 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008184:	4802      	ldr	r0, [pc, #8]	@ (8008190 <USB_LP_IRQHandler+0x10>)
 8008186:	f003 f808 	bl	800b19a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800818a:	bf00      	nop
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2000a8c0 	.word	0x2000a8c0

08008194 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008198:	4802      	ldr	r0, [pc, #8]	@ (80081a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800819a:	f006 fabb 	bl	800e714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	200005a4 	.word	0x200005a4

080081a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80081ac:	4802      	ldr	r0, [pc, #8]	@ (80081b8 <TIM2_IRQHandler+0x10>)
 80081ae:	f006 fab1 	bl	800e714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80081b2:	bf00      	nop
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000544 	.word	0x20000544

080081bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	e00a      	b.n	80081e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80081ce:	f3af 8000 	nop.w
 80081d2:	4601      	mov	r1, r0
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	60ba      	str	r2, [r7, #8]
 80081da:	b2ca      	uxtb	r2, r1
 80081dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	3301      	adds	r3, #1
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	dbf0      	blt.n	80081ce <_read+0x12>
  }

  return len;
 80081ec:	687b      	ldr	r3, [r7, #4]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e009      	b.n	800821c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	60ba      	str	r2, [r7, #8]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	4618      	mov	r0, r3
 8008212:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	3301      	adds	r3, #1
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	dbf1      	blt.n	8008208 <_write+0x12>
  }
  return len;
 8008224:	687b      	ldr	r3, [r7, #4]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <_close>:

int _close(int file)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008256:	605a      	str	r2, [r3, #4]
  return 0;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <_isatty>:

int _isatty(int file)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800826e:	2301      	movs	r3, #1
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082a0:	4a14      	ldr	r2, [pc, #80]	@ (80082f4 <_sbrk+0x5c>)
 80082a2:	4b15      	ldr	r3, [pc, #84]	@ (80082f8 <_sbrk+0x60>)
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082ac:	4b13      	ldr	r3, [pc, #76]	@ (80082fc <_sbrk+0x64>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80082b4:	4b11      	ldr	r3, [pc, #68]	@ (80082fc <_sbrk+0x64>)
 80082b6:	4a12      	ldr	r2, [pc, #72]	@ (8008300 <_sbrk+0x68>)
 80082b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80082ba:	4b10      	ldr	r3, [pc, #64]	@ (80082fc <_sbrk+0x64>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4413      	add	r3, r2
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d207      	bcs.n	80082d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082c8:	f00f f96e 	bl	80175a8 <__errno>
 80082cc:	4603      	mov	r3, r0
 80082ce:	220c      	movs	r2, #12
 80082d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	e009      	b.n	80082ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80082d8:	4b08      	ldr	r3, [pc, #32]	@ (80082fc <_sbrk+0x64>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082de:	4b07      	ldr	r3, [pc, #28]	@ (80082fc <_sbrk+0x64>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4413      	add	r3, r2
 80082e6:	4a05      	ldr	r2, [pc, #20]	@ (80082fc <_sbrk+0x64>)
 80082e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80082ea:	68fb      	ldr	r3, [r7, #12]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20030000 	.word	0x20030000
 80082f8:	00000400 	.word	0x00000400
 80082fc:	200005f0 	.word	0x200005f0
 8008300:	2000af08 	.word	0x2000af08

08008304 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8008308:	4b24      	ldr	r3, [pc, #144]	@ (800839c <SystemInit+0x98>)
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830e:	4a23      	ldr	r2, [pc, #140]	@ (800839c <SystemInit+0x98>)
 8008310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008322:	f043 0301 	orr.w	r3, r3, #1
 8008326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8008328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800832c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8008330:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8008332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800833c:	4b18      	ldr	r3, [pc, #96]	@ (80083a0 <SystemInit+0x9c>)
 800833e:	4013      	ands	r3, r2
 8008340:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8008342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800834a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800834e:	f023 0305 	bic.w	r3, r3, #5
 8008352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800835a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800835e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800836a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800836e:	4a0d      	ldr	r2, [pc, #52]	@ (80083a4 <SystemInit+0xa0>)
 8008370:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8008372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008376:	4a0b      	ldr	r2, [pc, #44]	@ (80083a4 <SystemInit+0xa0>)
 8008378:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800837a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800838a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800838e:	2200      	movs	r2, #0
 8008390:	619a      	str	r2, [r3, #24]
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	e000ed00 	.word	0xe000ed00
 80083a0:	faf6fefb 	.word	0xfaf6fefb
 80083a4:	22041000 	.word	0x22041000

080083a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80083a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083ac:	3304      	adds	r3, #4

080083ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80083b2:	d3f9      	bcc.n	80083a8 <CopyDataInit>
  bx lr
 80083b4:	4770      	bx	lr

080083b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80083b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80083b8:	3004      	adds	r0, #4

080083ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80083ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80083bc:	d3fb      	bcc.n	80083b6 <FillZerobss>
  bx lr
 80083be:	4770      	bx	lr

080083c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80083c0:	480c      	ldr	r0, [pc, #48]	@ (80083f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80083c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80083c4:	f7ff ff9e 	bl	8008304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80083c8:	480b      	ldr	r0, [pc, #44]	@ (80083f8 <LoopForever+0x6>)
 80083ca:	490c      	ldr	r1, [pc, #48]	@ (80083fc <LoopForever+0xa>)
 80083cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008400 <LoopForever+0xe>)
 80083ce:	2300      	movs	r3, #0
 80083d0:	f7ff ffed 	bl	80083ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80083d4:	480b      	ldr	r0, [pc, #44]	@ (8008404 <LoopForever+0x12>)
 80083d6:	490c      	ldr	r1, [pc, #48]	@ (8008408 <LoopForever+0x16>)
 80083d8:	4a0c      	ldr	r2, [pc, #48]	@ (800840c <LoopForever+0x1a>)
 80083da:	2300      	movs	r3, #0
 80083dc:	f7ff ffe7 	bl	80083ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80083e0:	480b      	ldr	r0, [pc, #44]	@ (8008410 <LoopForever+0x1e>)
 80083e2:	490c      	ldr	r1, [pc, #48]	@ (8008414 <LoopForever+0x22>)
 80083e4:	2300      	movs	r3, #0
 80083e6:	f7ff ffe8 	bl	80083ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80083ea:	f00f f8e3 	bl	80175b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80083ee:	f7ff f893 	bl	8007518 <main>

080083f2 <LoopForever>:

LoopForever:
  b LoopForever
 80083f2:	e7fe      	b.n	80083f2 <LoopForever>
  ldr   r0, =_estack
 80083f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80083f8:	20000008 	.word	0x20000008
 80083fc:	20000180 	.word	0x20000180
 8008400:	0801c448 	.word	0x0801c448
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008404:	20030000 	.word	0x20030000
 8008408:	20030000 	.word	0x20030000
 800840c:	0801c5c0 	.word	0x0801c5c0
  INIT_BSS _sbss, _ebss
 8008410:	20000180 	.word	0x20000180
 8008414:	2000af08 	.word	0x2000af08

08008418 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008418:	e7fe      	b.n	8008418 <AES1_IRQHandler>
	...

0800841c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008426:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <HAL_Init+0x3c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a0b      	ldr	r2, [pc, #44]	@ (8008458 <HAL_Init+0x3c>)
 800842c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008430:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008432:	2003      	movs	r0, #3
 8008434:	f001 fbab 	bl	8009b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008438:	200f      	movs	r0, #15
 800843a:	f7ff fe03 	bl	8008044 <HAL_InitTick>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	71fb      	strb	r3, [r7, #7]
 8008448:	e001      	b.n	800844e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800844a:	f7ff fcf1 	bl	8007e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800844e:	79fb      	ldrb	r3, [r7, #7]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	58004000 	.word	0x58004000

0800845c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008460:	4b06      	ldr	r3, [pc, #24]	@ (800847c <HAL_IncTick+0x20>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <HAL_IncTick+0x24>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4413      	add	r3, r2
 800846c:	4a04      	ldr	r2, [pc, #16]	@ (8008480 <HAL_IncTick+0x24>)
 800846e:	6013      	str	r3, [r2, #0]
}
 8008470:	bf00      	nop
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000028 	.word	0x20000028
 8008480:	200005f4 	.word	0x200005f4

08008484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0
  return uwTick;
 8008488:	4b03      	ldr	r3, [pc, #12]	@ (8008498 <HAL_GetTick+0x14>)
 800848a:	681b      	ldr	r3, [r3, #0]
}
 800848c:	4618      	mov	r0, r3
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	200005f4 	.word	0x200005f4

0800849c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80084a0:	4b03      	ldr	r3, [pc, #12]	@ (80084b0 <HAL_GetTickPrio+0x14>)
 80084a2:	681b      	ldr	r3, [r3, #0]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20000024 	.word	0x20000024

080084b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084bc:	f7ff ffe2 	bl	8008484 <HAL_GetTick>
 80084c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d005      	beq.n	80084da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084ce:	4b0a      	ldr	r3, [pc, #40]	@ (80084f8 <HAL_Delay+0x44>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084da:	bf00      	nop
 80084dc:	f7ff ffd2 	bl	8008484 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d8f7      	bhi.n	80084dc <HAL_Delay+0x28>
  {
  }
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000028 	.word	0x20000028

080084fc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	609a      	str	r2, [r3, #8]
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3360      	adds	r3, #96	@ 0x60
 8008576:	461a      	mov	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	4b08      	ldr	r3, [pc, #32]	@ (80085a8 <LL_ADC_SetOffset+0x44>)
 8008586:	4013      	ands	r3, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	4313      	orrs	r3, r2
 8008594:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800859c:	bf00      	nop
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	03fff000 	.word	0x03fff000

080085ac <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3360      	adds	r3, #96	@ 0x60
 80085ba:	461a      	mov	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3360      	adds	r3, #96	@ 0x60
 80085e8:	461a      	mov	r2, r3
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008602:	bf00      	nop
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008626:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3330      	adds	r3, #48	@ 0x30
 8008644:	461a      	mov	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	f003 030c 	and.w	r3, r3, #12
 8008650:	4413      	add	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	211f      	movs	r1, #31
 8008660:	fa01 f303 	lsl.w	r3, r1, r3
 8008664:	43db      	mvns	r3, r3
 8008666:	401a      	ands	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	0e9b      	lsrs	r3, r3, #26
 800866c:	f003 011f 	and.w	r1, r3, #31
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 031f 	and.w	r3, r3, #31
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	431a      	orrs	r2, r3
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008680:	bf00      	nop
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80086bc:	2301      	movs	r3, #1
 80086be:	e000      	b.n	80086c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3314      	adds	r3, #20
 80086de:	461a      	mov	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	0e5b      	lsrs	r3, r3, #25
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	4413      	add	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	0d1b      	lsrs	r3, r3, #20
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2107      	movs	r1, #7
 80086fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008700:	43db      	mvns	r3, r3
 8008702:	401a      	ands	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	0d1b      	lsrs	r3, r3, #20
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	fa01 f303 	lsl.w	r3, r1, r3
 8008712:	431a      	orrs	r2, r3
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873c:	43db      	mvns	r3, r3
 800873e:	401a      	ands	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0318 	and.w	r3, r3, #24
 8008746:	4908      	ldr	r1, [pc, #32]	@ (8008768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008748:	40d9      	lsrs	r1, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	400b      	ands	r3, r1
 800874e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008752:	431a      	orrs	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	0007ffff 	.word	0x0007ffff

0800876c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800877c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6093      	str	r3, [r2, #8]
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087a4:	d101      	bne.n	80087aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80087c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80087cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f4:	d101      	bne.n	80087fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800881c:	f043 0201 	orr.w	r2, r3, #1
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <LL_ADC_IsEnabled+0x18>
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <LL_ADC_IsEnabled+0x1a>
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008866:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800886a:	f043 0204 	orr.w	r2, r3, #4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b04      	cmp	r3, #4
 8008890:	d101      	bne.n	8008896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d101      	bne.n	80088bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80088d8:	2300      	movs	r3, #0
 80088da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80088dc:	2300      	movs	r3, #0
 80088de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e12e      	b.n	8008b48 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d109      	bne.n	800890c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff faa3 	bl	8007e44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff ff3d 	bl	8008790 <LL_ADC_IsDeepPowerDownEnabled>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ff23 	bl	800876c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff ff58 	bl	80087e0 <LL_ADC_IsInternalRegulatorEnabled>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d115      	bne.n	8008962 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ff3c 	bl	80087b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008940:	4b83      	ldr	r3, [pc, #524]	@ (8008b50 <HAL_ADC_Init+0x284>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	099b      	lsrs	r3, r3, #6
 8008946:	4a83      	ldr	r2, [pc, #524]	@ (8008b54 <HAL_ADC_Init+0x288>)
 8008948:	fba2 2303 	umull	r2, r3, r2, r3
 800894c:	099b      	lsrs	r3, r3, #6
 800894e:	3301      	adds	r3, #1
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008954:	e002      	b.n	800895c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	3b01      	subs	r3, #1
 800895a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f9      	bne.n	8008956 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff ff3a 	bl	80087e0 <LL_ADC_IsInternalRegulatorEnabled>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10d      	bne.n	800898e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008976:	f043 0210 	orr.w	r2, r3, #16
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008982:	f043 0201 	orr.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff ff73 	bl	800887e <LL_ADC_REG_IsConversionOngoing>
 8008998:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899e:	f003 0310 	and.w	r3, r3, #16
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f040 80c7 	bne.w	8008b36 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f040 80c3 	bne.w	8008b36 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80089b8:	f043 0202 	orr.w	r2, r3, #2
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff ff33 	bl	8008830 <LL_ADC_IsEnabled>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80089d0:	4861      	ldr	r0, [pc, #388]	@ (8008b58 <HAL_ADC_Init+0x28c>)
 80089d2:	f7ff ff2d 	bl	8008830 <LL_ADC_IsEnabled>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4619      	mov	r1, r3
 80089e2:	485e      	ldr	r0, [pc, #376]	@ (8008b5c <HAL_ADC_Init+0x290>)
 80089e4:	f7ff fd8a 	bl	80084fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7e5b      	ldrb	r3, [r3, #25]
 80089ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80089f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80089fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a06:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008a08:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d106      	bne.n	8008a28 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	045b      	lsls	r3, r3, #17
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a34:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	4b45      	ldr	r3, [pc, #276]	@ (8008b60 <HAL_ADC_Init+0x294>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6812      	ldr	r2, [r2, #0]
 8008a52:	69b9      	ldr	r1, [r7, #24]
 8008a54:	430b      	orrs	r3, r1
 8008a56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff ff0e 	bl	800887e <LL_ADC_REG_IsConversionOngoing>
 8008a62:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff ff1b 	bl	80088a4 <LL_ADC_INJ_IsConversionOngoing>
 8008a6e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d13d      	bne.n	8008af2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d13a      	bne.n	8008af2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a80:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a88:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a98:	f023 0302 	bic.w	r3, r3, #2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	69b9      	ldr	r1, [r7, #24]
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d118      	bne.n	8008ae2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008aba:	f023 0304 	bic.w	r3, r3, #4
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008ac6:	4311      	orrs	r1, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008acc:	4311      	orrs	r1, r2
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0201 	orr.w	r2, r2, #1
 8008ade:	611a      	str	r2, [r3, #16]
 8008ae0:	e007      	b.n	8008af2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0201 	bic.w	r2, r2, #1
 8008af0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d10c      	bne.n	8008b14 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b00:	f023 010f 	bic.w	r1, r3, #15
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	1e5a      	subs	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b12:	e007      	b.n	8008b24 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 020f 	bic.w	r2, r2, #15
 8008b22:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b28:	f023 0303 	bic.w	r3, r3, #3
 8008b2c:	f043 0201 	orr.w	r2, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b34:	e007      	b.n	8008b46 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3a:	f043 0210 	orr.w	r2, r3, #16
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000020 	.word	0x20000020
 8008b54:	053e2d63 	.word	0x053e2d63
 8008b58:	50040000 	.word	0x50040000
 8008b5c:	50040300 	.word	0x50040300
 8008b60:	fff0c007 	.word	0xfff0c007

08008b64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff fe82 	bl	800887e <LL_ADC_REG_IsConversionOngoing>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d167      	bne.n	8008c50 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_ADC_Start_DMA+0x2a>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e063      	b.n	8008c56 <HAL_ADC_Start_DMA+0xf2>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fe0c 	bl	80097b4 <ADC_Enable>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d14f      	bne.n	8008c46 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008baa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d006      	beq.n	8008bd4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bca:	f023 0206 	bic.w	r2, r3, #6
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8008bd2:	e002      	b.n	8008bda <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bde:	4a20      	ldr	r2, [pc, #128]	@ (8008c60 <HAL_ADC_Start_DMA+0xfc>)
 8008be0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008be6:	4a1f      	ldr	r2, [pc, #124]	@ (8008c64 <HAL_ADC_Start_DMA+0x100>)
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bee:	4a1e      	ldr	r2, [pc, #120]	@ (8008c68 <HAL_ADC_Start_DMA+0x104>)
 8008bf0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	221c      	movs	r2, #28
 8008bf8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0210 	orr.w	r2, r2, #16
 8008c10:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0201 	orr.w	r2, r2, #1
 8008c20:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3340      	adds	r3, #64	@ 0x40
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f001 f887 	bl	8009d44 <HAL_DMA_Start_IT>
 8008c36:	4603      	mov	r3, r0
 8008c38:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fe09 	bl	8008856 <LL_ADC_REG_StartConversion>
 8008c44:	e006      	b.n	8008c54 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8008c4e:	e001      	b.n	8008c54 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008c50:	2302      	movs	r3, #2
 8008c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	080098a9 	.word	0x080098a9
 8008c64:	08009981 	.word	0x08009981
 8008c68:	0800999d 	.word	0x0800999d

08008c6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008c74:	2300      	movs	r3, #0
 8008c76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d017      	beq.n	8008cc2 <HAL_ADC_IRQHandler+0x56>
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d012      	beq.n	8008cc2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d105      	bne.n	8008cb4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 feb3 	bl	8009a20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <HAL_ADC_IRQHandler+0x6a>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d05d      	beq.n	8008d9c <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d058      	beq.n	8008d9c <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d105      	bne.n	8008d02 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fc81 	bl	800860e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d03d      	beq.n	8008d8e <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d20:	d035      	beq.n	8008d8e <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d12e      	bne.n	8008d8e <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fda2 	bl	800887e <LL_ADC_REG_IsConversionOngoing>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d11a      	bne.n	8008d76 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 020c 	bic.w	r2, r2, #12
 8008d4e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d112      	bne.n	8008d8e <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6c:	f043 0201 	orr.w	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	655a      	str	r2, [r3, #84]	@ 0x54
 8008d74:	e00b      	b.n	8008d8e <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7a:	f043 0210 	orr.w	r2, r3, #16
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d86:	f043 0201 	orr.w	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f922 	bl	8008fd8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	220c      	movs	r2, #12
 8008d9a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <HAL_ADC_IRQHandler+0x144>
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d074      	beq.n	8008ea4 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d06f      	beq.n	8008ea4 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fc61 	bl	80086a8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008de6:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff fc0e 	bl	800860e <LL_ADC_REG_IsTriggerSourceSWStart>
 8008df2:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d049      	beq.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <HAL_ADC_IRQHandler+0x1b0>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d041      	beq.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d13c      	bne.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e26:	2b40      	cmp	r3, #64	@ 0x40
 8008e28:	d135      	bne.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d12e      	bne.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fd31 	bl	80088a4 <LL_ADC_INJ_IsConversionOngoing>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11a      	bne.n	8008e7e <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008e56:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d112      	bne.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e74:	f043 0201 	orr.w	r2, r3, #1
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8008e7c:	e00b      	b.n	8008e96 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f043 0210 	orr.w	r2, r3, #16
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8e:	f043 0201 	orr.w	r2, r3, #1
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd9a 	bl	80099d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2260      	movs	r2, #96	@ 0x60
 8008ea2:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d011      	beq.n	8008ed2 <HAL_ADC_IRQHandler+0x266>
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00c      	beq.n	8008ed2 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ebc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f89b 	bl	8009000 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2280      	movs	r2, #128	@ 0x80
 8008ed0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d012      	beq.n	8008f02 <HAL_ADC_IRQHandler+0x296>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00d      	beq.n	8008f02 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fd80 	bl	80099f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d012      	beq.n	8008f32 <HAL_ADC_IRQHandler+0x2c6>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fd72 	bl	8009a0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d02b      	beq.n	8008f94 <HAL_ADC_IRQHandler+0x328>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d026      	beq.n	8008f94 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	61fb      	str	r3, [r7, #28]
 8008f52:	e009      	b.n	8008f68 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff fb97 	bl	800868c <LL_ADC_REG_GetDMATransfer>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8008f64:	2301      	movs	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d10e      	bne.n	8008f8c <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f72:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f7e:	f043 0202 	orr.w	r2, r3, #2
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f844 	bl	8009014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2210      	movs	r2, #16
 8008f92:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d018      	beq.n	8008fd0 <HAL_ADC_IRQHandler+0x364>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d013      	beq.n	8008fd0 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb8:	f043 0208 	orr.w	r2, r3, #8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fc8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fd0a 	bl	80099e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8008fd0:	bf00      	nop
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b0b6      	sub	sp, #216	@ 0xd8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <HAL_ADC_ConfigChannel+0x22>
 8009046:	2302      	movs	r3, #2
 8009048:	e39f      	b.n	800978a <HAL_ADC_ConfigChannel+0x762>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff fc11 	bl	800887e <LL_ADC_REG_IsConversionOngoing>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 8384 	bne.w	800976c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6859      	ldr	r1, [r3, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	f7ff fadf 	bl	8008634 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fbff 	bl	800887e <LL_ADC_REG_IsConversionOngoing>
 8009080:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff fc0b 	bl	80088a4 <LL_ADC_INJ_IsConversionOngoing>
 800908e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009092:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 81a6 	bne.w	80093e8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800909c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 81a1 	bne.w	80093e8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6819      	ldr	r1, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7ff fb0b 	bl	80086ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	08db      	lsrs	r3, r3, #3
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d00a      	beq.n	80090f0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6818      	ldr	r0, [r3, #0]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	6919      	ldr	r1, [r3, #16]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090ea:	f7ff fa3b 	bl	8008564 <LL_ADC_SetOffset>
 80090ee:	e17b      	b.n	80093e8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff fa58 	bl	80085ac <LL_ADC_GetOffsetChannel>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <HAL_ADC_ConfigChannel+0xf4>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff fa4d 	bl	80085ac <LL_ADC_GetOffsetChannel>
 8009112:	4603      	mov	r3, r0
 8009114:	0e9b      	lsrs	r3, r3, #26
 8009116:	f003 021f 	and.w	r2, r3, #31
 800911a:	e01e      	b.n	800915a <HAL_ADC_ConfigChannel+0x132>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fa42 	bl	80085ac <LL_ADC_GetOffsetChannel>
 8009128:	4603      	mov	r3, r0
 800912a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800912e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009132:	fa93 f3a3 	rbit	r3, r3
 8009136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800913a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800913e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800914a:	2320      	movs	r3, #32
 800914c:	e004      	b.n	8009158 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800914e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009152:	fab3 f383 	clz	r3, r3
 8009156:	b2db      	uxtb	r3, r3
 8009158:	461a      	mov	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <HAL_ADC_ConfigChannel+0x14a>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	0e9b      	lsrs	r3, r3, #26
 800916c:	f003 031f 	and.w	r3, r3, #31
 8009170:	e018      	b.n	80091a4 <HAL_ADC_ConfigChannel+0x17c>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800917a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800917e:	fa93 f3a3 	rbit	r3, r3
 8009182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8009186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800918a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800918e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8009196:	2320      	movs	r3, #32
 8009198:	e004      	b.n	80091a4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800919a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800919e:	fab3 f383 	clz	r3, r3
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d106      	bne.n	80091b6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fa11 	bl	80085d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2101      	movs	r1, #1
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff f9f5 	bl	80085ac <LL_ADC_GetOffsetChannel>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <HAL_ADC_ConfigChannel+0x1ba>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2101      	movs	r1, #1
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff f9ea 	bl	80085ac <LL_ADC_GetOffsetChannel>
 80091d8:	4603      	mov	r3, r0
 80091da:	0e9b      	lsrs	r3, r3, #26
 80091dc:	f003 021f 	and.w	r2, r3, #31
 80091e0:	e01e      	b.n	8009220 <HAL_ADC_ConfigChannel+0x1f8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2101      	movs	r1, #1
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff f9df 	bl	80085ac <LL_ADC_GetOffsetChannel>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091f8:	fa93 f3a3 	rbit	r3, r3
 80091fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8009200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8009210:	2320      	movs	r3, #32
 8009212:	e004      	b.n	800921e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8009214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009218:	fab3 f383 	clz	r3, r3
 800921c:	b2db      	uxtb	r3, r3
 800921e:	461a      	mov	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009228:	2b00      	cmp	r3, #0
 800922a:	d105      	bne.n	8009238 <HAL_ADC_ConfigChannel+0x210>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	0e9b      	lsrs	r3, r3, #26
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	e018      	b.n	800926a <HAL_ADC_ConfigChannel+0x242>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009244:	fa93 f3a3 	rbit	r3, r3
 8009248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800924c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8009254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800925c:	2320      	movs	r3, #32
 800925e:	e004      	b.n	800926a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8009260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009264:	fab3 f383 	clz	r3, r3
 8009268:	b2db      	uxtb	r3, r3
 800926a:	429a      	cmp	r2, r3
 800926c:	d106      	bne.n	800927c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	2101      	movs	r1, #1
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff f9ae 	bl	80085d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2102      	movs	r1, #2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff f992 	bl	80085ac <LL_ADC_GetOffsetChannel>
 8009288:	4603      	mov	r3, r0
 800928a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <HAL_ADC_ConfigChannel+0x280>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2102      	movs	r1, #2
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff f987 	bl	80085ac <LL_ADC_GetOffsetChannel>
 800929e:	4603      	mov	r3, r0
 80092a0:	0e9b      	lsrs	r3, r3, #26
 80092a2:	f003 021f 	and.w	r2, r3, #31
 80092a6:	e01e      	b.n	80092e6 <HAL_ADC_ConfigChannel+0x2be>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2102      	movs	r1, #2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff f97c 	bl	80085ac <LL_ADC_GetOffsetChannel>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092be:	fa93 f3a3 	rbit	r3, r3
 80092c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80092c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80092ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80092d6:	2320      	movs	r3, #32
 80092d8:	e004      	b.n	80092e4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80092da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092de:	fab3 f383 	clz	r3, r3
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <HAL_ADC_ConfigChannel+0x2d6>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	0e9b      	lsrs	r3, r3, #26
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	e016      	b.n	800932c <HAL_ADC_ConfigChannel+0x304>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009306:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800930a:	fa93 f3a3 	rbit	r3, r3
 800930e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009310:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009312:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009316:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800931e:	2320      	movs	r3, #32
 8009320:	e004      	b.n	800932c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8009322:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009326:	fab3 f383 	clz	r3, r3
 800932a:	b2db      	uxtb	r3, r3
 800932c:	429a      	cmp	r2, r3
 800932e:	d106      	bne.n	800933e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2200      	movs	r2, #0
 8009336:	2102      	movs	r1, #2
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff f94d 	bl	80085d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2103      	movs	r1, #3
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff f931 	bl	80085ac <LL_ADC_GetOffsetChannel>
 800934a:	4603      	mov	r3, r0
 800934c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <HAL_ADC_ConfigChannel+0x342>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2103      	movs	r1, #3
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff f926 	bl	80085ac <LL_ADC_GetOffsetChannel>
 8009360:	4603      	mov	r3, r0
 8009362:	0e9b      	lsrs	r3, r3, #26
 8009364:	f003 021f 	and.w	r2, r3, #31
 8009368:	e017      	b.n	800939a <HAL_ADC_ConfigChannel+0x372>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2103      	movs	r1, #3
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff f91b 	bl	80085ac <LL_ADC_GetOffsetChannel>
 8009376:	4603      	mov	r3, r0
 8009378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800937a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800937c:	fa93 f3a3 	rbit	r3, r3
 8009380:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009384:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800938c:	2320      	movs	r3, #32
 800938e:	e003      	b.n	8009398 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8009390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009392:	fab3 f383 	clz	r3, r3
 8009396:	b2db      	uxtb	r3, r3
 8009398:	461a      	mov	r2, r3
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <HAL_ADC_ConfigChannel+0x38a>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	0e9b      	lsrs	r3, r3, #26
 80093ac:	f003 031f 	and.w	r3, r3, #31
 80093b0:	e011      	b.n	80093d6 <HAL_ADC_ConfigChannel+0x3ae>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80093c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80093c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80093ca:	2320      	movs	r3, #32
 80093cc:	e003      	b.n	80093d6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80093ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d0:	fab3 f383 	clz	r3, r3
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d106      	bne.n	80093e8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	2103      	movs	r1, #3
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff f8f8 	bl	80085d8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fa1f 	bl	8008830 <LL_ADC_IsEnabled>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f040 81c2 	bne.w	800977e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6819      	ldr	r1, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	461a      	mov	r2, r3
 8009408:	f7ff f98c 	bl	8008724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a8e      	ldr	r2, [pc, #568]	@ (800964c <HAL_ADC_ConfigChannel+0x624>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f040 8130 	bne.w	8009678 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10b      	bne.n	8009440 <HAL_ADC_ConfigChannel+0x418>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	0e9b      	lsrs	r3, r3, #26
 800942e:	3301      	adds	r3, #1
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	2b09      	cmp	r3, #9
 8009436:	bf94      	ite	ls
 8009438:	2301      	movls	r3, #1
 800943a:	2300      	movhi	r3, #0
 800943c:	b2db      	uxtb	r3, r3
 800943e:	e019      	b.n	8009474 <HAL_ADC_ConfigChannel+0x44c>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009448:	fa93 f3a3 	rbit	r3, r3
 800944c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800944e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009450:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8009458:	2320      	movs	r3, #32
 800945a:	e003      	b.n	8009464 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800945c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800945e:	fab3 f383 	clz	r3, r3
 8009462:	b2db      	uxtb	r3, r3
 8009464:	3301      	adds	r3, #1
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	2b09      	cmp	r3, #9
 800946c:	bf94      	ite	ls
 800946e:	2301      	movls	r3, #1
 8009470:	2300      	movhi	r3, #0
 8009472:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009474:	2b00      	cmp	r3, #0
 8009476:	d079      	beq.n	800956c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009480:	2b00      	cmp	r3, #0
 8009482:	d107      	bne.n	8009494 <HAL_ADC_ConfigChannel+0x46c>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	0e9b      	lsrs	r3, r3, #26
 800948a:	3301      	adds	r3, #1
 800948c:	069b      	lsls	r3, r3, #26
 800948e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009492:	e015      	b.n	80094c0 <HAL_ADC_ConfigChannel+0x498>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800949c:	fa93 f3a3 	rbit	r3, r3
 80094a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80094a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80094a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80094ac:	2320      	movs	r3, #32
 80094ae:	e003      	b.n	80094b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80094b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094b2:	fab3 f383 	clz	r3, r3
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	3301      	adds	r3, #1
 80094ba:	069b      	lsls	r3, r3, #26
 80094bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <HAL_ADC_ConfigChannel+0x4b8>
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	0e9b      	lsrs	r3, r3, #26
 80094d2:	3301      	adds	r3, #1
 80094d4:	f003 031f 	and.w	r3, r3, #31
 80094d8:	2101      	movs	r1, #1
 80094da:	fa01 f303 	lsl.w	r3, r1, r3
 80094de:	e017      	b.n	8009510 <HAL_ADC_ConfigChannel+0x4e8>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094e8:	fa93 f3a3 	rbit	r3, r3
 80094ec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80094ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80094f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80094f8:	2320      	movs	r3, #32
 80094fa:	e003      	b.n	8009504 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80094fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094fe:	fab3 f383 	clz	r3, r3
 8009502:	b2db      	uxtb	r3, r3
 8009504:	3301      	adds	r3, #1
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	2101      	movs	r1, #1
 800950c:	fa01 f303 	lsl.w	r3, r1, r3
 8009510:	ea42 0103 	orr.w	r1, r2, r3
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <HAL_ADC_ConfigChannel+0x50e>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	0e9b      	lsrs	r3, r3, #26
 8009526:	3301      	adds	r3, #1
 8009528:	f003 021f 	and.w	r2, r3, #31
 800952c:	4613      	mov	r3, r2
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	4413      	add	r3, r2
 8009532:	051b      	lsls	r3, r3, #20
 8009534:	e018      	b.n	8009568 <HAL_ADC_ConfigChannel+0x540>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	fa93 f3a3 	rbit	r3, r3
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800954e:	2320      	movs	r3, #32
 8009550:	e003      	b.n	800955a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009554:	fab3 f383 	clz	r3, r3
 8009558:	b2db      	uxtb	r3, r3
 800955a:	3301      	adds	r3, #1
 800955c:	f003 021f 	and.w	r2, r3, #31
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009568:	430b      	orrs	r3, r1
 800956a:	e080      	b.n	800966e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009574:	2b00      	cmp	r3, #0
 8009576:	d107      	bne.n	8009588 <HAL_ADC_ConfigChannel+0x560>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	0e9b      	lsrs	r3, r3, #26
 800957e:	3301      	adds	r3, #1
 8009580:	069b      	lsls	r3, r3, #26
 8009582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009586:	e015      	b.n	80095b4 <HAL_ADC_ConfigChannel+0x58c>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009590:	fa93 f3a3 	rbit	r3, r3
 8009594:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80095a0:	2320      	movs	r3, #32
 80095a2:	e003      	b.n	80095ac <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80095a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a6:	fab3 f383 	clz	r3, r3
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	3301      	adds	r3, #1
 80095ae:	069b      	lsls	r3, r3, #26
 80095b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d109      	bne.n	80095d4 <HAL_ADC_ConfigChannel+0x5ac>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	0e9b      	lsrs	r3, r3, #26
 80095c6:	3301      	adds	r3, #1
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	2101      	movs	r1, #1
 80095ce:	fa01 f303 	lsl.w	r3, r1, r3
 80095d2:	e017      	b.n	8009604 <HAL_ADC_ConfigChannel+0x5dc>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	fa93 f3a3 	rbit	r3, r3
 80095e0:	61fb      	str	r3, [r7, #28]
  return result;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80095ec:	2320      	movs	r3, #32
 80095ee:	e003      	b.n	80095f8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	fab3 f383 	clz	r3, r3
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	3301      	adds	r3, #1
 80095fa:	f003 031f 	and.w	r3, r3, #31
 80095fe:	2101      	movs	r1, #1
 8009600:	fa01 f303 	lsl.w	r3, r1, r3
 8009604:	ea42 0103 	orr.w	r1, r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10d      	bne.n	8009630 <HAL_ADC_ConfigChannel+0x608>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	0e9b      	lsrs	r3, r3, #26
 800961a:	3301      	adds	r3, #1
 800961c:	f003 021f 	and.w	r2, r3, #31
 8009620:	4613      	mov	r3, r2
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	4413      	add	r3, r2
 8009626:	3b1e      	subs	r3, #30
 8009628:	051b      	lsls	r3, r3, #20
 800962a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800962e:	e01d      	b.n	800966c <HAL_ADC_ConfigChannel+0x644>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	fa93 f3a3 	rbit	r3, r3
 800963c:	613b      	str	r3, [r7, #16]
  return result;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8009648:	2320      	movs	r3, #32
 800964a:	e005      	b.n	8009658 <HAL_ADC_ConfigChannel+0x630>
 800964c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	fab3 f383 	clz	r3, r3
 8009656:	b2db      	uxtb	r3, r3
 8009658:	3301      	adds	r3, #1
 800965a:	f003 021f 	and.w	r2, r3, #31
 800965e:	4613      	mov	r3, r2
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	4413      	add	r3, r2
 8009664:	3b1e      	subs	r3, #30
 8009666:	051b      	lsls	r3, r3, #20
 8009668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800966c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009672:	4619      	mov	r1, r3
 8009674:	f7ff f82b 	bl	80086ce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b45      	ldr	r3, [pc, #276]	@ (8009794 <HAL_ADC_ConfigChannel+0x76c>)
 800967e:	4013      	ands	r3, r2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d07c      	beq.n	800977e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009684:	4844      	ldr	r0, [pc, #272]	@ (8009798 <HAL_ADC_ConfigChannel+0x770>)
 8009686:	f7fe ff5f 	bl	8008548 <LL_ADC_GetCommonPathInternalCh>
 800968a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800968e:	4843      	ldr	r0, [pc, #268]	@ (800979c <HAL_ADC_ConfigChannel+0x774>)
 8009690:	f7ff f8ce 	bl	8008830 <LL_ADC_IsEnabled>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d15e      	bne.n	8009758 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a40      	ldr	r2, [pc, #256]	@ (80097a0 <HAL_ADC_ConfigChannel+0x778>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d127      	bne.n	80096f4 <HAL_ADC_ConfigChannel+0x6cc>
 80096a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80096a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d121      	bne.n	80096f4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a39      	ldr	r2, [pc, #228]	@ (800979c <HAL_ADC_ConfigChannel+0x774>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d161      	bne.n	800977e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80096ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80096be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80096c2:	4619      	mov	r1, r3
 80096c4:	4834      	ldr	r0, [pc, #208]	@ (8009798 <HAL_ADC_ConfigChannel+0x770>)
 80096c6:	f7fe ff2c 	bl	8008522 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80096ca:	4b36      	ldr	r3, [pc, #216]	@ (80097a4 <HAL_ADC_ConfigChannel+0x77c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	099b      	lsrs	r3, r3, #6
 80096d0:	4a35      	ldr	r2, [pc, #212]	@ (80097a8 <HAL_ADC_ConfigChannel+0x780>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	4613      	mov	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80096e4:	e002      	b.n	80096ec <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1f9      	bne.n	80096e6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80096f2:	e044      	b.n	800977e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a2c      	ldr	r2, [pc, #176]	@ (80097ac <HAL_ADC_ConfigChannel+0x784>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d113      	bne.n	8009726 <HAL_ADC_ConfigChannel+0x6fe>
 80096fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009702:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10d      	bne.n	8009726 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a23      	ldr	r2, [pc, #140]	@ (800979c <HAL_ADC_ConfigChannel+0x774>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d134      	bne.n	800977e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009718:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800971c:	4619      	mov	r1, r3
 800971e:	481e      	ldr	r0, [pc, #120]	@ (8009798 <HAL_ADC_ConfigChannel+0x770>)
 8009720:	f7fe feff 	bl	8008522 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009724:	e02b      	b.n	800977e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a21      	ldr	r2, [pc, #132]	@ (80097b0 <HAL_ADC_ConfigChannel+0x788>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d126      	bne.n	800977e <HAL_ADC_ConfigChannel+0x756>
 8009730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d120      	bne.n	800977e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a16      	ldr	r2, [pc, #88]	@ (800979c <HAL_ADC_ConfigChannel+0x774>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d11b      	bne.n	800977e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800974a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800974e:	4619      	mov	r1, r3
 8009750:	4811      	ldr	r0, [pc, #68]	@ (8009798 <HAL_ADC_ConfigChannel+0x770>)
 8009752:	f7fe fee6 	bl	8008522 <LL_ADC_SetCommonPathInternalCh>
 8009756:	e012      	b.n	800977e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800975c:	f043 0220 	orr.w	r2, r3, #32
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800976a:	e008      	b.n	800977e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009770:	f043 0220 	orr.w	r2, r3, #32
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8009786:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800978a:	4618      	mov	r0, r3
 800978c:	37d8      	adds	r7, #216	@ 0xd8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	80080000 	.word	0x80080000
 8009798:	50040300 	.word	0x50040300
 800979c:	50040000 	.word	0x50040000
 80097a0:	c7520000 	.word	0xc7520000
 80097a4:	20000020 	.word	0x20000020
 80097a8:	053e2d63 	.word	0x053e2d63
 80097ac:	cb840000 	.word	0xcb840000
 80097b0:	80000001 	.word	0x80000001

080097b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80097bc:	2300      	movs	r3, #0
 80097be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff f833 	bl	8008830 <LL_ADC_IsEnabled>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d15e      	bne.n	800988e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689a      	ldr	r2, [r3, #8]
 80097d6:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <ADC_Enable+0xe4>)
 80097d8:	4013      	ands	r3, r2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e2:	f043 0210 	orr.w	r2, r3, #16
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ee:	f043 0201 	orr.w	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e04a      	b.n	8009890 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4618      	mov	r0, r3
 8009800:	f7ff f802 	bl	8008808 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009804:	4825      	ldr	r0, [pc, #148]	@ (800989c <ADC_Enable+0xe8>)
 8009806:	f7fe fe9f 	bl	8008548 <LL_ADC_GetCommonPathInternalCh>
 800980a:	4603      	mov	r3, r0
 800980c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00f      	beq.n	8009834 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009814:	4b22      	ldr	r3, [pc, #136]	@ (80098a0 <ADC_Enable+0xec>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	099b      	lsrs	r3, r3, #6
 800981a:	4a22      	ldr	r2, [pc, #136]	@ (80098a4 <ADC_Enable+0xf0>)
 800981c:	fba2 2303 	umull	r2, r3, r2, r3
 8009820:	099b      	lsrs	r3, r3, #6
 8009822:	3301      	adds	r3, #1
 8009824:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009826:	e002      	b.n	800982e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1f9      	bne.n	8009828 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009834:	f7fe fe26 	bl	8008484 <HAL_GetTick>
 8009838:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800983a:	e021      	b.n	8009880 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fff5 	bl	8008830 <LL_ADC_IsEnabled>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d104      	bne.n	8009856 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe ffd9 	bl	8008808 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009856:	f7fe fe15 	bl	8008484 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	2b02      	cmp	r3, #2
 8009862:	d90d      	bls.n	8009880 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009868:	f043 0210 	orr.w	r2, r3, #16
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009874:	f043 0201 	orr.w	r2, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e007      	b.n	8009890 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b01      	cmp	r3, #1
 800988c:	d1d6      	bne.n	800983c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	8000003f 	.word	0x8000003f
 800989c:	50040300 	.word	0x50040300
 80098a0:	20000020 	.word	0x20000020
 80098a4:	053e2d63 	.word	0x053e2d63

080098a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d14b      	bne.n	800995a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d021      	beq.n	8009920 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fe94 	bl	800860e <LL_ADC_REG_IsTriggerSourceSWStart>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d032      	beq.n	8009952 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d12b      	bne.n	8009952 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d11f      	bne.n	8009952 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009916:	f043 0201 	orr.w	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	655a      	str	r2, [r3, #84]	@ 0x54
 800991e:	e018      	b.n	8009952 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d111      	bne.n	8009952 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009932:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800993e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d105      	bne.n	8009952 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800994a:	f043 0201 	orr.w	r2, r3, #1
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fb40 	bl	8008fd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009958:	e00e      	b.n	8009978 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800995e:	f003 0310 	and.w	r3, r3, #16
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f7ff fb54 	bl	8009014 <HAL_ADC_ErrorCallback>
}
 800996c:	e004      	b.n	8009978 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4798      	blx	r3
}
 8009978:	bf00      	nop
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f7ff fb2c 	bl	8008fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ba:	f043 0204 	orr.w	r2, r3, #4
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff fb26 	bl	8009014 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f003 0307 	and.w	r3, r3, #7
 8009a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a44:	4b0c      	ldr	r3, [pc, #48]	@ (8009a78 <__NVIC_SetPriorityGrouping+0x44>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009a50:	4013      	ands	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a66:	4a04      	ldr	r2, [pc, #16]	@ (8009a78 <__NVIC_SetPriorityGrouping+0x44>)
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	60d3      	str	r3, [r2, #12]
}
 8009a6c:	bf00      	nop
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	e000ed00 	.word	0xe000ed00

08009a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a80:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <__NVIC_GetPriorityGrouping+0x18>)
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	0a1b      	lsrs	r3, r3, #8
 8009a86:	f003 0307 	and.w	r3, r3, #7
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	e000ed00 	.word	0xe000ed00

08009a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	db0b      	blt.n	8009ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	f003 021f 	and.w	r2, r3, #31
 8009ab0:	4907      	ldr	r1, [pc, #28]	@ (8009ad0 <__NVIC_EnableIRQ+0x38>)
 8009ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	2001      	movs	r0, #1
 8009aba:	fa00 f202 	lsl.w	r2, r0, r2
 8009abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	e000e100 	.word	0xe000e100

08009ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	db0a      	blt.n	8009afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	490c      	ldr	r1, [pc, #48]	@ (8009b20 <__NVIC_SetPriority+0x4c>)
 8009aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af2:	0112      	lsls	r2, r2, #4
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	440b      	add	r3, r1
 8009af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009afc:	e00a      	b.n	8009b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	4908      	ldr	r1, [pc, #32]	@ (8009b24 <__NVIC_SetPriority+0x50>)
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	3b04      	subs	r3, #4
 8009b0c:	0112      	lsls	r2, r2, #4
 8009b0e:	b2d2      	uxtb	r2, r2
 8009b10:	440b      	add	r3, r1
 8009b12:	761a      	strb	r2, [r3, #24]
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	e000e100 	.word	0xe000e100
 8009b24:	e000ed00 	.word	0xe000ed00

08009b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b089      	sub	sp, #36	@ 0x24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	f1c3 0307 	rsb	r3, r3, #7
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	bf28      	it	cs
 8009b46:	2304      	movcs	r3, #4
 8009b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	2b06      	cmp	r3, #6
 8009b50:	d902      	bls.n	8009b58 <NVIC_EncodePriority+0x30>
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	3b03      	subs	r3, #3
 8009b56:	e000      	b.n	8009b5a <NVIC_EncodePriority+0x32>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	fa02 f303 	lsl.w	r3, r2, r3
 8009b66:	43da      	mvns	r2, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	401a      	ands	r2, r3
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b70:	f04f 31ff 	mov.w	r1, #4294967295
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7a:	43d9      	mvns	r1, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b80:	4313      	orrs	r3, r2
         );
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3724      	adds	r7, #36	@ 0x24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff ff4c 	bl	8009a34 <__NVIC_SetPriorityGrouping>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009bb2:	f7ff ff63 	bl	8009a7c <__NVIC_GetPriorityGrouping>
 8009bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	6978      	ldr	r0, [r7, #20]
 8009bbe:	f7ff ffb3 	bl	8009b28 <NVIC_EncodePriority>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff ff82 	bl	8009ad4 <__NVIC_SetPriority>
}
 8009bd0:	bf00      	nop
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff ff56 	bl	8009a98 <__NVIC_EnableIRQ>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e08e      	b.n	8009d24 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4b47      	ldr	r3, [pc, #284]	@ (8009d2c <HAL_DMA_Init+0x138>)
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d80f      	bhi.n	8009c32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	4b45      	ldr	r3, [pc, #276]	@ (8009d30 <HAL_DMA_Init+0x13c>)
 8009c1a:	4413      	add	r3, r2
 8009c1c:	4a45      	ldr	r2, [pc, #276]	@ (8009d34 <HAL_DMA_Init+0x140>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	091b      	lsrs	r3, r3, #4
 8009c24:	009a      	lsls	r2, r3, #2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a42      	ldr	r2, [pc, #264]	@ (8009d38 <HAL_DMA_Init+0x144>)
 8009c2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8009c30:	e00e      	b.n	8009c50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	4b40      	ldr	r3, [pc, #256]	@ (8009d3c <HAL_DMA_Init+0x148>)
 8009c3a:	4413      	add	r3, r2
 8009c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8009d34 <HAL_DMA_Init+0x140>)
 8009c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c42:	091b      	lsrs	r3, r3, #4
 8009c44:	009a      	lsls	r2, r3, #2
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8009d40 <HAL_DMA_Init+0x14c>)
 8009c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9b6 	bl	800a014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cb0:	d102      	bne.n	8009cb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cc0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009cc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009cce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d010      	beq.n	8009cfa <HAL_DMA_Init+0x106>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	d80c      	bhi.n	8009cfa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f9d5 	bl	800a090 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009cf6:	605a      	str	r2, [r3, #4]
 8009cf8:	e008      	b.n	8009d0c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	40020407 	.word	0x40020407
 8009d30:	bffdfff8 	.word	0xbffdfff8
 8009d34:	cccccccd 	.word	0xcccccccd
 8009d38:	40020000 	.word	0x40020000
 8009d3c:	bffdfbf8 	.word	0xbffdfbf8
 8009d40:	40020400 	.word	0x40020400

08009d44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <HAL_DMA_Start_IT+0x20>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e066      	b.n	8009e32 <HAL_DMA_Start_IT+0xee>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d155      	bne.n	8009e24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0201 	bic.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f8fb 	bl	8009f98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 020e 	orr.w	r2, r2, #14
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	e00f      	b.n	8009ddc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f022 0204 	bic.w	r2, r2, #4
 8009dca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 020a 	orr.w	r2, r2, #10
 8009dda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d007      	beq.n	8009dfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009df8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0201 	orr.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	e005      	b.n	8009e30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e56:	f003 031c 	and.w	r3, r3, #28
 8009e5a:	2204      	movs	r2, #4
 8009e5c:	409a      	lsls	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	4013      	ands	r3, r2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d026      	beq.n	8009eb4 <HAL_DMA_IRQHandler+0x7a>
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d021      	beq.n	8009eb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d107      	bne.n	8009e8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0204 	bic.w	r2, r2, #4
 8009e8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e92:	f003 021c 	and.w	r2, r3, #28
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	2104      	movs	r1, #4
 8009e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8009ea0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d071      	beq.n	8009f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009eb2:	e06c      	b.n	8009f8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb8:	f003 031c 	and.w	r3, r3, #28
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	409a      	lsls	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d02e      	beq.n	8009f26 <HAL_DMA_IRQHandler+0xec>
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d029      	beq.n	8009f26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10b      	bne.n	8009ef8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 020a 	bic.w	r2, r2, #10
 8009eee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efc:	f003 021c 	and.w	r2, r3, #28
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f04:	2102      	movs	r1, #2
 8009f06:	fa01 f202 	lsl.w	r2, r1, r2
 8009f0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d038      	beq.n	8009f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009f24:	e033      	b.n	8009f8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2a:	f003 031c 	and.w	r3, r3, #28
 8009f2e:	2208      	movs	r2, #8
 8009f30:	409a      	lsls	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4013      	ands	r3, r2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d02a      	beq.n	8009f90 <HAL_DMA_IRQHandler+0x156>
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d025      	beq.n	8009f90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 020e 	bic.w	r2, r2, #14
 8009f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f58:	f003 021c 	and.w	r2, r3, #28
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f202 	lsl.w	r2, r1, r2
 8009f66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d004      	beq.n	8009f90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
}
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009fae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d004      	beq.n	8009fc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009fc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc6:	f003 021c 	and.w	r2, r3, #28
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fce:	2101      	movs	r1, #1
 8009fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8009fd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b10      	cmp	r3, #16
 8009fe4:	d108      	bne.n	8009ff8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009ff6:	e007      	b.n	800a008 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	60da      	str	r2, [r3, #12]
}
 800a008:	bf00      	nop
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	4b17      	ldr	r3, [pc, #92]	@ (800a080 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a024:	429a      	cmp	r2, r3
 800a026:	d80a      	bhi.n	800a03e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02c:	089b      	lsrs	r3, r3, #2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a034:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	6493      	str	r3, [r2, #72]	@ 0x48
 800a03c:	e007      	b.n	800a04e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a042:	089b      	lsrs	r3, r3, #2
 800a044:	009a      	lsls	r2, r3, #2
 800a046:	4b0f      	ldr	r3, [pc, #60]	@ (800a084 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a048:	4413      	add	r3, r2
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	3b08      	subs	r3, #8
 800a056:	4a0c      	ldr	r2, [pc, #48]	@ (800a088 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a058:	fba2 2303 	umull	r2, r3, r2, r3
 800a05c:	091b      	lsrs	r3, r3, #4
 800a05e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a0a      	ldr	r2, [pc, #40]	@ (800a08c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a064:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	2201      	movs	r2, #1
 800a06e:	409a      	lsls	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	40020407 	.word	0x40020407
 800a084:	4002081c 	.word	0x4002081c
 800a088:	cccccccd 	.word	0xcccccccd
 800a08c:	40020880 	.word	0x40020880

0800a090 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0a0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a09      	ldr	r2, [pc, #36]	@ (800a0d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800a0b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	2201      	movs	r2, #1
 800a0c0:	409a      	lsls	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	1000823f 	.word	0x1000823f
 800a0d8:	40020940 	.word	0x40020940

0800a0dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a0ea:	e14c      	b.n	800a386 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 813e 	beq.w	800a380 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d005      	beq.n	800a11c <HAL_GPIO_Init+0x40>
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f003 0303 	and.w	r3, r3, #3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d130      	bne.n	800a17e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	2203      	movs	r2, #3
 800a128:	fa02 f303 	lsl.w	r3, r2, r3
 800a12c:	43db      	mvns	r3, r3
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4013      	ands	r3, r2
 800a132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a152:	2201      	movs	r2, #1
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	fa02 f303 	lsl.w	r3, r2, r3
 800a15a:	43db      	mvns	r3, r3
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4013      	ands	r3, r2
 800a160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	091b      	lsrs	r3, r3, #4
 800a168:	f003 0201 	and.w	r2, r3, #1
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	2b03      	cmp	r3, #3
 800a188:	d017      	beq.n	800a1ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	2203      	movs	r2, #3
 800a196:	fa02 f303 	lsl.w	r3, r2, r3
 800a19a:	43db      	mvns	r3, r3
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	4013      	ands	r3, r2
 800a1a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d123      	bne.n	800a20e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	08da      	lsrs	r2, r3, #3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3208      	adds	r2, #8
 800a1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	220f      	movs	r2, #15
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	43db      	mvns	r3, r3
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	08da      	lsrs	r2, r3, #3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3208      	adds	r2, #8
 800a208:	6939      	ldr	r1, [r7, #16]
 800a20a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	2203      	movs	r2, #3
 800a21a:	fa02 f303 	lsl.w	r3, r2, r3
 800a21e:	43db      	mvns	r3, r3
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	4013      	ands	r3, r2
 800a224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f003 0203 	and.w	r2, r3, #3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 8098 	beq.w	800a380 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800a250:	4a54      	ldr	r2, [pc, #336]	@ (800a3a4 <HAL_GPIO_Init+0x2c8>)
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	089b      	lsrs	r3, r3, #2
 800a256:	3302      	adds	r3, #2
 800a258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	220f      	movs	r2, #15
 800a268:	fa02 f303 	lsl.w	r3, r2, r3
 800a26c:	43db      	mvns	r3, r3
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	4013      	ands	r3, r2
 800a272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a27a:	d019      	beq.n	800a2b0 <HAL_GPIO_Init+0x1d4>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a4a      	ldr	r2, [pc, #296]	@ (800a3a8 <HAL_GPIO_Init+0x2cc>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d013      	beq.n	800a2ac <HAL_GPIO_Init+0x1d0>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a49      	ldr	r2, [pc, #292]	@ (800a3ac <HAL_GPIO_Init+0x2d0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00d      	beq.n	800a2a8 <HAL_GPIO_Init+0x1cc>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a48      	ldr	r2, [pc, #288]	@ (800a3b0 <HAL_GPIO_Init+0x2d4>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d007      	beq.n	800a2a4 <HAL_GPIO_Init+0x1c8>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a47      	ldr	r2, [pc, #284]	@ (800a3b4 <HAL_GPIO_Init+0x2d8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d101      	bne.n	800a2a0 <HAL_GPIO_Init+0x1c4>
 800a29c:	2304      	movs	r3, #4
 800a29e:	e008      	b.n	800a2b2 <HAL_GPIO_Init+0x1d6>
 800a2a0:	2307      	movs	r3, #7
 800a2a2:	e006      	b.n	800a2b2 <HAL_GPIO_Init+0x1d6>
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e004      	b.n	800a2b2 <HAL_GPIO_Init+0x1d6>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e002      	b.n	800a2b2 <HAL_GPIO_Init+0x1d6>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <HAL_GPIO_Init+0x1d6>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	f002 0203 	and.w	r2, r2, #3
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	4093      	lsls	r3, r2
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a2c2:	4938      	ldr	r1, [pc, #224]	@ (800a3a4 <HAL_GPIO_Init+0x2c8>)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a2d0:	4b39      	ldr	r3, [pc, #228]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a2f4:	4a30      	ldr	r2, [pc, #192]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a2fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	43db      	mvns	r3, r3
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	4013      	ands	r3, r2
 800a308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a31e:	4a26      	ldr	r2, [pc, #152]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a324:	4b24      	ldr	r3, [pc, #144]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a32a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	43db      	mvns	r3, r3
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4013      	ands	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a34a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800a352:	4b19      	ldr	r3, [pc, #100]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	43db      	mvns	r3, r3
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4013      	ands	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a378:	4a0f      	ldr	r2, [pc, #60]	@ (800a3b8 <HAL_GPIO_Init+0x2dc>)
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	3301      	adds	r3, #1
 800a384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	fa22 f303 	lsr.w	r3, r2, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	f47f aeab 	bne.w	800a0ec <HAL_GPIO_Init+0x10>
  }
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	371c      	adds	r7, #28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	48000400 	.word	0x48000400
 800a3ac:	48000800 	.word	0x48000800
 800a3b0:	48000c00 	.word	0x48000c00
 800a3b4:	48001000 	.word	0x48001000
 800a3b8:	58000800 	.word	0x58000800

0800a3bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	807b      	strh	r3, [r7, #2]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3cc:	787b      	ldrb	r3, [r7, #1]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3d2:	887a      	ldrh	r2, [r7, #2]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a3d8:	e002      	b.n	800a3e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a3da:	887a      	ldrh	r2, [r7, #2]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e08d      	b.n	800a51a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7fd fd9e 	bl	8007f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2224      	movs	r2, #36	@ 0x24
 800a41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a43c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a44c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d107      	bne.n	800a466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a462:	609a      	str	r2, [r3, #8]
 800a464:	e006      	b.n	800a474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d108      	bne.n	800a48e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a48a:	605a      	str	r2, [r3, #4]
 800a48c:	e007      	b.n	800a49e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a49c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a4ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a4c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	69d9      	ldr	r1, [r3, #28]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a1a      	ldr	r2, [r3, #32]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0201 	orr.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af02      	add	r7, sp, #8
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	607a      	str	r2, [r7, #4]
 800a52e:	461a      	mov	r2, r3
 800a530:	460b      	mov	r3, r1
 800a532:	817b      	strh	r3, [r7, #10]
 800a534:	4613      	mov	r3, r2
 800a536:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b20      	cmp	r3, #32
 800a542:	f040 80fd 	bne.w	800a740 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <HAL_I2C_Master_Transmit+0x30>
 800a550:	2302      	movs	r3, #2
 800a552:	e0f6      	b.n	800a742 <HAL_I2C_Master_Transmit+0x21e>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a55c:	f7fd ff92 	bl	8008484 <HAL_GetTick>
 800a560:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	2319      	movs	r3, #25
 800a568:	2201      	movs	r2, #1
 800a56a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fa0a 	bl	800a988 <I2C_WaitOnFlagUntilTimeout>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e0e1      	b.n	800a742 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2221      	movs	r2, #33	@ 0x21
 800a582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2210      	movs	r2, #16
 800a58a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	893a      	ldrh	r2, [r7, #8]
 800a59e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	2bff      	cmp	r3, #255	@ 0xff
 800a5ae:	d906      	bls.n	800a5be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	22ff      	movs	r2, #255	@ 0xff
 800a5b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a5b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a5ba:	617b      	str	r3, [r7, #20]
 800a5bc:	e007      	b.n	800a5ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a5c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a5cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d024      	beq.n	800a620 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	3301      	adds	r3, #1
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	8979      	ldrh	r1, [r7, #10]
 800a612:	4b4e      	ldr	r3, [pc, #312]	@ (800a74c <HAL_I2C_Master_Transmit+0x228>)
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 fc05 	bl	800ae28 <I2C_TransferConfig>
 800a61e:	e066      	b.n	800a6ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a624:	b2da      	uxtb	r2, r3
 800a626:	8979      	ldrh	r1, [r7, #10]
 800a628:	4b48      	ldr	r3, [pc, #288]	@ (800a74c <HAL_I2C_Master_Transmit+0x228>)
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 fbfa 	bl	800ae28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a634:	e05b      	b.n	800a6ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	6a39      	ldr	r1, [r7, #32]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f9fd 	bl	800aa3a <I2C_WaitOnTXISFlagUntilTimeout>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e07b      	b.n	800a742 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64e:	781a      	ldrb	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a664:	b29b      	uxth	r3, r3
 800a666:	3b01      	subs	r3, #1
 800a668:	b29a      	uxth	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d034      	beq.n	800a6ee <HAL_I2C_Master_Transmit+0x1ca>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d130      	bne.n	800a6ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	2200      	movs	r2, #0
 800a694:	2180      	movs	r1, #128	@ 0x80
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 f976 	bl	800a988 <I2C_WaitOnFlagUntilTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e04d      	b.n	800a742 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	2bff      	cmp	r3, #255	@ 0xff
 800a6ae:	d90e      	bls.n	800a6ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	22ff      	movs	r2, #255	@ 0xff
 800a6b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	8979      	ldrh	r1, [r7, #10]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 fbae 	bl	800ae28 <I2C_TransferConfig>
 800a6cc:	e00f      	b.n	800a6ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	8979      	ldrh	r1, [r7, #10]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 fb9d 	bl	800ae28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d19e      	bne.n	800a636 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	6a39      	ldr	r1, [r7, #32]
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f9e3 	bl	800aac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e01a      	b.n	800a742 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2220      	movs	r2, #32
 800a712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6859      	ldr	r1, [r3, #4]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b0c      	ldr	r3, [pc, #48]	@ (800a750 <HAL_I2C_Master_Transmit+0x22c>)
 800a720:	400b      	ands	r3, r1
 800a722:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2220      	movs	r2, #32
 800a728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	e000      	b.n	800a742 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800a740:	2302      	movs	r3, #2
  }
}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	80002000 	.word	0x80002000
 800a750:	fe00e800 	.word	0xfe00e800

0800a754 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af02      	add	r7, sp, #8
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	461a      	mov	r2, r3
 800a760:	460b      	mov	r3, r1
 800a762:	817b      	strh	r3, [r7, #10]
 800a764:	4613      	mov	r3, r2
 800a766:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b20      	cmp	r3, #32
 800a772:	f040 80db 	bne.w	800a92c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_I2C_Master_Receive+0x30>
 800a780:	2302      	movs	r3, #2
 800a782:	e0d4      	b.n	800a92e <HAL_I2C_Master_Receive+0x1da>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a78c:	f7fd fe7a 	bl	8008484 <HAL_GetTick>
 800a790:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	2319      	movs	r3, #25
 800a798:	2201      	movs	r2, #1
 800a79a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f8f2 	bl	800a988 <I2C_WaitOnFlagUntilTimeout>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e0bf      	b.n	800a92e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2222      	movs	r2, #34	@ 0x22
 800a7b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	893a      	ldrh	r2, [r7, #8]
 800a7ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	2bff      	cmp	r3, #255	@ 0xff
 800a7de:	d90e      	bls.n	800a7fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	22ff      	movs	r2, #255	@ 0xff
 800a7e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	8979      	ldrh	r1, [r7, #10]
 800a7ee:	4b52      	ldr	r3, [pc, #328]	@ (800a938 <HAL_I2C_Master_Receive+0x1e4>)
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fb16 	bl	800ae28 <I2C_TransferConfig>
 800a7fc:	e06d      	b.n	800a8da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a802:	b29a      	uxth	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	8979      	ldrh	r1, [r7, #10]
 800a810:	4b49      	ldr	r3, [pc, #292]	@ (800a938 <HAL_I2C_Master_Receive+0x1e4>)
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 fb05 	bl	800ae28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a81e:	e05c      	b.n	800a8da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	6a39      	ldr	r1, [r7, #32]
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 f993 	bl	800ab50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e07c      	b.n	800a92e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a850:	3b01      	subs	r3, #1
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	b29a      	uxth	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d034      	beq.n	800a8da <HAL_I2C_Master_Receive+0x186>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a874:	2b00      	cmp	r3, #0
 800a876:	d130      	bne.n	800a8da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	2200      	movs	r2, #0
 800a880:	2180      	movs	r1, #128	@ 0x80
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f880 	bl	800a988 <I2C_WaitOnFlagUntilTimeout>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e04d      	b.n	800a92e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a896:	b29b      	uxth	r3, r3
 800a898:	2bff      	cmp	r3, #255	@ 0xff
 800a89a:	d90e      	bls.n	800a8ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	22ff      	movs	r2, #255	@ 0xff
 800a8a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	8979      	ldrh	r1, [r7, #10]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 fab8 	bl	800ae28 <I2C_TransferConfig>
 800a8b8:	e00f      	b.n	800a8da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	8979      	ldrh	r1, [r7, #10]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 faa7 	bl	800ae28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d19d      	bne.n	800a820 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	6a39      	ldr	r1, [r7, #32]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 f8ed 	bl	800aac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e01a      	b.n	800a92e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6859      	ldr	r1, [r3, #4]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <HAL_I2C_Master_Receive+0x1e8>)
 800a90c:	400b      	ands	r3, r1
 800a90e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2220      	movs	r2, #32
 800a914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	e000      	b.n	800a92e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a92c:	2302      	movs	r3, #2
  }
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	80002400 	.word	0x80002400
 800a93c:	fe00e800 	.word	0xfe00e800

0800a940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	2b02      	cmp	r3, #2
 800a954:	d103      	bne.n	800a95e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2200      	movs	r2, #0
 800a95c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d007      	beq.n	800a97c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0201 	orr.w	r2, r2, #1
 800a97a:	619a      	str	r2, [r3, #24]
  }
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	4613      	mov	r3, r2
 800a996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a998:	e03b      	b.n	800aa12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 f962 	bl	800ac68 <I2C_IsErrorOccurred>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e041      	b.n	800aa32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d02d      	beq.n	800aa12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9b6:	f7fd fd65 	bl	8008484 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d302      	bcc.n	800a9cc <I2C_WaitOnFlagUntilTimeout+0x44>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d122      	bne.n	800aa12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	bf0c      	ite	eq
 800a9dc:	2301      	moveq	r3, #1
 800a9de:	2300      	movne	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d113      	bne.n	800aa12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ee:	f043 0220 	orr.w	r2, r3, #32
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e00f      	b.n	800aa32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	bf0c      	ite	eq
 800aa22:	2301      	moveq	r3, #1
 800aa24:	2300      	movne	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	79fb      	ldrb	r3, [r7, #7]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d0b4      	beq.n	800a99a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa46:	e033      	b.n	800aab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 f90b 	bl	800ac68 <I2C_IsErrorOccurred>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e031      	b.n	800aac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d025      	beq.n	800aab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa64:	f7fd fd0e 	bl	8008484 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d302      	bcc.n	800aa7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d11a      	bne.n	800aab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d013      	beq.n	800aab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa8c:	f043 0220 	orr.w	r2, r3, #32
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e007      	b.n	800aac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	f003 0302 	and.w	r3, r3, #2
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d1c4      	bne.n	800aa48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aad4:	e02f      	b.n	800ab36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	68b9      	ldr	r1, [r7, #8]
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 f8c4 	bl	800ac68 <I2C_IsErrorOccurred>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e02d      	b.n	800ab46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaea:	f7fd fccb 	bl	8008484 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d302      	bcc.n	800ab00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11a      	bne.n	800ab36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	f003 0320 	and.w	r3, r3, #32
 800ab0a:	2b20      	cmp	r3, #32
 800ab0c:	d013      	beq.n	800ab36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab12:	f043 0220 	orr.w	r2, r3, #32
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e007      	b.n	800ab46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	f003 0320 	and.w	r3, r3, #32
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	d1c8      	bne.n	800aad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ab60:	e071      	b.n	800ac46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f87e 	bl	800ac68 <I2C_IsErrorOccurred>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f003 0320 	and.w	r3, r3, #32
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d13b      	bne.n	800abfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d138      	bne.n	800abfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d105      	bne.n	800aba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	2b10      	cmp	r3, #16
 800abb0:	d121      	bne.n	800abf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2210      	movs	r2, #16
 800abb8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2204      	movs	r2, #4
 800abbe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2220      	movs	r2, #32
 800abc6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6859      	ldr	r1, [r3, #4]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	4b24      	ldr	r3, [pc, #144]	@ (800ac64 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800abd4:	400b      	ands	r3, r1
 800abd6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2220      	movs	r2, #32
 800abdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
 800abf4:	e002      	b.n	800abfc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800abfc:	f7fd fc42 	bl	8008484 <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d119      	bne.n	800ac46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d116      	bne.n	800ac46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	f003 0304 	and.w	r3, r3, #4
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d00f      	beq.n	800ac46 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac2a:	f043 0220 	orr.w	r2, r3, #32
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2220      	movs	r2, #32
 800ac36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d002      	beq.n	800ac5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d083      	beq.n	800ab62 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	fe00e800 	.word	0xfe00e800

0800ac68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08a      	sub	sp, #40	@ 0x28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	f003 0310 	and.w	r3, r3, #16
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d068      	beq.n	800ad66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2210      	movs	r2, #16
 800ac9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ac9c:	e049      	b.n	800ad32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d045      	beq.n	800ad32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aca6:	f7fd fbed 	bl	8008484 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d302      	bcc.n	800acbc <I2C_IsErrorOccurred+0x54>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d13a      	bne.n	800ad32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800acce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acde:	d121      	bne.n	800ad24 <I2C_IsErrorOccurred+0xbc>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ace6:	d01d      	beq.n	800ad24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ace8:	7cfb      	ldrb	r3, [r7, #19]
 800acea:	2b20      	cmp	r3, #32
 800acec:	d01a      	beq.n	800ad24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800acfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800acfe:	f7fd fbc1 	bl	8008484 <HAL_GetTick>
 800ad02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad04:	e00e      	b.n	800ad24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ad06:	f7fd fbbd 	bl	8008484 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b19      	cmp	r3, #25
 800ad12:	d907      	bls.n	800ad24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	f043 0320 	orr.w	r3, r3, #32
 800ad1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ad22:	e006      	b.n	800ad32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d1e9      	bne.n	800ad06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d003      	beq.n	800ad48 <I2C_IsErrorOccurred+0xe0>
 800ad40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0aa      	beq.n	800ac9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ad48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d103      	bne.n	800ad58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2220      	movs	r2, #32
 800ad56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	f043 0304 	orr.w	r3, r3, #4
 800ad5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	f043 0301 	orr.w	r3, r3, #1
 800ad7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00b      	beq.n	800adb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	f043 0308 	orr.w	r3, r3, #8
 800ada0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800adaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	f043 0302 	orr.w	r3, r3, #2
 800adc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800add4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01c      	beq.n	800ae16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff fdaf 	bl	800a940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6859      	ldr	r1, [r3, #4]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	4b0d      	ldr	r3, [pc, #52]	@ (800ae24 <I2C_IsErrorOccurred+0x1bc>)
 800adee:	400b      	ands	r3, r1
 800adf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	431a      	orrs	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ae16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3728      	adds	r7, #40	@ 0x28
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	fe00e800 	.word	0xfe00e800

0800ae28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	607b      	str	r3, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	817b      	strh	r3, [r7, #10]
 800ae36:	4613      	mov	r3, r2
 800ae38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae3a:	897b      	ldrh	r3, [r7, #10]
 800ae3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae40:	7a7b      	ldrb	r3, [r7, #9]
 800ae42:	041b      	lsls	r3, r3, #16
 800ae44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	0d5b      	lsrs	r3, r3, #21
 800ae62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ae66:	4b08      	ldr	r3, [pc, #32]	@ (800ae88 <I2C_TransferConfig+0x60>)
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	43db      	mvns	r3, r3
 800ae6c:	ea02 0103 	and.w	r1, r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ae7a:	bf00      	nop
 800ae7c:	371c      	adds	r7, #28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	03ff63ff 	.word	0x03ff63ff

0800ae8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	d138      	bne.n	800af14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e032      	b.n	800af16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2224      	movs	r2, #36	@ 0x24
 800aebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0201 	bic.w	r2, r2, #1
 800aece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0201 	orr.w	r2, r2, #1
 800aefe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2220      	movs	r2, #32
 800af04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	e000      	b.n	800af16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af14:	2302      	movs	r3, #2
  }
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800af22:	b480      	push	{r7}
 800af24:	b085      	sub	sp, #20
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b20      	cmp	r3, #32
 800af36:	d139      	bne.n	800afac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d101      	bne.n	800af46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800af42:	2302      	movs	r3, #2
 800af44:	e033      	b.n	800afae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2224      	movs	r2, #36	@ 0x24
 800af52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0201 	bic.w	r2, r2, #1
 800af64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800af74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f042 0201 	orr.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	e000      	b.n	800afae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800afac:	2302      	movs	r3, #2
  }
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e0c0      	b.n	800b14e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d106      	bne.n	800afe6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f00b fcf1 	bl	80169c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2203      	movs	r2, #3
 800afea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f003 ff21 	bl	800ee3a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
 800affc:	e03e      	b.n	800b07c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800affe:	7bfa      	ldrb	r2, [r7, #15]
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	440b      	add	r3, r1
 800b00c:	3311      	adds	r3, #17
 800b00e:	2201      	movs	r2, #1
 800b010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b012:	7bfa      	ldrb	r2, [r7, #15]
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	440b      	add	r3, r1
 800b020:	3310      	adds	r3, #16
 800b022:	7bfa      	ldrb	r2, [r7, #15]
 800b024:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b026:	7bfa      	ldrb	r2, [r7, #15]
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	00db      	lsls	r3, r3, #3
 800b032:	440b      	add	r3, r1
 800b034:	3313      	adds	r3, #19
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b03a:	7bfa      	ldrb	r2, [r7, #15]
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	00db      	lsls	r3, r3, #3
 800b046:	440b      	add	r3, r1
 800b048:	3320      	adds	r3, #32
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b04e:	7bfa      	ldrb	r2, [r7, #15]
 800b050:	6879      	ldr	r1, [r7, #4]
 800b052:	4613      	mov	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	00db      	lsls	r3, r3, #3
 800b05a:	440b      	add	r3, r1
 800b05c:	3324      	adds	r3, #36	@ 0x24
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	1c5a      	adds	r2, r3, #1
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	440b      	add	r3, r1
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	3301      	adds	r3, #1
 800b07a:	73fb      	strb	r3, [r7, #15]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	791b      	ldrb	r3, [r3, #4]
 800b080:	7bfa      	ldrb	r2, [r7, #15]
 800b082:	429a      	cmp	r2, r3
 800b084:	d3bb      	bcc.n	800affe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
 800b08a:	e044      	b.n	800b116 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b08c:	7bfa      	ldrb	r2, [r7, #15]
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	440b      	add	r3, r1
 800b09a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800b09e:	2200      	movs	r2, #0
 800b0a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b0a2:	7bfa      	ldrb	r2, [r7, #15]
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	440b      	add	r3, r1
 800b0b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0b4:	7bfa      	ldrb	r2, [r7, #15]
 800b0b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0b8:	7bfa      	ldrb	r2, [r7, #15]
 800b0ba:	6879      	ldr	r1, [r7, #4]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	440b      	add	r3, r1
 800b0c6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b0ce:	7bfa      	ldrb	r2, [r7, #15]
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	440b      	add	r3, r1
 800b0dc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b0e4:	7bfa      	ldrb	r2, [r7, #15]
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	440b      	add	r3, r1
 800b0f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b0fa:	7bfa      	ldrb	r2, [r7, #15]
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	440b      	add	r3, r1
 800b108:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b10c:	2200      	movs	r2, #0
 800b10e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	3301      	adds	r3, #1
 800b114:	73fb      	strb	r3, [r7, #15]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	791b      	ldrb	r3, [r3, #4]
 800b11a:	7bfa      	ldrb	r2, [r7, #15]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d3b5      	bcc.n	800b08c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3304      	adds	r3, #4
 800b128:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b12c:	f003 fea0 	bl	800ee70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	7a9b      	ldrb	r3, [r3, #10]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d102      	bne.n	800b14c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f001 fc0e 	bl	800c968 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b164:	2b01      	cmp	r3, #1
 800b166:	d101      	bne.n	800b16c <HAL_PCD_Start+0x16>
 800b168:	2302      	movs	r3, #2
 800b16a:	e012      	b.n	800b192 <HAL_PCD_Start+0x3c>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	f003 fe47 	bl	800ee0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f005 fc24 	bl	80109d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f005 fc29 	bl	80109fe <USB_ReadInterrupts>
 800b1ac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fb06 	bl	800b7ca <PCD_EP_ISR_Handler>

    return;
 800b1be:	e110      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d013      	beq.n	800b1f2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1dc:	b292      	uxth	r2, r2
 800b1de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f00b fc93 	bl	8016b0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f8fc 	bl	800b3e8 <HAL_PCD_SetAddress>

    return;
 800b1f0:	e0f7      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b20e:	b292      	uxth	r2, r2
 800b210:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b214:	e0e5      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00c      	beq.n	800b23a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b228:	b29a      	uxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b232:	b292      	uxth	r2, r2
 800b234:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b238:	e0d3      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d034      	beq.n	800b2ae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f022 0204 	bic.w	r2, r2, #4
 800b256:	b292      	uxth	r2, r2
 800b258:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b264:	b29a      	uxth	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0208 	bic.w	r2, r2, #8
 800b26e:	b292      	uxth	r2, r2
 800b270:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d107      	bne.n	800b28e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b286:	2100      	movs	r1, #0
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f00b fe35 	bl	8016ef8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f00b fc76 	bl	8016b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b2a6:	b292      	uxth	r2, r2
 800b2a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b2ac:	e099      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d027      	beq.n	800b308 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0208 	orr.w	r2, r2, #8
 800b2ca:	b292      	uxth	r2, r2
 800b2cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2e2:	b292      	uxth	r2, r2
 800b2e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f042 0204 	orr.w	r2, r2, #4
 800b2fa:	b292      	uxth	r2, r2
 800b2fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f00b fc23 	bl	8016b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b306:	e06c      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d040      	beq.n	800b394 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b324:	b292      	uxth	r2, r2
 800b326:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b330:	2b00      	cmp	r3, #0
 800b332:	d12b      	bne.n	800b38c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0204 	orr.w	r2, r2, #4
 800b346:	b292      	uxth	r2, r2
 800b348:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f042 0208 	orr.w	r2, r2, #8
 800b35e:	b292      	uxth	r2, r2
 800b360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b374:	b29b      	uxth	r3, r3
 800b376:	089b      	lsrs	r3, r3, #2
 800b378:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b382:	2101      	movs	r1, #1
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f00b fdb7 	bl	8016ef8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b38a:	e02a      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f00b fbdd 	bl	8016b4c <HAL_PCD_SuspendCallback>
    return;
 800b392:	e026      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00f      	beq.n	800b3be <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b3b0:	b292      	uxth	r2, r2
 800b3b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f00b fb9b 	bl	8016af2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b3bc:	e011      	b.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00c      	beq.n	800b3e2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b3da:	b292      	uxth	r2, r2
 800b3dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b3e0:	bf00      	nop
  }
}
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d101      	bne.n	800b402 <HAL_PCD_SetAddress+0x1a>
 800b3fe:	2302      	movs	r3, #2
 800b400:	e012      	b.n	800b428 <HAL_PCD_SetAddress+0x40>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	78fa      	ldrb	r2, [r7, #3]
 800b40e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	78fa      	ldrb	r2, [r7, #3]
 800b416:	4611      	mov	r1, r2
 800b418:	4618      	mov	r0, r3
 800b41a:	f005 fac5 	bl	80109a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	461a      	mov	r2, r3
 800b43e:	4603      	mov	r3, r0
 800b440:	70fb      	strb	r3, [r7, #3]
 800b442:	460b      	mov	r3, r1
 800b444:	803b      	strh	r3, [r7, #0]
 800b446:	4613      	mov	r3, r2
 800b448:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b44e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b452:	2b00      	cmp	r3, #0
 800b454:	da0e      	bge.n	800b474 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b456:	78fb      	ldrb	r3, [r7, #3]
 800b458:	f003 0207 	and.w	r2, r3, #7
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	3310      	adds	r3, #16
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	4413      	add	r3, r2
 800b46a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2201      	movs	r2, #1
 800b470:	705a      	strb	r2, [r3, #1]
 800b472:	e00e      	b.n	800b492 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	f003 0207 	and.w	r2, r3, #7
 800b47a:	4613      	mov	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	4413      	add	r3, r2
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	4413      	add	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b492:	78fb      	ldrb	r3, [r7, #3]
 800b494:	f003 0307 	and.w	r3, r3, #7
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b49e:	883b      	ldrh	r3, [r7, #0]
 800b4a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	78ba      	ldrb	r2, [r7, #2]
 800b4ac:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b4ae:	78bb      	ldrb	r3, [r7, #2]
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d102      	bne.n	800b4ba <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d101      	bne.n	800b4c8 <HAL_PCD_EP_Open+0x98>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e00e      	b.n	800b4e6 <HAL_PCD_EP_Open+0xb6>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68f9      	ldr	r1, [r7, #12]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f003 fce8 	bl	800eeac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b4fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	da0e      	bge.n	800b520 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	f003 0207 	and.w	r2, r3, #7
 800b508:	4613      	mov	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	3310      	adds	r3, #16
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	4413      	add	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2201      	movs	r2, #1
 800b51c:	705a      	strb	r2, [r3, #1]
 800b51e:	e00e      	b.n	800b53e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	f003 0207 	and.w	r2, r3, #7
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	4413      	add	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	f003 0307 	and.w	r3, r3, #7
 800b544:	b2da      	uxtb	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <HAL_PCD_EP_Close+0x6a>
 800b554:	2302      	movs	r3, #2
 800b556:	e00e      	b.n	800b576 <HAL_PCD_EP_Close+0x88>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	4618      	mov	r0, r3
 800b568:	f004 f988 	bl	800f87c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b086      	sub	sp, #24
 800b582:	af00      	add	r7, sp, #0
 800b584:	60f8      	str	r0, [r7, #12]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
 800b58a:	460b      	mov	r3, r1
 800b58c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	f003 0207 	and.w	r2, r3, #7
 800b594:	4613      	mov	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4413      	add	r3, r2
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5be:	7afb      	ldrb	r3, [r7, #11]
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6979      	ldr	r1, [r7, #20]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f004 fb40 	bl	800fc56 <USB_EPStartXfer>

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	f003 0207 	and.w	r2, r3, #7
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	440b      	add	r3, r1
 800b5fe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800b602:	681b      	ldr	r3, [r3, #0]
}
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	460b      	mov	r3, r1
 800b61e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	f003 0207 	and.w	r2, r3, #7
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	00db      	lsls	r3, r3, #3
 800b62e:	3310      	adds	r3, #16
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2200      	movs	r2, #0
 800b654:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2201      	movs	r2, #1
 800b65a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b65c:	7afb      	ldrb	r3, [r7, #11]
 800b65e:	f003 0307 	and.w	r3, r3, #7
 800b662:	b2da      	uxtb	r2, r3
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6979      	ldr	r1, [r7, #20]
 800b66e:	4618      	mov	r0, r3
 800b670:	f004 faf1 	bl	800fc56 <USB_EPStartXfer>

  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3718      	adds	r7, #24
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	7912      	ldrb	r2, [r2, #4]
 800b694:	4293      	cmp	r3, r2
 800b696:	d901      	bls.n	800b69c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e03e      	b.n	800b71a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b69c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da0e      	bge.n	800b6c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	f003 0207 	and.w	r2, r3, #7
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	00db      	lsls	r3, r3, #3
 800b6b2:	3310      	adds	r3, #16
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	705a      	strb	r2, [r3, #1]
 800b6c0:	e00c      	b.n	800b6dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b6c2:	78fa      	ldrb	r2, [r7, #3]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	f003 0307 	and.w	r3, r3, #7
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_PCD_EP_SetStall+0x7e>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e00e      	b.n	800b71a <HAL_PCD_EP_SetStall+0x9c>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68f9      	ldr	r1, [r7, #12]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f005 f852 	bl	80107b4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b72e:	78fb      	ldrb	r3, [r7, #3]
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	7912      	ldrb	r2, [r2, #4]
 800b738:	4293      	cmp	r3, r2
 800b73a:	d901      	bls.n	800b740 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e040      	b.n	800b7c2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b744:	2b00      	cmp	r3, #0
 800b746:	da0e      	bge.n	800b766 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b748:	78fb      	ldrb	r3, [r7, #3]
 800b74a:	f003 0207 	and.w	r2, r3, #7
 800b74e:	4613      	mov	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	3310      	adds	r3, #16
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	4413      	add	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2201      	movs	r2, #1
 800b762:	705a      	strb	r2, [r3, #1]
 800b764:	e00e      	b.n	800b784 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b766:	78fb      	ldrb	r3, [r7, #3]
 800b768:	f003 0207 	and.w	r2, r3, #7
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	4413      	add	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	f003 0307 	and.w	r3, r3, #7
 800b790:	b2da      	uxtb	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d101      	bne.n	800b7a4 <HAL_PCD_EP_ClrStall+0x82>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	e00e      	b.n	800b7c2 <HAL_PCD_EP_ClrStall+0xa0>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68f9      	ldr	r1, [r7, #12]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f005 f84f 	bl	8010856 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b092      	sub	sp, #72	@ 0x48
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b7d2:	e333      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b7dc:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b7de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800b7ea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f040 8108 	bne.w	800ba04 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b7f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b7f6:	f003 0310 	and.w	r3, r3, #16
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d14c      	bne.n	800b898 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	b29b      	uxth	r3, r3
 800b806:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800b80a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b80e:	813b      	strh	r3, [r7, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	893b      	ldrh	r3, [r7, #8]
 800b816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b81a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b81e:	b29b      	uxth	r3, r3
 800b820:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	3310      	adds	r3, #16
 800b826:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b830:	b29b      	uxth	r3, r3
 800b832:	461a      	mov	r2, r3
 800b834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	4413      	add	r3, r2
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	4413      	add	r3, r2
 800b842:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b84c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b84e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b852:	695a      	ldr	r2, [r3, #20]
 800b854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	441a      	add	r2, r3
 800b85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b85c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b85e:	2100      	movs	r1, #0
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f00b f92c 	bl	8016abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	7b1b      	ldrb	r3, [r3, #12]
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 82e5 	beq.w	800be3c <PCD_EP_ISR_Handler+0x672>
 800b872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	2b00      	cmp	r3, #0
 800b878:	f040 82e0 	bne.w	800be3c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	7b1b      	ldrb	r3, [r3, #12]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b886:	b2da      	uxtb	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	731a      	strb	r2, [r3, #12]
 800b896:	e2d1      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b89e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b8a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d032      	beq.n	800b918 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	6812      	ldr	r2, [r2, #0]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800b8e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b8e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f005 f8d9 	bl	8010aa4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800b8fe:	4013      	ands	r3, r2
 800b900:	817b      	strh	r3, [r7, #10]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	897a      	ldrh	r2, [r7, #10]
 800b908:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b90c:	b292      	uxth	r2, r2
 800b90e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f00b f8a7 	bl	8016a64 <HAL_PCD_SetupStageCallback>
 800b916:	e291      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b918:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f280 828d 	bge.w	800be3c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	b29a      	uxth	r2, r3
 800b92a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800b92e:	4013      	ands	r3, r2
 800b930:	81fb      	strh	r3, [r7, #14]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	89fa      	ldrh	r2, [r7, #14]
 800b938:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b93c:	b292      	uxth	r2, r2
 800b93e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b948:	b29b      	uxth	r3, r3
 800b94a:	461a      	mov	r2, r3
 800b94c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	4413      	add	r3, r2
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6812      	ldr	r2, [r2, #0]
 800b958:	4413      	add	r3, r2
 800b95a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b966:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b96a:	69db      	ldr	r3, [r3, #28]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d019      	beq.n	800b9a4 <PCD_EP_ISR_Handler+0x1da>
 800b970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d015      	beq.n	800b9a4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6818      	ldr	r0, [r3, #0]
 800b97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b97e:	6959      	ldr	r1, [r3, #20]
 800b980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b982:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b986:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f005 f88b 	bl	8010aa4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b98e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b990:	695a      	ldr	r2, [r3, #20]
 800b992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	441a      	add	r2, r3
 800b998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b99a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b99c:	2100      	movs	r1, #0
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f00b f872 	bl	8016a88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b9ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b9ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f040 8242 	bne.w	800be3c <PCD_EP_ISR_Handler+0x672>
 800b9b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b9ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b9be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9c2:	f000 823b 	beq.w	800be3c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b9d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9d6:	81bb      	strh	r3, [r7, #12]
 800b9d8:	89bb      	ldrh	r3, [r7, #12]
 800b9da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b9de:	81bb      	strh	r3, [r7, #12]
 800b9e0:	89bb      	ldrh	r3, [r7, #12]
 800b9e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9e6:	81bb      	strh	r3, [r7, #12]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	89bb      	ldrh	r3, [r7, #12]
 800b9ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	8013      	strh	r3, [r2, #0]
 800ba02:	e21b      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ba16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f280 80f1 	bge.w	800bc02 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	461a      	mov	r2, r3
 800ba26:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ba36:	4013      	ands	r3, r2
 800ba38:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ba4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ba4e:	b292      	uxth	r2, r2
 800ba50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ba52:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ba56:	4613      	mov	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	4413      	add	r3, r2
 800ba66:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ba68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba6a:	7b1b      	ldrb	r3, [r3, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d123      	bne.n	800bab8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	4413      	add	r3, r2
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	6812      	ldr	r2, [r2, #0]
 800ba88:	4413      	add	r3, r2
 800ba8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba94:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ba98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 808b 	beq.w	800bbb8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baa8:	6959      	ldr	r1, [r3, #20]
 800baaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baac:	88da      	ldrh	r2, [r3, #6]
 800baae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bab2:	f004 fff7 	bl	8010aa4 <USB_ReadPMA>
 800bab6:	e07f      	b.n	800bbb8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baba:	78db      	ldrb	r3, [r3, #3]
 800babc:	2b02      	cmp	r3, #2
 800babe:	d109      	bne.n	800bad4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bac0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bac2:	461a      	mov	r2, r3
 800bac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f9c6 	bl	800be58 <HAL_PCD_EP_DB_Receive>
 800bacc:	4603      	mov	r3, r0
 800bace:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bad2:	e071      	b.n	800bbb8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	461a      	mov	r2, r3
 800bada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	461a      	mov	r2, r3
 800baf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	441a      	add	r2, r3
 800bafe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bb00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d022      	beq.n	800bb74 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	461a      	mov	r2, r3
 800bb3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	4413      	add	r3, r2
 800bb48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800bb56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d02c      	beq.n	800bbb8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6818      	ldr	r0, [r3, #0]
 800bb62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb64:	6959      	ldr	r1, [r3, #20]
 800bb66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb68:	891a      	ldrh	r2, [r3, #8]
 800bb6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb6e:	f004 ff99 	bl	8010aa4 <USB_ReadPMA>
 800bb72:	e021      	b.n	800bbb8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	00db      	lsls	r3, r3, #3
 800bb86:	4413      	add	r3, r2
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	6812      	ldr	r2, [r2, #0]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800bb9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d009      	beq.n	800bbb8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6818      	ldr	r0, [r3, #0]
 800bba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbaa:	6959      	ldr	r1, [r3, #20]
 800bbac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbae:	895a      	ldrh	r2, [r3, #10]
 800bbb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbb4:	f004 ff76 	bl	8010aa4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bbb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbba:	69da      	ldr	r2, [r3, #28]
 800bbbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbc0:	441a      	add	r2, r3
 800bbc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbc4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bbc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbc8:	695a      	ldr	r2, [r3, #20]
 800bbca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bbce:	441a      	add	r2, r3
 800bbd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bbd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d005      	beq.n	800bbe8 <PCD_EP_ISR_Handler+0x41e>
 800bbdc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800bbe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d206      	bcs.n	800bbf6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bbe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	4619      	mov	r1, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f00a ff4a 	bl	8016a88 <HAL_PCD_DataOutStageCallback>
 800bbf4:	e005      	b.n	800bc02 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f004 f82a 	bl	800fc56 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bc02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 8117 	beq.w	800be3c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800bc0e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	4413      	add	r3, r2
 800bc20:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	881b      	ldrh	r3, [r3, #0]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800bc38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	441a      	add	r2, r3
 800bc4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bc4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800bc5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc5c:	78db      	ldrb	r3, [r3, #3]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	f040 80a1 	bne.w	800bda6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800bc64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc66:	2200      	movs	r2, #0
 800bc68:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bc6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc6c:	7b1b      	ldrb	r3, [r3, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 8092 	beq.w	800bd98 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bc74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d046      	beq.n	800bd0c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc80:	785b      	ldrb	r3, [r3, #1]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d126      	bne.n	800bcd4 <PCD_EP_ISR_Handler+0x50a>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	617b      	str	r3, [r7, #20]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	461a      	mov	r2, r3
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	617b      	str	r3, [r7, #20]
 800bc9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	00da      	lsls	r2, r3, #3
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	4413      	add	r3, r2
 800bca8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	801a      	strh	r2, [r3, #0]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	801a      	strh	r2, [r3, #0]
 800bcd2:	e061      	b.n	800bd98 <PCD_EP_ISR_Handler+0x5ce>
 800bcd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd6:	785b      	ldrb	r3, [r3, #1]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d15d      	bne.n	800bd98 <PCD_EP_ISR_Handler+0x5ce>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	61fb      	str	r3, [r7, #28]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	461a      	mov	r2, r3
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	00da      	lsls	r2, r3, #3
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd02:	61bb      	str	r3, [r7, #24]
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2200      	movs	r2, #0
 800bd08:	801a      	strh	r2, [r3, #0]
 800bd0a:	e045      	b.n	800bd98 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd14:	785b      	ldrb	r3, [r3, #1]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d126      	bne.n	800bd68 <PCD_EP_ISR_Handler+0x59e>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2e:	4413      	add	r3, r2
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	00da      	lsls	r2, r3, #3
 800bd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd40:	623b      	str	r3, [r7, #32]
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	801a      	strh	r2, [r3, #0]
 800bd52:	6a3b      	ldr	r3, [r7, #32]
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	801a      	strh	r2, [r3, #0]
 800bd66:	e017      	b.n	800bd98 <PCD_EP_ISR_Handler+0x5ce>
 800bd68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd6a:	785b      	ldrb	r3, [r3, #1]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d113      	bne.n	800bd98 <PCD_EP_ISR_Handler+0x5ce>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	4413      	add	r3, r2
 800bd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	00da      	lsls	r2, r3, #3
 800bd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd94:	2200      	movs	r2, #0
 800bd96:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bd98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f00a fe8d 	bl	8016abe <HAL_PCD_DataInStageCallback>
 800bda4:	e04a      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bda6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bda8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d13f      	bne.n	800be30 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdd4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800bdd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdd8:	699a      	ldr	r2, [r3, #24]
 800bdda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d906      	bls.n	800bdee <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800bde0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bde2:	699a      	ldr	r2, [r3, #24]
 800bde4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bde6:	1ad2      	subs	r2, r2, r3
 800bde8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdea:	619a      	str	r2, [r3, #24]
 800bdec:	e002      	b.n	800bdf4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800bdee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bdf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d106      	bne.n	800be0a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bdfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f00a fe5b 	bl	8016abe <HAL_PCD_DataInStageCallback>
 800be08:	e018      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800be0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be0c:	695a      	ldr	r2, [r3, #20]
 800be0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800be10:	441a      	add	r2, r3
 800be12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be14:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800be16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be18:	69da      	ldr	r2, [r3, #28]
 800be1a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800be1c:	441a      	add	r2, r3
 800be1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be20:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be28:	4618      	mov	r0, r3
 800be2a:	f003 ff14 	bl	800fc56 <USB_EPStartXfer>
 800be2e:	e005      	b.n	800be3c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800be30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be32:	461a      	mov	r2, r3
 800be34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f917 	bl	800c06a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800be44:	b29b      	uxth	r3, r3
 800be46:	b21b      	sxth	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f6ff acc3 	blt.w	800b7d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3748      	adds	r7, #72	@ 0x48
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800be66:	88fb      	ldrh	r3, [r7, #6]
 800be68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d07c      	beq.n	800bf6a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be78:	b29b      	uxth	r3, r3
 800be7a:	461a      	mov	r2, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	4413      	add	r3, r2
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	4413      	add	r3, r2
 800be8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	699a      	ldr	r2, [r3, #24]
 800be9a:	8b7b      	ldrh	r3, [r7, #26]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d306      	bcc.n	800beae <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	699a      	ldr	r2, [r3, #24]
 800bea4:	8b7b      	ldrh	r3, [r7, #26]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	619a      	str	r2, [r3, #24]
 800beac:	e002      	b.n	800beb4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2200      	movs	r2, #0
 800beb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d123      	bne.n	800bf04 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	461a      	mov	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	b29b      	uxth	r3, r3
 800bece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bed6:	833b      	strh	r3, [r7, #24]
 800bed8:	8b3b      	ldrh	r3, [r7, #24]
 800beda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bede:	833b      	strh	r3, [r7, #24]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	461a      	mov	r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	441a      	add	r2, r3
 800beee:	8b3b      	ldrh	r3, [r7, #24]
 800bef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800befc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf04:	88fb      	ldrh	r3, [r7, #6]
 800bf06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d01f      	beq.n	800bf4e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf28:	82fb      	strh	r3, [r7, #22]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	441a      	add	r2, r3
 800bf38:	8afb      	ldrh	r3, [r7, #22]
 800bf3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bf4e:	8b7b      	ldrh	r3, [r7, #26]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 8085 	beq.w	800c060 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	6959      	ldr	r1, [r3, #20]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	891a      	ldrh	r2, [r3, #8]
 800bf62:	8b7b      	ldrh	r3, [r7, #26]
 800bf64:	f004 fd9e 	bl	8010aa4 <USB_ReadPMA>
 800bf68:	e07a      	b.n	800c060 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	461a      	mov	r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	4413      	add	r3, r2
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	6812      	ldr	r2, [r2, #0]
 800bf82:	4413      	add	r3, r2
 800bf84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf8e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	699a      	ldr	r2, [r3, #24]
 800bf94:	8b7b      	ldrh	r3, [r7, #26]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d306      	bcc.n	800bfa8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	699a      	ldr	r2, [r3, #24]
 800bf9e:	8b7b      	ldrh	r3, [r7, #26]
 800bfa0:	1ad2      	subs	r2, r2, r3
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	619a      	str	r2, [r3, #24]
 800bfa6:	e002      	b.n	800bfae <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d123      	bne.n	800bffe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bfcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfd0:	83fb      	strh	r3, [r7, #30]
 800bfd2:	8bfb      	ldrh	r3, [r7, #30]
 800bfd4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bfd8:	83fb      	strh	r3, [r7, #30]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	441a      	add	r2, r3
 800bfe8:	8bfb      	ldrh	r3, [r7, #30]
 800bfea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800bffe:	88fb      	ldrh	r3, [r7, #6]
 800c000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c004:	2b00      	cmp	r3, #0
 800c006:	d11f      	bne.n	800c048 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	461a      	mov	r2, r3
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c022:	83bb      	strh	r3, [r7, #28]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	441a      	add	r2, r3
 800c032:	8bbb      	ldrh	r3, [r7, #28]
 800c034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c03c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c040:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c044:	b29b      	uxth	r3, r3
 800c046:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c048:	8b7b      	ldrh	r3, [r7, #26]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d008      	beq.n	800c060 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	6959      	ldr	r1, [r3, #20]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	895a      	ldrh	r2, [r3, #10]
 800c05a:	8b7b      	ldrh	r3, [r7, #26]
 800c05c:	f004 fd22 	bl	8010aa4 <USB_ReadPMA>
    }
  }

  return count;
 800c060:	8b7b      	ldrh	r3, [r7, #26]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3720      	adds	r7, #32
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b0a6      	sub	sp, #152	@ 0x98
 800c06e:	af00      	add	r7, sp, #0
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	4613      	mov	r3, r2
 800c076:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 81f7 	beq.w	800c472 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	461a      	mov	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	00db      	lsls	r3, r3, #3
 800c096:	4413      	add	r3, r2
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	6812      	ldr	r2, [r2, #0]
 800c09c:	4413      	add	r3, r2
 800c09e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0a8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	699a      	ldr	r2, [r3, #24]
 800c0b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d907      	bls.n	800c0c8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	699a      	ldr	r2, [r3, #24]
 800c0bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c0c0:	1ad2      	subs	r2, r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	619a      	str	r2, [r3, #24]
 800c0c6:	e002      	b.n	800c0ce <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f040 80e1 	bne.w	800c29a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	785b      	ldrb	r3, [r3, #1]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d126      	bne.n	800c12e <HAL_PCD_EP_DB_Transmit+0xc4>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f4:	4413      	add	r3, r2
 800c0f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	00da      	lsls	r2, r3, #3
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c100:	4413      	add	r3, r2
 800c102:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c112:	b29a      	uxth	r2, r3
 800c114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c116:	801a      	strh	r2, [r3, #0]
 800c118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c126:	b29a      	uxth	r2, r3
 800c128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12a:	801a      	strh	r2, [r3, #0]
 800c12c:	e01a      	b.n	800c164 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	785b      	ldrb	r3, [r3, #1]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d116      	bne.n	800c164 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c144:	b29b      	uxth	r3, r3
 800c146:	461a      	mov	r2, r3
 800c148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14a:	4413      	add	r3, r2
 800c14c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	00da      	lsls	r2, r3, #3
 800c154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c156:	4413      	add	r3, r2
 800c158:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c160:	2200      	movs	r2, #0
 800c162:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	785b      	ldrb	r3, [r3, #1]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d126      	bne.n	800c1c0 <HAL_PCD_EP_DB_Transmit+0x156>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	623b      	str	r3, [r7, #32]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c180:	b29b      	uxth	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	4413      	add	r3, r2
 800c188:	623b      	str	r3, [r7, #32]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	00da      	lsls	r2, r3, #3
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	4413      	add	r3, r2
 800c194:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	801a      	strh	r2, [r3, #0]
 800c1be:	e017      	b.n	800c1f0 <HAL_PCD_EP_DB_Transmit+0x186>
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	785b      	ldrb	r3, [r3, #1]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d113      	bne.n	800c1f0 <HAL_PCD_EP_DB_Transmit+0x186>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d6:	4413      	add	r3, r2
 800c1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	00da      	lsls	r2, r3, #3
 800c1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	78db      	ldrb	r3, [r3, #3]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d123      	bne.n	800c240 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	b29b      	uxth	r3, r3
 800c20a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c20e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c212:	837b      	strh	r3, [r7, #26]
 800c214:	8b7b      	ldrh	r3, [r7, #26]
 800c216:	f083 0320 	eor.w	r3, r3, #32
 800c21a:	837b      	strh	r3, [r7, #26]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	441a      	add	r2, r3
 800c22a:	8b7b      	ldrh	r3, [r7, #26]
 800c22c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f00a fc39 	bl	8016abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c252:	2b00      	cmp	r3, #0
 800c254:	d01f      	beq.n	800c296 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	b29b      	uxth	r3, r3
 800c268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c26c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c270:	833b      	strh	r3, [r7, #24]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	441a      	add	r2, r3
 800c280:	8b3b      	ldrh	r3, [r7, #24]
 800c282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c28a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c292:	b29b      	uxth	r3, r3
 800c294:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	e31f      	b.n	800c8da <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c29a:	88fb      	ldrh	r3, [r7, #6]
 800c29c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d021      	beq.n	800c2e8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	441a      	add	r2, r3
 800c2d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	f040 82ca 	bne.w	800c888 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	695a      	ldr	r2, [r3, #20]
 800c2f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c2fc:	441a      	add	r2, r3
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	69da      	ldr	r2, [r3, #28]
 800c306:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c30a:	441a      	add	r2, r3
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	6a1a      	ldr	r2, [r3, #32]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d309      	bcc.n	800c330 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	6a1a      	ldr	r2, [r3, #32]
 800c326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c328:	1ad2      	subs	r2, r2, r3
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	621a      	str	r2, [r3, #32]
 800c32e:	e015      	b.n	800c35c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	6a1b      	ldr	r3, [r3, #32]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d107      	bne.n	800c348 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800c338:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c33c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c346:	e009      	b.n	800c35c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	6a1b      	ldr	r3, [r3, #32]
 800c354:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2200      	movs	r2, #0
 800c35a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	785b      	ldrb	r3, [r3, #1]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d15f      	bne.n	800c424 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	643b      	str	r3, [r7, #64]	@ 0x40
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c372:	b29b      	uxth	r3, r3
 800c374:	461a      	mov	r2, r3
 800c376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c378:	4413      	add	r3, r2
 800c37a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	00da      	lsls	r2, r3, #3
 800c382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c384:	4413      	add	r3, r2
 800c386:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	b29b      	uxth	r3, r3
 800c392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c396:	b29a      	uxth	r2, r3
 800c398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c39a:	801a      	strh	r2, [r3, #0]
 800c39c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10a      	bne.n	800c3b8 <HAL_PCD_EP_DB_Transmit+0x34e>
 800c3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b4:	801a      	strh	r2, [r3, #0]
 800c3b6:	e051      	b.n	800c45c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c3b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3bc:	d816      	bhi.n	800c3ec <HAL_PCD_EP_DB_Transmit+0x382>
 800c3be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3c0:	085b      	lsrs	r3, r3, #1
 800c3c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <HAL_PCD_EP_DB_Transmit+0x36a>
 800c3ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	029b      	lsls	r3, r3, #10
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e8:	801a      	strh	r2, [r3, #0]
 800c3ea:	e037      	b.n	800c45c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c3ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3ee:	095b      	lsrs	r3, r3, #5
 800c3f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3f4:	f003 031f 	and.w	r3, r3, #31
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <HAL_PCD_EP_DB_Transmit+0x398>
 800c3fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3fe:	3b01      	subs	r3, #1
 800c400:	653b      	str	r3, [r7, #80]	@ 0x50
 800c402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	b29a      	uxth	r2, r3
 800c408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	029b      	lsls	r3, r3, #10
 800c40e:	b29b      	uxth	r3, r3
 800c410:	4313      	orrs	r3, r2
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c420:	801a      	strh	r2, [r3, #0]
 800c422:	e01b      	b.n	800c45c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d117      	bne.n	800c45c <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	461a      	mov	r2, r3
 800c43e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c440:	4413      	add	r3, r2
 800c442:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	00da      	lsls	r2, r3, #3
 800c44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c44c:	4413      	add	r3, r2
 800c44e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c452:	647b      	str	r3, [r7, #68]	@ 0x44
 800c454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c456:	b29a      	uxth	r2, r3
 800c458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c45a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	6959      	ldr	r1, [r3, #20]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	891a      	ldrh	r2, [r3, #8]
 800c468:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	f004 fad7 	bl	8010a1e <USB_WritePMA>
 800c470:	e20a      	b.n	800c888 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	461a      	mov	r2, r3
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	4413      	add	r3, r2
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	6812      	ldr	r2, [r2, #0]
 800c48a:	4413      	add	r3, r2
 800c48c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c496:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	699a      	ldr	r2, [r3, #24]
 800c49e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d307      	bcc.n	800c4b6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c4ae:	1ad2      	subs	r2, r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	619a      	str	r2, [r3, #24]
 800c4b4:	e002      	b.n	800c4bc <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 80f6 	bne.w	800c6b2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d126      	bne.n	800c51c <HAL_PCD_EP_DB_Transmit+0x4b2>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	461a      	mov	r2, r3
 800c4e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4e2:	4413      	add	r3, r2
 800c4e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	00da      	lsls	r2, r3, #3
 800c4ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4f4:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c500:	b29a      	uxth	r2, r3
 800c502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c504:	801a      	strh	r2, [r3, #0]
 800c506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c514:	b29a      	uxth	r2, r3
 800c516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	e01a      	b.n	800c552 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d116      	bne.n	800c552 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c532:	b29b      	uxth	r3, r3
 800c534:	461a      	mov	r2, r3
 800c536:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c538:	4413      	add	r3, r2
 800c53a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	00da      	lsls	r2, r3, #3
 800c542:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c544:	4413      	add	r3, r2
 800c546:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c54a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c54c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c54e:	2200      	movs	r2, #0
 800c550:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	785b      	ldrb	r3, [r3, #1]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d12f      	bne.n	800c5c2 <HAL_PCD_EP_DB_Transmit+0x558>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c572:	b29b      	uxth	r3, r3
 800c574:	461a      	mov	r2, r3
 800c576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c57a:	4413      	add	r3, r2
 800c57c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	00da      	lsls	r2, r3, #3
 800c586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c58a:	4413      	add	r3, r2
 800c58c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5a6:	801a      	strh	r2, [r3, #0]
 800c5a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5be:	801a      	strh	r2, [r3, #0]
 800c5c0:	e01c      	b.n	800c5fc <HAL_PCD_EP_DB_Transmit+0x592>
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	785b      	ldrb	r3, [r3, #1]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d118      	bne.n	800c5fc <HAL_PCD_EP_DB_Transmit+0x592>
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5da:	4413      	add	r3, r2
 800c5dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	00da      	lsls	r2, r3, #3
 800c5e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	78db      	ldrb	r3, [r3, #3]
 800c600:	2b02      	cmp	r3, #2
 800c602:	d127      	bne.n	800c654 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	461a      	mov	r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c61a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c61e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c622:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c626:	f083 0320 	eor.w	r3, r3, #32
 800c62a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	441a      	add	r2, r3
 800c63c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c650:	b29b      	uxth	r3, r3
 800c652:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	4619      	mov	r1, r3
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f00a fa2f 	bl	8016abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c660:	88fb      	ldrh	r3, [r7, #6]
 800c662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c666:	2b00      	cmp	r3, #0
 800c668:	d121      	bne.n	800c6ae <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4413      	add	r3, r2
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c684:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	461a      	mov	r2, r3
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	441a      	add	r2, r3
 800c696:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c69a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c69e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e113      	b.n	800c8da <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c6b2:	88fb      	ldrh	r3, [r7, #6]
 800c6b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d121      	bne.n	800c700 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	441a      	add	r2, r3
 800c6e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c6ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c706:	2b01      	cmp	r3, #1
 800c708:	f040 80be 	bne.w	800c888 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	695a      	ldr	r2, [r3, #20]
 800c710:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c714:	441a      	add	r2, r3
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	69da      	ldr	r2, [r3, #28]
 800c71e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c722:	441a      	add	r2, r3
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	6a1a      	ldr	r2, [r3, #32]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	429a      	cmp	r2, r3
 800c732:	d309      	bcc.n	800c748 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6a1a      	ldr	r2, [r3, #32]
 800c73e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c740:	1ad2      	subs	r2, r2, r3
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	621a      	str	r2, [r3, #32]
 800c746:	e015      	b.n	800c774 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	6a1b      	ldr	r3, [r3, #32]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d107      	bne.n	800c760 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800c750:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c754:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c75e:	e009      	b.n	800c774 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	6a1b      	ldr	r3, [r3, #32]
 800c764:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2200      	movs	r2, #0
 800c76a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d15f      	bne.n	800c842 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c790:	b29b      	uxth	r3, r3
 800c792:	461a      	mov	r2, r3
 800c794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c796:	4413      	add	r3, r2
 800c798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	00da      	lsls	r2, r3, #3
 800c7a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c7a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c7aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7b8:	801a      	strh	r2, [r3, #0]
 800c7ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10a      	bne.n	800c7d6 <HAL_PCD_EP_DB_Transmit+0x76c>
 800c7c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7d2:	801a      	strh	r2, [r3, #0]
 800c7d4:	e04e      	b.n	800c874 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c7d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7da:	d816      	bhi.n	800c80a <HAL_PCD_EP_DB_Transmit+0x7a0>
 800c7dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7de:	085b      	lsrs	r3, r3, #1
 800c7e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <HAL_PCD_EP_DB_Transmit+0x788>
 800c7ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	029b      	lsls	r3, r3, #10
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	4313      	orrs	r3, r2
 800c802:	b29a      	uxth	r2, r3
 800c804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c806:	801a      	strh	r2, [r3, #0]
 800c808:	e034      	b.n	800c874 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c80a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c80c:	095b      	lsrs	r3, r3, #5
 800c80e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c812:	f003 031f 	and.w	r3, r3, #31
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800c81a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c81c:	3b01      	subs	r3, #1
 800c81e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	b29a      	uxth	r2, r3
 800c826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c828:	b29b      	uxth	r3, r3
 800c82a:	029b      	lsls	r3, r3, #10
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	4313      	orrs	r3, r2
 800c830:	b29b      	uxth	r3, r3
 800c832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c83e:	801a      	strh	r2, [r3, #0]
 800c840:	e018      	b.n	800c874 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d114      	bne.n	800c874 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c852:	b29b      	uxth	r3, r3
 800c854:	461a      	mov	r2, r3
 800c856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c858:	4413      	add	r3, r2
 800c85a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	00da      	lsls	r2, r3, #3
 800c862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c864:	4413      	add	r3, r2
 800c866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c86a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c86c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c86e:	b29a      	uxth	r2, r3
 800c870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c872:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6818      	ldr	r0, [r3, #0]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	6959      	ldr	r1, [r3, #20]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	895a      	ldrh	r2, [r3, #10]
 800c880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c882:	b29b      	uxth	r3, r3
 800c884:	f004 f8cb 	bl	8010a1e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	461a      	mov	r2, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c89e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8a2:	82fb      	strh	r3, [r7, #22]
 800c8a4:	8afb      	ldrh	r3, [r7, #22]
 800c8a6:	f083 0310 	eor.w	r3, r3, #16
 800c8aa:	82fb      	strh	r3, [r7, #22]
 800c8ac:	8afb      	ldrh	r3, [r7, #22]
 800c8ae:	f083 0320 	eor.w	r3, r3, #32
 800c8b2:	82fb      	strh	r3, [r7, #22]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	441a      	add	r2, r3
 800c8c2:	8afb      	ldrh	r3, [r7, #22]
 800c8c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3798      	adds	r7, #152	@ 0x98
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b087      	sub	sp, #28
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	60f8      	str	r0, [r7, #12]
 800c8ea:	607b      	str	r3, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	817b      	strh	r3, [r7, #10]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c8f4:	897b      	ldrh	r3, [r7, #10]
 800c8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c900:	897b      	ldrh	r3, [r7, #10]
 800c902:	f003 0207 	and.w	r2, r3, #7
 800c906:	4613      	mov	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	3310      	adds	r3, #16
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4413      	add	r3, r2
 800c914:	617b      	str	r3, [r7, #20]
 800c916:	e009      	b.n	800c92c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c918:	897a      	ldrh	r2, [r7, #10]
 800c91a:	4613      	mov	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4413      	add	r3, r2
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	4413      	add	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c92c:	893b      	ldrh	r3, [r7, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d107      	bne.n	800c942 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2200      	movs	r2, #0
 800c936:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	80da      	strh	r2, [r3, #6]
 800c940:	e00b      	b.n	800c95a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2201      	movs	r2, #1
 800c946:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	0c1b      	lsrs	r3, r3, #16
 800c954:	b29a      	uxth	r2, r3
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	371c      	adds	r7, #28
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	f043 0301 	orr.w	r3, r3, #1
 800c992:	b29a      	uxth	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	f043 0302 	orr.w	r3, r3, #2
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c9c0:	4b05      	ldr	r3, [pc, #20]	@ (800c9d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a04      	ldr	r2, [pc, #16]	@ (800c9d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c9c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9ca:	6013      	str	r3, [r2, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	58000400 	.word	0x58000400

0800c9dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800c9e0:	4b04      	ldr	r3, [pc, #16]	@ (800c9f4 <HAL_PWREx_GetVoltageRange+0x18>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	58000400 	.word	0x58000400

0800c9f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c9fc:	4b05      	ldr	r3, [pc, #20]	@ (800ca14 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	4a04      	ldr	r2, [pc, #16]	@ (800ca14 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ca02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ca06:	6053      	str	r3, [r2, #4]
}
 800ca08:	bf00      	nop
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	58000400 	.word	0x58000400

0800ca18 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ca1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca2a:	d101      	bne.n	800ca30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e000      	b.n	800ca32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ca40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca4e:	6013      	str	r3, [r2, #0]
}
 800ca50:	bf00      	nop
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ca5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca6c:	6013      	str	r3, [r2, #0]
}
 800ca6e:	bf00      	nop
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ca7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca8a:	d101      	bne.n	800ca90 <LL_RCC_HSE_IsReady+0x18>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e000      	b.n	800ca92 <LL_RCC_HSE_IsReady+0x1a>
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800caa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800caaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800caae:	6013      	str	r3, [r2, #0]
}
 800cab0:	bf00      	nop
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800caba:	b480      	push	{r7}
 800cabc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800cabe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cacc:	6013      	str	r3, [r2, #0]
}
 800cace:	bf00      	nop
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800cad8:	b480      	push	{r7}
 800cada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cadc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caea:	d101      	bne.n	800caf0 <LL_RCC_HSI_IsReady+0x18>
 800caec:	2301      	movs	r3, #1
 800caee:	e000      	b.n	800caf2 <LL_RCC_HSI_IsReady+0x1a>
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800cb04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	061b      	lsls	r3, r3, #24
 800cb12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb16:	4313      	orrs	r3, r2
 800cb18:	604b      	str	r3, [r1, #4]
}
 800cb1a:	bf00      	nop
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800cb26:	b480      	push	{r7}
 800cb28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cb2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb36:	f043 0301 	orr.w	r3, r3, #1
 800cb3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800cb3e:	bf00      	nop
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cb4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb58:	f023 0301 	bic.w	r3, r3, #1
 800cb5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800cb60:	bf00      	nop
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800cb6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb76:	f003 0302 	and.w	r3, r3, #2
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d101      	bne.n	800cb82 <LL_RCC_HSI48_IsReady+0x18>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e000      	b.n	800cb84 <LL_RCC_HSI48_IsReady+0x1a>
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cb92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb9e:	f043 0301 	orr.w	r3, r3, #1
 800cba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cba6:	bf00      	nop
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cbb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cbc0:	f023 0301 	bic.w	r3, r3, #1
 800cbc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cbc8:	bf00      	nop
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr

0800cbd2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cbd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cbe2:	f043 0304 	orr.w	r3, r3, #4
 800cbe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cbea:	bf00      	nop
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cbf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc04:	f023 0304 	bic.w	r3, r3, #4
 800cc08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cc0c:	bf00      	nop
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800cc16:	b480      	push	{r7}
 800cc18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cc1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc22:	f003 0302 	and.w	r3, r3, #2
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d101      	bne.n	800cc2e <LL_RCC_LSE_IsReady+0x18>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <LL_RCC_LSE_IsReady+0x1a>
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800cc3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc4a:	f043 0301 	orr.w	r3, r3, #1
 800cc4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800cc52:	bf00      	nop
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800cc60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800cc74:	bf00      	nop
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800cc7e:	b480      	push	{r7}
 800cc80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800cc82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc8a:	f003 0302 	and.w	r3, r3, #2
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d101      	bne.n	800cc96 <LL_RCC_LSI1_IsReady+0x18>
 800cc92:	2301      	movs	r3, #1
 800cc94:	e000      	b.n	800cc98 <LL_RCC_LSI1_IsReady+0x1a>
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800cca2:	b480      	push	{r7}
 800cca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccb2:	f043 0304 	orr.w	r3, r3, #4
 800ccb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ccba:	bf00      	nop
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ccc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccd4:	f023 0304 	bic.w	r3, r3, #4
 800ccd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ccdc:	bf00      	nop
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800cce6:	b480      	push	{r7}
 800cce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ccea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccf2:	f003 0308 	and.w	r3, r3, #8
 800ccf6:	2b08      	cmp	r3, #8
 800ccf8:	d101      	bne.n	800ccfe <LL_RCC_LSI2_IsReady+0x18>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e000      	b.n	800cd00 <LL_RCC_LSI2_IsReady+0x1a>
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b083      	sub	sp, #12
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800cd12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd26:	4313      	orrs	r3, r2
 800cd28:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800cd3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd46:	f043 0301 	orr.w	r3, r3, #1
 800cd4a:	6013      	str	r3, [r2, #0]
}
 800cd4c:	bf00      	nop
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr

0800cd56 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800cd56:	b480      	push	{r7}
 800cd58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800cd5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd64:	f023 0301 	bic.w	r3, r3, #1
 800cd68:	6013      	str	r3, [r2, #0]
}
 800cd6a:	bf00      	nop
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800cd74:	b480      	push	{r7}
 800cd76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800cd78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 0302 	and.w	r3, r3, #2
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d101      	bne.n	800cd8a <LL_RCC_MSI_IsReady+0x16>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e000      	b.n	800cd8c <LL_RCC_MSI_IsReady+0x18>
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800cd9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cda8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	600b      	str	r3, [r1, #0]
}
 800cdb2:	bf00      	nop
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800cdc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2bb0      	cmp	r3, #176	@ 0xb0
 800cdd4:	d901      	bls.n	800cdda <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800cdd6:	23b0      	movs	r3, #176	@ 0xb0
 800cdd8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800cdda:	687b      	ldr	r3, [r7, #4]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800cdf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	021b      	lsls	r3, r3, #8
 800cdfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce02:	4313      	orrs	r3, r2
 800ce04:	604b      	str	r3, [r1, #4]
}
 800ce06:	bf00      	nop
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr

0800ce12 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b083      	sub	sp, #12
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ce1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	f023 0203 	bic.w	r2, r3, #3
 800ce24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	608b      	str	r3, [r1, #8]
}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ce3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f003 030c 	and.w	r3, r3, #12
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ce5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ce64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	608b      	str	r3, [r1, #8]
}
 800ce6e:	bf00      	nop
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	b083      	sub	sp, #12
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ce82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce86:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ce8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ce8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ce9a:	bf00      	nop
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ceae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ceb6:	f023 020f 	bic.w	r2, r3, #15
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	091b      	lsrs	r3, r3, #4
 800cebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cec2:	4313      	orrs	r3, r2
 800cec4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800cedc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cee6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	608b      	str	r3, [r1, #8]
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800cf04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cf0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	608b      	str	r3, [r1, #8]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800cf24:	b480      	push	{r7}
 800cf26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cf28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800cf40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800cf48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800cf56:	b480      	push	{r7}
 800cf58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800cf5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800cf72:	b480      	push	{r7}
 800cf74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800cf76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800cf8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800cfa2:	b480      	push	{r7}
 800cfa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800cfa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfb4:	6013      	str	r3, [r2, #0]
}
 800cfb6:	bf00      	nop
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800cfc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cfd2:	6013      	str	r3, [r2, #0]
}
 800cfd4:	bf00      	nop
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800cfe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cff0:	d101      	bne.n	800cff6 <LL_RCC_PLL_IsReady+0x18>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <LL_RCC_PLL_IsReady+0x1a>
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d002:	b480      	push	{r7}
 800d004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	0a1b      	lsrs	r3, r3, #8
 800d00e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800d012:	4618      	mov	r0, r3
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d034:	b480      	push	{r7}
 800d036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800d042:	4618      	mov	r0, r3
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	f003 0303 	and.w	r3, r3, #3
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800d064:	b480      	push	{r7}
 800d066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d076:	d101      	bne.n	800d07c <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d078:	2301      	movs	r3, #1
 800d07a:	e000      	b.n	800d07e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800d088:	b480      	push	{r7}
 800d08a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d090:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d09c:	d101      	bne.n	800d0a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e000      	b.n	800d0a4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d0b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d0ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c2:	d101      	bne.n	800d0c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e000      	b.n	800d0ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d0d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0e6:	d101      	bne.n	800d0ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e000      	b.n	800d0ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d0fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d10a:	d101      	bne.n	800d110 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e000      	b.n	800d112 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d11c:	b590      	push	{r4, r7, lr}
 800d11e:	b08d      	sub	sp, #52	@ 0x34
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e363      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 0320 	and.w	r3, r3, #32
 800d136:	2b00      	cmp	r3, #0
 800d138:	f000 808d 	beq.w	800d256 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d13c:	f7ff fe7d 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800d140:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d142:	f7ff ff83 	bl	800d04c <LL_RCC_PLL_GetMainSource>
 800d146:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d005      	beq.n	800d15a <HAL_RCC_OscConfig+0x3e>
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	2b0c      	cmp	r3, #12
 800d152:	d147      	bne.n	800d1e4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d156:	2b01      	cmp	r3, #1
 800d158:	d144      	bne.n	800d1e4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e347      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d16a:	f7ff fe28 	bl	800cdbe <LL_RCC_MSI_GetRange>
 800d16e:	4603      	mov	r3, r0
 800d170:	429c      	cmp	r4, r3
 800d172:	d914      	bls.n	800d19e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 fd4d 	bl	800dc18 <RCC_SetFlashLatencyFromMSIRange>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	e336      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff fe02 	bl	800cd96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fe26 	bl	800cde8 <LL_RCC_MSI_SetCalibTrimming>
 800d19c:	e013      	b.n	800d1c6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff fdf7 	bl	800cd96 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a1b      	ldr	r3, [r3, #32]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fe1b 	bl	800cde8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 fd2e 	bl	800dc18 <RCC_SetFlashLatencyFromMSIRange>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e317      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d1c6:	f000 fccb 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4aa4      	ldr	r2, [pc, #656]	@ (800d460 <HAL_RCC_OscConfig+0x344>)
 800d1ce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d1d0:	4ba4      	ldr	r3, [pc, #656]	@ (800d464 <HAL_RCC_OscConfig+0x348>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fa ff35 	bl	8008044 <HAL_InitTick>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d039      	beq.n	800d254 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e308      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01e      	beq.n	800d22a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d1ec:	f7ff fda4 	bl	800cd38 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d1f0:	f7fb f948 	bl	8008484 <HAL_GetTick>
 800d1f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800d1f6:	e008      	b.n	800d20a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d1f8:	f7fb f944 	bl	8008484 <HAL_GetTick>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	2b02      	cmp	r3, #2
 800d204:	d901      	bls.n	800d20a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	e2f5      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800d20a:	f7ff fdb3 	bl	800cd74 <LL_RCC_MSI_IsReady>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d0f1      	beq.n	800d1f8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fdbc 	bl	800cd96 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff fde0 	bl	800cde8 <LL_RCC_MSI_SetCalibTrimming>
 800d228:	e015      	b.n	800d256 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d22a:	f7ff fd94 	bl	800cd56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d22e:	f7fb f929 	bl	8008484 <HAL_GetTick>
 800d232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800d234:	e008      	b.n	800d248 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d236:	f7fb f925 	bl	8008484 <HAL_GetTick>
 800d23a:	4602      	mov	r2, r0
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	2b02      	cmp	r3, #2
 800d242:	d901      	bls.n	800d248 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800d244:	2303      	movs	r3, #3
 800d246:	e2d6      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800d248:	f7ff fd94 	bl	800cd74 <LL_RCC_MSI_IsReady>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1f1      	bne.n	800d236 <HAL_RCC_OscConfig+0x11a>
 800d252:	e000      	b.n	800d256 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d254:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d047      	beq.n	800d2f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d262:	f7ff fdea 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800d266:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d268:	f7ff fef0 	bl	800d04c <LL_RCC_PLL_GetMainSource>
 800d26c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	2b08      	cmp	r3, #8
 800d272:	d005      	beq.n	800d280 <HAL_RCC_OscConfig+0x164>
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	2b0c      	cmp	r3, #12
 800d278:	d108      	bne.n	800d28c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	2b03      	cmp	r3, #3
 800d27e:	d105      	bne.n	800d28c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d134      	bne.n	800d2f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	e2b4      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d294:	d102      	bne.n	800d29c <HAL_RCC_OscConfig+0x180>
 800d296:	f7ff fbd1 	bl	800ca3c <LL_RCC_HSE_Enable>
 800d29a:	e001      	b.n	800d2a0 <HAL_RCC_OscConfig+0x184>
 800d29c:	f7ff fbdd 	bl	800ca5a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d012      	beq.n	800d2ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a8:	f7fb f8ec 	bl	8008484 <HAL_GetTick>
 800d2ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800d2ae:	e008      	b.n	800d2c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2b0:	f7fb f8e8 	bl	8008484 <HAL_GetTick>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	2b64      	cmp	r3, #100	@ 0x64
 800d2bc:	d901      	bls.n	800d2c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e299      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800d2c2:	f7ff fbd9 	bl	800ca78 <LL_RCC_HSE_IsReady>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d0f1      	beq.n	800d2b0 <HAL_RCC_OscConfig+0x194>
 800d2cc:	e011      	b.n	800d2f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2ce:	f7fb f8d9 	bl	8008484 <HAL_GetTick>
 800d2d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800d2d4:	e008      	b.n	800d2e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2d6:	f7fb f8d5 	bl	8008484 <HAL_GetTick>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	2b64      	cmp	r3, #100	@ 0x64
 800d2e2:	d901      	bls.n	800d2e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e286      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800d2e8:	f7ff fbc6 	bl	800ca78 <LL_RCC_HSE_IsReady>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1f1      	bne.n	800d2d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0302 	and.w	r3, r3, #2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d04c      	beq.n	800d398 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2fe:	f7ff fd9c 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800d302:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d304:	f7ff fea2 	bl	800d04c <LL_RCC_PLL_GetMainSource>
 800d308:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	2b04      	cmp	r3, #4
 800d30e:	d005      	beq.n	800d31c <HAL_RCC_OscConfig+0x200>
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2b0c      	cmp	r3, #12
 800d314:	d10e      	bne.n	800d334 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d10b      	bne.n	800d334 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	e266      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fbe5 	bl	800cafc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d332:	e031      	b.n	800d398 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d019      	beq.n	800d370 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d33c:	f7ff fbae 	bl	800ca9c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d340:	f7fb f8a0 	bl	8008484 <HAL_GetTick>
 800d344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800d346:	e008      	b.n	800d35a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d348:	f7fb f89c 	bl	8008484 <HAL_GetTick>
 800d34c:	4602      	mov	r2, r0
 800d34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	2b02      	cmp	r3, #2
 800d354:	d901      	bls.n	800d35a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d356:	2303      	movs	r3, #3
 800d358:	e24d      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800d35a:	f7ff fbbd 	bl	800cad8 <LL_RCC_HSI_IsReady>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d0f1      	beq.n	800d348 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff fbc7 	bl	800cafc <LL_RCC_HSI_SetCalibTrimming>
 800d36e:	e013      	b.n	800d398 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d370:	f7ff fba3 	bl	800caba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d374:	f7fb f886 	bl	8008484 <HAL_GetTick>
 800d378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800d37a:	e008      	b.n	800d38e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d37c:	f7fb f882 	bl	8008484 <HAL_GetTick>
 800d380:	4602      	mov	r2, r0
 800d382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	2b02      	cmp	r3, #2
 800d388:	d901      	bls.n	800d38e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800d38a:	2303      	movs	r3, #3
 800d38c:	e233      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800d38e:	f7ff fba3 	bl	800cad8 <LL_RCC_HSI_IsReady>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1f1      	bne.n	800d37c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0308 	and.w	r3, r3, #8
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80a3 	beq.w	800d4f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d076      	beq.n	800d4a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f003 0310 	and.w	r3, r3, #16
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d046      	beq.n	800d454 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800d3c6:	f7ff fc5a 	bl	800cc7e <LL_RCC_LSI1_IsReady>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d113      	bne.n	800d3f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800d3d0:	f7ff fc33 	bl	800cc3a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d3d4:	f7fb f856 	bl	8008484 <HAL_GetTick>
 800d3d8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d3da:	e008      	b.n	800d3ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d3dc:	f7fb f852 	bl	8008484 <HAL_GetTick>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d901      	bls.n	800d3ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e203      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d3ee:	f7ff fc46 	bl	800cc7e <LL_RCC_LSI1_IsReady>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d0f1      	beq.n	800d3dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800d3f8:	f7ff fc53 	bl	800cca2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3fc:	f7fb f842 	bl	8008484 <HAL_GetTick>
 800d400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d402:	e008      	b.n	800d416 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d404:	f7fb f83e 	bl	8008484 <HAL_GetTick>
 800d408:	4602      	mov	r2, r0
 800d40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d901      	bls.n	800d416 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e1ef      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d416:	f7ff fc66 	bl	800cce6 <LL_RCC_LSI2_IsReady>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0f1      	beq.n	800d404 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff fc70 	bl	800cd0a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800d42a:	f7ff fc17 	bl	800cc5c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d42e:	f7fb f829 	bl	8008484 <HAL_GetTick>
 800d432:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d434:	e008      	b.n	800d448 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d436:	f7fb f825 	bl	8008484 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d901      	bls.n	800d448 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	e1d6      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d448:	f7ff fc19 	bl	800cc7e <LL_RCC_LSI1_IsReady>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1f1      	bne.n	800d436 <HAL_RCC_OscConfig+0x31a>
 800d452:	e051      	b.n	800d4f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800d454:	f7ff fbf1 	bl	800cc3a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d458:	f7fb f814 	bl	8008484 <HAL_GetTick>
 800d45c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d45e:	e00c      	b.n	800d47a <HAL_RCC_OscConfig+0x35e>
 800d460:	20000020 	.word	0x20000020
 800d464:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d468:	f7fb f80c 	bl	8008484 <HAL_GetTick>
 800d46c:	4602      	mov	r2, r0
 800d46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	2b02      	cmp	r3, #2
 800d474:	d901      	bls.n	800d47a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d476:	2303      	movs	r3, #3
 800d478:	e1bd      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d47a:	f7ff fc00 	bl	800cc7e <LL_RCC_LSI1_IsReady>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d0f1      	beq.n	800d468 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800d484:	f7ff fc1e 	bl	800ccc4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d488:	e008      	b.n	800d49c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d48a:	f7fa fffb 	bl	8008484 <HAL_GetTick>
 800d48e:	4602      	mov	r2, r0
 800d490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	2b03      	cmp	r3, #3
 800d496:	d901      	bls.n	800d49c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800d498:	2303      	movs	r3, #3
 800d49a:	e1ac      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d49c:	f7ff fc23 	bl	800cce6 <LL_RCC_LSI2_IsReady>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1f1      	bne.n	800d48a <HAL_RCC_OscConfig+0x36e>
 800d4a6:	e027      	b.n	800d4f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800d4a8:	f7ff fc0c 	bl	800ccc4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ac:	f7fa ffea 	bl	8008484 <HAL_GetTick>
 800d4b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d4b2:	e008      	b.n	800d4c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d4b4:	f7fa ffe6 	bl	8008484 <HAL_GetTick>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d901      	bls.n	800d4c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e197      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d4c6:	f7ff fc0e 	bl	800cce6 <LL_RCC_LSI2_IsReady>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1f1      	bne.n	800d4b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800d4d0:	f7ff fbc4 	bl	800cc5c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4d4:	f7fa ffd6 	bl	8008484 <HAL_GetTick>
 800d4d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d4da:	e008      	b.n	800d4ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d4dc:	f7fa ffd2 	bl	8008484 <HAL_GetTick>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d901      	bls.n	800d4ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e183      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d4ee:	f7ff fbc6 	bl	800cc7e <LL_RCC_LSI1_IsReady>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1f1      	bne.n	800d4dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0304 	and.w	r3, r3, #4
 800d500:	2b00      	cmp	r3, #0
 800d502:	d05b      	beq.n	800d5bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d504:	4ba7      	ldr	r3, [pc, #668]	@ (800d7a4 <HAL_RCC_OscConfig+0x688>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d114      	bne.n	800d53a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d510:	f7ff fa54 	bl	800c9bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d514:	f7fa ffb6 	bl	8008484 <HAL_GetTick>
 800d518:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d51a:	e008      	b.n	800d52e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d51c:	f7fa ffb2 	bl	8008484 <HAL_GetTick>
 800d520:	4602      	mov	r2, r0
 800d522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	2b02      	cmp	r3, #2
 800d528:	d901      	bls.n	800d52e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800d52a:	2303      	movs	r3, #3
 800d52c:	e163      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d52e:	4b9d      	ldr	r3, [pc, #628]	@ (800d7a4 <HAL_RCC_OscConfig+0x688>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d536:	2b00      	cmp	r3, #0
 800d538:	d0f0      	beq.n	800d51c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d102      	bne.n	800d548 <HAL_RCC_OscConfig+0x42c>
 800d542:	f7ff fb24 	bl	800cb8e <LL_RCC_LSE_Enable>
 800d546:	e00c      	b.n	800d562 <HAL_RCC_OscConfig+0x446>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	2b05      	cmp	r3, #5
 800d54e:	d104      	bne.n	800d55a <HAL_RCC_OscConfig+0x43e>
 800d550:	f7ff fb3f 	bl	800cbd2 <LL_RCC_LSE_EnableBypass>
 800d554:	f7ff fb1b 	bl	800cb8e <LL_RCC_LSE_Enable>
 800d558:	e003      	b.n	800d562 <HAL_RCC_OscConfig+0x446>
 800d55a:	f7ff fb29 	bl	800cbb0 <LL_RCC_LSE_Disable>
 800d55e:	f7ff fb49 	bl	800cbf4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d014      	beq.n	800d594 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d56a:	f7fa ff8b 	bl	8008484 <HAL_GetTick>
 800d56e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800d570:	e00a      	b.n	800d588 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d572:	f7fa ff87 	bl	8008484 <HAL_GetTick>
 800d576:	4602      	mov	r2, r0
 800d578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d580:	4293      	cmp	r3, r2
 800d582:	d901      	bls.n	800d588 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e136      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800d588:	f7ff fb45 	bl	800cc16 <LL_RCC_LSE_IsReady>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0ef      	beq.n	800d572 <HAL_RCC_OscConfig+0x456>
 800d592:	e013      	b.n	800d5bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d594:	f7fa ff76 	bl	8008484 <HAL_GetTick>
 800d598:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800d59a:	e00a      	b.n	800d5b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d59c:	f7fa ff72 	bl	8008484 <HAL_GetTick>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d901      	bls.n	800d5b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	e121      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800d5b2:	f7ff fb30 	bl	800cc16 <LL_RCC_LSE_IsReady>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1ef      	bne.n	800d59c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d02c      	beq.n	800d622 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d014      	beq.n	800d5fa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d5d0:	f7ff faa9 	bl	800cb26 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5d4:	f7fa ff56 	bl	8008484 <HAL_GetTick>
 800d5d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d5da:	e008      	b.n	800d5ee <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d5dc:	f7fa ff52 	bl	8008484 <HAL_GetTick>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d901      	bls.n	800d5ee <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	e103      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d5ee:	f7ff fabc 	bl	800cb6a <LL_RCC_HSI48_IsReady>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d0f1      	beq.n	800d5dc <HAL_RCC_OscConfig+0x4c0>
 800d5f8:	e013      	b.n	800d622 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d5fa:	f7ff faa5 	bl	800cb48 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5fe:	f7fa ff41 	bl	8008484 <HAL_GetTick>
 800d602:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d604:	e008      	b.n	800d618 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d606:	f7fa ff3d 	bl	8008484 <HAL_GetTick>
 800d60a:	4602      	mov	r2, r0
 800d60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	2b02      	cmp	r3, #2
 800d612:	d901      	bls.n	800d618 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800d614:	2303      	movs	r3, #3
 800d616:	e0ee      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d618:	f7ff faa7 	bl	800cb6a <LL_RCC_HSI48_IsReady>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1f1      	bne.n	800d606 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 80e4 	beq.w	800d7f4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d62c:	f7ff fc05 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800d630:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800d632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d63e:	2b02      	cmp	r3, #2
 800d640:	f040 80b4 	bne.w	800d7ac <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0203 	and.w	r2, r3, #3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d64e:	429a      	cmp	r2, r3
 800d650:	d123      	bne.n	800d69a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d11c      	bne.n	800d69a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	0a1b      	lsrs	r3, r3, #8
 800d664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d114      	bne.n	800d69a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d10d      	bne.n	800d69a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d688:	429a      	cmp	r2, r3
 800d68a:	d106      	bne.n	800d69a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d696:	429a      	cmp	r2, r3
 800d698:	d05d      	beq.n	800d756 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2b0c      	cmp	r3, #12
 800d69e:	d058      	beq.n	800d752 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d6a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d001      	beq.n	800d6b2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e0a1      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d6b2:	f7ff fc85 	bl	800cfc0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d6b6:	f7fa fee5 	bl	8008484 <HAL_GetTick>
 800d6ba:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d6bc:	e008      	b.n	800d6d0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6be:	f7fa fee1 	bl	8008484 <HAL_GetTick>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d901      	bls.n	800d6d0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	e092      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d6d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1ef      	bne.n	800d6be <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d6de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6e2:	68da      	ldr	r2, [r3, #12]
 800d6e4:	4b30      	ldr	r3, [pc, #192]	@ (800d7a8 <HAL_RCC_OscConfig+0x68c>)
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d6f0:	4311      	orrs	r1, r2
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d6f6:	0212      	lsls	r2, r2, #8
 800d6f8:	4311      	orrs	r1, r2
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d6fe:	4311      	orrs	r1, r2
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800d704:	4311      	orrs	r1, r2
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800d70a:	430a      	orrs	r2, r1
 800d70c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d710:	4313      	orrs	r3, r2
 800d712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d714:	f7ff fc45 	bl	800cfa2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d728:	f7fa feac 	bl	8008484 <HAL_GetTick>
 800d72c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d72e:	e008      	b.n	800d742 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d730:	f7fa fea8 	bl	8008484 <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d901      	bls.n	800d742 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e059      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d0ef      	beq.n	800d730 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d750:	e050      	b.n	800d7f4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e04f      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d147      	bne.n	800d7f4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d764:	f7ff fc1d 	bl	800cfa2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d778:	f7fa fe84 	bl	8008484 <HAL_GetTick>
 800d77c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d77e:	e008      	b.n	800d792 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d780:	f7fa fe80 	bl	8008484 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d901      	bls.n	800d792 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800d78e:	2303      	movs	r3, #3
 800d790:	e031      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d0ef      	beq.n	800d780 <HAL_RCC_OscConfig+0x664>
 800d7a0:	e028      	b.n	800d7f4 <HAL_RCC_OscConfig+0x6d8>
 800d7a2:	bf00      	nop
 800d7a4:	58000400 	.word	0x58000400
 800d7a8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	2b0c      	cmp	r3, #12
 800d7b0:	d01e      	beq.n	800d7f0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7b2:	f7ff fc05 	bl	800cfc0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7b6:	f7fa fe65 	bl	8008484 <HAL_GetTick>
 800d7ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7bc:	e008      	b.n	800d7d0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7be:	f7fa fe61 	bl	8008484 <HAL_GetTick>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	d901      	bls.n	800d7d0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	e012      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1ef      	bne.n	800d7be <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800d7de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7e2:	68da      	ldr	r2, [r3, #12]
 800d7e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7e8:	4b05      	ldr	r3, [pc, #20]	@ (800d800 <HAL_RCC_OscConfig+0x6e4>)
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	60cb      	str	r3, [r1, #12]
 800d7ee:	e001      	b.n	800d7f4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e000      	b.n	800d7f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3734      	adds	r7, #52	@ 0x34
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd90      	pop	{r4, r7, pc}
 800d7fe:	bf00      	nop
 800d800:	eefefffc 	.word	0xeefefffc

0800d804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e12d      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d818:	4b98      	ldr	r3, [pc, #608]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d91b      	bls.n	800d85e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d826:	4b95      	ldr	r3, [pc, #596]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f023 0207 	bic.w	r2, r3, #7
 800d82e:	4993      	ldr	r1, [pc, #588]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	4313      	orrs	r3, r2
 800d834:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d836:	f7fa fe25 	bl	8008484 <HAL_GetTick>
 800d83a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d83c:	e008      	b.n	800d850 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d83e:	f7fa fe21 	bl	8008484 <HAL_GetTick>
 800d842:	4602      	mov	r2, r0
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d901      	bls.n	800d850 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800d84c:	2303      	movs	r3, #3
 800d84e:	e111      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d850:	4b8a      	ldr	r3, [pc, #552]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f003 0307 	and.w	r3, r3, #7
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d1ef      	bne.n	800d83e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f003 0302 	and.w	r3, r3, #2
 800d866:	2b00      	cmp	r3, #0
 800d868:	d016      	beq.n	800d898 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff faef 	bl	800ce52 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d874:	f7fa fe06 	bl	8008484 <HAL_GetTick>
 800d878:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d87a:	e008      	b.n	800d88e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d87c:	f7fa fe02 	bl	8008484 <HAL_GetTick>
 800d880:	4602      	mov	r2, r0
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	2b02      	cmp	r3, #2
 800d888:	d901      	bls.n	800d88e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e0f2      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d88e:	f7ff fbe9 	bl	800d064 <LL_RCC_IsActiveFlag_HPRE>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d0f1      	beq.n	800d87c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 0320 	and.w	r3, r3, #32
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d016      	beq.n	800d8d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff fae6 	bl	800ce7a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d8ae:	f7fa fde9 	bl	8008484 <HAL_GetTick>
 800d8b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d8b4:	e008      	b.n	800d8c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d8b6:	f7fa fde5 	bl	8008484 <HAL_GetTick>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d901      	bls.n	800d8c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	e0d5      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d8c8:	f7ff fbde 	bl	800d088 <LL_RCC_IsActiveFlag_C2HPRE>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0f1      	beq.n	800d8b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d016      	beq.n	800d90c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff fadf 	bl	800cea6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d8e8:	f7fa fdcc 	bl	8008484 <HAL_GetTick>
 800d8ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d8ee:	e008      	b.n	800d902 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d8f0:	f7fa fdc8 	bl	8008484 <HAL_GetTick>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d901      	bls.n	800d902 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800d8fe:	2303      	movs	r3, #3
 800d900:	e0b8      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d902:	f7ff fbd4 	bl	800d0ae <LL_RCC_IsActiveFlag_SHDHPRE>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0f1      	beq.n	800d8f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 0304 	and.w	r3, r3, #4
 800d914:	2b00      	cmp	r3, #0
 800d916:	d016      	beq.n	800d946 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7ff fad9 	bl	800ced4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d922:	f7fa fdaf 	bl	8008484 <HAL_GetTick>
 800d926:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d928:	e008      	b.n	800d93c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d92a:	f7fa fdab 	bl	8008484 <HAL_GetTick>
 800d92e:	4602      	mov	r2, r0
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	2b02      	cmp	r3, #2
 800d936:	d901      	bls.n	800d93c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800d938:	2303      	movs	r3, #3
 800d93a:	e09b      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d93c:	f7ff fbca 	bl	800d0d4 <LL_RCC_IsActiveFlag_PPRE1>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0f1      	beq.n	800d92a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f003 0308 	and.w	r3, r3, #8
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d017      	beq.n	800d982 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff facf 	bl	800cefc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d95e:	f7fa fd91 	bl	8008484 <HAL_GetTick>
 800d962:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d964:	e008      	b.n	800d978 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d966:	f7fa fd8d 	bl	8008484 <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	2b02      	cmp	r3, #2
 800d972:	d901      	bls.n	800d978 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800d974:	2303      	movs	r3, #3
 800d976:	e07d      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d978:	f7ff fbbe 	bl	800d0f8 <LL_RCC_IsActiveFlag_PPRE2>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d0f1      	beq.n	800d966 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d043      	beq.n	800da16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d106      	bne.n	800d9a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800d996:	f7ff f86f 	bl	800ca78 <LL_RCC_HSE_IsReady>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d11e      	bne.n	800d9de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e067      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d106      	bne.n	800d9ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800d9ac:	f7ff fb17 	bl	800cfde <LL_RCC_PLL_IsReady>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d113      	bne.n	800d9de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e05c      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800d9c2:	f7ff f9d7 	bl	800cd74 <LL_RCC_MSI_IsReady>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d108      	bne.n	800d9de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e051      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800d9d0:	f7ff f882 	bl	800cad8 <LL_RCC_HSI_IsReady>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e04a      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fa15 	bl	800ce12 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9e8:	f7fa fd4c 	bl	8008484 <HAL_GetTick>
 800d9ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9ee:	e00a      	b.n	800da06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d9f0:	f7fa fd48 	bl	8008484 <HAL_GetTick>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	1ad3      	subs	r3, r2, r3
 800d9fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d901      	bls.n	800da06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800da02:	2303      	movs	r3, #3
 800da04:	e036      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da06:	f7ff fa18 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800da0a:	4602      	mov	r2, r0
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	429a      	cmp	r2, r3
 800da14:	d1ec      	bne.n	800d9f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800da16:	4b19      	ldr	r3, [pc, #100]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d21b      	bcs.n	800da5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da24:	4b15      	ldr	r3, [pc, #84]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f023 0207 	bic.w	r2, r3, #7
 800da2c:	4913      	ldr	r1, [pc, #76]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	4313      	orrs	r3, r2
 800da32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da34:	f7fa fd26 	bl	8008484 <HAL_GetTick>
 800da38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da3a:	e008      	b.n	800da4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800da3c:	f7fa fd22 	bl	8008484 <HAL_GetTick>
 800da40:	4602      	mov	r2, r0
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	2b02      	cmp	r3, #2
 800da48:	d901      	bls.n	800da4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800da4a:	2303      	movs	r3, #3
 800da4c:	e012      	b.n	800da74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da4e:	4b0b      	ldr	r3, [pc, #44]	@ (800da7c <HAL_RCC_ClockConfig+0x278>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d1ef      	bne.n	800da3c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800da5c:	f000 f880 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800da60:	4603      	mov	r3, r0
 800da62:	4a07      	ldr	r2, [pc, #28]	@ (800da80 <HAL_RCC_ClockConfig+0x27c>)
 800da64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800da66:	f7fa fd19 	bl	800849c <HAL_GetTickPrio>
 800da6a:	4603      	mov	r3, r0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fa fae9 	bl	8008044 <HAL_InitTick>
 800da72:	4603      	mov	r3, r0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	58004000 	.word	0x58004000
 800da80:	20000020 	.word	0x20000020

0800da84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da84:	b590      	push	{r4, r7, lr}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da8a:	f7ff f9d6 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800da8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10a      	bne.n	800daac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800da96:	f7ff f992 	bl	800cdbe <LL_RCC_MSI_GetRange>
 800da9a:	4603      	mov	r3, r0
 800da9c:	091b      	lsrs	r3, r3, #4
 800da9e:	f003 030f 	and.w	r3, r3, #15
 800daa2:	4a2b      	ldr	r2, [pc, #172]	@ (800db50 <HAL_RCC_GetSysClockFreq+0xcc>)
 800daa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa8:	60fb      	str	r3, [r7, #12]
 800daaa:	e04b      	b.n	800db44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b04      	cmp	r3, #4
 800dab0:	d102      	bne.n	800dab8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dab2:	4b28      	ldr	r3, [pc, #160]	@ (800db54 <HAL_RCC_GetSysClockFreq+0xd0>)
 800dab4:	60fb      	str	r3, [r7, #12]
 800dab6:	e045      	b.n	800db44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b08      	cmp	r3, #8
 800dabc:	d10a      	bne.n	800dad4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800dabe:	f7fe ffab 	bl	800ca18 <LL_RCC_HSE_IsEnabledDiv2>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d102      	bne.n	800dace <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800dac8:	4b23      	ldr	r3, [pc, #140]	@ (800db58 <HAL_RCC_GetSysClockFreq+0xd4>)
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	e03a      	b.n	800db44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800dace:	4b23      	ldr	r3, [pc, #140]	@ (800db5c <HAL_RCC_GetSysClockFreq+0xd8>)
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	e037      	b.n	800db44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800dad4:	f7ff faba 	bl	800d04c <LL_RCC_PLL_GetMainSource>
 800dad8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d003      	beq.n	800dae8 <HAL_RCC_GetSysClockFreq+0x64>
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d003      	beq.n	800daee <HAL_RCC_GetSysClockFreq+0x6a>
 800dae6:	e00d      	b.n	800db04 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800dae8:	4b1a      	ldr	r3, [pc, #104]	@ (800db54 <HAL_RCC_GetSysClockFreq+0xd0>)
 800daea:	60bb      	str	r3, [r7, #8]
        break;
 800daec:	e015      	b.n	800db1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800daee:	f7fe ff93 	bl	800ca18 <LL_RCC_HSE_IsEnabledDiv2>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d102      	bne.n	800dafe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800daf8:	4b17      	ldr	r3, [pc, #92]	@ (800db58 <HAL_RCC_GetSysClockFreq+0xd4>)
 800dafa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800dafc:	e00d      	b.n	800db1a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800dafe:	4b17      	ldr	r3, [pc, #92]	@ (800db5c <HAL_RCC_GetSysClockFreq+0xd8>)
 800db00:	60bb      	str	r3, [r7, #8]
        break;
 800db02:	e00a      	b.n	800db1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800db04:	f7ff f95b 	bl	800cdbe <LL_RCC_MSI_GetRange>
 800db08:	4603      	mov	r3, r0
 800db0a:	091b      	lsrs	r3, r3, #4
 800db0c:	f003 030f 	and.w	r3, r3, #15
 800db10:	4a0f      	ldr	r2, [pc, #60]	@ (800db50 <HAL_RCC_GetSysClockFreq+0xcc>)
 800db12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db16:	60bb      	str	r3, [r7, #8]
        break;
 800db18:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800db1a:	f7ff fa72 	bl	800d002 <LL_RCC_PLL_GetN>
 800db1e:	4602      	mov	r2, r0
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	fb03 f402 	mul.w	r4, r3, r2
 800db26:	f7ff fa85 	bl	800d034 <LL_RCC_PLL_GetDivider>
 800db2a:	4603      	mov	r3, r0
 800db2c:	091b      	lsrs	r3, r3, #4
 800db2e:	3301      	adds	r3, #1
 800db30:	fbb4 f4f3 	udiv	r4, r4, r3
 800db34:	f7ff fa72 	bl	800d01c <LL_RCC_PLL_GetR>
 800db38:	4603      	mov	r3, r0
 800db3a:	0f5b      	lsrs	r3, r3, #29
 800db3c:	3301      	adds	r3, #1
 800db3e:	fbb4 f3f3 	udiv	r3, r4, r3
 800db42:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800db44:	68fb      	ldr	r3, [r7, #12]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd90      	pop	{r4, r7, pc}
 800db4e:	bf00      	nop
 800db50:	0801c384 	.word	0x0801c384
 800db54:	00f42400 	.word	0x00f42400
 800db58:	003d0900 	.word	0x003d0900
 800db5c:	007a1200 	.word	0x007a1200

0800db60 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db60:	b598      	push	{r3, r4, r7, lr}
 800db62:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800db64:	f7ff ff8e 	bl	800da84 <HAL_RCC_GetSysClockFreq>
 800db68:	4604      	mov	r4, r0
 800db6a:	f7ff f9db 	bl	800cf24 <LL_RCC_GetAHBPrescaler>
 800db6e:	4603      	mov	r3, r0
 800db70:	091b      	lsrs	r3, r3, #4
 800db72:	f003 030f 	and.w	r3, r3, #15
 800db76:	4a03      	ldr	r2, [pc, #12]	@ (800db84 <HAL_RCC_GetHCLKFreq+0x24>)
 800db78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db7c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800db80:	4618      	mov	r0, r3
 800db82:	bd98      	pop	{r3, r4, r7, pc}
 800db84:	0801c324 	.word	0x0801c324

0800db88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db88:	b598      	push	{r3, r4, r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800db8c:	f7ff ffe8 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800db90:	4604      	mov	r4, r0
 800db92:	f7ff f9fa 	bl	800cf8a <LL_RCC_GetAPB2Prescaler>
 800db96:	4603      	mov	r3, r0
 800db98:	0adb      	lsrs	r3, r3, #11
 800db9a:	f003 0307 	and.w	r3, r3, #7
 800db9e:	4a04      	ldr	r2, [pc, #16]	@ (800dbb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dba4:	f003 031f 	and.w	r3, r3, #31
 800dba8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	bd98      	pop	{r3, r4, r7, pc}
 800dbb0:	0801c364 	.word	0x0801c364

0800dbb4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	226f      	movs	r2, #111	@ 0x6f
 800dbc2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800dbc4:	f7ff f939 	bl	800ce3a <LL_RCC_GetSysClkSource>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800dbce:	f7ff f9a9 	bl	800cf24 <LL_RCC_GetAHBPrescaler>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800dbd8:	f7ff f9cb 	bl	800cf72 <LL_RCC_GetAPB1Prescaler>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800dbe2:	f7ff f9d2 	bl	800cf8a <LL_RCC_GetAPB2Prescaler>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800dbec:	f7ff f9a6 	bl	800cf3c <LL_C2_RCC_GetAHBPrescaler>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800dbf6:	f7ff f9ae 	bl	800cf56 <LL_RCC_GetAHB4Prescaler>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800dc00:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <HAL_RCC_GetClockConfig+0x60>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0207 	and.w	r2, r3, #7
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	601a      	str	r2, [r3, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	58004000 	.word	0x58004000

0800dc18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800dc18:	b590      	push	{r4, r7, lr}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2bb0      	cmp	r3, #176	@ 0xb0
 800dc24:	d903      	bls.n	800dc2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800dc26:	4b15      	ldr	r3, [pc, #84]	@ (800dc7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800dc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2a:	60fb      	str	r3, [r7, #12]
 800dc2c:	e007      	b.n	800dc3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	091b      	lsrs	r3, r3, #4
 800dc32:	f003 030f 	and.w	r3, r3, #15
 800dc36:	4a11      	ldr	r2, [pc, #68]	@ (800dc7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800dc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800dc3e:	f7ff f98a 	bl	800cf56 <LL_RCC_GetAHB4Prescaler>
 800dc42:	4603      	mov	r3, r0
 800dc44:	091b      	lsrs	r3, r3, #4
 800dc46:	f003 030f 	and.w	r3, r3, #15
 800dc4a:	4a0d      	ldr	r2, [pc, #52]	@ (800dc80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800dc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	4a0a      	ldr	r2, [pc, #40]	@ (800dc84 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800dc5c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc60:	0c9c      	lsrs	r4, r3, #18
 800dc62:	f7fe febb 	bl	800c9dc <HAL_PWREx_GetVoltageRange>
 800dc66:	4603      	mov	r3, r0
 800dc68:	4619      	mov	r1, r3
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f000 f80c 	bl	800dc88 <RCC_SetFlashLatency>
 800dc70:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd90      	pop	{r4, r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	0801c384 	.word	0x0801c384
 800dc80:	0801c324 	.word	0x0801c324
 800dc84:	431bde83 	.word	0x431bde83

0800dc88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800dc88:	b590      	push	{r4, r7, lr}
 800dc8a:	b093      	sub	sp, #76	@ 0x4c
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800dc92:	4b37      	ldr	r3, [pc, #220]	@ (800dd70 <RCC_SetFlashLatency+0xe8>)
 800dc94:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800dc98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800dc9e:	4a35      	ldr	r2, [pc, #212]	@ (800dd74 <RCC_SetFlashLatency+0xec>)
 800dca0:	f107 031c 	add.w	r3, r7, #28
 800dca4:	ca07      	ldmia	r2, {r0, r1, r2}
 800dca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800dcaa:	4b33      	ldr	r3, [pc, #204]	@ (800dd78 <RCC_SetFlashLatency+0xf0>)
 800dcac:	f107 040c 	add.w	r4, r7, #12
 800dcb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcc0:	d11a      	bne.n	800dcf8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcc6:	e013      	b.n	800dcf0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800dcc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	3348      	adds	r3, #72	@ 0x48
 800dcce:	443b      	add	r3, r7
 800dcd0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d807      	bhi.n	800dcea <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800dcda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	3348      	adds	r3, #72	@ 0x48
 800dce0:	443b      	add	r3, r7
 800dce2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dce6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800dce8:	e020      	b.n	800dd2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dcea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcec:	3301      	adds	r3, #1
 800dcee:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d9e8      	bls.n	800dcc8 <RCC_SetFlashLatency+0x40>
 800dcf6:	e019      	b.n	800dd2c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcfc:	e013      	b.n	800dd26 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800dcfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	3348      	adds	r3, #72	@ 0x48
 800dd04:	443b      	add	r3, r7
 800dd06:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d807      	bhi.n	800dd20 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800dd10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	3348      	adds	r3, #72	@ 0x48
 800dd16:	443b      	add	r3, r7
 800dd18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dd1c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800dd1e:	e005      	b.n	800dd2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800dd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd22:	3301      	adds	r3, #1
 800dd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d9e8      	bls.n	800dcfe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800dd2c:	4b13      	ldr	r3, [pc, #76]	@ (800dd7c <RCC_SetFlashLatency+0xf4>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f023 0207 	bic.w	r2, r3, #7
 800dd34:	4911      	ldr	r1, [pc, #68]	@ (800dd7c <RCC_SetFlashLatency+0xf4>)
 800dd36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd3c:	f7fa fba2 	bl	8008484 <HAL_GetTick>
 800dd40:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800dd42:	e008      	b.n	800dd56 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800dd44:	f7fa fb9e 	bl	8008484 <HAL_GetTick>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d901      	bls.n	800dd56 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800dd52:	2303      	movs	r3, #3
 800dd54:	e007      	b.n	800dd66 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800dd56:	4b09      	ldr	r3, [pc, #36]	@ (800dd7c <RCC_SetFlashLatency+0xf4>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d1ef      	bne.n	800dd44 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	374c      	adds	r7, #76	@ 0x4c
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd90      	pop	{r4, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	0801a1cc 	.word	0x0801a1cc
 800dd74:	0801a1dc 	.word	0x0801a1dc
 800dd78:	0801a1e8 	.word	0x0801a1e8
 800dd7c:	58004000 	.word	0x58004000

0800dd80 <LL_RCC_LSE_IsEnabled>:
{
 800dd80:	b480      	push	{r7}
 800dd82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800dd84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d101      	bne.n	800dd98 <LL_RCC_LSE_IsEnabled+0x18>
 800dd94:	2301      	movs	r3, #1
 800dd96:	e000      	b.n	800dd9a <LL_RCC_LSE_IsEnabled+0x1a>
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <LL_RCC_LSE_IsReady>:
{
 800dda4:	b480      	push	{r7}
 800dda6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800dda8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d101      	bne.n	800ddbc <LL_RCC_LSE_IsReady+0x18>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e000      	b.n	800ddbe <LL_RCC_LSE_IsReady+0x1a>
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <LL_RCC_SetRFWKPClockSource>:
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ddd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ddd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800dddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <LL_RCC_SetSMPSClockSource>:
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ddfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de02:	f023 0203 	bic.w	r2, r3, #3
 800de06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4313      	orrs	r3, r2
 800de0e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800de10:	bf00      	nop
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <LL_RCC_SetSMPSPrescaler>:
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800de24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800de2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4313      	orrs	r3, r2
 800de36:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800de38:	bf00      	nop
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <LL_RCC_SetUSARTClockSource>:
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800de4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de54:	f023 0203 	bic.w	r2, r3, #3
 800de58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4313      	orrs	r3, r2
 800de60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <LL_RCC_SetLPUARTClockSource>:
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800de78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800de84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800de90:	bf00      	nop
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <LL_RCC_SetI2CClockSource>:
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800dea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dea8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	091b      	lsrs	r3, r3, #4
 800deb0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800deb4:	43db      	mvns	r3, r3
 800deb6:	401a      	ands	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	011b      	lsls	r3, r3, #4
 800debc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800dec0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dec4:	4313      	orrs	r3, r2
 800dec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800deca:	bf00      	nop
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <LL_RCC_SetLPTIMClockSource>:
{
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800dede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dee2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	0c1b      	lsrs	r3, r3, #16
 800deea:	041b      	lsls	r3, r3, #16
 800deec:	43db      	mvns	r3, r3
 800deee:	401a      	ands	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	041b      	lsls	r3, r3, #16
 800def4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800def8:	4313      	orrs	r3, r2
 800defa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800defe:	bf00      	nop
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <LL_RCC_SetSAIClockSource>:
{
 800df0a:	b480      	push	{r7}
 800df0c:	b083      	sub	sp, #12
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800df12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800df1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4313      	orrs	r3, r2
 800df26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800df2a:	bf00      	nop
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <LL_RCC_SetRNGClockSource>:
{
 800df36:	b480      	push	{r7}
 800df38:	b083      	sub	sp, #12
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800df3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df46:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800df4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4313      	orrs	r3, r2
 800df52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800df56:	bf00      	nop
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <LL_RCC_SetCLK48ClockSource>:
{
 800df62:	b480      	push	{r7}
 800df64:	b083      	sub	sp, #12
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800df6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800df76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800df82:	bf00      	nop
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <LL_RCC_SetUSBClockSource>:
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7ff ffe3 	bl	800df62 <LL_RCC_SetCLK48ClockSource>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <LL_RCC_SetADCClockSource>:
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800dfac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfb4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800dfb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800dfc4:	bf00      	nop
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <LL_RCC_SetRTCClockSource>:
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800dfd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dfe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800dff0:	bf00      	nop
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <LL_RCC_GetRTCClockSource>:
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <LL_RCC_ForceBackupDomainReset>:
{
 800e016:	b480      	push	{r7}
 800e018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e01a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e02a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e02e:	bf00      	nop
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <LL_RCC_ReleaseBackupDomainReset>:
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e03c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e044:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e04c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e050:	bf00      	nop
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <LL_RCC_PLLSAI1_Enable>:
{
 800e05a:	b480      	push	{r7}
 800e05c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e05e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e068:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e06c:	6013      	str	r3, [r2, #0]
}
 800e06e:	bf00      	nop
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <LL_RCC_PLLSAI1_Disable>:
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e07c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e086:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e08a:	6013      	str	r3, [r2, #0]
}
 800e08c:	bf00      	nop
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <LL_RCC_PLLSAI1_IsReady>:
{
 800e096:	b480      	push	{r7}
 800e098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e09a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0a8:	d101      	bne.n	800e0ae <LL_RCC_PLLSAI1_IsReady+0x18>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b088      	sub	sp, #32
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d034      	beq.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e0de:	d021      	beq.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e0e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e0e4:	d81b      	bhi.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e0e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0ea:	d01d      	beq.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e0ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0f0:	d815      	bhi.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00b      	beq.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e0f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0fa:	d110      	bne.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e0fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e10a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e10c:	e00d      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	3304      	adds	r3, #4
 800e112:	4618      	mov	r0, r3
 800e114:	f000 f947 	bl	800e3a6 <RCCEx_PLLSAI1_ConfigNP>
 800e118:	4603      	mov	r3, r0
 800e11a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e11c:	e005      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	77fb      	strb	r3, [r7, #31]
        break;
 800e122:	e002      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e124:	bf00      	nop
 800e126:	e000      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e12a:	7ffb      	ldrb	r3, [r7, #31]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d105      	bne.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff fee8 	bl	800df0a <LL_RCC_SetSAIClockSource>
 800e13a:	e001      	b.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e13c:	7ffb      	ldrb	r3, [r7, #31]
 800e13e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d046      	beq.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e14c:	f7ff ff56 	bl	800dffc <LL_RCC_GetRTCClockSource>
 800e150:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e156:	69ba      	ldr	r2, [r7, #24]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d03c      	beq.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e15c:	f7fe fc2e 	bl	800c9bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d105      	bne.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff ff30 	bl	800dfd0 <LL_RCC_SetRTCClockSource>
 800e170:	e02e      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e17a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e17c:	f7ff ff4b 	bl	800e016 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e180:	f7ff ff5a 	bl	800e038 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e18e:	4313      	orrs	r3, r2
 800e190:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e19c:	f7ff fdf0 	bl	800dd80 <LL_RCC_LSE_IsEnabled>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d114      	bne.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e1a6:	f7fa f96d 	bl	8008484 <HAL_GetTick>
 800e1aa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e1ac:	e00b      	b.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1ae:	f7fa f969 	bl	8008484 <HAL_GetTick>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d902      	bls.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	77fb      	strb	r3, [r7, #31]
              break;
 800e1c4:	e004      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e1c6:	f7ff fded 	bl	800dda4 <LL_RCC_LSE_IsReady>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d1ee      	bne.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800e1d0:	7ffb      	ldrb	r3, [r7, #31]
 800e1d2:	77bb      	strb	r3, [r7, #30]
 800e1d4:	e001      	b.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1d6:	7ffb      	ldrb	r3, [r7, #31]
 800e1d8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d004      	beq.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	699b      	ldr	r3, [r3, #24]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff fe2a 	bl	800de44 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 0302 	and.w	r3, r3, #2
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d004      	beq.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	69db      	ldr	r3, [r3, #28]
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fe35 	bl	800de70 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 0310 	and.w	r3, r3, #16
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff fe5d 	bl	800ded6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0320 	and.w	r3, r3, #32
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7ff fe52 	bl	800ded6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f003 0304 	and.w	r3, r3, #4
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a1b      	ldr	r3, [r3, #32]
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff fe2a 	bl	800de9c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 0308 	and.w	r3, r3, #8
 800e250:	2b00      	cmp	r3, #0
 800e252:	d004      	beq.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff fe1f 	bl	800de9c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e266:	2b00      	cmp	r3, #0
 800e268:	d022      	beq.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e26e:	4618      	mov	r0, r3
 800e270:	f7ff fe8d 	bl	800df8e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e278:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e27c:	d107      	bne.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800e27e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e288:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e28c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e296:	d10b      	bne.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 f8dd 	bl	800e45c <RCCEx_PLLSAI1_ConfigNQ>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e2a6:	7ffb      	ldrb	r3, [r7, #31]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d001      	beq.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800e2ac:	7ffb      	ldrb	r3, [r7, #31]
 800e2ae:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d02b      	beq.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2c4:	d008      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2ce:	d003      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d105      	bne.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7ff fe2a 	bl	800df36 <LL_RCC_SetRNGClockSource>
 800e2e2:	e00a      	b.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x240>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	f7ff fe21 	bl	800df36 <LL_RCC_SetRNGClockSource>
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7ff fe34 	bl	800df62 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800e302:	d107      	bne.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800e304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e30e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d022      	beq.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff fe3d 	bl	800dfa4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e32e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e332:	d107      	bne.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e33e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e342:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e34c:	d10b      	bne.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3304      	adds	r3, #4
 800e352:	4618      	mov	r0, r3
 800e354:	f000 f8dd 	bl	800e512 <RCCEx_PLLSAI1_ConfigNR>
 800e358:	4603      	mov	r3, r0
 800e35a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e35c:	7ffb      	ldrb	r3, [r7, #31]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800e362:	7ffb      	ldrb	r3, [r7, #31]
 800e364:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d004      	beq.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e376:	4618      	mov	r0, r3
 800e378:	f7ff fd26 	bl	800ddc8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7ff fd45 	bl	800de1c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff fd2c 	bl	800ddf4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800e39c:	7fbb      	ldrb	r3, [r7, #30]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3720      	adds	r7, #32
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e3b2:	f7ff fe61 	bl	800e078 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e3b6:	f7fa f865 	bl	8008484 <HAL_GetTick>
 800e3ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e3bc:	e009      	b.n	800e3d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e3be:	f7fa f861 	bl	8008484 <HAL_GetTick>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	2b02      	cmp	r3, #2
 800e3ca:	d902      	bls.n	800e3d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	73fb      	strb	r3, [r7, #15]
      break;
 800e3d0:	e004      	b.n	800e3dc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e3d2:	f7ff fe60 	bl	800e096 <LL_RCC_PLLSAI1_IsReady>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1f0      	bne.n	800e3be <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d137      	bne.n	800e452 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e3e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	021b      	lsls	r3, r3, #8
 800e3f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800e3fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e40c:	4313      	orrs	r3, r2
 800e40e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e410:	f7ff fe23 	bl	800e05a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e414:	f7fa f836 	bl	8008484 <HAL_GetTick>
 800e418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e41a:	e009      	b.n	800e430 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e41c:	f7fa f832 	bl	8008484 <HAL_GetTick>
 800e420:	4602      	mov	r2, r0
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	2b02      	cmp	r3, #2
 800e428:	d902      	bls.n	800e430 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800e42a:	2303      	movs	r3, #3
 800e42c:	73fb      	strb	r3, [r7, #15]
        break;
 800e42e:	e004      	b.n	800e43a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e430:	f7ff fe31 	bl	800e096 <LL_RCC_PLLSAI1_IsReady>
 800e434:	4603      	mov	r3, r0
 800e436:	2b01      	cmp	r3, #1
 800e438:	d1f0      	bne.n	800e41c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d108      	bne.n	800e452 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e444:	691a      	ldr	r2, [r3, #16]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e44e:	4313      	orrs	r3, r2
 800e450:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e452:	7bfb      	ldrb	r3, [r7, #15]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e468:	f7ff fe06 	bl	800e078 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e46c:	f7fa f80a 	bl	8008484 <HAL_GetTick>
 800e470:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e472:	e009      	b.n	800e488 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e474:	f7fa f806 	bl	8008484 <HAL_GetTick>
 800e478:	4602      	mov	r2, r0
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d902      	bls.n	800e488 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800e482:	2303      	movs	r3, #3
 800e484:	73fb      	strb	r3, [r7, #15]
      break;
 800e486:	e004      	b.n	800e492 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e488:	f7ff fe05 	bl	800e096 <LL_RCC_PLLSAI1_IsReady>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1f0      	bne.n	800e474 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800e492:	7bfb      	ldrb	r3, [r7, #15]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d137      	bne.n	800e508 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	021b      	lsls	r3, r3, #8
 800e4a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800e4b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e4c6:	f7ff fdc8 	bl	800e05a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4ca:	f7f9 ffdb 	bl	8008484 <HAL_GetTick>
 800e4ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e4d0:	e009      	b.n	800e4e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e4d2:	f7f9 ffd7 	bl	8008484 <HAL_GetTick>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d902      	bls.n	800e4e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	73fb      	strb	r3, [r7, #15]
        break;
 800e4e4:	e004      	b.n	800e4f0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e4e6:	f7ff fdd6 	bl	800e096 <LL_RCC_PLLSAI1_IsReady>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d1f0      	bne.n	800e4d2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d108      	bne.n	800e508 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e4f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4fa:	691a      	ldr	r2, [r3, #16]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e504:	4313      	orrs	r3, r2
 800e506:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e508:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b084      	sub	sp, #16
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e51e:	f7ff fdab 	bl	800e078 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e522:	f7f9 ffaf 	bl	8008484 <HAL_GetTick>
 800e526:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e528:	e009      	b.n	800e53e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e52a:	f7f9 ffab 	bl	8008484 <HAL_GetTick>
 800e52e:	4602      	mov	r2, r0
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	2b02      	cmp	r3, #2
 800e536:	d902      	bls.n	800e53e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800e538:	2303      	movs	r3, #3
 800e53a:	73fb      	strb	r3, [r7, #15]
      break;
 800e53c:	e004      	b.n	800e548 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e53e:	f7ff fdaa 	bl	800e096 <LL_RCC_PLLSAI1_IsReady>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1f0      	bne.n	800e52a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800e548:	7bfb      	ldrb	r3, [r7, #15]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d137      	bne.n	800e5be <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e54e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	021b      	lsls	r3, r3, #8
 800e55e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e562:	4313      	orrs	r3, r2
 800e564:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800e566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e578:	4313      	orrs	r3, r2
 800e57a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e57c:	f7ff fd6d 	bl	800e05a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e580:	f7f9 ff80 	bl	8008484 <HAL_GetTick>
 800e584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e586:	e009      	b.n	800e59c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e588:	f7f9 ff7c 	bl	8008484 <HAL_GetTick>
 800e58c:	4602      	mov	r2, r0
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	2b02      	cmp	r3, #2
 800e594:	d902      	bls.n	800e59c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800e596:	2303      	movs	r3, #3
 800e598:	73fb      	strb	r3, [r7, #15]
        break;
 800e59a:	e004      	b.n	800e5a6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e59c:	f7ff fd7b 	bl	800e096 <LL_RCC_PLLSAI1_IsReady>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d1f0      	bne.n	800e588 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d108      	bne.n	800e5be <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e5ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5b0:	691a      	ldr	r2, [r3, #16]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e049      	b.n	800e66e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d106      	bne.n	800e5f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7f9 fcf6 	bl	8007fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3304      	adds	r3, #4
 800e604:	4619      	mov	r1, r3
 800e606:	4610      	mov	r0, r2
 800e608:	f000 fa7c 	bl	800eb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2201      	movs	r2, #1
 800e610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2201      	movs	r2, #1
 800e620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2201      	movs	r2, #1
 800e628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2201      	movs	r2, #1
 800e660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
	...

0800e678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d001      	beq.n	800e690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	e036      	b.n	800e6fe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2202      	movs	r2, #2
 800e694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68da      	ldr	r2, [r3, #12]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f042 0201 	orr.w	r2, r2, #1
 800e6a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a17      	ldr	r2, [pc, #92]	@ (800e70c <HAL_TIM_Base_Start_IT+0x94>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d004      	beq.n	800e6bc <HAL_TIM_Base_Start_IT+0x44>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ba:	d115      	bne.n	800e6e8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	689a      	ldr	r2, [r3, #8]
 800e6c2:	4b13      	ldr	r3, [pc, #76]	@ (800e710 <HAL_TIM_Base_Start_IT+0x98>)
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2b06      	cmp	r3, #6
 800e6cc:	d015      	beq.n	800e6fa <HAL_TIM_Base_Start_IT+0x82>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6d4:	d011      	beq.n	800e6fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f042 0201 	orr.w	r2, r2, #1
 800e6e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e6:	e008      	b.n	800e6fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f042 0201 	orr.w	r2, r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	e000      	b.n	800e6fc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3714      	adds	r7, #20
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	40012c00 	.word	0x40012c00
 800e710:	00010007 	.word	0x00010007

0800e714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	2b00      	cmp	r3, #0
 800e734:	d020      	beq.n	800e778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f003 0302 	and.w	r3, r3, #2
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d01b      	beq.n	800e778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f06f 0202 	mvn.w	r2, #2
 800e748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2201      	movs	r2, #1
 800e74e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	f003 0303 	and.w	r3, r3, #3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d003      	beq.n	800e766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f9b2 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e764:	e005      	b.n	800e772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f9a4 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f9b5 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	f003 0304 	and.w	r3, r3, #4
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d020      	beq.n	800e7c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d01b      	beq.n	800e7c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f06f 0204 	mvn.w	r2, #4
 800e794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2202      	movs	r2, #2
 800e79a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	699b      	ldr	r3, [r3, #24]
 800e7a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d003      	beq.n	800e7b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f98c 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e7b0:	e005      	b.n	800e7be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 f97e 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f98f 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	f003 0308 	and.w	r3, r3, #8
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d020      	beq.n	800e810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f003 0308 	and.w	r3, r3, #8
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d01b      	beq.n	800e810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f06f 0208 	mvn.w	r2, #8
 800e7e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2204      	movs	r2, #4
 800e7e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	69db      	ldr	r3, [r3, #28]
 800e7ee:	f003 0303 	and.w	r3, r3, #3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f966 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e7fc:	e005      	b.n	800e80a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 f958 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f969 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	f003 0310 	and.w	r3, r3, #16
 800e816:	2b00      	cmp	r3, #0
 800e818:	d020      	beq.n	800e85c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f003 0310 	and.w	r3, r3, #16
 800e820:	2b00      	cmp	r3, #0
 800e822:	d01b      	beq.n	800e85c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f06f 0210 	mvn.w	r2, #16
 800e82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2208      	movs	r2, #8
 800e832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d003      	beq.n	800e84a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 f940 	bl	800eac8 <HAL_TIM_IC_CaptureCallback>
 800e848:	e005      	b.n	800e856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f932 	bl	800eab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f943 	bl	800eadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00c      	beq.n	800e880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f003 0301 	and.w	r3, r3, #1
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d007      	beq.n	800e880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f06f 0201 	mvn.w	r2, #1
 800e878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7f9 fa82 	bl	8007d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e886:	2b00      	cmp	r3, #0
 800e888:	d104      	bne.n	800e894 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00c      	beq.n	800e8ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 fa9b 	bl	800ede4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00c      	beq.n	800e8d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d007      	beq.n	800e8d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fa93 	bl	800edf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00c      	beq.n	800e8f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d007      	beq.n	800e8f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e8ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f8fd 	bl	800eaf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	f003 0320 	and.w	r3, r3, #32
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00c      	beq.n	800e91a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f003 0320 	and.w	r3, r3, #32
 800e906:	2b00      	cmp	r3, #0
 800e908:	d007      	beq.n	800e91a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f06f 0220 	mvn.w	r2, #32
 800e912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fa5b 	bl	800edd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e91a:	bf00      	nop
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b084      	sub	sp, #16
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e92c:	2300      	movs	r3, #0
 800e92e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e936:	2b01      	cmp	r3, #1
 800e938:	d101      	bne.n	800e93e <HAL_TIM_ConfigClockSource+0x1c>
 800e93a:	2302      	movs	r3, #2
 800e93c:	e0b6      	b.n	800eaac <HAL_TIM_ConfigClockSource+0x18a>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2201      	movs	r2, #1
 800e942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2202      	movs	r2, #2
 800e94a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e95c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e960:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e968:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e97a:	d03e      	beq.n	800e9fa <HAL_TIM_ConfigClockSource+0xd8>
 800e97c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e980:	f200 8087 	bhi.w	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e988:	f000 8086 	beq.w	800ea98 <HAL_TIM_ConfigClockSource+0x176>
 800e98c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e990:	d87f      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e992:	2b70      	cmp	r3, #112	@ 0x70
 800e994:	d01a      	beq.n	800e9cc <HAL_TIM_ConfigClockSource+0xaa>
 800e996:	2b70      	cmp	r3, #112	@ 0x70
 800e998:	d87b      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e99a:	2b60      	cmp	r3, #96	@ 0x60
 800e99c:	d050      	beq.n	800ea40 <HAL_TIM_ConfigClockSource+0x11e>
 800e99e:	2b60      	cmp	r3, #96	@ 0x60
 800e9a0:	d877      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e9a2:	2b50      	cmp	r3, #80	@ 0x50
 800e9a4:	d03c      	beq.n	800ea20 <HAL_TIM_ConfigClockSource+0xfe>
 800e9a6:	2b50      	cmp	r3, #80	@ 0x50
 800e9a8:	d873      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e9aa:	2b40      	cmp	r3, #64	@ 0x40
 800e9ac:	d058      	beq.n	800ea60 <HAL_TIM_ConfigClockSource+0x13e>
 800e9ae:	2b40      	cmp	r3, #64	@ 0x40
 800e9b0:	d86f      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e9b2:	2b30      	cmp	r3, #48	@ 0x30
 800e9b4:	d064      	beq.n	800ea80 <HAL_TIM_ConfigClockSource+0x15e>
 800e9b6:	2b30      	cmp	r3, #48	@ 0x30
 800e9b8:	d86b      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e9ba:	2b20      	cmp	r3, #32
 800e9bc:	d060      	beq.n	800ea80 <HAL_TIM_ConfigClockSource+0x15e>
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d867      	bhi.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d05c      	beq.n	800ea80 <HAL_TIM_ConfigClockSource+0x15e>
 800e9c6:	2b10      	cmp	r3, #16
 800e9c8:	d05a      	beq.n	800ea80 <HAL_TIM_ConfigClockSource+0x15e>
 800e9ca:	e062      	b.n	800ea92 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e9dc:	f000 f978 	bl	800ecd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e9ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	609a      	str	r2, [r3, #8]
      break;
 800e9f8:	e04f      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea0a:	f000 f961 	bl	800ecd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689a      	ldr	r2, [r3, #8]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea1c:	609a      	str	r2, [r3, #8]
      break;
 800ea1e:	e03c      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	f000 f8d3 	bl	800ebd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2150      	movs	r1, #80	@ 0x50
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f000 f92c 	bl	800ec96 <TIM_ITRx_SetConfig>
      break;
 800ea3e:	e02c      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	f000 f8f2 	bl	800ec36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2160      	movs	r1, #96	@ 0x60
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 f91c 	bl	800ec96 <TIM_ITRx_SetConfig>
      break;
 800ea5e:	e01c      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	f000 f8b3 	bl	800ebd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2140      	movs	r1, #64	@ 0x40
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 f90c 	bl	800ec96 <TIM_ITRx_SetConfig>
      break;
 800ea7e:	e00c      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f000 f903 	bl	800ec96 <TIM_ITRx_SetConfig>
      break;
 800ea90:	e003      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	73fb      	strb	r3, [r7, #15]
      break;
 800ea96:	e000      	b.n	800ea9a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ea98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eaf8:	bf00      	nop
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a2d      	ldr	r2, [pc, #180]	@ (800ebcc <TIM_Base_SetConfig+0xc8>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d003      	beq.n	800eb24 <TIM_Base_SetConfig+0x20>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb22:	d108      	bne.n	800eb36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4a24      	ldr	r2, [pc, #144]	@ (800ebcc <TIM_Base_SetConfig+0xc8>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d00b      	beq.n	800eb56 <TIM_Base_SetConfig+0x52>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb44:	d007      	beq.n	800eb56 <TIM_Base_SetConfig+0x52>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a21      	ldr	r2, [pc, #132]	@ (800ebd0 <TIM_Base_SetConfig+0xcc>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d003      	beq.n	800eb56 <TIM_Base_SetConfig+0x52>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a20      	ldr	r2, [pc, #128]	@ (800ebd4 <TIM_Base_SetConfig+0xd0>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d108      	bne.n	800eb68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	4313      	orrs	r3, r2
 800eb74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	689a      	ldr	r2, [r3, #8]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a10      	ldr	r2, [pc, #64]	@ (800ebcc <TIM_Base_SetConfig+0xc8>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d007      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a0f      	ldr	r2, [pc, #60]	@ (800ebd0 <TIM_Base_SetConfig+0xcc>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d003      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a0e      	ldr	r2, [pc, #56]	@ (800ebd4 <TIM_Base_SetConfig+0xd0>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d103      	bne.n	800eba6 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	691a      	ldr	r2, [r3, #16]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f043 0204 	orr.w	r2, r3, #4
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	601a      	str	r2, [r3, #0]
}
 800ebbe:	bf00      	nop
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	40012c00 	.word	0x40012c00
 800ebd0:	40014400 	.word	0x40014400
 800ebd4:	40014800 	.word	0x40014800

0800ebd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6a1b      	ldr	r3, [r3, #32]
 800ebe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	f023 0201 	bic.w	r2, r3, #1
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ec02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	011b      	lsls	r3, r3, #4
 800ec08:	693a      	ldr	r2, [r7, #16]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f023 030a 	bic.w	r3, r3, #10
 800ec14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	693a      	ldr	r2, [r7, #16]
 800ec22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	697a      	ldr	r2, [r7, #20]
 800ec28:	621a      	str	r2, [r3, #32]
}
 800ec2a:	bf00      	nop
 800ec2c:	371c      	adds	r7, #28
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b087      	sub	sp, #28
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	60f8      	str	r0, [r7, #12]
 800ec3e:	60b9      	str	r1, [r7, #8]
 800ec40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6a1b      	ldr	r3, [r3, #32]
 800ec4c:	f023 0210 	bic.w	r2, r3, #16
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ec60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	031b      	lsls	r3, r3, #12
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ec72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	011b      	lsls	r3, r3, #4
 800ec78:	697a      	ldr	r2, [r7, #20]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	621a      	str	r2, [r3, #32]
}
 800ec8a:	bf00      	nop
 800ec8c:	371c      	adds	r7, #28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b085      	sub	sp, #20
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ecac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	f043 0307 	orr.w	r3, r3, #7
 800ecbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	609a      	str	r2, [r3, #8]
}
 800ecc4:	bf00      	nop
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ecea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	021a      	lsls	r2, r3, #8
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	431a      	orrs	r2, r3
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	609a      	str	r2, [r3, #8]
}
 800ed04:	bf00      	nop
 800ed06:	371c      	adds	r7, #28
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d101      	bne.n	800ed28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed24:	2302      	movs	r3, #2
 800ed26:	e04a      	b.n	800edbe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2202      	movs	r2, #2
 800ed34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a1f      	ldr	r2, [pc, #124]	@ (800edcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d108      	bne.n	800ed64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ed58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a12      	ldr	r2, [pc, #72]	@ (800edcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d004      	beq.n	800ed92 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed90:	d10c      	bne.n	800edac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	4313      	orrs	r3, r2
 800eda2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3714      	adds	r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
 800edca:	bf00      	nop
 800edcc:	40012c00 	.word	0x40012c00

0800edd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ee1c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ee20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3714      	adds	r7, #20
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ee3a:	b480      	push	{r7}
 800ee3c:	b085      	sub	sp, #20
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ee42:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ee46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	43db      	mvns	r3, r3
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	4013      	ands	r3, r2
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ee62:	2300      	movs	r3, #0
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3714      	adds	r7, #20
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	1d3b      	adds	r3, r7, #4
 800ee7a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3714      	adds	r7, #20
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b0a7      	sub	sp, #156	@ 0x9c
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800eece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eed2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	78db      	ldrb	r3, [r3, #3]
 800eeda:	2b03      	cmp	r3, #3
 800eedc:	d81f      	bhi.n	800ef1e <USB_ActivateEndpoint+0x72>
 800eede:	a201      	add	r2, pc, #4	@ (adr r2, 800eee4 <USB_ActivateEndpoint+0x38>)
 800eee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee4:	0800eef5 	.word	0x0800eef5
 800eee8:	0800ef11 	.word	0x0800ef11
 800eeec:	0800ef27 	.word	0x0800ef27
 800eef0:	0800ef03 	.word	0x0800ef03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800eef4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800eef8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eefc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ef00:	e012      	b.n	800ef28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ef02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ef06:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ef0a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ef0e:	e00b      	b.n	800ef28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ef10:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ef14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ef18:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800ef1c:	e004      	b.n	800ef28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800ef24:	e000      	b.n	800ef28 <USB_ActivateEndpoint+0x7c>
      break;
 800ef26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	441a      	add	r2, r3
 800ef32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ef36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	4413      	add	r3, r2
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	b21b      	sxth	r3, r3
 800ef5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef62:	b21a      	sxth	r2, r3
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	b21b      	sxth	r3, r3
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	b21b      	sxth	r3, r3
 800ef6e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	441a      	add	r2, r3
 800ef7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ef80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ef84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ef88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	7b1b      	ldrb	r3, [r3, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f040 8180 	bne.w	800f29e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	785b      	ldrb	r3, [r3, #1]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 8084 	beq.w	800f0b0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	61bb      	str	r3, [r7, #24]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	461a      	mov	r2, r3
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	4413      	add	r3, r2
 800efba:	61bb      	str	r3, [r7, #24]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	00da      	lsls	r2, r3, #3
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	4413      	add	r3, r2
 800efc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800efca:	617b      	str	r3, [r7, #20]
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	88db      	ldrh	r3, [r3, #6]
 800efd0:	085b      	lsrs	r3, r3, #1
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	005b      	lsls	r3, r3, #1
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	827b      	strh	r3, [r7, #18]
 800efea:	8a7b      	ldrh	r3, [r7, #18]
 800efec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d01b      	beq.n	800f02c <USB_ActivateEndpoint+0x180>
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	4413      	add	r3, r2
 800effe:	881b      	ldrh	r3, [r3, #0]
 800f000:	b29b      	uxth	r3, r3
 800f002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f00a:	823b      	strh	r3, [r7, #16]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	441a      	add	r2, r3
 800f016:	8a3b      	ldrh	r3, [r7, #16]
 800f018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f01c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f028:	b29b      	uxth	r3, r3
 800f02a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	78db      	ldrb	r3, [r3, #3]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d020      	beq.n	800f076 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	4413      	add	r3, r2
 800f03e:	881b      	ldrh	r3, [r3, #0]
 800f040:	b29b      	uxth	r3, r3
 800f042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f04a:	81bb      	strh	r3, [r7, #12]
 800f04c:	89bb      	ldrh	r3, [r7, #12]
 800f04e:	f083 0320 	eor.w	r3, r3, #32
 800f052:	81bb      	strh	r3, [r7, #12]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	441a      	add	r2, r3
 800f05e:	89bb      	ldrh	r3, [r7, #12]
 800f060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f070:	b29b      	uxth	r3, r3
 800f072:	8013      	strh	r3, [r2, #0]
 800f074:	e3f9      	b.n	800f86a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4413      	add	r3, r2
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	b29b      	uxth	r3, r3
 800f084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f08c:	81fb      	strh	r3, [r7, #14]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	441a      	add	r2, r3
 800f098:	89fb      	ldrh	r3, [r7, #14]
 800f09a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f09e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f0a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	8013      	strh	r3, [r2, #0]
 800f0ae:	e3dc      	b.n	800f86a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	461a      	mov	r2, r3
 800f0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c0:	4413      	add	r3, r2
 800f0c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	00da      	lsls	r2, r3, #3
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0cc:	4413      	add	r3, r2
 800f0ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800f0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	88db      	ldrh	r3, [r3, #6]
 800f0d8:	085b      	lsrs	r3, r3, #1
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	005b      	lsls	r3, r3, #1
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f4:	4413      	add	r3, r2
 800f0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	00da      	lsls	r2, r3, #3
 800f0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f100:	4413      	add	r3, r2
 800f102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f106:	627b      	str	r3, [r7, #36]	@ 0x24
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f112:	b29a      	uxth	r2, r3
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f116:	801a      	strh	r2, [r3, #0]
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	691b      	ldr	r3, [r3, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10a      	bne.n	800f136 <USB_ActivateEndpoint+0x28a>
 800f120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	b29b      	uxth	r3, r3
 800f126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f12a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f12e:	b29a      	uxth	r2, r3
 800f130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f132:	801a      	strh	r2, [r3, #0]
 800f134:	e041      	b.n	800f1ba <USB_ActivateEndpoint+0x30e>
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f13c:	d81c      	bhi.n	800f178 <USB_ActivateEndpoint+0x2cc>
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	085b      	lsrs	r3, r3, #1
 800f144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	f003 0301 	and.w	r3, r3, #1
 800f150:	2b00      	cmp	r3, #0
 800f152:	d004      	beq.n	800f15e <USB_ActivateEndpoint+0x2b2>
 800f154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f158:	3301      	adds	r3, #1
 800f15a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	b29a      	uxth	r2, r3
 800f164:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f168:	b29b      	uxth	r3, r3
 800f16a:	029b      	lsls	r3, r3, #10
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	4313      	orrs	r3, r2
 800f170:	b29a      	uxth	r2, r3
 800f172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f174:	801a      	strh	r2, [r3, #0]
 800f176:	e020      	b.n	800f1ba <USB_ActivateEndpoint+0x30e>
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	095b      	lsrs	r3, r3, #5
 800f17e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	f003 031f 	and.w	r3, r3, #31
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d104      	bne.n	800f198 <USB_ActivateEndpoint+0x2ec>
 800f18e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f192:	3b01      	subs	r3, #1
 800f194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19a:	881b      	ldrh	r3, [r3, #0]
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	029b      	lsls	r3, r3, #10
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	4413      	add	r3, r2
 800f1c4:	881b      	ldrh	r3, [r3, #0]
 800f1c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f1c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d01b      	beq.n	800f20a <USB_ActivateEndpoint+0x35e>
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	4413      	add	r3, r2
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f1e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1e8:	843b      	strh	r3, [r7, #32]
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	441a      	add	r2, r3
 800f1f4:	8c3b      	ldrh	r3, [r7, #32]
 800f1f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f1fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f1fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f206:	b29b      	uxth	r3, r3
 800f208:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d124      	bne.n	800f25c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f228:	83bb      	strh	r3, [r7, #28]
 800f22a:	8bbb      	ldrh	r3, [r7, #28]
 800f22c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f230:	83bb      	strh	r3, [r7, #28]
 800f232:	8bbb      	ldrh	r3, [r7, #28]
 800f234:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f238:	83bb      	strh	r3, [r7, #28]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	441a      	add	r2, r3
 800f244:	8bbb      	ldrh	r3, [r7, #28]
 800f246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f24a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f24e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f256:	b29b      	uxth	r3, r3
 800f258:	8013      	strh	r3, [r2, #0]
 800f25a:	e306      	b.n	800f86a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f26e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f272:	83fb      	strh	r3, [r7, #30]
 800f274:	8bfb      	ldrh	r3, [r7, #30]
 800f276:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f27a:	83fb      	strh	r3, [r7, #30]
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	441a      	add	r2, r3
 800f286:	8bfb      	ldrh	r3, [r7, #30]
 800f288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f28c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f298:	b29b      	uxth	r3, r3
 800f29a:	8013      	strh	r3, [r2, #0]
 800f29c:	e2e5      	b.n	800f86a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	78db      	ldrb	r3, [r3, #3]
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d11e      	bne.n	800f2e4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2bc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	441a      	add	r2, r3
 800f2ca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f2ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	8013      	strh	r3, [r2, #0]
 800f2e2:	e01d      	b.n	800f320 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	881b      	ldrh	r3, [r3, #0]
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f2f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2fa:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	441a      	add	r2, r3
 800f308:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800f30c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	461a      	mov	r2, r3
 800f32e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f330:	4413      	add	r3, r2
 800f332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	00da      	lsls	r2, r3, #3
 800f33a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f33c:	4413      	add	r3, r2
 800f33e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f342:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	891b      	ldrh	r3, [r3, #8]
 800f348:	085b      	lsrs	r3, r3, #1
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	005b      	lsls	r3, r3, #1
 800f34e:	b29a      	uxth	r2, r3
 800f350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f352:	801a      	strh	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	677b      	str	r3, [r7, #116]	@ 0x74
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f35e:	b29b      	uxth	r3, r3
 800f360:	461a      	mov	r2, r3
 800f362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f364:	4413      	add	r3, r2
 800f366:	677b      	str	r3, [r7, #116]	@ 0x74
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	00da      	lsls	r2, r3, #3
 800f36e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f370:	4413      	add	r3, r2
 800f372:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800f376:	673b      	str	r3, [r7, #112]	@ 0x70
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	895b      	ldrh	r3, [r3, #10]
 800f37c:	085b      	lsrs	r3, r3, #1
 800f37e:	b29b      	uxth	r3, r3
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	b29a      	uxth	r2, r3
 800f384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f386:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	785b      	ldrb	r3, [r3, #1]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f040 81af 	bne.w	800f6f0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	4413      	add	r3, r2
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800f3a2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800f3a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d01d      	beq.n	800f3ea <USB_ActivateEndpoint+0x53e>
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	4413      	add	r3, r2
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3c4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	441a      	add	r2, r3
 800f3d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800f3d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	881b      	ldrh	r3, [r3, #0]
 800f3f6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800f3fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800f3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f402:	2b00      	cmp	r3, #0
 800f404:	d01d      	beq.n	800f442 <USB_ActivateEndpoint+0x596>
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	b29b      	uxth	r3, r3
 800f414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f41c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	441a      	add	r2, r3
 800f42a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800f42e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f43a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f43e:	b29b      	uxth	r3, r3
 800f440:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	785b      	ldrb	r3, [r3, #1]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d16b      	bne.n	800f522 <USB_ActivateEndpoint+0x676>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f454:	b29b      	uxth	r3, r3
 800f456:	461a      	mov	r2, r3
 800f458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f45a:	4413      	add	r3, r2
 800f45c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	00da      	lsls	r2, r3, #3
 800f464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f466:	4413      	add	r3, r2
 800f468:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f46e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	b29b      	uxth	r3, r3
 800f474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f478:	b29a      	uxth	r2, r3
 800f47a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f47c:	801a      	strh	r2, [r3, #0]
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	691b      	ldr	r3, [r3, #16]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10a      	bne.n	800f49c <USB_ActivateEndpoint+0x5f0>
 800f486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f494:	b29a      	uxth	r2, r3
 800f496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f498:	801a      	strh	r2, [r3, #0]
 800f49a:	e05d      	b.n	800f558 <USB_ActivateEndpoint+0x6ac>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	691b      	ldr	r3, [r3, #16]
 800f4a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f4a2:	d81c      	bhi.n	800f4de <USB_ActivateEndpoint+0x632>
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	085b      	lsrs	r3, r3, #1
 800f4aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d004      	beq.n	800f4c4 <USB_ActivateEndpoint+0x618>
 800f4ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4be:	3301      	adds	r3, #1
 800f4c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f4c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	029b      	lsls	r3, r3, #10
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4da:	801a      	strh	r2, [r3, #0]
 800f4dc:	e03c      	b.n	800f558 <USB_ActivateEndpoint+0x6ac>
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	095b      	lsrs	r3, r3, #5
 800f4e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	f003 031f 	and.w	r3, r3, #31
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d104      	bne.n	800f4fe <USB_ActivateEndpoint+0x652>
 800f4f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f4fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f500:	881b      	ldrh	r3, [r3, #0]
 800f502:	b29a      	uxth	r2, r3
 800f504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f508:	b29b      	uxth	r3, r3
 800f50a:	029b      	lsls	r3, r3, #10
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	4313      	orrs	r3, r2
 800f510:	b29b      	uxth	r3, r3
 800f512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f51e:	801a      	strh	r2, [r3, #0]
 800f520:	e01a      	b.n	800f558 <USB_ActivateEndpoint+0x6ac>
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	785b      	ldrb	r3, [r3, #1]
 800f526:	2b01      	cmp	r3, #1
 800f528:	d116      	bne.n	800f558 <USB_ActivateEndpoint+0x6ac>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f534:	b29b      	uxth	r3, r3
 800f536:	461a      	mov	r2, r3
 800f538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f53a:	4413      	add	r3, r2
 800f53c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	00da      	lsls	r2, r3, #3
 800f544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f546:	4413      	add	r3, r2
 800f548:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f54c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	b29a      	uxth	r2, r3
 800f554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f556:	801a      	strh	r2, [r3, #0]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	785b      	ldrb	r3, [r3, #1]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d16b      	bne.n	800f63c <USB_ActivateEndpoint+0x790>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f56e:	b29b      	uxth	r3, r3
 800f570:	461a      	mov	r2, r3
 800f572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f574:	4413      	add	r3, r2
 800f576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	00da      	lsls	r2, r3, #3
 800f57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f580:	4413      	add	r3, r2
 800f582:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f586:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f592:	b29a      	uxth	r2, r3
 800f594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f596:	801a      	strh	r2, [r3, #0]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10a      	bne.n	800f5b6 <USB_ActivateEndpoint+0x70a>
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b2:	801a      	strh	r2, [r3, #0]
 800f5b4:	e05b      	b.n	800f66e <USB_ActivateEndpoint+0x7c2>
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800f5bc:	d81c      	bhi.n	800f5f8 <USB_ActivateEndpoint+0x74c>
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	085b      	lsrs	r3, r3, #1
 800f5c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d004      	beq.n	800f5de <USB_ActivateEndpoint+0x732>
 800f5d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f5d8:	3301      	adds	r3, #1
 800f5da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	029b      	lsls	r3, r3, #10
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f4:	801a      	strh	r2, [r3, #0]
 800f5f6:	e03a      	b.n	800f66e <USB_ActivateEndpoint+0x7c2>
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	691b      	ldr	r3, [r3, #16]
 800f5fc:	095b      	lsrs	r3, r3, #5
 800f5fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	f003 031f 	and.w	r3, r3, #31
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d104      	bne.n	800f618 <USB_ActivateEndpoint+0x76c>
 800f60e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f612:	3b01      	subs	r3, #1
 800f614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f622:	b29b      	uxth	r3, r3
 800f624:	029b      	lsls	r3, r3, #10
 800f626:	b29b      	uxth	r3, r3
 800f628:	4313      	orrs	r3, r2
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f634:	b29a      	uxth	r2, r3
 800f636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f638:	801a      	strh	r2, [r3, #0]
 800f63a:	e018      	b.n	800f66e <USB_ActivateEndpoint+0x7c2>
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	785b      	ldrb	r3, [r3, #1]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d114      	bne.n	800f66e <USB_ActivateEndpoint+0x7c2>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	461a      	mov	r2, r3
 800f64e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f650:	4413      	add	r3, r2
 800f652:	647b      	str	r3, [r7, #68]	@ 0x44
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	00da      	lsls	r2, r3, #3
 800f65a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f65c:	4413      	add	r3, r2
 800f65e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f662:	643b      	str	r3, [r7, #64]	@ 0x40
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	691b      	ldr	r3, [r3, #16]
 800f668:	b29a      	uxth	r2, r3
 800f66a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f66c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f684:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f686:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f688:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f68c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f68e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f690:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f694:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	441a      	add	r2, r3
 800f6a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f6a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f6a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f6aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4413      	add	r3, r2
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	441a      	add	r2, r3
 800f6d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f6da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f6de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f6e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	8013      	strh	r3, [r2, #0]
 800f6ee:	e0bc      	b.n	800f86a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4413      	add	r3, r2
 800f6fa:	881b      	ldrh	r3, [r3, #0]
 800f6fc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800f700:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d01d      	beq.n	800f748 <USB_ActivateEndpoint+0x89c>
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	4413      	add	r3, r2
 800f716:	881b      	ldrh	r3, [r3, #0]
 800f718:	b29b      	uxth	r3, r3
 800f71a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f71e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f722:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	441a      	add	r2, r3
 800f730:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f73c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f744:	b29b      	uxth	r3, r3
 800f746:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800f758:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800f75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f760:	2b00      	cmp	r3, #0
 800f762:	d01d      	beq.n	800f7a0 <USB_ActivateEndpoint+0x8f4>
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	4413      	add	r3, r2
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	b29b      	uxth	r3, r3
 800f772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f77a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	441a      	add	r2, r3
 800f788:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800f78c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f798:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	78db      	ldrb	r3, [r3, #3]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d024      	beq.n	800f7f2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	4413      	add	r3, r2
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f7ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f7c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f7c6:	f083 0320 	eor.w	r3, r3, #32
 800f7ca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	441a      	add	r2, r3
 800f7d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f7dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f7e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f7e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f7e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	8013      	strh	r3, [r2, #0]
 800f7f0:	e01d      	b.n	800f82e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f808:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	441a      	add	r2, r3
 800f816:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f81a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f81e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	881b      	ldrh	r3, [r3, #0]
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f844:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	441a      	add	r2, r3
 800f852:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800f856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f85a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f866:	b29b      	uxth	r3, r3
 800f868:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f86a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800f86e:	4618      	mov	r0, r3
 800f870:	379c      	adds	r7, #156	@ 0x9c
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop

0800f87c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b08d      	sub	sp, #52	@ 0x34
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	7b1b      	ldrb	r3, [r3, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f040 808e 	bne.w	800f9ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	785b      	ldrb	r3, [r3, #1]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d044      	beq.n	800f922 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	81bb      	strh	r3, [r7, #12]
 800f8a6:	89bb      	ldrh	r3, [r7, #12]
 800f8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d01b      	beq.n	800f8e8 <USB_DeactivateEndpoint+0x6c>
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8c6:	817b      	strh	r3, [r7, #10]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	441a      	add	r2, r3
 800f8d2:	897b      	ldrh	r3, [r7, #10]
 800f8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f8dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8fe:	813b      	strh	r3, [r7, #8]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	441a      	add	r2, r3
 800f90a:	893b      	ldrh	r3, [r7, #8]
 800f90c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	8013      	strh	r3, [r2, #0]
 800f920:	e192      	b.n	800fc48 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4413      	add	r3, r2
 800f92c:	881b      	ldrh	r3, [r3, #0]
 800f92e:	827b      	strh	r3, [r7, #18]
 800f930:	8a7b      	ldrh	r3, [r7, #18]
 800f932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f936:	2b00      	cmp	r3, #0
 800f938:	d01b      	beq.n	800f972 <USB_DeactivateEndpoint+0xf6>
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	009b      	lsls	r3, r3, #2
 800f942:	4413      	add	r3, r2
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	b29b      	uxth	r3, r3
 800f948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f94c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f950:	823b      	strh	r3, [r7, #16]
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	441a      	add	r2, r3
 800f95c:	8a3b      	ldrh	r3, [r7, #16]
 800f95e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f96e:	b29b      	uxth	r3, r3
 800f970:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	4413      	add	r3, r2
 800f97c:	881b      	ldrh	r3, [r3, #0]
 800f97e:	b29b      	uxth	r3, r3
 800f980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f988:	81fb      	strh	r3, [r7, #14]
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	009b      	lsls	r3, r3, #2
 800f992:	441a      	add	r2, r3
 800f994:	89fb      	ldrh	r3, [r7, #14]
 800f996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f99a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f99e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	8013      	strh	r3, [r2, #0]
 800f9aa:	e14d      	b.n	800fc48 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	785b      	ldrb	r3, [r3, #1]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	f040 80a5 	bne.w	800fb00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	881b      	ldrh	r3, [r3, #0]
 800f9c2:	843b      	strh	r3, [r7, #32]
 800f9c4:	8c3b      	ldrh	r3, [r7, #32]
 800f9c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d01b      	beq.n	800fa06 <USB_DeactivateEndpoint+0x18a>
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	4413      	add	r3, r2
 800f9d8:	881b      	ldrh	r3, [r3, #0]
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f9e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9e4:	83fb      	strh	r3, [r7, #30]
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	441a      	add	r2, r3
 800f9f0:	8bfb      	ldrh	r3, [r7, #30]
 800f9f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f9f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f9fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4413      	add	r3, r2
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	83bb      	strh	r3, [r7, #28]
 800fa14:	8bbb      	ldrh	r3, [r7, #28]
 800fa16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d01b      	beq.n	800fa56 <USB_DeactivateEndpoint+0x1da>
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	4413      	add	r3, r2
 800fa28:	881b      	ldrh	r3, [r3, #0]
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fa30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa34:	837b      	strh	r3, [r7, #26]
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	441a      	add	r2, r3
 800fa40:	8b7b      	ldrh	r3, [r7, #26]
 800fa42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4413      	add	r3, r2
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fa68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa6c:	833b      	strh	r3, [r7, #24]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	441a      	add	r2, r3
 800fa78:	8b3b      	ldrh	r3, [r7, #24]
 800fa7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800faa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800faa4:	82fb      	strh	r3, [r7, #22]
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	441a      	add	r2, r3
 800fab0:	8afb      	ldrh	r3, [r7, #22]
 800fab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800faba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fadc:	82bb      	strh	r3, [r7, #20]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	441a      	add	r2, r3
 800fae8:	8abb      	ldrh	r3, [r7, #20]
 800faea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800faee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800faf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800faf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	8013      	strh	r3, [r2, #0]
 800fafe:	e0a3      	b.n	800fc48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4413      	add	r3, r2
 800fb0a:	881b      	ldrh	r3, [r3, #0]
 800fb0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fb0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d01b      	beq.n	800fb50 <USB_DeactivateEndpoint+0x2d4>
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4413      	add	r3, r2
 800fb22:	881b      	ldrh	r3, [r3, #0]
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	441a      	add	r2, r3
 800fb3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fb3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fb48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800fb5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fb60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d01b      	beq.n	800fba0 <USB_DeactivateEndpoint+0x324>
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	009b      	lsls	r3, r3, #2
 800fb70:	4413      	add	r3, r2
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	441a      	add	r2, r3
 800fb8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	4413      	add	r3, r2
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fbb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	441a      	add	r2, r3
 800fbc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fbc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fbc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fbcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fbd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4413      	add	r3, r2
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fbea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	441a      	add	r2, r3
 800fbfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	009b      	lsls	r3, r3, #2
 800fc18:	4413      	add	r3, r2
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc26:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	441a      	add	r2, r3
 800fc32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fc34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fc48:	2300      	movs	r3, #0
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3734      	adds	r7, #52	@ 0x34
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b0ac      	sub	sp, #176	@ 0xb0
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	785b      	ldrb	r3, [r3, #1]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	f040 84ca 	bne.w	80105fe <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	699a      	ldr	r2, [r3, #24]
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d904      	bls.n	800fc80 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fc7e:	e003      	b.n	800fc88 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	699b      	ldr	r3, [r3, #24]
 800fc84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	7b1b      	ldrb	r3, [r3, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d122      	bne.n	800fcd6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	6959      	ldr	r1, [r3, #20]
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	88da      	ldrh	r2, [r3, #6]
 800fc98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 febd 	bl	8010a1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	613b      	str	r3, [r7, #16]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	613b      	str	r3, [r7, #16]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	00da      	lsls	r2, r3, #3
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fccc:	b29a      	uxth	r2, r3
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	801a      	strh	r2, [r3, #0]
 800fcd2:	f000 bc6f 	b.w	80105b4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	78db      	ldrb	r3, [r3, #3]
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	f040 831e 	bne.w	801031c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	6a1a      	ldr	r2, [r3, #32]
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	f240 82cf 	bls.w	801028c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4413      	add	r3, r2
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd04:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	441a      	add	r2, r3
 800fd12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800fd16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd1e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800fd22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	6a1a      	ldr	r2, [r3, #32]
 800fd2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd32:	1ad2      	subs	r2, r2, r3
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	4413      	add	r3, r2
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f000 814f 	beq.w	800ffee <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	785b      	ldrb	r3, [r3, #1]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d16b      	bne.n	800fe34 <USB_EPStartXfer+0x1de>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	461a      	mov	r2, r3
 800fd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd6c:	4413      	add	r3, r2
 800fd6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	00da      	lsls	r2, r3, #3
 800fd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd78:	4413      	add	r3, r2
 800fd7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fd7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd82:	881b      	ldrh	r3, [r3, #0]
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8e:	801a      	strh	r2, [r3, #0]
 800fd90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10a      	bne.n	800fdae <USB_EPStartXfer+0x158>
 800fd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fda2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdaa:	801a      	strh	r2, [r3, #0]
 800fdac:	e05b      	b.n	800fe66 <USB_EPStartXfer+0x210>
 800fdae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdb2:	2b3e      	cmp	r3, #62	@ 0x3e
 800fdb4:	d81c      	bhi.n	800fdf0 <USB_EPStartXfer+0x19a>
 800fdb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdba:	085b      	lsrs	r3, r3, #1
 800fdbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fdc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdc4:	f003 0301 	and.w	r3, r3, #1
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d004      	beq.n	800fdd6 <USB_EPStartXfer+0x180>
 800fdcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd8:	881b      	ldrh	r3, [r3, #0]
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	029b      	lsls	r3, r3, #10
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	4313      	orrs	r3, r2
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdec:	801a      	strh	r2, [r3, #0]
 800fdee:	e03a      	b.n	800fe66 <USB_EPStartXfer+0x210>
 800fdf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdf4:	095b      	lsrs	r3, r3, #5
 800fdf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fdfe:	f003 031f 	and.w	r3, r3, #31
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d104      	bne.n	800fe10 <USB_EPStartXfer+0x1ba>
 800fe06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe12:	881b      	ldrh	r3, [r3, #0]
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	029b      	lsls	r3, r3, #10
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	4313      	orrs	r3, r2
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe30:	801a      	strh	r2, [r3, #0]
 800fe32:	e018      	b.n	800fe66 <USB_EPStartXfer+0x210>
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	785b      	ldrb	r3, [r3, #1]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d114      	bne.n	800fe66 <USB_EPStartXfer+0x210>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	461a      	mov	r2, r3
 800fe46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe48:	4413      	add	r3, r2
 800fe4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	00da      	lsls	r2, r3, #3
 800fe52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe54:	4413      	add	r3, r2
 800fe56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fe5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	895b      	ldrh	r3, [r3, #10]
 800fe6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	6959      	ldr	r1, [r3, #20]
 800fe72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 fdce 	bl	8010a1e <USB_WritePMA>
            ep->xfer_buff += len;
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	695a      	ldr	r2, [r3, #20]
 800fe86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe8a:	441a      	add	r2, r3
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	6a1a      	ldr	r2, [r3, #32]
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d907      	bls.n	800feac <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	6a1a      	ldr	r2, [r3, #32]
 800fea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fea4:	1ad2      	subs	r2, r2, r3
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	621a      	str	r2, [r3, #32]
 800feaa:	e006      	b.n	800feba <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2200      	movs	r2, #0
 800feb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	785b      	ldrb	r3, [r3, #1]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d16b      	bne.n	800ff9a <USB_EPStartXfer+0x344>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	61bb      	str	r3, [r7, #24]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fecc:	b29b      	uxth	r3, r3
 800fece:	461a      	mov	r2, r3
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	4413      	add	r3, r2
 800fed4:	61bb      	str	r3, [r7, #24]
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	00da      	lsls	r2, r3, #3
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	4413      	add	r3, r2
 800fee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	b29b      	uxth	r3, r3
 800feec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	801a      	strh	r2, [r3, #0]
 800fef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10a      	bne.n	800ff14 <USB_EPStartXfer+0x2be>
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	801a      	strh	r2, [r3, #0]
 800ff12:	e05d      	b.n	800ffd0 <USB_EPStartXfer+0x37a>
 800ff14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff18:	2b3e      	cmp	r3, #62	@ 0x3e
 800ff1a:	d81c      	bhi.n	800ff56 <USB_EPStartXfer+0x300>
 800ff1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff20:	085b      	lsrs	r3, r3, #1
 800ff22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ff26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d004      	beq.n	800ff3c <USB_EPStartXfer+0x2e6>
 800ff32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ff36:	3301      	adds	r3, #1
 800ff38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	881b      	ldrh	r3, [r3, #0]
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	029b      	lsls	r3, r3, #10
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	801a      	strh	r2, [r3, #0]
 800ff54:	e03c      	b.n	800ffd0 <USB_EPStartXfer+0x37a>
 800ff56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff5a:	095b      	lsrs	r3, r3, #5
 800ff5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ff60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff64:	f003 031f 	and.w	r3, r3, #31
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d104      	bne.n	800ff76 <USB_EPStartXfer+0x320>
 800ff6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ff70:	3b01      	subs	r3, #1
 800ff72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	029b      	lsls	r3, r3, #10
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	4313      	orrs	r3, r2
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	801a      	strh	r2, [r3, #0]
 800ff98:	e01a      	b.n	800ffd0 <USB_EPStartXfer+0x37a>
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	785b      	ldrb	r3, [r3, #1]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d116      	bne.n	800ffd0 <USB_EPStartXfer+0x37a>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	623b      	str	r3, [r7, #32]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	461a      	mov	r2, r3
 800ffb0:	6a3b      	ldr	r3, [r7, #32]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	623b      	str	r3, [r7, #32]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	00da      	lsls	r2, r3, #3
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ffc4:	61fb      	str	r3, [r7, #28]
 800ffc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	891b      	ldrh	r3, [r3, #8]
 800ffd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	6959      	ldr	r1, [r3, #20]
 800ffdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fd19 	bl	8010a1e <USB_WritePMA>
 800ffec:	e2e2      	b.n	80105b4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	785b      	ldrb	r3, [r3, #1]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d16b      	bne.n	80100ce <USB_EPStartXfer+0x478>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010000:	b29b      	uxth	r3, r3
 8010002:	461a      	mov	r2, r3
 8010004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010006:	4413      	add	r3, r2
 8010008:	64bb      	str	r3, [r7, #72]	@ 0x48
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	00da      	lsls	r2, r3, #3
 8010010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010012:	4413      	add	r3, r2
 8010014:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010018:	647b      	str	r3, [r7, #68]	@ 0x44
 801001a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	b29b      	uxth	r3, r3
 8010020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010024:	b29a      	uxth	r2, r3
 8010026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010028:	801a      	strh	r2, [r3, #0]
 801002a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10a      	bne.n	8010048 <USB_EPStartXfer+0x3f2>
 8010032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	b29b      	uxth	r3, r3
 8010038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801003c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010040:	b29a      	uxth	r2, r3
 8010042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010044:	801a      	strh	r2, [r3, #0]
 8010046:	e05d      	b.n	8010104 <USB_EPStartXfer+0x4ae>
 8010048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801004c:	2b3e      	cmp	r3, #62	@ 0x3e
 801004e:	d81c      	bhi.n	801008a <USB_EPStartXfer+0x434>
 8010050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010054:	085b      	lsrs	r3, r3, #1
 8010056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801005a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801005e:	f003 0301 	and.w	r3, r3, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	d004      	beq.n	8010070 <USB_EPStartXfer+0x41a>
 8010066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801006a:	3301      	adds	r3, #1
 801006c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	b29a      	uxth	r2, r3
 8010076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801007a:	b29b      	uxth	r3, r3
 801007c:	029b      	lsls	r3, r3, #10
 801007e:	b29b      	uxth	r3, r3
 8010080:	4313      	orrs	r3, r2
 8010082:	b29a      	uxth	r2, r3
 8010084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010086:	801a      	strh	r2, [r3, #0]
 8010088:	e03c      	b.n	8010104 <USB_EPStartXfer+0x4ae>
 801008a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801008e:	095b      	lsrs	r3, r3, #5
 8010090:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010098:	f003 031f 	and.w	r3, r3, #31
 801009c:	2b00      	cmp	r3, #0
 801009e:	d104      	bne.n	80100aa <USB_EPStartXfer+0x454>
 80100a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80100a4:	3b01      	subs	r3, #1
 80100a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80100aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	029b      	lsls	r3, r3, #10
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	4313      	orrs	r3, r2
 80100bc:	b29b      	uxth	r3, r3
 80100be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100ca:	801a      	strh	r2, [r3, #0]
 80100cc:	e01a      	b.n	8010104 <USB_EPStartXfer+0x4ae>
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	785b      	ldrb	r3, [r3, #1]
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d116      	bne.n	8010104 <USB_EPStartXfer+0x4ae>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	461a      	mov	r2, r3
 80100e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100e6:	4413      	add	r3, r2
 80100e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	00da      	lsls	r2, r3, #3
 80100f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100f2:	4413      	add	r3, r2
 80100f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80100f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100fe:	b29a      	uxth	r2, r3
 8010100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010102:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	891b      	ldrh	r3, [r3, #8]
 8010108:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	6959      	ldr	r1, [r3, #20]
 8010110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010114:	b29b      	uxth	r3, r3
 8010116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fc7f 	bl	8010a1e <USB_WritePMA>
            ep->xfer_buff += len;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	695a      	ldr	r2, [r3, #20]
 8010124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010128:	441a      	add	r2, r3
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	6a1a      	ldr	r2, [r3, #32]
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	429a      	cmp	r2, r3
 8010138:	d907      	bls.n	801014a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	6a1a      	ldr	r2, [r3, #32]
 801013e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010142:	1ad2      	subs	r2, r2, r3
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	621a      	str	r2, [r3, #32]
 8010148:	e006      	b.n	8010158 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	2200      	movs	r2, #0
 8010156:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	643b      	str	r3, [r7, #64]	@ 0x40
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	785b      	ldrb	r3, [r3, #1]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d16b      	bne.n	801023c <USB_EPStartXfer+0x5e6>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801016e:	b29b      	uxth	r3, r3
 8010170:	461a      	mov	r2, r3
 8010172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010174:	4413      	add	r3, r2
 8010176:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	00da      	lsls	r2, r3, #3
 801017e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010180:	4413      	add	r3, r2
 8010182:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010186:	637b      	str	r3, [r7, #52]	@ 0x34
 8010188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801018a:	881b      	ldrh	r3, [r3, #0]
 801018c:	b29b      	uxth	r3, r3
 801018e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010192:	b29a      	uxth	r2, r3
 8010194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010196:	801a      	strh	r2, [r3, #0]
 8010198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10a      	bne.n	80101b6 <USB_EPStartXfer+0x560>
 80101a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101a2:	881b      	ldrh	r3, [r3, #0]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101b2:	801a      	strh	r2, [r3, #0]
 80101b4:	e05b      	b.n	801026e <USB_EPStartXfer+0x618>
 80101b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80101bc:	d81c      	bhi.n	80101f8 <USB_EPStartXfer+0x5a2>
 80101be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101c2:	085b      	lsrs	r3, r3, #1
 80101c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80101c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101cc:	f003 0301 	and.w	r3, r3, #1
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d004      	beq.n	80101de <USB_EPStartXfer+0x588>
 80101d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80101d8:	3301      	adds	r3, #1
 80101da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80101de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e0:	881b      	ldrh	r3, [r3, #0]
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	029b      	lsls	r3, r3, #10
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	4313      	orrs	r3, r2
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101f4:	801a      	strh	r2, [r3, #0]
 80101f6:	e03a      	b.n	801026e <USB_EPStartXfer+0x618>
 80101f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101fc:	095b      	lsrs	r3, r3, #5
 80101fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010206:	f003 031f 	and.w	r3, r3, #31
 801020a:	2b00      	cmp	r3, #0
 801020c:	d104      	bne.n	8010218 <USB_EPStartXfer+0x5c2>
 801020e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010212:	3b01      	subs	r3, #1
 8010214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	b29a      	uxth	r2, r3
 801021e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010222:	b29b      	uxth	r3, r3
 8010224:	029b      	lsls	r3, r3, #10
 8010226:	b29b      	uxth	r3, r3
 8010228:	4313      	orrs	r3, r2
 801022a:	b29b      	uxth	r3, r3
 801022c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010234:	b29a      	uxth	r2, r3
 8010236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010238:	801a      	strh	r2, [r3, #0]
 801023a:	e018      	b.n	801026e <USB_EPStartXfer+0x618>
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	785b      	ldrb	r3, [r3, #1]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d114      	bne.n	801026e <USB_EPStartXfer+0x618>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801024a:	b29b      	uxth	r3, r3
 801024c:	461a      	mov	r2, r3
 801024e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010250:	4413      	add	r3, r2
 8010252:	643b      	str	r3, [r7, #64]	@ 0x40
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	00da      	lsls	r2, r3, #3
 801025a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801025c:	4413      	add	r3, r2
 801025e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010268:	b29a      	uxth	r2, r3
 801026a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801026c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	895b      	ldrh	r3, [r3, #10]
 8010272:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	6959      	ldr	r1, [r3, #20]
 801027a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801027e:	b29b      	uxth	r3, r3
 8010280:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fbca 	bl	8010a1e <USB_WritePMA>
 801028a:	e193      	b.n	80105b4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	6a1b      	ldr	r3, [r3, #32]
 8010290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	4413      	add	r3, r2
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80102a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102aa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	441a      	add	r2, r3
 80102b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80102bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80102c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80102c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80102c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80102da:	b29b      	uxth	r3, r3
 80102dc:	461a      	mov	r2, r3
 80102de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102e0:	4413      	add	r3, r2
 80102e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	00da      	lsls	r2, r3, #3
 80102ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102ec:	4413      	add	r3, r2
 80102ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80102f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80102f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80102fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	891b      	ldrh	r3, [r3, #8]
 8010302:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	6959      	ldr	r1, [r3, #20]
 801030a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801030e:	b29b      	uxth	r3, r3
 8010310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fb82 	bl	8010a1e <USB_WritePMA>
 801031a:	e14b      	b.n	80105b4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	6a1a      	ldr	r2, [r3, #32]
 8010320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010324:	1ad2      	subs	r2, r2, r3
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	b29b      	uxth	r3, r3
 8010338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 809a 	beq.w	8010476 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	673b      	str	r3, [r7, #112]	@ 0x70
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	785b      	ldrb	r3, [r3, #1]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d16b      	bne.n	8010426 <USB_EPStartXfer+0x7d0>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010358:	b29b      	uxth	r3, r3
 801035a:	461a      	mov	r2, r3
 801035c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801035e:	4413      	add	r3, r2
 8010360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	00da      	lsls	r2, r3, #3
 8010368:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801036a:	4413      	add	r3, r2
 801036c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010370:	667b      	str	r3, [r7, #100]	@ 0x64
 8010372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	b29b      	uxth	r3, r3
 8010378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801037c:	b29a      	uxth	r2, r3
 801037e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010380:	801a      	strh	r2, [r3, #0]
 8010382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010386:	2b00      	cmp	r3, #0
 8010388:	d10a      	bne.n	80103a0 <USB_EPStartXfer+0x74a>
 801038a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	b29b      	uxth	r3, r3
 8010390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010398:	b29a      	uxth	r2, r3
 801039a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801039c:	801a      	strh	r2, [r3, #0]
 801039e:	e05b      	b.n	8010458 <USB_EPStartXfer+0x802>
 80103a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80103a6:	d81c      	bhi.n	80103e2 <USB_EPStartXfer+0x78c>
 80103a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103ac:	085b      	lsrs	r3, r3, #1
 80103ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80103b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103b6:	f003 0301 	and.w	r3, r3, #1
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d004      	beq.n	80103c8 <USB_EPStartXfer+0x772>
 80103be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80103c2:	3301      	adds	r3, #1
 80103c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80103c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103ca:	881b      	ldrh	r3, [r3, #0]
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	029b      	lsls	r3, r3, #10
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	4313      	orrs	r3, r2
 80103da:	b29a      	uxth	r2, r3
 80103dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103de:	801a      	strh	r2, [r3, #0]
 80103e0:	e03a      	b.n	8010458 <USB_EPStartXfer+0x802>
 80103e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103e6:	095b      	lsrs	r3, r3, #5
 80103e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80103ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103f0:	f003 031f 	and.w	r3, r3, #31
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d104      	bne.n	8010402 <USB_EPStartXfer+0x7ac>
 80103f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80103fc:	3b01      	subs	r3, #1
 80103fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010404:	881b      	ldrh	r3, [r3, #0]
 8010406:	b29a      	uxth	r2, r3
 8010408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801040c:	b29b      	uxth	r3, r3
 801040e:	029b      	lsls	r3, r3, #10
 8010410:	b29b      	uxth	r3, r3
 8010412:	4313      	orrs	r3, r2
 8010414:	b29b      	uxth	r3, r3
 8010416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801041a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801041e:	b29a      	uxth	r2, r3
 8010420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010422:	801a      	strh	r2, [r3, #0]
 8010424:	e018      	b.n	8010458 <USB_EPStartXfer+0x802>
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	785b      	ldrb	r3, [r3, #1]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d114      	bne.n	8010458 <USB_EPStartXfer+0x802>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010434:	b29b      	uxth	r3, r3
 8010436:	461a      	mov	r2, r3
 8010438:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801043a:	4413      	add	r3, r2
 801043c:	673b      	str	r3, [r7, #112]	@ 0x70
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	00da      	lsls	r2, r3, #3
 8010444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010446:	4413      	add	r3, r2
 8010448:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801044c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801044e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010452:	b29a      	uxth	r2, r3
 8010454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010456:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	895b      	ldrh	r3, [r3, #10]
 801045c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	6959      	ldr	r1, [r3, #20]
 8010464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010468:	b29b      	uxth	r3, r3
 801046a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 fad5 	bl	8010a1e <USB_WritePMA>
 8010474:	e09e      	b.n	80105b4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	785b      	ldrb	r3, [r3, #1]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d16b      	bne.n	8010556 <USB_EPStartXfer+0x900>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010488:	b29b      	uxth	r3, r3
 801048a:	461a      	mov	r2, r3
 801048c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801048e:	4413      	add	r3, r2
 8010490:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	00da      	lsls	r2, r3, #3
 8010498:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801049a:	4413      	add	r3, r2
 801049c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80104a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80104a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104b0:	801a      	strh	r2, [r3, #0]
 80104b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10a      	bne.n	80104d0 <USB_EPStartXfer+0x87a>
 80104ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80104c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104cc:	801a      	strh	r2, [r3, #0]
 80104ce:	e063      	b.n	8010598 <USB_EPStartXfer+0x942>
 80104d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80104d6:	d81c      	bhi.n	8010512 <USB_EPStartXfer+0x8bc>
 80104d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104dc:	085b      	lsrs	r3, r3, #1
 80104de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80104e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104e6:	f003 0301 	and.w	r3, r3, #1
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d004      	beq.n	80104f8 <USB_EPStartXfer+0x8a2>
 80104ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80104f2:	3301      	adds	r3, #1
 80104f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80104f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010502:	b29b      	uxth	r3, r3
 8010504:	029b      	lsls	r3, r3, #10
 8010506:	b29b      	uxth	r3, r3
 8010508:	4313      	orrs	r3, r2
 801050a:	b29a      	uxth	r2, r3
 801050c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801050e:	801a      	strh	r2, [r3, #0]
 8010510:	e042      	b.n	8010598 <USB_EPStartXfer+0x942>
 8010512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010516:	095b      	lsrs	r3, r3, #5
 8010518:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801051c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010520:	f003 031f 	and.w	r3, r3, #31
 8010524:	2b00      	cmp	r3, #0
 8010526:	d104      	bne.n	8010532 <USB_EPStartXfer+0x8dc>
 8010528:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801052c:	3b01      	subs	r3, #1
 801052e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010534:	881b      	ldrh	r3, [r3, #0]
 8010536:	b29a      	uxth	r2, r3
 8010538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801053c:	b29b      	uxth	r3, r3
 801053e:	029b      	lsls	r3, r3, #10
 8010540:	b29b      	uxth	r3, r3
 8010542:	4313      	orrs	r3, r2
 8010544:	b29b      	uxth	r3, r3
 8010546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801054a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801054e:	b29a      	uxth	r2, r3
 8010550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010552:	801a      	strh	r2, [r3, #0]
 8010554:	e020      	b.n	8010598 <USB_EPStartXfer+0x942>
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	785b      	ldrb	r3, [r3, #1]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d11c      	bne.n	8010598 <USB_EPStartXfer+0x942>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801056a:	b29b      	uxth	r3, r3
 801056c:	461a      	mov	r2, r3
 801056e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010572:	4413      	add	r3, r2
 8010574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	00da      	lsls	r2, r3, #3
 801057e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010582:	4413      	add	r3, r2
 8010584:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801058c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010590:	b29a      	uxth	r2, r3
 8010592:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010596:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	891b      	ldrh	r3, [r3, #8]
 801059c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	6959      	ldr	r1, [r3, #20]
 80105a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fa35 	bl	8010a1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ca:	817b      	strh	r3, [r7, #10]
 80105cc:	897b      	ldrh	r3, [r7, #10]
 80105ce:	f083 0310 	eor.w	r3, r3, #16
 80105d2:	817b      	strh	r3, [r7, #10]
 80105d4:	897b      	ldrh	r3, [r7, #10]
 80105d6:	f083 0320 	eor.w	r3, r3, #32
 80105da:	817b      	strh	r3, [r7, #10]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	441a      	add	r2, r3
 80105e6:	897b      	ldrh	r3, [r7, #10]
 80105e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	8013      	strh	r3, [r2, #0]
 80105fc:	e0d5      	b.n	80107aa <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	7b1b      	ldrb	r3, [r3, #12]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d156      	bne.n	80106b4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	699b      	ldr	r3, [r3, #24]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d122      	bne.n	8010654 <USB_EPStartXfer+0x9fe>
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	78db      	ldrb	r3, [r3, #3]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d11e      	bne.n	8010654 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	009b      	lsls	r3, r3, #2
 801061e:	4413      	add	r3, r2
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	b29b      	uxth	r3, r3
 8010624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801062c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	441a      	add	r2, r3
 801063a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801063e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010646:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801064a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801064e:	b29b      	uxth	r3, r3
 8010650:	8013      	strh	r3, [r2, #0]
 8010652:	e01d      	b.n	8010690 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	881b      	ldrh	r3, [r3, #0]
 8010660:	b29b      	uxth	r3, r3
 8010662:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801066a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	441a      	add	r2, r3
 8010678:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 801067c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801068c:	b29b      	uxth	r3, r3
 801068e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	699a      	ldr	r2, [r3, #24]
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	429a      	cmp	r2, r3
 801069a:	d907      	bls.n	80106ac <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	699a      	ldr	r2, [r3, #24]
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	1ad2      	subs	r2, r2, r3
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	619a      	str	r2, [r3, #24]
 80106aa:	e054      	b.n	8010756 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	2200      	movs	r2, #0
 80106b0:	619a      	str	r2, [r3, #24]
 80106b2:	e050      	b.n	8010756 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	78db      	ldrb	r3, [r3, #3]
 80106b8:	2b02      	cmp	r3, #2
 80106ba:	d142      	bne.n	8010742 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	69db      	ldr	r3, [r3, #28]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d048      	beq.n	8010756 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	4413      	add	r3, r2
 80106ce:	881b      	ldrh	r3, [r3, #0]
 80106d0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80106d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80106d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d005      	beq.n	80106ec <USB_EPStartXfer+0xa96>
 80106e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80106e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10b      	bne.n	8010704 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80106ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80106f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d12e      	bne.n	8010756 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80106f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80106fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010700:	2b00      	cmp	r3, #0
 8010702:	d128      	bne.n	8010756 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	4413      	add	r3, r2
 801070e:	881b      	ldrh	r3, [r3, #0]
 8010710:	b29b      	uxth	r3, r3
 8010712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801071a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	441a      	add	r2, r3
 8010728:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 801072c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010738:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801073c:	b29b      	uxth	r3, r3
 801073e:	8013      	strh	r3, [r2, #0]
 8010740:	e009      	b.n	8010756 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	78db      	ldrb	r3, [r3, #3]
 8010746:	2b01      	cmp	r3, #1
 8010748:	d103      	bne.n	8010752 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	2200      	movs	r2, #0
 801074e:	619a      	str	r2, [r3, #24]
 8010750:	e001      	b.n	8010756 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	e02a      	b.n	80107ac <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	b29b      	uxth	r3, r3
 8010764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801076c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8010770:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010774:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010778:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801077c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010780:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010784:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	441a      	add	r2, r3
 8010792:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801079a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801079e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	37b0      	adds	r7, #176	@ 0xb0
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	785b      	ldrb	r3, [r3, #1]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d020      	beq.n	8010808 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107dc:	81bb      	strh	r3, [r7, #12]
 80107de:	89bb      	ldrh	r3, [r7, #12]
 80107e0:	f083 0310 	eor.w	r3, r3, #16
 80107e4:	81bb      	strh	r3, [r7, #12]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	441a      	add	r2, r3
 80107f0:	89bb      	ldrh	r3, [r7, #12]
 80107f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010802:	b29b      	uxth	r3, r3
 8010804:	8013      	strh	r3, [r2, #0]
 8010806:	e01f      	b.n	8010848 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	b29b      	uxth	r3, r3
 8010816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801081a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801081e:	81fb      	strh	r3, [r7, #14]
 8010820:	89fb      	ldrh	r3, [r7, #14]
 8010822:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010826:	81fb      	strh	r3, [r7, #14]
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	441a      	add	r2, r3
 8010832:	89fb      	ldrh	r3, [r7, #14]
 8010834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801083c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010844:	b29b      	uxth	r3, r3
 8010846:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	3714      	adds	r7, #20
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr

08010856 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010856:	b480      	push	{r7}
 8010858:	b087      	sub	sp, #28
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
 801085e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	785b      	ldrb	r3, [r3, #1]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d04c      	beq.n	8010902 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	4413      	add	r3, r2
 8010872:	881b      	ldrh	r3, [r3, #0]
 8010874:	823b      	strh	r3, [r7, #16]
 8010876:	8a3b      	ldrh	r3, [r7, #16]
 8010878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801087c:	2b00      	cmp	r3, #0
 801087e:	d01b      	beq.n	80108b8 <USB_EPClearStall+0x62>
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4413      	add	r3, r2
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	b29b      	uxth	r3, r3
 801088e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010896:	81fb      	strh	r3, [r7, #14]
 8010898:	687a      	ldr	r2, [r7, #4]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	441a      	add	r2, r3
 80108a2:	89fb      	ldrh	r3, [r7, #14]
 80108a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	78db      	ldrb	r3, [r3, #3]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d06c      	beq.n	801099a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	881b      	ldrh	r3, [r3, #0]
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108d6:	81bb      	strh	r3, [r7, #12]
 80108d8:	89bb      	ldrh	r3, [r7, #12]
 80108da:	f083 0320 	eor.w	r3, r3, #32
 80108de:	81bb      	strh	r3, [r7, #12]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	441a      	add	r2, r3
 80108ea:	89bb      	ldrh	r3, [r7, #12]
 80108ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	8013      	strh	r3, [r2, #0]
 8010900:	e04b      	b.n	801099a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	4413      	add	r3, r2
 801090c:	881b      	ldrh	r3, [r3, #0]
 801090e:	82fb      	strh	r3, [r7, #22]
 8010910:	8afb      	ldrh	r3, [r7, #22]
 8010912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010916:	2b00      	cmp	r3, #0
 8010918:	d01b      	beq.n	8010952 <USB_EPClearStall+0xfc>
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	4413      	add	r3, r2
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	b29b      	uxth	r3, r3
 8010928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801092c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010930:	82bb      	strh	r3, [r7, #20]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	441a      	add	r2, r3
 801093c:	8abb      	ldrh	r3, [r7, #20]
 801093e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801094a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801094e:	b29b      	uxth	r3, r3
 8010950:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	4413      	add	r3, r2
 801095c:	881b      	ldrh	r3, [r3, #0]
 801095e:	b29b      	uxth	r3, r3
 8010960:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010968:	827b      	strh	r3, [r7, #18]
 801096a:	8a7b      	ldrh	r3, [r7, #18]
 801096c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010970:	827b      	strh	r3, [r7, #18]
 8010972:	8a7b      	ldrh	r3, [r7, #18]
 8010974:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010978:	827b      	strh	r3, [r7, #18]
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	441a      	add	r2, r3
 8010984:	8a7b      	ldrh	r3, [r7, #18]
 8010986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801098a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801098e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010996:	b29b      	uxth	r3, r3
 8010998:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801099a:	2300      	movs	r3, #0
}
 801099c:	4618      	mov	r0, r3
 801099e:	371c      	adds	r7, #28
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80109b4:	78fb      	ldrb	r3, [r7, #3]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d103      	bne.n	80109c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2280      	movs	r2, #128	@ 0x80
 80109be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	370c      	adds	r7, #12
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80109de:	b29b      	uxth	r3, r3
 80109e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	370c      	adds	r7, #12
 80109f6:	46bd      	mov	sp, r7
 80109f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fc:	4770      	bx	lr

080109fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80109fe:	b480      	push	{r7}
 8010a00:	b085      	sub	sp, #20
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010a10:	68fb      	ldr	r3, [r7, #12]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010a1e:	b480      	push	{r7}
 8010a20:	b08b      	sub	sp, #44	@ 0x2c
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	60f8      	str	r0, [r7, #12]
 8010a26:	60b9      	str	r1, [r7, #8]
 8010a28:	4611      	mov	r1, r2
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	80fb      	strh	r3, [r7, #6]
 8010a30:	4613      	mov	r3, r2
 8010a32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010a34:	88bb      	ldrh	r3, [r7, #4]
 8010a36:	3301      	adds	r3, #1
 8010a38:	085b      	lsrs	r3, r3, #1
 8010a3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010a44:	88fa      	ldrh	r2, [r7, #6]
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	4413      	add	r3, r2
 8010a4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a54:	e01c      	b.n	8010a90 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	b21b      	sxth	r3, r3
 8010a64:	021b      	lsls	r3, r3, #8
 8010a66:	b21a      	sxth	r2, r3
 8010a68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	b21b      	sxth	r3, r3
 8010a70:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8010a72:	6a3b      	ldr	r3, [r7, #32]
 8010a74:	8a7a      	ldrh	r2, [r7, #18]
 8010a76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010a78:	6a3b      	ldr	r3, [r7, #32]
 8010a7a:	3302      	adds	r3, #2
 8010a7c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	3301      	adds	r3, #1
 8010a82:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	3301      	adds	r3, #1
 8010a88:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1df      	bne.n	8010a56 <USB_WritePMA+0x38>
  }
}
 8010a96:	bf00      	nop
 8010a98:	bf00      	nop
 8010a9a:	372c      	adds	r7, #44	@ 0x2c
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b08b      	sub	sp, #44	@ 0x2c
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	4611      	mov	r1, r2
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	80fb      	strh	r3, [r7, #6]
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010aba:	88bb      	ldrh	r3, [r7, #4]
 8010abc:	085b      	lsrs	r3, r3, #1
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010aca:	88fa      	ldrh	r2, [r7, #6]
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	4413      	add	r3, r2
 8010ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010ad4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ada:	e018      	b.n	8010b0e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	3302      	adds	r3, #2
 8010ae8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	3301      	adds	r3, #1
 8010af6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	0a1b      	lsrs	r3, r3, #8
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	3301      	adds	r3, #1
 8010b06:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1e3      	bne.n	8010adc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010b14:	88bb      	ldrh	r3, [r7, #4]
 8010b16:	f003 0301 	and.w	r3, r3, #1
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d007      	beq.n	8010b30 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	b2da      	uxtb	r2, r3
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	701a      	strb	r2, [r3, #0]
  }
}
 8010b30:	bf00      	nop
 8010b32:	372c      	adds	r7, #44	@ 0x2c
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	460b      	mov	r3, r1
 8010b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010b48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010b4c:	f006 fa0a 	bl	8016f64 <USBD_static_malloc>
 8010b50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d109      	bne.n	8010b6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	32b0      	adds	r2, #176	@ 0xb0
 8010b62:	2100      	movs	r1, #0
 8010b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010b68:	2302      	movs	r3, #2
 8010b6a:	e0d4      	b.n	8010d16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010b6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010b70:	2100      	movs	r1, #0
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f006 fc6c 	bl	8017450 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	32b0      	adds	r2, #176	@ 0xb0
 8010b82:	68f9      	ldr	r1, [r7, #12]
 8010b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	32b0      	adds	r2, #176	@ 0xb0
 8010b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7c1b      	ldrb	r3, [r3, #16]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d138      	bne.n	8010c16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8010d20 <USBD_CDC_Init+0x1e4>)
 8010ba6:	7819      	ldrb	r1, [r3, #0]
 8010ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010bac:	2202      	movs	r2, #2
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f006 f87f 	bl	8016cb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8010d20 <USBD_CDC_Init+0x1e4>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	f003 020f 	and.w	r2, r3, #15
 8010bbc:	6879      	ldr	r1, [r7, #4]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	440b      	add	r3, r1
 8010bc8:	3324      	adds	r3, #36	@ 0x24
 8010bca:	2201      	movs	r2, #1
 8010bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010bce:	4b55      	ldr	r3, [pc, #340]	@ (8010d24 <USBD_CDC_Init+0x1e8>)
 8010bd0:	7819      	ldrb	r1, [r3, #0]
 8010bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f006 f86a 	bl	8016cb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010bde:	4b51      	ldr	r3, [pc, #324]	@ (8010d24 <USBD_CDC_Init+0x1e8>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	f003 020f 	and.w	r2, r3, #15
 8010be6:	6879      	ldr	r1, [r7, #4]
 8010be8:	4613      	mov	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	4413      	add	r3, r2
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	440b      	add	r3, r1
 8010bf2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8010d28 <USBD_CDC_Init+0x1ec>)
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	f003 020f 	and.w	r2, r3, #15
 8010c02:	6879      	ldr	r1, [r7, #4]
 8010c04:	4613      	mov	r3, r2
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4413      	add	r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	440b      	add	r3, r1
 8010c0e:	3326      	adds	r3, #38	@ 0x26
 8010c10:	2210      	movs	r2, #16
 8010c12:	801a      	strh	r2, [r3, #0]
 8010c14:	e035      	b.n	8010c82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010c16:	4b42      	ldr	r3, [pc, #264]	@ (8010d20 <USBD_CDC_Init+0x1e4>)
 8010c18:	7819      	ldrb	r1, [r3, #0]
 8010c1a:	2340      	movs	r3, #64	@ 0x40
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f006 f847 	bl	8016cb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010c24:	4b3e      	ldr	r3, [pc, #248]	@ (8010d20 <USBD_CDC_Init+0x1e4>)
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	f003 020f 	and.w	r2, r3, #15
 8010c2c:	6879      	ldr	r1, [r7, #4]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	4413      	add	r3, r2
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	440b      	add	r3, r1
 8010c38:	3324      	adds	r3, #36	@ 0x24
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010c3e:	4b39      	ldr	r3, [pc, #228]	@ (8010d24 <USBD_CDC_Init+0x1e8>)
 8010c40:	7819      	ldrb	r1, [r3, #0]
 8010c42:	2340      	movs	r3, #64	@ 0x40
 8010c44:	2202      	movs	r2, #2
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f006 f833 	bl	8016cb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010c4c:	4b35      	ldr	r3, [pc, #212]	@ (8010d24 <USBD_CDC_Init+0x1e8>)
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	f003 020f 	and.w	r2, r3, #15
 8010c54:	6879      	ldr	r1, [r7, #4]
 8010c56:	4613      	mov	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	009b      	lsls	r3, r3, #2
 8010c5e:	440b      	add	r3, r1
 8010c60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010c64:	2201      	movs	r2, #1
 8010c66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010c68:	4b2f      	ldr	r3, [pc, #188]	@ (8010d28 <USBD_CDC_Init+0x1ec>)
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	f003 020f 	and.w	r2, r3, #15
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	4613      	mov	r3, r2
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4413      	add	r3, r2
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	440b      	add	r3, r1
 8010c7c:	3326      	adds	r3, #38	@ 0x26
 8010c7e:	2210      	movs	r2, #16
 8010c80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010c82:	4b29      	ldr	r3, [pc, #164]	@ (8010d28 <USBD_CDC_Init+0x1ec>)
 8010c84:	7819      	ldrb	r1, [r3, #0]
 8010c86:	2308      	movs	r3, #8
 8010c88:	2203      	movs	r2, #3
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f006 f811 	bl	8016cb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010c90:	4b25      	ldr	r3, [pc, #148]	@ (8010d28 <USBD_CDC_Init+0x1ec>)
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	f003 020f 	and.w	r2, r3, #15
 8010c98:	6879      	ldr	r1, [r7, #4]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	440b      	add	r3, r1
 8010ca4:	3324      	adds	r3, #36	@ 0x24
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2200      	movs	r2, #0
 8010cae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	33b0      	adds	r3, #176	@ 0xb0
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d101      	bne.n	8010ce4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	e018      	b.n	8010d16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	7c1b      	ldrb	r3, [r3, #16]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10a      	bne.n	8010d02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010cec:	4b0d      	ldr	r3, [pc, #52]	@ (8010d24 <USBD_CDC_Init+0x1e8>)
 8010cee:	7819      	ldrb	r1, [r3, #0]
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010cf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f006 f8c8 	bl	8016e90 <USBD_LL_PrepareReceive>
 8010d00:	e008      	b.n	8010d14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010d02:	4b08      	ldr	r3, [pc, #32]	@ (8010d24 <USBD_CDC_Init+0x1e8>)
 8010d04:	7819      	ldrb	r1, [r3, #0]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010d0c:	2340      	movs	r3, #64	@ 0x40
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f006 f8be 	bl	8016e90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	200000b3 	.word	0x200000b3
 8010d24:	200000b4 	.word	0x200000b4
 8010d28:	200000b5 	.word	0x200000b5

08010d2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	460b      	mov	r3, r1
 8010d36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010d38:	4b3a      	ldr	r3, [pc, #232]	@ (8010e24 <USBD_CDC_DeInit+0xf8>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f005 ffdd 	bl	8016cfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010d44:	4b37      	ldr	r3, [pc, #220]	@ (8010e24 <USBD_CDC_DeInit+0xf8>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	f003 020f 	and.w	r2, r3, #15
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4413      	add	r3, r2
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	440b      	add	r3, r1
 8010d58:	3324      	adds	r3, #36	@ 0x24
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010d5e:	4b32      	ldr	r3, [pc, #200]	@ (8010e28 <USBD_CDC_DeInit+0xfc>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f005 ffca 	bl	8016cfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8010e28 <USBD_CDC_DeInit+0xfc>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	f003 020f 	and.w	r2, r3, #15
 8010d72:	6879      	ldr	r1, [r7, #4]
 8010d74:	4613      	mov	r3, r2
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	4413      	add	r3, r2
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	440b      	add	r3, r1
 8010d7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010d82:	2200      	movs	r2, #0
 8010d84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010d86:	4b29      	ldr	r3, [pc, #164]	@ (8010e2c <USBD_CDC_DeInit+0x100>)
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f005 ffb6 	bl	8016cfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010d92:	4b26      	ldr	r3, [pc, #152]	@ (8010e2c <USBD_CDC_DeInit+0x100>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	f003 020f 	and.w	r2, r3, #15
 8010d9a:	6879      	ldr	r1, [r7, #4]
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	4413      	add	r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	440b      	add	r3, r1
 8010da6:	3324      	adds	r3, #36	@ 0x24
 8010da8:	2200      	movs	r2, #0
 8010daa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010dac:	4b1f      	ldr	r3, [pc, #124]	@ (8010e2c <USBD_CDC_DeInit+0x100>)
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	f003 020f 	and.w	r2, r3, #15
 8010db4:	6879      	ldr	r1, [r7, #4]
 8010db6:	4613      	mov	r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	4413      	add	r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	440b      	add	r3, r1
 8010dc0:	3326      	adds	r3, #38	@ 0x26
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	32b0      	adds	r2, #176	@ 0xb0
 8010dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d01f      	beq.n	8010e18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	33b0      	adds	r3, #176	@ 0xb0
 8010de2:	009b      	lsls	r3, r3, #2
 8010de4:	4413      	add	r3, r2
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	32b0      	adds	r2, #176	@ 0xb0
 8010df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f006 f8c0 	bl	8016f80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	32b0      	adds	r2, #176	@ 0xb0
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	200000b3 	.word	0x200000b3
 8010e28:	200000b4 	.word	0x200000b4
 8010e2c:	200000b5 	.word	0x200000b5

08010e30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	32b0      	adds	r2, #176	@ 0xb0
 8010e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e52:	2300      	movs	r3, #0
 8010e54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d101      	bne.n	8010e60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010e5c:	2303      	movs	r3, #3
 8010e5e:	e0bf      	b.n	8010fe0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d050      	beq.n	8010f0e <USBD_CDC_Setup+0xde>
 8010e6c:	2b20      	cmp	r3, #32
 8010e6e:	f040 80af 	bne.w	8010fd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	88db      	ldrh	r3, [r3, #6]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d03a      	beq.n	8010ef0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	b25b      	sxtb	r3, r3
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	da1b      	bge.n	8010ebc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	33b0      	adds	r3, #176	@ 0xb0
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	4413      	add	r3, r2
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	689b      	ldr	r3, [r3, #8]
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010e9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	88d2      	ldrh	r2, [r2, #6]
 8010ea0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	88db      	ldrh	r3, [r3, #6]
 8010ea6:	2b07      	cmp	r3, #7
 8010ea8:	bf28      	it	cs
 8010eaa:	2307      	movcs	r3, #7
 8010eac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	89fa      	ldrh	r2, [r7, #14]
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f001 fd2b 	bl	8012910 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010eba:	e090      	b.n	8010fde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	785a      	ldrb	r2, [r3, #1]
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	88db      	ldrh	r3, [r3, #6]
 8010eca:	2b3f      	cmp	r3, #63	@ 0x3f
 8010ecc:	d803      	bhi.n	8010ed6 <USBD_CDC_Setup+0xa6>
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	88db      	ldrh	r3, [r3, #6]
 8010ed2:	b2da      	uxtb	r2, r3
 8010ed4:	e000      	b.n	8010ed8 <USBD_CDC_Setup+0xa8>
 8010ed6:	2240      	movs	r2, #64	@ 0x40
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010ede:	6939      	ldr	r1, [r7, #16]
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f001 fd3d 	bl	8012968 <USBD_CtlPrepareRx>
      break;
 8010eee:	e076      	b.n	8010fde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	33b0      	adds	r3, #176	@ 0xb0
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	4413      	add	r3, r2
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	7850      	ldrb	r0, [r2, #1]
 8010f06:	2200      	movs	r2, #0
 8010f08:	6839      	ldr	r1, [r7, #0]
 8010f0a:	4798      	blx	r3
      break;
 8010f0c:	e067      	b.n	8010fde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	785b      	ldrb	r3, [r3, #1]
 8010f12:	2b0b      	cmp	r3, #11
 8010f14:	d851      	bhi.n	8010fba <USBD_CDC_Setup+0x18a>
 8010f16:	a201      	add	r2, pc, #4	@ (adr r2, 8010f1c <USBD_CDC_Setup+0xec>)
 8010f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f1c:	08010f4d 	.word	0x08010f4d
 8010f20:	08010fc9 	.word	0x08010fc9
 8010f24:	08010fbb 	.word	0x08010fbb
 8010f28:	08010fbb 	.word	0x08010fbb
 8010f2c:	08010fbb 	.word	0x08010fbb
 8010f30:	08010fbb 	.word	0x08010fbb
 8010f34:	08010fbb 	.word	0x08010fbb
 8010f38:	08010fbb 	.word	0x08010fbb
 8010f3c:	08010fbb 	.word	0x08010fbb
 8010f40:	08010fbb 	.word	0x08010fbb
 8010f44:	08010f77 	.word	0x08010f77
 8010f48:	08010fa1 	.word	0x08010fa1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	2b03      	cmp	r3, #3
 8010f56:	d107      	bne.n	8010f68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010f58:	f107 030a 	add.w	r3, r7, #10
 8010f5c:	2202      	movs	r2, #2
 8010f5e:	4619      	mov	r1, r3
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f001 fcd5 	bl	8012910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010f66:	e032      	b.n	8010fce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010f68:	6839      	ldr	r1, [r7, #0]
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f001 fc53 	bl	8012816 <USBD_CtlError>
            ret = USBD_FAIL;
 8010f70:	2303      	movs	r3, #3
 8010f72:	75fb      	strb	r3, [r7, #23]
          break;
 8010f74:	e02b      	b.n	8010fce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	2b03      	cmp	r3, #3
 8010f80:	d107      	bne.n	8010f92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010f82:	f107 030d 	add.w	r3, r7, #13
 8010f86:	2201      	movs	r2, #1
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f001 fcc0 	bl	8012910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010f90:	e01d      	b.n	8010fce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010f92:	6839      	ldr	r1, [r7, #0]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f001 fc3e 	bl	8012816 <USBD_CtlError>
            ret = USBD_FAIL;
 8010f9a:	2303      	movs	r3, #3
 8010f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8010f9e:	e016      	b.n	8010fce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	2b03      	cmp	r3, #3
 8010faa:	d00f      	beq.n	8010fcc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010fac:	6839      	ldr	r1, [r7, #0]
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f001 fc31 	bl	8012816 <USBD_CtlError>
            ret = USBD_FAIL;
 8010fb4:	2303      	movs	r3, #3
 8010fb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010fb8:	e008      	b.n	8010fcc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010fba:	6839      	ldr	r1, [r7, #0]
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f001 fc2a 	bl	8012816 <USBD_CtlError>
          ret = USBD_FAIL;
 8010fc2:	2303      	movs	r3, #3
 8010fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8010fc6:	e002      	b.n	8010fce <USBD_CDC_Setup+0x19e>
          break;
 8010fc8:	bf00      	nop
 8010fca:	e008      	b.n	8010fde <USBD_CDC_Setup+0x1ae>
          break;
 8010fcc:	bf00      	nop
      }
      break;
 8010fce:	e006      	b.n	8010fde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010fd0:	6839      	ldr	r1, [r7, #0]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f001 fc1f 	bl	8012816 <USBD_CtlError>
      ret = USBD_FAIL;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	75fb      	strb	r3, [r7, #23]
      break;
 8010fdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8010fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3718      	adds	r7, #24
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ffa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	32b0      	adds	r2, #176	@ 0xb0
 8011006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d101      	bne.n	8011012 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801100e:	2303      	movs	r3, #3
 8011010:	e065      	b.n	80110de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	32b0      	adds	r2, #176	@ 0xb0
 801101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011020:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011022:	78fb      	ldrb	r3, [r7, #3]
 8011024:	f003 020f 	and.w	r2, r3, #15
 8011028:	6879      	ldr	r1, [r7, #4]
 801102a:	4613      	mov	r3, r2
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	4413      	add	r3, r2
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	440b      	add	r3, r1
 8011034:	3318      	adds	r3, #24
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d02f      	beq.n	801109c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801103c:	78fb      	ldrb	r3, [r7, #3]
 801103e:	f003 020f 	and.w	r2, r3, #15
 8011042:	6879      	ldr	r1, [r7, #4]
 8011044:	4613      	mov	r3, r2
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	4413      	add	r3, r2
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	440b      	add	r3, r1
 801104e:	3318      	adds	r3, #24
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	78fb      	ldrb	r3, [r7, #3]
 8011054:	f003 010f 	and.w	r1, r3, #15
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	460b      	mov	r3, r1
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	440b      	add	r3, r1
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4403      	add	r3, r0
 8011064:	3320      	adds	r3, #32
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	fbb2 f1f3 	udiv	r1, r2, r3
 801106c:	fb01 f303 	mul.w	r3, r1, r3
 8011070:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011072:	2b00      	cmp	r3, #0
 8011074:	d112      	bne.n	801109c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011076:	78fb      	ldrb	r3, [r7, #3]
 8011078:	f003 020f 	and.w	r2, r3, #15
 801107c:	6879      	ldr	r1, [r7, #4]
 801107e:	4613      	mov	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	4413      	add	r3, r2
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	440b      	add	r3, r1
 8011088:	3318      	adds	r3, #24
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801108e:	78f9      	ldrb	r1, [r7, #3]
 8011090:	2300      	movs	r3, #0
 8011092:	2200      	movs	r2, #0
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f005 feda 	bl	8016e4e <USBD_LL_Transmit>
 801109a:	e01f      	b.n	80110dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	2200      	movs	r2, #0
 80110a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	33b0      	adds	r3, #176	@ 0xb0
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	4413      	add	r3, r2
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	691b      	ldr	r3, [r3, #16]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d010      	beq.n	80110dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	33b0      	adds	r3, #176	@ 0xb0
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	4413      	add	r3, r2
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	691b      	ldr	r3, [r3, #16]
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80110d2:	68ba      	ldr	r2, [r7, #8]
 80110d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80110d8:	78fa      	ldrb	r2, [r7, #3]
 80110da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b084      	sub	sp, #16
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
 80110ee:	460b      	mov	r3, r1
 80110f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	32b0      	adds	r2, #176	@ 0xb0
 80110fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011100:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	32b0      	adds	r2, #176	@ 0xb0
 801110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011114:	2303      	movs	r3, #3
 8011116:	e01a      	b.n	801114e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011118:	78fb      	ldrb	r3, [r7, #3]
 801111a:	4619      	mov	r1, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f005 fed8 	bl	8016ed2 <USBD_LL_GetRxDataSize>
 8011122:	4602      	mov	r2, r0
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	33b0      	adds	r3, #176	@ 0xb0
 8011134:	009b      	lsls	r3, r3, #2
 8011136:	4413      	add	r3, r2
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	68fa      	ldr	r2, [r7, #12]
 801113e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011148:	4611      	mov	r1, r2
 801114a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b084      	sub	sp, #16
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	32b0      	adds	r2, #176	@ 0xb0
 8011168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801116c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d101      	bne.n	8011178 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011174:	2303      	movs	r3, #3
 8011176:	e024      	b.n	80111c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	33b0      	adds	r3, #176	@ 0xb0
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4413      	add	r3, r2
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d019      	beq.n	80111c0 <USBD_CDC_EP0_RxReady+0x6a>
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011192:	2bff      	cmp	r3, #255	@ 0xff
 8011194:	d014      	beq.n	80111c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	33b0      	adds	r3, #176	@ 0xb0
 80111a0:	009b      	lsls	r3, r3, #2
 80111a2:	4413      	add	r3, r2
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80111ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80111b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	22ff      	movs	r2, #255	@ 0xff
 80111bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
	...

080111cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b086      	sub	sp, #24
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80111d4:	2182      	movs	r1, #130	@ 0x82
 80111d6:	4818      	ldr	r0, [pc, #96]	@ (8011238 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80111d8:	f000 fcbd 	bl	8011b56 <USBD_GetEpDesc>
 80111dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80111de:	2101      	movs	r1, #1
 80111e0:	4815      	ldr	r0, [pc, #84]	@ (8011238 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80111e2:	f000 fcb8 	bl	8011b56 <USBD_GetEpDesc>
 80111e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80111e8:	2181      	movs	r1, #129	@ 0x81
 80111ea:	4813      	ldr	r0, [pc, #76]	@ (8011238 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80111ec:	f000 fcb3 	bl	8011b56 <USBD_GetEpDesc>
 80111f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2210      	movs	r2, #16
 80111fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d006      	beq.n	8011212 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	2200      	movs	r2, #0
 8011208:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801120c:	711a      	strb	r2, [r3, #4]
 801120e:	2200      	movs	r2, #0
 8011210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d006      	beq.n	8011226 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2200      	movs	r2, #0
 801121c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011220:	711a      	strb	r2, [r3, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2243      	movs	r2, #67	@ 0x43
 801122a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801122c:	4b02      	ldr	r3, [pc, #8]	@ (8011238 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801122e:	4618      	mov	r0, r3
 8011230:	3718      	adds	r7, #24
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
 8011236:	bf00      	nop
 8011238:	20000070 	.word	0x20000070

0801123c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b086      	sub	sp, #24
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011244:	2182      	movs	r1, #130	@ 0x82
 8011246:	4818      	ldr	r0, [pc, #96]	@ (80112a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011248:	f000 fc85 	bl	8011b56 <USBD_GetEpDesc>
 801124c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801124e:	2101      	movs	r1, #1
 8011250:	4815      	ldr	r0, [pc, #84]	@ (80112a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011252:	f000 fc80 	bl	8011b56 <USBD_GetEpDesc>
 8011256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011258:	2181      	movs	r1, #129	@ 0x81
 801125a:	4813      	ldr	r0, [pc, #76]	@ (80112a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801125c:	f000 fc7b 	bl	8011b56 <USBD_GetEpDesc>
 8011260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d002      	beq.n	801126e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2210      	movs	r2, #16
 801126c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d006      	beq.n	8011282 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	2200      	movs	r2, #0
 8011278:	711a      	strb	r2, [r3, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	f042 0202 	orr.w	r2, r2, #2
 8011280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d006      	beq.n	8011296 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2200      	movs	r2, #0
 801128c:	711a      	strb	r2, [r3, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	f042 0202 	orr.w	r2, r2, #2
 8011294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2243      	movs	r2, #67	@ 0x43
 801129a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801129c:	4b02      	ldr	r3, [pc, #8]	@ (80112a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	20000070 	.word	0x20000070

080112ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80112b4:	2182      	movs	r1, #130	@ 0x82
 80112b6:	4818      	ldr	r0, [pc, #96]	@ (8011318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80112b8:	f000 fc4d 	bl	8011b56 <USBD_GetEpDesc>
 80112bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80112be:	2101      	movs	r1, #1
 80112c0:	4815      	ldr	r0, [pc, #84]	@ (8011318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80112c2:	f000 fc48 	bl	8011b56 <USBD_GetEpDesc>
 80112c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80112c8:	2181      	movs	r1, #129	@ 0x81
 80112ca:	4813      	ldr	r0, [pc, #76]	@ (8011318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80112cc:	f000 fc43 	bl	8011b56 <USBD_GetEpDesc>
 80112d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2210      	movs	r2, #16
 80112dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d006      	beq.n	80112f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80112ec:	711a      	strb	r2, [r3, #4]
 80112ee:	2200      	movs	r2, #0
 80112f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d006      	beq.n	8011306 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2200      	movs	r2, #0
 80112fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011300:	711a      	strb	r2, [r3, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2243      	movs	r2, #67	@ 0x43
 801130a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801130c:	4b02      	ldr	r3, [pc, #8]	@ (8011318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20000070 	.word	0x20000070

0801131c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	220a      	movs	r2, #10
 8011328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801132a:	4b03      	ldr	r3, [pc, #12]	@ (8011338 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801132c:	4618      	mov	r0, r3
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	2000002c 	.word	0x2000002c

0801133c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d101      	bne.n	8011350 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801134c:	2303      	movs	r3, #3
 801134e:	e009      	b.n	8011364 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	33b0      	adds	r3, #176	@ 0xb0
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	4413      	add	r3, r2
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011370:	b480      	push	{r7}
 8011372:	b087      	sub	sp, #28
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	32b0      	adds	r2, #176	@ 0xb0
 8011386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801138a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d101      	bne.n	8011396 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011392:	2303      	movs	r3, #3
 8011394:	e008      	b.n	80113a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	68ba      	ldr	r2, [r7, #8]
 801139a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80113a6:	2300      	movs	r3, #0
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	371c      	adds	r7, #28
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr

080113b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	32b0      	adds	r2, #176	@ 0xb0
 80113c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80113d4:	2303      	movs	r3, #3
 80113d6:	e004      	b.n	80113e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3714      	adds	r7, #20
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr
	...

080113f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	32b0      	adds	r2, #176	@ 0xb0
 8011402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011406:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011408:	2301      	movs	r3, #1
 801140a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d101      	bne.n	8011416 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011412:	2303      	movs	r3, #3
 8011414:	e025      	b.n	8011462 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801141c:	2b00      	cmp	r3, #0
 801141e:	d11f      	bne.n	8011460 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	2201      	movs	r2, #1
 8011424:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011428:	4b10      	ldr	r3, [pc, #64]	@ (801146c <USBD_CDC_TransmitPacket+0x7c>)
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	f003 020f 	and.w	r2, r3, #15
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	4613      	mov	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4413      	add	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	4403      	add	r3, r0
 8011442:	3318      	adds	r3, #24
 8011444:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011446:	4b09      	ldr	r3, [pc, #36]	@ (801146c <USBD_CDC_TransmitPacket+0x7c>)
 8011448:	7819      	ldrb	r1, [r3, #0]
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f005 fcf9 	bl	8016e4e <USBD_LL_Transmit>

    ret = USBD_OK;
 801145c:	2300      	movs	r3, #0
 801145e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011460:	7bfb      	ldrb	r3, [r7, #15]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	200000b3 	.word	0x200000b3

08011470 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	32b0      	adds	r2, #176	@ 0xb0
 8011482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011486:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	32b0      	adds	r2, #176	@ 0xb0
 8011492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d101      	bne.n	801149e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801149a:	2303      	movs	r3, #3
 801149c:	e018      	b.n	80114d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	7c1b      	ldrb	r3, [r3, #16]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d10a      	bne.n	80114bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80114a6:	4b0c      	ldr	r3, [pc, #48]	@ (80114d8 <USBD_CDC_ReceivePacket+0x68>)
 80114a8:	7819      	ldrb	r1, [r3, #0]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80114b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f005 fceb 	bl	8016e90 <USBD_LL_PrepareReceive>
 80114ba:	e008      	b.n	80114ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80114bc:	4b06      	ldr	r3, [pc, #24]	@ (80114d8 <USBD_CDC_ReceivePacket+0x68>)
 80114be:	7819      	ldrb	r1, [r3, #0]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80114c6:	2340      	movs	r3, #64	@ 0x40
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f005 fce1 	bl	8016e90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3710      	adds	r7, #16
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	200000b4 	.word	0x200000b4

080114dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	4613      	mov	r3, r2
 80114e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d101      	bne.n	80114f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80114f0:	2303      	movs	r3, #3
 80114f2:	e01f      	b.n	8011534 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2200      	movs	r2, #0
 80114f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2200      	movs	r2, #0
 8011500:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2200      	movs	r2, #0
 8011508:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d003      	beq.n	801151a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	68ba      	ldr	r2, [r7, #8]
 8011516:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2201      	movs	r2, #1
 801151e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	79fa      	ldrb	r2, [r7, #7]
 8011526:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f005 fb45 	bl	8016bb8 <USBD_LL_Init>
 801152e:	4603      	mov	r3, r0
 8011530:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011532:	7dfb      	ldrb	r3, [r7, #23]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3718      	adds	r7, #24
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011546:	2300      	movs	r3, #0
 8011548:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d101      	bne.n	8011554 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011550:	2303      	movs	r3, #3
 8011552:	e025      	b.n	80115a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	32ae      	adds	r2, #174	@ 0xae
 8011566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801156c:	2b00      	cmp	r3, #0
 801156e:	d00f      	beq.n	8011590 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	32ae      	adds	r2, #174	@ 0xae
 801157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011580:	f107 020e 	add.w	r2, r7, #14
 8011584:	4610      	mov	r0, r2
 8011586:	4798      	blx	r3
 8011588:	4602      	mov	r2, r0
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011596:	1c5a      	adds	r2, r3, #1
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801159e:	2300      	movs	r3, #0
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3710      	adds	r7, #16
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f005 fb63 	bl	8016c7c <USBD_LL_Start>
 80115b6:	4603      	mov	r3, r0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80115c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	460b      	mov	r3, r1
 80115e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80115e2:	2300      	movs	r3, #0
 80115e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d009      	beq.n	8011604 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	78fa      	ldrb	r2, [r7, #3]
 80115fa:	4611      	mov	r1, r2
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	4798      	blx	r3
 8011600:	4603      	mov	r3, r0
 8011602:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011604:	7bfb      	ldrb	r3, [r7, #15]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801160e:	b580      	push	{r7, lr}
 8011610:	b084      	sub	sp, #16
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
 8011616:	460b      	mov	r3, r1
 8011618:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	78fa      	ldrb	r2, [r7, #3]
 8011628:	4611      	mov	r1, r2
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	4798      	blx	r3
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011634:	2303      	movs	r3, #3
 8011636:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011638:	7bfb      	ldrb	r3, [r7, #15]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3710      	adds	r7, #16
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011642:	b580      	push	{r7, lr}
 8011644:	b084      	sub	sp, #16
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011652:	6839      	ldr	r1, [r7, #0]
 8011654:	4618      	mov	r0, r3
 8011656:	f001 f8a4 	bl	80127a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2201      	movs	r2, #1
 801165e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011668:	461a      	mov	r2, r3
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011676:	f003 031f 	and.w	r3, r3, #31
 801167a:	2b02      	cmp	r3, #2
 801167c:	d01a      	beq.n	80116b4 <USBD_LL_SetupStage+0x72>
 801167e:	2b02      	cmp	r3, #2
 8011680:	d822      	bhi.n	80116c8 <USBD_LL_SetupStage+0x86>
 8011682:	2b00      	cmp	r3, #0
 8011684:	d002      	beq.n	801168c <USBD_LL_SetupStage+0x4a>
 8011686:	2b01      	cmp	r3, #1
 8011688:	d00a      	beq.n	80116a0 <USBD_LL_SetupStage+0x5e>
 801168a:	e01d      	b.n	80116c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011692:	4619      	mov	r1, r3
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 fad1 	bl	8011c3c <USBD_StdDevReq>
 801169a:	4603      	mov	r3, r0
 801169c:	73fb      	strb	r3, [r7, #15]
      break;
 801169e:	e020      	b.n	80116e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80116a6:	4619      	mov	r1, r3
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f000 fb39 	bl	8011d20 <USBD_StdItfReq>
 80116ae:	4603      	mov	r3, r0
 80116b0:	73fb      	strb	r3, [r7, #15]
      break;
 80116b2:	e016      	b.n	80116e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80116ba:	4619      	mov	r1, r3
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f000 fb9b 	bl	8011df8 <USBD_StdEPReq>
 80116c2:	4603      	mov	r3, r0
 80116c4:	73fb      	strb	r3, [r7, #15]
      break;
 80116c6:	e00c      	b.n	80116e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80116ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f005 fb30 	bl	8016d3c <USBD_LL_StallEP>
 80116dc:	4603      	mov	r3, r0
 80116de:	73fb      	strb	r3, [r7, #15]
      break;
 80116e0:	bf00      	nop
  }

  return ret;
 80116e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3710      	adds	r7, #16
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b086      	sub	sp, #24
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	460b      	mov	r3, r1
 80116f6:	607a      	str	r2, [r7, #4]
 80116f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80116fa:	2300      	movs	r3, #0
 80116fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80116fe:	7afb      	ldrb	r3, [r7, #11]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d16e      	bne.n	80117e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801170a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011712:	2b03      	cmp	r3, #3
 8011714:	f040 8098 	bne.w	8011848 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	689a      	ldr	r2, [r3, #8]
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	429a      	cmp	r2, r3
 8011722:	d913      	bls.n	801174c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	689a      	ldr	r2, [r3, #8]
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	1ad2      	subs	r2, r2, r3
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	68da      	ldr	r2, [r3, #12]
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	4293      	cmp	r3, r2
 801173c:	bf28      	it	cs
 801173e:	4613      	movcs	r3, r2
 8011740:	461a      	mov	r2, r3
 8011742:	6879      	ldr	r1, [r7, #4]
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f001 f92c 	bl	80129a2 <USBD_CtlContinueRx>
 801174a:	e07d      	b.n	8011848 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011752:	f003 031f 	and.w	r3, r3, #31
 8011756:	2b02      	cmp	r3, #2
 8011758:	d014      	beq.n	8011784 <USBD_LL_DataOutStage+0x98>
 801175a:	2b02      	cmp	r3, #2
 801175c:	d81d      	bhi.n	801179a <USBD_LL_DataOutStage+0xae>
 801175e:	2b00      	cmp	r3, #0
 8011760:	d002      	beq.n	8011768 <USBD_LL_DataOutStage+0x7c>
 8011762:	2b01      	cmp	r3, #1
 8011764:	d003      	beq.n	801176e <USBD_LL_DataOutStage+0x82>
 8011766:	e018      	b.n	801179a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011768:	2300      	movs	r3, #0
 801176a:	75bb      	strb	r3, [r7, #22]
            break;
 801176c:	e018      	b.n	80117a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011774:	b2db      	uxtb	r3, r3
 8011776:	4619      	mov	r1, r3
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f000 f9d2 	bl	8011b22 <USBD_CoreFindIF>
 801177e:	4603      	mov	r3, r0
 8011780:	75bb      	strb	r3, [r7, #22]
            break;
 8011782:	e00d      	b.n	80117a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801178a:	b2db      	uxtb	r3, r3
 801178c:	4619      	mov	r1, r3
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f000 f9d4 	bl	8011b3c <USBD_CoreFindEP>
 8011794:	4603      	mov	r3, r0
 8011796:	75bb      	strb	r3, [r7, #22]
            break;
 8011798:	e002      	b.n	80117a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801179a:	2300      	movs	r3, #0
 801179c:	75bb      	strb	r3, [r7, #22]
            break;
 801179e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80117a0:	7dbb      	ldrb	r3, [r7, #22]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d119      	bne.n	80117da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	2b03      	cmp	r3, #3
 80117b0:	d113      	bne.n	80117da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80117b2:	7dba      	ldrb	r2, [r7, #22]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	32ae      	adds	r2, #174	@ 0xae
 80117b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00b      	beq.n	80117da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80117c2:	7dba      	ldrb	r2, [r7, #22]
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80117ca:	7dba      	ldrb	r2, [r7, #22]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	32ae      	adds	r2, #174	@ 0xae
 80117d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d4:	691b      	ldr	r3, [r3, #16]
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f001 f8f2 	bl	80129c4 <USBD_CtlSendStatus>
 80117e0:	e032      	b.n	8011848 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80117e2:	7afb      	ldrb	r3, [r7, #11]
 80117e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	4619      	mov	r1, r3
 80117ec:	68f8      	ldr	r0, [r7, #12]
 80117ee:	f000 f9a5 	bl	8011b3c <USBD_CoreFindEP>
 80117f2:	4603      	mov	r3, r0
 80117f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117f6:	7dbb      	ldrb	r3, [r7, #22]
 80117f8:	2bff      	cmp	r3, #255	@ 0xff
 80117fa:	d025      	beq.n	8011848 <USBD_LL_DataOutStage+0x15c>
 80117fc:	7dbb      	ldrb	r3, [r7, #22]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d122      	bne.n	8011848 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011808:	b2db      	uxtb	r3, r3
 801180a:	2b03      	cmp	r3, #3
 801180c:	d117      	bne.n	801183e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801180e:	7dba      	ldrb	r2, [r7, #22]
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	32ae      	adds	r2, #174	@ 0xae
 8011814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011818:	699b      	ldr	r3, [r3, #24]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00f      	beq.n	801183e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801181e:	7dba      	ldrb	r2, [r7, #22]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011826:	7dba      	ldrb	r2, [r7, #22]
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	32ae      	adds	r2, #174	@ 0xae
 801182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011830:	699b      	ldr	r3, [r3, #24]
 8011832:	7afa      	ldrb	r2, [r7, #11]
 8011834:	4611      	mov	r1, r2
 8011836:	68f8      	ldr	r0, [r7, #12]
 8011838:	4798      	blx	r3
 801183a:	4603      	mov	r3, r0
 801183c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801183e:	7dfb      	ldrb	r3, [r7, #23]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011844:	7dfb      	ldrb	r3, [r7, #23]
 8011846:	e000      	b.n	801184a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011848:	2300      	movs	r3, #0
}
 801184a:	4618      	mov	r0, r3
 801184c:	3718      	adds	r7, #24
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b086      	sub	sp, #24
 8011856:	af00      	add	r7, sp, #0
 8011858:	60f8      	str	r0, [r7, #12]
 801185a:	460b      	mov	r3, r1
 801185c:	607a      	str	r2, [r7, #4]
 801185e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011860:	7afb      	ldrb	r3, [r7, #11]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d16f      	bne.n	8011946 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	3314      	adds	r3, #20
 801186a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011872:	2b02      	cmp	r3, #2
 8011874:	d15a      	bne.n	801192c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	689a      	ldr	r2, [r3, #8]
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	429a      	cmp	r2, r3
 8011880:	d914      	bls.n	80118ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	689a      	ldr	r2, [r3, #8]
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	1ad2      	subs	r2, r2, r3
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	461a      	mov	r2, r3
 8011896:	6879      	ldr	r1, [r7, #4]
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f001 f854 	bl	8012946 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801189e:	2300      	movs	r3, #0
 80118a0:	2200      	movs	r2, #0
 80118a2:	2100      	movs	r1, #0
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f005 faf3 	bl	8016e90 <USBD_LL_PrepareReceive>
 80118aa:	e03f      	b.n	801192c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	68da      	ldr	r2, [r3, #12]
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d11c      	bne.n	80118f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	685a      	ldr	r2, [r3, #4]
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d316      	bcc.n	80118f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d20f      	bcs.n	80118f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80118d2:	2200      	movs	r2, #0
 80118d4:	2100      	movs	r1, #0
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f001 f835 	bl	8012946 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118e4:	2300      	movs	r3, #0
 80118e6:	2200      	movs	r2, #0
 80118e8:	2100      	movs	r1, #0
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f005 fad0 	bl	8016e90 <USBD_LL_PrepareReceive>
 80118f0:	e01c      	b.n	801192c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	2b03      	cmp	r3, #3
 80118fc:	d10f      	bne.n	801191e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d009      	beq.n	801191e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2200      	movs	r2, #0
 801190e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801191e:	2180      	movs	r1, #128	@ 0x80
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f005 fa0b 	bl	8016d3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011926:	68f8      	ldr	r0, [r7, #12]
 8011928:	f001 f85f 	bl	80129ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d03a      	beq.n	80119ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f7ff fe42 	bl	80115c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2200      	movs	r2, #0
 8011940:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011944:	e032      	b.n	80119ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011946:	7afb      	ldrb	r3, [r7, #11]
 8011948:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801194c:	b2db      	uxtb	r3, r3
 801194e:	4619      	mov	r1, r3
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f000 f8f3 	bl	8011b3c <USBD_CoreFindEP>
 8011956:	4603      	mov	r3, r0
 8011958:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801195a:	7dfb      	ldrb	r3, [r7, #23]
 801195c:	2bff      	cmp	r3, #255	@ 0xff
 801195e:	d025      	beq.n	80119ac <USBD_LL_DataInStage+0x15a>
 8011960:	7dfb      	ldrb	r3, [r7, #23]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d122      	bne.n	80119ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801196c:	b2db      	uxtb	r3, r3
 801196e:	2b03      	cmp	r3, #3
 8011970:	d11c      	bne.n	80119ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011972:	7dfa      	ldrb	r2, [r7, #23]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	32ae      	adds	r2, #174	@ 0xae
 8011978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801197c:	695b      	ldr	r3, [r3, #20]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d014      	beq.n	80119ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011982:	7dfa      	ldrb	r2, [r7, #23]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801198a:	7dfa      	ldrb	r2, [r7, #23]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	32ae      	adds	r2, #174	@ 0xae
 8011990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	7afa      	ldrb	r2, [r7, #11]
 8011998:	4611      	mov	r1, r2
 801199a:	68f8      	ldr	r0, [r7, #12]
 801199c:	4798      	blx	r3
 801199e:	4603      	mov	r3, r0
 80119a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80119a2:	7dbb      	ldrb	r3, [r7, #22]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80119a8:	7dbb      	ldrb	r3, [r7, #22]
 80119aa:	e000      	b.n	80119ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80119be:	2300      	movs	r3, #0
 80119c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2201      	movs	r2, #1
 80119c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2200      	movs	r2, #0
 80119ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2200      	movs	r2, #0
 80119d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d014      	beq.n	8011a1c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00e      	beq.n	8011a1c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	6852      	ldr	r2, [r2, #4]
 8011a0a:	b2d2      	uxtb	r2, r2
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	4798      	blx	r3
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d001      	beq.n	8011a1c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011a18:	2303      	movs	r3, #3
 8011a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a1c:	2340      	movs	r3, #64	@ 0x40
 8011a1e:	2200      	movs	r2, #0
 8011a20:	2100      	movs	r1, #0
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f005 f945 	bl	8016cb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2240      	movs	r2, #64	@ 0x40
 8011a34:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011a38:	2340      	movs	r3, #64	@ 0x40
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2180      	movs	r1, #128	@ 0x80
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f005 f937 	bl	8016cb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2240      	movs	r2, #64	@ 0x40
 8011a4e:	621a      	str	r2, [r3, #32]

  return ret;
 8011a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011a5a:	b480      	push	{r7}
 8011a5c:	b083      	sub	sp, #12
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	460b      	mov	r3, r1
 8011a64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	78fa      	ldrb	r2, [r7, #3]
 8011a6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	370c      	adds	r7, #12
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr

08011a7a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011a7a:	b480      	push	{r7}
 8011a7c:	b083      	sub	sp, #12
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	2b04      	cmp	r3, #4
 8011a8c:	d006      	beq.n	8011a9c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a94:	b2da      	uxtb	r2, r3
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2204      	movs	r2, #4
 8011aa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011ab2:	b480      	push	{r7}
 8011ab4:	b083      	sub	sp, #12
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	2b04      	cmp	r3, #4
 8011ac4:	d106      	bne.n	8011ad4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011acc:	b2da      	uxtb	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	370c      	adds	r7, #12
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr

08011ae2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b082      	sub	sp, #8
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	2b03      	cmp	r3, #3
 8011af4:	d110      	bne.n	8011b18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d00b      	beq.n	8011b18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b06:	69db      	ldr	r3, [r3, #28]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d005      	beq.n	8011b18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b12:	69db      	ldr	r3, [r3, #28]
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011b18:	2300      	movs	r3, #0
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b22:	b480      	push	{r7}
 8011b24:	b083      	sub	sp, #12
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	460b      	mov	r3, r1
 8011b2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b083      	sub	sp, #12
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	460b      	mov	r3, r1
 8011b46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr

08011b56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b086      	sub	sp, #24
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
 8011b5e:	460b      	mov	r3, r1
 8011b60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	885b      	ldrh	r3, [r3, #2]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	68fa      	ldr	r2, [r7, #12]
 8011b76:	7812      	ldrb	r2, [r2, #0]
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d91f      	bls.n	8011bbc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011b82:	e013      	b.n	8011bac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011b84:	f107 030a 	add.w	r3, r7, #10
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6978      	ldr	r0, [r7, #20]
 8011b8c:	f000 f81b 	bl	8011bc6 <USBD_GetNextDesc>
 8011b90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	785b      	ldrb	r3, [r3, #1]
 8011b96:	2b05      	cmp	r3, #5
 8011b98:	d108      	bne.n	8011bac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	789b      	ldrb	r3, [r3, #2]
 8011ba2:	78fa      	ldrb	r2, [r7, #3]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d008      	beq.n	8011bba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	885b      	ldrh	r3, [r3, #2]
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	897b      	ldrh	r3, [r7, #10]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d8e5      	bhi.n	8011b84 <USBD_GetEpDesc+0x2e>
 8011bb8:	e000      	b.n	8011bbc <USBD_GetEpDesc+0x66>
          break;
 8011bba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011bbc:	693b      	ldr	r3, [r7, #16]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3718      	adds	r7, #24
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011bc6:	b480      	push	{r7}
 8011bc8:	b085      	sub	sp, #20
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	68fa      	ldr	r2, [r7, #12]
 8011bda:	7812      	ldrb	r2, [r2, #0]
 8011bdc:	4413      	add	r3, r2
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	461a      	mov	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4413      	add	r3, r2
 8011bee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3714      	adds	r7, #20
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr

08011bfe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011bfe:	b480      	push	{r7}
 8011c00:	b087      	sub	sp, #28
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	3301      	adds	r3, #1
 8011c14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011c1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011c20:	021b      	lsls	r3, r3, #8
 8011c22:	b21a      	sxth	r2, r3
 8011c24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	b21b      	sxth	r3, r3
 8011c2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011c2e:	89fb      	ldrh	r3, [r7, #14]
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	371c      	adds	r7, #28
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011c52:	2b40      	cmp	r3, #64	@ 0x40
 8011c54:	d005      	beq.n	8011c62 <USBD_StdDevReq+0x26>
 8011c56:	2b40      	cmp	r3, #64	@ 0x40
 8011c58:	d857      	bhi.n	8011d0a <USBD_StdDevReq+0xce>
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d00f      	beq.n	8011c7e <USBD_StdDevReq+0x42>
 8011c5e:	2b20      	cmp	r3, #32
 8011c60:	d153      	bne.n	8011d0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	32ae      	adds	r2, #174	@ 0xae
 8011c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	6839      	ldr	r1, [r7, #0]
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	4798      	blx	r3
 8011c78:	4603      	mov	r3, r0
 8011c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8011c7c:	e04a      	b.n	8011d14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	785b      	ldrb	r3, [r3, #1]
 8011c82:	2b09      	cmp	r3, #9
 8011c84:	d83b      	bhi.n	8011cfe <USBD_StdDevReq+0xc2>
 8011c86:	a201      	add	r2, pc, #4	@ (adr r2, 8011c8c <USBD_StdDevReq+0x50>)
 8011c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c8c:	08011ce1 	.word	0x08011ce1
 8011c90:	08011cf5 	.word	0x08011cf5
 8011c94:	08011cff 	.word	0x08011cff
 8011c98:	08011ceb 	.word	0x08011ceb
 8011c9c:	08011cff 	.word	0x08011cff
 8011ca0:	08011cbf 	.word	0x08011cbf
 8011ca4:	08011cb5 	.word	0x08011cb5
 8011ca8:	08011cff 	.word	0x08011cff
 8011cac:	08011cd7 	.word	0x08011cd7
 8011cb0:	08011cc9 	.word	0x08011cc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 fa3c 	bl	8012134 <USBD_GetDescriptor>
          break;
 8011cbc:	e024      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011cbe:	6839      	ldr	r1, [r7, #0]
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fbcb 	bl	801245c <USBD_SetAddress>
          break;
 8011cc6:	e01f      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011cc8:	6839      	ldr	r1, [r7, #0]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 fc0a 	bl	80124e4 <USBD_SetConfig>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73fb      	strb	r3, [r7, #15]
          break;
 8011cd4:	e018      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 fcad 	bl	8012638 <USBD_GetConfig>
          break;
 8011cde:	e013      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fcde 	bl	80126a4 <USBD_GetStatus>
          break;
 8011ce8:	e00e      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011cea:	6839      	ldr	r1, [r7, #0]
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 fd0d 	bl	801270c <USBD_SetFeature>
          break;
 8011cf2:	e009      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 fd31 	bl	801275e <USBD_ClrFeature>
          break;
 8011cfc:	e004      	b.n	8011d08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011cfe:	6839      	ldr	r1, [r7, #0]
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f000 fd88 	bl	8012816 <USBD_CtlError>
          break;
 8011d06:	bf00      	nop
      }
      break;
 8011d08:	e004      	b.n	8011d14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f000 fd82 	bl	8012816 <USBD_CtlError>
      break;
 8011d12:	bf00      	nop
  }

  return ret;
 8011d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop

08011d20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011d36:	2b40      	cmp	r3, #64	@ 0x40
 8011d38:	d005      	beq.n	8011d46 <USBD_StdItfReq+0x26>
 8011d3a:	2b40      	cmp	r3, #64	@ 0x40
 8011d3c:	d852      	bhi.n	8011de4 <USBD_StdItfReq+0xc4>
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d001      	beq.n	8011d46 <USBD_StdItfReq+0x26>
 8011d42:	2b20      	cmp	r3, #32
 8011d44:	d14e      	bne.n	8011de4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	3b01      	subs	r3, #1
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	d840      	bhi.n	8011dd6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	889b      	ldrh	r3, [r3, #4]
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d836      	bhi.n	8011dcc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	889b      	ldrh	r3, [r3, #4]
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7ff fedb 	bl	8011b22 <USBD_CoreFindIF>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d70:	7bbb      	ldrb	r3, [r7, #14]
 8011d72:	2bff      	cmp	r3, #255	@ 0xff
 8011d74:	d01d      	beq.n	8011db2 <USBD_StdItfReq+0x92>
 8011d76:	7bbb      	ldrb	r3, [r7, #14]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d11a      	bne.n	8011db2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011d7c:	7bba      	ldrb	r2, [r7, #14]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	32ae      	adds	r2, #174	@ 0xae
 8011d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00f      	beq.n	8011dac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011d8c:	7bba      	ldrb	r2, [r7, #14]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011d94:	7bba      	ldrb	r2, [r7, #14]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	32ae      	adds	r2, #174	@ 0xae
 8011d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	6839      	ldr	r1, [r7, #0]
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	4798      	blx	r3
 8011da6:	4603      	mov	r3, r0
 8011da8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011daa:	e004      	b.n	8011db6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011dac:	2303      	movs	r3, #3
 8011dae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011db0:	e001      	b.n	8011db6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011db2:	2303      	movs	r3, #3
 8011db4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	88db      	ldrh	r3, [r3, #6]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d110      	bne.n	8011de0 <USBD_StdItfReq+0xc0>
 8011dbe:	7bfb      	ldrb	r3, [r7, #15]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d10d      	bne.n	8011de0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 fdfd 	bl	80129c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011dca:	e009      	b.n	8011de0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 fd21 	bl	8012816 <USBD_CtlError>
          break;
 8011dd4:	e004      	b.n	8011de0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011dd6:	6839      	ldr	r1, [r7, #0]
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 fd1c 	bl	8012816 <USBD_CtlError>
          break;
 8011dde:	e000      	b.n	8011de2 <USBD_StdItfReq+0xc2>
          break;
 8011de0:	bf00      	nop
      }
      break;
 8011de2:	e004      	b.n	8011dee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 fd15 	bl	8012816 <USBD_CtlError>
      break;
 8011dec:	bf00      	nop
  }

  return ret;
 8011dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3710      	adds	r7, #16
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	889b      	ldrh	r3, [r3, #4]
 8011e0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e14:	2b40      	cmp	r3, #64	@ 0x40
 8011e16:	d007      	beq.n	8011e28 <USBD_StdEPReq+0x30>
 8011e18:	2b40      	cmp	r3, #64	@ 0x40
 8011e1a:	f200 817f 	bhi.w	801211c <USBD_StdEPReq+0x324>
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d02a      	beq.n	8011e78 <USBD_StdEPReq+0x80>
 8011e22:	2b20      	cmp	r3, #32
 8011e24:	f040 817a 	bne.w	801211c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011e28:	7bbb      	ldrb	r3, [r7, #14]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff fe85 	bl	8011b3c <USBD_CoreFindEP>
 8011e32:	4603      	mov	r3, r0
 8011e34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e36:	7b7b      	ldrb	r3, [r7, #13]
 8011e38:	2bff      	cmp	r3, #255	@ 0xff
 8011e3a:	f000 8174 	beq.w	8012126 <USBD_StdEPReq+0x32e>
 8011e3e:	7b7b      	ldrb	r3, [r7, #13]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f040 8170 	bne.w	8012126 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011e46:	7b7a      	ldrb	r2, [r7, #13]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011e4e:	7b7a      	ldrb	r2, [r7, #13]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	32ae      	adds	r2, #174	@ 0xae
 8011e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f000 8163 	beq.w	8012126 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011e60:	7b7a      	ldrb	r2, [r7, #13]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	32ae      	adds	r2, #174	@ 0xae
 8011e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e6a:	689b      	ldr	r3, [r3, #8]
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	4798      	blx	r3
 8011e72:	4603      	mov	r3, r0
 8011e74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011e76:	e156      	b.n	8012126 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	785b      	ldrb	r3, [r3, #1]
 8011e7c:	2b03      	cmp	r3, #3
 8011e7e:	d008      	beq.n	8011e92 <USBD_StdEPReq+0x9a>
 8011e80:	2b03      	cmp	r3, #3
 8011e82:	f300 8145 	bgt.w	8012110 <USBD_StdEPReq+0x318>
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	f000 809b 	beq.w	8011fc2 <USBD_StdEPReq+0x1ca>
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d03c      	beq.n	8011f0a <USBD_StdEPReq+0x112>
 8011e90:	e13e      	b.n	8012110 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d002      	beq.n	8011ea4 <USBD_StdEPReq+0xac>
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d016      	beq.n	8011ed0 <USBD_StdEPReq+0xd8>
 8011ea2:	e02c      	b.n	8011efe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ea4:	7bbb      	ldrb	r3, [r7, #14]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00d      	beq.n	8011ec6 <USBD_StdEPReq+0xce>
 8011eaa:	7bbb      	ldrb	r3, [r7, #14]
 8011eac:	2b80      	cmp	r3, #128	@ 0x80
 8011eae:	d00a      	beq.n	8011ec6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011eb0:	7bbb      	ldrb	r3, [r7, #14]
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f004 ff41 	bl	8016d3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011eba:	2180      	movs	r1, #128	@ 0x80
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f004 ff3d 	bl	8016d3c <USBD_LL_StallEP>
 8011ec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011ec4:	e020      	b.n	8011f08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011ec6:	6839      	ldr	r1, [r7, #0]
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 fca4 	bl	8012816 <USBD_CtlError>
              break;
 8011ece:	e01b      	b.n	8011f08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	885b      	ldrh	r3, [r3, #2]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10e      	bne.n	8011ef6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ed8:	7bbb      	ldrb	r3, [r7, #14]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00b      	beq.n	8011ef6 <USBD_StdEPReq+0xfe>
 8011ede:	7bbb      	ldrb	r3, [r7, #14]
 8011ee0:	2b80      	cmp	r3, #128	@ 0x80
 8011ee2:	d008      	beq.n	8011ef6 <USBD_StdEPReq+0xfe>
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	88db      	ldrh	r3, [r3, #6]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d104      	bne.n	8011ef6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011eec:	7bbb      	ldrb	r3, [r7, #14]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f004 ff23 	bl	8016d3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 fd64 	bl	80129c4 <USBD_CtlSendStatus>

              break;
 8011efc:	e004      	b.n	8011f08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011efe:	6839      	ldr	r1, [r7, #0]
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f000 fc88 	bl	8012816 <USBD_CtlError>
              break;
 8011f06:	bf00      	nop
          }
          break;
 8011f08:	e107      	b.n	801211a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b02      	cmp	r3, #2
 8011f14:	d002      	beq.n	8011f1c <USBD_StdEPReq+0x124>
 8011f16:	2b03      	cmp	r3, #3
 8011f18:	d016      	beq.n	8011f48 <USBD_StdEPReq+0x150>
 8011f1a:	e04b      	b.n	8011fb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f1c:	7bbb      	ldrb	r3, [r7, #14]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00d      	beq.n	8011f3e <USBD_StdEPReq+0x146>
 8011f22:	7bbb      	ldrb	r3, [r7, #14]
 8011f24:	2b80      	cmp	r3, #128	@ 0x80
 8011f26:	d00a      	beq.n	8011f3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f28:	7bbb      	ldrb	r3, [r7, #14]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f004 ff05 	bl	8016d3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f32:	2180      	movs	r1, #128	@ 0x80
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f004 ff01 	bl	8016d3c <USBD_LL_StallEP>
 8011f3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f3c:	e040      	b.n	8011fc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011f3e:	6839      	ldr	r1, [r7, #0]
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f000 fc68 	bl	8012816 <USBD_CtlError>
              break;
 8011f46:	e03b      	b.n	8011fc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	885b      	ldrh	r3, [r3, #2]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d136      	bne.n	8011fbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011f50:	7bbb      	ldrb	r3, [r7, #14]
 8011f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d004      	beq.n	8011f64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f5a:	7bbb      	ldrb	r3, [r7, #14]
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f004 ff0b 	bl	8016d7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 fd2d 	bl	80129c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011f6a:	7bbb      	ldrb	r3, [r7, #14]
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7ff fde4 	bl	8011b3c <USBD_CoreFindEP>
 8011f74:	4603      	mov	r3, r0
 8011f76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f78:	7b7b      	ldrb	r3, [r7, #13]
 8011f7a:	2bff      	cmp	r3, #255	@ 0xff
 8011f7c:	d01f      	beq.n	8011fbe <USBD_StdEPReq+0x1c6>
 8011f7e:	7b7b      	ldrb	r3, [r7, #13]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d11c      	bne.n	8011fbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011f84:	7b7a      	ldrb	r2, [r7, #13]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011f8c:	7b7a      	ldrb	r2, [r7, #13]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	32ae      	adds	r2, #174	@ 0xae
 8011f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d010      	beq.n	8011fbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f9c:	7b7a      	ldrb	r2, [r7, #13]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	32ae      	adds	r2, #174	@ 0xae
 8011fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	6839      	ldr	r1, [r7, #0]
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	4798      	blx	r3
 8011fae:	4603      	mov	r3, r0
 8011fb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011fb2:	e004      	b.n	8011fbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011fb4:	6839      	ldr	r1, [r7, #0]
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fc2d 	bl	8012816 <USBD_CtlError>
              break;
 8011fbc:	e000      	b.n	8011fc0 <USBD_StdEPReq+0x1c8>
              break;
 8011fbe:	bf00      	nop
          }
          break;
 8011fc0:	e0ab      	b.n	801211a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	2b02      	cmp	r3, #2
 8011fcc:	d002      	beq.n	8011fd4 <USBD_StdEPReq+0x1dc>
 8011fce:	2b03      	cmp	r3, #3
 8011fd0:	d032      	beq.n	8012038 <USBD_StdEPReq+0x240>
 8011fd2:	e097      	b.n	8012104 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fd4:	7bbb      	ldrb	r3, [r7, #14]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d007      	beq.n	8011fea <USBD_StdEPReq+0x1f2>
 8011fda:	7bbb      	ldrb	r3, [r7, #14]
 8011fdc:	2b80      	cmp	r3, #128	@ 0x80
 8011fde:	d004      	beq.n	8011fea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011fe0:	6839      	ldr	r1, [r7, #0]
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f000 fc17 	bl	8012816 <USBD_CtlError>
                break;
 8011fe8:	e091      	b.n	801210e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	da0b      	bge.n	801200a <USBD_StdEPReq+0x212>
 8011ff2:	7bbb      	ldrb	r3, [r7, #14]
 8011ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	009b      	lsls	r3, r3, #2
 8011ffc:	4413      	add	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	3310      	adds	r3, #16
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	4413      	add	r3, r2
 8012006:	3304      	adds	r3, #4
 8012008:	e00b      	b.n	8012022 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801200a:	7bbb      	ldrb	r3, [r7, #14]
 801200c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012010:	4613      	mov	r3, r2
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	4413      	add	r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	4413      	add	r3, r2
 8012020:	3304      	adds	r3, #4
 8012022:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	2202      	movs	r2, #2
 801202e:	4619      	mov	r1, r3
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 fc6d 	bl	8012910 <USBD_CtlSendData>
              break;
 8012036:	e06a      	b.n	801210e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801203c:	2b00      	cmp	r3, #0
 801203e:	da11      	bge.n	8012064 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012040:	7bbb      	ldrb	r3, [r7, #14]
 8012042:	f003 020f 	and.w	r2, r3, #15
 8012046:	6879      	ldr	r1, [r7, #4]
 8012048:	4613      	mov	r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4413      	add	r3, r2
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	440b      	add	r3, r1
 8012052:	3324      	adds	r3, #36	@ 0x24
 8012054:	881b      	ldrh	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d117      	bne.n	801208a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801205a:	6839      	ldr	r1, [r7, #0]
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 fbda 	bl	8012816 <USBD_CtlError>
                  break;
 8012062:	e054      	b.n	801210e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012064:	7bbb      	ldrb	r3, [r7, #14]
 8012066:	f003 020f 	and.w	r2, r3, #15
 801206a:	6879      	ldr	r1, [r7, #4]
 801206c:	4613      	mov	r3, r2
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	4413      	add	r3, r2
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	440b      	add	r3, r1
 8012076:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d104      	bne.n	801208a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012080:	6839      	ldr	r1, [r7, #0]
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fbc7 	bl	8012816 <USBD_CtlError>
                  break;
 8012088:	e041      	b.n	801210e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801208a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801208e:	2b00      	cmp	r3, #0
 8012090:	da0b      	bge.n	80120aa <USBD_StdEPReq+0x2b2>
 8012092:	7bbb      	ldrb	r3, [r7, #14]
 8012094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012098:	4613      	mov	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	3310      	adds	r3, #16
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	4413      	add	r3, r2
 80120a6:	3304      	adds	r3, #4
 80120a8:	e00b      	b.n	80120c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80120aa:	7bbb      	ldrb	r3, [r7, #14]
 80120ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120b0:	4613      	mov	r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	4413      	add	r3, r2
 80120b6:	009b      	lsls	r3, r3, #2
 80120b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	4413      	add	r3, r2
 80120c0:	3304      	adds	r3, #4
 80120c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80120c4:	7bbb      	ldrb	r3, [r7, #14]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d002      	beq.n	80120d0 <USBD_StdEPReq+0x2d8>
 80120ca:	7bbb      	ldrb	r3, [r7, #14]
 80120cc:	2b80      	cmp	r3, #128	@ 0x80
 80120ce:	d103      	bne.n	80120d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	2200      	movs	r2, #0
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	e00e      	b.n	80120f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120d8:	7bbb      	ldrb	r3, [r7, #14]
 80120da:	4619      	mov	r1, r3
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f004 fe6b 	bl	8016db8 <USBD_LL_IsStallEP>
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d003      	beq.n	80120f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	2201      	movs	r2, #1
 80120ec:	601a      	str	r2, [r3, #0]
 80120ee:	e002      	b.n	80120f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2200      	movs	r2, #0
 80120f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	2202      	movs	r2, #2
 80120fa:	4619      	mov	r1, r3
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f000 fc07 	bl	8012910 <USBD_CtlSendData>
              break;
 8012102:	e004      	b.n	801210e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012104:	6839      	ldr	r1, [r7, #0]
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f000 fb85 	bl	8012816 <USBD_CtlError>
              break;
 801210c:	bf00      	nop
          }
          break;
 801210e:	e004      	b.n	801211a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012110:	6839      	ldr	r1, [r7, #0]
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f000 fb7f 	bl	8012816 <USBD_CtlError>
          break;
 8012118:	bf00      	nop
      }
      break;
 801211a:	e005      	b.n	8012128 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 fb79 	bl	8012816 <USBD_CtlError>
      break;
 8012124:	e000      	b.n	8012128 <USBD_StdEPReq+0x330>
      break;
 8012126:	bf00      	nop
  }

  return ret;
 8012128:	7bfb      	ldrb	r3, [r7, #15]
}
 801212a:	4618      	mov	r0, r3
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
	...

08012134 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801213e:	2300      	movs	r3, #0
 8012140:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012142:	2300      	movs	r3, #0
 8012144:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012146:	2300      	movs	r3, #0
 8012148:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	885b      	ldrh	r3, [r3, #2]
 801214e:	0a1b      	lsrs	r3, r3, #8
 8012150:	b29b      	uxth	r3, r3
 8012152:	3b01      	subs	r3, #1
 8012154:	2b0e      	cmp	r3, #14
 8012156:	f200 8152 	bhi.w	80123fe <USBD_GetDescriptor+0x2ca>
 801215a:	a201      	add	r2, pc, #4	@ (adr r2, 8012160 <USBD_GetDescriptor+0x2c>)
 801215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012160:	080121d1 	.word	0x080121d1
 8012164:	080121e9 	.word	0x080121e9
 8012168:	08012229 	.word	0x08012229
 801216c:	080123ff 	.word	0x080123ff
 8012170:	080123ff 	.word	0x080123ff
 8012174:	0801239f 	.word	0x0801239f
 8012178:	080123cb 	.word	0x080123cb
 801217c:	080123ff 	.word	0x080123ff
 8012180:	080123ff 	.word	0x080123ff
 8012184:	080123ff 	.word	0x080123ff
 8012188:	080123ff 	.word	0x080123ff
 801218c:	080123ff 	.word	0x080123ff
 8012190:	080123ff 	.word	0x080123ff
 8012194:	080123ff 	.word	0x080123ff
 8012198:	0801219d 	.word	0x0801219d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121a2:	69db      	ldr	r3, [r3, #28]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00b      	beq.n	80121c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121ae:	69db      	ldr	r3, [r3, #28]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	7c12      	ldrb	r2, [r2, #16]
 80121b4:	f107 0108 	add.w	r1, r7, #8
 80121b8:	4610      	mov	r0, r2
 80121ba:	4798      	blx	r3
 80121bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121be:	e126      	b.n	801240e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 fb27 	bl	8012816 <USBD_CtlError>
        err++;
 80121c8:	7afb      	ldrb	r3, [r7, #11]
 80121ca:	3301      	adds	r3, #1
 80121cc:	72fb      	strb	r3, [r7, #11]
      break;
 80121ce:	e11e      	b.n	801240e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	7c12      	ldrb	r2, [r2, #16]
 80121dc:	f107 0108 	add.w	r1, r7, #8
 80121e0:	4610      	mov	r0, r2
 80121e2:	4798      	blx	r3
 80121e4:	60f8      	str	r0, [r7, #12]
      break;
 80121e6:	e112      	b.n	801240e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	7c1b      	ldrb	r3, [r3, #16]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10d      	bne.n	801220c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121f8:	f107 0208 	add.w	r2, r7, #8
 80121fc:	4610      	mov	r0, r2
 80121fe:	4798      	blx	r3
 8012200:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	3301      	adds	r3, #1
 8012206:	2202      	movs	r2, #2
 8012208:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801220a:	e100      	b.n	801240e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012214:	f107 0208 	add.w	r2, r7, #8
 8012218:	4610      	mov	r0, r2
 801221a:	4798      	blx	r3
 801221c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	3301      	adds	r3, #1
 8012222:	2202      	movs	r2, #2
 8012224:	701a      	strb	r2, [r3, #0]
      break;
 8012226:	e0f2      	b.n	801240e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	885b      	ldrh	r3, [r3, #2]
 801222c:	b2db      	uxtb	r3, r3
 801222e:	2b05      	cmp	r3, #5
 8012230:	f200 80ac 	bhi.w	801238c <USBD_GetDescriptor+0x258>
 8012234:	a201      	add	r2, pc, #4	@ (adr r2, 801223c <USBD_GetDescriptor+0x108>)
 8012236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801223a:	bf00      	nop
 801223c:	08012255 	.word	0x08012255
 8012240:	08012289 	.word	0x08012289
 8012244:	080122bd 	.word	0x080122bd
 8012248:	080122f1 	.word	0x080122f1
 801224c:	08012325 	.word	0x08012325
 8012250:	08012359 	.word	0x08012359
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	7c12      	ldrb	r2, [r2, #16]
 801226c:	f107 0108 	add.w	r1, r7, #8
 8012270:	4610      	mov	r0, r2
 8012272:	4798      	blx	r3
 8012274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012276:	e091      	b.n	801239c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f000 facb 	bl	8012816 <USBD_CtlError>
            err++;
 8012280:	7afb      	ldrb	r3, [r7, #11]
 8012282:	3301      	adds	r3, #1
 8012284:	72fb      	strb	r3, [r7, #11]
          break;
 8012286:	e089      	b.n	801239c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d00b      	beq.n	80122ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	7c12      	ldrb	r2, [r2, #16]
 80122a0:	f107 0108 	add.w	r1, r7, #8
 80122a4:	4610      	mov	r0, r2
 80122a6:	4798      	blx	r3
 80122a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122aa:	e077      	b.n	801239c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122ac:	6839      	ldr	r1, [r7, #0]
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fab1 	bl	8012816 <USBD_CtlError>
            err++;
 80122b4:	7afb      	ldrb	r3, [r7, #11]
 80122b6:	3301      	adds	r3, #1
 80122b8:	72fb      	strb	r3, [r7, #11]
          break;
 80122ba:	e06f      	b.n	801239c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00b      	beq.n	80122e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	7c12      	ldrb	r2, [r2, #16]
 80122d4:	f107 0108 	add.w	r1, r7, #8
 80122d8:	4610      	mov	r0, r2
 80122da:	4798      	blx	r3
 80122dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122de:	e05d      	b.n	801239c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fa97 	bl	8012816 <USBD_CtlError>
            err++;
 80122e8:	7afb      	ldrb	r3, [r7, #11]
 80122ea:	3301      	adds	r3, #1
 80122ec:	72fb      	strb	r3, [r7, #11]
          break;
 80122ee:	e055      	b.n	801239c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122f6:	691b      	ldr	r3, [r3, #16]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d00b      	beq.n	8012314 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012302:	691b      	ldr	r3, [r3, #16]
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	7c12      	ldrb	r2, [r2, #16]
 8012308:	f107 0108 	add.w	r1, r7, #8
 801230c:	4610      	mov	r0, r2
 801230e:	4798      	blx	r3
 8012310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012312:	e043      	b.n	801239c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012314:	6839      	ldr	r1, [r7, #0]
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 fa7d 	bl	8012816 <USBD_CtlError>
            err++;
 801231c:	7afb      	ldrb	r3, [r7, #11]
 801231e:	3301      	adds	r3, #1
 8012320:	72fb      	strb	r3, [r7, #11]
          break;
 8012322:	e03b      	b.n	801239c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801232a:	695b      	ldr	r3, [r3, #20]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d00b      	beq.n	8012348 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	687a      	ldr	r2, [r7, #4]
 801233a:	7c12      	ldrb	r2, [r2, #16]
 801233c:	f107 0108 	add.w	r1, r7, #8
 8012340:	4610      	mov	r0, r2
 8012342:	4798      	blx	r3
 8012344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012346:	e029      	b.n	801239c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 fa63 	bl	8012816 <USBD_CtlError>
            err++;
 8012350:	7afb      	ldrb	r3, [r7, #11]
 8012352:	3301      	adds	r3, #1
 8012354:	72fb      	strb	r3, [r7, #11]
          break;
 8012356:	e021      	b.n	801239c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801235e:	699b      	ldr	r3, [r3, #24]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00b      	beq.n	801237c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801236a:	699b      	ldr	r3, [r3, #24]
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	7c12      	ldrb	r2, [r2, #16]
 8012370:	f107 0108 	add.w	r1, r7, #8
 8012374:	4610      	mov	r0, r2
 8012376:	4798      	blx	r3
 8012378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801237a:	e00f      	b.n	801239c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801237c:	6839      	ldr	r1, [r7, #0]
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 fa49 	bl	8012816 <USBD_CtlError>
            err++;
 8012384:	7afb      	ldrb	r3, [r7, #11]
 8012386:	3301      	adds	r3, #1
 8012388:	72fb      	strb	r3, [r7, #11]
          break;
 801238a:	e007      	b.n	801239c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801238c:	6839      	ldr	r1, [r7, #0]
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 fa41 	bl	8012816 <USBD_CtlError>
          err++;
 8012394:	7afb      	ldrb	r3, [r7, #11]
 8012396:	3301      	adds	r3, #1
 8012398:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801239a:	bf00      	nop
      }
      break;
 801239c:	e037      	b.n	801240e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	7c1b      	ldrb	r3, [r3, #16]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d109      	bne.n	80123ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123ae:	f107 0208 	add.w	r2, r7, #8
 80123b2:	4610      	mov	r0, r2
 80123b4:	4798      	blx	r3
 80123b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123b8:	e029      	b.n	801240e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123ba:	6839      	ldr	r1, [r7, #0]
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f000 fa2a 	bl	8012816 <USBD_CtlError>
        err++;
 80123c2:	7afb      	ldrb	r3, [r7, #11]
 80123c4:	3301      	adds	r3, #1
 80123c6:	72fb      	strb	r3, [r7, #11]
      break;
 80123c8:	e021      	b.n	801240e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7c1b      	ldrb	r3, [r3, #16]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d10d      	bne.n	80123ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123da:	f107 0208 	add.w	r2, r7, #8
 80123de:	4610      	mov	r0, r2
 80123e0:	4798      	blx	r3
 80123e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	3301      	adds	r3, #1
 80123e8:	2207      	movs	r2, #7
 80123ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123ec:	e00f      	b.n	801240e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123ee:	6839      	ldr	r1, [r7, #0]
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f000 fa10 	bl	8012816 <USBD_CtlError>
        err++;
 80123f6:	7afb      	ldrb	r3, [r7, #11]
 80123f8:	3301      	adds	r3, #1
 80123fa:	72fb      	strb	r3, [r7, #11]
      break;
 80123fc:	e007      	b.n	801240e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fa08 	bl	8012816 <USBD_CtlError>
      err++;
 8012406:	7afb      	ldrb	r3, [r7, #11]
 8012408:	3301      	adds	r3, #1
 801240a:	72fb      	strb	r3, [r7, #11]
      break;
 801240c:	bf00      	nop
  }

  if (err != 0U)
 801240e:	7afb      	ldrb	r3, [r7, #11]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d11e      	bne.n	8012452 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	88db      	ldrh	r3, [r3, #6]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d016      	beq.n	801244a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801241c:	893b      	ldrh	r3, [r7, #8]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00e      	beq.n	8012440 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	88da      	ldrh	r2, [r3, #6]
 8012426:	893b      	ldrh	r3, [r7, #8]
 8012428:	4293      	cmp	r3, r2
 801242a:	bf28      	it	cs
 801242c:	4613      	movcs	r3, r2
 801242e:	b29b      	uxth	r3, r3
 8012430:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012432:	893b      	ldrh	r3, [r7, #8]
 8012434:	461a      	mov	r2, r3
 8012436:	68f9      	ldr	r1, [r7, #12]
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 fa69 	bl	8012910 <USBD_CtlSendData>
 801243e:	e009      	b.n	8012454 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012440:	6839      	ldr	r1, [r7, #0]
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 f9e7 	bl	8012816 <USBD_CtlError>
 8012448:	e004      	b.n	8012454 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 faba 	bl	80129c4 <USBD_CtlSendStatus>
 8012450:	e000      	b.n	8012454 <USBD_GetDescriptor+0x320>
    return;
 8012452:	bf00      	nop
  }
}
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop

0801245c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	889b      	ldrh	r3, [r3, #4]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d131      	bne.n	80124d2 <USBD_SetAddress+0x76>
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	88db      	ldrh	r3, [r3, #6]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d12d      	bne.n	80124d2 <USBD_SetAddress+0x76>
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	885b      	ldrh	r3, [r3, #2]
 801247a:	2b7f      	cmp	r3, #127	@ 0x7f
 801247c:	d829      	bhi.n	80124d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	885b      	ldrh	r3, [r3, #2]
 8012482:	b2db      	uxtb	r3, r3
 8012484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012488:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012490:	b2db      	uxtb	r3, r3
 8012492:	2b03      	cmp	r3, #3
 8012494:	d104      	bne.n	80124a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 f9bc 	bl	8012816 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801249e:	e01d      	b.n	80124dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	7bfa      	ldrb	r2, [r7, #15]
 80124a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80124a8:	7bfb      	ldrb	r3, [r7, #15]
 80124aa:	4619      	mov	r1, r3
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f004 fcaf 	bl	8016e10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fa86 	bl	80129c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80124b8:	7bfb      	ldrb	r3, [r7, #15]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d004      	beq.n	80124c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2202      	movs	r2, #2
 80124c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124c6:	e009      	b.n	80124dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2201      	movs	r2, #1
 80124cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124d0:	e004      	b.n	80124dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f000 f99e 	bl	8012816 <USBD_CtlError>
  }
}
 80124da:	bf00      	nop
 80124dc:	bf00      	nop
 80124de:	3710      	adds	r7, #16
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124ee:	2300      	movs	r3, #0
 80124f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	885b      	ldrh	r3, [r3, #2]
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	4b4e      	ldr	r3, [pc, #312]	@ (8012634 <USBD_SetConfig+0x150>)
 80124fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80124fc:	4b4d      	ldr	r3, [pc, #308]	@ (8012634 <USBD_SetConfig+0x150>)
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d905      	bls.n	8012510 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012504:	6839      	ldr	r1, [r7, #0]
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f985 	bl	8012816 <USBD_CtlError>
    return USBD_FAIL;
 801250c:	2303      	movs	r3, #3
 801250e:	e08c      	b.n	801262a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012516:	b2db      	uxtb	r3, r3
 8012518:	2b02      	cmp	r3, #2
 801251a:	d002      	beq.n	8012522 <USBD_SetConfig+0x3e>
 801251c:	2b03      	cmp	r3, #3
 801251e:	d029      	beq.n	8012574 <USBD_SetConfig+0x90>
 8012520:	e075      	b.n	801260e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012522:	4b44      	ldr	r3, [pc, #272]	@ (8012634 <USBD_SetConfig+0x150>)
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d020      	beq.n	801256c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801252a:	4b42      	ldr	r3, [pc, #264]	@ (8012634 <USBD_SetConfig+0x150>)
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	461a      	mov	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012534:	4b3f      	ldr	r3, [pc, #252]	@ (8012634 <USBD_SetConfig+0x150>)
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	4619      	mov	r1, r3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f7ff f84b 	bl	80115d6 <USBD_SetClassConfig>
 8012540:	4603      	mov	r3, r0
 8012542:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012544:	7bfb      	ldrb	r3, [r7, #15]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d008      	beq.n	801255c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801254a:	6839      	ldr	r1, [r7, #0]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 f962 	bl	8012816 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2202      	movs	r2, #2
 8012556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801255a:	e065      	b.n	8012628 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 fa31 	bl	80129c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2203      	movs	r2, #3
 8012566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801256a:	e05d      	b.n	8012628 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fa29 	bl	80129c4 <USBD_CtlSendStatus>
      break;
 8012572:	e059      	b.n	8012628 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012574:	4b2f      	ldr	r3, [pc, #188]	@ (8012634 <USBD_SetConfig+0x150>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d112      	bne.n	80125a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2202      	movs	r2, #2
 8012580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012584:	4b2b      	ldr	r3, [pc, #172]	@ (8012634 <USBD_SetConfig+0x150>)
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	461a      	mov	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801258e:	4b29      	ldr	r3, [pc, #164]	@ (8012634 <USBD_SetConfig+0x150>)
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	4619      	mov	r1, r3
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7ff f83a 	bl	801160e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fa12 	bl	80129c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80125a0:	e042      	b.n	8012628 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80125a2:	4b24      	ldr	r3, [pc, #144]	@ (8012634 <USBD_SetConfig+0x150>)
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d02a      	beq.n	8012606 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	4619      	mov	r1, r3
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7ff f828 	bl	801160e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80125be:	4b1d      	ldr	r3, [pc, #116]	@ (8012634 <USBD_SetConfig+0x150>)
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	461a      	mov	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80125c8:	4b1a      	ldr	r3, [pc, #104]	@ (8012634 <USBD_SetConfig+0x150>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	4619      	mov	r1, r3
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff f801 	bl	80115d6 <USBD_SetClassConfig>
 80125d4:	4603      	mov	r3, r0
 80125d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00f      	beq.n	80125fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80125de:	6839      	ldr	r1, [r7, #0]
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 f918 	bl	8012816 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7ff f80d 	bl	801160e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2202      	movs	r2, #2
 80125f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80125fc:	e014      	b.n	8012628 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f9e0 	bl	80129c4 <USBD_CtlSendStatus>
      break;
 8012604:	e010      	b.n	8012628 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 f9dc 	bl	80129c4 <USBD_CtlSendStatus>
      break;
 801260c:	e00c      	b.n	8012628 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801260e:	6839      	ldr	r1, [r7, #0]
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 f900 	bl	8012816 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012616:	4b07      	ldr	r3, [pc, #28]	@ (8012634 <USBD_SetConfig+0x150>)
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	4619      	mov	r1, r3
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7fe fff6 	bl	801160e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012622:	2303      	movs	r3, #3
 8012624:	73fb      	strb	r3, [r7, #15]
      break;
 8012626:	bf00      	nop
  }

  return ret;
 8012628:	7bfb      	ldrb	r3, [r7, #15]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	200005f8 	.word	0x200005f8

08012638 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	88db      	ldrh	r3, [r3, #6]
 8012646:	2b01      	cmp	r3, #1
 8012648:	d004      	beq.n	8012654 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 f8e2 	bl	8012816 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012652:	e023      	b.n	801269c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801265a:	b2db      	uxtb	r3, r3
 801265c:	2b02      	cmp	r3, #2
 801265e:	dc02      	bgt.n	8012666 <USBD_GetConfig+0x2e>
 8012660:	2b00      	cmp	r3, #0
 8012662:	dc03      	bgt.n	801266c <USBD_GetConfig+0x34>
 8012664:	e015      	b.n	8012692 <USBD_GetConfig+0x5a>
 8012666:	2b03      	cmp	r3, #3
 8012668:	d00b      	beq.n	8012682 <USBD_GetConfig+0x4a>
 801266a:	e012      	b.n	8012692 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3308      	adds	r3, #8
 8012676:	2201      	movs	r2, #1
 8012678:	4619      	mov	r1, r3
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 f948 	bl	8012910 <USBD_CtlSendData>
        break;
 8012680:	e00c      	b.n	801269c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	3304      	adds	r3, #4
 8012686:	2201      	movs	r2, #1
 8012688:	4619      	mov	r1, r3
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f000 f940 	bl	8012910 <USBD_CtlSendData>
        break;
 8012690:	e004      	b.n	801269c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 f8be 	bl	8012816 <USBD_CtlError>
        break;
 801269a:	bf00      	nop
}
 801269c:	bf00      	nop
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	3b01      	subs	r3, #1
 80126b8:	2b02      	cmp	r3, #2
 80126ba:	d81e      	bhi.n	80126fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	88db      	ldrh	r3, [r3, #6]
 80126c0:	2b02      	cmp	r3, #2
 80126c2:	d004      	beq.n	80126ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80126c4:	6839      	ldr	r1, [r7, #0]
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 f8a5 	bl	8012816 <USBD_CtlError>
        break;
 80126cc:	e01a      	b.n	8012704 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d005      	beq.n	80126ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	f043 0202 	orr.w	r2, r3, #2
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	330c      	adds	r3, #12
 80126ee:	2202      	movs	r2, #2
 80126f0:	4619      	mov	r1, r3
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f90c 	bl	8012910 <USBD_CtlSendData>
      break;
 80126f8:	e004      	b.n	8012704 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f88a 	bl	8012816 <USBD_CtlError>
      break;
 8012702:	bf00      	nop
  }
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	885b      	ldrh	r3, [r3, #2]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d107      	bne.n	801272e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2201      	movs	r2, #1
 8012722:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 f94c 	bl	80129c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801272c:	e013      	b.n	8012756 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	885b      	ldrh	r3, [r3, #2]
 8012732:	2b02      	cmp	r3, #2
 8012734:	d10b      	bne.n	801274e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	889b      	ldrh	r3, [r3, #4]
 801273a:	0a1b      	lsrs	r3, r3, #8
 801273c:	b29b      	uxth	r3, r3
 801273e:	b2da      	uxtb	r2, r3
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f000 f93c 	bl	80129c4 <USBD_CtlSendStatus>
}
 801274c:	e003      	b.n	8012756 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f860 	bl	8012816 <USBD_CtlError>
}
 8012756:	bf00      	nop
 8012758:	3708      	adds	r7, #8
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801275e:	b580      	push	{r7, lr}
 8012760:	b082      	sub	sp, #8
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801276e:	b2db      	uxtb	r3, r3
 8012770:	3b01      	subs	r3, #1
 8012772:	2b02      	cmp	r3, #2
 8012774:	d80b      	bhi.n	801278e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	885b      	ldrh	r3, [r3, #2]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d10c      	bne.n	8012798 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f000 f91c 	bl	80129c4 <USBD_CtlSendStatus>
      }
      break;
 801278c:	e004      	b.n	8012798 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801278e:	6839      	ldr	r1, [r7, #0]
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f840 	bl	8012816 <USBD_CtlError>
      break;
 8012796:	e000      	b.n	801279a <USBD_ClrFeature+0x3c>
      break;
 8012798:	bf00      	nop
  }
}
 801279a:	bf00      	nop
 801279c:	3708      	adds	r7, #8
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	b084      	sub	sp, #16
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
 80127aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	781a      	ldrb	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	3301      	adds	r3, #1
 80127bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	781a      	ldrb	r2, [r3, #0]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	3301      	adds	r3, #1
 80127ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80127cc:	68f8      	ldr	r0, [r7, #12]
 80127ce:	f7ff fa16 	bl	8011bfe <SWAPBYTE>
 80127d2:	4603      	mov	r3, r0
 80127d4:	461a      	mov	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	3301      	adds	r3, #1
 80127de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	3301      	adds	r3, #1
 80127e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f7ff fa09 	bl	8011bfe <SWAPBYTE>
 80127ec:	4603      	mov	r3, r0
 80127ee:	461a      	mov	r2, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	3301      	adds	r3, #1
 80127f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	3301      	adds	r3, #1
 80127fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f7ff f9fc 	bl	8011bfe <SWAPBYTE>
 8012806:	4603      	mov	r3, r0
 8012808:	461a      	mov	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	80da      	strh	r2, [r3, #6]
}
 801280e:	bf00      	nop
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}

08012816 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012816:	b580      	push	{r7, lr}
 8012818:	b082      	sub	sp, #8
 801281a:	af00      	add	r7, sp, #0
 801281c:	6078      	str	r0, [r7, #4]
 801281e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012820:	2180      	movs	r1, #128	@ 0x80
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f004 fa8a 	bl	8016d3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012828:	2100      	movs	r1, #0
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f004 fa86 	bl	8016d3c <USBD_LL_StallEP>
}
 8012830:	bf00      	nop
 8012832:	3708      	adds	r7, #8
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b086      	sub	sp, #24
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012844:	2300      	movs	r3, #0
 8012846:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d042      	beq.n	80128d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012852:	6938      	ldr	r0, [r7, #16]
 8012854:	f000 f842 	bl	80128dc <USBD_GetLen>
 8012858:	4603      	mov	r3, r0
 801285a:	3301      	adds	r3, #1
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012862:	d808      	bhi.n	8012876 <USBD_GetString+0x3e>
 8012864:	6938      	ldr	r0, [r7, #16]
 8012866:	f000 f839 	bl	80128dc <USBD_GetLen>
 801286a:	4603      	mov	r3, r0
 801286c:	3301      	adds	r3, #1
 801286e:	b29b      	uxth	r3, r3
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	b29a      	uxth	r2, r3
 8012874:	e001      	b.n	801287a <USBD_GetString+0x42>
 8012876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801287e:	7dfb      	ldrb	r3, [r7, #23]
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	4413      	add	r3, r2
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	7812      	ldrb	r2, [r2, #0]
 8012888:	701a      	strb	r2, [r3, #0]
  idx++;
 801288a:	7dfb      	ldrb	r3, [r7, #23]
 801288c:	3301      	adds	r3, #1
 801288e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012890:	7dfb      	ldrb	r3, [r7, #23]
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	4413      	add	r3, r2
 8012896:	2203      	movs	r2, #3
 8012898:	701a      	strb	r2, [r3, #0]
  idx++;
 801289a:	7dfb      	ldrb	r3, [r7, #23]
 801289c:	3301      	adds	r3, #1
 801289e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80128a0:	e013      	b.n	80128ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	68ba      	ldr	r2, [r7, #8]
 80128a6:	4413      	add	r3, r2
 80128a8:	693a      	ldr	r2, [r7, #16]
 80128aa:	7812      	ldrb	r2, [r2, #0]
 80128ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	3301      	adds	r3, #1
 80128b2:	613b      	str	r3, [r7, #16]
    idx++;
 80128b4:	7dfb      	ldrb	r3, [r7, #23]
 80128b6:	3301      	adds	r3, #1
 80128b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80128ba:	7dfb      	ldrb	r3, [r7, #23]
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	4413      	add	r3, r2
 80128c0:	2200      	movs	r2, #0
 80128c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80128c4:	7dfb      	ldrb	r3, [r7, #23]
 80128c6:	3301      	adds	r3, #1
 80128c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1e7      	bne.n	80128a2 <USBD_GetString+0x6a>
 80128d2:	e000      	b.n	80128d6 <USBD_GetString+0x9e>
    return;
 80128d4:	bf00      	nop
  }
}
 80128d6:	3718      	adds	r7, #24
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80128dc:	b480      	push	{r7}
 80128de:	b085      	sub	sp, #20
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80128e4:	2300      	movs	r3, #0
 80128e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80128ec:	e005      	b.n	80128fa <USBD_GetLen+0x1e>
  {
    len++;
 80128ee:	7bfb      	ldrb	r3, [r7, #15]
 80128f0:	3301      	adds	r3, #1
 80128f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	3301      	adds	r3, #1
 80128f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d1f5      	bne.n	80128ee <USBD_GetLen+0x12>
  }

  return len;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3714      	adds	r7, #20
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2202      	movs	r2, #2
 8012920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	2100      	movs	r1, #0
 8012936:	68f8      	ldr	r0, [r7, #12]
 8012938:	f004 fa89 	bl	8016e4e <USBD_LL_Transmit>

  return USBD_OK;
 801293c:	2300      	movs	r3, #0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012946:	b580      	push	{r7, lr}
 8012948:	b084      	sub	sp, #16
 801294a:	af00      	add	r7, sp, #0
 801294c:	60f8      	str	r0, [r7, #12]
 801294e:	60b9      	str	r1, [r7, #8]
 8012950:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68ba      	ldr	r2, [r7, #8]
 8012956:	2100      	movs	r1, #0
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f004 fa78 	bl	8016e4e <USBD_LL_Transmit>

  return USBD_OK;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2203      	movs	r2, #3
 8012978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	68ba      	ldr	r2, [r7, #8]
 8012990:	2100      	movs	r1, #0
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f004 fa7c 	bl	8016e90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b084      	sub	sp, #16
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	60f8      	str	r0, [r7, #12]
 80129aa:	60b9      	str	r1, [r7, #8]
 80129ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	68ba      	ldr	r2, [r7, #8]
 80129b2:	2100      	movs	r1, #0
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f004 fa6b 	bl	8016e90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2204      	movs	r2, #4
 80129d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80129d4:	2300      	movs	r3, #0
 80129d6:	2200      	movs	r2, #0
 80129d8:	2100      	movs	r1, #0
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f004 fa37 	bl	8016e4e <USBD_LL_Transmit>

  return USBD_OK;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b082      	sub	sp, #8
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2205      	movs	r2, #5
 80129f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80129fa:	2300      	movs	r3, #0
 80129fc:	2200      	movs	r2, #0
 80129fe:	2100      	movs	r1, #0
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f004 fa45 	bl	8016e90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a06:	2300      	movs	r3, #0
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}

08012a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b083      	sub	sp, #12
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	4603      	mov	r3, r0
 8012a18:	6039      	str	r1, [r7, #0]
 8012a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	db0a      	blt.n	8012a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	b2da      	uxtb	r2, r3
 8012a28:	490c      	ldr	r1, [pc, #48]	@ (8012a5c <__NVIC_SetPriority+0x4c>)
 8012a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a2e:	0112      	lsls	r2, r2, #4
 8012a30:	b2d2      	uxtb	r2, r2
 8012a32:	440b      	add	r3, r1
 8012a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012a38:	e00a      	b.n	8012a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	b2da      	uxtb	r2, r3
 8012a3e:	4908      	ldr	r1, [pc, #32]	@ (8012a60 <__NVIC_SetPriority+0x50>)
 8012a40:	79fb      	ldrb	r3, [r7, #7]
 8012a42:	f003 030f 	and.w	r3, r3, #15
 8012a46:	3b04      	subs	r3, #4
 8012a48:	0112      	lsls	r2, r2, #4
 8012a4a:	b2d2      	uxtb	r2, r2
 8012a4c:	440b      	add	r3, r1
 8012a4e:	761a      	strb	r2, [r3, #24]
}
 8012a50:	bf00      	nop
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr
 8012a5c:	e000e100 	.word	0xe000e100
 8012a60:	e000ed00 	.word	0xe000ed00

08012a64 <SysTick_Handler>:
 8012a64:	b580      	push	{r7, lr}
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	4b05      	ldr	r3, [pc, #20]	@ (8012a80 <SysTick_Handler+0x1c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	f002 f9ec 	bl	8014e48 <xTaskGetSchedulerState>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d001      	beq.n	8012a7a <SysTick_Handler+0x16>
 8012a76:	f003 faef 	bl	8016058 <xPortSysTickHandler>
 8012a7a:	bf00      	nop
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	e000e010 	.word	0xe000e010

08012a84 <SVC_Setup>:
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	2100      	movs	r1, #0
 8012a8a:	f06f 0004 	mvn.w	r0, #4
 8012a8e:	f7ff ffbf 	bl	8012a10 <__NVIC_SetPriority>
 8012a92:	bf00      	nop
 8012a94:	bd80      	pop	{r7, pc}
	...

08012a98 <osKernelInitialize>:
 8012a98:	b480      	push	{r7}
 8012a9a:	b083      	sub	sp, #12
 8012a9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a9e:	f3ef 8305 	mrs	r3, IPSR
 8012aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d003      	beq.n	8012ab2 <osKernelInitialize+0x1a>
 8012aaa:	f06f 0305 	mvn.w	r3, #5
 8012aae:	607b      	str	r3, [r7, #4]
 8012ab0:	e00c      	b.n	8012acc <osKernelInitialize+0x34>
 8012ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8012adc <osKernelInitialize+0x44>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d105      	bne.n	8012ac6 <osKernelInitialize+0x2e>
 8012aba:	4b08      	ldr	r3, [pc, #32]	@ (8012adc <osKernelInitialize+0x44>)
 8012abc:	2201      	movs	r2, #1
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	607b      	str	r3, [r7, #4]
 8012ac4:	e002      	b.n	8012acc <osKernelInitialize+0x34>
 8012ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8012aca:	607b      	str	r3, [r7, #4]
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	370c      	adds	r7, #12
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	200005fc 	.word	0x200005fc

08012ae0 <osKernelStart>:
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ae6:	f3ef 8305 	mrs	r3, IPSR
 8012aea:	603b      	str	r3, [r7, #0]
  return(result);
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d003      	beq.n	8012afa <osKernelStart+0x1a>
 8012af2:	f06f 0305 	mvn.w	r3, #5
 8012af6:	607b      	str	r3, [r7, #4]
 8012af8:	e010      	b.n	8012b1c <osKernelStart+0x3c>
 8012afa:	4b0b      	ldr	r3, [pc, #44]	@ (8012b28 <osKernelStart+0x48>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d109      	bne.n	8012b16 <osKernelStart+0x36>
 8012b02:	f7ff ffbf 	bl	8012a84 <SVC_Setup>
 8012b06:	4b08      	ldr	r3, [pc, #32]	@ (8012b28 <osKernelStart+0x48>)
 8012b08:	2202      	movs	r2, #2
 8012b0a:	601a      	str	r2, [r3, #0]
 8012b0c:	f001 fd28 	bl	8014560 <vTaskStartScheduler>
 8012b10:	2300      	movs	r3, #0
 8012b12:	607b      	str	r3, [r7, #4]
 8012b14:	e002      	b.n	8012b1c <osKernelStart+0x3c>
 8012b16:	f04f 33ff 	mov.w	r3, #4294967295
 8012b1a:	607b      	str	r3, [r7, #4]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3708      	adds	r7, #8
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	200005fc 	.word	0x200005fc

08012b2c <osThreadNew>:
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b08e      	sub	sp, #56	@ 0x38
 8012b30:	af04      	add	r7, sp, #16
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	607a      	str	r2, [r7, #4]
 8012b38:	2300      	movs	r3, #0
 8012b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b3c:	f3ef 8305 	mrs	r3, IPSR
 8012b40:	617b      	str	r3, [r7, #20]
  return(result);
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d17e      	bne.n	8012c46 <osThreadNew+0x11a>
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d07b      	beq.n	8012c46 <osThreadNew+0x11a>
 8012b4e:	2380      	movs	r3, #128	@ 0x80
 8012b50:	623b      	str	r3, [r7, #32]
 8012b52:	2318      	movs	r3, #24
 8012b54:	61fb      	str	r3, [r7, #28]
 8012b56:	2300      	movs	r3, #0
 8012b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b5e:	61bb      	str	r3, [r7, #24]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d045      	beq.n	8012bf2 <osThreadNew+0xc6>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d002      	beq.n	8012b74 <osThreadNew+0x48>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	699b      	ldr	r3, [r3, #24]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <osThreadNew+0x56>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	699b      	ldr	r3, [r3, #24]
 8012b80:	61fb      	str	r3, [r7, #28]
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d008      	beq.n	8012b9a <osThreadNew+0x6e>
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	2b38      	cmp	r3, #56	@ 0x38
 8012b8c:	d805      	bhi.n	8012b9a <osThreadNew+0x6e>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	f003 0301 	and.w	r3, r3, #1
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <osThreadNew+0x72>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	e054      	b.n	8012c48 <osThreadNew+0x11c>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	695b      	ldr	r3, [r3, #20]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d003      	beq.n	8012bae <osThreadNew+0x82>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	695b      	ldr	r3, [r3, #20]
 8012baa:	089b      	lsrs	r3, r3, #2
 8012bac:	623b      	str	r3, [r7, #32]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d00e      	beq.n	8012bd4 <osThreadNew+0xa8>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	2ba7      	cmp	r3, #167	@ 0xa7
 8012bbc:	d90a      	bls.n	8012bd4 <osThreadNew+0xa8>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d006      	beq.n	8012bd4 <osThreadNew+0xa8>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	695b      	ldr	r3, [r3, #20]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d002      	beq.n	8012bd4 <osThreadNew+0xa8>
 8012bce:	2301      	movs	r3, #1
 8012bd0:	61bb      	str	r3, [r7, #24]
 8012bd2:	e010      	b.n	8012bf6 <osThreadNew+0xca>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	689b      	ldr	r3, [r3, #8]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d10c      	bne.n	8012bf6 <osThreadNew+0xca>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	68db      	ldr	r3, [r3, #12]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d108      	bne.n	8012bf6 <osThreadNew+0xca>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	691b      	ldr	r3, [r3, #16]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d104      	bne.n	8012bf6 <osThreadNew+0xca>
 8012bec:	2300      	movs	r3, #0
 8012bee:	61bb      	str	r3, [r7, #24]
 8012bf0:	e001      	b.n	8012bf6 <osThreadNew+0xca>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	61bb      	str	r3, [r7, #24]
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d110      	bne.n	8012c1e <osThreadNew+0xf2>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	6892      	ldr	r2, [r2, #8]
 8012c04:	9202      	str	r2, [sp, #8]
 8012c06:	9301      	str	r3, [sp, #4]
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	9300      	str	r3, [sp, #0]
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	6a3a      	ldr	r2, [r7, #32]
 8012c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012c12:	68f8      	ldr	r0, [r7, #12]
 8012c14:	f001 fa72 	bl	80140fc <xTaskCreateStatic>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	613b      	str	r3, [r7, #16]
 8012c1c:	e013      	b.n	8012c46 <osThreadNew+0x11a>
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d110      	bne.n	8012c46 <osThreadNew+0x11a>
 8012c24:	6a3b      	ldr	r3, [r7, #32]
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	f107 0310 	add.w	r3, r7, #16
 8012c2c:	9301      	str	r3, [sp, #4]
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012c36:	68f8      	ldr	r0, [r7, #12]
 8012c38:	f001 fac0 	bl	80141bc <xTaskCreate>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d001      	beq.n	8012c46 <osThreadNew+0x11a>
 8012c42:	2300      	movs	r3, #0
 8012c44:	613b      	str	r3, [r7, #16]
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3728      	adds	r7, #40	@ 0x28
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <osThreadExit>:
 8012c50:	b580      	push	{r7, lr}
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	2000      	movs	r0, #0
 8012c56:	f001 fc0f 	bl	8014478 <vTaskDelete>
 8012c5a:	bf00      	nop
 8012c5c:	e7fd      	b.n	8012c5a <osThreadExit+0xa>
	...

08012c60 <osThreadFlagsSet>:
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b088      	sub	sp, #32
 8012c64:	af02      	add	r7, sp, #8
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	617b      	str	r3, [r7, #20]
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <osThreadFlagsSet+0x1a>
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	da03      	bge.n	8012c82 <osThreadFlagsSet+0x22>
 8012c7a:	f06f 0303 	mvn.w	r3, #3
 8012c7e:	60fb      	str	r3, [r7, #12]
 8012c80:	e035      	b.n	8012cee <osThreadFlagsSet+0x8e>
 8012c82:	f04f 33ff 	mov.w	r3, #4294967295
 8012c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c88:	f3ef 8305 	mrs	r3, IPSR
 8012c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d01f      	beq.n	8012cd4 <osThreadFlagsSet+0x74>
 8012c94:	2300      	movs	r3, #0
 8012c96:	60bb      	str	r3, [r7, #8]
 8012c98:	f107 0308 	add.w	r3, r7, #8
 8012c9c:	9300      	str	r3, [sp, #0]
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	2201      	movs	r2, #1
 8012ca2:	6839      	ldr	r1, [r7, #0]
 8012ca4:	6978      	ldr	r0, [r7, #20]
 8012ca6:	f002 fb7f 	bl	80153a8 <xTaskGenericNotifyFromISR>
 8012caa:	f107 030c 	add.w	r3, r7, #12
 8012cae:	2200      	movs	r2, #0
 8012cb0:	9200      	str	r2, [sp, #0]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	6978      	ldr	r0, [r7, #20]
 8012cb8:	f002 fb76 	bl	80153a8 <xTaskGenericNotifyFromISR>
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d015      	beq.n	8012cee <osThreadFlagsSet+0x8e>
 8012cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf8 <osThreadFlagsSet+0x98>)
 8012cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cc8:	601a      	str	r2, [r3, #0]
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	e00c      	b.n	8012cee <osThreadFlagsSet+0x8e>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	6839      	ldr	r1, [r7, #0]
 8012cda:	6978      	ldr	r0, [r7, #20]
 8012cdc:	f002 faa2 	bl	8015224 <xTaskGenericNotify>
 8012ce0:	f107 030c 	add.w	r3, r7, #12
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	6978      	ldr	r0, [r7, #20]
 8012cea:	f002 fa9b 	bl	8015224 <xTaskGenericNotify>
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3718      	adds	r7, #24
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	e000ed04 	.word	0xe000ed04

08012cfc <osThreadFlagsWait>:
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b08c      	sub	sp, #48	@ 0x30
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d08:	f3ef 8305 	mrs	r3, IPSR
 8012d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d003      	beq.n	8012d1c <osThreadFlagsWait+0x20>
 8012d14:	f06f 0305 	mvn.w	r3, #5
 8012d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d1a:	e06b      	b.n	8012df4 <osThreadFlagsWait+0xf8>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	da03      	bge.n	8012d2a <osThreadFlagsWait+0x2e>
 8012d22:	f06f 0303 	mvn.w	r3, #3
 8012d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d28:	e064      	b.n	8012df4 <osThreadFlagsWait+0xf8>
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	f003 0302 	and.w	r3, r3, #2
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <osThreadFlagsWait+0x3e>
 8012d34:	2300      	movs	r3, #0
 8012d36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d38:	e001      	b.n	8012d3e <osThreadFlagsWait+0x42>
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d3e:	2300      	movs	r3, #0
 8012d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d46:	f001 fd27 	bl	8014798 <xTaskGetTickCount>
 8012d4a:	6238      	str	r0, [r7, #32]
 8012d4c:	f107 0210 	add.w	r2, r7, #16
 8012d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d54:	2000      	movs	r0, #0
 8012d56:	f002 fa05 	bl	8015164 <xTaskNotifyWait>
 8012d5a:	61f8      	str	r0, [r7, #28]
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d137      	bne.n	8012dd2 <osThreadFlagsWait+0xd6>
 8012d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	4013      	ands	r3, r2
 8012d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	f003 0301 	and.w	r3, r3, #1
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d00c      	beq.n	8012d96 <osThreadFlagsWait+0x9a>
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d80:	4013      	ands	r3, r2
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d032      	beq.n	8012dee <osThreadFlagsWait+0xf2>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d10f      	bne.n	8012dae <osThreadFlagsWait+0xb2>
 8012d8e:	f06f 0302 	mvn.w	r3, #2
 8012d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d94:	e02e      	b.n	8012df4 <osThreadFlagsWait+0xf8>
 8012d96:	68fa      	ldr	r2, [r7, #12]
 8012d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9a:	4013      	ands	r3, r2
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d128      	bne.n	8012df2 <osThreadFlagsWait+0xf6>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d103      	bne.n	8012dae <osThreadFlagsWait+0xb2>
 8012da6:	f06f 0302 	mvn.w	r3, #2
 8012daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dac:	e022      	b.n	8012df4 <osThreadFlagsWait+0xf8>
 8012dae:	f001 fcf3 	bl	8014798 <xTaskGetTickCount>
 8012db2:	4602      	mov	r2, r0
 8012db4:	6a3b      	ldr	r3, [r7, #32]
 8012db6:	1ad3      	subs	r3, r2, r3
 8012db8:	61bb      	str	r3, [r7, #24]
 8012dba:	69ba      	ldr	r2, [r7, #24]
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d902      	bls.n	8012dc8 <osThreadFlagsWait+0xcc>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dc6:	e00e      	b.n	8012de6 <osThreadFlagsWait+0xea>
 8012dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dd0:	e009      	b.n	8012de6 <osThreadFlagsWait+0xea>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d103      	bne.n	8012de0 <osThreadFlagsWait+0xe4>
 8012dd8:	f06f 0302 	mvn.w	r3, #2
 8012ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dde:	e002      	b.n	8012de6 <osThreadFlagsWait+0xea>
 8012de0:	f06f 0301 	mvn.w	r3, #1
 8012de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1af      	bne.n	8012d4c <osThreadFlagsWait+0x50>
 8012dec:	e002      	b.n	8012df4 <osThreadFlagsWait+0xf8>
 8012dee:	bf00      	nop
 8012df0:	e000      	b.n	8012df4 <osThreadFlagsWait+0xf8>
 8012df2:	bf00      	nop
 8012df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df6:	4618      	mov	r0, r3
 8012df8:	3730      	adds	r7, #48	@ 0x30
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <osMutexNew>:
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b088      	sub	sp, #32
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	2300      	movs	r3, #0
 8012e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e0a:	f3ef 8305 	mrs	r3, IPSR
 8012e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d174      	bne.n	8012f00 <osMutexNew+0x102>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d003      	beq.n	8012e24 <osMutexNew+0x26>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	61bb      	str	r3, [r7, #24]
 8012e22:	e001      	b.n	8012e28 <osMutexNew+0x2a>
 8012e24:	2300      	movs	r3, #0
 8012e26:	61bb      	str	r3, [r7, #24]
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	f003 0301 	and.w	r3, r3, #1
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d002      	beq.n	8012e38 <osMutexNew+0x3a>
 8012e32:	2301      	movs	r3, #1
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	e001      	b.n	8012e3c <osMutexNew+0x3e>
 8012e38:	2300      	movs	r3, #0
 8012e3a:	617b      	str	r3, [r7, #20]
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	f003 0308 	and.w	r3, r3, #8
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d15c      	bne.n	8012f00 <osMutexNew+0x102>
 8012e46:	f04f 33ff 	mov.w	r3, #4294967295
 8012e4a:	613b      	str	r3, [r7, #16]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d015      	beq.n	8012e7e <osMutexNew+0x80>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	689b      	ldr	r3, [r3, #8]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d006      	beq.n	8012e68 <osMutexNew+0x6a>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	68db      	ldr	r3, [r3, #12]
 8012e5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8012e60:	d902      	bls.n	8012e68 <osMutexNew+0x6a>
 8012e62:	2301      	movs	r3, #1
 8012e64:	613b      	str	r3, [r7, #16]
 8012e66:	e00c      	b.n	8012e82 <osMutexNew+0x84>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d108      	bne.n	8012e82 <osMutexNew+0x84>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d104      	bne.n	8012e82 <osMutexNew+0x84>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	613b      	str	r3, [r7, #16]
 8012e7c:	e001      	b.n	8012e82 <osMutexNew+0x84>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	613b      	str	r3, [r7, #16]
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d112      	bne.n	8012eae <osMutexNew+0xb0>
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d007      	beq.n	8012e9e <osMutexNew+0xa0>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	4619      	mov	r1, r3
 8012e94:	2004      	movs	r0, #4
 8012e96:	f000 fb92 	bl	80135be <xQueueCreateMutexStatic>
 8012e9a:	61f8      	str	r0, [r7, #28]
 8012e9c:	e016      	b.n	8012ecc <osMutexNew+0xce>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	2001      	movs	r0, #1
 8012ea6:	f000 fb8a 	bl	80135be <xQueueCreateMutexStatic>
 8012eaa:	61f8      	str	r0, [r7, #28]
 8012eac:	e00e      	b.n	8012ecc <osMutexNew+0xce>
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d10b      	bne.n	8012ecc <osMutexNew+0xce>
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d004      	beq.n	8012ec4 <osMutexNew+0xc6>
 8012eba:	2004      	movs	r0, #4
 8012ebc:	f000 fb67 	bl	801358e <xQueueCreateMutex>
 8012ec0:	61f8      	str	r0, [r7, #28]
 8012ec2:	e003      	b.n	8012ecc <osMutexNew+0xce>
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	f000 fb62 	bl	801358e <xQueueCreateMutex>
 8012eca:	61f8      	str	r0, [r7, #28]
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d00c      	beq.n	8012eec <osMutexNew+0xee>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d003      	beq.n	8012ee0 <osMutexNew+0xe2>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	60fb      	str	r3, [r7, #12]
 8012ede:	e001      	b.n	8012ee4 <osMutexNew+0xe6>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	60fb      	str	r3, [r7, #12]
 8012ee4:	68f9      	ldr	r1, [r7, #12]
 8012ee6:	69f8      	ldr	r0, [r7, #28]
 8012ee8:	f001 f8aa 	bl	8014040 <vQueueAddToRegistry>
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d006      	beq.n	8012f00 <osMutexNew+0x102>
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d003      	beq.n	8012f00 <osMutexNew+0x102>
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	f043 0301 	orr.w	r3, r3, #1
 8012efe:	61fb      	str	r3, [r7, #28]
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	4618      	mov	r0, r3
 8012f04:	3720      	adds	r7, #32
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}

08012f0a <osMutexAcquire>:
 8012f0a:	b580      	push	{r7, lr}
 8012f0c:	b086      	sub	sp, #24
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
 8012f12:	6039      	str	r1, [r7, #0]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f023 0301 	bic.w	r3, r3, #1
 8012f1a:	613b      	str	r3, [r7, #16]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f003 0301 	and.w	r3, r3, #1
 8012f22:	60fb      	str	r3, [r7, #12]
 8012f24:	2300      	movs	r3, #0
 8012f26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f28:	f3ef 8305 	mrs	r3, IPSR
 8012f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d003      	beq.n	8012f3c <osMutexAcquire+0x32>
 8012f34:	f06f 0305 	mvn.w	r3, #5
 8012f38:	617b      	str	r3, [r7, #20]
 8012f3a:	e02c      	b.n	8012f96 <osMutexAcquire+0x8c>
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d103      	bne.n	8012f4a <osMutexAcquire+0x40>
 8012f42:	f06f 0303 	mvn.w	r3, #3
 8012f46:	617b      	str	r3, [r7, #20]
 8012f48:	e025      	b.n	8012f96 <osMutexAcquire+0x8c>
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d011      	beq.n	8012f74 <osMutexAcquire+0x6a>
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	6938      	ldr	r0, [r7, #16]
 8012f54:	f000 fb83 	bl	801365e <xQueueTakeMutexRecursive>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d01b      	beq.n	8012f96 <osMutexAcquire+0x8c>
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d003      	beq.n	8012f6c <osMutexAcquire+0x62>
 8012f64:	f06f 0301 	mvn.w	r3, #1
 8012f68:	617b      	str	r3, [r7, #20]
 8012f6a:	e014      	b.n	8012f96 <osMutexAcquire+0x8c>
 8012f6c:	f06f 0302 	mvn.w	r3, #2
 8012f70:	617b      	str	r3, [r7, #20]
 8012f72:	e010      	b.n	8012f96 <osMutexAcquire+0x8c>
 8012f74:	6839      	ldr	r1, [r7, #0]
 8012f76:	6938      	ldr	r0, [r7, #16]
 8012f78:	f000 fe2a 	bl	8013bd0 <xQueueSemaphoreTake>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d009      	beq.n	8012f96 <osMutexAcquire+0x8c>
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d003      	beq.n	8012f90 <osMutexAcquire+0x86>
 8012f88:	f06f 0301 	mvn.w	r3, #1
 8012f8c:	617b      	str	r3, [r7, #20]
 8012f8e:	e002      	b.n	8012f96 <osMutexAcquire+0x8c>
 8012f90:	f06f 0302 	mvn.w	r3, #2
 8012f94:	617b      	str	r3, [r7, #20]
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3718      	adds	r7, #24
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <osMutexRelease>:
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b086      	sub	sp, #24
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f023 0301 	bic.w	r3, r3, #1
 8012fae:	613b      	str	r3, [r7, #16]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f003 0301 	and.w	r3, r3, #1
 8012fb6:	60fb      	str	r3, [r7, #12]
 8012fb8:	2300      	movs	r3, #0
 8012fba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fbc:	f3ef 8305 	mrs	r3, IPSR
 8012fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d003      	beq.n	8012fd0 <osMutexRelease+0x30>
 8012fc8:	f06f 0305 	mvn.w	r3, #5
 8012fcc:	617b      	str	r3, [r7, #20]
 8012fce:	e01f      	b.n	8013010 <osMutexRelease+0x70>
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d103      	bne.n	8012fde <osMutexRelease+0x3e>
 8012fd6:	f06f 0303 	mvn.w	r3, #3
 8012fda:	617b      	str	r3, [r7, #20]
 8012fdc:	e018      	b.n	8013010 <osMutexRelease+0x70>
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d009      	beq.n	8012ff8 <osMutexRelease+0x58>
 8012fe4:	6938      	ldr	r0, [r7, #16]
 8012fe6:	f000 fb05 	bl	80135f4 <xQueueGiveMutexRecursive>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d00f      	beq.n	8013010 <osMutexRelease+0x70>
 8012ff0:	f06f 0302 	mvn.w	r3, #2
 8012ff4:	617b      	str	r3, [r7, #20]
 8012ff6:	e00b      	b.n	8013010 <osMutexRelease+0x70>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	6938      	ldr	r0, [r7, #16]
 8013000:	f000 fb64 	bl	80136cc <xQueueGenericSend>
 8013004:	4603      	mov	r3, r0
 8013006:	2b01      	cmp	r3, #1
 8013008:	d002      	beq.n	8013010 <osMutexRelease+0x70>
 801300a:	f06f 0302 	mvn.w	r3, #2
 801300e:	617b      	str	r3, [r7, #20]
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	4618      	mov	r0, r3
 8013014:	3718      	adds	r7, #24
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}

0801301a <osMessageQueueNew>:
 801301a:	b580      	push	{r7, lr}
 801301c:	b08a      	sub	sp, #40	@ 0x28
 801301e:	af02      	add	r7, sp, #8
 8013020:	60f8      	str	r0, [r7, #12]
 8013022:	60b9      	str	r1, [r7, #8]
 8013024:	607a      	str	r2, [r7, #4]
 8013026:	2300      	movs	r3, #0
 8013028:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801302a:	f3ef 8305 	mrs	r3, IPSR
 801302e:	613b      	str	r3, [r7, #16]
  return(result);
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d15f      	bne.n	80130f6 <osMessageQueueNew+0xdc>
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d05c      	beq.n	80130f6 <osMessageQueueNew+0xdc>
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d059      	beq.n	80130f6 <osMessageQueueNew+0xdc>
 8013042:	f04f 33ff 	mov.w	r3, #4294967295
 8013046:	61bb      	str	r3, [r7, #24]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d029      	beq.n	80130a2 <osMessageQueueNew+0x88>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d012      	beq.n	801307c <osMessageQueueNew+0x62>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	2b4f      	cmp	r3, #79	@ 0x4f
 801305c:	d90e      	bls.n	801307c <osMessageQueueNew+0x62>
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	691b      	ldr	r3, [r3, #16]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00a      	beq.n	801307c <osMessageQueueNew+0x62>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	695a      	ldr	r2, [r3, #20]
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	68b9      	ldr	r1, [r7, #8]
 801306e:	fb01 f303 	mul.w	r3, r1, r3
 8013072:	429a      	cmp	r2, r3
 8013074:	d302      	bcc.n	801307c <osMessageQueueNew+0x62>
 8013076:	2301      	movs	r3, #1
 8013078:	61bb      	str	r3, [r7, #24]
 801307a:	e014      	b.n	80130a6 <osMessageQueueNew+0x8c>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	689b      	ldr	r3, [r3, #8]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d110      	bne.n	80130a6 <osMessageQueueNew+0x8c>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d10c      	bne.n	80130a6 <osMessageQueueNew+0x8c>
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	691b      	ldr	r3, [r3, #16]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d108      	bne.n	80130a6 <osMessageQueueNew+0x8c>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	695b      	ldr	r3, [r3, #20]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d104      	bne.n	80130a6 <osMessageQueueNew+0x8c>
 801309c:	2300      	movs	r3, #0
 801309e:	61bb      	str	r3, [r7, #24]
 80130a0:	e001      	b.n	80130a6 <osMessageQueueNew+0x8c>
 80130a2:	2300      	movs	r3, #0
 80130a4:	61bb      	str	r3, [r7, #24]
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	2b01      	cmp	r3, #1
 80130aa:	d10b      	bne.n	80130c4 <osMessageQueueNew+0xaa>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	691a      	ldr	r2, [r3, #16]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	689b      	ldr	r3, [r3, #8]
 80130b4:	2100      	movs	r1, #0
 80130b6:	9100      	str	r1, [sp, #0]
 80130b8:	68b9      	ldr	r1, [r7, #8]
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	f000 f972 	bl	80133a4 <xQueueGenericCreateStatic>
 80130c0:	61f8      	str	r0, [r7, #28]
 80130c2:	e008      	b.n	80130d6 <osMessageQueueNew+0xbc>
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d105      	bne.n	80130d6 <osMessageQueueNew+0xbc>
 80130ca:	2200      	movs	r2, #0
 80130cc:	68b9      	ldr	r1, [r7, #8]
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f000 f9e5 	bl	801349e <xQueueGenericCreate>
 80130d4:	61f8      	str	r0, [r7, #28]
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00c      	beq.n	80130f6 <osMessageQueueNew+0xdc>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d003      	beq.n	80130ea <osMessageQueueNew+0xd0>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	617b      	str	r3, [r7, #20]
 80130e8:	e001      	b.n	80130ee <osMessageQueueNew+0xd4>
 80130ea:	2300      	movs	r3, #0
 80130ec:	617b      	str	r3, [r7, #20]
 80130ee:	6979      	ldr	r1, [r7, #20]
 80130f0:	69f8      	ldr	r0, [r7, #28]
 80130f2:	f000 ffa5 	bl	8014040 <vQueueAddToRegistry>
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	4618      	mov	r0, r3
 80130fa:	3720      	adds	r7, #32
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <vApplicationGetIdleTaskMemory>:
 8013100:	b480      	push	{r7}
 8013102:	b085      	sub	sp, #20
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	4a07      	ldr	r2, [pc, #28]	@ (801312c <vApplicationGetIdleTaskMemory+0x2c>)
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	4a06      	ldr	r2, [pc, #24]	@ (8013130 <vApplicationGetIdleTaskMemory+0x30>)
 8013116:	601a      	str	r2, [r3, #0]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2280      	movs	r2, #128	@ 0x80
 801311c:	601a      	str	r2, [r3, #0]
 801311e:	bf00      	nop
 8013120:	3714      	adds	r7, #20
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr
 801312a:	bf00      	nop
 801312c:	20000600 	.word	0x20000600
 8013130:	200006a8 	.word	0x200006a8

08013134 <vApplicationGetTimerTaskMemory>:
 8013134:	b480      	push	{r7}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	4a07      	ldr	r2, [pc, #28]	@ (8013160 <vApplicationGetTimerTaskMemory+0x2c>)
 8013144:	601a      	str	r2, [r3, #0]
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	4a06      	ldr	r2, [pc, #24]	@ (8013164 <vApplicationGetTimerTaskMemory+0x30>)
 801314a:	601a      	str	r2, [r3, #0]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	bf00      	nop
 8013156:	3714      	adds	r7, #20
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr
 8013160:	200008a8 	.word	0x200008a8
 8013164:	20000950 	.word	0x20000950

08013168 <vListInitialise>:
 8013168:	b480      	push	{r7}
 801316a:	b083      	sub	sp, #12
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f103 0208 	add.w	r2, r3, #8
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	605a      	str	r2, [r3, #4]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f04f 32ff 	mov.w	r2, #4294967295
 8013180:	609a      	str	r2, [r3, #8]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f103 0208 	add.w	r2, r3, #8
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	60da      	str	r2, [r3, #12]
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f103 0208 	add.w	r2, r3, #8
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	611a      	str	r2, [r3, #16]
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	601a      	str	r2, [r3, #0]
 801319c:	bf00      	nop
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr

080131a8 <vListInitialiseItem>:
 80131a8:	b480      	push	{r7}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2200      	movs	r2, #0
 80131b4:	611a      	str	r2, [r3, #16]
 80131b6:	bf00      	nop
 80131b8:	370c      	adds	r7, #12
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <vListInsertEnd>:
 80131c2:	b480      	push	{r7}
 80131c4:	b085      	sub	sp, #20
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
 80131ca:	6039      	str	r1, [r7, #0]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	60fb      	str	r3, [r7, #12]
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	605a      	str	r2, [r3, #4]
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	689a      	ldr	r2, [r3, #8]
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	609a      	str	r2, [r3, #8]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	689b      	ldr	r3, [r3, #8]
 80131e4:	683a      	ldr	r2, [r7, #0]
 80131e6:	605a      	str	r2, [r3, #4]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	683a      	ldr	r2, [r7, #0]
 80131ec:	609a      	str	r2, [r3, #8]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	687a      	ldr	r2, [r7, #4]
 80131f2:	611a      	str	r2, [r3, #16]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	1c5a      	adds	r2, r3, #1
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	bf00      	nop
 8013200:	3714      	adds	r7, #20
 8013202:	46bd      	mov	sp, r7
 8013204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013208:	4770      	bx	lr

0801320a <vListInsert>:
 801320a:	b480      	push	{r7}
 801320c:	b085      	sub	sp, #20
 801320e:	af00      	add	r7, sp, #0
 8013210:	6078      	str	r0, [r7, #4]
 8013212:	6039      	str	r1, [r7, #0]
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	60bb      	str	r3, [r7, #8]
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013220:	d103      	bne.n	801322a <vListInsert+0x20>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	60fb      	str	r3, [r7, #12]
 8013228:	e00c      	b.n	8013244 <vListInsert+0x3a>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	3308      	adds	r3, #8
 801322e:	60fb      	str	r3, [r7, #12]
 8013230:	e002      	b.n	8013238 <vListInsert+0x2e>
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	60fb      	str	r3, [r7, #12]
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	68ba      	ldr	r2, [r7, #8]
 8013240:	429a      	cmp	r2, r3
 8013242:	d2f6      	bcs.n	8013232 <vListInsert+0x28>
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	685a      	ldr	r2, [r3, #4]
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	605a      	str	r2, [r3, #4]
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	609a      	str	r2, [r3, #8]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	68fa      	ldr	r2, [r7, #12]
 8013258:	609a      	str	r2, [r3, #8]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	683a      	ldr	r2, [r7, #0]
 801325e:	605a      	str	r2, [r3, #4]
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	611a      	str	r2, [r3, #16]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	1c5a      	adds	r2, r3, #1
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	bf00      	nop
 8013272:	3714      	adds	r7, #20
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <uxListRemove>:
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	691b      	ldr	r3, [r3, #16]
 8013288:	60fb      	str	r3, [r7, #12]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	6892      	ldr	r2, [r2, #8]
 8013292:	609a      	str	r2, [r3, #8]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	6852      	ldr	r2, [r2, #4]
 801329c:	605a      	str	r2, [r3, #4]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d103      	bne.n	80132b0 <uxListRemove+0x34>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	689a      	ldr	r2, [r3, #8]
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	605a      	str	r2, [r3, #4]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	611a      	str	r2, [r3, #16]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	1e5a      	subs	r2, r3, #1
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4618      	mov	r0, r3
 80132c6:	3714      	adds	r7, #20
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <xQueueGenericReset>:
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	60fb      	str	r3, [r7, #12]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d10b      	bne.n	80132fc <xQueueGenericReset+0x2c>
 80132e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132e8:	f383 8811 	msr	BASEPRI, r3
 80132ec:	f3bf 8f6f 	isb	sy
 80132f0:	f3bf 8f4f 	dsb	sy
 80132f4:	60bb      	str	r3, [r7, #8]
 80132f6:	bf00      	nop
 80132f8:	bf00      	nop
 80132fa:	e7fd      	b.n	80132f8 <xQueueGenericReset+0x28>
 80132fc:	f002 fe1c 	bl	8015f38 <vPortEnterCritical>
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013308:	68f9      	ldr	r1, [r7, #12]
 801330a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801330c:	fb01 f303 	mul.w	r3, r1, r3
 8013310:	441a      	add	r2, r3
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	609a      	str	r2, [r3, #8]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	2200      	movs	r2, #0
 801331a:	639a      	str	r2, [r3, #56]	@ 0x38
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	605a      	str	r2, [r3, #4]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681a      	ldr	r2, [r3, #0]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801332c:	3b01      	subs	r3, #1
 801332e:	68f9      	ldr	r1, [r7, #12]
 8013330:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013332:	fb01 f303 	mul.w	r3, r1, r3
 8013336:	441a      	add	r2, r3
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	60da      	str	r2, [r3, #12]
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	22ff      	movs	r2, #255	@ 0xff
 8013340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	22ff      	movs	r2, #255	@ 0xff
 8013348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d114      	bne.n	801337c <xQueueGenericReset+0xac>
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	691b      	ldr	r3, [r3, #16]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d01a      	beq.n	8013390 <xQueueGenericReset+0xc0>
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	3310      	adds	r3, #16
 801335e:	4618      	mov	r0, r3
 8013360:	f001 fb9c 	bl	8014a9c <xTaskRemoveFromEventList>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d012      	beq.n	8013390 <xQueueGenericReset+0xc0>
 801336a:	4b0d      	ldr	r3, [pc, #52]	@ (80133a0 <xQueueGenericReset+0xd0>)
 801336c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013370:	601a      	str	r2, [r3, #0]
 8013372:	f3bf 8f4f 	dsb	sy
 8013376:	f3bf 8f6f 	isb	sy
 801337a:	e009      	b.n	8013390 <xQueueGenericReset+0xc0>
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	3310      	adds	r3, #16
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff fef1 	bl	8013168 <vListInitialise>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3324      	adds	r3, #36	@ 0x24
 801338a:	4618      	mov	r0, r3
 801338c:	f7ff feec 	bl	8013168 <vListInitialise>
 8013390:	f002 fe04 	bl	8015f9c <vPortExitCritical>
 8013394:	2301      	movs	r3, #1
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	e000ed04 	.word	0xe000ed04

080133a4 <xQueueGenericCreateStatic>:
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08e      	sub	sp, #56	@ 0x38
 80133a8:	af02      	add	r7, sp, #8
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
 80133b0:	603b      	str	r3, [r7, #0]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d10b      	bne.n	80133d0 <xQueueGenericCreateStatic+0x2c>
 80133b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133bc:	f383 8811 	msr	BASEPRI, r3
 80133c0:	f3bf 8f6f 	isb	sy
 80133c4:	f3bf 8f4f 	dsb	sy
 80133c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80133ca:	bf00      	nop
 80133cc:	bf00      	nop
 80133ce:	e7fd      	b.n	80133cc <xQueueGenericCreateStatic+0x28>
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d10b      	bne.n	80133ee <xQueueGenericCreateStatic+0x4a>
 80133d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133da:	f383 8811 	msr	BASEPRI, r3
 80133de:	f3bf 8f6f 	isb	sy
 80133e2:	f3bf 8f4f 	dsb	sy
 80133e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80133e8:	bf00      	nop
 80133ea:	bf00      	nop
 80133ec:	e7fd      	b.n	80133ea <xQueueGenericCreateStatic+0x46>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <xQueueGenericCreateStatic+0x56>
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d001      	beq.n	80133fe <xQueueGenericCreateStatic+0x5a>
 80133fa:	2301      	movs	r3, #1
 80133fc:	e000      	b.n	8013400 <xQueueGenericCreateStatic+0x5c>
 80133fe:	2300      	movs	r3, #0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d10b      	bne.n	801341c <xQueueGenericCreateStatic+0x78>
 8013404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013408:	f383 8811 	msr	BASEPRI, r3
 801340c:	f3bf 8f6f 	isb	sy
 8013410:	f3bf 8f4f 	dsb	sy
 8013414:	623b      	str	r3, [r7, #32]
 8013416:	bf00      	nop
 8013418:	bf00      	nop
 801341a:	e7fd      	b.n	8013418 <xQueueGenericCreateStatic+0x74>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d102      	bne.n	8013428 <xQueueGenericCreateStatic+0x84>
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d101      	bne.n	801342c <xQueueGenericCreateStatic+0x88>
 8013428:	2301      	movs	r3, #1
 801342a:	e000      	b.n	801342e <xQueueGenericCreateStatic+0x8a>
 801342c:	2300      	movs	r3, #0
 801342e:	2b00      	cmp	r3, #0
 8013430:	d10b      	bne.n	801344a <xQueueGenericCreateStatic+0xa6>
 8013432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013436:	f383 8811 	msr	BASEPRI, r3
 801343a:	f3bf 8f6f 	isb	sy
 801343e:	f3bf 8f4f 	dsb	sy
 8013442:	61fb      	str	r3, [r7, #28]
 8013444:	bf00      	nop
 8013446:	bf00      	nop
 8013448:	e7fd      	b.n	8013446 <xQueueGenericCreateStatic+0xa2>
 801344a:	2350      	movs	r3, #80	@ 0x50
 801344c:	617b      	str	r3, [r7, #20]
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	2b50      	cmp	r3, #80	@ 0x50
 8013452:	d00b      	beq.n	801346c <xQueueGenericCreateStatic+0xc8>
 8013454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013458:	f383 8811 	msr	BASEPRI, r3
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	f3bf 8f4f 	dsb	sy
 8013464:	61bb      	str	r3, [r7, #24]
 8013466:	bf00      	nop
 8013468:	bf00      	nop
 801346a:	e7fd      	b.n	8013468 <xQueueGenericCreateStatic+0xc4>
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013474:	2b00      	cmp	r3, #0
 8013476:	d00d      	beq.n	8013494 <xQueueGenericCreateStatic+0xf0>
 8013478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801347a:	2201      	movs	r2, #1
 801347c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013480:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	4613      	mov	r3, r2
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	68b9      	ldr	r1, [r7, #8]
 801348e:	68f8      	ldr	r0, [r7, #12]
 8013490:	f000 f840 	bl	8013514 <prvInitialiseNewQueue>
 8013494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013496:	4618      	mov	r0, r3
 8013498:	3730      	adds	r7, #48	@ 0x30
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}

0801349e <xQueueGenericCreate>:
 801349e:	b580      	push	{r7, lr}
 80134a0:	b08a      	sub	sp, #40	@ 0x28
 80134a2:	af02      	add	r7, sp, #8
 80134a4:	60f8      	str	r0, [r7, #12]
 80134a6:	60b9      	str	r1, [r7, #8]
 80134a8:	4613      	mov	r3, r2
 80134aa:	71fb      	strb	r3, [r7, #7]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d10b      	bne.n	80134ca <xQueueGenericCreate+0x2c>
 80134b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134b6:	f383 8811 	msr	BASEPRI, r3
 80134ba:	f3bf 8f6f 	isb	sy
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	613b      	str	r3, [r7, #16]
 80134c4:	bf00      	nop
 80134c6:	bf00      	nop
 80134c8:	e7fd      	b.n	80134c6 <xQueueGenericCreate+0x28>
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	fb02 f303 	mul.w	r3, r2, r3
 80134d2:	61fb      	str	r3, [r7, #28]
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	3350      	adds	r3, #80	@ 0x50
 80134d8:	4618      	mov	r0, r3
 80134da:	f002 fe4f 	bl	801617c <pvPortMalloc>
 80134de:	61b8      	str	r0, [r7, #24]
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d011      	beq.n	801350a <xQueueGenericCreate+0x6c>
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	617b      	str	r3, [r7, #20]
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	3350      	adds	r3, #80	@ 0x50
 80134ee:	617b      	str	r3, [r7, #20]
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80134f8:	79fa      	ldrb	r2, [r7, #7]
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	9300      	str	r3, [sp, #0]
 80134fe:	4613      	mov	r3, r2
 8013500:	697a      	ldr	r2, [r7, #20]
 8013502:	68b9      	ldr	r1, [r7, #8]
 8013504:	68f8      	ldr	r0, [r7, #12]
 8013506:	f000 f805 	bl	8013514 <prvInitialiseNewQueue>
 801350a:	69bb      	ldr	r3, [r7, #24]
 801350c:	4618      	mov	r0, r3
 801350e:	3720      	adds	r7, #32
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <prvInitialiseNewQueue>:
 8013514:	b580      	push	{r7, lr}
 8013516:	b084      	sub	sp, #16
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	607a      	str	r2, [r7, #4]
 8013520:	70fb      	strb	r3, [r7, #3]
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d103      	bne.n	8013530 <prvInitialiseNewQueue+0x1c>
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	69ba      	ldr	r2, [r7, #24]
 801352c:	601a      	str	r2, [r3, #0]
 801352e:	e002      	b.n	8013536 <prvInitialiseNewQueue+0x22>
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	63da      	str	r2, [r3, #60]	@ 0x3c
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	68ba      	ldr	r2, [r7, #8]
 8013540:	641a      	str	r2, [r3, #64]	@ 0x40
 8013542:	2101      	movs	r1, #1
 8013544:	69b8      	ldr	r0, [r7, #24]
 8013546:	f7ff fec3 	bl	80132d0 <xQueueGenericReset>
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	78fa      	ldrb	r2, [r7, #3]
 801354e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8013552:	bf00      	nop
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}

0801355a <prvInitialiseMutex>:
 801355a:	b580      	push	{r7, lr}
 801355c:	b082      	sub	sp, #8
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d00e      	beq.n	8013586 <prvInitialiseMutex+0x2c>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2200      	movs	r2, #0
 801356c:	609a      	str	r2, [r3, #8]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2200      	movs	r2, #0
 8013572:	601a      	str	r2, [r3, #0]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	60da      	str	r2, [r3, #12]
 801357a:	2300      	movs	r3, #0
 801357c:	2200      	movs	r2, #0
 801357e:	2100      	movs	r1, #0
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 f8a3 	bl	80136cc <xQueueGenericSend>
 8013586:	bf00      	nop
 8013588:	3708      	adds	r7, #8
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}

0801358e <xQueueCreateMutex>:
 801358e:	b580      	push	{r7, lr}
 8013590:	b086      	sub	sp, #24
 8013592:	af00      	add	r7, sp, #0
 8013594:	4603      	mov	r3, r0
 8013596:	71fb      	strb	r3, [r7, #7]
 8013598:	2301      	movs	r3, #1
 801359a:	617b      	str	r3, [r7, #20]
 801359c:	2300      	movs	r3, #0
 801359e:	613b      	str	r3, [r7, #16]
 80135a0:	79fb      	ldrb	r3, [r7, #7]
 80135a2:	461a      	mov	r2, r3
 80135a4:	6939      	ldr	r1, [r7, #16]
 80135a6:	6978      	ldr	r0, [r7, #20]
 80135a8:	f7ff ff79 	bl	801349e <xQueueGenericCreate>
 80135ac:	60f8      	str	r0, [r7, #12]
 80135ae:	68f8      	ldr	r0, [r7, #12]
 80135b0:	f7ff ffd3 	bl	801355a <prvInitialiseMutex>
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	4618      	mov	r0, r3
 80135b8:	3718      	adds	r7, #24
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}

080135be <xQueueCreateMutexStatic>:
 80135be:	b580      	push	{r7, lr}
 80135c0:	b088      	sub	sp, #32
 80135c2:	af02      	add	r7, sp, #8
 80135c4:	4603      	mov	r3, r0
 80135c6:	6039      	str	r1, [r7, #0]
 80135c8:	71fb      	strb	r3, [r7, #7]
 80135ca:	2301      	movs	r3, #1
 80135cc:	617b      	str	r3, [r7, #20]
 80135ce:	2300      	movs	r3, #0
 80135d0:	613b      	str	r3, [r7, #16]
 80135d2:	79fb      	ldrb	r3, [r7, #7]
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	2200      	movs	r2, #0
 80135da:	6939      	ldr	r1, [r7, #16]
 80135dc:	6978      	ldr	r0, [r7, #20]
 80135de:	f7ff fee1 	bl	80133a4 <xQueueGenericCreateStatic>
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	f7ff ffb8 	bl	801355a <prvInitialiseMutex>
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	4618      	mov	r0, r3
 80135ee:	3718      	adds	r7, #24
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <xQueueGiveMutexRecursive>:
 80135f4:	b590      	push	{r4, r7, lr}
 80135f6:	b087      	sub	sp, #28
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	613b      	str	r3, [r7, #16]
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d10b      	bne.n	801361e <xQueueGiveMutexRecursive+0x2a>
 8013606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801360a:	f383 8811 	msr	BASEPRI, r3
 801360e:	f3bf 8f6f 	isb	sy
 8013612:	f3bf 8f4f 	dsb	sy
 8013616:	60fb      	str	r3, [r7, #12]
 8013618:	bf00      	nop
 801361a:	bf00      	nop
 801361c:	e7fd      	b.n	801361a <xQueueGiveMutexRecursive+0x26>
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	689c      	ldr	r4, [r3, #8]
 8013622:	f001 fc01 	bl	8014e28 <xTaskGetCurrentTaskHandle>
 8013626:	4603      	mov	r3, r0
 8013628:	429c      	cmp	r4, r3
 801362a:	d111      	bne.n	8013650 <xQueueGiveMutexRecursive+0x5c>
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	1e5a      	subs	r2, r3, #1
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	60da      	str	r2, [r3, #12]
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d105      	bne.n	801364a <xQueueGiveMutexRecursive+0x56>
 801363e:	2300      	movs	r3, #0
 8013640:	2200      	movs	r2, #0
 8013642:	2100      	movs	r1, #0
 8013644:	6938      	ldr	r0, [r7, #16]
 8013646:	f000 f841 	bl	80136cc <xQueueGenericSend>
 801364a:	2301      	movs	r3, #1
 801364c:	617b      	str	r3, [r7, #20]
 801364e:	e001      	b.n	8013654 <xQueueGiveMutexRecursive+0x60>
 8013650:	2300      	movs	r3, #0
 8013652:	617b      	str	r3, [r7, #20]
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	4618      	mov	r0, r3
 8013658:	371c      	adds	r7, #28
 801365a:	46bd      	mov	sp, r7
 801365c:	bd90      	pop	{r4, r7, pc}

0801365e <xQueueTakeMutexRecursive>:
 801365e:	b590      	push	{r4, r7, lr}
 8013660:	b087      	sub	sp, #28
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
 8013666:	6039      	str	r1, [r7, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	613b      	str	r3, [r7, #16]
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d10b      	bne.n	801368a <xQueueTakeMutexRecursive+0x2c>
 8013672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013676:	f383 8811 	msr	BASEPRI, r3
 801367a:	f3bf 8f6f 	isb	sy
 801367e:	f3bf 8f4f 	dsb	sy
 8013682:	60fb      	str	r3, [r7, #12]
 8013684:	bf00      	nop
 8013686:	bf00      	nop
 8013688:	e7fd      	b.n	8013686 <xQueueTakeMutexRecursive+0x28>
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	689c      	ldr	r4, [r3, #8]
 801368e:	f001 fbcb 	bl	8014e28 <xTaskGetCurrentTaskHandle>
 8013692:	4603      	mov	r3, r0
 8013694:	429c      	cmp	r4, r3
 8013696:	d107      	bne.n	80136a8 <xQueueTakeMutexRecursive+0x4a>
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	1c5a      	adds	r2, r3, #1
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	60da      	str	r2, [r3, #12]
 80136a2:	2301      	movs	r3, #1
 80136a4:	617b      	str	r3, [r7, #20]
 80136a6:	e00c      	b.n	80136c2 <xQueueTakeMutexRecursive+0x64>
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	6938      	ldr	r0, [r7, #16]
 80136ac:	f000 fa90 	bl	8013bd0 <xQueueSemaphoreTake>
 80136b0:	6178      	str	r0, [r7, #20]
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d004      	beq.n	80136c2 <xQueueTakeMutexRecursive+0x64>
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	1c5a      	adds	r2, r3, #1
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	60da      	str	r2, [r3, #12]
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	4618      	mov	r0, r3
 80136c6:	371c      	adds	r7, #28
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd90      	pop	{r4, r7, pc}

080136cc <xQueueGenericSend>:
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b08e      	sub	sp, #56	@ 0x38
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
 80136d8:	603b      	str	r3, [r7, #0]
 80136da:	2300      	movs	r3, #0
 80136dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80136e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d10b      	bne.n	8013700 <xQueueGenericSend+0x34>
 80136e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ec:	f383 8811 	msr	BASEPRI, r3
 80136f0:	f3bf 8f6f 	isb	sy
 80136f4:	f3bf 8f4f 	dsb	sy
 80136f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80136fa:	bf00      	nop
 80136fc:	bf00      	nop
 80136fe:	e7fd      	b.n	80136fc <xQueueGenericSend+0x30>
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d103      	bne.n	801370e <xQueueGenericSend+0x42>
 8013706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801370a:	2b00      	cmp	r3, #0
 801370c:	d101      	bne.n	8013712 <xQueueGenericSend+0x46>
 801370e:	2301      	movs	r3, #1
 8013710:	e000      	b.n	8013714 <xQueueGenericSend+0x48>
 8013712:	2300      	movs	r3, #0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d10b      	bne.n	8013730 <xQueueGenericSend+0x64>
 8013718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801371c:	f383 8811 	msr	BASEPRI, r3
 8013720:	f3bf 8f6f 	isb	sy
 8013724:	f3bf 8f4f 	dsb	sy
 8013728:	627b      	str	r3, [r7, #36]	@ 0x24
 801372a:	bf00      	nop
 801372c:	bf00      	nop
 801372e:	e7fd      	b.n	801372c <xQueueGenericSend+0x60>
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	2b02      	cmp	r3, #2
 8013734:	d103      	bne.n	801373e <xQueueGenericSend+0x72>
 8013736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801373a:	2b01      	cmp	r3, #1
 801373c:	d101      	bne.n	8013742 <xQueueGenericSend+0x76>
 801373e:	2301      	movs	r3, #1
 8013740:	e000      	b.n	8013744 <xQueueGenericSend+0x78>
 8013742:	2300      	movs	r3, #0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10b      	bne.n	8013760 <xQueueGenericSend+0x94>
 8013748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801374c:	f383 8811 	msr	BASEPRI, r3
 8013750:	f3bf 8f6f 	isb	sy
 8013754:	f3bf 8f4f 	dsb	sy
 8013758:	623b      	str	r3, [r7, #32]
 801375a:	bf00      	nop
 801375c:	bf00      	nop
 801375e:	e7fd      	b.n	801375c <xQueueGenericSend+0x90>
 8013760:	f001 fb72 	bl	8014e48 <xTaskGetSchedulerState>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	d102      	bne.n	8013770 <xQueueGenericSend+0xa4>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d101      	bne.n	8013774 <xQueueGenericSend+0xa8>
 8013770:	2301      	movs	r3, #1
 8013772:	e000      	b.n	8013776 <xQueueGenericSend+0xaa>
 8013774:	2300      	movs	r3, #0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10b      	bne.n	8013792 <xQueueGenericSend+0xc6>
 801377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	61fb      	str	r3, [r7, #28]
 801378c:	bf00      	nop
 801378e:	bf00      	nop
 8013790:	e7fd      	b.n	801378e <xQueueGenericSend+0xc2>
 8013792:	f002 fbd1 	bl	8015f38 <vPortEnterCritical>
 8013796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801379e:	429a      	cmp	r2, r3
 80137a0:	d302      	bcc.n	80137a8 <xQueueGenericSend+0xdc>
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	2b02      	cmp	r3, #2
 80137a6:	d129      	bne.n	80137fc <xQueueGenericSend+0x130>
 80137a8:	683a      	ldr	r2, [r7, #0]
 80137aa:	68b9      	ldr	r1, [r7, #8]
 80137ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80137ae:	f000 fb37 	bl	8013e20 <prvCopyDataToQueue>
 80137b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80137b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d010      	beq.n	80137de <xQueueGenericSend+0x112>
 80137bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137be:	3324      	adds	r3, #36	@ 0x24
 80137c0:	4618      	mov	r0, r3
 80137c2:	f001 f96b 	bl	8014a9c <xTaskRemoveFromEventList>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d013      	beq.n	80137f4 <xQueueGenericSend+0x128>
 80137cc:	4b3f      	ldr	r3, [pc, #252]	@ (80138cc <xQueueGenericSend+0x200>)
 80137ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137d2:	601a      	str	r2, [r3, #0]
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	f3bf 8f6f 	isb	sy
 80137dc:	e00a      	b.n	80137f4 <xQueueGenericSend+0x128>
 80137de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d007      	beq.n	80137f4 <xQueueGenericSend+0x128>
 80137e4:	4b39      	ldr	r3, [pc, #228]	@ (80138cc <xQueueGenericSend+0x200>)
 80137e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137ea:	601a      	str	r2, [r3, #0]
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	f3bf 8f6f 	isb	sy
 80137f4:	f002 fbd2 	bl	8015f9c <vPortExitCritical>
 80137f8:	2301      	movs	r3, #1
 80137fa:	e063      	b.n	80138c4 <xQueueGenericSend+0x1f8>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d103      	bne.n	801380a <xQueueGenericSend+0x13e>
 8013802:	f002 fbcb 	bl	8015f9c <vPortExitCritical>
 8013806:	2300      	movs	r3, #0
 8013808:	e05c      	b.n	80138c4 <xQueueGenericSend+0x1f8>
 801380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801380c:	2b00      	cmp	r3, #0
 801380e:	d106      	bne.n	801381e <xQueueGenericSend+0x152>
 8013810:	f107 0314 	add.w	r3, r7, #20
 8013814:	4618      	mov	r0, r3
 8013816:	f001 f9a5 	bl	8014b64 <vTaskInternalSetTimeOutState>
 801381a:	2301      	movs	r3, #1
 801381c:	637b      	str	r3, [r7, #52]	@ 0x34
 801381e:	f002 fbbd 	bl	8015f9c <vPortExitCritical>
 8013822:	f000 ff0d 	bl	8014640 <vTaskSuspendAll>
 8013826:	f002 fb87 	bl	8015f38 <vPortEnterCritical>
 801382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801382c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013830:	b25b      	sxtb	r3, r3
 8013832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013836:	d103      	bne.n	8013840 <xQueueGenericSend+0x174>
 8013838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801383a:	2200      	movs	r2, #0
 801383c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013842:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013846:	b25b      	sxtb	r3, r3
 8013848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801384c:	d103      	bne.n	8013856 <xQueueGenericSend+0x18a>
 801384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013850:	2200      	movs	r2, #0
 8013852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013856:	f002 fba1 	bl	8015f9c <vPortExitCritical>
 801385a:	1d3a      	adds	r2, r7, #4
 801385c:	f107 0314 	add.w	r3, r7, #20
 8013860:	4611      	mov	r1, r2
 8013862:	4618      	mov	r0, r3
 8013864:	f001 f994 	bl	8014b90 <xTaskCheckForTimeOut>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d124      	bne.n	80138b8 <xQueueGenericSend+0x1ec>
 801386e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013870:	f000 fbce 	bl	8014010 <prvIsQueueFull>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	d018      	beq.n	80138ac <xQueueGenericSend+0x1e0>
 801387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801387c:	3310      	adds	r3, #16
 801387e:	687a      	ldr	r2, [r7, #4]
 8013880:	4611      	mov	r1, r2
 8013882:	4618      	mov	r0, r3
 8013884:	f001 f8b8 	bl	80149f8 <vTaskPlaceOnEventList>
 8013888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801388a:	f000 fb59 	bl	8013f40 <prvUnlockQueue>
 801388e:	f000 fee5 	bl	801465c <xTaskResumeAll>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	f47f af7c 	bne.w	8013792 <xQueueGenericSend+0xc6>
 801389a:	4b0c      	ldr	r3, [pc, #48]	@ (80138cc <xQueueGenericSend+0x200>)
 801389c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138a0:	601a      	str	r2, [r3, #0]
 80138a2:	f3bf 8f4f 	dsb	sy
 80138a6:	f3bf 8f6f 	isb	sy
 80138aa:	e772      	b.n	8013792 <xQueueGenericSend+0xc6>
 80138ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138ae:	f000 fb47 	bl	8013f40 <prvUnlockQueue>
 80138b2:	f000 fed3 	bl	801465c <xTaskResumeAll>
 80138b6:	e76c      	b.n	8013792 <xQueueGenericSend+0xc6>
 80138b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138ba:	f000 fb41 	bl	8013f40 <prvUnlockQueue>
 80138be:	f000 fecd 	bl	801465c <xTaskResumeAll>
 80138c2:	2300      	movs	r3, #0
 80138c4:	4618      	mov	r0, r3
 80138c6:	3738      	adds	r7, #56	@ 0x38
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	e000ed04 	.word	0xe000ed04

080138d0 <xQueueGenericSendFromISR>:
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b090      	sub	sp, #64	@ 0x40
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
 80138dc:	603b      	str	r3, [r7, #0]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80138e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10b      	bne.n	8013900 <xQueueGenericSendFromISR+0x30>
 80138e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80138fa:	bf00      	nop
 80138fc:	bf00      	nop
 80138fe:	e7fd      	b.n	80138fc <xQueueGenericSendFromISR+0x2c>
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d103      	bne.n	801390e <xQueueGenericSendFromISR+0x3e>
 8013906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801390a:	2b00      	cmp	r3, #0
 801390c:	d101      	bne.n	8013912 <xQueueGenericSendFromISR+0x42>
 801390e:	2301      	movs	r3, #1
 8013910:	e000      	b.n	8013914 <xQueueGenericSendFromISR+0x44>
 8013912:	2300      	movs	r3, #0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10b      	bne.n	8013930 <xQueueGenericSendFromISR+0x60>
 8013918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	627b      	str	r3, [r7, #36]	@ 0x24
 801392a:	bf00      	nop
 801392c:	bf00      	nop
 801392e:	e7fd      	b.n	801392c <xQueueGenericSendFromISR+0x5c>
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	2b02      	cmp	r3, #2
 8013934:	d103      	bne.n	801393e <xQueueGenericSendFromISR+0x6e>
 8013936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801393a:	2b01      	cmp	r3, #1
 801393c:	d101      	bne.n	8013942 <xQueueGenericSendFromISR+0x72>
 801393e:	2301      	movs	r3, #1
 8013940:	e000      	b.n	8013944 <xQueueGenericSendFromISR+0x74>
 8013942:	2300      	movs	r3, #0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d10b      	bne.n	8013960 <xQueueGenericSendFromISR+0x90>
 8013948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801394c:	f383 8811 	msr	BASEPRI, r3
 8013950:	f3bf 8f6f 	isb	sy
 8013954:	f3bf 8f4f 	dsb	sy
 8013958:	623b      	str	r3, [r7, #32]
 801395a:	bf00      	nop
 801395c:	bf00      	nop
 801395e:	e7fd      	b.n	801395c <xQueueGenericSendFromISR+0x8c>
 8013960:	f002 fbca 	bl	80160f8 <vPortValidateInterruptPriority>
 8013964:	f3ef 8211 	mrs	r2, BASEPRI
 8013968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801396c:	f383 8811 	msr	BASEPRI, r3
 8013970:	f3bf 8f6f 	isb	sy
 8013974:	f3bf 8f4f 	dsb	sy
 8013978:	61fa      	str	r2, [r7, #28]
 801397a:	61bb      	str	r3, [r7, #24]
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013988:	429a      	cmp	r2, r3
 801398a:	d302      	bcc.n	8013992 <xQueueGenericSendFromISR+0xc2>
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	2b02      	cmp	r3, #2
 8013990:	d12f      	bne.n	80139f2 <xQueueGenericSendFromISR+0x122>
 8013992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013994:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013998:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80139a2:	683a      	ldr	r2, [r7, #0]
 80139a4:	68b9      	ldr	r1, [r7, #8]
 80139a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80139a8:	f000 fa3a 	bl	8013e20 <prvCopyDataToQueue>
 80139ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80139b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139b4:	d112      	bne.n	80139dc <xQueueGenericSendFromISR+0x10c>
 80139b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d016      	beq.n	80139ec <xQueueGenericSendFromISR+0x11c>
 80139be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139c0:	3324      	adds	r3, #36	@ 0x24
 80139c2:	4618      	mov	r0, r3
 80139c4:	f001 f86a 	bl	8014a9c <xTaskRemoveFromEventList>
 80139c8:	4603      	mov	r3, r0
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00e      	beq.n	80139ec <xQueueGenericSendFromISR+0x11c>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d00b      	beq.n	80139ec <xQueueGenericSendFromISR+0x11c>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2201      	movs	r2, #1
 80139d8:	601a      	str	r2, [r3, #0]
 80139da:	e007      	b.n	80139ec <xQueueGenericSendFromISR+0x11c>
 80139dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80139e0:	3301      	adds	r3, #1
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	b25a      	sxtb	r2, r3
 80139e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80139ec:	2301      	movs	r3, #1
 80139ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139f0:	e001      	b.n	80139f6 <xQueueGenericSendFromISR+0x126>
 80139f2:	2300      	movs	r3, #0
 80139f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139f8:	617b      	str	r3, [r7, #20]
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	f383 8811 	msr	BASEPRI, r3
 8013a00:	bf00      	nop
 8013a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a04:	4618      	mov	r0, r3
 8013a06:	3740      	adds	r7, #64	@ 0x40
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}

08013a0c <xQueueReceive>:
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b08c      	sub	sp, #48	@ 0x30
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	60b9      	str	r1, [r7, #8]
 8013a16:	607a      	str	r2, [r7, #4]
 8013a18:	2300      	movs	r3, #0
 8013a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d10b      	bne.n	8013a3e <xQueueReceive+0x32>
 8013a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a2a:	f383 8811 	msr	BASEPRI, r3
 8013a2e:	f3bf 8f6f 	isb	sy
 8013a32:	f3bf 8f4f 	dsb	sy
 8013a36:	623b      	str	r3, [r7, #32]
 8013a38:	bf00      	nop
 8013a3a:	bf00      	nop
 8013a3c:	e7fd      	b.n	8013a3a <xQueueReceive+0x2e>
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d103      	bne.n	8013a4c <xQueueReceive+0x40>
 8013a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d101      	bne.n	8013a50 <xQueueReceive+0x44>
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	e000      	b.n	8013a52 <xQueueReceive+0x46>
 8013a50:	2300      	movs	r3, #0
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d10b      	bne.n	8013a6e <xQueueReceive+0x62>
 8013a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a5a:	f383 8811 	msr	BASEPRI, r3
 8013a5e:	f3bf 8f6f 	isb	sy
 8013a62:	f3bf 8f4f 	dsb	sy
 8013a66:	61fb      	str	r3, [r7, #28]
 8013a68:	bf00      	nop
 8013a6a:	bf00      	nop
 8013a6c:	e7fd      	b.n	8013a6a <xQueueReceive+0x5e>
 8013a6e:	f001 f9eb 	bl	8014e48 <xTaskGetSchedulerState>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d102      	bne.n	8013a7e <xQueueReceive+0x72>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d101      	bne.n	8013a82 <xQueueReceive+0x76>
 8013a7e:	2301      	movs	r3, #1
 8013a80:	e000      	b.n	8013a84 <xQueueReceive+0x78>
 8013a82:	2300      	movs	r3, #0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d10b      	bne.n	8013aa0 <xQueueReceive+0x94>
 8013a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a8c:	f383 8811 	msr	BASEPRI, r3
 8013a90:	f3bf 8f6f 	isb	sy
 8013a94:	f3bf 8f4f 	dsb	sy
 8013a98:	61bb      	str	r3, [r7, #24]
 8013a9a:	bf00      	nop
 8013a9c:	bf00      	nop
 8013a9e:	e7fd      	b.n	8013a9c <xQueueReceive+0x90>
 8013aa0:	f002 fa4a 	bl	8015f38 <vPortEnterCritical>
 8013aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01f      	beq.n	8013af0 <xQueueReceive+0xe4>
 8013ab0:	68b9      	ldr	r1, [r7, #8]
 8013ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ab4:	f000 fa1e 	bl	8013ef4 <prvCopyDataFromQueue>
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aba:	1e5a      	subs	r2, r3, #1
 8013abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013abe:	639a      	str	r2, [r3, #56]	@ 0x38
 8013ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ac2:	691b      	ldr	r3, [r3, #16]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00f      	beq.n	8013ae8 <xQueueReceive+0xdc>
 8013ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aca:	3310      	adds	r3, #16
 8013acc:	4618      	mov	r0, r3
 8013ace:	f000 ffe5 	bl	8014a9c <xTaskRemoveFromEventList>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d007      	beq.n	8013ae8 <xQueueReceive+0xdc>
 8013ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8013bcc <xQueueReceive+0x1c0>)
 8013ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ade:	601a      	str	r2, [r3, #0]
 8013ae0:	f3bf 8f4f 	dsb	sy
 8013ae4:	f3bf 8f6f 	isb	sy
 8013ae8:	f002 fa58 	bl	8015f9c <vPortExitCritical>
 8013aec:	2301      	movs	r3, #1
 8013aee:	e069      	b.n	8013bc4 <xQueueReceive+0x1b8>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d103      	bne.n	8013afe <xQueueReceive+0xf2>
 8013af6:	f002 fa51 	bl	8015f9c <vPortExitCritical>
 8013afa:	2300      	movs	r3, #0
 8013afc:	e062      	b.n	8013bc4 <xQueueReceive+0x1b8>
 8013afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d106      	bne.n	8013b12 <xQueueReceive+0x106>
 8013b04:	f107 0310 	add.w	r3, r7, #16
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f001 f82b 	bl	8014b64 <vTaskInternalSetTimeOutState>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b12:	f002 fa43 	bl	8015f9c <vPortExitCritical>
 8013b16:	f000 fd93 	bl	8014640 <vTaskSuspendAll>
 8013b1a:	f002 fa0d 	bl	8015f38 <vPortEnterCritical>
 8013b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013b24:	b25b      	sxtb	r3, r3
 8013b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b2a:	d103      	bne.n	8013b34 <xQueueReceive+0x128>
 8013b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b3a:	b25b      	sxtb	r3, r3
 8013b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b40:	d103      	bne.n	8013b4a <xQueueReceive+0x13e>
 8013b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b44:	2200      	movs	r2, #0
 8013b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013b4a:	f002 fa27 	bl	8015f9c <vPortExitCritical>
 8013b4e:	1d3a      	adds	r2, r7, #4
 8013b50:	f107 0310 	add.w	r3, r7, #16
 8013b54:	4611      	mov	r1, r2
 8013b56:	4618      	mov	r0, r3
 8013b58:	f001 f81a 	bl	8014b90 <xTaskCheckForTimeOut>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d123      	bne.n	8013baa <xQueueReceive+0x19e>
 8013b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b64:	f000 fa3e 	bl	8013fe4 <prvIsQueueEmpty>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d017      	beq.n	8013b9e <xQueueReceive+0x192>
 8013b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b70:	3324      	adds	r3, #36	@ 0x24
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	4611      	mov	r1, r2
 8013b76:	4618      	mov	r0, r3
 8013b78:	f000 ff3e 	bl	80149f8 <vTaskPlaceOnEventList>
 8013b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b7e:	f000 f9df 	bl	8013f40 <prvUnlockQueue>
 8013b82:	f000 fd6b 	bl	801465c <xTaskResumeAll>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d189      	bne.n	8013aa0 <xQueueReceive+0x94>
 8013b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8013bcc <xQueueReceive+0x1c0>)
 8013b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	f3bf 8f4f 	dsb	sy
 8013b98:	f3bf 8f6f 	isb	sy
 8013b9c:	e780      	b.n	8013aa0 <xQueueReceive+0x94>
 8013b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ba0:	f000 f9ce 	bl	8013f40 <prvUnlockQueue>
 8013ba4:	f000 fd5a 	bl	801465c <xTaskResumeAll>
 8013ba8:	e77a      	b.n	8013aa0 <xQueueReceive+0x94>
 8013baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bac:	f000 f9c8 	bl	8013f40 <prvUnlockQueue>
 8013bb0:	f000 fd54 	bl	801465c <xTaskResumeAll>
 8013bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bb6:	f000 fa15 	bl	8013fe4 <prvIsQueueEmpty>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	f43f af6f 	beq.w	8013aa0 <xQueueReceive+0x94>
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3730      	adds	r7, #48	@ 0x30
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	e000ed04 	.word	0xe000ed04

08013bd0 <xQueueSemaphoreTake>:
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b08e      	sub	sp, #56	@ 0x38
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
 8013bda:	2300      	movs	r3, #0
 8013bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013be2:	2300      	movs	r3, #0
 8013be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8013be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d10b      	bne.n	8013c04 <xQueueSemaphoreTake+0x34>
 8013bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bf0:	f383 8811 	msr	BASEPRI, r3
 8013bf4:	f3bf 8f6f 	isb	sy
 8013bf8:	f3bf 8f4f 	dsb	sy
 8013bfc:	623b      	str	r3, [r7, #32]
 8013bfe:	bf00      	nop
 8013c00:	bf00      	nop
 8013c02:	e7fd      	b.n	8013c00 <xQueueSemaphoreTake+0x30>
 8013c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d00b      	beq.n	8013c24 <xQueueSemaphoreTake+0x54>
 8013c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c10:	f383 8811 	msr	BASEPRI, r3
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	61fb      	str	r3, [r7, #28]
 8013c1e:	bf00      	nop
 8013c20:	bf00      	nop
 8013c22:	e7fd      	b.n	8013c20 <xQueueSemaphoreTake+0x50>
 8013c24:	f001 f910 	bl	8014e48 <xTaskGetSchedulerState>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d102      	bne.n	8013c34 <xQueueSemaphoreTake+0x64>
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d101      	bne.n	8013c38 <xQueueSemaphoreTake+0x68>
 8013c34:	2301      	movs	r3, #1
 8013c36:	e000      	b.n	8013c3a <xQueueSemaphoreTake+0x6a>
 8013c38:	2300      	movs	r3, #0
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d10b      	bne.n	8013c56 <xQueueSemaphoreTake+0x86>
 8013c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c42:	f383 8811 	msr	BASEPRI, r3
 8013c46:	f3bf 8f6f 	isb	sy
 8013c4a:	f3bf 8f4f 	dsb	sy
 8013c4e:	61bb      	str	r3, [r7, #24]
 8013c50:	bf00      	nop
 8013c52:	bf00      	nop
 8013c54:	e7fd      	b.n	8013c52 <xQueueSemaphoreTake+0x82>
 8013c56:	f002 f96f 	bl	8015f38 <vPortEnterCritical>
 8013c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d024      	beq.n	8013cb0 <xQueueSemaphoreTake+0xe0>
 8013c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c68:	1e5a      	subs	r2, r3, #1
 8013c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8013c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d104      	bne.n	8013c80 <xQueueSemaphoreTake+0xb0>
 8013c76:	f001 fa61 	bl	801513c <pvTaskIncrementMutexHeldCount>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c7e:	609a      	str	r2, [r3, #8]
 8013c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c82:	691b      	ldr	r3, [r3, #16]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00f      	beq.n	8013ca8 <xQueueSemaphoreTake+0xd8>
 8013c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8a:	3310      	adds	r3, #16
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f000 ff05 	bl	8014a9c <xTaskRemoveFromEventList>
 8013c92:	4603      	mov	r3, r0
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d007      	beq.n	8013ca8 <xQueueSemaphoreTake+0xd8>
 8013c98:	4b54      	ldr	r3, [pc, #336]	@ (8013dec <xQueueSemaphoreTake+0x21c>)
 8013c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c9e:	601a      	str	r2, [r3, #0]
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f002 f978 	bl	8015f9c <vPortExitCritical>
 8013cac:	2301      	movs	r3, #1
 8013cae:	e098      	b.n	8013de2 <xQueueSemaphoreTake+0x212>
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d112      	bne.n	8013cdc <xQueueSemaphoreTake+0x10c>
 8013cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00b      	beq.n	8013cd4 <xQueueSemaphoreTake+0x104>
 8013cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cc0:	f383 8811 	msr	BASEPRI, r3
 8013cc4:	f3bf 8f6f 	isb	sy
 8013cc8:	f3bf 8f4f 	dsb	sy
 8013ccc:	617b      	str	r3, [r7, #20]
 8013cce:	bf00      	nop
 8013cd0:	bf00      	nop
 8013cd2:	e7fd      	b.n	8013cd0 <xQueueSemaphoreTake+0x100>
 8013cd4:	f002 f962 	bl	8015f9c <vPortExitCritical>
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e082      	b.n	8013de2 <xQueueSemaphoreTake+0x212>
 8013cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d106      	bne.n	8013cf0 <xQueueSemaphoreTake+0x120>
 8013ce2:	f107 030c 	add.w	r3, r7, #12
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f000 ff3c 	bl	8014b64 <vTaskInternalSetTimeOutState>
 8013cec:	2301      	movs	r3, #1
 8013cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8013cf0:	f002 f954 	bl	8015f9c <vPortExitCritical>
 8013cf4:	f000 fca4 	bl	8014640 <vTaskSuspendAll>
 8013cf8:	f002 f91e 	bl	8015f38 <vPortEnterCritical>
 8013cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d02:	b25b      	sxtb	r3, r3
 8013d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d08:	d103      	bne.n	8013d12 <xQueueSemaphoreTake+0x142>
 8013d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d18:	b25b      	sxtb	r3, r3
 8013d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1e:	d103      	bne.n	8013d28 <xQueueSemaphoreTake+0x158>
 8013d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d22:	2200      	movs	r2, #0
 8013d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d28:	f002 f938 	bl	8015f9c <vPortExitCritical>
 8013d2c:	463a      	mov	r2, r7
 8013d2e:	f107 030c 	add.w	r3, r7, #12
 8013d32:	4611      	mov	r1, r2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f000 ff2b 	bl	8014b90 <xTaskCheckForTimeOut>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d132      	bne.n	8013da6 <xQueueSemaphoreTake+0x1d6>
 8013d40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d42:	f000 f94f 	bl	8013fe4 <prvIsQueueEmpty>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d026      	beq.n	8013d9a <xQueueSemaphoreTake+0x1ca>
 8013d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d109      	bne.n	8013d68 <xQueueSemaphoreTake+0x198>
 8013d54:	f002 f8f0 	bl	8015f38 <vPortEnterCritical>
 8013d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d5a:	689b      	ldr	r3, [r3, #8]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f001 f891 	bl	8014e84 <xTaskPriorityInherit>
 8013d62:	6338      	str	r0, [r7, #48]	@ 0x30
 8013d64:	f002 f91a 	bl	8015f9c <vPortExitCritical>
 8013d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d6a:	3324      	adds	r3, #36	@ 0x24
 8013d6c:	683a      	ldr	r2, [r7, #0]
 8013d6e:	4611      	mov	r1, r2
 8013d70:	4618      	mov	r0, r3
 8013d72:	f000 fe41 	bl	80149f8 <vTaskPlaceOnEventList>
 8013d76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d78:	f000 f8e2 	bl	8013f40 <prvUnlockQueue>
 8013d7c:	f000 fc6e 	bl	801465c <xTaskResumeAll>
 8013d80:	4603      	mov	r3, r0
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	f47f af67 	bne.w	8013c56 <xQueueSemaphoreTake+0x86>
 8013d88:	4b18      	ldr	r3, [pc, #96]	@ (8013dec <xQueueSemaphoreTake+0x21c>)
 8013d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d8e:	601a      	str	r2, [r3, #0]
 8013d90:	f3bf 8f4f 	dsb	sy
 8013d94:	f3bf 8f6f 	isb	sy
 8013d98:	e75d      	b.n	8013c56 <xQueueSemaphoreTake+0x86>
 8013d9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d9c:	f000 f8d0 	bl	8013f40 <prvUnlockQueue>
 8013da0:	f000 fc5c 	bl	801465c <xTaskResumeAll>
 8013da4:	e757      	b.n	8013c56 <xQueueSemaphoreTake+0x86>
 8013da6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013da8:	f000 f8ca 	bl	8013f40 <prvUnlockQueue>
 8013dac:	f000 fc56 	bl	801465c <xTaskResumeAll>
 8013db0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013db2:	f000 f917 	bl	8013fe4 <prvIsQueueEmpty>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f43f af4c 	beq.w	8013c56 <xQueueSemaphoreTake+0x86>
 8013dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d00d      	beq.n	8013de0 <xQueueSemaphoreTake+0x210>
 8013dc4:	f002 f8b8 	bl	8015f38 <vPortEnterCritical>
 8013dc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dca:	f000 f811 	bl	8013df0 <prvGetDisinheritPriorityAfterTimeout>
 8013dce:	6278      	str	r0, [r7, #36]	@ 0x24
 8013dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dd2:	689b      	ldr	r3, [r3, #8]
 8013dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f001 f92c 	bl	8015034 <vTaskPriorityDisinheritAfterTimeout>
 8013ddc:	f002 f8de 	bl	8015f9c <vPortExitCritical>
 8013de0:	2300      	movs	r3, #0
 8013de2:	4618      	mov	r0, r3
 8013de4:	3738      	adds	r7, #56	@ 0x38
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	e000ed04 	.word	0xe000ed04

08013df0 <prvGetDisinheritPriorityAfterTimeout>:
 8013df0:	b480      	push	{r7}
 8013df2:	b085      	sub	sp, #20
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d006      	beq.n	8013e0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	e001      	b.n	8013e12 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8013e0e:	2300      	movs	r3, #0
 8013e10:	60fb      	str	r3, [r7, #12]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	4618      	mov	r0, r3
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr

08013e20 <prvCopyDataToQueue>:
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	607a      	str	r2, [r7, #4]
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	617b      	str	r3, [r7, #20]
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e34:	613b      	str	r3, [r7, #16]
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d10d      	bne.n	8013e5a <prvCopyDataToQueue+0x3a>
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d14d      	bne.n	8013ee2 <prvCopyDataToQueue+0xc2>
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f001 f882 	bl	8014f54 <xTaskPriorityDisinherit>
 8013e50:	6178      	str	r0, [r7, #20]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2200      	movs	r2, #0
 8013e56:	609a      	str	r2, [r3, #8]
 8013e58:	e043      	b.n	8013ee2 <prvCopyDataToQueue+0xc2>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d119      	bne.n	8013e94 <prvCopyDataToQueue+0x74>
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	6858      	ldr	r0, [r3, #4]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e68:	461a      	mov	r2, r3
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	f003 fbc9 	bl	8017602 <memcpy>
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	685a      	ldr	r2, [r3, #4]
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e78:	441a      	add	r2, r3
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	605a      	str	r2, [r3, #4]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	685a      	ldr	r2, [r3, #4]
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d32b      	bcc.n	8013ee2 <prvCopyDataToQueue+0xc2>
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	605a      	str	r2, [r3, #4]
 8013e92:	e026      	b.n	8013ee2 <prvCopyDataToQueue+0xc2>
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	68d8      	ldr	r0, [r3, #12]
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	68b9      	ldr	r1, [r7, #8]
 8013ea0:	f003 fbaf 	bl	8017602 <memcpy>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	68da      	ldr	r2, [r3, #12]
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013eac:	425b      	negs	r3, r3
 8013eae:	441a      	add	r2, r3
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	60da      	str	r2, [r3, #12]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	68da      	ldr	r2, [r3, #12]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d207      	bcs.n	8013ed0 <prvCopyDataToQueue+0xb0>
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	689a      	ldr	r2, [r3, #8]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ec8:	425b      	negs	r3, r3
 8013eca:	441a      	add	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	60da      	str	r2, [r3, #12]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d105      	bne.n	8013ee2 <prvCopyDataToQueue+0xc2>
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d002      	beq.n	8013ee2 <prvCopyDataToQueue+0xc2>
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	3b01      	subs	r3, #1
 8013ee0:	613b      	str	r3, [r7, #16]
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	1c5a      	adds	r2, r3, #1
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	639a      	str	r2, [r3, #56]	@ 0x38
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	4618      	mov	r0, r3
 8013eee:	3718      	adds	r7, #24
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <prvCopyDataFromQueue>:
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d018      	beq.n	8013f38 <prvCopyDataFromQueue+0x44>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	68da      	ldr	r2, [r3, #12]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f0e:	441a      	add	r2, r3
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	60da      	str	r2, [r3, #12]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	68da      	ldr	r2, [r3, #12]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	689b      	ldr	r3, [r3, #8]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d303      	bcc.n	8013f28 <prvCopyDataFromQueue+0x34>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	60da      	str	r2, [r3, #12]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	68d9      	ldr	r1, [r3, #12]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f30:	461a      	mov	r2, r3
 8013f32:	6838      	ldr	r0, [r7, #0]
 8013f34:	f003 fb65 	bl	8017602 <memcpy>
 8013f38:	bf00      	nop
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <prvUnlockQueue>:
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	f001 fff6 	bl	8015f38 <vPortEnterCritical>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013f52:	73fb      	strb	r3, [r7, #15]
 8013f54:	e011      	b.n	8013f7a <prvUnlockQueue+0x3a>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d012      	beq.n	8013f84 <prvUnlockQueue+0x44>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	3324      	adds	r3, #36	@ 0x24
 8013f62:	4618      	mov	r0, r3
 8013f64:	f000 fd9a 	bl	8014a9c <xTaskRemoveFromEventList>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d001      	beq.n	8013f72 <prvUnlockQueue+0x32>
 8013f6e:	f000 fe73 	bl	8014c58 <vTaskMissedYield>
 8013f72:	7bfb      	ldrb	r3, [r7, #15]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	b2db      	uxtb	r3, r3
 8013f78:	73fb      	strb	r3, [r7, #15]
 8013f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	dce9      	bgt.n	8013f56 <prvUnlockQueue+0x16>
 8013f82:	e000      	b.n	8013f86 <prvUnlockQueue+0x46>
 8013f84:	bf00      	nop
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	22ff      	movs	r2, #255	@ 0xff
 8013f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013f8e:	f002 f805 	bl	8015f9c <vPortExitCritical>
 8013f92:	f001 ffd1 	bl	8015f38 <vPortEnterCritical>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013f9c:	73bb      	strb	r3, [r7, #14]
 8013f9e:	e011      	b.n	8013fc4 <prvUnlockQueue+0x84>
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	691b      	ldr	r3, [r3, #16]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d012      	beq.n	8013fce <prvUnlockQueue+0x8e>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3310      	adds	r3, #16
 8013fac:	4618      	mov	r0, r3
 8013fae:	f000 fd75 	bl	8014a9c <xTaskRemoveFromEventList>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d001      	beq.n	8013fbc <prvUnlockQueue+0x7c>
 8013fb8:	f000 fe4e 	bl	8014c58 <vTaskMissedYield>
 8013fbc:	7bbb      	ldrb	r3, [r7, #14]
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	73bb      	strb	r3, [r7, #14]
 8013fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	dce9      	bgt.n	8013fa0 <prvUnlockQueue+0x60>
 8013fcc:	e000      	b.n	8013fd0 <prvUnlockQueue+0x90>
 8013fce:	bf00      	nop
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	22ff      	movs	r2, #255	@ 0xff
 8013fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013fd8:	f001 ffe0 	bl	8015f9c <vPortExitCritical>
 8013fdc:	bf00      	nop
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <prvIsQueueEmpty>:
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	f001 ffa4 	bl	8015f38 <vPortEnterCritical>
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d102      	bne.n	8013ffe <prvIsQueueEmpty+0x1a>
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	60fb      	str	r3, [r7, #12]
 8013ffc:	e001      	b.n	8014002 <prvIsQueueEmpty+0x1e>
 8013ffe:	2300      	movs	r3, #0
 8014000:	60fb      	str	r3, [r7, #12]
 8014002:	f001 ffcb 	bl	8015f9c <vPortExitCritical>
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	4618      	mov	r0, r3
 801400a:	3710      	adds	r7, #16
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <prvIsQueueFull>:
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	f001 ff8e 	bl	8015f38 <vPortEnterCritical>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014024:	429a      	cmp	r2, r3
 8014026:	d102      	bne.n	801402e <prvIsQueueFull+0x1e>
 8014028:	2301      	movs	r3, #1
 801402a:	60fb      	str	r3, [r7, #12]
 801402c:	e001      	b.n	8014032 <prvIsQueueFull+0x22>
 801402e:	2300      	movs	r3, #0
 8014030:	60fb      	str	r3, [r7, #12]
 8014032:	f001 ffb3 	bl	8015f9c <vPortExitCritical>
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	4618      	mov	r0, r3
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <vQueueAddToRegistry>:
 8014040:	b480      	push	{r7}
 8014042:	b085      	sub	sp, #20
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
 801404a:	2300      	movs	r3, #0
 801404c:	60fb      	str	r3, [r7, #12]
 801404e:	e014      	b.n	801407a <vQueueAddToRegistry+0x3a>
 8014050:	4a0f      	ldr	r2, [pc, #60]	@ (8014090 <vQueueAddToRegistry+0x50>)
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d10b      	bne.n	8014074 <vQueueAddToRegistry+0x34>
 801405c:	490c      	ldr	r1, [pc, #48]	@ (8014090 <vQueueAddToRegistry+0x50>)
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014066:	4a0a      	ldr	r2, [pc, #40]	@ (8014090 <vQueueAddToRegistry+0x50>)
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	00db      	lsls	r3, r3, #3
 801406c:	4413      	add	r3, r2
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	605a      	str	r2, [r3, #4]
 8014072:	e006      	b.n	8014082 <vQueueAddToRegistry+0x42>
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	3301      	adds	r3, #1
 8014078:	60fb      	str	r3, [r7, #12]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b07      	cmp	r3, #7
 801407e:	d9e7      	bls.n	8014050 <vQueueAddToRegistry+0x10>
 8014080:	bf00      	nop
 8014082:	bf00      	nop
 8014084:	3714      	adds	r7, #20
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	20000d50 	.word	0x20000d50

08014094 <vQueueWaitForMessageRestricted>:
 8014094:	b580      	push	{r7, lr}
 8014096:	b086      	sub	sp, #24
 8014098:	af00      	add	r7, sp, #0
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	60b9      	str	r1, [r7, #8]
 801409e:	607a      	str	r2, [r7, #4]
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	617b      	str	r3, [r7, #20]
 80140a4:	f001 ff48 	bl	8015f38 <vPortEnterCritical>
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80140ae:	b25b      	sxtb	r3, r3
 80140b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b4:	d103      	bne.n	80140be <vQueueWaitForMessageRestricted+0x2a>
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	2200      	movs	r2, #0
 80140ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80140c4:	b25b      	sxtb	r3, r3
 80140c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ca:	d103      	bne.n	80140d4 <vQueueWaitForMessageRestricted+0x40>
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	2200      	movs	r2, #0
 80140d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80140d4:	f001 ff62 	bl	8015f9c <vPortExitCritical>
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d106      	bne.n	80140ee <vQueueWaitForMessageRestricted+0x5a>
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	3324      	adds	r3, #36	@ 0x24
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	68b9      	ldr	r1, [r7, #8]
 80140e8:	4618      	mov	r0, r3
 80140ea:	f000 fcab 	bl	8014a44 <vTaskPlaceOnEventListRestricted>
 80140ee:	6978      	ldr	r0, [r7, #20]
 80140f0:	f7ff ff26 	bl	8013f40 <prvUnlockQueue>
 80140f4:	bf00      	nop
 80140f6:	3718      	adds	r7, #24
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}

080140fc <xTaskCreateStatic>:
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b08e      	sub	sp, #56	@ 0x38
 8014100:	af04      	add	r7, sp, #16
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	603b      	str	r3, [r7, #0]
 801410a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10b      	bne.n	8014128 <xTaskCreateStatic+0x2c>
 8014110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	623b      	str	r3, [r7, #32]
 8014122:	bf00      	nop
 8014124:	bf00      	nop
 8014126:	e7fd      	b.n	8014124 <xTaskCreateStatic+0x28>
 8014128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10b      	bne.n	8014146 <xTaskCreateStatic+0x4a>
 801412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014132:	f383 8811 	msr	BASEPRI, r3
 8014136:	f3bf 8f6f 	isb	sy
 801413a:	f3bf 8f4f 	dsb	sy
 801413e:	61fb      	str	r3, [r7, #28]
 8014140:	bf00      	nop
 8014142:	bf00      	nop
 8014144:	e7fd      	b.n	8014142 <xTaskCreateStatic+0x46>
 8014146:	23a8      	movs	r3, #168	@ 0xa8
 8014148:	613b      	str	r3, [r7, #16]
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	2ba8      	cmp	r3, #168	@ 0xa8
 801414e:	d00b      	beq.n	8014168 <xTaskCreateStatic+0x6c>
 8014150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014154:	f383 8811 	msr	BASEPRI, r3
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	f3bf 8f4f 	dsb	sy
 8014160:	61bb      	str	r3, [r7, #24]
 8014162:	bf00      	nop
 8014164:	bf00      	nop
 8014166:	e7fd      	b.n	8014164 <xTaskCreateStatic+0x68>
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801416c:	2b00      	cmp	r3, #0
 801416e:	d01e      	beq.n	80141ae <xTaskCreateStatic+0xb2>
 8014170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014172:	2b00      	cmp	r3, #0
 8014174:	d01b      	beq.n	80141ae <xTaskCreateStatic+0xb2>
 8014176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014178:	627b      	str	r3, [r7, #36]	@ 0x24
 801417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801417c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801417e:	631a      	str	r2, [r3, #48]	@ 0x30
 8014180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014182:	2202      	movs	r2, #2
 8014184:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 8014188:	2300      	movs	r3, #0
 801418a:	9303      	str	r3, [sp, #12]
 801418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801418e:	9302      	str	r3, [sp, #8]
 8014190:	f107 0314 	add.w	r3, r7, #20
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014198:	9300      	str	r3, [sp, #0]
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	687a      	ldr	r2, [r7, #4]
 801419e:	68b9      	ldr	r1, [r7, #8]
 80141a0:	68f8      	ldr	r0, [r7, #12]
 80141a2:	f000 f851 	bl	8014248 <prvInitialiseNewTask>
 80141a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141a8:	f000 f8f6 	bl	8014398 <prvAddNewTaskToReadyList>
 80141ac:	e001      	b.n	80141b2 <xTaskCreateStatic+0xb6>
 80141ae:	2300      	movs	r3, #0
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	4618      	mov	r0, r3
 80141b6:	3728      	adds	r7, #40	@ 0x28
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <xTaskCreate>:
 80141bc:	b580      	push	{r7, lr}
 80141be:	b08c      	sub	sp, #48	@ 0x30
 80141c0:	af04      	add	r7, sp, #16
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	603b      	str	r3, [r7, #0]
 80141c8:	4613      	mov	r3, r2
 80141ca:	80fb      	strh	r3, [r7, #6]
 80141cc:	88fb      	ldrh	r3, [r7, #6]
 80141ce:	009b      	lsls	r3, r3, #2
 80141d0:	4618      	mov	r0, r3
 80141d2:	f001 ffd3 	bl	801617c <pvPortMalloc>
 80141d6:	6178      	str	r0, [r7, #20]
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d00e      	beq.n	80141fc <xTaskCreate+0x40>
 80141de:	20a8      	movs	r0, #168	@ 0xa8
 80141e0:	f001 ffcc 	bl	801617c <pvPortMalloc>
 80141e4:	61f8      	str	r0, [r7, #28]
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d003      	beq.n	80141f4 <xTaskCreate+0x38>
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	697a      	ldr	r2, [r7, #20]
 80141f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80141f2:	e005      	b.n	8014200 <xTaskCreate+0x44>
 80141f4:	6978      	ldr	r0, [r7, #20]
 80141f6:	f002 f88f 	bl	8016318 <vPortFree>
 80141fa:	e001      	b.n	8014200 <xTaskCreate+0x44>
 80141fc:	2300      	movs	r3, #0
 80141fe:	61fb      	str	r3, [r7, #28]
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d017      	beq.n	8014236 <xTaskCreate+0x7a>
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	2200      	movs	r2, #0
 801420a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 801420e:	88fa      	ldrh	r2, [r7, #6]
 8014210:	2300      	movs	r3, #0
 8014212:	9303      	str	r3, [sp, #12]
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	9302      	str	r3, [sp, #8]
 8014218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801421a:	9301      	str	r3, [sp, #4]
 801421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421e:	9300      	str	r3, [sp, #0]
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	68b9      	ldr	r1, [r7, #8]
 8014224:	68f8      	ldr	r0, [r7, #12]
 8014226:	f000 f80f 	bl	8014248 <prvInitialiseNewTask>
 801422a:	69f8      	ldr	r0, [r7, #28]
 801422c:	f000 f8b4 	bl	8014398 <prvAddNewTaskToReadyList>
 8014230:	2301      	movs	r3, #1
 8014232:	61bb      	str	r3, [r7, #24]
 8014234:	e002      	b.n	801423c <xTaskCreate+0x80>
 8014236:	f04f 33ff 	mov.w	r3, #4294967295
 801423a:	61bb      	str	r3, [r7, #24]
 801423c:	69bb      	ldr	r3, [r7, #24]
 801423e:	4618      	mov	r0, r3
 8014240:	3720      	adds	r7, #32
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
	...

08014248 <prvInitialiseNewTask>:
 8014248:	b580      	push	{r7, lr}
 801424a:	b088      	sub	sp, #32
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
 8014254:	603b      	str	r3, [r7, #0]
 8014256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	461a      	mov	r2, r3
 8014260:	21a5      	movs	r1, #165	@ 0xa5
 8014262:	f003 f8f5 	bl	8017450 <memset>
 8014266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8014270:	3b01      	subs	r3, #1
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4413      	add	r3, r2
 8014276:	61bb      	str	r3, [r7, #24]
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	f023 0307 	bic.w	r3, r3, #7
 801427e:	61bb      	str	r3, [r7, #24]
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	f003 0307 	and.w	r3, r3, #7
 8014286:	2b00      	cmp	r3, #0
 8014288:	d00b      	beq.n	80142a2 <prvInitialiseNewTask+0x5a>
 801428a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801428e:	f383 8811 	msr	BASEPRI, r3
 8014292:	f3bf 8f6f 	isb	sy
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	617b      	str	r3, [r7, #20]
 801429c:	bf00      	nop
 801429e:	bf00      	nop
 80142a0:	e7fd      	b.n	801429e <prvInitialiseNewTask+0x56>
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d01f      	beq.n	80142e8 <prvInitialiseNewTask+0xa0>
 80142a8:	2300      	movs	r3, #0
 80142aa:	61fb      	str	r3, [r7, #28]
 80142ac:	e012      	b.n	80142d4 <prvInitialiseNewTask+0x8c>
 80142ae:	68ba      	ldr	r2, [r7, #8]
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	4413      	add	r3, r2
 80142b4:	7819      	ldrb	r1, [r3, #0]
 80142b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	4413      	add	r3, r2
 80142bc:	3334      	adds	r3, #52	@ 0x34
 80142be:	460a      	mov	r2, r1
 80142c0:	701a      	strb	r2, [r3, #0]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	69fb      	ldr	r3, [r7, #28]
 80142c6:	4413      	add	r3, r2
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d006      	beq.n	80142dc <prvInitialiseNewTask+0x94>
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	3301      	adds	r3, #1
 80142d2:	61fb      	str	r3, [r7, #28]
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	2b0f      	cmp	r3, #15
 80142d8:	d9e9      	bls.n	80142ae <prvInitialiseNewTask+0x66>
 80142da:	e000      	b.n	80142de <prvInitialiseNewTask+0x96>
 80142dc:	bf00      	nop
 80142de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142e0:	2200      	movs	r2, #0
 80142e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80142e6:	e003      	b.n	80142f0 <prvInitialiseNewTask+0xa8>
 80142e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142ea:	2200      	movs	r2, #0
 80142ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80142f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142f2:	2b37      	cmp	r3, #55	@ 0x37
 80142f4:	d901      	bls.n	80142fa <prvInitialiseNewTask+0xb2>
 80142f6:	2337      	movs	r3, #55	@ 0x37
 80142f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80142fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80142fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014304:	64da      	str	r2, [r3, #76]	@ 0x4c
 8014306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014308:	2200      	movs	r2, #0
 801430a:	651a      	str	r2, [r3, #80]	@ 0x50
 801430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801430e:	3304      	adds	r3, #4
 8014310:	4618      	mov	r0, r3
 8014312:	f7fe ff49 	bl	80131a8 <vListInitialiseItem>
 8014316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014318:	3318      	adds	r3, #24
 801431a:	4618      	mov	r0, r3
 801431c:	f7fe ff44 	bl	80131a8 <vListInitialiseItem>
 8014320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014324:	611a      	str	r2, [r3, #16]
 8014326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014328:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801432e:	619a      	str	r2, [r3, #24]
 8014330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014334:	625a      	str	r2, [r3, #36]	@ 0x24
 8014336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014338:	2200      	movs	r2, #0
 801433a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014340:	2200      	movs	r2, #0
 8014342:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8014346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014348:	3354      	adds	r3, #84	@ 0x54
 801434a:	224c      	movs	r2, #76	@ 0x4c
 801434c:	2100      	movs	r1, #0
 801434e:	4618      	mov	r0, r3
 8014350:	f003 f87e 	bl	8017450 <memset>
 8014354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014356:	4a0d      	ldr	r2, [pc, #52]	@ (801438c <prvInitialiseNewTask+0x144>)
 8014358:	659a      	str	r2, [r3, #88]	@ 0x58
 801435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801435c:	4a0c      	ldr	r2, [pc, #48]	@ (8014390 <prvInitialiseNewTask+0x148>)
 801435e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014362:	4a0c      	ldr	r2, [pc, #48]	@ (8014394 <prvInitialiseNewTask+0x14c>)
 8014364:	661a      	str	r2, [r3, #96]	@ 0x60
 8014366:	683a      	ldr	r2, [r7, #0]
 8014368:	68f9      	ldr	r1, [r7, #12]
 801436a:	69b8      	ldr	r0, [r7, #24]
 801436c:	f001 fcb0 	bl	8015cd0 <pxPortInitialiseStack>
 8014370:	4602      	mov	r2, r0
 8014372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014374:	601a      	str	r2, [r3, #0]
 8014376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014378:	2b00      	cmp	r3, #0
 801437a:	d002      	beq.n	8014382 <prvInitialiseNewTask+0x13a>
 801437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801437e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014380:	601a      	str	r2, [r3, #0]
 8014382:	bf00      	nop
 8014384:	3720      	adds	r7, #32
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	2000adbc 	.word	0x2000adbc
 8014390:	2000ae24 	.word	0x2000ae24
 8014394:	2000ae8c 	.word	0x2000ae8c

08014398 <prvAddNewTaskToReadyList>:
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	f001 fdca 	bl	8015f38 <vPortEnterCritical>
 80143a4:	4b2d      	ldr	r3, [pc, #180]	@ (801445c <prvAddNewTaskToReadyList+0xc4>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	3301      	adds	r3, #1
 80143aa:	4a2c      	ldr	r2, [pc, #176]	@ (801445c <prvAddNewTaskToReadyList+0xc4>)
 80143ac:	6013      	str	r3, [r2, #0]
 80143ae:	4b2c      	ldr	r3, [pc, #176]	@ (8014460 <prvAddNewTaskToReadyList+0xc8>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d109      	bne.n	80143ca <prvAddNewTaskToReadyList+0x32>
 80143b6:	4a2a      	ldr	r2, [pc, #168]	@ (8014460 <prvAddNewTaskToReadyList+0xc8>)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6013      	str	r3, [r2, #0]
 80143bc:	4b27      	ldr	r3, [pc, #156]	@ (801445c <prvAddNewTaskToReadyList+0xc4>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	d110      	bne.n	80143e6 <prvAddNewTaskToReadyList+0x4e>
 80143c4:	f000 fc6c 	bl	8014ca0 <prvInitialiseTaskLists>
 80143c8:	e00d      	b.n	80143e6 <prvAddNewTaskToReadyList+0x4e>
 80143ca:	4b26      	ldr	r3, [pc, #152]	@ (8014464 <prvAddNewTaskToReadyList+0xcc>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d109      	bne.n	80143e6 <prvAddNewTaskToReadyList+0x4e>
 80143d2:	4b23      	ldr	r3, [pc, #140]	@ (8014460 <prvAddNewTaskToReadyList+0xc8>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143dc:	429a      	cmp	r2, r3
 80143de:	d802      	bhi.n	80143e6 <prvAddNewTaskToReadyList+0x4e>
 80143e0:	4a1f      	ldr	r2, [pc, #124]	@ (8014460 <prvAddNewTaskToReadyList+0xc8>)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	4b20      	ldr	r3, [pc, #128]	@ (8014468 <prvAddNewTaskToReadyList+0xd0>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	3301      	adds	r3, #1
 80143ec:	4a1e      	ldr	r2, [pc, #120]	@ (8014468 <prvAddNewTaskToReadyList+0xd0>)
 80143ee:	6013      	str	r3, [r2, #0]
 80143f0:	4b1d      	ldr	r3, [pc, #116]	@ (8014468 <prvAddNewTaskToReadyList+0xd0>)
 80143f2:	681a      	ldr	r2, [r3, #0]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143fc:	4b1b      	ldr	r3, [pc, #108]	@ (801446c <prvAddNewTaskToReadyList+0xd4>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	429a      	cmp	r2, r3
 8014402:	d903      	bls.n	801440c <prvAddNewTaskToReadyList+0x74>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014408:	4a18      	ldr	r2, [pc, #96]	@ (801446c <prvAddNewTaskToReadyList+0xd4>)
 801440a:	6013      	str	r3, [r2, #0]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014410:	4613      	mov	r3, r2
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	4413      	add	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	4a15      	ldr	r2, [pc, #84]	@ (8014470 <prvAddNewTaskToReadyList+0xd8>)
 801441a:	441a      	add	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	3304      	adds	r3, #4
 8014420:	4619      	mov	r1, r3
 8014422:	4610      	mov	r0, r2
 8014424:	f7fe fecd 	bl	80131c2 <vListInsertEnd>
 8014428:	f001 fdb8 	bl	8015f9c <vPortExitCritical>
 801442c:	4b0d      	ldr	r3, [pc, #52]	@ (8014464 <prvAddNewTaskToReadyList+0xcc>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00e      	beq.n	8014452 <prvAddNewTaskToReadyList+0xba>
 8014434:	4b0a      	ldr	r3, [pc, #40]	@ (8014460 <prvAddNewTaskToReadyList+0xc8>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801443e:	429a      	cmp	r2, r3
 8014440:	d207      	bcs.n	8014452 <prvAddNewTaskToReadyList+0xba>
 8014442:	4b0c      	ldr	r3, [pc, #48]	@ (8014474 <prvAddNewTaskToReadyList+0xdc>)
 8014444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	f3bf 8f4f 	dsb	sy
 801444e:	f3bf 8f6f 	isb	sy
 8014452:	bf00      	nop
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	20001264 	.word	0x20001264
 8014460:	20000d90 	.word	0x20000d90
 8014464:	20001270 	.word	0x20001270
 8014468:	20001280 	.word	0x20001280
 801446c:	2000126c 	.word	0x2000126c
 8014470:	20000d94 	.word	0x20000d94
 8014474:	e000ed04 	.word	0xe000ed04

08014478 <vTaskDelete>:
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	f001 fd5a 	bl	8015f38 <vPortEnterCritical>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d102      	bne.n	8014490 <vTaskDelete+0x18>
 801448a:	4b2d      	ldr	r3, [pc, #180]	@ (8014540 <vTaskDelete+0xc8>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	e000      	b.n	8014492 <vTaskDelete+0x1a>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	60fb      	str	r3, [r7, #12]
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	3304      	adds	r3, #4
 8014498:	4618      	mov	r0, r3
 801449a:	f7fe feef 	bl	801327c <uxListRemove>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d004      	beq.n	80144b0 <vTaskDelete+0x38>
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	3318      	adds	r3, #24
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fe fee6 	bl	801327c <uxListRemove>
 80144b0:	4b24      	ldr	r3, [pc, #144]	@ (8014544 <vTaskDelete+0xcc>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	3301      	adds	r3, #1
 80144b6:	4a23      	ldr	r2, [pc, #140]	@ (8014544 <vTaskDelete+0xcc>)
 80144b8:	6013      	str	r3, [r2, #0]
 80144ba:	4b21      	ldr	r3, [pc, #132]	@ (8014540 <vTaskDelete+0xc8>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d10b      	bne.n	80144dc <vTaskDelete+0x64>
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	3304      	adds	r3, #4
 80144c8:	4619      	mov	r1, r3
 80144ca:	481f      	ldr	r0, [pc, #124]	@ (8014548 <vTaskDelete+0xd0>)
 80144cc:	f7fe fe79 	bl	80131c2 <vListInsertEnd>
 80144d0:	4b1e      	ldr	r3, [pc, #120]	@ (801454c <vTaskDelete+0xd4>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	3301      	adds	r3, #1
 80144d6:	4a1d      	ldr	r2, [pc, #116]	@ (801454c <vTaskDelete+0xd4>)
 80144d8:	6013      	str	r3, [r2, #0]
 80144da:	e009      	b.n	80144f0 <vTaskDelete+0x78>
 80144dc:	4b1c      	ldr	r3, [pc, #112]	@ (8014550 <vTaskDelete+0xd8>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	4a1b      	ldr	r2, [pc, #108]	@ (8014550 <vTaskDelete+0xd8>)
 80144e4:	6013      	str	r3, [r2, #0]
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f000 fc48 	bl	8014d7c <prvDeleteTCB>
 80144ec:	f000 fc7c 	bl	8014de8 <prvResetNextTaskUnblockTime>
 80144f0:	f001 fd54 	bl	8015f9c <vPortExitCritical>
 80144f4:	4b17      	ldr	r3, [pc, #92]	@ (8014554 <vTaskDelete+0xdc>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d01c      	beq.n	8014536 <vTaskDelete+0xbe>
 80144fc:	4b10      	ldr	r3, [pc, #64]	@ (8014540 <vTaskDelete+0xc8>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	68fa      	ldr	r2, [r7, #12]
 8014502:	429a      	cmp	r2, r3
 8014504:	d117      	bne.n	8014536 <vTaskDelete+0xbe>
 8014506:	4b14      	ldr	r3, [pc, #80]	@ (8014558 <vTaskDelete+0xe0>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d00b      	beq.n	8014526 <vTaskDelete+0xae>
 801450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014512:	f383 8811 	msr	BASEPRI, r3
 8014516:	f3bf 8f6f 	isb	sy
 801451a:	f3bf 8f4f 	dsb	sy
 801451e:	60bb      	str	r3, [r7, #8]
 8014520:	bf00      	nop
 8014522:	bf00      	nop
 8014524:	e7fd      	b.n	8014522 <vTaskDelete+0xaa>
 8014526:	4b0d      	ldr	r3, [pc, #52]	@ (801455c <vTaskDelete+0xe4>)
 8014528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801452c:	601a      	str	r2, [r3, #0]
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	f3bf 8f6f 	isb	sy
 8014536:	bf00      	nop
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20000d90 	.word	0x20000d90
 8014544:	20001280 	.word	0x20001280
 8014548:	20001238 	.word	0x20001238
 801454c:	2000124c 	.word	0x2000124c
 8014550:	20001264 	.word	0x20001264
 8014554:	20001270 	.word	0x20001270
 8014558:	2000128c 	.word	0x2000128c
 801455c:	e000ed04 	.word	0xe000ed04

08014560 <vTaskStartScheduler>:
 8014560:	b580      	push	{r7, lr}
 8014562:	b08a      	sub	sp, #40	@ 0x28
 8014564:	af04      	add	r7, sp, #16
 8014566:	2300      	movs	r3, #0
 8014568:	60bb      	str	r3, [r7, #8]
 801456a:	2300      	movs	r3, #0
 801456c:	607b      	str	r3, [r7, #4]
 801456e:	463a      	mov	r2, r7
 8014570:	1d39      	adds	r1, r7, #4
 8014572:	f107 0308 	add.w	r3, r7, #8
 8014576:	4618      	mov	r0, r3
 8014578:	f7fe fdc2 	bl	8013100 <vApplicationGetIdleTaskMemory>
 801457c:	6839      	ldr	r1, [r7, #0]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	68ba      	ldr	r2, [r7, #8]
 8014582:	9202      	str	r2, [sp, #8]
 8014584:	9301      	str	r3, [sp, #4]
 8014586:	2300      	movs	r3, #0
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	2300      	movs	r3, #0
 801458c:	460a      	mov	r2, r1
 801458e:	4924      	ldr	r1, [pc, #144]	@ (8014620 <vTaskStartScheduler+0xc0>)
 8014590:	4824      	ldr	r0, [pc, #144]	@ (8014624 <vTaskStartScheduler+0xc4>)
 8014592:	f7ff fdb3 	bl	80140fc <xTaskCreateStatic>
 8014596:	4603      	mov	r3, r0
 8014598:	4a23      	ldr	r2, [pc, #140]	@ (8014628 <vTaskStartScheduler+0xc8>)
 801459a:	6013      	str	r3, [r2, #0]
 801459c:	4b22      	ldr	r3, [pc, #136]	@ (8014628 <vTaskStartScheduler+0xc8>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d002      	beq.n	80145aa <vTaskStartScheduler+0x4a>
 80145a4:	2301      	movs	r3, #1
 80145a6:	617b      	str	r3, [r7, #20]
 80145a8:	e001      	b.n	80145ae <vTaskStartScheduler+0x4e>
 80145aa:	2300      	movs	r3, #0
 80145ac:	617b      	str	r3, [r7, #20]
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	2b01      	cmp	r3, #1
 80145b2:	d102      	bne.n	80145ba <vTaskStartScheduler+0x5a>
 80145b4:	f001 f832 	bl	801561c <xTimerCreateTimerTask>
 80145b8:	6178      	str	r0, [r7, #20]
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d11b      	bne.n	80145f8 <vTaskStartScheduler+0x98>
 80145c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	613b      	str	r3, [r7, #16]
 80145d2:	bf00      	nop
 80145d4:	4b15      	ldr	r3, [pc, #84]	@ (801462c <vTaskStartScheduler+0xcc>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	3354      	adds	r3, #84	@ 0x54
 80145da:	4a15      	ldr	r2, [pc, #84]	@ (8014630 <vTaskStartScheduler+0xd0>)
 80145dc:	6013      	str	r3, [r2, #0]
 80145de:	4b15      	ldr	r3, [pc, #84]	@ (8014634 <vTaskStartScheduler+0xd4>)
 80145e0:	f04f 32ff 	mov.w	r2, #4294967295
 80145e4:	601a      	str	r2, [r3, #0]
 80145e6:	4b14      	ldr	r3, [pc, #80]	@ (8014638 <vTaskStartScheduler+0xd8>)
 80145e8:	2201      	movs	r2, #1
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	4b13      	ldr	r3, [pc, #76]	@ (801463c <vTaskStartScheduler+0xdc>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	601a      	str	r2, [r3, #0]
 80145f2:	f001 fbfd 	bl	8015df0 <xPortStartScheduler>
 80145f6:	e00f      	b.n	8014618 <vTaskStartScheduler+0xb8>
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145fe:	d10b      	bne.n	8014618 <vTaskStartScheduler+0xb8>
 8014600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014604:	f383 8811 	msr	BASEPRI, r3
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	f3bf 8f4f 	dsb	sy
 8014610:	60fb      	str	r3, [r7, #12]
 8014612:	bf00      	nop
 8014614:	bf00      	nop
 8014616:	e7fd      	b.n	8014614 <vTaskStartScheduler+0xb4>
 8014618:	bf00      	nop
 801461a:	3718      	adds	r7, #24
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	0801a1f8 	.word	0x0801a1f8
 8014624:	08014c71 	.word	0x08014c71
 8014628:	20001288 	.word	0x20001288
 801462c:	20000d90 	.word	0x20000d90
 8014630:	20000130 	.word	0x20000130
 8014634:	20001284 	.word	0x20001284
 8014638:	20001270 	.word	0x20001270
 801463c:	20001268 	.word	0x20001268

08014640 <vTaskSuspendAll>:
 8014640:	b480      	push	{r7}
 8014642:	af00      	add	r7, sp, #0
 8014644:	4b04      	ldr	r3, [pc, #16]	@ (8014658 <vTaskSuspendAll+0x18>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	3301      	adds	r3, #1
 801464a:	4a03      	ldr	r2, [pc, #12]	@ (8014658 <vTaskSuspendAll+0x18>)
 801464c:	6013      	str	r3, [r2, #0]
 801464e:	bf00      	nop
 8014650:	46bd      	mov	sp, r7
 8014652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014656:	4770      	bx	lr
 8014658:	2000128c 	.word	0x2000128c

0801465c <xTaskResumeAll>:
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	2300      	movs	r3, #0
 8014664:	60fb      	str	r3, [r7, #12]
 8014666:	2300      	movs	r3, #0
 8014668:	60bb      	str	r3, [r7, #8]
 801466a:	4b42      	ldr	r3, [pc, #264]	@ (8014774 <xTaskResumeAll+0x118>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10b      	bne.n	801468a <xTaskResumeAll+0x2e>
 8014672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014676:	f383 8811 	msr	BASEPRI, r3
 801467a:	f3bf 8f6f 	isb	sy
 801467e:	f3bf 8f4f 	dsb	sy
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	bf00      	nop
 8014686:	bf00      	nop
 8014688:	e7fd      	b.n	8014686 <xTaskResumeAll+0x2a>
 801468a:	f001 fc55 	bl	8015f38 <vPortEnterCritical>
 801468e:	4b39      	ldr	r3, [pc, #228]	@ (8014774 <xTaskResumeAll+0x118>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	3b01      	subs	r3, #1
 8014694:	4a37      	ldr	r2, [pc, #220]	@ (8014774 <xTaskResumeAll+0x118>)
 8014696:	6013      	str	r3, [r2, #0]
 8014698:	4b36      	ldr	r3, [pc, #216]	@ (8014774 <xTaskResumeAll+0x118>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d162      	bne.n	8014766 <xTaskResumeAll+0x10a>
 80146a0:	4b35      	ldr	r3, [pc, #212]	@ (8014778 <xTaskResumeAll+0x11c>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d05e      	beq.n	8014766 <xTaskResumeAll+0x10a>
 80146a8:	e02f      	b.n	801470a <xTaskResumeAll+0xae>
 80146aa:	4b34      	ldr	r3, [pc, #208]	@ (801477c <xTaskResumeAll+0x120>)
 80146ac:	68db      	ldr	r3, [r3, #12]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	60fb      	str	r3, [r7, #12]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	3318      	adds	r3, #24
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7fe fde0 	bl	801327c <uxListRemove>
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	3304      	adds	r3, #4
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fe fddb 	bl	801327c <uxListRemove>
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146ca:	4b2d      	ldr	r3, [pc, #180]	@ (8014780 <xTaskResumeAll+0x124>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d903      	bls.n	80146da <xTaskResumeAll+0x7e>
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146d6:	4a2a      	ldr	r2, [pc, #168]	@ (8014780 <xTaskResumeAll+0x124>)
 80146d8:	6013      	str	r3, [r2, #0]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146de:	4613      	mov	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	4413      	add	r3, r2
 80146e4:	009b      	lsls	r3, r3, #2
 80146e6:	4a27      	ldr	r2, [pc, #156]	@ (8014784 <xTaskResumeAll+0x128>)
 80146e8:	441a      	add	r2, r3
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	3304      	adds	r3, #4
 80146ee:	4619      	mov	r1, r3
 80146f0:	4610      	mov	r0, r2
 80146f2:	f7fe fd66 	bl	80131c2 <vListInsertEnd>
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146fa:	4b23      	ldr	r3, [pc, #140]	@ (8014788 <xTaskResumeAll+0x12c>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014700:	429a      	cmp	r2, r3
 8014702:	d302      	bcc.n	801470a <xTaskResumeAll+0xae>
 8014704:	4b21      	ldr	r3, [pc, #132]	@ (801478c <xTaskResumeAll+0x130>)
 8014706:	2201      	movs	r2, #1
 8014708:	601a      	str	r2, [r3, #0]
 801470a:	4b1c      	ldr	r3, [pc, #112]	@ (801477c <xTaskResumeAll+0x120>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1cb      	bne.n	80146aa <xTaskResumeAll+0x4e>
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d001      	beq.n	801471c <xTaskResumeAll+0xc0>
 8014718:	f000 fb66 	bl	8014de8 <prvResetNextTaskUnblockTime>
 801471c:	4b1c      	ldr	r3, [pc, #112]	@ (8014790 <xTaskResumeAll+0x134>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	607b      	str	r3, [r7, #4]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d010      	beq.n	801474a <xTaskResumeAll+0xee>
 8014728:	f000 f846 	bl	80147b8 <xTaskIncrementTick>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d002      	beq.n	8014738 <xTaskResumeAll+0xdc>
 8014732:	4b16      	ldr	r3, [pc, #88]	@ (801478c <xTaskResumeAll+0x130>)
 8014734:	2201      	movs	r2, #1
 8014736:	601a      	str	r2, [r3, #0]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	3b01      	subs	r3, #1
 801473c:	607b      	str	r3, [r7, #4]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d1f1      	bne.n	8014728 <xTaskResumeAll+0xcc>
 8014744:	4b12      	ldr	r3, [pc, #72]	@ (8014790 <xTaskResumeAll+0x134>)
 8014746:	2200      	movs	r2, #0
 8014748:	601a      	str	r2, [r3, #0]
 801474a:	4b10      	ldr	r3, [pc, #64]	@ (801478c <xTaskResumeAll+0x130>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d009      	beq.n	8014766 <xTaskResumeAll+0x10a>
 8014752:	2301      	movs	r3, #1
 8014754:	60bb      	str	r3, [r7, #8]
 8014756:	4b0f      	ldr	r3, [pc, #60]	@ (8014794 <xTaskResumeAll+0x138>)
 8014758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801475c:	601a      	str	r2, [r3, #0]
 801475e:	f3bf 8f4f 	dsb	sy
 8014762:	f3bf 8f6f 	isb	sy
 8014766:	f001 fc19 	bl	8015f9c <vPortExitCritical>
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	2000128c 	.word	0x2000128c
 8014778:	20001264 	.word	0x20001264
 801477c:	20001224 	.word	0x20001224
 8014780:	2000126c 	.word	0x2000126c
 8014784:	20000d94 	.word	0x20000d94
 8014788:	20000d90 	.word	0x20000d90
 801478c:	20001278 	.word	0x20001278
 8014790:	20001274 	.word	0x20001274
 8014794:	e000ed04 	.word	0xe000ed04

08014798 <xTaskGetTickCount>:
 8014798:	b480      	push	{r7}
 801479a:	b083      	sub	sp, #12
 801479c:	af00      	add	r7, sp, #0
 801479e:	4b05      	ldr	r3, [pc, #20]	@ (80147b4 <xTaskGetTickCount+0x1c>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	607b      	str	r3, [r7, #4]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	4618      	mov	r0, r3
 80147a8:	370c      	adds	r7, #12
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
 80147b2:	bf00      	nop
 80147b4:	20001268 	.word	0x20001268

080147b8 <xTaskIncrementTick>:
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b086      	sub	sp, #24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	2300      	movs	r3, #0
 80147c0:	617b      	str	r3, [r7, #20]
 80147c2:	4b4f      	ldr	r3, [pc, #316]	@ (8014900 <xTaskIncrementTick+0x148>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	f040 8090 	bne.w	80148ec <xTaskIncrementTick+0x134>
 80147cc:	4b4d      	ldr	r3, [pc, #308]	@ (8014904 <xTaskIncrementTick+0x14c>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	3301      	adds	r3, #1
 80147d2:	613b      	str	r3, [r7, #16]
 80147d4:	4a4b      	ldr	r2, [pc, #300]	@ (8014904 <xTaskIncrementTick+0x14c>)
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	6013      	str	r3, [r2, #0]
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d121      	bne.n	8014824 <xTaskIncrementTick+0x6c>
 80147e0:	4b49      	ldr	r3, [pc, #292]	@ (8014908 <xTaskIncrementTick+0x150>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d00b      	beq.n	8014802 <xTaskIncrementTick+0x4a>
 80147ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147ee:	f383 8811 	msr	BASEPRI, r3
 80147f2:	f3bf 8f6f 	isb	sy
 80147f6:	f3bf 8f4f 	dsb	sy
 80147fa:	603b      	str	r3, [r7, #0]
 80147fc:	bf00      	nop
 80147fe:	bf00      	nop
 8014800:	e7fd      	b.n	80147fe <xTaskIncrementTick+0x46>
 8014802:	4b41      	ldr	r3, [pc, #260]	@ (8014908 <xTaskIncrementTick+0x150>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	60fb      	str	r3, [r7, #12]
 8014808:	4b40      	ldr	r3, [pc, #256]	@ (801490c <xTaskIncrementTick+0x154>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4a3e      	ldr	r2, [pc, #248]	@ (8014908 <xTaskIncrementTick+0x150>)
 801480e:	6013      	str	r3, [r2, #0]
 8014810:	4a3e      	ldr	r2, [pc, #248]	@ (801490c <xTaskIncrementTick+0x154>)
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	6013      	str	r3, [r2, #0]
 8014816:	4b3e      	ldr	r3, [pc, #248]	@ (8014910 <xTaskIncrementTick+0x158>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	3301      	adds	r3, #1
 801481c:	4a3c      	ldr	r2, [pc, #240]	@ (8014910 <xTaskIncrementTick+0x158>)
 801481e:	6013      	str	r3, [r2, #0]
 8014820:	f000 fae2 	bl	8014de8 <prvResetNextTaskUnblockTime>
 8014824:	4b3b      	ldr	r3, [pc, #236]	@ (8014914 <xTaskIncrementTick+0x15c>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	693a      	ldr	r2, [r7, #16]
 801482a:	429a      	cmp	r2, r3
 801482c:	d349      	bcc.n	80148c2 <xTaskIncrementTick+0x10a>
 801482e:	4b36      	ldr	r3, [pc, #216]	@ (8014908 <xTaskIncrementTick+0x150>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d104      	bne.n	8014842 <xTaskIncrementTick+0x8a>
 8014838:	4b36      	ldr	r3, [pc, #216]	@ (8014914 <xTaskIncrementTick+0x15c>)
 801483a:	f04f 32ff 	mov.w	r2, #4294967295
 801483e:	601a      	str	r2, [r3, #0]
 8014840:	e03f      	b.n	80148c2 <xTaskIncrementTick+0x10a>
 8014842:	4b31      	ldr	r3, [pc, #196]	@ (8014908 <xTaskIncrementTick+0x150>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	60bb      	str	r3, [r7, #8]
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	607b      	str	r3, [r7, #4]
 8014852:	693a      	ldr	r2, [r7, #16]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	429a      	cmp	r2, r3
 8014858:	d203      	bcs.n	8014862 <xTaskIncrementTick+0xaa>
 801485a:	4a2e      	ldr	r2, [pc, #184]	@ (8014914 <xTaskIncrementTick+0x15c>)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6013      	str	r3, [r2, #0]
 8014860:	e02f      	b.n	80148c2 <xTaskIncrementTick+0x10a>
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	3304      	adds	r3, #4
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe fd08 	bl	801327c <uxListRemove>
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014870:	2b00      	cmp	r3, #0
 8014872:	d004      	beq.n	801487e <xTaskIncrementTick+0xc6>
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	3318      	adds	r3, #24
 8014878:	4618      	mov	r0, r3
 801487a:	f7fe fcff 	bl	801327c <uxListRemove>
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014882:	4b25      	ldr	r3, [pc, #148]	@ (8014918 <xTaskIncrementTick+0x160>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	429a      	cmp	r2, r3
 8014888:	d903      	bls.n	8014892 <xTaskIncrementTick+0xda>
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801488e:	4a22      	ldr	r2, [pc, #136]	@ (8014918 <xTaskIncrementTick+0x160>)
 8014890:	6013      	str	r3, [r2, #0]
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014896:	4613      	mov	r3, r2
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	4413      	add	r3, r2
 801489c:	009b      	lsls	r3, r3, #2
 801489e:	4a1f      	ldr	r2, [pc, #124]	@ (801491c <xTaskIncrementTick+0x164>)
 80148a0:	441a      	add	r2, r3
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	3304      	adds	r3, #4
 80148a6:	4619      	mov	r1, r3
 80148a8:	4610      	mov	r0, r2
 80148aa:	f7fe fc8a 	bl	80131c2 <vListInsertEnd>
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014920 <xTaskIncrementTick+0x168>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d3b8      	bcc.n	801482e <xTaskIncrementTick+0x76>
 80148bc:	2301      	movs	r3, #1
 80148be:	617b      	str	r3, [r7, #20]
 80148c0:	e7b5      	b.n	801482e <xTaskIncrementTick+0x76>
 80148c2:	4b17      	ldr	r3, [pc, #92]	@ (8014920 <xTaskIncrementTick+0x168>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148c8:	4914      	ldr	r1, [pc, #80]	@ (801491c <xTaskIncrementTick+0x164>)
 80148ca:	4613      	mov	r3, r2
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	4413      	add	r3, r2
 80148d0:	009b      	lsls	r3, r3, #2
 80148d2:	440b      	add	r3, r1
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d901      	bls.n	80148de <xTaskIncrementTick+0x126>
 80148da:	2301      	movs	r3, #1
 80148dc:	617b      	str	r3, [r7, #20]
 80148de:	4b11      	ldr	r3, [pc, #68]	@ (8014924 <xTaskIncrementTick+0x16c>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d007      	beq.n	80148f6 <xTaskIncrementTick+0x13e>
 80148e6:	2301      	movs	r3, #1
 80148e8:	617b      	str	r3, [r7, #20]
 80148ea:	e004      	b.n	80148f6 <xTaskIncrementTick+0x13e>
 80148ec:	4b0e      	ldr	r3, [pc, #56]	@ (8014928 <xTaskIncrementTick+0x170>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	3301      	adds	r3, #1
 80148f2:	4a0d      	ldr	r2, [pc, #52]	@ (8014928 <xTaskIncrementTick+0x170>)
 80148f4:	6013      	str	r3, [r2, #0]
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	4618      	mov	r0, r3
 80148fa:	3718      	adds	r7, #24
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	2000128c 	.word	0x2000128c
 8014904:	20001268 	.word	0x20001268
 8014908:	2000121c 	.word	0x2000121c
 801490c:	20001220 	.word	0x20001220
 8014910:	2000127c 	.word	0x2000127c
 8014914:	20001284 	.word	0x20001284
 8014918:	2000126c 	.word	0x2000126c
 801491c:	20000d94 	.word	0x20000d94
 8014920:	20000d90 	.word	0x20000d90
 8014924:	20001278 	.word	0x20001278
 8014928:	20001274 	.word	0x20001274

0801492c <vTaskSwitchContext>:
 801492c:	b480      	push	{r7}
 801492e:	b085      	sub	sp, #20
 8014930:	af00      	add	r7, sp, #0
 8014932:	4b2b      	ldr	r3, [pc, #172]	@ (80149e0 <vTaskSwitchContext+0xb4>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d003      	beq.n	8014942 <vTaskSwitchContext+0x16>
 801493a:	4b2a      	ldr	r3, [pc, #168]	@ (80149e4 <vTaskSwitchContext+0xb8>)
 801493c:	2201      	movs	r2, #1
 801493e:	601a      	str	r2, [r3, #0]
 8014940:	e047      	b.n	80149d2 <vTaskSwitchContext+0xa6>
 8014942:	4b28      	ldr	r3, [pc, #160]	@ (80149e4 <vTaskSwitchContext+0xb8>)
 8014944:	2200      	movs	r2, #0
 8014946:	601a      	str	r2, [r3, #0]
 8014948:	4b27      	ldr	r3, [pc, #156]	@ (80149e8 <vTaskSwitchContext+0xbc>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	60fb      	str	r3, [r7, #12]
 801494e:	e011      	b.n	8014974 <vTaskSwitchContext+0x48>
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10b      	bne.n	801496e <vTaskSwitchContext+0x42>
 8014956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801495a:	f383 8811 	msr	BASEPRI, r3
 801495e:	f3bf 8f6f 	isb	sy
 8014962:	f3bf 8f4f 	dsb	sy
 8014966:	607b      	str	r3, [r7, #4]
 8014968:	bf00      	nop
 801496a:	bf00      	nop
 801496c:	e7fd      	b.n	801496a <vTaskSwitchContext+0x3e>
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3b01      	subs	r3, #1
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	491d      	ldr	r1, [pc, #116]	@ (80149ec <vTaskSwitchContext+0xc0>)
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	4613      	mov	r3, r2
 801497a:	009b      	lsls	r3, r3, #2
 801497c:	4413      	add	r3, r2
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	440b      	add	r3, r1
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d0e3      	beq.n	8014950 <vTaskSwitchContext+0x24>
 8014988:	68fa      	ldr	r2, [r7, #12]
 801498a:	4613      	mov	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	4413      	add	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	4a16      	ldr	r2, [pc, #88]	@ (80149ec <vTaskSwitchContext+0xc0>)
 8014994:	4413      	add	r3, r2
 8014996:	60bb      	str	r3, [r7, #8]
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	685a      	ldr	r2, [r3, #4]
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	605a      	str	r2, [r3, #4]
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	685a      	ldr	r2, [r3, #4]
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	3308      	adds	r3, #8
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d104      	bne.n	80149b8 <vTaskSwitchContext+0x8c>
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	685b      	ldr	r3, [r3, #4]
 80149b2:	685a      	ldr	r2, [r3, #4]
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	605a      	str	r2, [r3, #4]
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	4a0c      	ldr	r2, [pc, #48]	@ (80149f0 <vTaskSwitchContext+0xc4>)
 80149c0:	6013      	str	r3, [r2, #0]
 80149c2:	4a09      	ldr	r2, [pc, #36]	@ (80149e8 <vTaskSwitchContext+0xbc>)
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	6013      	str	r3, [r2, #0]
 80149c8:	4b09      	ldr	r3, [pc, #36]	@ (80149f0 <vTaskSwitchContext+0xc4>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	3354      	adds	r3, #84	@ 0x54
 80149ce:	4a09      	ldr	r2, [pc, #36]	@ (80149f4 <vTaskSwitchContext+0xc8>)
 80149d0:	6013      	str	r3, [r2, #0]
 80149d2:	bf00      	nop
 80149d4:	3714      	adds	r7, #20
 80149d6:	46bd      	mov	sp, r7
 80149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149dc:	4770      	bx	lr
 80149de:	bf00      	nop
 80149e0:	2000128c 	.word	0x2000128c
 80149e4:	20001278 	.word	0x20001278
 80149e8:	2000126c 	.word	0x2000126c
 80149ec:	20000d94 	.word	0x20000d94
 80149f0:	20000d90 	.word	0x20000d90
 80149f4:	20000130 	.word	0x20000130

080149f8 <vTaskPlaceOnEventList>:
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d10b      	bne.n	8014a20 <vTaskPlaceOnEventList+0x28>
 8014a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a0c:	f383 8811 	msr	BASEPRI, r3
 8014a10:	f3bf 8f6f 	isb	sy
 8014a14:	f3bf 8f4f 	dsb	sy
 8014a18:	60fb      	str	r3, [r7, #12]
 8014a1a:	bf00      	nop
 8014a1c:	bf00      	nop
 8014a1e:	e7fd      	b.n	8014a1c <vTaskPlaceOnEventList+0x24>
 8014a20:	4b07      	ldr	r3, [pc, #28]	@ (8014a40 <vTaskPlaceOnEventList+0x48>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3318      	adds	r3, #24
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7fe fbee 	bl	801320a <vListInsert>
 8014a2e:	2101      	movs	r1, #1
 8014a30:	6838      	ldr	r0, [r7, #0]
 8014a32:	f000 fd9f 	bl	8015574 <prvAddCurrentTaskToDelayedList>
 8014a36:	bf00      	nop
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	20000d90 	.word	0x20000d90

08014a44 <vTaskPlaceOnEventListRestricted>:
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b086      	sub	sp, #24
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	607a      	str	r2, [r7, #4]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d10b      	bne.n	8014a6e <vTaskPlaceOnEventListRestricted+0x2a>
 8014a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a5a:	f383 8811 	msr	BASEPRI, r3
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	f3bf 8f4f 	dsb	sy
 8014a66:	617b      	str	r3, [r7, #20]
 8014a68:	bf00      	nop
 8014a6a:	bf00      	nop
 8014a6c:	e7fd      	b.n	8014a6a <vTaskPlaceOnEventListRestricted+0x26>
 8014a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8014a98 <vTaskPlaceOnEventListRestricted+0x54>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	3318      	adds	r3, #24
 8014a74:	4619      	mov	r1, r3
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	f7fe fba3 	bl	80131c2 <vListInsertEnd>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d002      	beq.n	8014a88 <vTaskPlaceOnEventListRestricted+0x44>
 8014a82:	f04f 33ff 	mov.w	r3, #4294967295
 8014a86:	60bb      	str	r3, [r7, #8]
 8014a88:	6879      	ldr	r1, [r7, #4]
 8014a8a:	68b8      	ldr	r0, [r7, #8]
 8014a8c:	f000 fd72 	bl	8015574 <prvAddCurrentTaskToDelayedList>
 8014a90:	bf00      	nop
 8014a92:	3718      	adds	r7, #24
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	20000d90 	.word	0x20000d90

08014a9c <xTaskRemoveFromEventList>:
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b086      	sub	sp, #24
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	613b      	str	r3, [r7, #16]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d10b      	bne.n	8014aca <xTaskRemoveFromEventList+0x2e>
 8014ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ab6:	f383 8811 	msr	BASEPRI, r3
 8014aba:	f3bf 8f6f 	isb	sy
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	60fb      	str	r3, [r7, #12]
 8014ac4:	bf00      	nop
 8014ac6:	bf00      	nop
 8014ac8:	e7fd      	b.n	8014ac6 <xTaskRemoveFromEventList+0x2a>
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	3318      	adds	r3, #24
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fe fbd4 	bl	801327c <uxListRemove>
 8014ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8014b4c <xTaskRemoveFromEventList+0xb0>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d11d      	bne.n	8014b18 <xTaskRemoveFromEventList+0x7c>
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	3304      	adds	r3, #4
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7fe fbcb 	bl	801327c <uxListRemove>
 8014ae6:	693b      	ldr	r3, [r7, #16]
 8014ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014aea:	4b19      	ldr	r3, [pc, #100]	@ (8014b50 <xTaskRemoveFromEventList+0xb4>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d903      	bls.n	8014afa <xTaskRemoveFromEventList+0x5e>
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014af6:	4a16      	ldr	r2, [pc, #88]	@ (8014b50 <xTaskRemoveFromEventList+0xb4>)
 8014af8:	6013      	str	r3, [r2, #0]
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014afe:	4613      	mov	r3, r2
 8014b00:	009b      	lsls	r3, r3, #2
 8014b02:	4413      	add	r3, r2
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	4a13      	ldr	r2, [pc, #76]	@ (8014b54 <xTaskRemoveFromEventList+0xb8>)
 8014b08:	441a      	add	r2, r3
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	3304      	adds	r3, #4
 8014b0e:	4619      	mov	r1, r3
 8014b10:	4610      	mov	r0, r2
 8014b12:	f7fe fb56 	bl	80131c2 <vListInsertEnd>
 8014b16:	e005      	b.n	8014b24 <xTaskRemoveFromEventList+0x88>
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	3318      	adds	r3, #24
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	480e      	ldr	r0, [pc, #56]	@ (8014b58 <xTaskRemoveFromEventList+0xbc>)
 8014b20:	f7fe fb4f 	bl	80131c2 <vListInsertEnd>
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b28:	4b0c      	ldr	r3, [pc, #48]	@ (8014b5c <xTaskRemoveFromEventList+0xc0>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d905      	bls.n	8014b3e <xTaskRemoveFromEventList+0xa2>
 8014b32:	2301      	movs	r3, #1
 8014b34:	617b      	str	r3, [r7, #20]
 8014b36:	4b0a      	ldr	r3, [pc, #40]	@ (8014b60 <xTaskRemoveFromEventList+0xc4>)
 8014b38:	2201      	movs	r2, #1
 8014b3a:	601a      	str	r2, [r3, #0]
 8014b3c:	e001      	b.n	8014b42 <xTaskRemoveFromEventList+0xa6>
 8014b3e:	2300      	movs	r3, #0
 8014b40:	617b      	str	r3, [r7, #20]
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	4618      	mov	r0, r3
 8014b46:	3718      	adds	r7, #24
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}
 8014b4c:	2000128c 	.word	0x2000128c
 8014b50:	2000126c 	.word	0x2000126c
 8014b54:	20000d94 	.word	0x20000d94
 8014b58:	20001224 	.word	0x20001224
 8014b5c:	20000d90 	.word	0x20000d90
 8014b60:	20001278 	.word	0x20001278

08014b64 <vTaskInternalSetTimeOutState>:
 8014b64:	b480      	push	{r7}
 8014b66:	b083      	sub	sp, #12
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	4b06      	ldr	r3, [pc, #24]	@ (8014b88 <vTaskInternalSetTimeOutState+0x24>)
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	601a      	str	r2, [r3, #0]
 8014b74:	4b05      	ldr	r3, [pc, #20]	@ (8014b8c <vTaskInternalSetTimeOutState+0x28>)
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	605a      	str	r2, [r3, #4]
 8014b7c:	bf00      	nop
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	2000127c 	.word	0x2000127c
 8014b8c:	20001268 	.word	0x20001268

08014b90 <xTaskCheckForTimeOut>:
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b088      	sub	sp, #32
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d10b      	bne.n	8014bb8 <xTaskCheckForTimeOut+0x28>
 8014ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ba4:	f383 8811 	msr	BASEPRI, r3
 8014ba8:	f3bf 8f6f 	isb	sy
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	613b      	str	r3, [r7, #16]
 8014bb2:	bf00      	nop
 8014bb4:	bf00      	nop
 8014bb6:	e7fd      	b.n	8014bb4 <xTaskCheckForTimeOut+0x24>
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d10b      	bne.n	8014bd6 <xTaskCheckForTimeOut+0x46>
 8014bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bc2:	f383 8811 	msr	BASEPRI, r3
 8014bc6:	f3bf 8f6f 	isb	sy
 8014bca:	f3bf 8f4f 	dsb	sy
 8014bce:	60fb      	str	r3, [r7, #12]
 8014bd0:	bf00      	nop
 8014bd2:	bf00      	nop
 8014bd4:	e7fd      	b.n	8014bd2 <xTaskCheckForTimeOut+0x42>
 8014bd6:	f001 f9af 	bl	8015f38 <vPortEnterCritical>
 8014bda:	4b1d      	ldr	r3, [pc, #116]	@ (8014c50 <xTaskCheckForTimeOut+0xc0>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	61bb      	str	r3, [r7, #24]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	69ba      	ldr	r2, [r7, #24]
 8014be6:	1ad3      	subs	r3, r2, r3
 8014be8:	617b      	str	r3, [r7, #20]
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bf2:	d102      	bne.n	8014bfa <xTaskCheckForTimeOut+0x6a>
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	61fb      	str	r3, [r7, #28]
 8014bf8:	e023      	b.n	8014c42 <xTaskCheckForTimeOut+0xb2>
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	4b15      	ldr	r3, [pc, #84]	@ (8014c54 <xTaskCheckForTimeOut+0xc4>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d007      	beq.n	8014c16 <xTaskCheckForTimeOut+0x86>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	69ba      	ldr	r2, [r7, #24]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d302      	bcc.n	8014c16 <xTaskCheckForTimeOut+0x86>
 8014c10:	2301      	movs	r3, #1
 8014c12:	61fb      	str	r3, [r7, #28]
 8014c14:	e015      	b.n	8014c42 <xTaskCheckForTimeOut+0xb2>
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	697a      	ldr	r2, [r7, #20]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d20b      	bcs.n	8014c38 <xTaskCheckForTimeOut+0xa8>
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	681a      	ldr	r2, [r3, #0]
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	1ad2      	subs	r2, r2, r3
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	601a      	str	r2, [r3, #0]
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f7ff ff99 	bl	8014b64 <vTaskInternalSetTimeOutState>
 8014c32:	2300      	movs	r3, #0
 8014c34:	61fb      	str	r3, [r7, #28]
 8014c36:	e004      	b.n	8014c42 <xTaskCheckForTimeOut+0xb2>
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	601a      	str	r2, [r3, #0]
 8014c3e:	2301      	movs	r3, #1
 8014c40:	61fb      	str	r3, [r7, #28]
 8014c42:	f001 f9ab 	bl	8015f9c <vPortExitCritical>
 8014c46:	69fb      	ldr	r3, [r7, #28]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3720      	adds	r7, #32
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	20001268 	.word	0x20001268
 8014c54:	2000127c 	.word	0x2000127c

08014c58 <vTaskMissedYield>:
 8014c58:	b480      	push	{r7}
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	4b03      	ldr	r3, [pc, #12]	@ (8014c6c <vTaskMissedYield+0x14>)
 8014c5e:	2201      	movs	r2, #1
 8014c60:	601a      	str	r2, [r3, #0]
 8014c62:	bf00      	nop
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr
 8014c6c:	20001278 	.word	0x20001278

08014c70 <prvIdleTask>:
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b082      	sub	sp, #8
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
 8014c78:	f000 f852 	bl	8014d20 <prvCheckTasksWaitingTermination>
 8014c7c:	4b06      	ldr	r3, [pc, #24]	@ (8014c98 <prvIdleTask+0x28>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d9f9      	bls.n	8014c78 <prvIdleTask+0x8>
 8014c84:	4b05      	ldr	r3, [pc, #20]	@ (8014c9c <prvIdleTask+0x2c>)
 8014c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c8a:	601a      	str	r2, [r3, #0]
 8014c8c:	f3bf 8f4f 	dsb	sy
 8014c90:	f3bf 8f6f 	isb	sy
 8014c94:	e7f0      	b.n	8014c78 <prvIdleTask+0x8>
 8014c96:	bf00      	nop
 8014c98:	20000d94 	.word	0x20000d94
 8014c9c:	e000ed04 	.word	0xe000ed04

08014ca0 <prvInitialiseTaskLists>:
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	607b      	str	r3, [r7, #4]
 8014caa:	e00c      	b.n	8014cc6 <prvInitialiseTaskLists+0x26>
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	4613      	mov	r3, r2
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	4413      	add	r3, r2
 8014cb4:	009b      	lsls	r3, r3, #2
 8014cb6:	4a12      	ldr	r2, [pc, #72]	@ (8014d00 <prvInitialiseTaskLists+0x60>)
 8014cb8:	4413      	add	r3, r2
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fe fa54 	bl	8013168 <vListInitialise>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	607b      	str	r3, [r7, #4]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2b37      	cmp	r3, #55	@ 0x37
 8014cca:	d9ef      	bls.n	8014cac <prvInitialiseTaskLists+0xc>
 8014ccc:	480d      	ldr	r0, [pc, #52]	@ (8014d04 <prvInitialiseTaskLists+0x64>)
 8014cce:	f7fe fa4b 	bl	8013168 <vListInitialise>
 8014cd2:	480d      	ldr	r0, [pc, #52]	@ (8014d08 <prvInitialiseTaskLists+0x68>)
 8014cd4:	f7fe fa48 	bl	8013168 <vListInitialise>
 8014cd8:	480c      	ldr	r0, [pc, #48]	@ (8014d0c <prvInitialiseTaskLists+0x6c>)
 8014cda:	f7fe fa45 	bl	8013168 <vListInitialise>
 8014cde:	480c      	ldr	r0, [pc, #48]	@ (8014d10 <prvInitialiseTaskLists+0x70>)
 8014ce0:	f7fe fa42 	bl	8013168 <vListInitialise>
 8014ce4:	480b      	ldr	r0, [pc, #44]	@ (8014d14 <prvInitialiseTaskLists+0x74>)
 8014ce6:	f7fe fa3f 	bl	8013168 <vListInitialise>
 8014cea:	4b0b      	ldr	r3, [pc, #44]	@ (8014d18 <prvInitialiseTaskLists+0x78>)
 8014cec:	4a05      	ldr	r2, [pc, #20]	@ (8014d04 <prvInitialiseTaskLists+0x64>)
 8014cee:	601a      	str	r2, [r3, #0]
 8014cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8014d1c <prvInitialiseTaskLists+0x7c>)
 8014cf2:	4a05      	ldr	r2, [pc, #20]	@ (8014d08 <prvInitialiseTaskLists+0x68>)
 8014cf4:	601a      	str	r2, [r3, #0]
 8014cf6:	bf00      	nop
 8014cf8:	3708      	adds	r7, #8
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	20000d94 	.word	0x20000d94
 8014d04:	200011f4 	.word	0x200011f4
 8014d08:	20001208 	.word	0x20001208
 8014d0c:	20001224 	.word	0x20001224
 8014d10:	20001238 	.word	0x20001238
 8014d14:	20001250 	.word	0x20001250
 8014d18:	2000121c 	.word	0x2000121c
 8014d1c:	20001220 	.word	0x20001220

08014d20 <prvCheckTasksWaitingTermination>:
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	e019      	b.n	8014d5c <prvCheckTasksWaitingTermination+0x3c>
 8014d28:	f001 f906 	bl	8015f38 <vPortEnterCritical>
 8014d2c:	4b10      	ldr	r3, [pc, #64]	@ (8014d70 <prvCheckTasksWaitingTermination+0x50>)
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	68db      	ldr	r3, [r3, #12]
 8014d32:	607b      	str	r3, [r7, #4]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	3304      	adds	r3, #4
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fe fa9f 	bl	801327c <uxListRemove>
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8014d74 <prvCheckTasksWaitingTermination+0x54>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	3b01      	subs	r3, #1
 8014d44:	4a0b      	ldr	r2, [pc, #44]	@ (8014d74 <prvCheckTasksWaitingTermination+0x54>)
 8014d46:	6013      	str	r3, [r2, #0]
 8014d48:	4b0b      	ldr	r3, [pc, #44]	@ (8014d78 <prvCheckTasksWaitingTermination+0x58>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8014d78 <prvCheckTasksWaitingTermination+0x58>)
 8014d50:	6013      	str	r3, [r2, #0]
 8014d52:	f001 f923 	bl	8015f9c <vPortExitCritical>
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 f810 	bl	8014d7c <prvDeleteTCB>
 8014d5c:	4b06      	ldr	r3, [pc, #24]	@ (8014d78 <prvCheckTasksWaitingTermination+0x58>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1e1      	bne.n	8014d28 <prvCheckTasksWaitingTermination+0x8>
 8014d64:	bf00      	nop
 8014d66:	bf00      	nop
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	20001238 	.word	0x20001238
 8014d74:	20001264 	.word	0x20001264
 8014d78:	2000124c 	.word	0x2000124c

08014d7c <prvDeleteTCB>:
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	3354      	adds	r3, #84	@ 0x54
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f002 fb79 	bl	8017480 <_reclaim_reent>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d108      	bne.n	8014daa <prvDeleteTCB+0x2e>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f001 fabb 	bl	8016318 <vPortFree>
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f001 fab8 	bl	8016318 <vPortFree>
 8014da8:	e019      	b.n	8014dde <prvDeleteTCB+0x62>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	d103      	bne.n	8014dbc <prvDeleteTCB+0x40>
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f001 faaf 	bl	8016318 <vPortFree>
 8014dba:	e010      	b.n	8014dde <prvDeleteTCB+0x62>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014dc2:	2b02      	cmp	r3, #2
 8014dc4:	d00b      	beq.n	8014dde <prvDeleteTCB+0x62>
 8014dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dca:	f383 8811 	msr	BASEPRI, r3
 8014dce:	f3bf 8f6f 	isb	sy
 8014dd2:	f3bf 8f4f 	dsb	sy
 8014dd6:	60fb      	str	r3, [r7, #12]
 8014dd8:	bf00      	nop
 8014dda:	bf00      	nop
 8014ddc:	e7fd      	b.n	8014dda <prvDeleteTCB+0x5e>
 8014dde:	bf00      	nop
 8014de0:	3710      	adds	r7, #16
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
	...

08014de8 <prvResetNextTaskUnblockTime>:
 8014de8:	b480      	push	{r7}
 8014dea:	b083      	sub	sp, #12
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	4b0c      	ldr	r3, [pc, #48]	@ (8014e20 <prvResetNextTaskUnblockTime+0x38>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d104      	bne.n	8014e02 <prvResetNextTaskUnblockTime+0x1a>
 8014df8:	4b0a      	ldr	r3, [pc, #40]	@ (8014e24 <prvResetNextTaskUnblockTime+0x3c>)
 8014dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8014dfe:	601a      	str	r2, [r3, #0]
 8014e00:	e008      	b.n	8014e14 <prvResetNextTaskUnblockTime+0x2c>
 8014e02:	4b07      	ldr	r3, [pc, #28]	@ (8014e20 <prvResetNextTaskUnblockTime+0x38>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	68db      	ldr	r3, [r3, #12]
 8014e0a:	607b      	str	r3, [r7, #4]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	4a04      	ldr	r2, [pc, #16]	@ (8014e24 <prvResetNextTaskUnblockTime+0x3c>)
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	bf00      	nop
 8014e16:	370c      	adds	r7, #12
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1e:	4770      	bx	lr
 8014e20:	2000121c 	.word	0x2000121c
 8014e24:	20001284 	.word	0x20001284

08014e28 <xTaskGetCurrentTaskHandle>:
 8014e28:	b480      	push	{r7}
 8014e2a:	b083      	sub	sp, #12
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	4b05      	ldr	r3, [pc, #20]	@ (8014e44 <xTaskGetCurrentTaskHandle+0x1c>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	607b      	str	r3, [r7, #4]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4618      	mov	r0, r3
 8014e38:	370c      	adds	r7, #12
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	20000d90 	.word	0x20000d90

08014e48 <xTaskGetSchedulerState>:
 8014e48:	b480      	push	{r7}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8014e7c <xTaskGetSchedulerState+0x34>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d102      	bne.n	8014e5c <xTaskGetSchedulerState+0x14>
 8014e56:	2301      	movs	r3, #1
 8014e58:	607b      	str	r3, [r7, #4]
 8014e5a:	e008      	b.n	8014e6e <xTaskGetSchedulerState+0x26>
 8014e5c:	4b08      	ldr	r3, [pc, #32]	@ (8014e80 <xTaskGetSchedulerState+0x38>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d102      	bne.n	8014e6a <xTaskGetSchedulerState+0x22>
 8014e64:	2302      	movs	r3, #2
 8014e66:	607b      	str	r3, [r7, #4]
 8014e68:	e001      	b.n	8014e6e <xTaskGetSchedulerState+0x26>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	607b      	str	r3, [r7, #4]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4618      	mov	r0, r3
 8014e72:	370c      	adds	r7, #12
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr
 8014e7c:	20001270 	.word	0x20001270
 8014e80:	2000128c 	.word	0x2000128c

08014e84 <xTaskPriorityInherit>:
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	60bb      	str	r3, [r7, #8]
 8014e90:	2300      	movs	r3, #0
 8014e92:	60fb      	str	r3, [r7, #12]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d051      	beq.n	8014f3e <xTaskPriorityInherit+0xba>
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8014f48 <xTaskPriorityInherit+0xc4>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d241      	bcs.n	8014f2c <xTaskPriorityInherit+0xa8>
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	699b      	ldr	r3, [r3, #24]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	db06      	blt.n	8014ebe <xTaskPriorityInherit+0x3a>
 8014eb0:	4b25      	ldr	r3, [pc, #148]	@ (8014f48 <xTaskPriorityInherit+0xc4>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	619a      	str	r2, [r3, #24]
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	6959      	ldr	r1, [r3, #20]
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	4413      	add	r3, r2
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	4a1f      	ldr	r2, [pc, #124]	@ (8014f4c <xTaskPriorityInherit+0xc8>)
 8014ed0:	4413      	add	r3, r2
 8014ed2:	4299      	cmp	r1, r3
 8014ed4:	d122      	bne.n	8014f1c <xTaskPriorityInherit+0x98>
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	3304      	adds	r3, #4
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fe f9ce 	bl	801327c <uxListRemove>
 8014ee0:	4b19      	ldr	r3, [pc, #100]	@ (8014f48 <xTaskPriorityInherit+0xc4>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eee:	4b18      	ldr	r3, [pc, #96]	@ (8014f50 <xTaskPriorityInherit+0xcc>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d903      	bls.n	8014efe <xTaskPriorityInherit+0x7a>
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014efa:	4a15      	ldr	r2, [pc, #84]	@ (8014f50 <xTaskPriorityInherit+0xcc>)
 8014efc:	6013      	str	r3, [r2, #0]
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f02:	4613      	mov	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	4413      	add	r3, r2
 8014f08:	009b      	lsls	r3, r3, #2
 8014f0a:	4a10      	ldr	r2, [pc, #64]	@ (8014f4c <xTaskPriorityInherit+0xc8>)
 8014f0c:	441a      	add	r2, r3
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	3304      	adds	r3, #4
 8014f12:	4619      	mov	r1, r3
 8014f14:	4610      	mov	r0, r2
 8014f16:	f7fe f954 	bl	80131c2 <vListInsertEnd>
 8014f1a:	e004      	b.n	8014f26 <xTaskPriorityInherit+0xa2>
 8014f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8014f48 <xTaskPriorityInherit+0xc4>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014f26:	2301      	movs	r3, #1
 8014f28:	60fb      	str	r3, [r7, #12]
 8014f2a:	e008      	b.n	8014f3e <xTaskPriorityInherit+0xba>
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014f30:	4b05      	ldr	r3, [pc, #20]	@ (8014f48 <xTaskPriorityInherit+0xc4>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d201      	bcs.n	8014f3e <xTaskPriorityInherit+0xba>
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	60fb      	str	r3, [r7, #12]
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	4618      	mov	r0, r3
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	20000d90 	.word	0x20000d90
 8014f4c:	20000d94 	.word	0x20000d94
 8014f50:	2000126c 	.word	0x2000126c

08014f54 <xTaskPriorityDisinherit>:
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	613b      	str	r3, [r7, #16]
 8014f60:	2300      	movs	r3, #0
 8014f62:	617b      	str	r3, [r7, #20]
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d058      	beq.n	801501c <xTaskPriorityDisinherit+0xc8>
 8014f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8015028 <xTaskPriorityDisinherit+0xd4>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	693a      	ldr	r2, [r7, #16]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d00b      	beq.n	8014f8c <xTaskPriorityDisinherit+0x38>
 8014f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f78:	f383 8811 	msr	BASEPRI, r3
 8014f7c:	f3bf 8f6f 	isb	sy
 8014f80:	f3bf 8f4f 	dsb	sy
 8014f84:	60fb      	str	r3, [r7, #12]
 8014f86:	bf00      	nop
 8014f88:	bf00      	nop
 8014f8a:	e7fd      	b.n	8014f88 <xTaskPriorityDisinherit+0x34>
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d10b      	bne.n	8014fac <xTaskPriorityDisinherit+0x58>
 8014f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f98:	f383 8811 	msr	BASEPRI, r3
 8014f9c:	f3bf 8f6f 	isb	sy
 8014fa0:	f3bf 8f4f 	dsb	sy
 8014fa4:	60bb      	str	r3, [r7, #8]
 8014fa6:	bf00      	nop
 8014fa8:	bf00      	nop
 8014faa:	e7fd      	b.n	8014fa8 <xTaskPriorityDisinherit+0x54>
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fb0:	1e5a      	subs	r2, r3, #1
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d02c      	beq.n	801501c <xTaskPriorityDisinherit+0xc8>
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d128      	bne.n	801501c <xTaskPriorityDisinherit+0xc8>
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	3304      	adds	r3, #4
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fe f954 	bl	801327c <uxListRemove>
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fe0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	619a      	str	r2, [r3, #24]
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fec:	4b0f      	ldr	r3, [pc, #60]	@ (801502c <xTaskPriorityDisinherit+0xd8>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d903      	bls.n	8014ffc <xTaskPriorityDisinherit+0xa8>
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ff8:	4a0c      	ldr	r2, [pc, #48]	@ (801502c <xTaskPriorityDisinherit+0xd8>)
 8014ffa:	6013      	str	r3, [r2, #0]
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015000:	4613      	mov	r3, r2
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	4413      	add	r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	4a09      	ldr	r2, [pc, #36]	@ (8015030 <xTaskPriorityDisinherit+0xdc>)
 801500a:	441a      	add	r2, r3
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	3304      	adds	r3, #4
 8015010:	4619      	mov	r1, r3
 8015012:	4610      	mov	r0, r2
 8015014:	f7fe f8d5 	bl	80131c2 <vListInsertEnd>
 8015018:	2301      	movs	r3, #1
 801501a:	617b      	str	r3, [r7, #20]
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	4618      	mov	r0, r3
 8015020:	3718      	adds	r7, #24
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	20000d90 	.word	0x20000d90
 801502c:	2000126c 	.word	0x2000126c
 8015030:	20000d94 	.word	0x20000d94

08015034 <vTaskPriorityDisinheritAfterTimeout>:
 8015034:	b580      	push	{r7, lr}
 8015036:	b088      	sub	sp, #32
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	61bb      	str	r3, [r7, #24]
 8015042:	2301      	movs	r3, #1
 8015044:	617b      	str	r3, [r7, #20]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d06c      	beq.n	8015126 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015050:	2b00      	cmp	r3, #0
 8015052:	d10b      	bne.n	801506c <vTaskPriorityDisinheritAfterTimeout+0x38>
 8015054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015058:	f383 8811 	msr	BASEPRI, r3
 801505c:	f3bf 8f6f 	isb	sy
 8015060:	f3bf 8f4f 	dsb	sy
 8015064:	60fb      	str	r3, [r7, #12]
 8015066:	bf00      	nop
 8015068:	bf00      	nop
 801506a:	e7fd      	b.n	8015068 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801506c:	69bb      	ldr	r3, [r7, #24]
 801506e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	429a      	cmp	r2, r3
 8015074:	d902      	bls.n	801507c <vTaskPriorityDisinheritAfterTimeout+0x48>
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	61fb      	str	r3, [r7, #28]
 801507a:	e002      	b.n	8015082 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015080:	61fb      	str	r3, [r7, #28]
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015086:	69fa      	ldr	r2, [r7, #28]
 8015088:	429a      	cmp	r2, r3
 801508a:	d04c      	beq.n	8015126 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015090:	697a      	ldr	r2, [r7, #20]
 8015092:	429a      	cmp	r2, r3
 8015094:	d147      	bne.n	8015126 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8015096:	4b26      	ldr	r3, [pc, #152]	@ (8015130 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	69ba      	ldr	r2, [r7, #24]
 801509c:	429a      	cmp	r2, r3
 801509e:	d10b      	bne.n	80150b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
 80150a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150a4:	f383 8811 	msr	BASEPRI, r3
 80150a8:	f3bf 8f6f 	isb	sy
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	60bb      	str	r3, [r7, #8]
 80150b2:	bf00      	nop
 80150b4:	bf00      	nop
 80150b6:	e7fd      	b.n	80150b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	69fa      	ldr	r2, [r7, #28]
 80150c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	699b      	ldr	r3, [r3, #24]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	db04      	blt.n	80150d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
 80150cc:	69fb      	ldr	r3, [r7, #28]
 80150ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80150d2:	69bb      	ldr	r3, [r7, #24]
 80150d4:	619a      	str	r2, [r3, #24]
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	6959      	ldr	r1, [r3, #20]
 80150da:	693a      	ldr	r2, [r7, #16]
 80150dc:	4613      	mov	r3, r2
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	4413      	add	r3, r2
 80150e2:	009b      	lsls	r3, r3, #2
 80150e4:	4a13      	ldr	r2, [pc, #76]	@ (8015134 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80150e6:	4413      	add	r3, r2
 80150e8:	4299      	cmp	r1, r3
 80150ea:	d11c      	bne.n	8015126 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	3304      	adds	r3, #4
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fe f8c3 	bl	801327c <uxListRemove>
 80150f6:	69bb      	ldr	r3, [r7, #24]
 80150f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150fa:	4b0f      	ldr	r3, [pc, #60]	@ (8015138 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d903      	bls.n	801510a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015102:	69bb      	ldr	r3, [r7, #24]
 8015104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015106:	4a0c      	ldr	r2, [pc, #48]	@ (8015138 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015108:	6013      	str	r3, [r2, #0]
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801510e:	4613      	mov	r3, r2
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	4413      	add	r3, r2
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	4a07      	ldr	r2, [pc, #28]	@ (8015134 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015118:	441a      	add	r2, r3
 801511a:	69bb      	ldr	r3, [r7, #24]
 801511c:	3304      	adds	r3, #4
 801511e:	4619      	mov	r1, r3
 8015120:	4610      	mov	r0, r2
 8015122:	f7fe f84e 	bl	80131c2 <vListInsertEnd>
 8015126:	bf00      	nop
 8015128:	3720      	adds	r7, #32
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	20000d90 	.word	0x20000d90
 8015134:	20000d94 	.word	0x20000d94
 8015138:	2000126c 	.word	0x2000126c

0801513c <pvTaskIncrementMutexHeldCount>:
 801513c:	b480      	push	{r7}
 801513e:	af00      	add	r7, sp, #0
 8015140:	4b07      	ldr	r3, [pc, #28]	@ (8015160 <pvTaskIncrementMutexHeldCount+0x24>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d004      	beq.n	8015152 <pvTaskIncrementMutexHeldCount+0x16>
 8015148:	4b05      	ldr	r3, [pc, #20]	@ (8015160 <pvTaskIncrementMutexHeldCount+0x24>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801514e:	3201      	adds	r2, #1
 8015150:	651a      	str	r2, [r3, #80]	@ 0x50
 8015152:	4b03      	ldr	r3, [pc, #12]	@ (8015160 <pvTaskIncrementMutexHeldCount+0x24>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	4618      	mov	r0, r3
 8015158:	46bd      	mov	sp, r7
 801515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515e:	4770      	bx	lr
 8015160:	20000d90 	.word	0x20000d90

08015164 <xTaskNotifyWait>:
 8015164:	b580      	push	{r7, lr}
 8015166:	b086      	sub	sp, #24
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	603b      	str	r3, [r7, #0]
 8015172:	f000 fee1 	bl	8015f38 <vPortEnterCritical>
 8015176:	4b29      	ldr	r3, [pc, #164]	@ (801521c <xTaskNotifyWait+0xb8>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801517e:	b2db      	uxtb	r3, r3
 8015180:	2b02      	cmp	r3, #2
 8015182:	d01c      	beq.n	80151be <xTaskNotifyWait+0x5a>
 8015184:	4b25      	ldr	r3, [pc, #148]	@ (801521c <xTaskNotifyWait+0xb8>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 801518c:	68fa      	ldr	r2, [r7, #12]
 801518e:	43d2      	mvns	r2, r2
 8015190:	400a      	ands	r2, r1
 8015192:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015196:	4b21      	ldr	r3, [pc, #132]	@ (801521c <xTaskNotifyWait+0xb8>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2201      	movs	r2, #1
 801519c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d00b      	beq.n	80151be <xTaskNotifyWait+0x5a>
 80151a6:	2101      	movs	r1, #1
 80151a8:	6838      	ldr	r0, [r7, #0]
 80151aa:	f000 f9e3 	bl	8015574 <prvAddCurrentTaskToDelayedList>
 80151ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015220 <xTaskNotifyWait+0xbc>)
 80151b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151b4:	601a      	str	r2, [r3, #0]
 80151b6:	f3bf 8f4f 	dsb	sy
 80151ba:	f3bf 8f6f 	isb	sy
 80151be:	f000 feed 	bl	8015f9c <vPortExitCritical>
 80151c2:	f000 feb9 	bl	8015f38 <vPortEnterCritical>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d005      	beq.n	80151d8 <xTaskNotifyWait+0x74>
 80151cc:	4b13      	ldr	r3, [pc, #76]	@ (801521c <xTaskNotifyWait+0xb8>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	601a      	str	r2, [r3, #0]
 80151d8:	4b10      	ldr	r3, [pc, #64]	@ (801521c <xTaskNotifyWait+0xb8>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	2b02      	cmp	r3, #2
 80151e4:	d002      	beq.n	80151ec <xTaskNotifyWait+0x88>
 80151e6:	2300      	movs	r3, #0
 80151e8:	617b      	str	r3, [r7, #20]
 80151ea:	e00a      	b.n	8015202 <xTaskNotifyWait+0x9e>
 80151ec:	4b0b      	ldr	r3, [pc, #44]	@ (801521c <xTaskNotifyWait+0xb8>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80151f4:	68ba      	ldr	r2, [r7, #8]
 80151f6:	43d2      	mvns	r2, r2
 80151f8:	400a      	ands	r2, r1
 80151fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80151fe:	2301      	movs	r3, #1
 8015200:	617b      	str	r3, [r7, #20]
 8015202:	4b06      	ldr	r3, [pc, #24]	@ (801521c <xTaskNotifyWait+0xb8>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	2200      	movs	r2, #0
 8015208:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 801520c:	f000 fec6 	bl	8015f9c <vPortExitCritical>
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	4618      	mov	r0, r3
 8015214:	3718      	adds	r7, #24
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	20000d90 	.word	0x20000d90
 8015220:	e000ed04 	.word	0xe000ed04

08015224 <xTaskGenericNotify>:
 8015224:	b580      	push	{r7, lr}
 8015226:	b08a      	sub	sp, #40	@ 0x28
 8015228:	af00      	add	r7, sp, #0
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	603b      	str	r3, [r7, #0]
 8015230:	4613      	mov	r3, r2
 8015232:	71fb      	strb	r3, [r7, #7]
 8015234:	2301      	movs	r3, #1
 8015236:	627b      	str	r3, [r7, #36]	@ 0x24
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d10b      	bne.n	8015256 <xTaskGenericNotify+0x32>
 801523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	61bb      	str	r3, [r7, #24]
 8015250:	bf00      	nop
 8015252:	bf00      	nop
 8015254:	e7fd      	b.n	8015252 <xTaskGenericNotify+0x2e>
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	623b      	str	r3, [r7, #32]
 801525a:	f000 fe6d 	bl	8015f38 <vPortEnterCritical>
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d004      	beq.n	801526e <xTaskGenericNotify+0x4a>
 8015264:	6a3b      	ldr	r3, [r7, #32]
 8015266:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	601a      	str	r2, [r3, #0]
 801526e:	6a3b      	ldr	r3, [r7, #32]
 8015270:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015274:	77fb      	strb	r3, [r7, #31]
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	2202      	movs	r2, #2
 801527a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 801527e:	79fb      	ldrb	r3, [r7, #7]
 8015280:	2b04      	cmp	r3, #4
 8015282:	d82e      	bhi.n	80152e2 <xTaskGenericNotify+0xbe>
 8015284:	a201      	add	r2, pc, #4	@ (adr r2, 801528c <xTaskGenericNotify+0x68>)
 8015286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801528a:	bf00      	nop
 801528c:	08015307 	.word	0x08015307
 8015290:	080152a1 	.word	0x080152a1
 8015294:	080152b3 	.word	0x080152b3
 8015298:	080152c3 	.word	0x080152c3
 801529c:	080152cd 	.word	0x080152cd
 80152a0:	6a3b      	ldr	r3, [r7, #32]
 80152a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	431a      	orrs	r2, r3
 80152aa:	6a3b      	ldr	r3, [r7, #32]
 80152ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80152b0:	e02c      	b.n	801530c <xTaskGenericNotify+0xe8>
 80152b2:	6a3b      	ldr	r3, [r7, #32]
 80152b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	6a3b      	ldr	r3, [r7, #32]
 80152bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80152c0:	e024      	b.n	801530c <xTaskGenericNotify+0xe8>
 80152c2:	6a3b      	ldr	r3, [r7, #32]
 80152c4:	68ba      	ldr	r2, [r7, #8]
 80152c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80152ca:	e01f      	b.n	801530c <xTaskGenericNotify+0xe8>
 80152cc:	7ffb      	ldrb	r3, [r7, #31]
 80152ce:	2b02      	cmp	r3, #2
 80152d0:	d004      	beq.n	80152dc <xTaskGenericNotify+0xb8>
 80152d2:	6a3b      	ldr	r3, [r7, #32]
 80152d4:	68ba      	ldr	r2, [r7, #8]
 80152d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80152da:	e017      	b.n	801530c <xTaskGenericNotify+0xe8>
 80152dc:	2300      	movs	r3, #0
 80152de:	627b      	str	r3, [r7, #36]	@ 0x24
 80152e0:	e014      	b.n	801530c <xTaskGenericNotify+0xe8>
 80152e2:	6a3b      	ldr	r3, [r7, #32]
 80152e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80152e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152ec:	d00d      	beq.n	801530a <xTaskGenericNotify+0xe6>
 80152ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	617b      	str	r3, [r7, #20]
 8015300:	bf00      	nop
 8015302:	bf00      	nop
 8015304:	e7fd      	b.n	8015302 <xTaskGenericNotify+0xde>
 8015306:	bf00      	nop
 8015308:	e000      	b.n	801530c <xTaskGenericNotify+0xe8>
 801530a:	bf00      	nop
 801530c:	7ffb      	ldrb	r3, [r7, #31]
 801530e:	2b01      	cmp	r3, #1
 8015310:	d13b      	bne.n	801538a <xTaskGenericNotify+0x166>
 8015312:	6a3b      	ldr	r3, [r7, #32]
 8015314:	3304      	adds	r3, #4
 8015316:	4618      	mov	r0, r3
 8015318:	f7fd ffb0 	bl	801327c <uxListRemove>
 801531c:	6a3b      	ldr	r3, [r7, #32]
 801531e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015320:	4b1d      	ldr	r3, [pc, #116]	@ (8015398 <xTaskGenericNotify+0x174>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	429a      	cmp	r2, r3
 8015326:	d903      	bls.n	8015330 <xTaskGenericNotify+0x10c>
 8015328:	6a3b      	ldr	r3, [r7, #32]
 801532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801532c:	4a1a      	ldr	r2, [pc, #104]	@ (8015398 <xTaskGenericNotify+0x174>)
 801532e:	6013      	str	r3, [r2, #0]
 8015330:	6a3b      	ldr	r3, [r7, #32]
 8015332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015334:	4613      	mov	r3, r2
 8015336:	009b      	lsls	r3, r3, #2
 8015338:	4413      	add	r3, r2
 801533a:	009b      	lsls	r3, r3, #2
 801533c:	4a17      	ldr	r2, [pc, #92]	@ (801539c <xTaskGenericNotify+0x178>)
 801533e:	441a      	add	r2, r3
 8015340:	6a3b      	ldr	r3, [r7, #32]
 8015342:	3304      	adds	r3, #4
 8015344:	4619      	mov	r1, r3
 8015346:	4610      	mov	r0, r2
 8015348:	f7fd ff3b 	bl	80131c2 <vListInsertEnd>
 801534c:	6a3b      	ldr	r3, [r7, #32]
 801534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015350:	2b00      	cmp	r3, #0
 8015352:	d00b      	beq.n	801536c <xTaskGenericNotify+0x148>
 8015354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015358:	f383 8811 	msr	BASEPRI, r3
 801535c:	f3bf 8f6f 	isb	sy
 8015360:	f3bf 8f4f 	dsb	sy
 8015364:	613b      	str	r3, [r7, #16]
 8015366:	bf00      	nop
 8015368:	bf00      	nop
 801536a:	e7fd      	b.n	8015368 <xTaskGenericNotify+0x144>
 801536c:	6a3b      	ldr	r3, [r7, #32]
 801536e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015370:	4b0b      	ldr	r3, [pc, #44]	@ (80153a0 <xTaskGenericNotify+0x17c>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015376:	429a      	cmp	r2, r3
 8015378:	d907      	bls.n	801538a <xTaskGenericNotify+0x166>
 801537a:	4b0a      	ldr	r3, [pc, #40]	@ (80153a4 <xTaskGenericNotify+0x180>)
 801537c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015380:	601a      	str	r2, [r3, #0]
 8015382:	f3bf 8f4f 	dsb	sy
 8015386:	f3bf 8f6f 	isb	sy
 801538a:	f000 fe07 	bl	8015f9c <vPortExitCritical>
 801538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015390:	4618      	mov	r0, r3
 8015392:	3728      	adds	r7, #40	@ 0x28
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	2000126c 	.word	0x2000126c
 801539c:	20000d94 	.word	0x20000d94
 80153a0:	20000d90 	.word	0x20000d90
 80153a4:	e000ed04 	.word	0xe000ed04

080153a8 <xTaskGenericNotifyFromISR>:
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b08e      	sub	sp, #56	@ 0x38
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	60f8      	str	r0, [r7, #12]
 80153b0:	60b9      	str	r1, [r7, #8]
 80153b2:	603b      	str	r3, [r7, #0]
 80153b4:	4613      	mov	r3, r2
 80153b6:	71fb      	strb	r3, [r7, #7]
 80153b8:	2301      	movs	r3, #1
 80153ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d10b      	bne.n	80153da <xTaskGenericNotifyFromISR+0x32>
 80153c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80153d4:	bf00      	nop
 80153d6:	bf00      	nop
 80153d8:	e7fd      	b.n	80153d6 <xTaskGenericNotifyFromISR+0x2e>
 80153da:	f000 fe8d 	bl	80160f8 <vPortValidateInterruptPriority>
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80153e2:	f3ef 8211 	mrs	r2, BASEPRI
 80153e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153ea:	f383 8811 	msr	BASEPRI, r3
 80153ee:	f3bf 8f6f 	isb	sy
 80153f2:	f3bf 8f4f 	dsb	sy
 80153f6:	623a      	str	r2, [r7, #32]
 80153f8:	61fb      	str	r3, [r7, #28]
 80153fa:	6a3b      	ldr	r3, [r7, #32]
 80153fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d004      	beq.n	801540e <xTaskGenericNotifyFromISR+0x66>
 8015404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015406:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	601a      	str	r2, [r3, #0]
 801540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015410:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801541a:	2202      	movs	r2, #2
 801541c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8015420:	79fb      	ldrb	r3, [r7, #7]
 8015422:	2b04      	cmp	r3, #4
 8015424:	d82e      	bhi.n	8015484 <xTaskGenericNotifyFromISR+0xdc>
 8015426:	a201      	add	r2, pc, #4	@ (adr r2, 801542c <xTaskGenericNotifyFromISR+0x84>)
 8015428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801542c:	080154a9 	.word	0x080154a9
 8015430:	08015441 	.word	0x08015441
 8015434:	08015453 	.word	0x08015453
 8015438:	08015463 	.word	0x08015463
 801543c:	0801546d 	.word	0x0801546d
 8015440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015442:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	431a      	orrs	r2, r3
 801544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801544c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015450:	e02d      	b.n	80154ae <xTaskGenericNotifyFromISR+0x106>
 8015452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015458:	1c5a      	adds	r2, r3, #1
 801545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801545c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015460:	e025      	b.n	80154ae <xTaskGenericNotifyFromISR+0x106>
 8015462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015464:	68ba      	ldr	r2, [r7, #8]
 8015466:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801546a:	e020      	b.n	80154ae <xTaskGenericNotifyFromISR+0x106>
 801546c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015470:	2b02      	cmp	r3, #2
 8015472:	d004      	beq.n	801547e <xTaskGenericNotifyFromISR+0xd6>
 8015474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015476:	68ba      	ldr	r2, [r7, #8]
 8015478:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801547c:	e017      	b.n	80154ae <xTaskGenericNotifyFromISR+0x106>
 801547e:	2300      	movs	r3, #0
 8015480:	637b      	str	r3, [r7, #52]	@ 0x34
 8015482:	e014      	b.n	80154ae <xTaskGenericNotifyFromISR+0x106>
 8015484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801548e:	d00d      	beq.n	80154ac <xTaskGenericNotifyFromISR+0x104>
 8015490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015494:	f383 8811 	msr	BASEPRI, r3
 8015498:	f3bf 8f6f 	isb	sy
 801549c:	f3bf 8f4f 	dsb	sy
 80154a0:	61bb      	str	r3, [r7, #24]
 80154a2:	bf00      	nop
 80154a4:	bf00      	nop
 80154a6:	e7fd      	b.n	80154a4 <xTaskGenericNotifyFromISR+0xfc>
 80154a8:	bf00      	nop
 80154aa:	e000      	b.n	80154ae <xTaskGenericNotifyFromISR+0x106>
 80154ac:	bf00      	nop
 80154ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80154b2:	2b01      	cmp	r3, #1
 80154b4:	d147      	bne.n	8015546 <xTaskGenericNotifyFromISR+0x19e>
 80154b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d00b      	beq.n	80154d6 <xTaskGenericNotifyFromISR+0x12e>
 80154be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154c2:	f383 8811 	msr	BASEPRI, r3
 80154c6:	f3bf 8f6f 	isb	sy
 80154ca:	f3bf 8f4f 	dsb	sy
 80154ce:	617b      	str	r3, [r7, #20]
 80154d0:	bf00      	nop
 80154d2:	bf00      	nop
 80154d4:	e7fd      	b.n	80154d2 <xTaskGenericNotifyFromISR+0x12a>
 80154d6:	4b21      	ldr	r3, [pc, #132]	@ (801555c <xTaskGenericNotifyFromISR+0x1b4>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d11d      	bne.n	801551a <xTaskGenericNotifyFromISR+0x172>
 80154de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e0:	3304      	adds	r3, #4
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fd feca 	bl	801327c <uxListRemove>
 80154e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154ec:	4b1c      	ldr	r3, [pc, #112]	@ (8015560 <xTaskGenericNotifyFromISR+0x1b8>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d903      	bls.n	80154fc <xTaskGenericNotifyFromISR+0x154>
 80154f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154f8:	4a19      	ldr	r2, [pc, #100]	@ (8015560 <xTaskGenericNotifyFromISR+0x1b8>)
 80154fa:	6013      	str	r3, [r2, #0]
 80154fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015500:	4613      	mov	r3, r2
 8015502:	009b      	lsls	r3, r3, #2
 8015504:	4413      	add	r3, r2
 8015506:	009b      	lsls	r3, r3, #2
 8015508:	4a16      	ldr	r2, [pc, #88]	@ (8015564 <xTaskGenericNotifyFromISR+0x1bc>)
 801550a:	441a      	add	r2, r3
 801550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550e:	3304      	adds	r3, #4
 8015510:	4619      	mov	r1, r3
 8015512:	4610      	mov	r0, r2
 8015514:	f7fd fe55 	bl	80131c2 <vListInsertEnd>
 8015518:	e005      	b.n	8015526 <xTaskGenericNotifyFromISR+0x17e>
 801551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801551c:	3318      	adds	r3, #24
 801551e:	4619      	mov	r1, r3
 8015520:	4811      	ldr	r0, [pc, #68]	@ (8015568 <xTaskGenericNotifyFromISR+0x1c0>)
 8015522:	f7fd fe4e 	bl	80131c2 <vListInsertEnd>
 8015526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801552a:	4b10      	ldr	r3, [pc, #64]	@ (801556c <xTaskGenericNotifyFromISR+0x1c4>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015530:	429a      	cmp	r2, r3
 8015532:	d908      	bls.n	8015546 <xTaskGenericNotifyFromISR+0x19e>
 8015534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015536:	2b00      	cmp	r3, #0
 8015538:	d002      	beq.n	8015540 <xTaskGenericNotifyFromISR+0x198>
 801553a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801553c:	2201      	movs	r2, #1
 801553e:	601a      	str	r2, [r3, #0]
 8015540:	4b0b      	ldr	r3, [pc, #44]	@ (8015570 <xTaskGenericNotifyFromISR+0x1c8>)
 8015542:	2201      	movs	r2, #1
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015548:	613b      	str	r3, [r7, #16]
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	f383 8811 	msr	BASEPRI, r3
 8015550:	bf00      	nop
 8015552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015554:	4618      	mov	r0, r3
 8015556:	3738      	adds	r7, #56	@ 0x38
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	2000128c 	.word	0x2000128c
 8015560:	2000126c 	.word	0x2000126c
 8015564:	20000d94 	.word	0x20000d94
 8015568:	20001224 	.word	0x20001224
 801556c:	20000d90 	.word	0x20000d90
 8015570:	20001278 	.word	0x20001278

08015574 <prvAddCurrentTaskToDelayedList>:
 8015574:	b580      	push	{r7, lr}
 8015576:	b084      	sub	sp, #16
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	6039      	str	r1, [r7, #0]
 801557e:	4b21      	ldr	r3, [pc, #132]	@ (8015604 <prvAddCurrentTaskToDelayedList+0x90>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	60fb      	str	r3, [r7, #12]
 8015584:	4b20      	ldr	r3, [pc, #128]	@ (8015608 <prvAddCurrentTaskToDelayedList+0x94>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	3304      	adds	r3, #4
 801558a:	4618      	mov	r0, r3
 801558c:	f7fd fe76 	bl	801327c <uxListRemove>
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015596:	d10a      	bne.n	80155ae <prvAddCurrentTaskToDelayedList+0x3a>
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d007      	beq.n	80155ae <prvAddCurrentTaskToDelayedList+0x3a>
 801559e:	4b1a      	ldr	r3, [pc, #104]	@ (8015608 <prvAddCurrentTaskToDelayedList+0x94>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	3304      	adds	r3, #4
 80155a4:	4619      	mov	r1, r3
 80155a6:	4819      	ldr	r0, [pc, #100]	@ (801560c <prvAddCurrentTaskToDelayedList+0x98>)
 80155a8:	f7fd fe0b 	bl	80131c2 <vListInsertEnd>
 80155ac:	e026      	b.n	80155fc <prvAddCurrentTaskToDelayedList+0x88>
 80155ae:	68fa      	ldr	r2, [r7, #12]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	4413      	add	r3, r2
 80155b4:	60bb      	str	r3, [r7, #8]
 80155b6:	4b14      	ldr	r3, [pc, #80]	@ (8015608 <prvAddCurrentTaskToDelayedList+0x94>)
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	68ba      	ldr	r2, [r7, #8]
 80155bc:	605a      	str	r2, [r3, #4]
 80155be:	68ba      	ldr	r2, [r7, #8]
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d209      	bcs.n	80155da <prvAddCurrentTaskToDelayedList+0x66>
 80155c6:	4b12      	ldr	r3, [pc, #72]	@ (8015610 <prvAddCurrentTaskToDelayedList+0x9c>)
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	4b0f      	ldr	r3, [pc, #60]	@ (8015608 <prvAddCurrentTaskToDelayedList+0x94>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	3304      	adds	r3, #4
 80155d0:	4619      	mov	r1, r3
 80155d2:	4610      	mov	r0, r2
 80155d4:	f7fd fe19 	bl	801320a <vListInsert>
 80155d8:	e010      	b.n	80155fc <prvAddCurrentTaskToDelayedList+0x88>
 80155da:	4b0e      	ldr	r3, [pc, #56]	@ (8015614 <prvAddCurrentTaskToDelayedList+0xa0>)
 80155dc:	681a      	ldr	r2, [r3, #0]
 80155de:	4b0a      	ldr	r3, [pc, #40]	@ (8015608 <prvAddCurrentTaskToDelayedList+0x94>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	3304      	adds	r3, #4
 80155e4:	4619      	mov	r1, r3
 80155e6:	4610      	mov	r0, r2
 80155e8:	f7fd fe0f 	bl	801320a <vListInsert>
 80155ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	68ba      	ldr	r2, [r7, #8]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d202      	bcs.n	80155fc <prvAddCurrentTaskToDelayedList+0x88>
 80155f6:	4a08      	ldr	r2, [pc, #32]	@ (8015618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	6013      	str	r3, [r2, #0]
 80155fc:	bf00      	nop
 80155fe:	3710      	adds	r7, #16
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}
 8015604:	20001268 	.word	0x20001268
 8015608:	20000d90 	.word	0x20000d90
 801560c:	20001250 	.word	0x20001250
 8015610:	20001220 	.word	0x20001220
 8015614:	2000121c 	.word	0x2000121c
 8015618:	20001284 	.word	0x20001284

0801561c <xTimerCreateTimerTask>:
 801561c:	b580      	push	{r7, lr}
 801561e:	b08a      	sub	sp, #40	@ 0x28
 8015620:	af04      	add	r7, sp, #16
 8015622:	2300      	movs	r3, #0
 8015624:	617b      	str	r3, [r7, #20]
 8015626:	f000 fb13 	bl	8015c50 <prvCheckForValidListAndQueue>
 801562a:	4b1d      	ldr	r3, [pc, #116]	@ (80156a0 <xTimerCreateTimerTask+0x84>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d021      	beq.n	8015676 <xTimerCreateTimerTask+0x5a>
 8015632:	2300      	movs	r3, #0
 8015634:	60fb      	str	r3, [r7, #12]
 8015636:	2300      	movs	r3, #0
 8015638:	60bb      	str	r3, [r7, #8]
 801563a:	1d3a      	adds	r2, r7, #4
 801563c:	f107 0108 	add.w	r1, r7, #8
 8015640:	f107 030c 	add.w	r3, r7, #12
 8015644:	4618      	mov	r0, r3
 8015646:	f7fd fd75 	bl	8013134 <vApplicationGetTimerTaskMemory>
 801564a:	6879      	ldr	r1, [r7, #4]
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	68fa      	ldr	r2, [r7, #12]
 8015650:	9202      	str	r2, [sp, #8]
 8015652:	9301      	str	r3, [sp, #4]
 8015654:	2302      	movs	r3, #2
 8015656:	9300      	str	r3, [sp, #0]
 8015658:	2300      	movs	r3, #0
 801565a:	460a      	mov	r2, r1
 801565c:	4911      	ldr	r1, [pc, #68]	@ (80156a4 <xTimerCreateTimerTask+0x88>)
 801565e:	4812      	ldr	r0, [pc, #72]	@ (80156a8 <xTimerCreateTimerTask+0x8c>)
 8015660:	f7fe fd4c 	bl	80140fc <xTaskCreateStatic>
 8015664:	4603      	mov	r3, r0
 8015666:	4a11      	ldr	r2, [pc, #68]	@ (80156ac <xTimerCreateTimerTask+0x90>)
 8015668:	6013      	str	r3, [r2, #0]
 801566a:	4b10      	ldr	r3, [pc, #64]	@ (80156ac <xTimerCreateTimerTask+0x90>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d001      	beq.n	8015676 <xTimerCreateTimerTask+0x5a>
 8015672:	2301      	movs	r3, #1
 8015674:	617b      	str	r3, [r7, #20]
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d10b      	bne.n	8015694 <xTimerCreateTimerTask+0x78>
 801567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015680:	f383 8811 	msr	BASEPRI, r3
 8015684:	f3bf 8f6f 	isb	sy
 8015688:	f3bf 8f4f 	dsb	sy
 801568c:	613b      	str	r3, [r7, #16]
 801568e:	bf00      	nop
 8015690:	bf00      	nop
 8015692:	e7fd      	b.n	8015690 <xTimerCreateTimerTask+0x74>
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	4618      	mov	r0, r3
 8015698:	3718      	adds	r7, #24
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	200012c0 	.word	0x200012c0
 80156a4:	0801a200 	.word	0x0801a200
 80156a8:	080157e9 	.word	0x080157e9
 80156ac:	200012c4 	.word	0x200012c4

080156b0 <xTimerGenericCommand>:
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b08a      	sub	sp, #40	@ 0x28
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	607a      	str	r2, [r7, #4]
 80156bc:	603b      	str	r3, [r7, #0]
 80156be:	2300      	movs	r3, #0
 80156c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d10b      	bne.n	80156e0 <xTimerGenericCommand+0x30>
 80156c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156cc:	f383 8811 	msr	BASEPRI, r3
 80156d0:	f3bf 8f6f 	isb	sy
 80156d4:	f3bf 8f4f 	dsb	sy
 80156d8:	623b      	str	r3, [r7, #32]
 80156da:	bf00      	nop
 80156dc:	bf00      	nop
 80156de:	e7fd      	b.n	80156dc <xTimerGenericCommand+0x2c>
 80156e0:	4b19      	ldr	r3, [pc, #100]	@ (8015748 <xTimerGenericCommand+0x98>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d02a      	beq.n	801573e <xTimerGenericCommand+0x8e>
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	613b      	str	r3, [r7, #16]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	617b      	str	r3, [r7, #20]
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	61bb      	str	r3, [r7, #24]
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	2b05      	cmp	r3, #5
 80156f8:	dc18      	bgt.n	801572c <xTimerGenericCommand+0x7c>
 80156fa:	f7ff fba5 	bl	8014e48 <xTaskGetSchedulerState>
 80156fe:	4603      	mov	r3, r0
 8015700:	2b02      	cmp	r3, #2
 8015702:	d109      	bne.n	8015718 <xTimerGenericCommand+0x68>
 8015704:	4b10      	ldr	r3, [pc, #64]	@ (8015748 <xTimerGenericCommand+0x98>)
 8015706:	6818      	ldr	r0, [r3, #0]
 8015708:	f107 0110 	add.w	r1, r7, #16
 801570c:	2300      	movs	r3, #0
 801570e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015710:	f7fd ffdc 	bl	80136cc <xQueueGenericSend>
 8015714:	6278      	str	r0, [r7, #36]	@ 0x24
 8015716:	e012      	b.n	801573e <xTimerGenericCommand+0x8e>
 8015718:	4b0b      	ldr	r3, [pc, #44]	@ (8015748 <xTimerGenericCommand+0x98>)
 801571a:	6818      	ldr	r0, [r3, #0]
 801571c:	f107 0110 	add.w	r1, r7, #16
 8015720:	2300      	movs	r3, #0
 8015722:	2200      	movs	r2, #0
 8015724:	f7fd ffd2 	bl	80136cc <xQueueGenericSend>
 8015728:	6278      	str	r0, [r7, #36]	@ 0x24
 801572a:	e008      	b.n	801573e <xTimerGenericCommand+0x8e>
 801572c:	4b06      	ldr	r3, [pc, #24]	@ (8015748 <xTimerGenericCommand+0x98>)
 801572e:	6818      	ldr	r0, [r3, #0]
 8015730:	f107 0110 	add.w	r1, r7, #16
 8015734:	2300      	movs	r3, #0
 8015736:	683a      	ldr	r2, [r7, #0]
 8015738:	f7fe f8ca 	bl	80138d0 <xQueueGenericSendFromISR>
 801573c:	6278      	str	r0, [r7, #36]	@ 0x24
 801573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015740:	4618      	mov	r0, r3
 8015742:	3728      	adds	r7, #40	@ 0x28
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	200012c0 	.word	0x200012c0

0801574c <prvProcessExpiredTimer>:
 801574c:	b580      	push	{r7, lr}
 801574e:	b088      	sub	sp, #32
 8015750:	af02      	add	r7, sp, #8
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
 8015756:	4b23      	ldr	r3, [pc, #140]	@ (80157e4 <prvProcessExpiredTimer+0x98>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	617b      	str	r3, [r7, #20]
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	3304      	adds	r3, #4
 8015764:	4618      	mov	r0, r3
 8015766:	f7fd fd89 	bl	801327c <uxListRemove>
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015770:	f003 0304 	and.w	r3, r3, #4
 8015774:	2b00      	cmp	r3, #0
 8015776:	d023      	beq.n	80157c0 <prvProcessExpiredTimer+0x74>
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	699a      	ldr	r2, [r3, #24]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	18d1      	adds	r1, r2, r3
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	683a      	ldr	r2, [r7, #0]
 8015784:	6978      	ldr	r0, [r7, #20]
 8015786:	f000 f8d5 	bl	8015934 <prvInsertTimerInActiveList>
 801578a:	4603      	mov	r3, r0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d020      	beq.n	80157d2 <prvProcessExpiredTimer+0x86>
 8015790:	2300      	movs	r3, #0
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	2300      	movs	r3, #0
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	2100      	movs	r1, #0
 801579a:	6978      	ldr	r0, [r7, #20]
 801579c:	f7ff ff88 	bl	80156b0 <xTimerGenericCommand>
 80157a0:	6138      	str	r0, [r7, #16]
 80157a2:	693b      	ldr	r3, [r7, #16]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d114      	bne.n	80157d2 <prvProcessExpiredTimer+0x86>
 80157a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ac:	f383 8811 	msr	BASEPRI, r3
 80157b0:	f3bf 8f6f 	isb	sy
 80157b4:	f3bf 8f4f 	dsb	sy
 80157b8:	60fb      	str	r3, [r7, #12]
 80157ba:	bf00      	nop
 80157bc:	bf00      	nop
 80157be:	e7fd      	b.n	80157bc <prvProcessExpiredTimer+0x70>
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80157c6:	f023 0301 	bic.w	r3, r3, #1
 80157ca:	b2da      	uxtb	r2, r3
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	6a1b      	ldr	r3, [r3, #32]
 80157d6:	6978      	ldr	r0, [r7, #20]
 80157d8:	4798      	blx	r3
 80157da:	bf00      	nop
 80157dc:	3718      	adds	r7, #24
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	200012b8 	.word	0x200012b8

080157e8 <prvTimerTask>:
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	f107 0308 	add.w	r3, r7, #8
 80157f4:	4618      	mov	r0, r3
 80157f6:	f000 f859 	bl	80158ac <prvGetNextExpireTime>
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	4619      	mov	r1, r3
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	f000 f805 	bl	8015810 <prvProcessTimerOrBlockTask>
 8015806:	f000 f8d7 	bl	80159b8 <prvProcessReceivedCommands>
 801580a:	bf00      	nop
 801580c:	e7f0      	b.n	80157f0 <prvTimerTask+0x8>
	...

08015810 <prvProcessTimerOrBlockTask>:
 8015810:	b580      	push	{r7, lr}
 8015812:	b084      	sub	sp, #16
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	6039      	str	r1, [r7, #0]
 801581a:	f7fe ff11 	bl	8014640 <vTaskSuspendAll>
 801581e:	f107 0308 	add.w	r3, r7, #8
 8015822:	4618      	mov	r0, r3
 8015824:	f000 f866 	bl	80158f4 <prvSampleTimeNow>
 8015828:	60f8      	str	r0, [r7, #12]
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d130      	bne.n	8015892 <prvProcessTimerOrBlockTask+0x82>
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d10a      	bne.n	801584c <prvProcessTimerOrBlockTask+0x3c>
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	429a      	cmp	r2, r3
 801583c:	d806      	bhi.n	801584c <prvProcessTimerOrBlockTask+0x3c>
 801583e:	f7fe ff0d 	bl	801465c <xTaskResumeAll>
 8015842:	68f9      	ldr	r1, [r7, #12]
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f7ff ff81 	bl	801574c <prvProcessExpiredTimer>
 801584a:	e024      	b.n	8015896 <prvProcessTimerOrBlockTask+0x86>
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d008      	beq.n	8015864 <prvProcessTimerOrBlockTask+0x54>
 8015852:	4b13      	ldr	r3, [pc, #76]	@ (80158a0 <prvProcessTimerOrBlockTask+0x90>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d101      	bne.n	8015860 <prvProcessTimerOrBlockTask+0x50>
 801585c:	2301      	movs	r3, #1
 801585e:	e000      	b.n	8015862 <prvProcessTimerOrBlockTask+0x52>
 8015860:	2300      	movs	r3, #0
 8015862:	603b      	str	r3, [r7, #0]
 8015864:	4b0f      	ldr	r3, [pc, #60]	@ (80158a4 <prvProcessTimerOrBlockTask+0x94>)
 8015866:	6818      	ldr	r0, [r3, #0]
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	683a      	ldr	r2, [r7, #0]
 8015870:	4619      	mov	r1, r3
 8015872:	f7fe fc0f 	bl	8014094 <vQueueWaitForMessageRestricted>
 8015876:	f7fe fef1 	bl	801465c <xTaskResumeAll>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d10a      	bne.n	8015896 <prvProcessTimerOrBlockTask+0x86>
 8015880:	4b09      	ldr	r3, [pc, #36]	@ (80158a8 <prvProcessTimerOrBlockTask+0x98>)
 8015882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015886:	601a      	str	r2, [r3, #0]
 8015888:	f3bf 8f4f 	dsb	sy
 801588c:	f3bf 8f6f 	isb	sy
 8015890:	e001      	b.n	8015896 <prvProcessTimerOrBlockTask+0x86>
 8015892:	f7fe fee3 	bl	801465c <xTaskResumeAll>
 8015896:	bf00      	nop
 8015898:	3710      	adds	r7, #16
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	200012bc 	.word	0x200012bc
 80158a4:	200012c0 	.word	0x200012c0
 80158a8:	e000ed04 	.word	0xe000ed04

080158ac <prvGetNextExpireTime>:
 80158ac:	b480      	push	{r7}
 80158ae:	b085      	sub	sp, #20
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	4b0e      	ldr	r3, [pc, #56]	@ (80158f0 <prvGetNextExpireTime+0x44>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d101      	bne.n	80158c2 <prvGetNextExpireTime+0x16>
 80158be:	2201      	movs	r2, #1
 80158c0:	e000      	b.n	80158c4 <prvGetNextExpireTime+0x18>
 80158c2:	2200      	movs	r2, #0
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	601a      	str	r2, [r3, #0]
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d105      	bne.n	80158dc <prvGetNextExpireTime+0x30>
 80158d0:	4b07      	ldr	r3, [pc, #28]	@ (80158f0 <prvGetNextExpireTime+0x44>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	68db      	ldr	r3, [r3, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	60fb      	str	r3, [r7, #12]
 80158da:	e001      	b.n	80158e0 <prvGetNextExpireTime+0x34>
 80158dc:	2300      	movs	r3, #0
 80158de:	60fb      	str	r3, [r7, #12]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	4618      	mov	r0, r3
 80158e4:	3714      	adds	r7, #20
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr
 80158ee:	bf00      	nop
 80158f0:	200012b8 	.word	0x200012b8

080158f4 <prvSampleTimeNow>:
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	f7fe ff4c 	bl	8014798 <xTaskGetTickCount>
 8015900:	60f8      	str	r0, [r7, #12]
 8015902:	4b0b      	ldr	r3, [pc, #44]	@ (8015930 <prvSampleTimeNow+0x3c>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	68fa      	ldr	r2, [r7, #12]
 8015908:	429a      	cmp	r2, r3
 801590a:	d205      	bcs.n	8015918 <prvSampleTimeNow+0x24>
 801590c:	f000 f93a 	bl	8015b84 <prvSwitchTimerLists>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2201      	movs	r2, #1
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	e002      	b.n	801591e <prvSampleTimeNow+0x2a>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2200      	movs	r2, #0
 801591c:	601a      	str	r2, [r3, #0]
 801591e:	4a04      	ldr	r2, [pc, #16]	@ (8015930 <prvSampleTimeNow+0x3c>)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	6013      	str	r3, [r2, #0]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	4618      	mov	r0, r3
 8015928:	3710      	adds	r7, #16
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	200012c8 	.word	0x200012c8

08015934 <prvInsertTimerInActiveList>:
 8015934:	b580      	push	{r7, lr}
 8015936:	b086      	sub	sp, #24
 8015938:	af00      	add	r7, sp, #0
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	607a      	str	r2, [r7, #4]
 8015940:	603b      	str	r3, [r7, #0]
 8015942:	2300      	movs	r3, #0
 8015944:	617b      	str	r3, [r7, #20]
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	68ba      	ldr	r2, [r7, #8]
 801594a:	605a      	str	r2, [r3, #4]
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	68fa      	ldr	r2, [r7, #12]
 8015950:	611a      	str	r2, [r3, #16]
 8015952:	68ba      	ldr	r2, [r7, #8]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	429a      	cmp	r2, r3
 8015958:	d812      	bhi.n	8015980 <prvInsertTimerInActiveList+0x4c>
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	1ad2      	subs	r2, r2, r3
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	699b      	ldr	r3, [r3, #24]
 8015964:	429a      	cmp	r2, r3
 8015966:	d302      	bcc.n	801596e <prvInsertTimerInActiveList+0x3a>
 8015968:	2301      	movs	r3, #1
 801596a:	617b      	str	r3, [r7, #20]
 801596c:	e01b      	b.n	80159a6 <prvInsertTimerInActiveList+0x72>
 801596e:	4b10      	ldr	r3, [pc, #64]	@ (80159b0 <prvInsertTimerInActiveList+0x7c>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	3304      	adds	r3, #4
 8015976:	4619      	mov	r1, r3
 8015978:	4610      	mov	r0, r2
 801597a:	f7fd fc46 	bl	801320a <vListInsert>
 801597e:	e012      	b.n	80159a6 <prvInsertTimerInActiveList+0x72>
 8015980:	687a      	ldr	r2, [r7, #4]
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	429a      	cmp	r2, r3
 8015986:	d206      	bcs.n	8015996 <prvInsertTimerInActiveList+0x62>
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	429a      	cmp	r2, r3
 801598e:	d302      	bcc.n	8015996 <prvInsertTimerInActiveList+0x62>
 8015990:	2301      	movs	r3, #1
 8015992:	617b      	str	r3, [r7, #20]
 8015994:	e007      	b.n	80159a6 <prvInsertTimerInActiveList+0x72>
 8015996:	4b07      	ldr	r3, [pc, #28]	@ (80159b4 <prvInsertTimerInActiveList+0x80>)
 8015998:	681a      	ldr	r2, [r3, #0]
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	3304      	adds	r3, #4
 801599e:	4619      	mov	r1, r3
 80159a0:	4610      	mov	r0, r2
 80159a2:	f7fd fc32 	bl	801320a <vListInsert>
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	4618      	mov	r0, r3
 80159aa:	3718      	adds	r7, #24
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}
 80159b0:	200012bc 	.word	0x200012bc
 80159b4:	200012b8 	.word	0x200012b8

080159b8 <prvProcessReceivedCommands>:
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b08e      	sub	sp, #56	@ 0x38
 80159bc:	af02      	add	r7, sp, #8
 80159be:	e0ce      	b.n	8015b5e <prvProcessReceivedCommands+0x1a6>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	da19      	bge.n	80159fa <prvProcessReceivedCommands+0x42>
 80159c6:	1d3b      	adds	r3, r7, #4
 80159c8:	3304      	adds	r3, #4
 80159ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80159cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d10b      	bne.n	80159ea <prvProcessReceivedCommands+0x32>
 80159d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159d6:	f383 8811 	msr	BASEPRI, r3
 80159da:	f3bf 8f6f 	isb	sy
 80159de:	f3bf 8f4f 	dsb	sy
 80159e2:	61fb      	str	r3, [r7, #28]
 80159e4:	bf00      	nop
 80159e6:	bf00      	nop
 80159e8:	e7fd      	b.n	80159e6 <prvProcessReceivedCommands+0x2e>
 80159ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159f0:	6850      	ldr	r0, [r2, #4]
 80159f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159f4:	6892      	ldr	r2, [r2, #8]
 80159f6:	4611      	mov	r1, r2
 80159f8:	4798      	blx	r3
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	f2c0 80ae 	blt.w	8015b5e <prvProcessReceivedCommands+0x1a6>
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a08:	695b      	ldr	r3, [r3, #20]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d004      	beq.n	8015a18 <prvProcessReceivedCommands+0x60>
 8015a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a10:	3304      	adds	r3, #4
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7fd fc32 	bl	801327c <uxListRemove>
 8015a18:	463b      	mov	r3, r7
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7ff ff6a 	bl	80158f4 <prvSampleTimeNow>
 8015a20:	6278      	str	r0, [r7, #36]	@ 0x24
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2b09      	cmp	r3, #9
 8015a26:	f200 8097 	bhi.w	8015b58 <prvProcessReceivedCommands+0x1a0>
 8015a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8015a30 <prvProcessReceivedCommands+0x78>)
 8015a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a30:	08015a59 	.word	0x08015a59
 8015a34:	08015a59 	.word	0x08015a59
 8015a38:	08015a59 	.word	0x08015a59
 8015a3c:	08015acf 	.word	0x08015acf
 8015a40:	08015ae3 	.word	0x08015ae3
 8015a44:	08015b2f 	.word	0x08015b2f
 8015a48:	08015a59 	.word	0x08015a59
 8015a4c:	08015a59 	.word	0x08015a59
 8015a50:	08015acf 	.word	0x08015acf
 8015a54:	08015ae3 	.word	0x08015ae3
 8015a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a5e:	f043 0301 	orr.w	r3, r3, #1
 8015a62:	b2da      	uxtb	r2, r3
 8015a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8015a6a:	68ba      	ldr	r2, [r7, #8]
 8015a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a6e:	699b      	ldr	r3, [r3, #24]
 8015a70:	18d1      	adds	r1, r2, r3
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a78:	f7ff ff5c 	bl	8015934 <prvInsertTimerInActiveList>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d06c      	beq.n	8015b5c <prvProcessReceivedCommands+0x1a4>
 8015a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a84:	6a1b      	ldr	r3, [r3, #32]
 8015a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a88:	4798      	blx	r3
 8015a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a90:	f003 0304 	and.w	r3, r3, #4
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d061      	beq.n	8015b5c <prvProcessReceivedCommands+0x1a4>
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a9c:	699b      	ldr	r3, [r3, #24]
 8015a9e:	441a      	add	r2, r3
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015aaa:	f7ff fe01 	bl	80156b0 <xTimerGenericCommand>
 8015aae:	6238      	str	r0, [r7, #32]
 8015ab0:	6a3b      	ldr	r3, [r7, #32]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d152      	bne.n	8015b5c <prvProcessReceivedCommands+0x1a4>
 8015ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aba:	f383 8811 	msr	BASEPRI, r3
 8015abe:	f3bf 8f6f 	isb	sy
 8015ac2:	f3bf 8f4f 	dsb	sy
 8015ac6:	61bb      	str	r3, [r7, #24]
 8015ac8:	bf00      	nop
 8015aca:	bf00      	nop
 8015acc:	e7fd      	b.n	8015aca <prvProcessReceivedCommands+0x112>
 8015ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ad4:	f023 0301 	bic.w	r3, r3, #1
 8015ad8:	b2da      	uxtb	r2, r3
 8015ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015adc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8015ae0:	e03d      	b.n	8015b5e <prvProcessReceivedCommands+0x1a6>
 8015ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ae8:	f043 0301 	orr.w	r3, r3, #1
 8015aec:	b2da      	uxtb	r2, r3
 8015aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015af0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015af8:	619a      	str	r2, [r3, #24]
 8015afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015afc:	699b      	ldr	r3, [r3, #24]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d10b      	bne.n	8015b1a <prvProcessReceivedCommands+0x162>
 8015b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b06:	f383 8811 	msr	BASEPRI, r3
 8015b0a:	f3bf 8f6f 	isb	sy
 8015b0e:	f3bf 8f4f 	dsb	sy
 8015b12:	617b      	str	r3, [r7, #20]
 8015b14:	bf00      	nop
 8015b16:	bf00      	nop
 8015b18:	e7fd      	b.n	8015b16 <prvProcessReceivedCommands+0x15e>
 8015b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b1c:	699a      	ldr	r2, [r3, #24]
 8015b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b20:	18d1      	adds	r1, r2, r3
 8015b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b28:	f7ff ff04 	bl	8015934 <prvInsertTimerInActiveList>
 8015b2c:	e017      	b.n	8015b5e <prvProcessReceivedCommands+0x1a6>
 8015b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b34:	f003 0302 	and.w	r3, r3, #2
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d103      	bne.n	8015b44 <prvProcessReceivedCommands+0x18c>
 8015b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b3e:	f000 fbeb 	bl	8016318 <vPortFree>
 8015b42:	e00c      	b.n	8015b5e <prvProcessReceivedCommands+0x1a6>
 8015b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b4a:	f023 0301 	bic.w	r3, r3, #1
 8015b4e:	b2da      	uxtb	r2, r3
 8015b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8015b56:	e002      	b.n	8015b5e <prvProcessReceivedCommands+0x1a6>
 8015b58:	bf00      	nop
 8015b5a:	e000      	b.n	8015b5e <prvProcessReceivedCommands+0x1a6>
 8015b5c:	bf00      	nop
 8015b5e:	4b08      	ldr	r3, [pc, #32]	@ (8015b80 <prvProcessReceivedCommands+0x1c8>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	1d39      	adds	r1, r7, #4
 8015b64:	2200      	movs	r2, #0
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7fd ff50 	bl	8013a0c <xQueueReceive>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	f47f af26 	bne.w	80159c0 <prvProcessReceivedCommands+0x8>
 8015b74:	bf00      	nop
 8015b76:	bf00      	nop
 8015b78:	3730      	adds	r7, #48	@ 0x30
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	200012c0 	.word	0x200012c0

08015b84 <prvSwitchTimerLists>:
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b088      	sub	sp, #32
 8015b88:	af02      	add	r7, sp, #8
 8015b8a:	e049      	b.n	8015c20 <prvSwitchTimerLists+0x9c>
 8015b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8015c48 <prvSwitchTimerLists+0xc4>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	613b      	str	r3, [r7, #16]
 8015b96:	4b2c      	ldr	r3, [pc, #176]	@ (8015c48 <prvSwitchTimerLists+0xc4>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	68db      	ldr	r3, [r3, #12]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	60fb      	str	r3, [r7, #12]
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	3304      	adds	r3, #4
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7fd fb69 	bl	801327c <uxListRemove>
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	6a1b      	ldr	r3, [r3, #32]
 8015bae:	68f8      	ldr	r0, [r7, #12]
 8015bb0:	4798      	blx	r3
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bb8:	f003 0304 	and.w	r3, r3, #4
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d02f      	beq.n	8015c20 <prvSwitchTimerLists+0x9c>
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	699b      	ldr	r3, [r3, #24]
 8015bc4:	693a      	ldr	r2, [r7, #16]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	60bb      	str	r3, [r7, #8]
 8015bca:	68ba      	ldr	r2, [r7, #8]
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d90e      	bls.n	8015bf0 <prvSwitchTimerLists+0x6c>
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	68ba      	ldr	r2, [r7, #8]
 8015bd6:	605a      	str	r2, [r3, #4]
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	68fa      	ldr	r2, [r7, #12]
 8015bdc:	611a      	str	r2, [r3, #16]
 8015bde:	4b1a      	ldr	r3, [pc, #104]	@ (8015c48 <prvSwitchTimerLists+0xc4>)
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	3304      	adds	r3, #4
 8015be6:	4619      	mov	r1, r3
 8015be8:	4610      	mov	r0, r2
 8015bea:	f7fd fb0e 	bl	801320a <vListInsert>
 8015bee:	e017      	b.n	8015c20 <prvSwitchTimerLists+0x9c>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	9300      	str	r3, [sp, #0]
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	693a      	ldr	r2, [r7, #16]
 8015bf8:	2100      	movs	r1, #0
 8015bfa:	68f8      	ldr	r0, [r7, #12]
 8015bfc:	f7ff fd58 	bl	80156b0 <xTimerGenericCommand>
 8015c00:	6078      	str	r0, [r7, #4]
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d10b      	bne.n	8015c20 <prvSwitchTimerLists+0x9c>
 8015c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c0c:	f383 8811 	msr	BASEPRI, r3
 8015c10:	f3bf 8f6f 	isb	sy
 8015c14:	f3bf 8f4f 	dsb	sy
 8015c18:	603b      	str	r3, [r7, #0]
 8015c1a:	bf00      	nop
 8015c1c:	bf00      	nop
 8015c1e:	e7fd      	b.n	8015c1c <prvSwitchTimerLists+0x98>
 8015c20:	4b09      	ldr	r3, [pc, #36]	@ (8015c48 <prvSwitchTimerLists+0xc4>)
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d1b0      	bne.n	8015b8c <prvSwitchTimerLists+0x8>
 8015c2a:	4b07      	ldr	r3, [pc, #28]	@ (8015c48 <prvSwitchTimerLists+0xc4>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	617b      	str	r3, [r7, #20]
 8015c30:	4b06      	ldr	r3, [pc, #24]	@ (8015c4c <prvSwitchTimerLists+0xc8>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	4a04      	ldr	r2, [pc, #16]	@ (8015c48 <prvSwitchTimerLists+0xc4>)
 8015c36:	6013      	str	r3, [r2, #0]
 8015c38:	4a04      	ldr	r2, [pc, #16]	@ (8015c4c <prvSwitchTimerLists+0xc8>)
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	6013      	str	r3, [r2, #0]
 8015c3e:	bf00      	nop
 8015c40:	3718      	adds	r7, #24
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	200012b8 	.word	0x200012b8
 8015c4c:	200012bc 	.word	0x200012bc

08015c50 <prvCheckForValidListAndQueue>:
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af02      	add	r7, sp, #8
 8015c56:	f000 f96f 	bl	8015f38 <vPortEnterCritical>
 8015c5a:	4b15      	ldr	r3, [pc, #84]	@ (8015cb0 <prvCheckForValidListAndQueue+0x60>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d120      	bne.n	8015ca4 <prvCheckForValidListAndQueue+0x54>
 8015c62:	4814      	ldr	r0, [pc, #80]	@ (8015cb4 <prvCheckForValidListAndQueue+0x64>)
 8015c64:	f7fd fa80 	bl	8013168 <vListInitialise>
 8015c68:	4813      	ldr	r0, [pc, #76]	@ (8015cb8 <prvCheckForValidListAndQueue+0x68>)
 8015c6a:	f7fd fa7d 	bl	8013168 <vListInitialise>
 8015c6e:	4b13      	ldr	r3, [pc, #76]	@ (8015cbc <prvCheckForValidListAndQueue+0x6c>)
 8015c70:	4a10      	ldr	r2, [pc, #64]	@ (8015cb4 <prvCheckForValidListAndQueue+0x64>)
 8015c72:	601a      	str	r2, [r3, #0]
 8015c74:	4b12      	ldr	r3, [pc, #72]	@ (8015cc0 <prvCheckForValidListAndQueue+0x70>)
 8015c76:	4a10      	ldr	r2, [pc, #64]	@ (8015cb8 <prvCheckForValidListAndQueue+0x68>)
 8015c78:	601a      	str	r2, [r3, #0]
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	9300      	str	r3, [sp, #0]
 8015c7e:	4b11      	ldr	r3, [pc, #68]	@ (8015cc4 <prvCheckForValidListAndQueue+0x74>)
 8015c80:	4a11      	ldr	r2, [pc, #68]	@ (8015cc8 <prvCheckForValidListAndQueue+0x78>)
 8015c82:	2110      	movs	r1, #16
 8015c84:	200a      	movs	r0, #10
 8015c86:	f7fd fb8d 	bl	80133a4 <xQueueGenericCreateStatic>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	4a08      	ldr	r2, [pc, #32]	@ (8015cb0 <prvCheckForValidListAndQueue+0x60>)
 8015c8e:	6013      	str	r3, [r2, #0]
 8015c90:	4b07      	ldr	r3, [pc, #28]	@ (8015cb0 <prvCheckForValidListAndQueue+0x60>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d005      	beq.n	8015ca4 <prvCheckForValidListAndQueue+0x54>
 8015c98:	4b05      	ldr	r3, [pc, #20]	@ (8015cb0 <prvCheckForValidListAndQueue+0x60>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	490b      	ldr	r1, [pc, #44]	@ (8015ccc <prvCheckForValidListAndQueue+0x7c>)
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7fe f9ce 	bl	8014040 <vQueueAddToRegistry>
 8015ca4:	f000 f97a 	bl	8015f9c <vPortExitCritical>
 8015ca8:	bf00      	nop
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	200012c0 	.word	0x200012c0
 8015cb4:	20001290 	.word	0x20001290
 8015cb8:	200012a4 	.word	0x200012a4
 8015cbc:	200012b8 	.word	0x200012b8
 8015cc0:	200012bc 	.word	0x200012bc
 8015cc4:	2000136c 	.word	0x2000136c
 8015cc8:	200012cc 	.word	0x200012cc
 8015ccc:	0801a208 	.word	0x0801a208

08015cd0 <pxPortInitialiseStack>:
 8015cd0:	b480      	push	{r7}
 8015cd2:	b085      	sub	sp, #20
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	607a      	str	r2, [r7, #4]
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	3b04      	subs	r3, #4
 8015ce0:	60fb      	str	r3, [r7, #12]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015ce8:	601a      	str	r2, [r3, #0]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	3b04      	subs	r3, #4
 8015cee:	60fb      	str	r3, [r7, #12]
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	f023 0201 	bic.w	r2, r3, #1
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	601a      	str	r2, [r3, #0]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	3b04      	subs	r3, #4
 8015cfe:	60fb      	str	r3, [r7, #12]
 8015d00:	4a0c      	ldr	r2, [pc, #48]	@ (8015d34 <pxPortInitialiseStack+0x64>)
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	3b14      	subs	r3, #20
 8015d0a:	60fb      	str	r3, [r7, #12]
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	601a      	str	r2, [r3, #0]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	3b04      	subs	r3, #4
 8015d16:	60fb      	str	r3, [r7, #12]
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	f06f 0202 	mvn.w	r2, #2
 8015d1e:	601a      	str	r2, [r3, #0]
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	3b20      	subs	r3, #32
 8015d24:	60fb      	str	r3, [r7, #12]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3714      	adds	r7, #20
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr
 8015d34:	08015d39 	.word	0x08015d39

08015d38 <prvTaskExitError>:
 8015d38:	b480      	push	{r7}
 8015d3a:	b085      	sub	sp, #20
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	2300      	movs	r3, #0
 8015d40:	607b      	str	r3, [r7, #4]
 8015d42:	4b13      	ldr	r3, [pc, #76]	@ (8015d90 <prvTaskExitError+0x58>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d4a:	d00b      	beq.n	8015d64 <prvTaskExitError+0x2c>
 8015d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d50:	f383 8811 	msr	BASEPRI, r3
 8015d54:	f3bf 8f6f 	isb	sy
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	60fb      	str	r3, [r7, #12]
 8015d5e:	bf00      	nop
 8015d60:	bf00      	nop
 8015d62:	e7fd      	b.n	8015d60 <prvTaskExitError+0x28>
 8015d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	60bb      	str	r3, [r7, #8]
 8015d76:	bf00      	nop
 8015d78:	bf00      	nop
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d0fc      	beq.n	8015d7a <prvTaskExitError+0x42>
 8015d80:	bf00      	nop
 8015d82:	bf00      	nop
 8015d84:	3714      	adds	r7, #20
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop
 8015d90:	200000b8 	.word	0x200000b8
	...

08015da0 <SVC_Handler>:
 8015da0:	4b07      	ldr	r3, [pc, #28]	@ (8015dc0 <pxCurrentTCBConst2>)
 8015da2:	6819      	ldr	r1, [r3, #0]
 8015da4:	6808      	ldr	r0, [r1, #0]
 8015da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015daa:	f380 8809 	msr	PSP, r0
 8015dae:	f3bf 8f6f 	isb	sy
 8015db2:	f04f 0000 	mov.w	r0, #0
 8015db6:	f380 8811 	msr	BASEPRI, r0
 8015dba:	4770      	bx	lr
 8015dbc:	f3af 8000 	nop.w

08015dc0 <pxCurrentTCBConst2>:
 8015dc0:	20000d90 	.word	0x20000d90
 8015dc4:	bf00      	nop
 8015dc6:	bf00      	nop

08015dc8 <prvPortStartFirstTask>:
 8015dc8:	4808      	ldr	r0, [pc, #32]	@ (8015dec <prvPortStartFirstTask+0x24>)
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	6800      	ldr	r0, [r0, #0]
 8015dce:	f380 8808 	msr	MSP, r0
 8015dd2:	f04f 0000 	mov.w	r0, #0
 8015dd6:	f380 8814 	msr	CONTROL, r0
 8015dda:	b662      	cpsie	i
 8015ddc:	b661      	cpsie	f
 8015dde:	f3bf 8f4f 	dsb	sy
 8015de2:	f3bf 8f6f 	isb	sy
 8015de6:	df00      	svc	0
 8015de8:	bf00      	nop
 8015dea:	bf00      	nop
 8015dec:	e000ed08 	.word	0xe000ed08

08015df0 <xPortStartScheduler>:
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b086      	sub	sp, #24
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	4b47      	ldr	r3, [pc, #284]	@ (8015f14 <xPortStartScheduler+0x124>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	4a47      	ldr	r2, [pc, #284]	@ (8015f18 <xPortStartScheduler+0x128>)
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d10b      	bne.n	8015e18 <xPortStartScheduler+0x28>
 8015e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e04:	f383 8811 	msr	BASEPRI, r3
 8015e08:	f3bf 8f6f 	isb	sy
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	60fb      	str	r3, [r7, #12]
 8015e12:	bf00      	nop
 8015e14:	bf00      	nop
 8015e16:	e7fd      	b.n	8015e14 <xPortStartScheduler+0x24>
 8015e18:	4b3e      	ldr	r3, [pc, #248]	@ (8015f14 <xPortStartScheduler+0x124>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8015f1c <xPortStartScheduler+0x12c>)
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d10b      	bne.n	8015e3a <xPortStartScheduler+0x4a>
 8015e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	613b      	str	r3, [r7, #16]
 8015e34:	bf00      	nop
 8015e36:	bf00      	nop
 8015e38:	e7fd      	b.n	8015e36 <xPortStartScheduler+0x46>
 8015e3a:	4b39      	ldr	r3, [pc, #228]	@ (8015f20 <xPortStartScheduler+0x130>)
 8015e3c:	617b      	str	r3, [r7, #20]
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	607b      	str	r3, [r7, #4]
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	22ff      	movs	r2, #255	@ 0xff
 8015e4a:	701a      	strb	r2, [r3, #0]
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	70fb      	strb	r3, [r7, #3]
 8015e54:	78fb      	ldrb	r3, [r7, #3]
 8015e56:	b2db      	uxtb	r3, r3
 8015e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	4b31      	ldr	r3, [pc, #196]	@ (8015f24 <xPortStartScheduler+0x134>)
 8015e60:	701a      	strb	r2, [r3, #0]
 8015e62:	4b31      	ldr	r3, [pc, #196]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e64:	2207      	movs	r2, #7
 8015e66:	601a      	str	r2, [r3, #0]
 8015e68:	e009      	b.n	8015e7e <xPortStartScheduler+0x8e>
 8015e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	3b01      	subs	r3, #1
 8015e70:	4a2d      	ldr	r2, [pc, #180]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e72:	6013      	str	r3, [r2, #0]
 8015e74:	78fb      	ldrb	r3, [r7, #3]
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	70fb      	strb	r3, [r7, #3]
 8015e7e:	78fb      	ldrb	r3, [r7, #3]
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015e86:	2b80      	cmp	r3, #128	@ 0x80
 8015e88:	d0ef      	beq.n	8015e6a <xPortStartScheduler+0x7a>
 8015e8a:	4b27      	ldr	r3, [pc, #156]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	f1c3 0307 	rsb	r3, r3, #7
 8015e92:	2b04      	cmp	r3, #4
 8015e94:	d00b      	beq.n	8015eae <xPortStartScheduler+0xbe>
 8015e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e9a:	f383 8811 	msr	BASEPRI, r3
 8015e9e:	f3bf 8f6f 	isb	sy
 8015ea2:	f3bf 8f4f 	dsb	sy
 8015ea6:	60bb      	str	r3, [r7, #8]
 8015ea8:	bf00      	nop
 8015eaa:	bf00      	nop
 8015eac:	e7fd      	b.n	8015eaa <xPortStartScheduler+0xba>
 8015eae:	4b1e      	ldr	r3, [pc, #120]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	021b      	lsls	r3, r3, #8
 8015eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015eb6:	6013      	str	r3, [r2, #0]
 8015eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015ec0:	4a19      	ldr	r2, [pc, #100]	@ (8015f28 <xPortStartScheduler+0x138>)
 8015ec2:	6013      	str	r3, [r2, #0]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	701a      	strb	r2, [r3, #0]
 8015ecc:	4b17      	ldr	r3, [pc, #92]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4a16      	ldr	r2, [pc, #88]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015ed6:	6013      	str	r3, [r2, #0]
 8015ed8:	4b14      	ldr	r3, [pc, #80]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4a13      	ldr	r2, [pc, #76]	@ (8015f2c <xPortStartScheduler+0x13c>)
 8015ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015ee2:	6013      	str	r3, [r2, #0]
 8015ee4:	f000 f8da 	bl	801609c <vPortSetupTimerInterrupt>
 8015ee8:	4b11      	ldr	r3, [pc, #68]	@ (8015f30 <xPortStartScheduler+0x140>)
 8015eea:	2200      	movs	r2, #0
 8015eec:	601a      	str	r2, [r3, #0]
 8015eee:	f000 f8f9 	bl	80160e4 <vPortEnableVFP>
 8015ef2:	4b10      	ldr	r3, [pc, #64]	@ (8015f34 <xPortStartScheduler+0x144>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8015f34 <xPortStartScheduler+0x144>)
 8015ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015efc:	6013      	str	r3, [r2, #0]
 8015efe:	f7ff ff63 	bl	8015dc8 <prvPortStartFirstTask>
 8015f02:	f7fe fd13 	bl	801492c <vTaskSwitchContext>
 8015f06:	f7ff ff17 	bl	8015d38 <prvTaskExitError>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3718      	adds	r7, #24
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}
 8015f14:	e000ed00 	.word	0xe000ed00
 8015f18:	410fc271 	.word	0x410fc271
 8015f1c:	410fc270 	.word	0x410fc270
 8015f20:	e000e400 	.word	0xe000e400
 8015f24:	200013bc 	.word	0x200013bc
 8015f28:	200013c0 	.word	0x200013c0
 8015f2c:	e000ed20 	.word	0xe000ed20
 8015f30:	200000b8 	.word	0x200000b8
 8015f34:	e000ef34 	.word	0xe000ef34

08015f38 <vPortEnterCritical>:
 8015f38:	b480      	push	{r7}
 8015f3a:	b083      	sub	sp, #12
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f42:	f383 8811 	msr	BASEPRI, r3
 8015f46:	f3bf 8f6f 	isb	sy
 8015f4a:	f3bf 8f4f 	dsb	sy
 8015f4e:	607b      	str	r3, [r7, #4]
 8015f50:	bf00      	nop
 8015f52:	4b10      	ldr	r3, [pc, #64]	@ (8015f94 <vPortEnterCritical+0x5c>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	3301      	adds	r3, #1
 8015f58:	4a0e      	ldr	r2, [pc, #56]	@ (8015f94 <vPortEnterCritical+0x5c>)
 8015f5a:	6013      	str	r3, [r2, #0]
 8015f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8015f94 <vPortEnterCritical+0x5c>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b01      	cmp	r3, #1
 8015f62:	d110      	bne.n	8015f86 <vPortEnterCritical+0x4e>
 8015f64:	4b0c      	ldr	r3, [pc, #48]	@ (8015f98 <vPortEnterCritical+0x60>)
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d00b      	beq.n	8015f86 <vPortEnterCritical+0x4e>
 8015f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f72:	f383 8811 	msr	BASEPRI, r3
 8015f76:	f3bf 8f6f 	isb	sy
 8015f7a:	f3bf 8f4f 	dsb	sy
 8015f7e:	603b      	str	r3, [r7, #0]
 8015f80:	bf00      	nop
 8015f82:	bf00      	nop
 8015f84:	e7fd      	b.n	8015f82 <vPortEnterCritical+0x4a>
 8015f86:	bf00      	nop
 8015f88:	370c      	adds	r7, #12
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f90:	4770      	bx	lr
 8015f92:	bf00      	nop
 8015f94:	200000b8 	.word	0x200000b8
 8015f98:	e000ed04 	.word	0xe000ed04

08015f9c <vPortExitCritical>:
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	4b12      	ldr	r3, [pc, #72]	@ (8015fec <vPortExitCritical+0x50>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d10b      	bne.n	8015fc2 <vPortExitCritical+0x26>
 8015faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fae:	f383 8811 	msr	BASEPRI, r3
 8015fb2:	f3bf 8f6f 	isb	sy
 8015fb6:	f3bf 8f4f 	dsb	sy
 8015fba:	607b      	str	r3, [r7, #4]
 8015fbc:	bf00      	nop
 8015fbe:	bf00      	nop
 8015fc0:	e7fd      	b.n	8015fbe <vPortExitCritical+0x22>
 8015fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8015fec <vPortExitCritical+0x50>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	3b01      	subs	r3, #1
 8015fc8:	4a08      	ldr	r2, [pc, #32]	@ (8015fec <vPortExitCritical+0x50>)
 8015fca:	6013      	str	r3, [r2, #0]
 8015fcc:	4b07      	ldr	r3, [pc, #28]	@ (8015fec <vPortExitCritical+0x50>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d105      	bne.n	8015fe0 <vPortExitCritical+0x44>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	603b      	str	r3, [r7, #0]
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	f383 8811 	msr	BASEPRI, r3
 8015fde:	bf00      	nop
 8015fe0:	bf00      	nop
 8015fe2:	370c      	adds	r7, #12
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr
 8015fec:	200000b8 	.word	0x200000b8

08015ff0 <PendSV_Handler>:
 8015ff0:	f3ef 8009 	mrs	r0, PSP
 8015ff4:	f3bf 8f6f 	isb	sy
 8015ff8:	4b15      	ldr	r3, [pc, #84]	@ (8016050 <pxCurrentTCBConst>)
 8015ffa:	681a      	ldr	r2, [r3, #0]
 8015ffc:	f01e 0f10 	tst.w	lr, #16
 8016000:	bf08      	it	eq
 8016002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801600a:	6010      	str	r0, [r2, #0]
 801600c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016014:	f380 8811 	msr	BASEPRI, r0
 8016018:	f3bf 8f4f 	dsb	sy
 801601c:	f3bf 8f6f 	isb	sy
 8016020:	f7fe fc84 	bl	801492c <vTaskSwitchContext>
 8016024:	f04f 0000 	mov.w	r0, #0
 8016028:	f380 8811 	msr	BASEPRI, r0
 801602c:	bc09      	pop	{r0, r3}
 801602e:	6819      	ldr	r1, [r3, #0]
 8016030:	6808      	ldr	r0, [r1, #0]
 8016032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016036:	f01e 0f10 	tst.w	lr, #16
 801603a:	bf08      	it	eq
 801603c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016040:	f380 8809 	msr	PSP, r0
 8016044:	f3bf 8f6f 	isb	sy
 8016048:	4770      	bx	lr
 801604a:	bf00      	nop
 801604c:	f3af 8000 	nop.w

08016050 <pxCurrentTCBConst>:
 8016050:	20000d90 	.word	0x20000d90
 8016054:	bf00      	nop
 8016056:	bf00      	nop

08016058 <xPortSysTickHandler>:
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016062:	f383 8811 	msr	BASEPRI, r3
 8016066:	f3bf 8f6f 	isb	sy
 801606a:	f3bf 8f4f 	dsb	sy
 801606e:	607b      	str	r3, [r7, #4]
 8016070:	bf00      	nop
 8016072:	f7fe fba1 	bl	80147b8 <xTaskIncrementTick>
 8016076:	4603      	mov	r3, r0
 8016078:	2b00      	cmp	r3, #0
 801607a:	d003      	beq.n	8016084 <xPortSysTickHandler+0x2c>
 801607c:	4b06      	ldr	r3, [pc, #24]	@ (8016098 <xPortSysTickHandler+0x40>)
 801607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016082:	601a      	str	r2, [r3, #0]
 8016084:	2300      	movs	r3, #0
 8016086:	603b      	str	r3, [r7, #0]
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	f383 8811 	msr	BASEPRI, r3
 801608e:	bf00      	nop
 8016090:	bf00      	nop
 8016092:	3708      	adds	r7, #8
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	e000ed04 	.word	0xe000ed04

0801609c <vPortSetupTimerInterrupt>:
 801609c:	b480      	push	{r7}
 801609e:	af00      	add	r7, sp, #0
 80160a0:	4b0b      	ldr	r3, [pc, #44]	@ (80160d0 <vPortSetupTimerInterrupt+0x34>)
 80160a2:	2200      	movs	r2, #0
 80160a4:	601a      	str	r2, [r3, #0]
 80160a6:	4b0b      	ldr	r3, [pc, #44]	@ (80160d4 <vPortSetupTimerInterrupt+0x38>)
 80160a8:	2200      	movs	r2, #0
 80160aa:	601a      	str	r2, [r3, #0]
 80160ac:	4b0a      	ldr	r3, [pc, #40]	@ (80160d8 <vPortSetupTimerInterrupt+0x3c>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	4a0a      	ldr	r2, [pc, #40]	@ (80160dc <vPortSetupTimerInterrupt+0x40>)
 80160b2:	fba2 2303 	umull	r2, r3, r2, r3
 80160b6:	0a1b      	lsrs	r3, r3, #8
 80160b8:	4a09      	ldr	r2, [pc, #36]	@ (80160e0 <vPortSetupTimerInterrupt+0x44>)
 80160ba:	3b01      	subs	r3, #1
 80160bc:	6013      	str	r3, [r2, #0]
 80160be:	4b04      	ldr	r3, [pc, #16]	@ (80160d0 <vPortSetupTimerInterrupt+0x34>)
 80160c0:	2207      	movs	r2, #7
 80160c2:	601a      	str	r2, [r3, #0]
 80160c4:	bf00      	nop
 80160c6:	46bd      	mov	sp, r7
 80160c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160cc:	4770      	bx	lr
 80160ce:	bf00      	nop
 80160d0:	e000e010 	.word	0xe000e010
 80160d4:	e000e018 	.word	0xe000e018
 80160d8:	20000020 	.word	0x20000020
 80160dc:	51eb851f 	.word	0x51eb851f
 80160e0:	e000e014 	.word	0xe000e014

080160e4 <vPortEnableVFP>:
 80160e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80160f4 <vPortEnableVFP+0x10>
 80160e8:	6801      	ldr	r1, [r0, #0]
 80160ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80160ee:	6001      	str	r1, [r0, #0]
 80160f0:	4770      	bx	lr
 80160f2:	bf00      	nop
 80160f4:	e000ed88 	.word	0xe000ed88

080160f8 <vPortValidateInterruptPriority>:
 80160f8:	b480      	push	{r7}
 80160fa:	b085      	sub	sp, #20
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	f3ef 8305 	mrs	r3, IPSR
 8016102:	60fb      	str	r3, [r7, #12]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2b0f      	cmp	r3, #15
 8016108:	d915      	bls.n	8016136 <vPortValidateInterruptPriority+0x3e>
 801610a:	4a18      	ldr	r2, [pc, #96]	@ (801616c <vPortValidateInterruptPriority+0x74>)
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	4413      	add	r3, r2
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	72fb      	strb	r3, [r7, #11]
 8016114:	4b16      	ldr	r3, [pc, #88]	@ (8016170 <vPortValidateInterruptPriority+0x78>)
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	7afa      	ldrb	r2, [r7, #11]
 801611a:	429a      	cmp	r2, r3
 801611c:	d20b      	bcs.n	8016136 <vPortValidateInterruptPriority+0x3e>
 801611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016122:	f383 8811 	msr	BASEPRI, r3
 8016126:	f3bf 8f6f 	isb	sy
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	607b      	str	r3, [r7, #4]
 8016130:	bf00      	nop
 8016132:	bf00      	nop
 8016134:	e7fd      	b.n	8016132 <vPortValidateInterruptPriority+0x3a>
 8016136:	4b0f      	ldr	r3, [pc, #60]	@ (8016174 <vPortValidateInterruptPriority+0x7c>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801613e:	4b0e      	ldr	r3, [pc, #56]	@ (8016178 <vPortValidateInterruptPriority+0x80>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	429a      	cmp	r2, r3
 8016144:	d90b      	bls.n	801615e <vPortValidateInterruptPriority+0x66>
 8016146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801614a:	f383 8811 	msr	BASEPRI, r3
 801614e:	f3bf 8f6f 	isb	sy
 8016152:	f3bf 8f4f 	dsb	sy
 8016156:	603b      	str	r3, [r7, #0]
 8016158:	bf00      	nop
 801615a:	bf00      	nop
 801615c:	e7fd      	b.n	801615a <vPortValidateInterruptPriority+0x62>
 801615e:	bf00      	nop
 8016160:	3714      	adds	r7, #20
 8016162:	46bd      	mov	sp, r7
 8016164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016168:	4770      	bx	lr
 801616a:	bf00      	nop
 801616c:	e000e3f0 	.word	0xe000e3f0
 8016170:	200013bc 	.word	0x200013bc
 8016174:	e000ed0c 	.word	0xe000ed0c
 8016178:	200013c0 	.word	0x200013c0

0801617c <pvPortMalloc>:
 801617c:	b580      	push	{r7, lr}
 801617e:	b08a      	sub	sp, #40	@ 0x28
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	2300      	movs	r3, #0
 8016186:	61fb      	str	r3, [r7, #28]
 8016188:	f7fe fa5a 	bl	8014640 <vTaskSuspendAll>
 801618c:	4b5c      	ldr	r3, [pc, #368]	@ (8016300 <pvPortMalloc+0x184>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d101      	bne.n	8016198 <pvPortMalloc+0x1c>
 8016194:	f000 f924 	bl	80163e0 <prvHeapInit>
 8016198:	4b5a      	ldr	r3, [pc, #360]	@ (8016304 <pvPortMalloc+0x188>)
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	4013      	ands	r3, r2
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	f040 8095 	bne.w	80162d0 <pvPortMalloc+0x154>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d01e      	beq.n	80161ea <pvPortMalloc+0x6e>
 80161ac:	2208      	movs	r2, #8
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	4413      	add	r3, r2
 80161b2:	607b      	str	r3, [r7, #4]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f003 0307 	and.w	r3, r3, #7
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d015      	beq.n	80161ea <pvPortMalloc+0x6e>
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f023 0307 	bic.w	r3, r3, #7
 80161c4:	3308      	adds	r3, #8
 80161c6:	607b      	str	r3, [r7, #4]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f003 0307 	and.w	r3, r3, #7
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d00b      	beq.n	80161ea <pvPortMalloc+0x6e>
 80161d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161d6:	f383 8811 	msr	BASEPRI, r3
 80161da:	f3bf 8f6f 	isb	sy
 80161de:	f3bf 8f4f 	dsb	sy
 80161e2:	617b      	str	r3, [r7, #20]
 80161e4:	bf00      	nop
 80161e6:	bf00      	nop
 80161e8:	e7fd      	b.n	80161e6 <pvPortMalloc+0x6a>
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d06f      	beq.n	80162d0 <pvPortMalloc+0x154>
 80161f0:	4b45      	ldr	r3, [pc, #276]	@ (8016308 <pvPortMalloc+0x18c>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d86a      	bhi.n	80162d0 <pvPortMalloc+0x154>
 80161fa:	4b44      	ldr	r3, [pc, #272]	@ (801630c <pvPortMalloc+0x190>)
 80161fc:	623b      	str	r3, [r7, #32]
 80161fe:	4b43      	ldr	r3, [pc, #268]	@ (801630c <pvPortMalloc+0x190>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	627b      	str	r3, [r7, #36]	@ 0x24
 8016204:	e004      	b.n	8016210 <pvPortMalloc+0x94>
 8016206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016208:	623b      	str	r3, [r7, #32]
 801620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016212:	685b      	ldr	r3, [r3, #4]
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	429a      	cmp	r2, r3
 8016218:	d903      	bls.n	8016222 <pvPortMalloc+0xa6>
 801621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d1f1      	bne.n	8016206 <pvPortMalloc+0x8a>
 8016222:	4b37      	ldr	r3, [pc, #220]	@ (8016300 <pvPortMalloc+0x184>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016228:	429a      	cmp	r2, r3
 801622a:	d051      	beq.n	80162d0 <pvPortMalloc+0x154>
 801622c:	6a3b      	ldr	r3, [r7, #32]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2208      	movs	r2, #8
 8016232:	4413      	add	r3, r2
 8016234:	61fb      	str	r3, [r7, #28]
 8016236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016238:	681a      	ldr	r2, [r3, #0]
 801623a:	6a3b      	ldr	r3, [r7, #32]
 801623c:	601a      	str	r2, [r3, #0]
 801623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016240:	685a      	ldr	r2, [r3, #4]
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	1ad2      	subs	r2, r2, r3
 8016246:	2308      	movs	r3, #8
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	429a      	cmp	r2, r3
 801624c:	d920      	bls.n	8016290 <pvPortMalloc+0x114>
 801624e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	4413      	add	r3, r2
 8016254:	61bb      	str	r3, [r7, #24]
 8016256:	69bb      	ldr	r3, [r7, #24]
 8016258:	f003 0307 	and.w	r3, r3, #7
 801625c:	2b00      	cmp	r3, #0
 801625e:	d00b      	beq.n	8016278 <pvPortMalloc+0xfc>
 8016260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016264:	f383 8811 	msr	BASEPRI, r3
 8016268:	f3bf 8f6f 	isb	sy
 801626c:	f3bf 8f4f 	dsb	sy
 8016270:	613b      	str	r3, [r7, #16]
 8016272:	bf00      	nop
 8016274:	bf00      	nop
 8016276:	e7fd      	b.n	8016274 <pvPortMalloc+0xf8>
 8016278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801627a:	685a      	ldr	r2, [r3, #4]
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	1ad2      	subs	r2, r2, r3
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	605a      	str	r2, [r3, #4]
 8016284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	605a      	str	r2, [r3, #4]
 801628a:	69b8      	ldr	r0, [r7, #24]
 801628c:	f000 f90a 	bl	80164a4 <prvInsertBlockIntoFreeList>
 8016290:	4b1d      	ldr	r3, [pc, #116]	@ (8016308 <pvPortMalloc+0x18c>)
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	1ad3      	subs	r3, r2, r3
 801629a:	4a1b      	ldr	r2, [pc, #108]	@ (8016308 <pvPortMalloc+0x18c>)
 801629c:	6013      	str	r3, [r2, #0]
 801629e:	4b1a      	ldr	r3, [pc, #104]	@ (8016308 <pvPortMalloc+0x18c>)
 80162a0:	681a      	ldr	r2, [r3, #0]
 80162a2:	4b1b      	ldr	r3, [pc, #108]	@ (8016310 <pvPortMalloc+0x194>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d203      	bcs.n	80162b2 <pvPortMalloc+0x136>
 80162aa:	4b17      	ldr	r3, [pc, #92]	@ (8016308 <pvPortMalloc+0x18c>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	4a18      	ldr	r2, [pc, #96]	@ (8016310 <pvPortMalloc+0x194>)
 80162b0:	6013      	str	r3, [r2, #0]
 80162b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b4:	685a      	ldr	r2, [r3, #4]
 80162b6:	4b13      	ldr	r3, [pc, #76]	@ (8016304 <pvPortMalloc+0x188>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	431a      	orrs	r2, r3
 80162bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162be:	605a      	str	r2, [r3, #4]
 80162c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c2:	2200      	movs	r2, #0
 80162c4:	601a      	str	r2, [r3, #0]
 80162c6:	4b13      	ldr	r3, [pc, #76]	@ (8016314 <pvPortMalloc+0x198>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	3301      	adds	r3, #1
 80162cc:	4a11      	ldr	r2, [pc, #68]	@ (8016314 <pvPortMalloc+0x198>)
 80162ce:	6013      	str	r3, [r2, #0]
 80162d0:	f7fe f9c4 	bl	801465c <xTaskResumeAll>
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	f003 0307 	and.w	r3, r3, #7
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d00b      	beq.n	80162f6 <pvPortMalloc+0x17a>
 80162de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162e2:	f383 8811 	msr	BASEPRI, r3
 80162e6:	f3bf 8f6f 	isb	sy
 80162ea:	f3bf 8f4f 	dsb	sy
 80162ee:	60fb      	str	r3, [r7, #12]
 80162f0:	bf00      	nop
 80162f2:	bf00      	nop
 80162f4:	e7fd      	b.n	80162f2 <pvPortMalloc+0x176>
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	4618      	mov	r0, r3
 80162fa:	3728      	adds	r7, #40	@ 0x28
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	200093cc 	.word	0x200093cc
 8016304:	200093e0 	.word	0x200093e0
 8016308:	200093d0 	.word	0x200093d0
 801630c:	200093c4 	.word	0x200093c4
 8016310:	200093d4 	.word	0x200093d4
 8016314:	200093d8 	.word	0x200093d8

08016318 <vPortFree>:
 8016318:	b580      	push	{r7, lr}
 801631a:	b086      	sub	sp, #24
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	617b      	str	r3, [r7, #20]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d04f      	beq.n	80163ca <vPortFree+0xb2>
 801632a:	2308      	movs	r3, #8
 801632c:	425b      	negs	r3, r3
 801632e:	697a      	ldr	r2, [r7, #20]
 8016330:	4413      	add	r3, r2
 8016332:	617b      	str	r3, [r7, #20]
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	613b      	str	r3, [r7, #16]
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	685a      	ldr	r2, [r3, #4]
 801633c:	4b25      	ldr	r3, [pc, #148]	@ (80163d4 <vPortFree+0xbc>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4013      	ands	r3, r2
 8016342:	2b00      	cmp	r3, #0
 8016344:	d10b      	bne.n	801635e <vPortFree+0x46>
 8016346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801634a:	f383 8811 	msr	BASEPRI, r3
 801634e:	f3bf 8f6f 	isb	sy
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	60fb      	str	r3, [r7, #12]
 8016358:	bf00      	nop
 801635a:	bf00      	nop
 801635c:	e7fd      	b.n	801635a <vPortFree+0x42>
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d00b      	beq.n	801637e <vPortFree+0x66>
 8016366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801636a:	f383 8811 	msr	BASEPRI, r3
 801636e:	f3bf 8f6f 	isb	sy
 8016372:	f3bf 8f4f 	dsb	sy
 8016376:	60bb      	str	r3, [r7, #8]
 8016378:	bf00      	nop
 801637a:	bf00      	nop
 801637c:	e7fd      	b.n	801637a <vPortFree+0x62>
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	685a      	ldr	r2, [r3, #4]
 8016382:	4b14      	ldr	r3, [pc, #80]	@ (80163d4 <vPortFree+0xbc>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	4013      	ands	r3, r2
 8016388:	2b00      	cmp	r3, #0
 801638a:	d01e      	beq.n	80163ca <vPortFree+0xb2>
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d11a      	bne.n	80163ca <vPortFree+0xb2>
 8016394:	693b      	ldr	r3, [r7, #16]
 8016396:	685a      	ldr	r2, [r3, #4]
 8016398:	4b0e      	ldr	r3, [pc, #56]	@ (80163d4 <vPortFree+0xbc>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	43db      	mvns	r3, r3
 801639e:	401a      	ands	r2, r3
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	605a      	str	r2, [r3, #4]
 80163a4:	f7fe f94c 	bl	8014640 <vTaskSuspendAll>
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	4b0a      	ldr	r3, [pc, #40]	@ (80163d8 <vPortFree+0xc0>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	4413      	add	r3, r2
 80163b2:	4a09      	ldr	r2, [pc, #36]	@ (80163d8 <vPortFree+0xc0>)
 80163b4:	6013      	str	r3, [r2, #0]
 80163b6:	6938      	ldr	r0, [r7, #16]
 80163b8:	f000 f874 	bl	80164a4 <prvInsertBlockIntoFreeList>
 80163bc:	4b07      	ldr	r3, [pc, #28]	@ (80163dc <vPortFree+0xc4>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	3301      	adds	r3, #1
 80163c2:	4a06      	ldr	r2, [pc, #24]	@ (80163dc <vPortFree+0xc4>)
 80163c4:	6013      	str	r3, [r2, #0]
 80163c6:	f7fe f949 	bl	801465c <xTaskResumeAll>
 80163ca:	bf00      	nop
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	200093e0 	.word	0x200093e0
 80163d8:	200093d0 	.word	0x200093d0
 80163dc:	200093dc 	.word	0x200093dc

080163e0 <prvHeapInit>:
 80163e0:	b480      	push	{r7}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80163ea:	60bb      	str	r3, [r7, #8]
 80163ec:	4b27      	ldr	r3, [pc, #156]	@ (801648c <prvHeapInit+0xac>)
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f003 0307 	and.w	r3, r3, #7
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00c      	beq.n	8016414 <prvHeapInit+0x34>
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	3307      	adds	r3, #7
 80163fe:	60fb      	str	r3, [r7, #12]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f023 0307 	bic.w	r3, r3, #7
 8016406:	60fb      	str	r3, [r7, #12]
 8016408:	68ba      	ldr	r2, [r7, #8]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	1ad3      	subs	r3, r2, r3
 801640e:	4a1f      	ldr	r2, [pc, #124]	@ (801648c <prvHeapInit+0xac>)
 8016410:	4413      	add	r3, r2
 8016412:	60bb      	str	r3, [r7, #8]
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	607b      	str	r3, [r7, #4]
 8016418:	4a1d      	ldr	r2, [pc, #116]	@ (8016490 <prvHeapInit+0xb0>)
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6013      	str	r3, [r2, #0]
 801641e:	4b1c      	ldr	r3, [pc, #112]	@ (8016490 <prvHeapInit+0xb0>)
 8016420:	2200      	movs	r2, #0
 8016422:	605a      	str	r2, [r3, #4]
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	4413      	add	r3, r2
 801642a:	60fb      	str	r3, [r7, #12]
 801642c:	2208      	movs	r2, #8
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	1a9b      	subs	r3, r3, r2
 8016432:	60fb      	str	r3, [r7, #12]
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	f023 0307 	bic.w	r3, r3, #7
 801643a:	60fb      	str	r3, [r7, #12]
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	4a15      	ldr	r2, [pc, #84]	@ (8016494 <prvHeapInit+0xb4>)
 8016440:	6013      	str	r3, [r2, #0]
 8016442:	4b14      	ldr	r3, [pc, #80]	@ (8016494 <prvHeapInit+0xb4>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	2200      	movs	r2, #0
 8016448:	605a      	str	r2, [r3, #4]
 801644a:	4b12      	ldr	r3, [pc, #72]	@ (8016494 <prvHeapInit+0xb4>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	2200      	movs	r2, #0
 8016450:	601a      	str	r2, [r3, #0]
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	603b      	str	r3, [r7, #0]
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	68fa      	ldr	r2, [r7, #12]
 801645a:	1ad2      	subs	r2, r2, r3
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	605a      	str	r2, [r3, #4]
 8016460:	4b0c      	ldr	r3, [pc, #48]	@ (8016494 <prvHeapInit+0xb4>)
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	601a      	str	r2, [r3, #0]
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	4a0a      	ldr	r2, [pc, #40]	@ (8016498 <prvHeapInit+0xb8>)
 801646e:	6013      	str	r3, [r2, #0]
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	4a09      	ldr	r2, [pc, #36]	@ (801649c <prvHeapInit+0xbc>)
 8016476:	6013      	str	r3, [r2, #0]
 8016478:	4b09      	ldr	r3, [pc, #36]	@ (80164a0 <prvHeapInit+0xc0>)
 801647a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801647e:	601a      	str	r2, [r3, #0]
 8016480:	bf00      	nop
 8016482:	3714      	adds	r7, #20
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr
 801648c:	200013c4 	.word	0x200013c4
 8016490:	200093c4 	.word	0x200093c4
 8016494:	200093cc 	.word	0x200093cc
 8016498:	200093d4 	.word	0x200093d4
 801649c:	200093d0 	.word	0x200093d0
 80164a0:	200093e0 	.word	0x200093e0

080164a4 <prvInsertBlockIntoFreeList>:
 80164a4:	b480      	push	{r7}
 80164a6:	b085      	sub	sp, #20
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	4b28      	ldr	r3, [pc, #160]	@ (8016550 <prvInsertBlockIntoFreeList+0xac>)
 80164ae:	60fb      	str	r3, [r7, #12]
 80164b0:	e002      	b.n	80164b8 <prvInsertBlockIntoFreeList+0x14>
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	60fb      	str	r3, [r7, #12]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d8f7      	bhi.n	80164b2 <prvInsertBlockIntoFreeList+0xe>
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	60bb      	str	r3, [r7, #8]
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	68ba      	ldr	r2, [r7, #8]
 80164cc:	4413      	add	r3, r2
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d108      	bne.n	80164e6 <prvInsertBlockIntoFreeList+0x42>
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	685a      	ldr	r2, [r3, #4]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	441a      	add	r2, r3
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	605a      	str	r2, [r3, #4]
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	607b      	str	r3, [r7, #4]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	60bb      	str	r3, [r7, #8]
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	68ba      	ldr	r2, [r7, #8]
 80164f0:	441a      	add	r2, r3
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	429a      	cmp	r2, r3
 80164f8:	d118      	bne.n	801652c <prvInsertBlockIntoFreeList+0x88>
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	681a      	ldr	r2, [r3, #0]
 80164fe:	4b15      	ldr	r3, [pc, #84]	@ (8016554 <prvInsertBlockIntoFreeList+0xb0>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	429a      	cmp	r2, r3
 8016504:	d00d      	beq.n	8016522 <prvInsertBlockIntoFreeList+0x7e>
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	685a      	ldr	r2, [r3, #4]
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	441a      	add	r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	605a      	str	r2, [r3, #4]
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	601a      	str	r2, [r3, #0]
 8016520:	e008      	b.n	8016534 <prvInsertBlockIntoFreeList+0x90>
 8016522:	4b0c      	ldr	r3, [pc, #48]	@ (8016554 <prvInsertBlockIntoFreeList+0xb0>)
 8016524:	681a      	ldr	r2, [r3, #0]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	601a      	str	r2, [r3, #0]
 801652a:	e003      	b.n	8016534 <prvInsertBlockIntoFreeList+0x90>
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681a      	ldr	r2, [r3, #0]
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	601a      	str	r2, [r3, #0]
 8016534:	68fa      	ldr	r2, [r7, #12]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	429a      	cmp	r2, r3
 801653a:	d002      	beq.n	8016542 <prvInsertBlockIntoFreeList+0x9e>
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	601a      	str	r2, [r3, #0]
 8016542:	bf00      	nop
 8016544:	3714      	adds	r7, #20
 8016546:	46bd      	mov	sp, r7
 8016548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654c:	4770      	bx	lr
 801654e:	bf00      	nop
 8016550:	200093c4 	.word	0x200093c4
 8016554:	200093cc 	.word	0x200093cc

08016558 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801655c:	2200      	movs	r2, #0
 801655e:	4912      	ldr	r1, [pc, #72]	@ (80165a8 <MX_USB_Device_Init+0x50>)
 8016560:	4812      	ldr	r0, [pc, #72]	@ (80165ac <MX_USB_Device_Init+0x54>)
 8016562:	f7fa ffbb 	bl	80114dc <USBD_Init>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	d001      	beq.n	8016570 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801656c:	f7f1 fc28 	bl	8007dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8016570:	490f      	ldr	r1, [pc, #60]	@ (80165b0 <MX_USB_Device_Init+0x58>)
 8016572:	480e      	ldr	r0, [pc, #56]	@ (80165ac <MX_USB_Device_Init+0x54>)
 8016574:	f7fa ffe2 	bl	801153c <USBD_RegisterClass>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d001      	beq.n	8016582 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801657e:	f7f1 fc1f 	bl	8007dc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8016582:	490c      	ldr	r1, [pc, #48]	@ (80165b4 <MX_USB_Device_Init+0x5c>)
 8016584:	4809      	ldr	r0, [pc, #36]	@ (80165ac <MX_USB_Device_Init+0x54>)
 8016586:	f7fa fed9 	bl	801133c <USBD_CDC_RegisterInterface>
 801658a:	4603      	mov	r3, r0
 801658c:	2b00      	cmp	r3, #0
 801658e:	d001      	beq.n	8016594 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8016590:	f7f1 fc16 	bl	8007dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8016594:	4805      	ldr	r0, [pc, #20]	@ (80165ac <MX_USB_Device_Init+0x54>)
 8016596:	f7fb f807 	bl	80115a8 <USBD_Start>
 801659a:	4603      	mov	r3, r0
 801659c:	2b00      	cmp	r3, #0
 801659e:	d001      	beq.n	80165a4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80165a0:	f7f1 fc0e 	bl	8007dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80165a4:	bf00      	nop
 80165a6:	bd80      	pop	{r7, pc}
 80165a8:	200000d0 	.word	0x200000d0
 80165ac:	200093e4 	.word	0x200093e4
 80165b0:	20000038 	.word	0x20000038
 80165b4:	200000bc 	.word	0x200000bc

080165b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80165bc:	2200      	movs	r2, #0
 80165be:	4905      	ldr	r1, [pc, #20]	@ (80165d4 <CDC_Init_FS+0x1c>)
 80165c0:	4805      	ldr	r0, [pc, #20]	@ (80165d8 <CDC_Init_FS+0x20>)
 80165c2:	f7fa fed5 	bl	8011370 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80165c6:	4905      	ldr	r1, [pc, #20]	@ (80165dc <CDC_Init_FS+0x24>)
 80165c8:	4803      	ldr	r0, [pc, #12]	@ (80165d8 <CDC_Init_FS+0x20>)
 80165ca:	f7fa fef3 	bl	80113b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80165ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	bd80      	pop	{r7, pc}
 80165d4:	20009ec0 	.word	0x20009ec0
 80165d8:	200093e4 	.word	0x200093e4
 80165dc:	200096c0 	.word	0x200096c0

080165e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80165e0:	b480      	push	{r7}
 80165e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80165e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	46bd      	mov	sp, r7
 80165ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ee:	4770      	bx	lr

080165f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	4603      	mov	r3, r0
 80165f8:	6039      	str	r1, [r7, #0]
 80165fa:	71fb      	strb	r3, [r7, #7]
 80165fc:	4613      	mov	r3, r2
 80165fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016600:	79fb      	ldrb	r3, [r7, #7]
 8016602:	2b23      	cmp	r3, #35	@ 0x23
 8016604:	d84a      	bhi.n	801669c <CDC_Control_FS+0xac>
 8016606:	a201      	add	r2, pc, #4	@ (adr r2, 801660c <CDC_Control_FS+0x1c>)
 8016608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801660c:	0801669d 	.word	0x0801669d
 8016610:	0801669d 	.word	0x0801669d
 8016614:	0801669d 	.word	0x0801669d
 8016618:	0801669d 	.word	0x0801669d
 801661c:	0801669d 	.word	0x0801669d
 8016620:	0801669d 	.word	0x0801669d
 8016624:	0801669d 	.word	0x0801669d
 8016628:	0801669d 	.word	0x0801669d
 801662c:	0801669d 	.word	0x0801669d
 8016630:	0801669d 	.word	0x0801669d
 8016634:	0801669d 	.word	0x0801669d
 8016638:	0801669d 	.word	0x0801669d
 801663c:	0801669d 	.word	0x0801669d
 8016640:	0801669d 	.word	0x0801669d
 8016644:	0801669d 	.word	0x0801669d
 8016648:	0801669d 	.word	0x0801669d
 801664c:	0801669d 	.word	0x0801669d
 8016650:	0801669d 	.word	0x0801669d
 8016654:	0801669d 	.word	0x0801669d
 8016658:	0801669d 	.word	0x0801669d
 801665c:	0801669d 	.word	0x0801669d
 8016660:	0801669d 	.word	0x0801669d
 8016664:	0801669d 	.word	0x0801669d
 8016668:	0801669d 	.word	0x0801669d
 801666c:	0801669d 	.word	0x0801669d
 8016670:	0801669d 	.word	0x0801669d
 8016674:	0801669d 	.word	0x0801669d
 8016678:	0801669d 	.word	0x0801669d
 801667c:	0801669d 	.word	0x0801669d
 8016680:	0801669d 	.word	0x0801669d
 8016684:	0801669d 	.word	0x0801669d
 8016688:	0801669d 	.word	0x0801669d
 801668c:	0801669d 	.word	0x0801669d
 8016690:	0801669d 	.word	0x0801669d
 8016694:	0801669d 	.word	0x0801669d
 8016698:	0801669d 	.word	0x0801669d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801669c:	bf00      	nop
  }

  return (USBD_OK);
 801669e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	370c      	adds	r7, #12
 80166a4:	46bd      	mov	sp, r7
 80166a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166aa:	4770      	bx	lr

080166ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80166b6:	6879      	ldr	r1, [r7, #4]
 80166b8:	4805      	ldr	r0, [pc, #20]	@ (80166d0 <CDC_Receive_FS+0x24>)
 80166ba:	f7fa fe7b 	bl	80113b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80166be:	4804      	ldr	r0, [pc, #16]	@ (80166d0 <CDC_Receive_FS+0x24>)
 80166c0:	f7fa fed6 	bl	8011470 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80166c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3708      	adds	r7, #8
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	200093e4 	.word	0x200093e4

080166d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b084      	sub	sp, #16
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	460b      	mov	r3, r1
 80166de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80166e0:	2300      	movs	r3, #0
 80166e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80166e4:	4b0d      	ldr	r3, [pc, #52]	@ (801671c <CDC_Transmit_FS+0x48>)
 80166e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80166ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d001      	beq.n	80166fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e00b      	b.n	8016712 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80166fa:	887b      	ldrh	r3, [r7, #2]
 80166fc:	461a      	mov	r2, r3
 80166fe:	6879      	ldr	r1, [r7, #4]
 8016700:	4806      	ldr	r0, [pc, #24]	@ (801671c <CDC_Transmit_FS+0x48>)
 8016702:	f7fa fe35 	bl	8011370 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016706:	4805      	ldr	r0, [pc, #20]	@ (801671c <CDC_Transmit_FS+0x48>)
 8016708:	f7fa fe72 	bl	80113f0 <USBD_CDC_TransmitPacket>
 801670c:	4603      	mov	r3, r0
 801670e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016710:	7bfb      	ldrb	r3, [r7, #15]
}
 8016712:	4618      	mov	r0, r3
 8016714:	3710      	adds	r7, #16
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}
 801671a:	bf00      	nop
 801671c:	200093e4 	.word	0x200093e4

08016720 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016720:	b480      	push	{r7}
 8016722:	b087      	sub	sp, #28
 8016724:	af00      	add	r7, sp, #0
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	60b9      	str	r1, [r7, #8]
 801672a:	4613      	mov	r3, r2
 801672c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801672e:	2300      	movs	r3, #0
 8016730:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016736:	4618      	mov	r0, r3
 8016738:	371c      	adds	r7, #28
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr
	...

08016744 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016744:	b480      	push	{r7}
 8016746:	b083      	sub	sp, #12
 8016748:	af00      	add	r7, sp, #0
 801674a:	4603      	mov	r3, r0
 801674c:	6039      	str	r1, [r7, #0]
 801674e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	2212      	movs	r2, #18
 8016754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8016756:	4b03      	ldr	r3, [pc, #12]	@ (8016764 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8016758:	4618      	mov	r0, r3
 801675a:	370c      	adds	r7, #12
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr
 8016764:	200000f0 	.word	0x200000f0

08016768 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
 801676e:	4603      	mov	r3, r0
 8016770:	6039      	str	r1, [r7, #0]
 8016772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	2204      	movs	r2, #4
 8016778:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801677a:	4b03      	ldr	r3, [pc, #12]	@ (8016788 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801677c:	4618      	mov	r0, r3
 801677e:	370c      	adds	r7, #12
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr
 8016788:	20000104 	.word	0x20000104

0801678c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	4603      	mov	r3, r0
 8016794:	6039      	str	r1, [r7, #0]
 8016796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016798:	79fb      	ldrb	r3, [r7, #7]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d105      	bne.n	80167aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	4907      	ldr	r1, [pc, #28]	@ (80167c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80167a2:	4808      	ldr	r0, [pc, #32]	@ (80167c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80167a4:	f7fc f848 	bl	8012838 <USBD_GetString>
 80167a8:	e004      	b.n	80167b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80167aa:	683a      	ldr	r2, [r7, #0]
 80167ac:	4904      	ldr	r1, [pc, #16]	@ (80167c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80167ae:	4805      	ldr	r0, [pc, #20]	@ (80167c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80167b0:	f7fc f842 	bl	8012838 <USBD_GetString>
  }
  return USBD_StrDesc;
 80167b4:	4b02      	ldr	r3, [pc, #8]	@ (80167c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3708      	adds	r7, #8
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}
 80167be:	bf00      	nop
 80167c0:	2000a6c0 	.word	0x2000a6c0
 80167c4:	0801a210 	.word	0x0801a210

080167c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	4603      	mov	r3, r0
 80167d0:	6039      	str	r1, [r7, #0]
 80167d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80167d4:	683a      	ldr	r2, [r7, #0]
 80167d6:	4904      	ldr	r1, [pc, #16]	@ (80167e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80167d8:	4804      	ldr	r0, [pc, #16]	@ (80167ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80167da:	f7fc f82d 	bl	8012838 <USBD_GetString>
  return USBD_StrDesc;
 80167de:	4b02      	ldr	r3, [pc, #8]	@ (80167e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	2000a6c0 	.word	0x2000a6c0
 80167ec:	0801a228 	.word	0x0801a228

080167f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b082      	sub	sp, #8
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	4603      	mov	r3, r0
 80167f8:	6039      	str	r1, [r7, #0]
 80167fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	221a      	movs	r2, #26
 8016800:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016802:	f000 f843 	bl	801688c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016806:	4b02      	ldr	r3, [pc, #8]	@ (8016810 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8016808:	4618      	mov	r0, r3
 801680a:	3708      	adds	r7, #8
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}
 8016810:	20000108 	.word	0x20000108

08016814 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	4603      	mov	r3, r0
 801681c:	6039      	str	r1, [r7, #0]
 801681e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016820:	79fb      	ldrb	r3, [r7, #7]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d105      	bne.n	8016832 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016826:	683a      	ldr	r2, [r7, #0]
 8016828:	4907      	ldr	r1, [pc, #28]	@ (8016848 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801682a:	4808      	ldr	r0, [pc, #32]	@ (801684c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801682c:	f7fc f804 	bl	8012838 <USBD_GetString>
 8016830:	e004      	b.n	801683c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016832:	683a      	ldr	r2, [r7, #0]
 8016834:	4904      	ldr	r1, [pc, #16]	@ (8016848 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8016836:	4805      	ldr	r0, [pc, #20]	@ (801684c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8016838:	f7fb fffe 	bl	8012838 <USBD_GetString>
  }
  return USBD_StrDesc;
 801683c:	4b02      	ldr	r3, [pc, #8]	@ (8016848 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801683e:	4618      	mov	r0, r3
 8016840:	3708      	adds	r7, #8
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	2000a6c0 	.word	0x2000a6c0
 801684c:	0801a23c 	.word	0x0801a23c

08016850 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	4603      	mov	r3, r0
 8016858:	6039      	str	r1, [r7, #0]
 801685a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801685c:	79fb      	ldrb	r3, [r7, #7]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d105      	bne.n	801686e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	4907      	ldr	r1, [pc, #28]	@ (8016884 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016866:	4808      	ldr	r0, [pc, #32]	@ (8016888 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016868:	f7fb ffe6 	bl	8012838 <USBD_GetString>
 801686c:	e004      	b.n	8016878 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801686e:	683a      	ldr	r2, [r7, #0]
 8016870:	4904      	ldr	r1, [pc, #16]	@ (8016884 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016872:	4805      	ldr	r0, [pc, #20]	@ (8016888 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016874:	f7fb ffe0 	bl	8012838 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016878:	4b02      	ldr	r3, [pc, #8]	@ (8016884 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801687a:	4618      	mov	r0, r3
 801687c:	3708      	adds	r7, #8
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	2000a6c0 	.word	0x2000a6c0
 8016888:	0801a248 	.word	0x0801a248

0801688c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b084      	sub	sp, #16
 8016890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016892:	4b0f      	ldr	r3, [pc, #60]	@ (80168d0 <Get_SerialNum+0x44>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016898:	4b0e      	ldr	r3, [pc, #56]	@ (80168d4 <Get_SerialNum+0x48>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801689e:	4b0e      	ldr	r3, [pc, #56]	@ (80168d8 <Get_SerialNum+0x4c>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	4413      	add	r3, r2
 80168aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d009      	beq.n	80168c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80168b2:	2208      	movs	r2, #8
 80168b4:	4909      	ldr	r1, [pc, #36]	@ (80168dc <Get_SerialNum+0x50>)
 80168b6:	68f8      	ldr	r0, [r7, #12]
 80168b8:	f000 f814 	bl	80168e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80168bc:	2204      	movs	r2, #4
 80168be:	4908      	ldr	r1, [pc, #32]	@ (80168e0 <Get_SerialNum+0x54>)
 80168c0:	68b8      	ldr	r0, [r7, #8]
 80168c2:	f000 f80f 	bl	80168e4 <IntToUnicode>
  }
}
 80168c6:	bf00      	nop
 80168c8:	3710      	adds	r7, #16
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
 80168ce:	bf00      	nop
 80168d0:	1fff7590 	.word	0x1fff7590
 80168d4:	1fff7594 	.word	0x1fff7594
 80168d8:	1fff7598 	.word	0x1fff7598
 80168dc:	2000010a 	.word	0x2000010a
 80168e0:	2000011a 	.word	0x2000011a

080168e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80168e4:	b480      	push	{r7}
 80168e6:	b087      	sub	sp, #28
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	4613      	mov	r3, r2
 80168f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80168f2:	2300      	movs	r3, #0
 80168f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80168f6:	2300      	movs	r3, #0
 80168f8:	75fb      	strb	r3, [r7, #23]
 80168fa:	e027      	b.n	801694c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	0f1b      	lsrs	r3, r3, #28
 8016900:	2b09      	cmp	r3, #9
 8016902:	d80b      	bhi.n	801691c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	0f1b      	lsrs	r3, r3, #28
 8016908:	b2da      	uxtb	r2, r3
 801690a:	7dfb      	ldrb	r3, [r7, #23]
 801690c:	005b      	lsls	r3, r3, #1
 801690e:	4619      	mov	r1, r3
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	440b      	add	r3, r1
 8016914:	3230      	adds	r2, #48	@ 0x30
 8016916:	b2d2      	uxtb	r2, r2
 8016918:	701a      	strb	r2, [r3, #0]
 801691a:	e00a      	b.n	8016932 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	0f1b      	lsrs	r3, r3, #28
 8016920:	b2da      	uxtb	r2, r3
 8016922:	7dfb      	ldrb	r3, [r7, #23]
 8016924:	005b      	lsls	r3, r3, #1
 8016926:	4619      	mov	r1, r3
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	440b      	add	r3, r1
 801692c:	3237      	adds	r2, #55	@ 0x37
 801692e:	b2d2      	uxtb	r2, r2
 8016930:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	011b      	lsls	r3, r3, #4
 8016936:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016938:	7dfb      	ldrb	r3, [r7, #23]
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	3301      	adds	r3, #1
 801693e:	68ba      	ldr	r2, [r7, #8]
 8016940:	4413      	add	r3, r2
 8016942:	2200      	movs	r2, #0
 8016944:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016946:	7dfb      	ldrb	r3, [r7, #23]
 8016948:	3301      	adds	r3, #1
 801694a:	75fb      	strb	r3, [r7, #23]
 801694c:	7dfa      	ldrb	r2, [r7, #23]
 801694e:	79fb      	ldrb	r3, [r7, #7]
 8016950:	429a      	cmp	r2, r3
 8016952:	d3d3      	bcc.n	80168fc <IntToUnicode+0x18>
  }
}
 8016954:	bf00      	nop
 8016956:	bf00      	nop
 8016958:	371c      	adds	r7, #28
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr

08016962 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8016962:	b480      	push	{r7}
 8016964:	b085      	sub	sp, #20
 8016966:	af00      	add	r7, sp, #0
 8016968:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 801696a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801696e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	4313      	orrs	r3, r2
 8016978:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801697a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801697e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	4013      	ands	r3, r2
 8016984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016986:	68fb      	ldr	r3, [r7, #12]
}
 8016988:	bf00      	nop
 801698a:	3714      	adds	r7, #20
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr

08016994 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8016994:	b480      	push	{r7}
 8016996:	b085      	sub	sp, #20
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 801699c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80169a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	4313      	orrs	r3, r2
 80169aa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80169ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80169b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	4013      	ands	r3, r2
 80169b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80169b8:	68fb      	ldr	r3, [r7, #12]
}
 80169ba:	bf00      	nop
 80169bc:	3714      	adds	r7, #20
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
	...

080169c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b09c      	sub	sp, #112	@ 0x70
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80169d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80169d4:	2200      	movs	r2, #0
 80169d6:	601a      	str	r2, [r3, #0]
 80169d8:	605a      	str	r2, [r3, #4]
 80169da:	609a      	str	r2, [r3, #8]
 80169dc:	60da      	str	r2, [r3, #12]
 80169de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80169e0:	f107 030c 	add.w	r3, r7, #12
 80169e4:	2250      	movs	r2, #80	@ 0x50
 80169e6:	2100      	movs	r1, #0
 80169e8:	4618      	mov	r0, r3
 80169ea:	f000 fd31 	bl	8017450 <memset>
  if(pcdHandle->Instance==USB)
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	4a1b      	ldr	r2, [pc, #108]	@ (8016a60 <HAL_PCD_MspInit+0x98>)
 80169f4:	4293      	cmp	r3, r2
 80169f6:	d12f      	bne.n	8016a58 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80169f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80169fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80169fe:	2300      	movs	r3, #0
 8016a00:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016a02:	f107 030c 	add.w	r3, r7, #12
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7f7 fb57 	bl	800e0ba <HAL_RCCEx_PeriphCLKConfig>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d001      	beq.n	8016a16 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8016a12:	f7f1 f9d5 	bl	8007dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016a16:	2001      	movs	r0, #1
 8016a18:	f7ff ffa3 	bl	8016962 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016a1c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a22:	2302      	movs	r3, #2
 8016a24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a26:	2300      	movs	r3, #0
 8016a28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8016a2e:	230a      	movs	r3, #10
 8016a30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016a32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8016a36:	4619      	mov	r1, r3
 8016a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8016a3c:	f7f3 fb4e 	bl	800a0dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016a40:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8016a44:	f7ff ffa6 	bl	8016994 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8016a48:	2200      	movs	r2, #0
 8016a4a:	2105      	movs	r1, #5
 8016a4c:	2014      	movs	r0, #20
 8016a4e:	f7f3 f8a9 	bl	8009ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8016a52:	2014      	movs	r0, #20
 8016a54:	f7f3 f8c0 	bl	8009bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016a58:	bf00      	nop
 8016a5a:	3770      	adds	r7, #112	@ 0x70
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}
 8016a60:	40006800 	.word	0x40006800

08016a64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8016a78:	4619      	mov	r1, r3
 8016a7a:	4610      	mov	r0, r2
 8016a7c:	f7fa fde1 	bl	8011642 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8016a80:	bf00      	nop
 8016a82:	3708      	adds	r7, #8
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	460b      	mov	r3, r1
 8016a92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8016a9a:	78fa      	ldrb	r2, [r7, #3]
 8016a9c:	6879      	ldr	r1, [r7, #4]
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	009b      	lsls	r3, r3, #2
 8016aa2:	4413      	add	r3, r2
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	440b      	add	r3, r1
 8016aa8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016aac:	681a      	ldr	r2, [r3, #0]
 8016aae:	78fb      	ldrb	r3, [r7, #3]
 8016ab0:	4619      	mov	r1, r3
 8016ab2:	f7fa fe1b 	bl	80116ec <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8016ab6:	bf00      	nop
 8016ab8:	3708      	adds	r7, #8
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}

08016abe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016abe:	b580      	push	{r7, lr}
 8016ac0:	b082      	sub	sp, #8
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	6078      	str	r0, [r7, #4]
 8016ac6:	460b      	mov	r3, r1
 8016ac8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8016ad0:	78fa      	ldrb	r2, [r7, #3]
 8016ad2:	6879      	ldr	r1, [r7, #4]
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	009b      	lsls	r3, r3, #2
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3324      	adds	r3, #36	@ 0x24
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	78fb      	ldrb	r3, [r7, #3]
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	f7fa feb4 	bl	8011852 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8016aea:	bf00      	nop
 8016aec:	3708      	adds	r7, #8
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}

08016af2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af2:	b580      	push	{r7, lr}
 8016af4:	b082      	sub	sp, #8
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7fa ffee 	bl	8011ae2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8016b06:	bf00      	nop
 8016b08:	3708      	adds	r7, #8
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}

08016b0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b0e:	b580      	push	{r7, lr}
 8016b10:	b084      	sub	sp, #16
 8016b12:	af00      	add	r7, sp, #0
 8016b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b16:	2301      	movs	r3, #1
 8016b18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	795b      	ldrb	r3, [r3, #5]
 8016b1e:	2b02      	cmp	r3, #2
 8016b20:	d001      	beq.n	8016b26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016b22:	f7f1 f94d 	bl	8007dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016b2c:	7bfa      	ldrb	r2, [r7, #15]
 8016b2e:	4611      	mov	r1, r2
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7fa ff92 	bl	8011a5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7fa ff3a 	bl	80119b6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8016b42:	bf00      	nop
 8016b44:	3710      	adds	r7, #16
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}
	...

08016b4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7fa ff8d 	bl	8011a7a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	7a5b      	ldrb	r3, [r3, #9]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d005      	beq.n	8016b74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b68:	4b04      	ldr	r3, [pc, #16]	@ (8016b7c <HAL_PCD_SuspendCallback+0x30>)
 8016b6a:	691b      	ldr	r3, [r3, #16]
 8016b6c:	4a03      	ldr	r2, [pc, #12]	@ (8016b7c <HAL_PCD_SuspendCallback+0x30>)
 8016b6e:	f043 0306 	orr.w	r3, r3, #6
 8016b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8016b74:	bf00      	nop
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}
 8016b7c:	e000ed00 	.word	0xe000ed00

08016b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	7a5b      	ldrb	r3, [r3, #9]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d007      	beq.n	8016ba0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b90:	4b08      	ldr	r3, [pc, #32]	@ (8016bb4 <HAL_PCD_ResumeCallback+0x34>)
 8016b92:	691b      	ldr	r3, [r3, #16]
 8016b94:	4a07      	ldr	r2, [pc, #28]	@ (8016bb4 <HAL_PCD_ResumeCallback+0x34>)
 8016b96:	f023 0306 	bic.w	r3, r3, #6
 8016b9a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016b9c:	f000 f9fa 	bl	8016f94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7fa ff83 	bl	8011ab2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016bac:	bf00      	nop
 8016bae:	3708      	adds	r7, #8
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	e000ed00 	.word	0xe000ed00

08016bb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8016bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	4a2a      	ldr	r2, [pc, #168]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bcc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8016bd0:	f7f5 ff12 	bl	800c9f8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8016bd4:	4b27      	ldr	r3, [pc, #156]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bd6:	4a28      	ldr	r2, [pc, #160]	@ (8016c78 <USBD_LL_Init+0xc0>)
 8016bd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016bda:	4b26      	ldr	r3, [pc, #152]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bdc:	2208      	movs	r2, #8
 8016bde:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016be0:	4b24      	ldr	r3, [pc, #144]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016be2:	2202      	movs	r2, #2
 8016be4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016be6:	4b23      	ldr	r3, [pc, #140]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016be8:	2202      	movs	r2, #2
 8016bea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8016bec:	4b21      	ldr	r3, [pc, #132]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bee:	2200      	movs	r2, #0
 8016bf0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016bf2:	4b20      	ldr	r3, [pc, #128]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016c00:	2200      	movs	r2, #0
 8016c02:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016c04:	481b      	ldr	r0, [pc, #108]	@ (8016c74 <USBD_LL_Init+0xbc>)
 8016c06:	f7f4 f9d8 	bl	800afba <HAL_PCD_Init>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d001      	beq.n	8016c14 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8016c10:	f7f1 f8d6 	bl	8007dc0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c1a:	2318      	movs	r3, #24
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	2100      	movs	r1, #0
 8016c20:	f7f5 fe5f 	bl	800c8e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c2a:	2358      	movs	r3, #88	@ 0x58
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	2180      	movs	r1, #128	@ 0x80
 8016c30:	f7f5 fe57 	bl	800c8e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c3a:	23c0      	movs	r3, #192	@ 0xc0
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	2181      	movs	r1, #129	@ 0x81
 8016c40:	f7f5 fe4f 	bl	800c8e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c4a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8016c4e:	2200      	movs	r2, #0
 8016c50:	2101      	movs	r1, #1
 8016c52:	f7f5 fe46 	bl	800c8e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016c60:	2200      	movs	r2, #0
 8016c62:	2182      	movs	r1, #130	@ 0x82
 8016c64:	f7f5 fe3d 	bl	800c8e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016c68:	2300      	movs	r3, #0
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3708      	adds	r7, #8
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	2000a8c0 	.word	0x2000a8c0
 8016c78:	40006800 	.word	0x40006800

08016c7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b084      	sub	sp, #16
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7f4 fa5f 	bl	800b156 <HAL_PCD_Start>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c9c:	7bfb      	ldrb	r3, [r7, #15]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f000 f97e 	bl	8016fa0 <USBD_Get_USB_Status>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3710      	adds	r7, #16
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}

08016cb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016cb2:	b580      	push	{r7, lr}
 8016cb4:	b084      	sub	sp, #16
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	6078      	str	r0, [r7, #4]
 8016cba:	4608      	mov	r0, r1
 8016cbc:	4611      	mov	r1, r2
 8016cbe:	461a      	mov	r2, r3
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	70fb      	strb	r3, [r7, #3]
 8016cc4:	460b      	mov	r3, r1
 8016cc6:	70bb      	strb	r3, [r7, #2]
 8016cc8:	4613      	mov	r3, r2
 8016cca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016cda:	78bb      	ldrb	r3, [r7, #2]
 8016cdc:	883a      	ldrh	r2, [r7, #0]
 8016cde:	78f9      	ldrb	r1, [r7, #3]
 8016ce0:	f7f4 fba6 	bl	800b430 <HAL_PCD_EP_Open>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ce8:	7bfb      	ldrb	r3, [r7, #15]
 8016cea:	4618      	mov	r0, r3
 8016cec:	f000 f958 	bl	8016fa0 <USBD_Get_USB_Status>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	3710      	adds	r7, #16
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}

08016cfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cfe:	b580      	push	{r7, lr}
 8016d00:	b084      	sub	sp, #16
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	6078      	str	r0, [r7, #4]
 8016d06:	460b      	mov	r3, r1
 8016d08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d18:	78fa      	ldrb	r2, [r7, #3]
 8016d1a:	4611      	mov	r1, r2
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7f4 fbe6 	bl	800b4ee <HAL_PCD_EP_Close>
 8016d22:	4603      	mov	r3, r0
 8016d24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d26:	7bfb      	ldrb	r3, [r7, #15]
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f000 f939 	bl	8016fa0 <USBD_Get_USB_Status>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d32:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3710      	adds	r7, #16
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}

08016d3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b084      	sub	sp, #16
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
 8016d44:	460b      	mov	r3, r1
 8016d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d48:	2300      	movs	r3, #0
 8016d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d56:	78fa      	ldrb	r2, [r7, #3]
 8016d58:	4611      	mov	r1, r2
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7f4 fc8f 	bl	800b67e <HAL_PCD_EP_SetStall>
 8016d60:	4603      	mov	r3, r0
 8016d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d64:	7bfb      	ldrb	r3, [r7, #15]
 8016d66:	4618      	mov	r0, r3
 8016d68:	f000 f91a 	bl	8016fa0 <USBD_Get_USB_Status>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3710      	adds	r7, #16
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}

08016d7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d7a:	b580      	push	{r7, lr}
 8016d7c:	b084      	sub	sp, #16
 8016d7e:	af00      	add	r7, sp, #0
 8016d80:	6078      	str	r0, [r7, #4]
 8016d82:	460b      	mov	r3, r1
 8016d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d86:	2300      	movs	r3, #0
 8016d88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d94:	78fa      	ldrb	r2, [r7, #3]
 8016d96:	4611      	mov	r1, r2
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7f4 fcc2 	bl	800b722 <HAL_PCD_EP_ClrStall>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da2:	7bfb      	ldrb	r3, [r7, #15]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f000 f8fb 	bl	8016fa0 <USBD_Get_USB_Status>
 8016daa:	4603      	mov	r3, r0
 8016dac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3710      	adds	r7, #16
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db8:	b480      	push	{r7}
 8016dba:	b085      	sub	sp, #20
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016dca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	da0b      	bge.n	8016dec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016dd4:	78fb      	ldrb	r3, [r7, #3]
 8016dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016dda:	68f9      	ldr	r1, [r7, #12]
 8016ddc:	4613      	mov	r3, r2
 8016dde:	009b      	lsls	r3, r3, #2
 8016de0:	4413      	add	r3, r2
 8016de2:	00db      	lsls	r3, r3, #3
 8016de4:	440b      	add	r3, r1
 8016de6:	3312      	adds	r3, #18
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	e00b      	b.n	8016e04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016dec:	78fb      	ldrb	r3, [r7, #3]
 8016dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016df2:	68f9      	ldr	r1, [r7, #12]
 8016df4:	4613      	mov	r3, r2
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	4413      	add	r3, r2
 8016dfa:	00db      	lsls	r3, r3, #3
 8016dfc:	440b      	add	r3, r1
 8016dfe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8016e02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e04:	4618      	mov	r0, r3
 8016e06:	3714      	adds	r7, #20
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0e:	4770      	bx	lr

08016e10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b084      	sub	sp, #16
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
 8016e18:	460b      	mov	r3, r1
 8016e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e20:	2300      	movs	r3, #0
 8016e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016e2a:	78fa      	ldrb	r2, [r7, #3]
 8016e2c:	4611      	mov	r1, r2
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7f4 fada 	bl	800b3e8 <HAL_PCD_SetAddress>
 8016e34:	4603      	mov	r3, r0
 8016e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e38:	7bfb      	ldrb	r3, [r7, #15]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f000 f8b0 	bl	8016fa0 <USBD_Get_USB_Status>
 8016e40:	4603      	mov	r3, r0
 8016e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3710      	adds	r7, #16
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}

08016e4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e4e:	b580      	push	{r7, lr}
 8016e50:	b086      	sub	sp, #24
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	60f8      	str	r0, [r7, #12]
 8016e56:	607a      	str	r2, [r7, #4]
 8016e58:	603b      	str	r3, [r7, #0]
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e62:	2300      	movs	r3, #0
 8016e64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016e6c:	7af9      	ldrb	r1, [r7, #11]
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	f7f4 fbcd 	bl	800b610 <HAL_PCD_EP_Transmit>
 8016e76:	4603      	mov	r3, r0
 8016e78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e7a:	7dfb      	ldrb	r3, [r7, #23]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f000 f88f 	bl	8016fa0 <USBD_Get_USB_Status>
 8016e82:	4603      	mov	r3, r0
 8016e84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e86:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3718      	adds	r7, #24
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b086      	sub	sp, #24
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	607a      	str	r2, [r7, #4]
 8016e9a:	603b      	str	r3, [r7, #0]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016eae:	7af9      	ldrb	r1, [r7, #11]
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	f7f4 fb63 	bl	800b57e <HAL_PCD_EP_Receive>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ebc:	7dfb      	ldrb	r3, [r7, #23]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f000 f86e 	bl	8016fa0 <USBD_Get_USB_Status>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016ec8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3718      	adds	r7, #24
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}

08016ed2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b082      	sub	sp, #8
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	6078      	str	r0, [r7, #4]
 8016eda:	460b      	mov	r3, r1
 8016edc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016ee4:	78fa      	ldrb	r2, [r7, #3]
 8016ee6:	4611      	mov	r1, r2
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7f4 fb79 	bl	800b5e0 <HAL_PCD_EP_GetRxCount>
 8016eee:	4603      	mov	r3, r0
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3708      	adds	r7, #8
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}

08016ef8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b082      	sub	sp, #8
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	460b      	mov	r3, r1
 8016f02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016f04:	78fb      	ldrb	r3, [r7, #3]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d002      	beq.n	8016f10 <HAL_PCDEx_LPM_Callback+0x18>
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d013      	beq.n	8016f36 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016f0e:	e023      	b.n	8016f58 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	7a5b      	ldrb	r3, [r3, #9]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d007      	beq.n	8016f28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016f18:	f000 f83c 	bl	8016f94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016f1c:	4b10      	ldr	r3, [pc, #64]	@ (8016f60 <HAL_PCDEx_LPM_Callback+0x68>)
 8016f1e:	691b      	ldr	r3, [r3, #16]
 8016f20:	4a0f      	ldr	r2, [pc, #60]	@ (8016f60 <HAL_PCDEx_LPM_Callback+0x68>)
 8016f22:	f023 0306 	bic.w	r3, r3, #6
 8016f26:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7fa fdbf 	bl	8011ab2 <USBD_LL_Resume>
    break;
 8016f34:	e010      	b.n	8016f58 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7fa fd9c 	bl	8011a7a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	7a5b      	ldrb	r3, [r3, #9]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d005      	beq.n	8016f56 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016f4a:	4b05      	ldr	r3, [pc, #20]	@ (8016f60 <HAL_PCDEx_LPM_Callback+0x68>)
 8016f4c:	691b      	ldr	r3, [r3, #16]
 8016f4e:	4a04      	ldr	r2, [pc, #16]	@ (8016f60 <HAL_PCDEx_LPM_Callback+0x68>)
 8016f50:	f043 0306 	orr.w	r3, r3, #6
 8016f54:	6113      	str	r3, [r2, #16]
    break;
 8016f56:	bf00      	nop
}
 8016f58:	bf00      	nop
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	e000ed00 	.word	0xe000ed00

08016f64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b083      	sub	sp, #12
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f6c:	4b03      	ldr	r3, [pc, #12]	@ (8016f7c <USBD_static_malloc+0x18>)
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	370c      	adds	r7, #12
 8016f72:	46bd      	mov	sp, r7
 8016f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f78:	4770      	bx	lr
 8016f7a:	bf00      	nop
 8016f7c:	2000ab9c 	.word	0x2000ab9c

08016f80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f80:	b480      	push	{r7}
 8016f82:	b083      	sub	sp, #12
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016f88:	bf00      	nop
 8016f8a:	370c      	adds	r7, #12
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f92:	4770      	bx	lr

08016f94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016f98:	f7f0 fb2a 	bl	80075f0 <SystemClock_Config>
}
 8016f9c:	bf00      	nop
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016faa:	2300      	movs	r3, #0
 8016fac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016fae:	79fb      	ldrb	r3, [r7, #7]
 8016fb0:	2b03      	cmp	r3, #3
 8016fb2:	d817      	bhi.n	8016fe4 <USBD_Get_USB_Status+0x44>
 8016fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8016fbc <USBD_Get_USB_Status+0x1c>)
 8016fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fba:	bf00      	nop
 8016fbc:	08016fcd 	.word	0x08016fcd
 8016fc0:	08016fd3 	.word	0x08016fd3
 8016fc4:	08016fd9 	.word	0x08016fd9
 8016fc8:	08016fdf 	.word	0x08016fdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd0:	e00b      	b.n	8016fea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016fd2:	2303      	movs	r3, #3
 8016fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd6:	e008      	b.n	8016fea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016fd8:	2301      	movs	r3, #1
 8016fda:	73fb      	strb	r3, [r7, #15]
    break;
 8016fdc:	e005      	b.n	8016fea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016fde:	2303      	movs	r3, #3
 8016fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8016fe2:	e002      	b.n	8016fea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fe4:	2303      	movs	r3, #3
 8016fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fe8:	bf00      	nop
  }
  return usb_status;
 8016fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3714      	adds	r7, #20
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff6:	4770      	bx	lr

08016ff8 <std>:
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	b510      	push	{r4, lr}
 8016ffc:	4604      	mov	r4, r0
 8016ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8017002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017006:	6083      	str	r3, [r0, #8]
 8017008:	8181      	strh	r1, [r0, #12]
 801700a:	6643      	str	r3, [r0, #100]	@ 0x64
 801700c:	81c2      	strh	r2, [r0, #14]
 801700e:	6183      	str	r3, [r0, #24]
 8017010:	4619      	mov	r1, r3
 8017012:	2208      	movs	r2, #8
 8017014:	305c      	adds	r0, #92	@ 0x5c
 8017016:	f000 fa1b 	bl	8017450 <memset>
 801701a:	4b0d      	ldr	r3, [pc, #52]	@ (8017050 <std+0x58>)
 801701c:	6263      	str	r3, [r4, #36]	@ 0x24
 801701e:	4b0d      	ldr	r3, [pc, #52]	@ (8017054 <std+0x5c>)
 8017020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017022:	4b0d      	ldr	r3, [pc, #52]	@ (8017058 <std+0x60>)
 8017024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017026:	4b0d      	ldr	r3, [pc, #52]	@ (801705c <std+0x64>)
 8017028:	6323      	str	r3, [r4, #48]	@ 0x30
 801702a:	4b0d      	ldr	r3, [pc, #52]	@ (8017060 <std+0x68>)
 801702c:	6224      	str	r4, [r4, #32]
 801702e:	429c      	cmp	r4, r3
 8017030:	d006      	beq.n	8017040 <std+0x48>
 8017032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017036:	4294      	cmp	r4, r2
 8017038:	d002      	beq.n	8017040 <std+0x48>
 801703a:	33d0      	adds	r3, #208	@ 0xd0
 801703c:	429c      	cmp	r4, r3
 801703e:	d105      	bne.n	801704c <std+0x54>
 8017040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017048:	f000 bad8 	b.w	80175fc <__retarget_lock_init_recursive>
 801704c:	bd10      	pop	{r4, pc}
 801704e:	bf00      	nop
 8017050:	080172a1 	.word	0x080172a1
 8017054:	080172c3 	.word	0x080172c3
 8017058:	080172fb 	.word	0x080172fb
 801705c:	0801731f 	.word	0x0801731f
 8017060:	2000adbc 	.word	0x2000adbc

08017064 <stdio_exit_handler>:
 8017064:	4a02      	ldr	r2, [pc, #8]	@ (8017070 <stdio_exit_handler+0xc>)
 8017066:	4903      	ldr	r1, [pc, #12]	@ (8017074 <stdio_exit_handler+0x10>)
 8017068:	4803      	ldr	r0, [pc, #12]	@ (8017078 <stdio_exit_handler+0x14>)
 801706a:	f000 b869 	b.w	8017140 <_fwalk_sglue>
 801706e:	bf00      	nop
 8017070:	20000124 	.word	0x20000124
 8017074:	08018165 	.word	0x08018165
 8017078:	20000134 	.word	0x20000134

0801707c <cleanup_stdio>:
 801707c:	6841      	ldr	r1, [r0, #4]
 801707e:	4b0c      	ldr	r3, [pc, #48]	@ (80170b0 <cleanup_stdio+0x34>)
 8017080:	4299      	cmp	r1, r3
 8017082:	b510      	push	{r4, lr}
 8017084:	4604      	mov	r4, r0
 8017086:	d001      	beq.n	801708c <cleanup_stdio+0x10>
 8017088:	f001 f86c 	bl	8018164 <_fflush_r>
 801708c:	68a1      	ldr	r1, [r4, #8]
 801708e:	4b09      	ldr	r3, [pc, #36]	@ (80170b4 <cleanup_stdio+0x38>)
 8017090:	4299      	cmp	r1, r3
 8017092:	d002      	beq.n	801709a <cleanup_stdio+0x1e>
 8017094:	4620      	mov	r0, r4
 8017096:	f001 f865 	bl	8018164 <_fflush_r>
 801709a:	68e1      	ldr	r1, [r4, #12]
 801709c:	4b06      	ldr	r3, [pc, #24]	@ (80170b8 <cleanup_stdio+0x3c>)
 801709e:	4299      	cmp	r1, r3
 80170a0:	d004      	beq.n	80170ac <cleanup_stdio+0x30>
 80170a2:	4620      	mov	r0, r4
 80170a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170a8:	f001 b85c 	b.w	8018164 <_fflush_r>
 80170ac:	bd10      	pop	{r4, pc}
 80170ae:	bf00      	nop
 80170b0:	2000adbc 	.word	0x2000adbc
 80170b4:	2000ae24 	.word	0x2000ae24
 80170b8:	2000ae8c 	.word	0x2000ae8c

080170bc <global_stdio_init.part.0>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	4b0b      	ldr	r3, [pc, #44]	@ (80170ec <global_stdio_init.part.0+0x30>)
 80170c0:	4c0b      	ldr	r4, [pc, #44]	@ (80170f0 <global_stdio_init.part.0+0x34>)
 80170c2:	4a0c      	ldr	r2, [pc, #48]	@ (80170f4 <global_stdio_init.part.0+0x38>)
 80170c4:	601a      	str	r2, [r3, #0]
 80170c6:	4620      	mov	r0, r4
 80170c8:	2200      	movs	r2, #0
 80170ca:	2104      	movs	r1, #4
 80170cc:	f7ff ff94 	bl	8016ff8 <std>
 80170d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80170d4:	2201      	movs	r2, #1
 80170d6:	2109      	movs	r1, #9
 80170d8:	f7ff ff8e 	bl	8016ff8 <std>
 80170dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80170e0:	2202      	movs	r2, #2
 80170e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170e6:	2112      	movs	r1, #18
 80170e8:	f7ff bf86 	b.w	8016ff8 <std>
 80170ec:	2000aef4 	.word	0x2000aef4
 80170f0:	2000adbc 	.word	0x2000adbc
 80170f4:	08017065 	.word	0x08017065

080170f8 <__sfp_lock_acquire>:
 80170f8:	4801      	ldr	r0, [pc, #4]	@ (8017100 <__sfp_lock_acquire+0x8>)
 80170fa:	f000 ba80 	b.w	80175fe <__retarget_lock_acquire_recursive>
 80170fe:	bf00      	nop
 8017100:	2000aefd 	.word	0x2000aefd

08017104 <__sfp_lock_release>:
 8017104:	4801      	ldr	r0, [pc, #4]	@ (801710c <__sfp_lock_release+0x8>)
 8017106:	f000 ba7b 	b.w	8017600 <__retarget_lock_release_recursive>
 801710a:	bf00      	nop
 801710c:	2000aefd 	.word	0x2000aefd

08017110 <__sinit>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4604      	mov	r4, r0
 8017114:	f7ff fff0 	bl	80170f8 <__sfp_lock_acquire>
 8017118:	6a23      	ldr	r3, [r4, #32]
 801711a:	b11b      	cbz	r3, 8017124 <__sinit+0x14>
 801711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017120:	f7ff bff0 	b.w	8017104 <__sfp_lock_release>
 8017124:	4b04      	ldr	r3, [pc, #16]	@ (8017138 <__sinit+0x28>)
 8017126:	6223      	str	r3, [r4, #32]
 8017128:	4b04      	ldr	r3, [pc, #16]	@ (801713c <__sinit+0x2c>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d1f5      	bne.n	801711c <__sinit+0xc>
 8017130:	f7ff ffc4 	bl	80170bc <global_stdio_init.part.0>
 8017134:	e7f2      	b.n	801711c <__sinit+0xc>
 8017136:	bf00      	nop
 8017138:	0801707d 	.word	0x0801707d
 801713c:	2000aef4 	.word	0x2000aef4

08017140 <_fwalk_sglue>:
 8017140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017144:	4607      	mov	r7, r0
 8017146:	4688      	mov	r8, r1
 8017148:	4614      	mov	r4, r2
 801714a:	2600      	movs	r6, #0
 801714c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017150:	f1b9 0901 	subs.w	r9, r9, #1
 8017154:	d505      	bpl.n	8017162 <_fwalk_sglue+0x22>
 8017156:	6824      	ldr	r4, [r4, #0]
 8017158:	2c00      	cmp	r4, #0
 801715a:	d1f7      	bne.n	801714c <_fwalk_sglue+0xc>
 801715c:	4630      	mov	r0, r6
 801715e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017162:	89ab      	ldrh	r3, [r5, #12]
 8017164:	2b01      	cmp	r3, #1
 8017166:	d907      	bls.n	8017178 <_fwalk_sglue+0x38>
 8017168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801716c:	3301      	adds	r3, #1
 801716e:	d003      	beq.n	8017178 <_fwalk_sglue+0x38>
 8017170:	4629      	mov	r1, r5
 8017172:	4638      	mov	r0, r7
 8017174:	47c0      	blx	r8
 8017176:	4306      	orrs	r6, r0
 8017178:	3568      	adds	r5, #104	@ 0x68
 801717a:	e7e9      	b.n	8017150 <_fwalk_sglue+0x10>

0801717c <iprintf>:
 801717c:	b40f      	push	{r0, r1, r2, r3}
 801717e:	b507      	push	{r0, r1, r2, lr}
 8017180:	4906      	ldr	r1, [pc, #24]	@ (801719c <iprintf+0x20>)
 8017182:	ab04      	add	r3, sp, #16
 8017184:	6808      	ldr	r0, [r1, #0]
 8017186:	f853 2b04 	ldr.w	r2, [r3], #4
 801718a:	6881      	ldr	r1, [r0, #8]
 801718c:	9301      	str	r3, [sp, #4]
 801718e:	f000 fcc1 	bl	8017b14 <_vfiprintf_r>
 8017192:	b003      	add	sp, #12
 8017194:	f85d eb04 	ldr.w	lr, [sp], #4
 8017198:	b004      	add	sp, #16
 801719a:	4770      	bx	lr
 801719c:	20000130 	.word	0x20000130

080171a0 <_puts_r>:
 80171a0:	6a03      	ldr	r3, [r0, #32]
 80171a2:	b570      	push	{r4, r5, r6, lr}
 80171a4:	6884      	ldr	r4, [r0, #8]
 80171a6:	4605      	mov	r5, r0
 80171a8:	460e      	mov	r6, r1
 80171aa:	b90b      	cbnz	r3, 80171b0 <_puts_r+0x10>
 80171ac:	f7ff ffb0 	bl	8017110 <__sinit>
 80171b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171b2:	07db      	lsls	r3, r3, #31
 80171b4:	d405      	bmi.n	80171c2 <_puts_r+0x22>
 80171b6:	89a3      	ldrh	r3, [r4, #12]
 80171b8:	0598      	lsls	r0, r3, #22
 80171ba:	d402      	bmi.n	80171c2 <_puts_r+0x22>
 80171bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171be:	f000 fa1e 	bl	80175fe <__retarget_lock_acquire_recursive>
 80171c2:	89a3      	ldrh	r3, [r4, #12]
 80171c4:	0719      	lsls	r1, r3, #28
 80171c6:	d502      	bpl.n	80171ce <_puts_r+0x2e>
 80171c8:	6923      	ldr	r3, [r4, #16]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d135      	bne.n	801723a <_puts_r+0x9a>
 80171ce:	4621      	mov	r1, r4
 80171d0:	4628      	mov	r0, r5
 80171d2:	f000 f8e7 	bl	80173a4 <__swsetup_r>
 80171d6:	b380      	cbz	r0, 801723a <_puts_r+0x9a>
 80171d8:	f04f 35ff 	mov.w	r5, #4294967295
 80171dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171de:	07da      	lsls	r2, r3, #31
 80171e0:	d405      	bmi.n	80171ee <_puts_r+0x4e>
 80171e2:	89a3      	ldrh	r3, [r4, #12]
 80171e4:	059b      	lsls	r3, r3, #22
 80171e6:	d402      	bmi.n	80171ee <_puts_r+0x4e>
 80171e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171ea:	f000 fa09 	bl	8017600 <__retarget_lock_release_recursive>
 80171ee:	4628      	mov	r0, r5
 80171f0:	bd70      	pop	{r4, r5, r6, pc}
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	da04      	bge.n	8017200 <_puts_r+0x60>
 80171f6:	69a2      	ldr	r2, [r4, #24]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	dc17      	bgt.n	801722c <_puts_r+0x8c>
 80171fc:	290a      	cmp	r1, #10
 80171fe:	d015      	beq.n	801722c <_puts_r+0x8c>
 8017200:	6823      	ldr	r3, [r4, #0]
 8017202:	1c5a      	adds	r2, r3, #1
 8017204:	6022      	str	r2, [r4, #0]
 8017206:	7019      	strb	r1, [r3, #0]
 8017208:	68a3      	ldr	r3, [r4, #8]
 801720a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801720e:	3b01      	subs	r3, #1
 8017210:	60a3      	str	r3, [r4, #8]
 8017212:	2900      	cmp	r1, #0
 8017214:	d1ed      	bne.n	80171f2 <_puts_r+0x52>
 8017216:	2b00      	cmp	r3, #0
 8017218:	da11      	bge.n	801723e <_puts_r+0x9e>
 801721a:	4622      	mov	r2, r4
 801721c:	210a      	movs	r1, #10
 801721e:	4628      	mov	r0, r5
 8017220:	f000 f881 	bl	8017326 <__swbuf_r>
 8017224:	3001      	adds	r0, #1
 8017226:	d0d7      	beq.n	80171d8 <_puts_r+0x38>
 8017228:	250a      	movs	r5, #10
 801722a:	e7d7      	b.n	80171dc <_puts_r+0x3c>
 801722c:	4622      	mov	r2, r4
 801722e:	4628      	mov	r0, r5
 8017230:	f000 f879 	bl	8017326 <__swbuf_r>
 8017234:	3001      	adds	r0, #1
 8017236:	d1e7      	bne.n	8017208 <_puts_r+0x68>
 8017238:	e7ce      	b.n	80171d8 <_puts_r+0x38>
 801723a:	3e01      	subs	r6, #1
 801723c:	e7e4      	b.n	8017208 <_puts_r+0x68>
 801723e:	6823      	ldr	r3, [r4, #0]
 8017240:	1c5a      	adds	r2, r3, #1
 8017242:	6022      	str	r2, [r4, #0]
 8017244:	220a      	movs	r2, #10
 8017246:	701a      	strb	r2, [r3, #0]
 8017248:	e7ee      	b.n	8017228 <_puts_r+0x88>
	...

0801724c <puts>:
 801724c:	4b02      	ldr	r3, [pc, #8]	@ (8017258 <puts+0xc>)
 801724e:	4601      	mov	r1, r0
 8017250:	6818      	ldr	r0, [r3, #0]
 8017252:	f7ff bfa5 	b.w	80171a0 <_puts_r>
 8017256:	bf00      	nop
 8017258:	20000130 	.word	0x20000130

0801725c <siprintf>:
 801725c:	b40e      	push	{r1, r2, r3}
 801725e:	b510      	push	{r4, lr}
 8017260:	b09d      	sub	sp, #116	@ 0x74
 8017262:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017264:	9002      	str	r0, [sp, #8]
 8017266:	9006      	str	r0, [sp, #24]
 8017268:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801726c:	480a      	ldr	r0, [pc, #40]	@ (8017298 <siprintf+0x3c>)
 801726e:	9107      	str	r1, [sp, #28]
 8017270:	9104      	str	r1, [sp, #16]
 8017272:	490a      	ldr	r1, [pc, #40]	@ (801729c <siprintf+0x40>)
 8017274:	f853 2b04 	ldr.w	r2, [r3], #4
 8017278:	9105      	str	r1, [sp, #20]
 801727a:	2400      	movs	r4, #0
 801727c:	a902      	add	r1, sp, #8
 801727e:	6800      	ldr	r0, [r0, #0]
 8017280:	9301      	str	r3, [sp, #4]
 8017282:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017284:	f000 fb20 	bl	80178c8 <_svfiprintf_r>
 8017288:	9b02      	ldr	r3, [sp, #8]
 801728a:	701c      	strb	r4, [r3, #0]
 801728c:	b01d      	add	sp, #116	@ 0x74
 801728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017292:	b003      	add	sp, #12
 8017294:	4770      	bx	lr
 8017296:	bf00      	nop
 8017298:	20000130 	.word	0x20000130
 801729c:	ffff0208 	.word	0xffff0208

080172a0 <__sread>:
 80172a0:	b510      	push	{r4, lr}
 80172a2:	460c      	mov	r4, r1
 80172a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172a8:	f000 f95a 	bl	8017560 <_read_r>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	bfab      	itete	ge
 80172b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80172b2:	89a3      	ldrhlt	r3, [r4, #12]
 80172b4:	181b      	addge	r3, r3, r0
 80172b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80172ba:	bfac      	ite	ge
 80172bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80172be:	81a3      	strhlt	r3, [r4, #12]
 80172c0:	bd10      	pop	{r4, pc}

080172c2 <__swrite>:
 80172c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c6:	461f      	mov	r7, r3
 80172c8:	898b      	ldrh	r3, [r1, #12]
 80172ca:	05db      	lsls	r3, r3, #23
 80172cc:	4605      	mov	r5, r0
 80172ce:	460c      	mov	r4, r1
 80172d0:	4616      	mov	r6, r2
 80172d2:	d505      	bpl.n	80172e0 <__swrite+0x1e>
 80172d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172d8:	2302      	movs	r3, #2
 80172da:	2200      	movs	r2, #0
 80172dc:	f000 f92e 	bl	801753c <_lseek_r>
 80172e0:	89a3      	ldrh	r3, [r4, #12]
 80172e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80172ea:	81a3      	strh	r3, [r4, #12]
 80172ec:	4632      	mov	r2, r6
 80172ee:	463b      	mov	r3, r7
 80172f0:	4628      	mov	r0, r5
 80172f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f6:	f000 b945 	b.w	8017584 <_write_r>

080172fa <__sseek>:
 80172fa:	b510      	push	{r4, lr}
 80172fc:	460c      	mov	r4, r1
 80172fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017302:	f000 f91b 	bl	801753c <_lseek_r>
 8017306:	1c43      	adds	r3, r0, #1
 8017308:	89a3      	ldrh	r3, [r4, #12]
 801730a:	bf15      	itete	ne
 801730c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801730e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017316:	81a3      	strheq	r3, [r4, #12]
 8017318:	bf18      	it	ne
 801731a:	81a3      	strhne	r3, [r4, #12]
 801731c:	bd10      	pop	{r4, pc}

0801731e <__sclose>:
 801731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017322:	f000 b89d 	b.w	8017460 <_close_r>

08017326 <__swbuf_r>:
 8017326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017328:	460e      	mov	r6, r1
 801732a:	4614      	mov	r4, r2
 801732c:	4605      	mov	r5, r0
 801732e:	b118      	cbz	r0, 8017338 <__swbuf_r+0x12>
 8017330:	6a03      	ldr	r3, [r0, #32]
 8017332:	b90b      	cbnz	r3, 8017338 <__swbuf_r+0x12>
 8017334:	f7ff feec 	bl	8017110 <__sinit>
 8017338:	69a3      	ldr	r3, [r4, #24]
 801733a:	60a3      	str	r3, [r4, #8]
 801733c:	89a3      	ldrh	r3, [r4, #12]
 801733e:	071a      	lsls	r2, r3, #28
 8017340:	d501      	bpl.n	8017346 <__swbuf_r+0x20>
 8017342:	6923      	ldr	r3, [r4, #16]
 8017344:	b943      	cbnz	r3, 8017358 <__swbuf_r+0x32>
 8017346:	4621      	mov	r1, r4
 8017348:	4628      	mov	r0, r5
 801734a:	f000 f82b 	bl	80173a4 <__swsetup_r>
 801734e:	b118      	cbz	r0, 8017358 <__swbuf_r+0x32>
 8017350:	f04f 37ff 	mov.w	r7, #4294967295
 8017354:	4638      	mov	r0, r7
 8017356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	6922      	ldr	r2, [r4, #16]
 801735c:	1a98      	subs	r0, r3, r2
 801735e:	6963      	ldr	r3, [r4, #20]
 8017360:	b2f6      	uxtb	r6, r6
 8017362:	4283      	cmp	r3, r0
 8017364:	4637      	mov	r7, r6
 8017366:	dc05      	bgt.n	8017374 <__swbuf_r+0x4e>
 8017368:	4621      	mov	r1, r4
 801736a:	4628      	mov	r0, r5
 801736c:	f000 fefa 	bl	8018164 <_fflush_r>
 8017370:	2800      	cmp	r0, #0
 8017372:	d1ed      	bne.n	8017350 <__swbuf_r+0x2a>
 8017374:	68a3      	ldr	r3, [r4, #8]
 8017376:	3b01      	subs	r3, #1
 8017378:	60a3      	str	r3, [r4, #8]
 801737a:	6823      	ldr	r3, [r4, #0]
 801737c:	1c5a      	adds	r2, r3, #1
 801737e:	6022      	str	r2, [r4, #0]
 8017380:	701e      	strb	r6, [r3, #0]
 8017382:	6962      	ldr	r2, [r4, #20]
 8017384:	1c43      	adds	r3, r0, #1
 8017386:	429a      	cmp	r2, r3
 8017388:	d004      	beq.n	8017394 <__swbuf_r+0x6e>
 801738a:	89a3      	ldrh	r3, [r4, #12]
 801738c:	07db      	lsls	r3, r3, #31
 801738e:	d5e1      	bpl.n	8017354 <__swbuf_r+0x2e>
 8017390:	2e0a      	cmp	r6, #10
 8017392:	d1df      	bne.n	8017354 <__swbuf_r+0x2e>
 8017394:	4621      	mov	r1, r4
 8017396:	4628      	mov	r0, r5
 8017398:	f000 fee4 	bl	8018164 <_fflush_r>
 801739c:	2800      	cmp	r0, #0
 801739e:	d0d9      	beq.n	8017354 <__swbuf_r+0x2e>
 80173a0:	e7d6      	b.n	8017350 <__swbuf_r+0x2a>
	...

080173a4 <__swsetup_r>:
 80173a4:	b538      	push	{r3, r4, r5, lr}
 80173a6:	4b29      	ldr	r3, [pc, #164]	@ (801744c <__swsetup_r+0xa8>)
 80173a8:	4605      	mov	r5, r0
 80173aa:	6818      	ldr	r0, [r3, #0]
 80173ac:	460c      	mov	r4, r1
 80173ae:	b118      	cbz	r0, 80173b8 <__swsetup_r+0x14>
 80173b0:	6a03      	ldr	r3, [r0, #32]
 80173b2:	b90b      	cbnz	r3, 80173b8 <__swsetup_r+0x14>
 80173b4:	f7ff feac 	bl	8017110 <__sinit>
 80173b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173bc:	0719      	lsls	r1, r3, #28
 80173be:	d422      	bmi.n	8017406 <__swsetup_r+0x62>
 80173c0:	06da      	lsls	r2, r3, #27
 80173c2:	d407      	bmi.n	80173d4 <__swsetup_r+0x30>
 80173c4:	2209      	movs	r2, #9
 80173c6:	602a      	str	r2, [r5, #0]
 80173c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173cc:	81a3      	strh	r3, [r4, #12]
 80173ce:	f04f 30ff 	mov.w	r0, #4294967295
 80173d2:	e033      	b.n	801743c <__swsetup_r+0x98>
 80173d4:	0758      	lsls	r0, r3, #29
 80173d6:	d512      	bpl.n	80173fe <__swsetup_r+0x5a>
 80173d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173da:	b141      	cbz	r1, 80173ee <__swsetup_r+0x4a>
 80173dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173e0:	4299      	cmp	r1, r3
 80173e2:	d002      	beq.n	80173ea <__swsetup_r+0x46>
 80173e4:	4628      	mov	r0, r5
 80173e6:	f000 f91b 	bl	8017620 <_free_r>
 80173ea:	2300      	movs	r3, #0
 80173ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80173ee:	89a3      	ldrh	r3, [r4, #12]
 80173f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80173f4:	81a3      	strh	r3, [r4, #12]
 80173f6:	2300      	movs	r3, #0
 80173f8:	6063      	str	r3, [r4, #4]
 80173fa:	6923      	ldr	r3, [r4, #16]
 80173fc:	6023      	str	r3, [r4, #0]
 80173fe:	89a3      	ldrh	r3, [r4, #12]
 8017400:	f043 0308 	orr.w	r3, r3, #8
 8017404:	81a3      	strh	r3, [r4, #12]
 8017406:	6923      	ldr	r3, [r4, #16]
 8017408:	b94b      	cbnz	r3, 801741e <__swsetup_r+0x7a>
 801740a:	89a3      	ldrh	r3, [r4, #12]
 801740c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017414:	d003      	beq.n	801741e <__swsetup_r+0x7a>
 8017416:	4621      	mov	r1, r4
 8017418:	4628      	mov	r0, r5
 801741a:	f000 fef1 	bl	8018200 <__smakebuf_r>
 801741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017422:	f013 0201 	ands.w	r2, r3, #1
 8017426:	d00a      	beq.n	801743e <__swsetup_r+0x9a>
 8017428:	2200      	movs	r2, #0
 801742a:	60a2      	str	r2, [r4, #8]
 801742c:	6962      	ldr	r2, [r4, #20]
 801742e:	4252      	negs	r2, r2
 8017430:	61a2      	str	r2, [r4, #24]
 8017432:	6922      	ldr	r2, [r4, #16]
 8017434:	b942      	cbnz	r2, 8017448 <__swsetup_r+0xa4>
 8017436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801743a:	d1c5      	bne.n	80173c8 <__swsetup_r+0x24>
 801743c:	bd38      	pop	{r3, r4, r5, pc}
 801743e:	0799      	lsls	r1, r3, #30
 8017440:	bf58      	it	pl
 8017442:	6962      	ldrpl	r2, [r4, #20]
 8017444:	60a2      	str	r2, [r4, #8]
 8017446:	e7f4      	b.n	8017432 <__swsetup_r+0x8e>
 8017448:	2000      	movs	r0, #0
 801744a:	e7f7      	b.n	801743c <__swsetup_r+0x98>
 801744c:	20000130 	.word	0x20000130

08017450 <memset>:
 8017450:	4402      	add	r2, r0
 8017452:	4603      	mov	r3, r0
 8017454:	4293      	cmp	r3, r2
 8017456:	d100      	bne.n	801745a <memset+0xa>
 8017458:	4770      	bx	lr
 801745a:	f803 1b01 	strb.w	r1, [r3], #1
 801745e:	e7f9      	b.n	8017454 <memset+0x4>

08017460 <_close_r>:
 8017460:	b538      	push	{r3, r4, r5, lr}
 8017462:	4d06      	ldr	r5, [pc, #24]	@ (801747c <_close_r+0x1c>)
 8017464:	2300      	movs	r3, #0
 8017466:	4604      	mov	r4, r0
 8017468:	4608      	mov	r0, r1
 801746a:	602b      	str	r3, [r5, #0]
 801746c:	f7f0 fedf 	bl	800822e <_close>
 8017470:	1c43      	adds	r3, r0, #1
 8017472:	d102      	bne.n	801747a <_close_r+0x1a>
 8017474:	682b      	ldr	r3, [r5, #0]
 8017476:	b103      	cbz	r3, 801747a <_close_r+0x1a>
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	bd38      	pop	{r3, r4, r5, pc}
 801747c:	2000aef8 	.word	0x2000aef8

08017480 <_reclaim_reent>:
 8017480:	4b2d      	ldr	r3, [pc, #180]	@ (8017538 <_reclaim_reent+0xb8>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	4283      	cmp	r3, r0
 8017486:	b570      	push	{r4, r5, r6, lr}
 8017488:	4604      	mov	r4, r0
 801748a:	d053      	beq.n	8017534 <_reclaim_reent+0xb4>
 801748c:	69c3      	ldr	r3, [r0, #28]
 801748e:	b31b      	cbz	r3, 80174d8 <_reclaim_reent+0x58>
 8017490:	68db      	ldr	r3, [r3, #12]
 8017492:	b163      	cbz	r3, 80174ae <_reclaim_reent+0x2e>
 8017494:	2500      	movs	r5, #0
 8017496:	69e3      	ldr	r3, [r4, #28]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	5959      	ldr	r1, [r3, r5]
 801749c:	b9b1      	cbnz	r1, 80174cc <_reclaim_reent+0x4c>
 801749e:	3504      	adds	r5, #4
 80174a0:	2d80      	cmp	r5, #128	@ 0x80
 80174a2:	d1f8      	bne.n	8017496 <_reclaim_reent+0x16>
 80174a4:	69e3      	ldr	r3, [r4, #28]
 80174a6:	4620      	mov	r0, r4
 80174a8:	68d9      	ldr	r1, [r3, #12]
 80174aa:	f000 f8b9 	bl	8017620 <_free_r>
 80174ae:	69e3      	ldr	r3, [r4, #28]
 80174b0:	6819      	ldr	r1, [r3, #0]
 80174b2:	b111      	cbz	r1, 80174ba <_reclaim_reent+0x3a>
 80174b4:	4620      	mov	r0, r4
 80174b6:	f000 f8b3 	bl	8017620 <_free_r>
 80174ba:	69e3      	ldr	r3, [r4, #28]
 80174bc:	689d      	ldr	r5, [r3, #8]
 80174be:	b15d      	cbz	r5, 80174d8 <_reclaim_reent+0x58>
 80174c0:	4629      	mov	r1, r5
 80174c2:	4620      	mov	r0, r4
 80174c4:	682d      	ldr	r5, [r5, #0]
 80174c6:	f000 f8ab 	bl	8017620 <_free_r>
 80174ca:	e7f8      	b.n	80174be <_reclaim_reent+0x3e>
 80174cc:	680e      	ldr	r6, [r1, #0]
 80174ce:	4620      	mov	r0, r4
 80174d0:	f000 f8a6 	bl	8017620 <_free_r>
 80174d4:	4631      	mov	r1, r6
 80174d6:	e7e1      	b.n	801749c <_reclaim_reent+0x1c>
 80174d8:	6961      	ldr	r1, [r4, #20]
 80174da:	b111      	cbz	r1, 80174e2 <_reclaim_reent+0x62>
 80174dc:	4620      	mov	r0, r4
 80174de:	f000 f89f 	bl	8017620 <_free_r>
 80174e2:	69e1      	ldr	r1, [r4, #28]
 80174e4:	b111      	cbz	r1, 80174ec <_reclaim_reent+0x6c>
 80174e6:	4620      	mov	r0, r4
 80174e8:	f000 f89a 	bl	8017620 <_free_r>
 80174ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80174ee:	b111      	cbz	r1, 80174f6 <_reclaim_reent+0x76>
 80174f0:	4620      	mov	r0, r4
 80174f2:	f000 f895 	bl	8017620 <_free_r>
 80174f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174f8:	b111      	cbz	r1, 8017500 <_reclaim_reent+0x80>
 80174fa:	4620      	mov	r0, r4
 80174fc:	f000 f890 	bl	8017620 <_free_r>
 8017500:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017502:	b111      	cbz	r1, 801750a <_reclaim_reent+0x8a>
 8017504:	4620      	mov	r0, r4
 8017506:	f000 f88b 	bl	8017620 <_free_r>
 801750a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801750c:	b111      	cbz	r1, 8017514 <_reclaim_reent+0x94>
 801750e:	4620      	mov	r0, r4
 8017510:	f000 f886 	bl	8017620 <_free_r>
 8017514:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017516:	b111      	cbz	r1, 801751e <_reclaim_reent+0x9e>
 8017518:	4620      	mov	r0, r4
 801751a:	f000 f881 	bl	8017620 <_free_r>
 801751e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017520:	b111      	cbz	r1, 8017528 <_reclaim_reent+0xa8>
 8017522:	4620      	mov	r0, r4
 8017524:	f000 f87c 	bl	8017620 <_free_r>
 8017528:	6a23      	ldr	r3, [r4, #32]
 801752a:	b11b      	cbz	r3, 8017534 <_reclaim_reent+0xb4>
 801752c:	4620      	mov	r0, r4
 801752e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017532:	4718      	bx	r3
 8017534:	bd70      	pop	{r4, r5, r6, pc}
 8017536:	bf00      	nop
 8017538:	20000130 	.word	0x20000130

0801753c <_lseek_r>:
 801753c:	b538      	push	{r3, r4, r5, lr}
 801753e:	4d07      	ldr	r5, [pc, #28]	@ (801755c <_lseek_r+0x20>)
 8017540:	4604      	mov	r4, r0
 8017542:	4608      	mov	r0, r1
 8017544:	4611      	mov	r1, r2
 8017546:	2200      	movs	r2, #0
 8017548:	602a      	str	r2, [r5, #0]
 801754a:	461a      	mov	r2, r3
 801754c:	f7f0 fe96 	bl	800827c <_lseek>
 8017550:	1c43      	adds	r3, r0, #1
 8017552:	d102      	bne.n	801755a <_lseek_r+0x1e>
 8017554:	682b      	ldr	r3, [r5, #0]
 8017556:	b103      	cbz	r3, 801755a <_lseek_r+0x1e>
 8017558:	6023      	str	r3, [r4, #0]
 801755a:	bd38      	pop	{r3, r4, r5, pc}
 801755c:	2000aef8 	.word	0x2000aef8

08017560 <_read_r>:
 8017560:	b538      	push	{r3, r4, r5, lr}
 8017562:	4d07      	ldr	r5, [pc, #28]	@ (8017580 <_read_r+0x20>)
 8017564:	4604      	mov	r4, r0
 8017566:	4608      	mov	r0, r1
 8017568:	4611      	mov	r1, r2
 801756a:	2200      	movs	r2, #0
 801756c:	602a      	str	r2, [r5, #0]
 801756e:	461a      	mov	r2, r3
 8017570:	f7f0 fe24 	bl	80081bc <_read>
 8017574:	1c43      	adds	r3, r0, #1
 8017576:	d102      	bne.n	801757e <_read_r+0x1e>
 8017578:	682b      	ldr	r3, [r5, #0]
 801757a:	b103      	cbz	r3, 801757e <_read_r+0x1e>
 801757c:	6023      	str	r3, [r4, #0]
 801757e:	bd38      	pop	{r3, r4, r5, pc}
 8017580:	2000aef8 	.word	0x2000aef8

08017584 <_write_r>:
 8017584:	b538      	push	{r3, r4, r5, lr}
 8017586:	4d07      	ldr	r5, [pc, #28]	@ (80175a4 <_write_r+0x20>)
 8017588:	4604      	mov	r4, r0
 801758a:	4608      	mov	r0, r1
 801758c:	4611      	mov	r1, r2
 801758e:	2200      	movs	r2, #0
 8017590:	602a      	str	r2, [r5, #0]
 8017592:	461a      	mov	r2, r3
 8017594:	f7f0 fe2f 	bl	80081f6 <_write>
 8017598:	1c43      	adds	r3, r0, #1
 801759a:	d102      	bne.n	80175a2 <_write_r+0x1e>
 801759c:	682b      	ldr	r3, [r5, #0]
 801759e:	b103      	cbz	r3, 80175a2 <_write_r+0x1e>
 80175a0:	6023      	str	r3, [r4, #0]
 80175a2:	bd38      	pop	{r3, r4, r5, pc}
 80175a4:	2000aef8 	.word	0x2000aef8

080175a8 <__errno>:
 80175a8:	4b01      	ldr	r3, [pc, #4]	@ (80175b0 <__errno+0x8>)
 80175aa:	6818      	ldr	r0, [r3, #0]
 80175ac:	4770      	bx	lr
 80175ae:	bf00      	nop
 80175b0:	20000130 	.word	0x20000130

080175b4 <__libc_init_array>:
 80175b4:	b570      	push	{r4, r5, r6, lr}
 80175b6:	4d0d      	ldr	r5, [pc, #52]	@ (80175ec <__libc_init_array+0x38>)
 80175b8:	4c0d      	ldr	r4, [pc, #52]	@ (80175f0 <__libc_init_array+0x3c>)
 80175ba:	1b64      	subs	r4, r4, r5
 80175bc:	10a4      	asrs	r4, r4, #2
 80175be:	2600      	movs	r6, #0
 80175c0:	42a6      	cmp	r6, r4
 80175c2:	d109      	bne.n	80175d8 <__libc_init_array+0x24>
 80175c4:	4d0b      	ldr	r5, [pc, #44]	@ (80175f4 <__libc_init_array+0x40>)
 80175c6:	4c0c      	ldr	r4, [pc, #48]	@ (80175f8 <__libc_init_array+0x44>)
 80175c8:	f001 fe38 	bl	801923c <_init>
 80175cc:	1b64      	subs	r4, r4, r5
 80175ce:	10a4      	asrs	r4, r4, #2
 80175d0:	2600      	movs	r6, #0
 80175d2:	42a6      	cmp	r6, r4
 80175d4:	d105      	bne.n	80175e2 <__libc_init_array+0x2e>
 80175d6:	bd70      	pop	{r4, r5, r6, pc}
 80175d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80175dc:	4798      	blx	r3
 80175de:	3601      	adds	r6, #1
 80175e0:	e7ee      	b.n	80175c0 <__libc_init_array+0xc>
 80175e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80175e6:	4798      	blx	r3
 80175e8:	3601      	adds	r6, #1
 80175ea:	e7f2      	b.n	80175d2 <__libc_init_array+0x1e>
 80175ec:	0801c440 	.word	0x0801c440
 80175f0:	0801c440 	.word	0x0801c440
 80175f4:	0801c440 	.word	0x0801c440
 80175f8:	0801c444 	.word	0x0801c444

080175fc <__retarget_lock_init_recursive>:
 80175fc:	4770      	bx	lr

080175fe <__retarget_lock_acquire_recursive>:
 80175fe:	4770      	bx	lr

08017600 <__retarget_lock_release_recursive>:
 8017600:	4770      	bx	lr

08017602 <memcpy>:
 8017602:	440a      	add	r2, r1
 8017604:	4291      	cmp	r1, r2
 8017606:	f100 33ff 	add.w	r3, r0, #4294967295
 801760a:	d100      	bne.n	801760e <memcpy+0xc>
 801760c:	4770      	bx	lr
 801760e:	b510      	push	{r4, lr}
 8017610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017618:	4291      	cmp	r1, r2
 801761a:	d1f9      	bne.n	8017610 <memcpy+0xe>
 801761c:	bd10      	pop	{r4, pc}
	...

08017620 <_free_r>:
 8017620:	b538      	push	{r3, r4, r5, lr}
 8017622:	4605      	mov	r5, r0
 8017624:	2900      	cmp	r1, #0
 8017626:	d041      	beq.n	80176ac <_free_r+0x8c>
 8017628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801762c:	1f0c      	subs	r4, r1, #4
 801762e:	2b00      	cmp	r3, #0
 8017630:	bfb8      	it	lt
 8017632:	18e4      	addlt	r4, r4, r3
 8017634:	f000 f8e0 	bl	80177f8 <__malloc_lock>
 8017638:	4a1d      	ldr	r2, [pc, #116]	@ (80176b0 <_free_r+0x90>)
 801763a:	6813      	ldr	r3, [r2, #0]
 801763c:	b933      	cbnz	r3, 801764c <_free_r+0x2c>
 801763e:	6063      	str	r3, [r4, #4]
 8017640:	6014      	str	r4, [r2, #0]
 8017642:	4628      	mov	r0, r5
 8017644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017648:	f000 b8dc 	b.w	8017804 <__malloc_unlock>
 801764c:	42a3      	cmp	r3, r4
 801764e:	d908      	bls.n	8017662 <_free_r+0x42>
 8017650:	6820      	ldr	r0, [r4, #0]
 8017652:	1821      	adds	r1, r4, r0
 8017654:	428b      	cmp	r3, r1
 8017656:	bf01      	itttt	eq
 8017658:	6819      	ldreq	r1, [r3, #0]
 801765a:	685b      	ldreq	r3, [r3, #4]
 801765c:	1809      	addeq	r1, r1, r0
 801765e:	6021      	streq	r1, [r4, #0]
 8017660:	e7ed      	b.n	801763e <_free_r+0x1e>
 8017662:	461a      	mov	r2, r3
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	b10b      	cbz	r3, 801766c <_free_r+0x4c>
 8017668:	42a3      	cmp	r3, r4
 801766a:	d9fa      	bls.n	8017662 <_free_r+0x42>
 801766c:	6811      	ldr	r1, [r2, #0]
 801766e:	1850      	adds	r0, r2, r1
 8017670:	42a0      	cmp	r0, r4
 8017672:	d10b      	bne.n	801768c <_free_r+0x6c>
 8017674:	6820      	ldr	r0, [r4, #0]
 8017676:	4401      	add	r1, r0
 8017678:	1850      	adds	r0, r2, r1
 801767a:	4283      	cmp	r3, r0
 801767c:	6011      	str	r1, [r2, #0]
 801767e:	d1e0      	bne.n	8017642 <_free_r+0x22>
 8017680:	6818      	ldr	r0, [r3, #0]
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	6053      	str	r3, [r2, #4]
 8017686:	4408      	add	r0, r1
 8017688:	6010      	str	r0, [r2, #0]
 801768a:	e7da      	b.n	8017642 <_free_r+0x22>
 801768c:	d902      	bls.n	8017694 <_free_r+0x74>
 801768e:	230c      	movs	r3, #12
 8017690:	602b      	str	r3, [r5, #0]
 8017692:	e7d6      	b.n	8017642 <_free_r+0x22>
 8017694:	6820      	ldr	r0, [r4, #0]
 8017696:	1821      	adds	r1, r4, r0
 8017698:	428b      	cmp	r3, r1
 801769a:	bf04      	itt	eq
 801769c:	6819      	ldreq	r1, [r3, #0]
 801769e:	685b      	ldreq	r3, [r3, #4]
 80176a0:	6063      	str	r3, [r4, #4]
 80176a2:	bf04      	itt	eq
 80176a4:	1809      	addeq	r1, r1, r0
 80176a6:	6021      	streq	r1, [r4, #0]
 80176a8:	6054      	str	r4, [r2, #4]
 80176aa:	e7ca      	b.n	8017642 <_free_r+0x22>
 80176ac:	bd38      	pop	{r3, r4, r5, pc}
 80176ae:	bf00      	nop
 80176b0:	2000af04 	.word	0x2000af04

080176b4 <sbrk_aligned>:
 80176b4:	b570      	push	{r4, r5, r6, lr}
 80176b6:	4e0f      	ldr	r6, [pc, #60]	@ (80176f4 <sbrk_aligned+0x40>)
 80176b8:	460c      	mov	r4, r1
 80176ba:	6831      	ldr	r1, [r6, #0]
 80176bc:	4605      	mov	r5, r0
 80176be:	b911      	cbnz	r1, 80176c6 <sbrk_aligned+0x12>
 80176c0:	f000 fe16 	bl	80182f0 <_sbrk_r>
 80176c4:	6030      	str	r0, [r6, #0]
 80176c6:	4621      	mov	r1, r4
 80176c8:	4628      	mov	r0, r5
 80176ca:	f000 fe11 	bl	80182f0 <_sbrk_r>
 80176ce:	1c43      	adds	r3, r0, #1
 80176d0:	d103      	bne.n	80176da <sbrk_aligned+0x26>
 80176d2:	f04f 34ff 	mov.w	r4, #4294967295
 80176d6:	4620      	mov	r0, r4
 80176d8:	bd70      	pop	{r4, r5, r6, pc}
 80176da:	1cc4      	adds	r4, r0, #3
 80176dc:	f024 0403 	bic.w	r4, r4, #3
 80176e0:	42a0      	cmp	r0, r4
 80176e2:	d0f8      	beq.n	80176d6 <sbrk_aligned+0x22>
 80176e4:	1a21      	subs	r1, r4, r0
 80176e6:	4628      	mov	r0, r5
 80176e8:	f000 fe02 	bl	80182f0 <_sbrk_r>
 80176ec:	3001      	adds	r0, #1
 80176ee:	d1f2      	bne.n	80176d6 <sbrk_aligned+0x22>
 80176f0:	e7ef      	b.n	80176d2 <sbrk_aligned+0x1e>
 80176f2:	bf00      	nop
 80176f4:	2000af00 	.word	0x2000af00

080176f8 <_malloc_r>:
 80176f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176fc:	1ccd      	adds	r5, r1, #3
 80176fe:	f025 0503 	bic.w	r5, r5, #3
 8017702:	3508      	adds	r5, #8
 8017704:	2d0c      	cmp	r5, #12
 8017706:	bf38      	it	cc
 8017708:	250c      	movcc	r5, #12
 801770a:	2d00      	cmp	r5, #0
 801770c:	4606      	mov	r6, r0
 801770e:	db01      	blt.n	8017714 <_malloc_r+0x1c>
 8017710:	42a9      	cmp	r1, r5
 8017712:	d904      	bls.n	801771e <_malloc_r+0x26>
 8017714:	230c      	movs	r3, #12
 8017716:	6033      	str	r3, [r6, #0]
 8017718:	2000      	movs	r0, #0
 801771a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801771e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80177f4 <_malloc_r+0xfc>
 8017722:	f000 f869 	bl	80177f8 <__malloc_lock>
 8017726:	f8d8 3000 	ldr.w	r3, [r8]
 801772a:	461c      	mov	r4, r3
 801772c:	bb44      	cbnz	r4, 8017780 <_malloc_r+0x88>
 801772e:	4629      	mov	r1, r5
 8017730:	4630      	mov	r0, r6
 8017732:	f7ff ffbf 	bl	80176b4 <sbrk_aligned>
 8017736:	1c43      	adds	r3, r0, #1
 8017738:	4604      	mov	r4, r0
 801773a:	d158      	bne.n	80177ee <_malloc_r+0xf6>
 801773c:	f8d8 4000 	ldr.w	r4, [r8]
 8017740:	4627      	mov	r7, r4
 8017742:	2f00      	cmp	r7, #0
 8017744:	d143      	bne.n	80177ce <_malloc_r+0xd6>
 8017746:	2c00      	cmp	r4, #0
 8017748:	d04b      	beq.n	80177e2 <_malloc_r+0xea>
 801774a:	6823      	ldr	r3, [r4, #0]
 801774c:	4639      	mov	r1, r7
 801774e:	4630      	mov	r0, r6
 8017750:	eb04 0903 	add.w	r9, r4, r3
 8017754:	f000 fdcc 	bl	80182f0 <_sbrk_r>
 8017758:	4581      	cmp	r9, r0
 801775a:	d142      	bne.n	80177e2 <_malloc_r+0xea>
 801775c:	6821      	ldr	r1, [r4, #0]
 801775e:	1a6d      	subs	r5, r5, r1
 8017760:	4629      	mov	r1, r5
 8017762:	4630      	mov	r0, r6
 8017764:	f7ff ffa6 	bl	80176b4 <sbrk_aligned>
 8017768:	3001      	adds	r0, #1
 801776a:	d03a      	beq.n	80177e2 <_malloc_r+0xea>
 801776c:	6823      	ldr	r3, [r4, #0]
 801776e:	442b      	add	r3, r5
 8017770:	6023      	str	r3, [r4, #0]
 8017772:	f8d8 3000 	ldr.w	r3, [r8]
 8017776:	685a      	ldr	r2, [r3, #4]
 8017778:	bb62      	cbnz	r2, 80177d4 <_malloc_r+0xdc>
 801777a:	f8c8 7000 	str.w	r7, [r8]
 801777e:	e00f      	b.n	80177a0 <_malloc_r+0xa8>
 8017780:	6822      	ldr	r2, [r4, #0]
 8017782:	1b52      	subs	r2, r2, r5
 8017784:	d420      	bmi.n	80177c8 <_malloc_r+0xd0>
 8017786:	2a0b      	cmp	r2, #11
 8017788:	d917      	bls.n	80177ba <_malloc_r+0xc2>
 801778a:	1961      	adds	r1, r4, r5
 801778c:	42a3      	cmp	r3, r4
 801778e:	6025      	str	r5, [r4, #0]
 8017790:	bf18      	it	ne
 8017792:	6059      	strne	r1, [r3, #4]
 8017794:	6863      	ldr	r3, [r4, #4]
 8017796:	bf08      	it	eq
 8017798:	f8c8 1000 	streq.w	r1, [r8]
 801779c:	5162      	str	r2, [r4, r5]
 801779e:	604b      	str	r3, [r1, #4]
 80177a0:	4630      	mov	r0, r6
 80177a2:	f000 f82f 	bl	8017804 <__malloc_unlock>
 80177a6:	f104 000b 	add.w	r0, r4, #11
 80177aa:	1d23      	adds	r3, r4, #4
 80177ac:	f020 0007 	bic.w	r0, r0, #7
 80177b0:	1ac2      	subs	r2, r0, r3
 80177b2:	bf1c      	itt	ne
 80177b4:	1a1b      	subne	r3, r3, r0
 80177b6:	50a3      	strne	r3, [r4, r2]
 80177b8:	e7af      	b.n	801771a <_malloc_r+0x22>
 80177ba:	6862      	ldr	r2, [r4, #4]
 80177bc:	42a3      	cmp	r3, r4
 80177be:	bf0c      	ite	eq
 80177c0:	f8c8 2000 	streq.w	r2, [r8]
 80177c4:	605a      	strne	r2, [r3, #4]
 80177c6:	e7eb      	b.n	80177a0 <_malloc_r+0xa8>
 80177c8:	4623      	mov	r3, r4
 80177ca:	6864      	ldr	r4, [r4, #4]
 80177cc:	e7ae      	b.n	801772c <_malloc_r+0x34>
 80177ce:	463c      	mov	r4, r7
 80177d0:	687f      	ldr	r7, [r7, #4]
 80177d2:	e7b6      	b.n	8017742 <_malloc_r+0x4a>
 80177d4:	461a      	mov	r2, r3
 80177d6:	685b      	ldr	r3, [r3, #4]
 80177d8:	42a3      	cmp	r3, r4
 80177da:	d1fb      	bne.n	80177d4 <_malloc_r+0xdc>
 80177dc:	2300      	movs	r3, #0
 80177de:	6053      	str	r3, [r2, #4]
 80177e0:	e7de      	b.n	80177a0 <_malloc_r+0xa8>
 80177e2:	230c      	movs	r3, #12
 80177e4:	6033      	str	r3, [r6, #0]
 80177e6:	4630      	mov	r0, r6
 80177e8:	f000 f80c 	bl	8017804 <__malloc_unlock>
 80177ec:	e794      	b.n	8017718 <_malloc_r+0x20>
 80177ee:	6005      	str	r5, [r0, #0]
 80177f0:	e7d6      	b.n	80177a0 <_malloc_r+0xa8>
 80177f2:	bf00      	nop
 80177f4:	2000af04 	.word	0x2000af04

080177f8 <__malloc_lock>:
 80177f8:	4801      	ldr	r0, [pc, #4]	@ (8017800 <__malloc_lock+0x8>)
 80177fa:	f7ff bf00 	b.w	80175fe <__retarget_lock_acquire_recursive>
 80177fe:	bf00      	nop
 8017800:	2000aefc 	.word	0x2000aefc

08017804 <__malloc_unlock>:
 8017804:	4801      	ldr	r0, [pc, #4]	@ (801780c <__malloc_unlock+0x8>)
 8017806:	f7ff befb 	b.w	8017600 <__retarget_lock_release_recursive>
 801780a:	bf00      	nop
 801780c:	2000aefc 	.word	0x2000aefc

08017810 <__ssputs_r>:
 8017810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017814:	688e      	ldr	r6, [r1, #8]
 8017816:	461f      	mov	r7, r3
 8017818:	42be      	cmp	r6, r7
 801781a:	680b      	ldr	r3, [r1, #0]
 801781c:	4682      	mov	sl, r0
 801781e:	460c      	mov	r4, r1
 8017820:	4690      	mov	r8, r2
 8017822:	d82d      	bhi.n	8017880 <__ssputs_r+0x70>
 8017824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017828:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801782c:	d026      	beq.n	801787c <__ssputs_r+0x6c>
 801782e:	6965      	ldr	r5, [r4, #20]
 8017830:	6909      	ldr	r1, [r1, #16]
 8017832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017836:	eba3 0901 	sub.w	r9, r3, r1
 801783a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801783e:	1c7b      	adds	r3, r7, #1
 8017840:	444b      	add	r3, r9
 8017842:	106d      	asrs	r5, r5, #1
 8017844:	429d      	cmp	r5, r3
 8017846:	bf38      	it	cc
 8017848:	461d      	movcc	r5, r3
 801784a:	0553      	lsls	r3, r2, #21
 801784c:	d527      	bpl.n	801789e <__ssputs_r+0x8e>
 801784e:	4629      	mov	r1, r5
 8017850:	f7ff ff52 	bl	80176f8 <_malloc_r>
 8017854:	4606      	mov	r6, r0
 8017856:	b360      	cbz	r0, 80178b2 <__ssputs_r+0xa2>
 8017858:	6921      	ldr	r1, [r4, #16]
 801785a:	464a      	mov	r2, r9
 801785c:	f7ff fed1 	bl	8017602 <memcpy>
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801786a:	81a3      	strh	r3, [r4, #12]
 801786c:	6126      	str	r6, [r4, #16]
 801786e:	6165      	str	r5, [r4, #20]
 8017870:	444e      	add	r6, r9
 8017872:	eba5 0509 	sub.w	r5, r5, r9
 8017876:	6026      	str	r6, [r4, #0]
 8017878:	60a5      	str	r5, [r4, #8]
 801787a:	463e      	mov	r6, r7
 801787c:	42be      	cmp	r6, r7
 801787e:	d900      	bls.n	8017882 <__ssputs_r+0x72>
 8017880:	463e      	mov	r6, r7
 8017882:	6820      	ldr	r0, [r4, #0]
 8017884:	4632      	mov	r2, r6
 8017886:	4641      	mov	r1, r8
 8017888:	f000 fcf6 	bl	8018278 <memmove>
 801788c:	68a3      	ldr	r3, [r4, #8]
 801788e:	1b9b      	subs	r3, r3, r6
 8017890:	60a3      	str	r3, [r4, #8]
 8017892:	6823      	ldr	r3, [r4, #0]
 8017894:	4433      	add	r3, r6
 8017896:	6023      	str	r3, [r4, #0]
 8017898:	2000      	movs	r0, #0
 801789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801789e:	462a      	mov	r2, r5
 80178a0:	f000 fd36 	bl	8018310 <_realloc_r>
 80178a4:	4606      	mov	r6, r0
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d1e0      	bne.n	801786c <__ssputs_r+0x5c>
 80178aa:	6921      	ldr	r1, [r4, #16]
 80178ac:	4650      	mov	r0, sl
 80178ae:	f7ff feb7 	bl	8017620 <_free_r>
 80178b2:	230c      	movs	r3, #12
 80178b4:	f8ca 3000 	str.w	r3, [sl]
 80178b8:	89a3      	ldrh	r3, [r4, #12]
 80178ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178be:	81a3      	strh	r3, [r4, #12]
 80178c0:	f04f 30ff 	mov.w	r0, #4294967295
 80178c4:	e7e9      	b.n	801789a <__ssputs_r+0x8a>
	...

080178c8 <_svfiprintf_r>:
 80178c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178cc:	4698      	mov	r8, r3
 80178ce:	898b      	ldrh	r3, [r1, #12]
 80178d0:	061b      	lsls	r3, r3, #24
 80178d2:	b09d      	sub	sp, #116	@ 0x74
 80178d4:	4607      	mov	r7, r0
 80178d6:	460d      	mov	r5, r1
 80178d8:	4614      	mov	r4, r2
 80178da:	d510      	bpl.n	80178fe <_svfiprintf_r+0x36>
 80178dc:	690b      	ldr	r3, [r1, #16]
 80178de:	b973      	cbnz	r3, 80178fe <_svfiprintf_r+0x36>
 80178e0:	2140      	movs	r1, #64	@ 0x40
 80178e2:	f7ff ff09 	bl	80176f8 <_malloc_r>
 80178e6:	6028      	str	r0, [r5, #0]
 80178e8:	6128      	str	r0, [r5, #16]
 80178ea:	b930      	cbnz	r0, 80178fa <_svfiprintf_r+0x32>
 80178ec:	230c      	movs	r3, #12
 80178ee:	603b      	str	r3, [r7, #0]
 80178f0:	f04f 30ff 	mov.w	r0, #4294967295
 80178f4:	b01d      	add	sp, #116	@ 0x74
 80178f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fa:	2340      	movs	r3, #64	@ 0x40
 80178fc:	616b      	str	r3, [r5, #20]
 80178fe:	2300      	movs	r3, #0
 8017900:	9309      	str	r3, [sp, #36]	@ 0x24
 8017902:	2320      	movs	r3, #32
 8017904:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017908:	f8cd 800c 	str.w	r8, [sp, #12]
 801790c:	2330      	movs	r3, #48	@ 0x30
 801790e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017aac <_svfiprintf_r+0x1e4>
 8017912:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017916:	f04f 0901 	mov.w	r9, #1
 801791a:	4623      	mov	r3, r4
 801791c:	469a      	mov	sl, r3
 801791e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017922:	b10a      	cbz	r2, 8017928 <_svfiprintf_r+0x60>
 8017924:	2a25      	cmp	r2, #37	@ 0x25
 8017926:	d1f9      	bne.n	801791c <_svfiprintf_r+0x54>
 8017928:	ebba 0b04 	subs.w	fp, sl, r4
 801792c:	d00b      	beq.n	8017946 <_svfiprintf_r+0x7e>
 801792e:	465b      	mov	r3, fp
 8017930:	4622      	mov	r2, r4
 8017932:	4629      	mov	r1, r5
 8017934:	4638      	mov	r0, r7
 8017936:	f7ff ff6b 	bl	8017810 <__ssputs_r>
 801793a:	3001      	adds	r0, #1
 801793c:	f000 80a7 	beq.w	8017a8e <_svfiprintf_r+0x1c6>
 8017940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017942:	445a      	add	r2, fp
 8017944:	9209      	str	r2, [sp, #36]	@ 0x24
 8017946:	f89a 3000 	ldrb.w	r3, [sl]
 801794a:	2b00      	cmp	r3, #0
 801794c:	f000 809f 	beq.w	8017a8e <_svfiprintf_r+0x1c6>
 8017950:	2300      	movs	r3, #0
 8017952:	f04f 32ff 	mov.w	r2, #4294967295
 8017956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801795a:	f10a 0a01 	add.w	sl, sl, #1
 801795e:	9304      	str	r3, [sp, #16]
 8017960:	9307      	str	r3, [sp, #28]
 8017962:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017966:	931a      	str	r3, [sp, #104]	@ 0x68
 8017968:	4654      	mov	r4, sl
 801796a:	2205      	movs	r2, #5
 801796c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017970:	484e      	ldr	r0, [pc, #312]	@ (8017aac <_svfiprintf_r+0x1e4>)
 8017972:	f7e8 fc05 	bl	8000180 <memchr>
 8017976:	9a04      	ldr	r2, [sp, #16]
 8017978:	b9d8      	cbnz	r0, 80179b2 <_svfiprintf_r+0xea>
 801797a:	06d0      	lsls	r0, r2, #27
 801797c:	bf44      	itt	mi
 801797e:	2320      	movmi	r3, #32
 8017980:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017984:	0711      	lsls	r1, r2, #28
 8017986:	bf44      	itt	mi
 8017988:	232b      	movmi	r3, #43	@ 0x2b
 801798a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801798e:	f89a 3000 	ldrb.w	r3, [sl]
 8017992:	2b2a      	cmp	r3, #42	@ 0x2a
 8017994:	d015      	beq.n	80179c2 <_svfiprintf_r+0xfa>
 8017996:	9a07      	ldr	r2, [sp, #28]
 8017998:	4654      	mov	r4, sl
 801799a:	2000      	movs	r0, #0
 801799c:	f04f 0c0a 	mov.w	ip, #10
 80179a0:	4621      	mov	r1, r4
 80179a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179a6:	3b30      	subs	r3, #48	@ 0x30
 80179a8:	2b09      	cmp	r3, #9
 80179aa:	d94b      	bls.n	8017a44 <_svfiprintf_r+0x17c>
 80179ac:	b1b0      	cbz	r0, 80179dc <_svfiprintf_r+0x114>
 80179ae:	9207      	str	r2, [sp, #28]
 80179b0:	e014      	b.n	80179dc <_svfiprintf_r+0x114>
 80179b2:	eba0 0308 	sub.w	r3, r0, r8
 80179b6:	fa09 f303 	lsl.w	r3, r9, r3
 80179ba:	4313      	orrs	r3, r2
 80179bc:	9304      	str	r3, [sp, #16]
 80179be:	46a2      	mov	sl, r4
 80179c0:	e7d2      	b.n	8017968 <_svfiprintf_r+0xa0>
 80179c2:	9b03      	ldr	r3, [sp, #12]
 80179c4:	1d19      	adds	r1, r3, #4
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	9103      	str	r1, [sp, #12]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	bfbb      	ittet	lt
 80179ce:	425b      	neglt	r3, r3
 80179d0:	f042 0202 	orrlt.w	r2, r2, #2
 80179d4:	9307      	strge	r3, [sp, #28]
 80179d6:	9307      	strlt	r3, [sp, #28]
 80179d8:	bfb8      	it	lt
 80179da:	9204      	strlt	r2, [sp, #16]
 80179dc:	7823      	ldrb	r3, [r4, #0]
 80179de:	2b2e      	cmp	r3, #46	@ 0x2e
 80179e0:	d10a      	bne.n	80179f8 <_svfiprintf_r+0x130>
 80179e2:	7863      	ldrb	r3, [r4, #1]
 80179e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80179e6:	d132      	bne.n	8017a4e <_svfiprintf_r+0x186>
 80179e8:	9b03      	ldr	r3, [sp, #12]
 80179ea:	1d1a      	adds	r2, r3, #4
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	9203      	str	r2, [sp, #12]
 80179f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80179f4:	3402      	adds	r4, #2
 80179f6:	9305      	str	r3, [sp, #20]
 80179f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017abc <_svfiprintf_r+0x1f4>
 80179fc:	7821      	ldrb	r1, [r4, #0]
 80179fe:	2203      	movs	r2, #3
 8017a00:	4650      	mov	r0, sl
 8017a02:	f7e8 fbbd 	bl	8000180 <memchr>
 8017a06:	b138      	cbz	r0, 8017a18 <_svfiprintf_r+0x150>
 8017a08:	9b04      	ldr	r3, [sp, #16]
 8017a0a:	eba0 000a 	sub.w	r0, r0, sl
 8017a0e:	2240      	movs	r2, #64	@ 0x40
 8017a10:	4082      	lsls	r2, r0
 8017a12:	4313      	orrs	r3, r2
 8017a14:	3401      	adds	r4, #1
 8017a16:	9304      	str	r3, [sp, #16]
 8017a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a1c:	4824      	ldr	r0, [pc, #144]	@ (8017ab0 <_svfiprintf_r+0x1e8>)
 8017a1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a22:	2206      	movs	r2, #6
 8017a24:	f7e8 fbac 	bl	8000180 <memchr>
 8017a28:	2800      	cmp	r0, #0
 8017a2a:	d036      	beq.n	8017a9a <_svfiprintf_r+0x1d2>
 8017a2c:	4b21      	ldr	r3, [pc, #132]	@ (8017ab4 <_svfiprintf_r+0x1ec>)
 8017a2e:	bb1b      	cbnz	r3, 8017a78 <_svfiprintf_r+0x1b0>
 8017a30:	9b03      	ldr	r3, [sp, #12]
 8017a32:	3307      	adds	r3, #7
 8017a34:	f023 0307 	bic.w	r3, r3, #7
 8017a38:	3308      	adds	r3, #8
 8017a3a:	9303      	str	r3, [sp, #12]
 8017a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a3e:	4433      	add	r3, r6
 8017a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a42:	e76a      	b.n	801791a <_svfiprintf_r+0x52>
 8017a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a48:	460c      	mov	r4, r1
 8017a4a:	2001      	movs	r0, #1
 8017a4c:	e7a8      	b.n	80179a0 <_svfiprintf_r+0xd8>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	3401      	adds	r4, #1
 8017a52:	9305      	str	r3, [sp, #20]
 8017a54:	4619      	mov	r1, r3
 8017a56:	f04f 0c0a 	mov.w	ip, #10
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a60:	3a30      	subs	r2, #48	@ 0x30
 8017a62:	2a09      	cmp	r2, #9
 8017a64:	d903      	bls.n	8017a6e <_svfiprintf_r+0x1a6>
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d0c6      	beq.n	80179f8 <_svfiprintf_r+0x130>
 8017a6a:	9105      	str	r1, [sp, #20]
 8017a6c:	e7c4      	b.n	80179f8 <_svfiprintf_r+0x130>
 8017a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a72:	4604      	mov	r4, r0
 8017a74:	2301      	movs	r3, #1
 8017a76:	e7f0      	b.n	8017a5a <_svfiprintf_r+0x192>
 8017a78:	ab03      	add	r3, sp, #12
 8017a7a:	9300      	str	r3, [sp, #0]
 8017a7c:	462a      	mov	r2, r5
 8017a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8017ab8 <_svfiprintf_r+0x1f0>)
 8017a80:	a904      	add	r1, sp, #16
 8017a82:	4638      	mov	r0, r7
 8017a84:	f3af 8000 	nop.w
 8017a88:	1c42      	adds	r2, r0, #1
 8017a8a:	4606      	mov	r6, r0
 8017a8c:	d1d6      	bne.n	8017a3c <_svfiprintf_r+0x174>
 8017a8e:	89ab      	ldrh	r3, [r5, #12]
 8017a90:	065b      	lsls	r3, r3, #25
 8017a92:	f53f af2d 	bmi.w	80178f0 <_svfiprintf_r+0x28>
 8017a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a98:	e72c      	b.n	80178f4 <_svfiprintf_r+0x2c>
 8017a9a:	ab03      	add	r3, sp, #12
 8017a9c:	9300      	str	r3, [sp, #0]
 8017a9e:	462a      	mov	r2, r5
 8017aa0:	4b05      	ldr	r3, [pc, #20]	@ (8017ab8 <_svfiprintf_r+0x1f0>)
 8017aa2:	a904      	add	r1, sp, #16
 8017aa4:	4638      	mov	r0, r7
 8017aa6:	f000 f9bb 	bl	8017e20 <_printf_i>
 8017aaa:	e7ed      	b.n	8017a88 <_svfiprintf_r+0x1c0>
 8017aac:	0801c3c4 	.word	0x0801c3c4
 8017ab0:	0801c3ce 	.word	0x0801c3ce
 8017ab4:	00000000 	.word	0x00000000
 8017ab8:	08017811 	.word	0x08017811
 8017abc:	0801c3ca 	.word	0x0801c3ca

08017ac0 <__sfputc_r>:
 8017ac0:	6893      	ldr	r3, [r2, #8]
 8017ac2:	3b01      	subs	r3, #1
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	b410      	push	{r4}
 8017ac8:	6093      	str	r3, [r2, #8]
 8017aca:	da08      	bge.n	8017ade <__sfputc_r+0x1e>
 8017acc:	6994      	ldr	r4, [r2, #24]
 8017ace:	42a3      	cmp	r3, r4
 8017ad0:	db01      	blt.n	8017ad6 <__sfputc_r+0x16>
 8017ad2:	290a      	cmp	r1, #10
 8017ad4:	d103      	bne.n	8017ade <__sfputc_r+0x1e>
 8017ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ada:	f7ff bc24 	b.w	8017326 <__swbuf_r>
 8017ade:	6813      	ldr	r3, [r2, #0]
 8017ae0:	1c58      	adds	r0, r3, #1
 8017ae2:	6010      	str	r0, [r2, #0]
 8017ae4:	7019      	strb	r1, [r3, #0]
 8017ae6:	4608      	mov	r0, r1
 8017ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017aec:	4770      	bx	lr

08017aee <__sfputs_r>:
 8017aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017af0:	4606      	mov	r6, r0
 8017af2:	460f      	mov	r7, r1
 8017af4:	4614      	mov	r4, r2
 8017af6:	18d5      	adds	r5, r2, r3
 8017af8:	42ac      	cmp	r4, r5
 8017afa:	d101      	bne.n	8017b00 <__sfputs_r+0x12>
 8017afc:	2000      	movs	r0, #0
 8017afe:	e007      	b.n	8017b10 <__sfputs_r+0x22>
 8017b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b04:	463a      	mov	r2, r7
 8017b06:	4630      	mov	r0, r6
 8017b08:	f7ff ffda 	bl	8017ac0 <__sfputc_r>
 8017b0c:	1c43      	adds	r3, r0, #1
 8017b0e:	d1f3      	bne.n	8017af8 <__sfputs_r+0xa>
 8017b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b14 <_vfiprintf_r>:
 8017b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b18:	460d      	mov	r5, r1
 8017b1a:	b09d      	sub	sp, #116	@ 0x74
 8017b1c:	4614      	mov	r4, r2
 8017b1e:	4698      	mov	r8, r3
 8017b20:	4606      	mov	r6, r0
 8017b22:	b118      	cbz	r0, 8017b2c <_vfiprintf_r+0x18>
 8017b24:	6a03      	ldr	r3, [r0, #32]
 8017b26:	b90b      	cbnz	r3, 8017b2c <_vfiprintf_r+0x18>
 8017b28:	f7ff faf2 	bl	8017110 <__sinit>
 8017b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b2e:	07d9      	lsls	r1, r3, #31
 8017b30:	d405      	bmi.n	8017b3e <_vfiprintf_r+0x2a>
 8017b32:	89ab      	ldrh	r3, [r5, #12]
 8017b34:	059a      	lsls	r2, r3, #22
 8017b36:	d402      	bmi.n	8017b3e <_vfiprintf_r+0x2a>
 8017b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b3a:	f7ff fd60 	bl	80175fe <__retarget_lock_acquire_recursive>
 8017b3e:	89ab      	ldrh	r3, [r5, #12]
 8017b40:	071b      	lsls	r3, r3, #28
 8017b42:	d501      	bpl.n	8017b48 <_vfiprintf_r+0x34>
 8017b44:	692b      	ldr	r3, [r5, #16]
 8017b46:	b99b      	cbnz	r3, 8017b70 <_vfiprintf_r+0x5c>
 8017b48:	4629      	mov	r1, r5
 8017b4a:	4630      	mov	r0, r6
 8017b4c:	f7ff fc2a 	bl	80173a4 <__swsetup_r>
 8017b50:	b170      	cbz	r0, 8017b70 <_vfiprintf_r+0x5c>
 8017b52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b54:	07dc      	lsls	r4, r3, #31
 8017b56:	d504      	bpl.n	8017b62 <_vfiprintf_r+0x4e>
 8017b58:	f04f 30ff 	mov.w	r0, #4294967295
 8017b5c:	b01d      	add	sp, #116	@ 0x74
 8017b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b62:	89ab      	ldrh	r3, [r5, #12]
 8017b64:	0598      	lsls	r0, r3, #22
 8017b66:	d4f7      	bmi.n	8017b58 <_vfiprintf_r+0x44>
 8017b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b6a:	f7ff fd49 	bl	8017600 <__retarget_lock_release_recursive>
 8017b6e:	e7f3      	b.n	8017b58 <_vfiprintf_r+0x44>
 8017b70:	2300      	movs	r3, #0
 8017b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b74:	2320      	movs	r3, #32
 8017b76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b7e:	2330      	movs	r3, #48	@ 0x30
 8017b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017d30 <_vfiprintf_r+0x21c>
 8017b84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b88:	f04f 0901 	mov.w	r9, #1
 8017b8c:	4623      	mov	r3, r4
 8017b8e:	469a      	mov	sl, r3
 8017b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b94:	b10a      	cbz	r2, 8017b9a <_vfiprintf_r+0x86>
 8017b96:	2a25      	cmp	r2, #37	@ 0x25
 8017b98:	d1f9      	bne.n	8017b8e <_vfiprintf_r+0x7a>
 8017b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8017b9e:	d00b      	beq.n	8017bb8 <_vfiprintf_r+0xa4>
 8017ba0:	465b      	mov	r3, fp
 8017ba2:	4622      	mov	r2, r4
 8017ba4:	4629      	mov	r1, r5
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	f7ff ffa1 	bl	8017aee <__sfputs_r>
 8017bac:	3001      	adds	r0, #1
 8017bae:	f000 80a7 	beq.w	8017d00 <_vfiprintf_r+0x1ec>
 8017bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017bb4:	445a      	add	r2, fp
 8017bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8017bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	f000 809f 	beq.w	8017d00 <_vfiprintf_r+0x1ec>
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8017bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bcc:	f10a 0a01 	add.w	sl, sl, #1
 8017bd0:	9304      	str	r3, [sp, #16]
 8017bd2:	9307      	str	r3, [sp, #28]
 8017bd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8017bda:	4654      	mov	r4, sl
 8017bdc:	2205      	movs	r2, #5
 8017bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be2:	4853      	ldr	r0, [pc, #332]	@ (8017d30 <_vfiprintf_r+0x21c>)
 8017be4:	f7e8 facc 	bl	8000180 <memchr>
 8017be8:	9a04      	ldr	r2, [sp, #16]
 8017bea:	b9d8      	cbnz	r0, 8017c24 <_vfiprintf_r+0x110>
 8017bec:	06d1      	lsls	r1, r2, #27
 8017bee:	bf44      	itt	mi
 8017bf0:	2320      	movmi	r3, #32
 8017bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017bf6:	0713      	lsls	r3, r2, #28
 8017bf8:	bf44      	itt	mi
 8017bfa:	232b      	movmi	r3, #43	@ 0x2b
 8017bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c00:	f89a 3000 	ldrb.w	r3, [sl]
 8017c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c06:	d015      	beq.n	8017c34 <_vfiprintf_r+0x120>
 8017c08:	9a07      	ldr	r2, [sp, #28]
 8017c0a:	4654      	mov	r4, sl
 8017c0c:	2000      	movs	r0, #0
 8017c0e:	f04f 0c0a 	mov.w	ip, #10
 8017c12:	4621      	mov	r1, r4
 8017c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c18:	3b30      	subs	r3, #48	@ 0x30
 8017c1a:	2b09      	cmp	r3, #9
 8017c1c:	d94b      	bls.n	8017cb6 <_vfiprintf_r+0x1a2>
 8017c1e:	b1b0      	cbz	r0, 8017c4e <_vfiprintf_r+0x13a>
 8017c20:	9207      	str	r2, [sp, #28]
 8017c22:	e014      	b.n	8017c4e <_vfiprintf_r+0x13a>
 8017c24:	eba0 0308 	sub.w	r3, r0, r8
 8017c28:	fa09 f303 	lsl.w	r3, r9, r3
 8017c2c:	4313      	orrs	r3, r2
 8017c2e:	9304      	str	r3, [sp, #16]
 8017c30:	46a2      	mov	sl, r4
 8017c32:	e7d2      	b.n	8017bda <_vfiprintf_r+0xc6>
 8017c34:	9b03      	ldr	r3, [sp, #12]
 8017c36:	1d19      	adds	r1, r3, #4
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	9103      	str	r1, [sp, #12]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	bfbb      	ittet	lt
 8017c40:	425b      	neglt	r3, r3
 8017c42:	f042 0202 	orrlt.w	r2, r2, #2
 8017c46:	9307      	strge	r3, [sp, #28]
 8017c48:	9307      	strlt	r3, [sp, #28]
 8017c4a:	bfb8      	it	lt
 8017c4c:	9204      	strlt	r2, [sp, #16]
 8017c4e:	7823      	ldrb	r3, [r4, #0]
 8017c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c52:	d10a      	bne.n	8017c6a <_vfiprintf_r+0x156>
 8017c54:	7863      	ldrb	r3, [r4, #1]
 8017c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c58:	d132      	bne.n	8017cc0 <_vfiprintf_r+0x1ac>
 8017c5a:	9b03      	ldr	r3, [sp, #12]
 8017c5c:	1d1a      	adds	r2, r3, #4
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	9203      	str	r2, [sp, #12]
 8017c62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c66:	3402      	adds	r4, #2
 8017c68:	9305      	str	r3, [sp, #20]
 8017c6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017d40 <_vfiprintf_r+0x22c>
 8017c6e:	7821      	ldrb	r1, [r4, #0]
 8017c70:	2203      	movs	r2, #3
 8017c72:	4650      	mov	r0, sl
 8017c74:	f7e8 fa84 	bl	8000180 <memchr>
 8017c78:	b138      	cbz	r0, 8017c8a <_vfiprintf_r+0x176>
 8017c7a:	9b04      	ldr	r3, [sp, #16]
 8017c7c:	eba0 000a 	sub.w	r0, r0, sl
 8017c80:	2240      	movs	r2, #64	@ 0x40
 8017c82:	4082      	lsls	r2, r0
 8017c84:	4313      	orrs	r3, r2
 8017c86:	3401      	adds	r4, #1
 8017c88:	9304      	str	r3, [sp, #16]
 8017c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c8e:	4829      	ldr	r0, [pc, #164]	@ (8017d34 <_vfiprintf_r+0x220>)
 8017c90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017c94:	2206      	movs	r2, #6
 8017c96:	f7e8 fa73 	bl	8000180 <memchr>
 8017c9a:	2800      	cmp	r0, #0
 8017c9c:	d03f      	beq.n	8017d1e <_vfiprintf_r+0x20a>
 8017c9e:	4b26      	ldr	r3, [pc, #152]	@ (8017d38 <_vfiprintf_r+0x224>)
 8017ca0:	bb1b      	cbnz	r3, 8017cea <_vfiprintf_r+0x1d6>
 8017ca2:	9b03      	ldr	r3, [sp, #12]
 8017ca4:	3307      	adds	r3, #7
 8017ca6:	f023 0307 	bic.w	r3, r3, #7
 8017caa:	3308      	adds	r3, #8
 8017cac:	9303      	str	r3, [sp, #12]
 8017cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cb0:	443b      	add	r3, r7
 8017cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cb4:	e76a      	b.n	8017b8c <_vfiprintf_r+0x78>
 8017cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cba:	460c      	mov	r4, r1
 8017cbc:	2001      	movs	r0, #1
 8017cbe:	e7a8      	b.n	8017c12 <_vfiprintf_r+0xfe>
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	3401      	adds	r4, #1
 8017cc4:	9305      	str	r3, [sp, #20]
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	f04f 0c0a 	mov.w	ip, #10
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cd2:	3a30      	subs	r2, #48	@ 0x30
 8017cd4:	2a09      	cmp	r2, #9
 8017cd6:	d903      	bls.n	8017ce0 <_vfiprintf_r+0x1cc>
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d0c6      	beq.n	8017c6a <_vfiprintf_r+0x156>
 8017cdc:	9105      	str	r1, [sp, #20]
 8017cde:	e7c4      	b.n	8017c6a <_vfiprintf_r+0x156>
 8017ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ce4:	4604      	mov	r4, r0
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	e7f0      	b.n	8017ccc <_vfiprintf_r+0x1b8>
 8017cea:	ab03      	add	r3, sp, #12
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	462a      	mov	r2, r5
 8017cf0:	4b12      	ldr	r3, [pc, #72]	@ (8017d3c <_vfiprintf_r+0x228>)
 8017cf2:	a904      	add	r1, sp, #16
 8017cf4:	4630      	mov	r0, r6
 8017cf6:	f3af 8000 	nop.w
 8017cfa:	4607      	mov	r7, r0
 8017cfc:	1c78      	adds	r0, r7, #1
 8017cfe:	d1d6      	bne.n	8017cae <_vfiprintf_r+0x19a>
 8017d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d02:	07d9      	lsls	r1, r3, #31
 8017d04:	d405      	bmi.n	8017d12 <_vfiprintf_r+0x1fe>
 8017d06:	89ab      	ldrh	r3, [r5, #12]
 8017d08:	059a      	lsls	r2, r3, #22
 8017d0a:	d402      	bmi.n	8017d12 <_vfiprintf_r+0x1fe>
 8017d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d0e:	f7ff fc77 	bl	8017600 <__retarget_lock_release_recursive>
 8017d12:	89ab      	ldrh	r3, [r5, #12]
 8017d14:	065b      	lsls	r3, r3, #25
 8017d16:	f53f af1f 	bmi.w	8017b58 <_vfiprintf_r+0x44>
 8017d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d1c:	e71e      	b.n	8017b5c <_vfiprintf_r+0x48>
 8017d1e:	ab03      	add	r3, sp, #12
 8017d20:	9300      	str	r3, [sp, #0]
 8017d22:	462a      	mov	r2, r5
 8017d24:	4b05      	ldr	r3, [pc, #20]	@ (8017d3c <_vfiprintf_r+0x228>)
 8017d26:	a904      	add	r1, sp, #16
 8017d28:	4630      	mov	r0, r6
 8017d2a:	f000 f879 	bl	8017e20 <_printf_i>
 8017d2e:	e7e4      	b.n	8017cfa <_vfiprintf_r+0x1e6>
 8017d30:	0801c3c4 	.word	0x0801c3c4
 8017d34:	0801c3ce 	.word	0x0801c3ce
 8017d38:	00000000 	.word	0x00000000
 8017d3c:	08017aef 	.word	0x08017aef
 8017d40:	0801c3ca 	.word	0x0801c3ca

08017d44 <_printf_common>:
 8017d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d48:	4616      	mov	r6, r2
 8017d4a:	4698      	mov	r8, r3
 8017d4c:	688a      	ldr	r2, [r1, #8]
 8017d4e:	690b      	ldr	r3, [r1, #16]
 8017d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017d54:	4293      	cmp	r3, r2
 8017d56:	bfb8      	it	lt
 8017d58:	4613      	movlt	r3, r2
 8017d5a:	6033      	str	r3, [r6, #0]
 8017d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017d60:	4607      	mov	r7, r0
 8017d62:	460c      	mov	r4, r1
 8017d64:	b10a      	cbz	r2, 8017d6a <_printf_common+0x26>
 8017d66:	3301      	adds	r3, #1
 8017d68:	6033      	str	r3, [r6, #0]
 8017d6a:	6823      	ldr	r3, [r4, #0]
 8017d6c:	0699      	lsls	r1, r3, #26
 8017d6e:	bf42      	ittt	mi
 8017d70:	6833      	ldrmi	r3, [r6, #0]
 8017d72:	3302      	addmi	r3, #2
 8017d74:	6033      	strmi	r3, [r6, #0]
 8017d76:	6825      	ldr	r5, [r4, #0]
 8017d78:	f015 0506 	ands.w	r5, r5, #6
 8017d7c:	d106      	bne.n	8017d8c <_printf_common+0x48>
 8017d7e:	f104 0a19 	add.w	sl, r4, #25
 8017d82:	68e3      	ldr	r3, [r4, #12]
 8017d84:	6832      	ldr	r2, [r6, #0]
 8017d86:	1a9b      	subs	r3, r3, r2
 8017d88:	42ab      	cmp	r3, r5
 8017d8a:	dc26      	bgt.n	8017dda <_printf_common+0x96>
 8017d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017d90:	6822      	ldr	r2, [r4, #0]
 8017d92:	3b00      	subs	r3, #0
 8017d94:	bf18      	it	ne
 8017d96:	2301      	movne	r3, #1
 8017d98:	0692      	lsls	r2, r2, #26
 8017d9a:	d42b      	bmi.n	8017df4 <_printf_common+0xb0>
 8017d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017da0:	4641      	mov	r1, r8
 8017da2:	4638      	mov	r0, r7
 8017da4:	47c8      	blx	r9
 8017da6:	3001      	adds	r0, #1
 8017da8:	d01e      	beq.n	8017de8 <_printf_common+0xa4>
 8017daa:	6823      	ldr	r3, [r4, #0]
 8017dac:	6922      	ldr	r2, [r4, #16]
 8017dae:	f003 0306 	and.w	r3, r3, #6
 8017db2:	2b04      	cmp	r3, #4
 8017db4:	bf02      	ittt	eq
 8017db6:	68e5      	ldreq	r5, [r4, #12]
 8017db8:	6833      	ldreq	r3, [r6, #0]
 8017dba:	1aed      	subeq	r5, r5, r3
 8017dbc:	68a3      	ldr	r3, [r4, #8]
 8017dbe:	bf0c      	ite	eq
 8017dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017dc4:	2500      	movne	r5, #0
 8017dc6:	4293      	cmp	r3, r2
 8017dc8:	bfc4      	itt	gt
 8017dca:	1a9b      	subgt	r3, r3, r2
 8017dcc:	18ed      	addgt	r5, r5, r3
 8017dce:	2600      	movs	r6, #0
 8017dd0:	341a      	adds	r4, #26
 8017dd2:	42b5      	cmp	r5, r6
 8017dd4:	d11a      	bne.n	8017e0c <_printf_common+0xc8>
 8017dd6:	2000      	movs	r0, #0
 8017dd8:	e008      	b.n	8017dec <_printf_common+0xa8>
 8017dda:	2301      	movs	r3, #1
 8017ddc:	4652      	mov	r2, sl
 8017dde:	4641      	mov	r1, r8
 8017de0:	4638      	mov	r0, r7
 8017de2:	47c8      	blx	r9
 8017de4:	3001      	adds	r0, #1
 8017de6:	d103      	bne.n	8017df0 <_printf_common+0xac>
 8017de8:	f04f 30ff 	mov.w	r0, #4294967295
 8017dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017df0:	3501      	adds	r5, #1
 8017df2:	e7c6      	b.n	8017d82 <_printf_common+0x3e>
 8017df4:	18e1      	adds	r1, r4, r3
 8017df6:	1c5a      	adds	r2, r3, #1
 8017df8:	2030      	movs	r0, #48	@ 0x30
 8017dfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017dfe:	4422      	add	r2, r4
 8017e00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e08:	3302      	adds	r3, #2
 8017e0a:	e7c7      	b.n	8017d9c <_printf_common+0x58>
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	4622      	mov	r2, r4
 8017e10:	4641      	mov	r1, r8
 8017e12:	4638      	mov	r0, r7
 8017e14:	47c8      	blx	r9
 8017e16:	3001      	adds	r0, #1
 8017e18:	d0e6      	beq.n	8017de8 <_printf_common+0xa4>
 8017e1a:	3601      	adds	r6, #1
 8017e1c:	e7d9      	b.n	8017dd2 <_printf_common+0x8e>
	...

08017e20 <_printf_i>:
 8017e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e24:	7e0f      	ldrb	r7, [r1, #24]
 8017e26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e28:	2f78      	cmp	r7, #120	@ 0x78
 8017e2a:	4691      	mov	r9, r2
 8017e2c:	4680      	mov	r8, r0
 8017e2e:	460c      	mov	r4, r1
 8017e30:	469a      	mov	sl, r3
 8017e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e36:	d807      	bhi.n	8017e48 <_printf_i+0x28>
 8017e38:	2f62      	cmp	r7, #98	@ 0x62
 8017e3a:	d80a      	bhi.n	8017e52 <_printf_i+0x32>
 8017e3c:	2f00      	cmp	r7, #0
 8017e3e:	f000 80d1 	beq.w	8017fe4 <_printf_i+0x1c4>
 8017e42:	2f58      	cmp	r7, #88	@ 0x58
 8017e44:	f000 80b8 	beq.w	8017fb8 <_printf_i+0x198>
 8017e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017e50:	e03a      	b.n	8017ec8 <_printf_i+0xa8>
 8017e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017e56:	2b15      	cmp	r3, #21
 8017e58:	d8f6      	bhi.n	8017e48 <_printf_i+0x28>
 8017e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8017e60 <_printf_i+0x40>)
 8017e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e60:	08017eb9 	.word	0x08017eb9
 8017e64:	08017ecd 	.word	0x08017ecd
 8017e68:	08017e49 	.word	0x08017e49
 8017e6c:	08017e49 	.word	0x08017e49
 8017e70:	08017e49 	.word	0x08017e49
 8017e74:	08017e49 	.word	0x08017e49
 8017e78:	08017ecd 	.word	0x08017ecd
 8017e7c:	08017e49 	.word	0x08017e49
 8017e80:	08017e49 	.word	0x08017e49
 8017e84:	08017e49 	.word	0x08017e49
 8017e88:	08017e49 	.word	0x08017e49
 8017e8c:	08017fcb 	.word	0x08017fcb
 8017e90:	08017ef7 	.word	0x08017ef7
 8017e94:	08017f85 	.word	0x08017f85
 8017e98:	08017e49 	.word	0x08017e49
 8017e9c:	08017e49 	.word	0x08017e49
 8017ea0:	08017fed 	.word	0x08017fed
 8017ea4:	08017e49 	.word	0x08017e49
 8017ea8:	08017ef7 	.word	0x08017ef7
 8017eac:	08017e49 	.word	0x08017e49
 8017eb0:	08017e49 	.word	0x08017e49
 8017eb4:	08017f8d 	.word	0x08017f8d
 8017eb8:	6833      	ldr	r3, [r6, #0]
 8017eba:	1d1a      	adds	r2, r3, #4
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	6032      	str	r2, [r6, #0]
 8017ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ec8:	2301      	movs	r3, #1
 8017eca:	e09c      	b.n	8018006 <_printf_i+0x1e6>
 8017ecc:	6833      	ldr	r3, [r6, #0]
 8017ece:	6820      	ldr	r0, [r4, #0]
 8017ed0:	1d19      	adds	r1, r3, #4
 8017ed2:	6031      	str	r1, [r6, #0]
 8017ed4:	0606      	lsls	r6, r0, #24
 8017ed6:	d501      	bpl.n	8017edc <_printf_i+0xbc>
 8017ed8:	681d      	ldr	r5, [r3, #0]
 8017eda:	e003      	b.n	8017ee4 <_printf_i+0xc4>
 8017edc:	0645      	lsls	r5, r0, #25
 8017ede:	d5fb      	bpl.n	8017ed8 <_printf_i+0xb8>
 8017ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017ee4:	2d00      	cmp	r5, #0
 8017ee6:	da03      	bge.n	8017ef0 <_printf_i+0xd0>
 8017ee8:	232d      	movs	r3, #45	@ 0x2d
 8017eea:	426d      	negs	r5, r5
 8017eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017ef0:	4858      	ldr	r0, [pc, #352]	@ (8018054 <_printf_i+0x234>)
 8017ef2:	230a      	movs	r3, #10
 8017ef4:	e011      	b.n	8017f1a <_printf_i+0xfa>
 8017ef6:	6821      	ldr	r1, [r4, #0]
 8017ef8:	6833      	ldr	r3, [r6, #0]
 8017efa:	0608      	lsls	r0, r1, #24
 8017efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f00:	d402      	bmi.n	8017f08 <_printf_i+0xe8>
 8017f02:	0649      	lsls	r1, r1, #25
 8017f04:	bf48      	it	mi
 8017f06:	b2ad      	uxthmi	r5, r5
 8017f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f0a:	4852      	ldr	r0, [pc, #328]	@ (8018054 <_printf_i+0x234>)
 8017f0c:	6033      	str	r3, [r6, #0]
 8017f0e:	bf14      	ite	ne
 8017f10:	230a      	movne	r3, #10
 8017f12:	2308      	moveq	r3, #8
 8017f14:	2100      	movs	r1, #0
 8017f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f1a:	6866      	ldr	r6, [r4, #4]
 8017f1c:	60a6      	str	r6, [r4, #8]
 8017f1e:	2e00      	cmp	r6, #0
 8017f20:	db05      	blt.n	8017f2e <_printf_i+0x10e>
 8017f22:	6821      	ldr	r1, [r4, #0]
 8017f24:	432e      	orrs	r6, r5
 8017f26:	f021 0104 	bic.w	r1, r1, #4
 8017f2a:	6021      	str	r1, [r4, #0]
 8017f2c:	d04b      	beq.n	8017fc6 <_printf_i+0x1a6>
 8017f2e:	4616      	mov	r6, r2
 8017f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f34:	fb03 5711 	mls	r7, r3, r1, r5
 8017f38:	5dc7      	ldrb	r7, [r0, r7]
 8017f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f3e:	462f      	mov	r7, r5
 8017f40:	42bb      	cmp	r3, r7
 8017f42:	460d      	mov	r5, r1
 8017f44:	d9f4      	bls.n	8017f30 <_printf_i+0x110>
 8017f46:	2b08      	cmp	r3, #8
 8017f48:	d10b      	bne.n	8017f62 <_printf_i+0x142>
 8017f4a:	6823      	ldr	r3, [r4, #0]
 8017f4c:	07df      	lsls	r7, r3, #31
 8017f4e:	d508      	bpl.n	8017f62 <_printf_i+0x142>
 8017f50:	6923      	ldr	r3, [r4, #16]
 8017f52:	6861      	ldr	r1, [r4, #4]
 8017f54:	4299      	cmp	r1, r3
 8017f56:	bfde      	ittt	le
 8017f58:	2330      	movle	r3, #48	@ 0x30
 8017f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017f62:	1b92      	subs	r2, r2, r6
 8017f64:	6122      	str	r2, [r4, #16]
 8017f66:	f8cd a000 	str.w	sl, [sp]
 8017f6a:	464b      	mov	r3, r9
 8017f6c:	aa03      	add	r2, sp, #12
 8017f6e:	4621      	mov	r1, r4
 8017f70:	4640      	mov	r0, r8
 8017f72:	f7ff fee7 	bl	8017d44 <_printf_common>
 8017f76:	3001      	adds	r0, #1
 8017f78:	d14a      	bne.n	8018010 <_printf_i+0x1f0>
 8017f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8017f7e:	b004      	add	sp, #16
 8017f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f84:	6823      	ldr	r3, [r4, #0]
 8017f86:	f043 0320 	orr.w	r3, r3, #32
 8017f8a:	6023      	str	r3, [r4, #0]
 8017f8c:	4832      	ldr	r0, [pc, #200]	@ (8018058 <_printf_i+0x238>)
 8017f8e:	2778      	movs	r7, #120	@ 0x78
 8017f90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017f94:	6823      	ldr	r3, [r4, #0]
 8017f96:	6831      	ldr	r1, [r6, #0]
 8017f98:	061f      	lsls	r7, r3, #24
 8017f9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8017f9e:	d402      	bmi.n	8017fa6 <_printf_i+0x186>
 8017fa0:	065f      	lsls	r7, r3, #25
 8017fa2:	bf48      	it	mi
 8017fa4:	b2ad      	uxthmi	r5, r5
 8017fa6:	6031      	str	r1, [r6, #0]
 8017fa8:	07d9      	lsls	r1, r3, #31
 8017faa:	bf44      	itt	mi
 8017fac:	f043 0320 	orrmi.w	r3, r3, #32
 8017fb0:	6023      	strmi	r3, [r4, #0]
 8017fb2:	b11d      	cbz	r5, 8017fbc <_printf_i+0x19c>
 8017fb4:	2310      	movs	r3, #16
 8017fb6:	e7ad      	b.n	8017f14 <_printf_i+0xf4>
 8017fb8:	4826      	ldr	r0, [pc, #152]	@ (8018054 <_printf_i+0x234>)
 8017fba:	e7e9      	b.n	8017f90 <_printf_i+0x170>
 8017fbc:	6823      	ldr	r3, [r4, #0]
 8017fbe:	f023 0320 	bic.w	r3, r3, #32
 8017fc2:	6023      	str	r3, [r4, #0]
 8017fc4:	e7f6      	b.n	8017fb4 <_printf_i+0x194>
 8017fc6:	4616      	mov	r6, r2
 8017fc8:	e7bd      	b.n	8017f46 <_printf_i+0x126>
 8017fca:	6833      	ldr	r3, [r6, #0]
 8017fcc:	6825      	ldr	r5, [r4, #0]
 8017fce:	6961      	ldr	r1, [r4, #20]
 8017fd0:	1d18      	adds	r0, r3, #4
 8017fd2:	6030      	str	r0, [r6, #0]
 8017fd4:	062e      	lsls	r6, r5, #24
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	d501      	bpl.n	8017fde <_printf_i+0x1be>
 8017fda:	6019      	str	r1, [r3, #0]
 8017fdc:	e002      	b.n	8017fe4 <_printf_i+0x1c4>
 8017fde:	0668      	lsls	r0, r5, #25
 8017fe0:	d5fb      	bpl.n	8017fda <_printf_i+0x1ba>
 8017fe2:	8019      	strh	r1, [r3, #0]
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	6123      	str	r3, [r4, #16]
 8017fe8:	4616      	mov	r6, r2
 8017fea:	e7bc      	b.n	8017f66 <_printf_i+0x146>
 8017fec:	6833      	ldr	r3, [r6, #0]
 8017fee:	1d1a      	adds	r2, r3, #4
 8017ff0:	6032      	str	r2, [r6, #0]
 8017ff2:	681e      	ldr	r6, [r3, #0]
 8017ff4:	6862      	ldr	r2, [r4, #4]
 8017ff6:	2100      	movs	r1, #0
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	f7e8 f8c1 	bl	8000180 <memchr>
 8017ffe:	b108      	cbz	r0, 8018004 <_printf_i+0x1e4>
 8018000:	1b80      	subs	r0, r0, r6
 8018002:	6060      	str	r0, [r4, #4]
 8018004:	6863      	ldr	r3, [r4, #4]
 8018006:	6123      	str	r3, [r4, #16]
 8018008:	2300      	movs	r3, #0
 801800a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801800e:	e7aa      	b.n	8017f66 <_printf_i+0x146>
 8018010:	6923      	ldr	r3, [r4, #16]
 8018012:	4632      	mov	r2, r6
 8018014:	4649      	mov	r1, r9
 8018016:	4640      	mov	r0, r8
 8018018:	47d0      	blx	sl
 801801a:	3001      	adds	r0, #1
 801801c:	d0ad      	beq.n	8017f7a <_printf_i+0x15a>
 801801e:	6823      	ldr	r3, [r4, #0]
 8018020:	079b      	lsls	r3, r3, #30
 8018022:	d413      	bmi.n	801804c <_printf_i+0x22c>
 8018024:	68e0      	ldr	r0, [r4, #12]
 8018026:	9b03      	ldr	r3, [sp, #12]
 8018028:	4298      	cmp	r0, r3
 801802a:	bfb8      	it	lt
 801802c:	4618      	movlt	r0, r3
 801802e:	e7a6      	b.n	8017f7e <_printf_i+0x15e>
 8018030:	2301      	movs	r3, #1
 8018032:	4632      	mov	r2, r6
 8018034:	4649      	mov	r1, r9
 8018036:	4640      	mov	r0, r8
 8018038:	47d0      	blx	sl
 801803a:	3001      	adds	r0, #1
 801803c:	d09d      	beq.n	8017f7a <_printf_i+0x15a>
 801803e:	3501      	adds	r5, #1
 8018040:	68e3      	ldr	r3, [r4, #12]
 8018042:	9903      	ldr	r1, [sp, #12]
 8018044:	1a5b      	subs	r3, r3, r1
 8018046:	42ab      	cmp	r3, r5
 8018048:	dcf2      	bgt.n	8018030 <_printf_i+0x210>
 801804a:	e7eb      	b.n	8018024 <_printf_i+0x204>
 801804c:	2500      	movs	r5, #0
 801804e:	f104 0619 	add.w	r6, r4, #25
 8018052:	e7f5      	b.n	8018040 <_printf_i+0x220>
 8018054:	0801c3d5 	.word	0x0801c3d5
 8018058:	0801c3e6 	.word	0x0801c3e6

0801805c <__sflush_r>:
 801805c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018064:	0716      	lsls	r6, r2, #28
 8018066:	4605      	mov	r5, r0
 8018068:	460c      	mov	r4, r1
 801806a:	d454      	bmi.n	8018116 <__sflush_r+0xba>
 801806c:	684b      	ldr	r3, [r1, #4]
 801806e:	2b00      	cmp	r3, #0
 8018070:	dc02      	bgt.n	8018078 <__sflush_r+0x1c>
 8018072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018074:	2b00      	cmp	r3, #0
 8018076:	dd48      	ble.n	801810a <__sflush_r+0xae>
 8018078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801807a:	2e00      	cmp	r6, #0
 801807c:	d045      	beq.n	801810a <__sflush_r+0xae>
 801807e:	2300      	movs	r3, #0
 8018080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018084:	682f      	ldr	r7, [r5, #0]
 8018086:	6a21      	ldr	r1, [r4, #32]
 8018088:	602b      	str	r3, [r5, #0]
 801808a:	d030      	beq.n	80180ee <__sflush_r+0x92>
 801808c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801808e:	89a3      	ldrh	r3, [r4, #12]
 8018090:	0759      	lsls	r1, r3, #29
 8018092:	d505      	bpl.n	80180a0 <__sflush_r+0x44>
 8018094:	6863      	ldr	r3, [r4, #4]
 8018096:	1ad2      	subs	r2, r2, r3
 8018098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801809a:	b10b      	cbz	r3, 80180a0 <__sflush_r+0x44>
 801809c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801809e:	1ad2      	subs	r2, r2, r3
 80180a0:	2300      	movs	r3, #0
 80180a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80180a4:	6a21      	ldr	r1, [r4, #32]
 80180a6:	4628      	mov	r0, r5
 80180a8:	47b0      	blx	r6
 80180aa:	1c43      	adds	r3, r0, #1
 80180ac:	89a3      	ldrh	r3, [r4, #12]
 80180ae:	d106      	bne.n	80180be <__sflush_r+0x62>
 80180b0:	6829      	ldr	r1, [r5, #0]
 80180b2:	291d      	cmp	r1, #29
 80180b4:	d82b      	bhi.n	801810e <__sflush_r+0xb2>
 80180b6:	4a2a      	ldr	r2, [pc, #168]	@ (8018160 <__sflush_r+0x104>)
 80180b8:	40ca      	lsrs	r2, r1
 80180ba:	07d6      	lsls	r6, r2, #31
 80180bc:	d527      	bpl.n	801810e <__sflush_r+0xb2>
 80180be:	2200      	movs	r2, #0
 80180c0:	6062      	str	r2, [r4, #4]
 80180c2:	04d9      	lsls	r1, r3, #19
 80180c4:	6922      	ldr	r2, [r4, #16]
 80180c6:	6022      	str	r2, [r4, #0]
 80180c8:	d504      	bpl.n	80180d4 <__sflush_r+0x78>
 80180ca:	1c42      	adds	r2, r0, #1
 80180cc:	d101      	bne.n	80180d2 <__sflush_r+0x76>
 80180ce:	682b      	ldr	r3, [r5, #0]
 80180d0:	b903      	cbnz	r3, 80180d4 <__sflush_r+0x78>
 80180d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80180d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80180d6:	602f      	str	r7, [r5, #0]
 80180d8:	b1b9      	cbz	r1, 801810a <__sflush_r+0xae>
 80180da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80180de:	4299      	cmp	r1, r3
 80180e0:	d002      	beq.n	80180e8 <__sflush_r+0x8c>
 80180e2:	4628      	mov	r0, r5
 80180e4:	f7ff fa9c 	bl	8017620 <_free_r>
 80180e8:	2300      	movs	r3, #0
 80180ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80180ec:	e00d      	b.n	801810a <__sflush_r+0xae>
 80180ee:	2301      	movs	r3, #1
 80180f0:	4628      	mov	r0, r5
 80180f2:	47b0      	blx	r6
 80180f4:	4602      	mov	r2, r0
 80180f6:	1c50      	adds	r0, r2, #1
 80180f8:	d1c9      	bne.n	801808e <__sflush_r+0x32>
 80180fa:	682b      	ldr	r3, [r5, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d0c6      	beq.n	801808e <__sflush_r+0x32>
 8018100:	2b1d      	cmp	r3, #29
 8018102:	d001      	beq.n	8018108 <__sflush_r+0xac>
 8018104:	2b16      	cmp	r3, #22
 8018106:	d11e      	bne.n	8018146 <__sflush_r+0xea>
 8018108:	602f      	str	r7, [r5, #0]
 801810a:	2000      	movs	r0, #0
 801810c:	e022      	b.n	8018154 <__sflush_r+0xf8>
 801810e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018112:	b21b      	sxth	r3, r3
 8018114:	e01b      	b.n	801814e <__sflush_r+0xf2>
 8018116:	690f      	ldr	r7, [r1, #16]
 8018118:	2f00      	cmp	r7, #0
 801811a:	d0f6      	beq.n	801810a <__sflush_r+0xae>
 801811c:	0793      	lsls	r3, r2, #30
 801811e:	680e      	ldr	r6, [r1, #0]
 8018120:	bf08      	it	eq
 8018122:	694b      	ldreq	r3, [r1, #20]
 8018124:	600f      	str	r7, [r1, #0]
 8018126:	bf18      	it	ne
 8018128:	2300      	movne	r3, #0
 801812a:	eba6 0807 	sub.w	r8, r6, r7
 801812e:	608b      	str	r3, [r1, #8]
 8018130:	f1b8 0f00 	cmp.w	r8, #0
 8018134:	dde9      	ble.n	801810a <__sflush_r+0xae>
 8018136:	6a21      	ldr	r1, [r4, #32]
 8018138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801813a:	4643      	mov	r3, r8
 801813c:	463a      	mov	r2, r7
 801813e:	4628      	mov	r0, r5
 8018140:	47b0      	blx	r6
 8018142:	2800      	cmp	r0, #0
 8018144:	dc08      	bgt.n	8018158 <__sflush_r+0xfc>
 8018146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801814a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801814e:	81a3      	strh	r3, [r4, #12]
 8018150:	f04f 30ff 	mov.w	r0, #4294967295
 8018154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018158:	4407      	add	r7, r0
 801815a:	eba8 0800 	sub.w	r8, r8, r0
 801815e:	e7e7      	b.n	8018130 <__sflush_r+0xd4>
 8018160:	20400001 	.word	0x20400001

08018164 <_fflush_r>:
 8018164:	b538      	push	{r3, r4, r5, lr}
 8018166:	690b      	ldr	r3, [r1, #16]
 8018168:	4605      	mov	r5, r0
 801816a:	460c      	mov	r4, r1
 801816c:	b913      	cbnz	r3, 8018174 <_fflush_r+0x10>
 801816e:	2500      	movs	r5, #0
 8018170:	4628      	mov	r0, r5
 8018172:	bd38      	pop	{r3, r4, r5, pc}
 8018174:	b118      	cbz	r0, 801817e <_fflush_r+0x1a>
 8018176:	6a03      	ldr	r3, [r0, #32]
 8018178:	b90b      	cbnz	r3, 801817e <_fflush_r+0x1a>
 801817a:	f7fe ffc9 	bl	8017110 <__sinit>
 801817e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d0f3      	beq.n	801816e <_fflush_r+0xa>
 8018186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018188:	07d0      	lsls	r0, r2, #31
 801818a:	d404      	bmi.n	8018196 <_fflush_r+0x32>
 801818c:	0599      	lsls	r1, r3, #22
 801818e:	d402      	bmi.n	8018196 <_fflush_r+0x32>
 8018190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018192:	f7ff fa34 	bl	80175fe <__retarget_lock_acquire_recursive>
 8018196:	4628      	mov	r0, r5
 8018198:	4621      	mov	r1, r4
 801819a:	f7ff ff5f 	bl	801805c <__sflush_r>
 801819e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80181a0:	07da      	lsls	r2, r3, #31
 80181a2:	4605      	mov	r5, r0
 80181a4:	d4e4      	bmi.n	8018170 <_fflush_r+0xc>
 80181a6:	89a3      	ldrh	r3, [r4, #12]
 80181a8:	059b      	lsls	r3, r3, #22
 80181aa:	d4e1      	bmi.n	8018170 <_fflush_r+0xc>
 80181ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181ae:	f7ff fa27 	bl	8017600 <__retarget_lock_release_recursive>
 80181b2:	e7dd      	b.n	8018170 <_fflush_r+0xc>

080181b4 <__swhatbuf_r>:
 80181b4:	b570      	push	{r4, r5, r6, lr}
 80181b6:	460c      	mov	r4, r1
 80181b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181bc:	2900      	cmp	r1, #0
 80181be:	b096      	sub	sp, #88	@ 0x58
 80181c0:	4615      	mov	r5, r2
 80181c2:	461e      	mov	r6, r3
 80181c4:	da0d      	bge.n	80181e2 <__swhatbuf_r+0x2e>
 80181c6:	89a3      	ldrh	r3, [r4, #12]
 80181c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80181cc:	f04f 0100 	mov.w	r1, #0
 80181d0:	bf14      	ite	ne
 80181d2:	2340      	movne	r3, #64	@ 0x40
 80181d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80181d8:	2000      	movs	r0, #0
 80181da:	6031      	str	r1, [r6, #0]
 80181dc:	602b      	str	r3, [r5, #0]
 80181de:	b016      	add	sp, #88	@ 0x58
 80181e0:	bd70      	pop	{r4, r5, r6, pc}
 80181e2:	466a      	mov	r2, sp
 80181e4:	f000 f862 	bl	80182ac <_fstat_r>
 80181e8:	2800      	cmp	r0, #0
 80181ea:	dbec      	blt.n	80181c6 <__swhatbuf_r+0x12>
 80181ec:	9901      	ldr	r1, [sp, #4]
 80181ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80181f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80181f6:	4259      	negs	r1, r3
 80181f8:	4159      	adcs	r1, r3
 80181fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80181fe:	e7eb      	b.n	80181d8 <__swhatbuf_r+0x24>

08018200 <__smakebuf_r>:
 8018200:	898b      	ldrh	r3, [r1, #12]
 8018202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018204:	079d      	lsls	r5, r3, #30
 8018206:	4606      	mov	r6, r0
 8018208:	460c      	mov	r4, r1
 801820a:	d507      	bpl.n	801821c <__smakebuf_r+0x1c>
 801820c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018210:	6023      	str	r3, [r4, #0]
 8018212:	6123      	str	r3, [r4, #16]
 8018214:	2301      	movs	r3, #1
 8018216:	6163      	str	r3, [r4, #20]
 8018218:	b003      	add	sp, #12
 801821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801821c:	ab01      	add	r3, sp, #4
 801821e:	466a      	mov	r2, sp
 8018220:	f7ff ffc8 	bl	80181b4 <__swhatbuf_r>
 8018224:	9f00      	ldr	r7, [sp, #0]
 8018226:	4605      	mov	r5, r0
 8018228:	4639      	mov	r1, r7
 801822a:	4630      	mov	r0, r6
 801822c:	f7ff fa64 	bl	80176f8 <_malloc_r>
 8018230:	b948      	cbnz	r0, 8018246 <__smakebuf_r+0x46>
 8018232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018236:	059a      	lsls	r2, r3, #22
 8018238:	d4ee      	bmi.n	8018218 <__smakebuf_r+0x18>
 801823a:	f023 0303 	bic.w	r3, r3, #3
 801823e:	f043 0302 	orr.w	r3, r3, #2
 8018242:	81a3      	strh	r3, [r4, #12]
 8018244:	e7e2      	b.n	801820c <__smakebuf_r+0xc>
 8018246:	89a3      	ldrh	r3, [r4, #12]
 8018248:	6020      	str	r0, [r4, #0]
 801824a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801824e:	81a3      	strh	r3, [r4, #12]
 8018250:	9b01      	ldr	r3, [sp, #4]
 8018252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018256:	b15b      	cbz	r3, 8018270 <__smakebuf_r+0x70>
 8018258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801825c:	4630      	mov	r0, r6
 801825e:	f000 f837 	bl	80182d0 <_isatty_r>
 8018262:	b128      	cbz	r0, 8018270 <__smakebuf_r+0x70>
 8018264:	89a3      	ldrh	r3, [r4, #12]
 8018266:	f023 0303 	bic.w	r3, r3, #3
 801826a:	f043 0301 	orr.w	r3, r3, #1
 801826e:	81a3      	strh	r3, [r4, #12]
 8018270:	89a3      	ldrh	r3, [r4, #12]
 8018272:	431d      	orrs	r5, r3
 8018274:	81a5      	strh	r5, [r4, #12]
 8018276:	e7cf      	b.n	8018218 <__smakebuf_r+0x18>

08018278 <memmove>:
 8018278:	4288      	cmp	r0, r1
 801827a:	b510      	push	{r4, lr}
 801827c:	eb01 0402 	add.w	r4, r1, r2
 8018280:	d902      	bls.n	8018288 <memmove+0x10>
 8018282:	4284      	cmp	r4, r0
 8018284:	4623      	mov	r3, r4
 8018286:	d807      	bhi.n	8018298 <memmove+0x20>
 8018288:	1e43      	subs	r3, r0, #1
 801828a:	42a1      	cmp	r1, r4
 801828c:	d008      	beq.n	80182a0 <memmove+0x28>
 801828e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018296:	e7f8      	b.n	801828a <memmove+0x12>
 8018298:	4402      	add	r2, r0
 801829a:	4601      	mov	r1, r0
 801829c:	428a      	cmp	r2, r1
 801829e:	d100      	bne.n	80182a2 <memmove+0x2a>
 80182a0:	bd10      	pop	{r4, pc}
 80182a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80182aa:	e7f7      	b.n	801829c <memmove+0x24>

080182ac <_fstat_r>:
 80182ac:	b538      	push	{r3, r4, r5, lr}
 80182ae:	4d07      	ldr	r5, [pc, #28]	@ (80182cc <_fstat_r+0x20>)
 80182b0:	2300      	movs	r3, #0
 80182b2:	4604      	mov	r4, r0
 80182b4:	4608      	mov	r0, r1
 80182b6:	4611      	mov	r1, r2
 80182b8:	602b      	str	r3, [r5, #0]
 80182ba:	f7ef ffc4 	bl	8008246 <_fstat>
 80182be:	1c43      	adds	r3, r0, #1
 80182c0:	d102      	bne.n	80182c8 <_fstat_r+0x1c>
 80182c2:	682b      	ldr	r3, [r5, #0]
 80182c4:	b103      	cbz	r3, 80182c8 <_fstat_r+0x1c>
 80182c6:	6023      	str	r3, [r4, #0]
 80182c8:	bd38      	pop	{r3, r4, r5, pc}
 80182ca:	bf00      	nop
 80182cc:	2000aef8 	.word	0x2000aef8

080182d0 <_isatty_r>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	4d06      	ldr	r5, [pc, #24]	@ (80182ec <_isatty_r+0x1c>)
 80182d4:	2300      	movs	r3, #0
 80182d6:	4604      	mov	r4, r0
 80182d8:	4608      	mov	r0, r1
 80182da:	602b      	str	r3, [r5, #0]
 80182dc:	f7ef ffc3 	bl	8008266 <_isatty>
 80182e0:	1c43      	adds	r3, r0, #1
 80182e2:	d102      	bne.n	80182ea <_isatty_r+0x1a>
 80182e4:	682b      	ldr	r3, [r5, #0]
 80182e6:	b103      	cbz	r3, 80182ea <_isatty_r+0x1a>
 80182e8:	6023      	str	r3, [r4, #0]
 80182ea:	bd38      	pop	{r3, r4, r5, pc}
 80182ec:	2000aef8 	.word	0x2000aef8

080182f0 <_sbrk_r>:
 80182f0:	b538      	push	{r3, r4, r5, lr}
 80182f2:	4d06      	ldr	r5, [pc, #24]	@ (801830c <_sbrk_r+0x1c>)
 80182f4:	2300      	movs	r3, #0
 80182f6:	4604      	mov	r4, r0
 80182f8:	4608      	mov	r0, r1
 80182fa:	602b      	str	r3, [r5, #0]
 80182fc:	f7ef ffcc 	bl	8008298 <_sbrk>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_sbrk_r+0x1a>
 8018304:	682b      	ldr	r3, [r5, #0]
 8018306:	b103      	cbz	r3, 801830a <_sbrk_r+0x1a>
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	2000aef8 	.word	0x2000aef8

08018310 <_realloc_r>:
 8018310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018314:	4607      	mov	r7, r0
 8018316:	4614      	mov	r4, r2
 8018318:	460d      	mov	r5, r1
 801831a:	b921      	cbnz	r1, 8018326 <_realloc_r+0x16>
 801831c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018320:	4611      	mov	r1, r2
 8018322:	f7ff b9e9 	b.w	80176f8 <_malloc_r>
 8018326:	b92a      	cbnz	r2, 8018334 <_realloc_r+0x24>
 8018328:	f7ff f97a 	bl	8017620 <_free_r>
 801832c:	4625      	mov	r5, r4
 801832e:	4628      	mov	r0, r5
 8018330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018334:	f000 f81a 	bl	801836c <_malloc_usable_size_r>
 8018338:	4284      	cmp	r4, r0
 801833a:	4606      	mov	r6, r0
 801833c:	d802      	bhi.n	8018344 <_realloc_r+0x34>
 801833e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018342:	d8f4      	bhi.n	801832e <_realloc_r+0x1e>
 8018344:	4621      	mov	r1, r4
 8018346:	4638      	mov	r0, r7
 8018348:	f7ff f9d6 	bl	80176f8 <_malloc_r>
 801834c:	4680      	mov	r8, r0
 801834e:	b908      	cbnz	r0, 8018354 <_realloc_r+0x44>
 8018350:	4645      	mov	r5, r8
 8018352:	e7ec      	b.n	801832e <_realloc_r+0x1e>
 8018354:	42b4      	cmp	r4, r6
 8018356:	4622      	mov	r2, r4
 8018358:	4629      	mov	r1, r5
 801835a:	bf28      	it	cs
 801835c:	4632      	movcs	r2, r6
 801835e:	f7ff f950 	bl	8017602 <memcpy>
 8018362:	4629      	mov	r1, r5
 8018364:	4638      	mov	r0, r7
 8018366:	f7ff f95b 	bl	8017620 <_free_r>
 801836a:	e7f1      	b.n	8018350 <_realloc_r+0x40>

0801836c <_malloc_usable_size_r>:
 801836c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018370:	1f18      	subs	r0, r3, #4
 8018372:	2b00      	cmp	r3, #0
 8018374:	bfbc      	itt	lt
 8018376:	580b      	ldrlt	r3, [r1, r0]
 8018378:	18c0      	addlt	r0, r0, r3
 801837a:	4770      	bx	lr

0801837c <pow>:
 801837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801837e:	ed2d 8b02 	vpush	{d8}
 8018382:	eeb0 8a40 	vmov.f32	s16, s0
 8018386:	eef0 8a60 	vmov.f32	s17, s1
 801838a:	ec55 4b11 	vmov	r4, r5, d1
 801838e:	f000 f873 	bl	8018478 <__ieee754_pow>
 8018392:	4622      	mov	r2, r4
 8018394:	462b      	mov	r3, r5
 8018396:	4620      	mov	r0, r4
 8018398:	4629      	mov	r1, r5
 801839a:	ec57 6b10 	vmov	r6, r7, d0
 801839e:	f7e8 fb95 	bl	8000acc <__aeabi_dcmpun>
 80183a2:	2800      	cmp	r0, #0
 80183a4:	d13b      	bne.n	801841e <pow+0xa2>
 80183a6:	ec51 0b18 	vmov	r0, r1, d8
 80183aa:	2200      	movs	r2, #0
 80183ac:	2300      	movs	r3, #0
 80183ae:	f7e8 fb5b 	bl	8000a68 <__aeabi_dcmpeq>
 80183b2:	b1b8      	cbz	r0, 80183e4 <pow+0x68>
 80183b4:	2200      	movs	r2, #0
 80183b6:	2300      	movs	r3, #0
 80183b8:	4620      	mov	r0, r4
 80183ba:	4629      	mov	r1, r5
 80183bc:	f7e8 fb54 	bl	8000a68 <__aeabi_dcmpeq>
 80183c0:	2800      	cmp	r0, #0
 80183c2:	d146      	bne.n	8018452 <pow+0xd6>
 80183c4:	ec45 4b10 	vmov	d0, r4, r5
 80183c8:	f000 f848 	bl	801845c <finite>
 80183cc:	b338      	cbz	r0, 801841e <pow+0xa2>
 80183ce:	2200      	movs	r2, #0
 80183d0:	2300      	movs	r3, #0
 80183d2:	4620      	mov	r0, r4
 80183d4:	4629      	mov	r1, r5
 80183d6:	f7e8 fb51 	bl	8000a7c <__aeabi_dcmplt>
 80183da:	b300      	cbz	r0, 801841e <pow+0xa2>
 80183dc:	f7ff f8e4 	bl	80175a8 <__errno>
 80183e0:	2322      	movs	r3, #34	@ 0x22
 80183e2:	e01b      	b.n	801841c <pow+0xa0>
 80183e4:	ec47 6b10 	vmov	d0, r6, r7
 80183e8:	f000 f838 	bl	801845c <finite>
 80183ec:	b9e0      	cbnz	r0, 8018428 <pow+0xac>
 80183ee:	eeb0 0a48 	vmov.f32	s0, s16
 80183f2:	eef0 0a68 	vmov.f32	s1, s17
 80183f6:	f000 f831 	bl	801845c <finite>
 80183fa:	b1a8      	cbz	r0, 8018428 <pow+0xac>
 80183fc:	ec45 4b10 	vmov	d0, r4, r5
 8018400:	f000 f82c 	bl	801845c <finite>
 8018404:	b180      	cbz	r0, 8018428 <pow+0xac>
 8018406:	4632      	mov	r2, r6
 8018408:	463b      	mov	r3, r7
 801840a:	4630      	mov	r0, r6
 801840c:	4639      	mov	r1, r7
 801840e:	f7e8 fb5d 	bl	8000acc <__aeabi_dcmpun>
 8018412:	2800      	cmp	r0, #0
 8018414:	d0e2      	beq.n	80183dc <pow+0x60>
 8018416:	f7ff f8c7 	bl	80175a8 <__errno>
 801841a:	2321      	movs	r3, #33	@ 0x21
 801841c:	6003      	str	r3, [r0, #0]
 801841e:	ecbd 8b02 	vpop	{d8}
 8018422:	ec47 6b10 	vmov	d0, r6, r7
 8018426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018428:	2200      	movs	r2, #0
 801842a:	2300      	movs	r3, #0
 801842c:	4630      	mov	r0, r6
 801842e:	4639      	mov	r1, r7
 8018430:	f7e8 fb1a 	bl	8000a68 <__aeabi_dcmpeq>
 8018434:	2800      	cmp	r0, #0
 8018436:	d0f2      	beq.n	801841e <pow+0xa2>
 8018438:	eeb0 0a48 	vmov.f32	s0, s16
 801843c:	eef0 0a68 	vmov.f32	s1, s17
 8018440:	f000 f80c 	bl	801845c <finite>
 8018444:	2800      	cmp	r0, #0
 8018446:	d0ea      	beq.n	801841e <pow+0xa2>
 8018448:	ec45 4b10 	vmov	d0, r4, r5
 801844c:	f000 f806 	bl	801845c <finite>
 8018450:	e7c3      	b.n	80183da <pow+0x5e>
 8018452:	4f01      	ldr	r7, [pc, #4]	@ (8018458 <pow+0xdc>)
 8018454:	2600      	movs	r6, #0
 8018456:	e7e2      	b.n	801841e <pow+0xa2>
 8018458:	3ff00000 	.word	0x3ff00000

0801845c <finite>:
 801845c:	b082      	sub	sp, #8
 801845e:	ed8d 0b00 	vstr	d0, [sp]
 8018462:	9801      	ldr	r0, [sp, #4]
 8018464:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8018468:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801846c:	0fc0      	lsrs	r0, r0, #31
 801846e:	b002      	add	sp, #8
 8018470:	4770      	bx	lr
 8018472:	0000      	movs	r0, r0
 8018474:	0000      	movs	r0, r0
	...

08018478 <__ieee754_pow>:
 8018478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801847c:	b091      	sub	sp, #68	@ 0x44
 801847e:	ed8d 1b00 	vstr	d1, [sp]
 8018482:	e9dd 1900 	ldrd	r1, r9, [sp]
 8018486:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801848a:	ea5a 0001 	orrs.w	r0, sl, r1
 801848e:	ec57 6b10 	vmov	r6, r7, d0
 8018492:	d113      	bne.n	80184bc <__ieee754_pow+0x44>
 8018494:	19b3      	adds	r3, r6, r6
 8018496:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801849a:	4152      	adcs	r2, r2
 801849c:	4298      	cmp	r0, r3
 801849e:	4b9a      	ldr	r3, [pc, #616]	@ (8018708 <__ieee754_pow+0x290>)
 80184a0:	4193      	sbcs	r3, r2
 80184a2:	f080 84ee 	bcs.w	8018e82 <__ieee754_pow+0xa0a>
 80184a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184aa:	4630      	mov	r0, r6
 80184ac:	4639      	mov	r1, r7
 80184ae:	f7e7 febd 	bl	800022c <__adddf3>
 80184b2:	ec41 0b10 	vmov	d0, r0, r1
 80184b6:	b011      	add	sp, #68	@ 0x44
 80184b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184bc:	4a93      	ldr	r2, [pc, #588]	@ (801870c <__ieee754_pow+0x294>)
 80184be:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80184c2:	4295      	cmp	r5, r2
 80184c4:	46b8      	mov	r8, r7
 80184c6:	4633      	mov	r3, r6
 80184c8:	d80a      	bhi.n	80184e0 <__ieee754_pow+0x68>
 80184ca:	d104      	bne.n	80184d6 <__ieee754_pow+0x5e>
 80184cc:	2e00      	cmp	r6, #0
 80184ce:	d1ea      	bne.n	80184a6 <__ieee754_pow+0x2e>
 80184d0:	45aa      	cmp	sl, r5
 80184d2:	d8e8      	bhi.n	80184a6 <__ieee754_pow+0x2e>
 80184d4:	e001      	b.n	80184da <__ieee754_pow+0x62>
 80184d6:	4592      	cmp	sl, r2
 80184d8:	d802      	bhi.n	80184e0 <__ieee754_pow+0x68>
 80184da:	4592      	cmp	sl, r2
 80184dc:	d10f      	bne.n	80184fe <__ieee754_pow+0x86>
 80184de:	b171      	cbz	r1, 80184fe <__ieee754_pow+0x86>
 80184e0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80184e4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80184e8:	ea58 0803 	orrs.w	r8, r8, r3
 80184ec:	d1db      	bne.n	80184a6 <__ieee754_pow+0x2e>
 80184ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80184f2:	18db      	adds	r3, r3, r3
 80184f4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80184f8:	4152      	adcs	r2, r2
 80184fa:	4598      	cmp	r8, r3
 80184fc:	e7cf      	b.n	801849e <__ieee754_pow+0x26>
 80184fe:	f1b8 0f00 	cmp.w	r8, #0
 8018502:	46ab      	mov	fp, r5
 8018504:	da43      	bge.n	801858e <__ieee754_pow+0x116>
 8018506:	4a82      	ldr	r2, [pc, #520]	@ (8018710 <__ieee754_pow+0x298>)
 8018508:	4592      	cmp	sl, r2
 801850a:	d856      	bhi.n	80185ba <__ieee754_pow+0x142>
 801850c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8018510:	4592      	cmp	sl, r2
 8018512:	f240 84c5 	bls.w	8018ea0 <__ieee754_pow+0xa28>
 8018516:	ea4f 522a 	mov.w	r2, sl, asr #20
 801851a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801851e:	2a14      	cmp	r2, #20
 8018520:	dd18      	ble.n	8018554 <__ieee754_pow+0xdc>
 8018522:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8018526:	fa21 f402 	lsr.w	r4, r1, r2
 801852a:	fa04 f202 	lsl.w	r2, r4, r2
 801852e:	428a      	cmp	r2, r1
 8018530:	f040 84b6 	bne.w	8018ea0 <__ieee754_pow+0xa28>
 8018534:	f004 0401 	and.w	r4, r4, #1
 8018538:	f1c4 0402 	rsb	r4, r4, #2
 801853c:	2900      	cmp	r1, #0
 801853e:	d159      	bne.n	80185f4 <__ieee754_pow+0x17c>
 8018540:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8018544:	d148      	bne.n	80185d8 <__ieee754_pow+0x160>
 8018546:	4632      	mov	r2, r6
 8018548:	463b      	mov	r3, r7
 801854a:	4630      	mov	r0, r6
 801854c:	4639      	mov	r1, r7
 801854e:	f7e8 f823 	bl	8000598 <__aeabi_dmul>
 8018552:	e7ae      	b.n	80184b2 <__ieee754_pow+0x3a>
 8018554:	2900      	cmp	r1, #0
 8018556:	d14c      	bne.n	80185f2 <__ieee754_pow+0x17a>
 8018558:	f1c2 0214 	rsb	r2, r2, #20
 801855c:	fa4a f402 	asr.w	r4, sl, r2
 8018560:	fa04 f202 	lsl.w	r2, r4, r2
 8018564:	4552      	cmp	r2, sl
 8018566:	f040 8498 	bne.w	8018e9a <__ieee754_pow+0xa22>
 801856a:	f004 0401 	and.w	r4, r4, #1
 801856e:	f1c4 0402 	rsb	r4, r4, #2
 8018572:	4a68      	ldr	r2, [pc, #416]	@ (8018714 <__ieee754_pow+0x29c>)
 8018574:	4592      	cmp	sl, r2
 8018576:	d1e3      	bne.n	8018540 <__ieee754_pow+0xc8>
 8018578:	f1b9 0f00 	cmp.w	r9, #0
 801857c:	f280 8489 	bge.w	8018e92 <__ieee754_pow+0xa1a>
 8018580:	4964      	ldr	r1, [pc, #400]	@ (8018714 <__ieee754_pow+0x29c>)
 8018582:	4632      	mov	r2, r6
 8018584:	463b      	mov	r3, r7
 8018586:	2000      	movs	r0, #0
 8018588:	f7e8 f930 	bl	80007ec <__aeabi_ddiv>
 801858c:	e791      	b.n	80184b2 <__ieee754_pow+0x3a>
 801858e:	2400      	movs	r4, #0
 8018590:	bb81      	cbnz	r1, 80185f4 <__ieee754_pow+0x17c>
 8018592:	4a5e      	ldr	r2, [pc, #376]	@ (801870c <__ieee754_pow+0x294>)
 8018594:	4592      	cmp	sl, r2
 8018596:	d1ec      	bne.n	8018572 <__ieee754_pow+0xfa>
 8018598:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801859c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80185a0:	431a      	orrs	r2, r3
 80185a2:	f000 846e 	beq.w	8018e82 <__ieee754_pow+0xa0a>
 80185a6:	4b5c      	ldr	r3, [pc, #368]	@ (8018718 <__ieee754_pow+0x2a0>)
 80185a8:	429d      	cmp	r5, r3
 80185aa:	d908      	bls.n	80185be <__ieee754_pow+0x146>
 80185ac:	f1b9 0f00 	cmp.w	r9, #0
 80185b0:	f280 846b 	bge.w	8018e8a <__ieee754_pow+0xa12>
 80185b4:	2000      	movs	r0, #0
 80185b6:	2100      	movs	r1, #0
 80185b8:	e77b      	b.n	80184b2 <__ieee754_pow+0x3a>
 80185ba:	2402      	movs	r4, #2
 80185bc:	e7e8      	b.n	8018590 <__ieee754_pow+0x118>
 80185be:	f1b9 0f00 	cmp.w	r9, #0
 80185c2:	f04f 0000 	mov.w	r0, #0
 80185c6:	f04f 0100 	mov.w	r1, #0
 80185ca:	f6bf af72 	bge.w	80184b2 <__ieee754_pow+0x3a>
 80185ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80185d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80185d6:	e76c      	b.n	80184b2 <__ieee754_pow+0x3a>
 80185d8:	4a50      	ldr	r2, [pc, #320]	@ (801871c <__ieee754_pow+0x2a4>)
 80185da:	4591      	cmp	r9, r2
 80185dc:	d10a      	bne.n	80185f4 <__ieee754_pow+0x17c>
 80185de:	f1b8 0f00 	cmp.w	r8, #0
 80185e2:	db07      	blt.n	80185f4 <__ieee754_pow+0x17c>
 80185e4:	ec47 6b10 	vmov	d0, r6, r7
 80185e8:	b011      	add	sp, #68	@ 0x44
 80185ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ee:	f000 bd4f 	b.w	8019090 <__ieee754_sqrt>
 80185f2:	2400      	movs	r4, #0
 80185f4:	ec47 6b10 	vmov	d0, r6, r7
 80185f8:	9302      	str	r3, [sp, #8]
 80185fa:	f000 fc87 	bl	8018f0c <fabs>
 80185fe:	9b02      	ldr	r3, [sp, #8]
 8018600:	ec51 0b10 	vmov	r0, r1, d0
 8018604:	bb43      	cbnz	r3, 8018658 <__ieee754_pow+0x1e0>
 8018606:	4b43      	ldr	r3, [pc, #268]	@ (8018714 <__ieee754_pow+0x29c>)
 8018608:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801860c:	429a      	cmp	r2, r3
 801860e:	d000      	beq.n	8018612 <__ieee754_pow+0x19a>
 8018610:	bb15      	cbnz	r5, 8018658 <__ieee754_pow+0x1e0>
 8018612:	f1b9 0f00 	cmp.w	r9, #0
 8018616:	da05      	bge.n	8018624 <__ieee754_pow+0x1ac>
 8018618:	4602      	mov	r2, r0
 801861a:	460b      	mov	r3, r1
 801861c:	2000      	movs	r0, #0
 801861e:	493d      	ldr	r1, [pc, #244]	@ (8018714 <__ieee754_pow+0x29c>)
 8018620:	f7e8 f8e4 	bl	80007ec <__aeabi_ddiv>
 8018624:	f1b8 0f00 	cmp.w	r8, #0
 8018628:	f6bf af43 	bge.w	80184b2 <__ieee754_pow+0x3a>
 801862c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8018630:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8018634:	4325      	orrs	r5, r4
 8018636:	d108      	bne.n	801864a <__ieee754_pow+0x1d2>
 8018638:	4602      	mov	r2, r0
 801863a:	460b      	mov	r3, r1
 801863c:	4610      	mov	r0, r2
 801863e:	4619      	mov	r1, r3
 8018640:	f7e7 fdf2 	bl	8000228 <__aeabi_dsub>
 8018644:	4602      	mov	r2, r0
 8018646:	460b      	mov	r3, r1
 8018648:	e79e      	b.n	8018588 <__ieee754_pow+0x110>
 801864a:	2c01      	cmp	r4, #1
 801864c:	f47f af31 	bne.w	80184b2 <__ieee754_pow+0x3a>
 8018650:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018654:	4619      	mov	r1, r3
 8018656:	e72c      	b.n	80184b2 <__ieee754_pow+0x3a>
 8018658:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801865c:	3b01      	subs	r3, #1
 801865e:	ea53 0204 	orrs.w	r2, r3, r4
 8018662:	d102      	bne.n	801866a <__ieee754_pow+0x1f2>
 8018664:	4632      	mov	r2, r6
 8018666:	463b      	mov	r3, r7
 8018668:	e7e8      	b.n	801863c <__ieee754_pow+0x1c4>
 801866a:	3c01      	subs	r4, #1
 801866c:	431c      	orrs	r4, r3
 801866e:	d016      	beq.n	801869e <__ieee754_pow+0x226>
 8018670:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80186f8 <__ieee754_pow+0x280>
 8018674:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8018678:	ed8d 7b02 	vstr	d7, [sp, #8]
 801867c:	f240 8110 	bls.w	80188a0 <__ieee754_pow+0x428>
 8018680:	4b27      	ldr	r3, [pc, #156]	@ (8018720 <__ieee754_pow+0x2a8>)
 8018682:	459a      	cmp	sl, r3
 8018684:	4b24      	ldr	r3, [pc, #144]	@ (8018718 <__ieee754_pow+0x2a0>)
 8018686:	d916      	bls.n	80186b6 <__ieee754_pow+0x23e>
 8018688:	429d      	cmp	r5, r3
 801868a:	d80b      	bhi.n	80186a4 <__ieee754_pow+0x22c>
 801868c:	f1b9 0f00 	cmp.w	r9, #0
 8018690:	da0b      	bge.n	80186aa <__ieee754_pow+0x232>
 8018692:	2000      	movs	r0, #0
 8018694:	b011      	add	sp, #68	@ 0x44
 8018696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869a:	f000 bcf1 	b.w	8019080 <__math_oflow>
 801869e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8018700 <__ieee754_pow+0x288>
 80186a2:	e7e7      	b.n	8018674 <__ieee754_pow+0x1fc>
 80186a4:	f1b9 0f00 	cmp.w	r9, #0
 80186a8:	dcf3      	bgt.n	8018692 <__ieee754_pow+0x21a>
 80186aa:	2000      	movs	r0, #0
 80186ac:	b011      	add	sp, #68	@ 0x44
 80186ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186b2:	f000 bcdd 	b.w	8019070 <__math_uflow>
 80186b6:	429d      	cmp	r5, r3
 80186b8:	d20c      	bcs.n	80186d4 <__ieee754_pow+0x25c>
 80186ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186be:	2200      	movs	r2, #0
 80186c0:	2300      	movs	r3, #0
 80186c2:	f7e8 f9db 	bl	8000a7c <__aeabi_dcmplt>
 80186c6:	3800      	subs	r0, #0
 80186c8:	bf18      	it	ne
 80186ca:	2001      	movne	r0, #1
 80186cc:	f1b9 0f00 	cmp.w	r9, #0
 80186d0:	daec      	bge.n	80186ac <__ieee754_pow+0x234>
 80186d2:	e7df      	b.n	8018694 <__ieee754_pow+0x21c>
 80186d4:	4b0f      	ldr	r3, [pc, #60]	@ (8018714 <__ieee754_pow+0x29c>)
 80186d6:	429d      	cmp	r5, r3
 80186d8:	f04f 0200 	mov.w	r2, #0
 80186dc:	d922      	bls.n	8018724 <__ieee754_pow+0x2ac>
 80186de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186e2:	2300      	movs	r3, #0
 80186e4:	f7e8 f9ca 	bl	8000a7c <__aeabi_dcmplt>
 80186e8:	3800      	subs	r0, #0
 80186ea:	bf18      	it	ne
 80186ec:	2001      	movne	r0, #1
 80186ee:	f1b9 0f00 	cmp.w	r9, #0
 80186f2:	dccf      	bgt.n	8018694 <__ieee754_pow+0x21c>
 80186f4:	e7da      	b.n	80186ac <__ieee754_pow+0x234>
 80186f6:	bf00      	nop
 80186f8:	00000000 	.word	0x00000000
 80186fc:	3ff00000 	.word	0x3ff00000
 8018700:	00000000 	.word	0x00000000
 8018704:	bff00000 	.word	0xbff00000
 8018708:	fff00000 	.word	0xfff00000
 801870c:	7ff00000 	.word	0x7ff00000
 8018710:	433fffff 	.word	0x433fffff
 8018714:	3ff00000 	.word	0x3ff00000
 8018718:	3fefffff 	.word	0x3fefffff
 801871c:	3fe00000 	.word	0x3fe00000
 8018720:	43f00000 	.word	0x43f00000
 8018724:	4b5a      	ldr	r3, [pc, #360]	@ (8018890 <__ieee754_pow+0x418>)
 8018726:	f7e7 fd7f 	bl	8000228 <__aeabi_dsub>
 801872a:	a351      	add	r3, pc, #324	@ (adr r3, 8018870 <__ieee754_pow+0x3f8>)
 801872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018730:	4604      	mov	r4, r0
 8018732:	460d      	mov	r5, r1
 8018734:	f7e7 ff30 	bl	8000598 <__aeabi_dmul>
 8018738:	a34f      	add	r3, pc, #316	@ (adr r3, 8018878 <__ieee754_pow+0x400>)
 801873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801873e:	4606      	mov	r6, r0
 8018740:	460f      	mov	r7, r1
 8018742:	4620      	mov	r0, r4
 8018744:	4629      	mov	r1, r5
 8018746:	f7e7 ff27 	bl	8000598 <__aeabi_dmul>
 801874a:	4b52      	ldr	r3, [pc, #328]	@ (8018894 <__ieee754_pow+0x41c>)
 801874c:	4682      	mov	sl, r0
 801874e:	468b      	mov	fp, r1
 8018750:	2200      	movs	r2, #0
 8018752:	4620      	mov	r0, r4
 8018754:	4629      	mov	r1, r5
 8018756:	f7e7 ff1f 	bl	8000598 <__aeabi_dmul>
 801875a:	4602      	mov	r2, r0
 801875c:	460b      	mov	r3, r1
 801875e:	a148      	add	r1, pc, #288	@ (adr r1, 8018880 <__ieee754_pow+0x408>)
 8018760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018764:	f7e7 fd60 	bl	8000228 <__aeabi_dsub>
 8018768:	4622      	mov	r2, r4
 801876a:	462b      	mov	r3, r5
 801876c:	f7e7 ff14 	bl	8000598 <__aeabi_dmul>
 8018770:	4602      	mov	r2, r0
 8018772:	460b      	mov	r3, r1
 8018774:	2000      	movs	r0, #0
 8018776:	4948      	ldr	r1, [pc, #288]	@ (8018898 <__ieee754_pow+0x420>)
 8018778:	f7e7 fd56 	bl	8000228 <__aeabi_dsub>
 801877c:	4622      	mov	r2, r4
 801877e:	4680      	mov	r8, r0
 8018780:	4689      	mov	r9, r1
 8018782:	462b      	mov	r3, r5
 8018784:	4620      	mov	r0, r4
 8018786:	4629      	mov	r1, r5
 8018788:	f7e7 ff06 	bl	8000598 <__aeabi_dmul>
 801878c:	4602      	mov	r2, r0
 801878e:	460b      	mov	r3, r1
 8018790:	4640      	mov	r0, r8
 8018792:	4649      	mov	r1, r9
 8018794:	f7e7 ff00 	bl	8000598 <__aeabi_dmul>
 8018798:	a33b      	add	r3, pc, #236	@ (adr r3, 8018888 <__ieee754_pow+0x410>)
 801879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801879e:	f7e7 fefb 	bl	8000598 <__aeabi_dmul>
 80187a2:	4602      	mov	r2, r0
 80187a4:	460b      	mov	r3, r1
 80187a6:	4650      	mov	r0, sl
 80187a8:	4659      	mov	r1, fp
 80187aa:	f7e7 fd3d 	bl	8000228 <__aeabi_dsub>
 80187ae:	4602      	mov	r2, r0
 80187b0:	460b      	mov	r3, r1
 80187b2:	4680      	mov	r8, r0
 80187b4:	4689      	mov	r9, r1
 80187b6:	4630      	mov	r0, r6
 80187b8:	4639      	mov	r1, r7
 80187ba:	f7e7 fd37 	bl	800022c <__adddf3>
 80187be:	2400      	movs	r4, #0
 80187c0:	4632      	mov	r2, r6
 80187c2:	463b      	mov	r3, r7
 80187c4:	4620      	mov	r0, r4
 80187c6:	460d      	mov	r5, r1
 80187c8:	f7e7 fd2e 	bl	8000228 <__aeabi_dsub>
 80187cc:	4602      	mov	r2, r0
 80187ce:	460b      	mov	r3, r1
 80187d0:	4640      	mov	r0, r8
 80187d2:	4649      	mov	r1, r9
 80187d4:	f7e7 fd28 	bl	8000228 <__aeabi_dsub>
 80187d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80187e0:	2300      	movs	r3, #0
 80187e2:	9304      	str	r3, [sp, #16]
 80187e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80187e8:	4606      	mov	r6, r0
 80187ea:	460f      	mov	r7, r1
 80187ec:	465b      	mov	r3, fp
 80187ee:	4652      	mov	r2, sl
 80187f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187f4:	f7e7 fd18 	bl	8000228 <__aeabi_dsub>
 80187f8:	4622      	mov	r2, r4
 80187fa:	462b      	mov	r3, r5
 80187fc:	f7e7 fecc 	bl	8000598 <__aeabi_dmul>
 8018800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018804:	4680      	mov	r8, r0
 8018806:	4689      	mov	r9, r1
 8018808:	4630      	mov	r0, r6
 801880a:	4639      	mov	r1, r7
 801880c:	f7e7 fec4 	bl	8000598 <__aeabi_dmul>
 8018810:	4602      	mov	r2, r0
 8018812:	460b      	mov	r3, r1
 8018814:	4640      	mov	r0, r8
 8018816:	4649      	mov	r1, r9
 8018818:	f7e7 fd08 	bl	800022c <__adddf3>
 801881c:	465b      	mov	r3, fp
 801881e:	4606      	mov	r6, r0
 8018820:	460f      	mov	r7, r1
 8018822:	4652      	mov	r2, sl
 8018824:	4620      	mov	r0, r4
 8018826:	4629      	mov	r1, r5
 8018828:	f7e7 feb6 	bl	8000598 <__aeabi_dmul>
 801882c:	460b      	mov	r3, r1
 801882e:	4602      	mov	r2, r0
 8018830:	4680      	mov	r8, r0
 8018832:	4689      	mov	r9, r1
 8018834:	4630      	mov	r0, r6
 8018836:	4639      	mov	r1, r7
 8018838:	f7e7 fcf8 	bl	800022c <__adddf3>
 801883c:	4b17      	ldr	r3, [pc, #92]	@ (801889c <__ieee754_pow+0x424>)
 801883e:	4299      	cmp	r1, r3
 8018840:	4604      	mov	r4, r0
 8018842:	460d      	mov	r5, r1
 8018844:	468b      	mov	fp, r1
 8018846:	f340 820b 	ble.w	8018c60 <__ieee754_pow+0x7e8>
 801884a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801884e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8018852:	4303      	orrs	r3, r0
 8018854:	f000 81ea 	beq.w	8018c2c <__ieee754_pow+0x7b4>
 8018858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801885c:	2200      	movs	r2, #0
 801885e:	2300      	movs	r3, #0
 8018860:	f7e8 f90c 	bl	8000a7c <__aeabi_dcmplt>
 8018864:	3800      	subs	r0, #0
 8018866:	bf18      	it	ne
 8018868:	2001      	movne	r0, #1
 801886a:	e713      	b.n	8018694 <__ieee754_pow+0x21c>
 801886c:	f3af 8000 	nop.w
 8018870:	60000000 	.word	0x60000000
 8018874:	3ff71547 	.word	0x3ff71547
 8018878:	f85ddf44 	.word	0xf85ddf44
 801887c:	3e54ae0b 	.word	0x3e54ae0b
 8018880:	55555555 	.word	0x55555555
 8018884:	3fd55555 	.word	0x3fd55555
 8018888:	652b82fe 	.word	0x652b82fe
 801888c:	3ff71547 	.word	0x3ff71547
 8018890:	3ff00000 	.word	0x3ff00000
 8018894:	3fd00000 	.word	0x3fd00000
 8018898:	3fe00000 	.word	0x3fe00000
 801889c:	408fffff 	.word	0x408fffff
 80188a0:	4bd5      	ldr	r3, [pc, #852]	@ (8018bf8 <__ieee754_pow+0x780>)
 80188a2:	ea08 0303 	and.w	r3, r8, r3
 80188a6:	2200      	movs	r2, #0
 80188a8:	b92b      	cbnz	r3, 80188b6 <__ieee754_pow+0x43e>
 80188aa:	4bd4      	ldr	r3, [pc, #848]	@ (8018bfc <__ieee754_pow+0x784>)
 80188ac:	f7e7 fe74 	bl	8000598 <__aeabi_dmul>
 80188b0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80188b4:	468b      	mov	fp, r1
 80188b6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80188ba:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80188be:	4413      	add	r3, r2
 80188c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80188c2:	4bcf      	ldr	r3, [pc, #828]	@ (8018c00 <__ieee754_pow+0x788>)
 80188c4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80188c8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80188cc:	459b      	cmp	fp, r3
 80188ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80188d2:	dd08      	ble.n	80188e6 <__ieee754_pow+0x46e>
 80188d4:	4bcb      	ldr	r3, [pc, #812]	@ (8018c04 <__ieee754_pow+0x78c>)
 80188d6:	459b      	cmp	fp, r3
 80188d8:	f340 81a5 	ble.w	8018c26 <__ieee754_pow+0x7ae>
 80188dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188de:	3301      	adds	r3, #1
 80188e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80188e2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80188e6:	f04f 0a00 	mov.w	sl, #0
 80188ea:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80188ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80188f0:	4bc5      	ldr	r3, [pc, #788]	@ (8018c08 <__ieee754_pow+0x790>)
 80188f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80188f6:	ed93 7b00 	vldr	d7, [r3]
 80188fa:	4629      	mov	r1, r5
 80188fc:	ec53 2b17 	vmov	r2, r3, d7
 8018900:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018904:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018908:	f7e7 fc8e 	bl	8000228 <__aeabi_dsub>
 801890c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018910:	4606      	mov	r6, r0
 8018912:	460f      	mov	r7, r1
 8018914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018918:	f7e7 fc88 	bl	800022c <__adddf3>
 801891c:	4602      	mov	r2, r0
 801891e:	460b      	mov	r3, r1
 8018920:	2000      	movs	r0, #0
 8018922:	49ba      	ldr	r1, [pc, #744]	@ (8018c0c <__ieee754_pow+0x794>)
 8018924:	f7e7 ff62 	bl	80007ec <__aeabi_ddiv>
 8018928:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801892c:	4602      	mov	r2, r0
 801892e:	460b      	mov	r3, r1
 8018930:	4630      	mov	r0, r6
 8018932:	4639      	mov	r1, r7
 8018934:	f7e7 fe30 	bl	8000598 <__aeabi_dmul>
 8018938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801893c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8018940:	106d      	asrs	r5, r5, #1
 8018942:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8018946:	f04f 0b00 	mov.w	fp, #0
 801894a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801894e:	4661      	mov	r1, ip
 8018950:	2200      	movs	r2, #0
 8018952:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8018956:	4658      	mov	r0, fp
 8018958:	46e1      	mov	r9, ip
 801895a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801895e:	4614      	mov	r4, r2
 8018960:	461d      	mov	r5, r3
 8018962:	f7e7 fe19 	bl	8000598 <__aeabi_dmul>
 8018966:	4602      	mov	r2, r0
 8018968:	460b      	mov	r3, r1
 801896a:	4630      	mov	r0, r6
 801896c:	4639      	mov	r1, r7
 801896e:	f7e7 fc5b 	bl	8000228 <__aeabi_dsub>
 8018972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018976:	4606      	mov	r6, r0
 8018978:	460f      	mov	r7, r1
 801897a:	4620      	mov	r0, r4
 801897c:	4629      	mov	r1, r5
 801897e:	f7e7 fc53 	bl	8000228 <__aeabi_dsub>
 8018982:	4602      	mov	r2, r0
 8018984:	460b      	mov	r3, r1
 8018986:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801898a:	f7e7 fc4d 	bl	8000228 <__aeabi_dsub>
 801898e:	465a      	mov	r2, fp
 8018990:	464b      	mov	r3, r9
 8018992:	f7e7 fe01 	bl	8000598 <__aeabi_dmul>
 8018996:	4602      	mov	r2, r0
 8018998:	460b      	mov	r3, r1
 801899a:	4630      	mov	r0, r6
 801899c:	4639      	mov	r1, r7
 801899e:	f7e7 fc43 	bl	8000228 <__aeabi_dsub>
 80189a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80189a6:	f7e7 fdf7 	bl	8000598 <__aeabi_dmul>
 80189aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80189ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80189b2:	4610      	mov	r0, r2
 80189b4:	4619      	mov	r1, r3
 80189b6:	f7e7 fdef 	bl	8000598 <__aeabi_dmul>
 80189ba:	a37d      	add	r3, pc, #500	@ (adr r3, 8018bb0 <__ieee754_pow+0x738>)
 80189bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c0:	4604      	mov	r4, r0
 80189c2:	460d      	mov	r5, r1
 80189c4:	f7e7 fde8 	bl	8000598 <__aeabi_dmul>
 80189c8:	a37b      	add	r3, pc, #492	@ (adr r3, 8018bb8 <__ieee754_pow+0x740>)
 80189ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ce:	f7e7 fc2d 	bl	800022c <__adddf3>
 80189d2:	4622      	mov	r2, r4
 80189d4:	462b      	mov	r3, r5
 80189d6:	f7e7 fddf 	bl	8000598 <__aeabi_dmul>
 80189da:	a379      	add	r3, pc, #484	@ (adr r3, 8018bc0 <__ieee754_pow+0x748>)
 80189dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e0:	f7e7 fc24 	bl	800022c <__adddf3>
 80189e4:	4622      	mov	r2, r4
 80189e6:	462b      	mov	r3, r5
 80189e8:	f7e7 fdd6 	bl	8000598 <__aeabi_dmul>
 80189ec:	a376      	add	r3, pc, #472	@ (adr r3, 8018bc8 <__ieee754_pow+0x750>)
 80189ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f2:	f7e7 fc1b 	bl	800022c <__adddf3>
 80189f6:	4622      	mov	r2, r4
 80189f8:	462b      	mov	r3, r5
 80189fa:	f7e7 fdcd 	bl	8000598 <__aeabi_dmul>
 80189fe:	a374      	add	r3, pc, #464	@ (adr r3, 8018bd0 <__ieee754_pow+0x758>)
 8018a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a04:	f7e7 fc12 	bl	800022c <__adddf3>
 8018a08:	4622      	mov	r2, r4
 8018a0a:	462b      	mov	r3, r5
 8018a0c:	f7e7 fdc4 	bl	8000598 <__aeabi_dmul>
 8018a10:	a371      	add	r3, pc, #452	@ (adr r3, 8018bd8 <__ieee754_pow+0x760>)
 8018a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a16:	f7e7 fc09 	bl	800022c <__adddf3>
 8018a1a:	4622      	mov	r2, r4
 8018a1c:	4606      	mov	r6, r0
 8018a1e:	460f      	mov	r7, r1
 8018a20:	462b      	mov	r3, r5
 8018a22:	4620      	mov	r0, r4
 8018a24:	4629      	mov	r1, r5
 8018a26:	f7e7 fdb7 	bl	8000598 <__aeabi_dmul>
 8018a2a:	4602      	mov	r2, r0
 8018a2c:	460b      	mov	r3, r1
 8018a2e:	4630      	mov	r0, r6
 8018a30:	4639      	mov	r1, r7
 8018a32:	f7e7 fdb1 	bl	8000598 <__aeabi_dmul>
 8018a36:	465a      	mov	r2, fp
 8018a38:	4604      	mov	r4, r0
 8018a3a:	460d      	mov	r5, r1
 8018a3c:	464b      	mov	r3, r9
 8018a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a42:	f7e7 fbf3 	bl	800022c <__adddf3>
 8018a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a4a:	f7e7 fda5 	bl	8000598 <__aeabi_dmul>
 8018a4e:	4622      	mov	r2, r4
 8018a50:	462b      	mov	r3, r5
 8018a52:	f7e7 fbeb 	bl	800022c <__adddf3>
 8018a56:	465a      	mov	r2, fp
 8018a58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018a5c:	464b      	mov	r3, r9
 8018a5e:	4658      	mov	r0, fp
 8018a60:	4649      	mov	r1, r9
 8018a62:	f7e7 fd99 	bl	8000598 <__aeabi_dmul>
 8018a66:	4b6a      	ldr	r3, [pc, #424]	@ (8018c10 <__ieee754_pow+0x798>)
 8018a68:	2200      	movs	r2, #0
 8018a6a:	4606      	mov	r6, r0
 8018a6c:	460f      	mov	r7, r1
 8018a6e:	f7e7 fbdd 	bl	800022c <__adddf3>
 8018a72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018a76:	f7e7 fbd9 	bl	800022c <__adddf3>
 8018a7a:	46d8      	mov	r8, fp
 8018a7c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8018a80:	460d      	mov	r5, r1
 8018a82:	465a      	mov	r2, fp
 8018a84:	460b      	mov	r3, r1
 8018a86:	4640      	mov	r0, r8
 8018a88:	4649      	mov	r1, r9
 8018a8a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8018a8e:	f7e7 fd83 	bl	8000598 <__aeabi_dmul>
 8018a92:	465c      	mov	r4, fp
 8018a94:	4680      	mov	r8, r0
 8018a96:	4689      	mov	r9, r1
 8018a98:	4b5d      	ldr	r3, [pc, #372]	@ (8018c10 <__ieee754_pow+0x798>)
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	4629      	mov	r1, r5
 8018aa0:	f7e7 fbc2 	bl	8000228 <__aeabi_dsub>
 8018aa4:	4632      	mov	r2, r6
 8018aa6:	463b      	mov	r3, r7
 8018aa8:	f7e7 fbbe 	bl	8000228 <__aeabi_dsub>
 8018aac:	4602      	mov	r2, r0
 8018aae:	460b      	mov	r3, r1
 8018ab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018ab4:	f7e7 fbb8 	bl	8000228 <__aeabi_dsub>
 8018ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018abc:	f7e7 fd6c 	bl	8000598 <__aeabi_dmul>
 8018ac0:	4622      	mov	r2, r4
 8018ac2:	4606      	mov	r6, r0
 8018ac4:	460f      	mov	r7, r1
 8018ac6:	462b      	mov	r3, r5
 8018ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018acc:	f7e7 fd64 	bl	8000598 <__aeabi_dmul>
 8018ad0:	4602      	mov	r2, r0
 8018ad2:	460b      	mov	r3, r1
 8018ad4:	4630      	mov	r0, r6
 8018ad6:	4639      	mov	r1, r7
 8018ad8:	f7e7 fba8 	bl	800022c <__adddf3>
 8018adc:	4606      	mov	r6, r0
 8018ade:	460f      	mov	r7, r1
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	4640      	mov	r0, r8
 8018ae6:	4649      	mov	r1, r9
 8018ae8:	f7e7 fba0 	bl	800022c <__adddf3>
 8018aec:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8018af0:	a33b      	add	r3, pc, #236	@ (adr r3, 8018be0 <__ieee754_pow+0x768>)
 8018af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af6:	4658      	mov	r0, fp
 8018af8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8018afc:	460d      	mov	r5, r1
 8018afe:	f7e7 fd4b 	bl	8000598 <__aeabi_dmul>
 8018b02:	465c      	mov	r4, fp
 8018b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b08:	4642      	mov	r2, r8
 8018b0a:	464b      	mov	r3, r9
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	4629      	mov	r1, r5
 8018b10:	f7e7 fb8a 	bl	8000228 <__aeabi_dsub>
 8018b14:	4602      	mov	r2, r0
 8018b16:	460b      	mov	r3, r1
 8018b18:	4630      	mov	r0, r6
 8018b1a:	4639      	mov	r1, r7
 8018b1c:	f7e7 fb84 	bl	8000228 <__aeabi_dsub>
 8018b20:	a331      	add	r3, pc, #196	@ (adr r3, 8018be8 <__ieee754_pow+0x770>)
 8018b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b26:	f7e7 fd37 	bl	8000598 <__aeabi_dmul>
 8018b2a:	a331      	add	r3, pc, #196	@ (adr r3, 8018bf0 <__ieee754_pow+0x778>)
 8018b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b30:	4606      	mov	r6, r0
 8018b32:	460f      	mov	r7, r1
 8018b34:	4620      	mov	r0, r4
 8018b36:	4629      	mov	r1, r5
 8018b38:	f7e7 fd2e 	bl	8000598 <__aeabi_dmul>
 8018b3c:	4602      	mov	r2, r0
 8018b3e:	460b      	mov	r3, r1
 8018b40:	4630      	mov	r0, r6
 8018b42:	4639      	mov	r1, r7
 8018b44:	f7e7 fb72 	bl	800022c <__adddf3>
 8018b48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018b4a:	4b32      	ldr	r3, [pc, #200]	@ (8018c14 <__ieee754_pow+0x79c>)
 8018b4c:	4413      	add	r3, r2
 8018b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b52:	f7e7 fb6b 	bl	800022c <__adddf3>
 8018b56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018b5c:	f7e7 fcb2 	bl	80004c4 <__aeabi_i2d>
 8018b60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018b62:	4b2d      	ldr	r3, [pc, #180]	@ (8018c18 <__ieee754_pow+0x7a0>)
 8018b64:	4413      	add	r3, r2
 8018b66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018b6a:	4606      	mov	r6, r0
 8018b6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b70:	460f      	mov	r7, r1
 8018b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b76:	f7e7 fb59 	bl	800022c <__adddf3>
 8018b7a:	4642      	mov	r2, r8
 8018b7c:	464b      	mov	r3, r9
 8018b7e:	f7e7 fb55 	bl	800022c <__adddf3>
 8018b82:	4632      	mov	r2, r6
 8018b84:	463b      	mov	r3, r7
 8018b86:	f7e7 fb51 	bl	800022c <__adddf3>
 8018b8a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8018b8e:	4632      	mov	r2, r6
 8018b90:	463b      	mov	r3, r7
 8018b92:	4658      	mov	r0, fp
 8018b94:	460d      	mov	r5, r1
 8018b96:	f7e7 fb47 	bl	8000228 <__aeabi_dsub>
 8018b9a:	4642      	mov	r2, r8
 8018b9c:	464b      	mov	r3, r9
 8018b9e:	f7e7 fb43 	bl	8000228 <__aeabi_dsub>
 8018ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ba6:	f7e7 fb3f 	bl	8000228 <__aeabi_dsub>
 8018baa:	465c      	mov	r4, fp
 8018bac:	e036      	b.n	8018c1c <__ieee754_pow+0x7a4>
 8018bae:	bf00      	nop
 8018bb0:	4a454eef 	.word	0x4a454eef
 8018bb4:	3fca7e28 	.word	0x3fca7e28
 8018bb8:	93c9db65 	.word	0x93c9db65
 8018bbc:	3fcd864a 	.word	0x3fcd864a
 8018bc0:	a91d4101 	.word	0xa91d4101
 8018bc4:	3fd17460 	.word	0x3fd17460
 8018bc8:	518f264d 	.word	0x518f264d
 8018bcc:	3fd55555 	.word	0x3fd55555
 8018bd0:	db6fabff 	.word	0xdb6fabff
 8018bd4:	3fdb6db6 	.word	0x3fdb6db6
 8018bd8:	33333303 	.word	0x33333303
 8018bdc:	3fe33333 	.word	0x3fe33333
 8018be0:	e0000000 	.word	0xe0000000
 8018be4:	3feec709 	.word	0x3feec709
 8018be8:	dc3a03fd 	.word	0xdc3a03fd
 8018bec:	3feec709 	.word	0x3feec709
 8018bf0:	145b01f5 	.word	0x145b01f5
 8018bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8018bf8:	7ff00000 	.word	0x7ff00000
 8018bfc:	43400000 	.word	0x43400000
 8018c00:	0003988e 	.word	0x0003988e
 8018c04:	000bb679 	.word	0x000bb679
 8018c08:	0801c418 	.word	0x0801c418
 8018c0c:	3ff00000 	.word	0x3ff00000
 8018c10:	40080000 	.word	0x40080000
 8018c14:	0801c3f8 	.word	0x0801c3f8
 8018c18:	0801c408 	.word	0x0801c408
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	460b      	mov	r3, r1
 8018c20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018c24:	e5d6      	b.n	80187d4 <__ieee754_pow+0x35c>
 8018c26:	f04f 0a01 	mov.w	sl, #1
 8018c2a:	e65e      	b.n	80188ea <__ieee754_pow+0x472>
 8018c2c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8018f04 <__ieee754_pow+0xa8c>)
 8018c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c32:	4630      	mov	r0, r6
 8018c34:	4639      	mov	r1, r7
 8018c36:	f7e7 faf9 	bl	800022c <__adddf3>
 8018c3a:	4642      	mov	r2, r8
 8018c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8018c40:	464b      	mov	r3, r9
 8018c42:	4620      	mov	r0, r4
 8018c44:	4629      	mov	r1, r5
 8018c46:	f7e7 faef 	bl	8000228 <__aeabi_dsub>
 8018c4a:	4602      	mov	r2, r0
 8018c4c:	460b      	mov	r3, r1
 8018c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c52:	f7e7 ff31 	bl	8000ab8 <__aeabi_dcmpgt>
 8018c56:	2800      	cmp	r0, #0
 8018c58:	f47f adfe 	bne.w	8018858 <__ieee754_pow+0x3e0>
 8018c5c:	4ba2      	ldr	r3, [pc, #648]	@ (8018ee8 <__ieee754_pow+0xa70>)
 8018c5e:	e022      	b.n	8018ca6 <__ieee754_pow+0x82e>
 8018c60:	4ca2      	ldr	r4, [pc, #648]	@ (8018eec <__ieee754_pow+0xa74>)
 8018c62:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018c66:	42a3      	cmp	r3, r4
 8018c68:	d919      	bls.n	8018c9e <__ieee754_pow+0x826>
 8018c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8018ef0 <__ieee754_pow+0xa78>)
 8018c6c:	440b      	add	r3, r1
 8018c6e:	4303      	orrs	r3, r0
 8018c70:	d009      	beq.n	8018c86 <__ieee754_pow+0x80e>
 8018c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c76:	2200      	movs	r2, #0
 8018c78:	2300      	movs	r3, #0
 8018c7a:	f7e7 feff 	bl	8000a7c <__aeabi_dcmplt>
 8018c7e:	3800      	subs	r0, #0
 8018c80:	bf18      	it	ne
 8018c82:	2001      	movne	r0, #1
 8018c84:	e512      	b.n	80186ac <__ieee754_pow+0x234>
 8018c86:	4642      	mov	r2, r8
 8018c88:	464b      	mov	r3, r9
 8018c8a:	f7e7 facd 	bl	8000228 <__aeabi_dsub>
 8018c8e:	4632      	mov	r2, r6
 8018c90:	463b      	mov	r3, r7
 8018c92:	f7e7 ff07 	bl	8000aa4 <__aeabi_dcmpge>
 8018c96:	2800      	cmp	r0, #0
 8018c98:	d1eb      	bne.n	8018c72 <__ieee754_pow+0x7fa>
 8018c9a:	4b96      	ldr	r3, [pc, #600]	@ (8018ef4 <__ieee754_pow+0xa7c>)
 8018c9c:	e003      	b.n	8018ca6 <__ieee754_pow+0x82e>
 8018c9e:	4a96      	ldr	r2, [pc, #600]	@ (8018ef8 <__ieee754_pow+0xa80>)
 8018ca0:	4293      	cmp	r3, r2
 8018ca2:	f240 80e7 	bls.w	8018e74 <__ieee754_pow+0x9fc>
 8018ca6:	151b      	asrs	r3, r3, #20
 8018ca8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8018cac:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8018cb0:	fa4a fa03 	asr.w	sl, sl, r3
 8018cb4:	44da      	add	sl, fp
 8018cb6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8018cba:	4890      	ldr	r0, [pc, #576]	@ (8018efc <__ieee754_pow+0xa84>)
 8018cbc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8018cc0:	4108      	asrs	r0, r1
 8018cc2:	ea00 030a 	and.w	r3, r0, sl
 8018cc6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8018cca:	f1c1 0114 	rsb	r1, r1, #20
 8018cce:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8018cd2:	fa4a fa01 	asr.w	sl, sl, r1
 8018cd6:	f1bb 0f00 	cmp.w	fp, #0
 8018cda:	4640      	mov	r0, r8
 8018cdc:	4649      	mov	r1, r9
 8018cde:	f04f 0200 	mov.w	r2, #0
 8018ce2:	bfb8      	it	lt
 8018ce4:	f1ca 0a00 	rsblt	sl, sl, #0
 8018ce8:	f7e7 fa9e 	bl	8000228 <__aeabi_dsub>
 8018cec:	4680      	mov	r8, r0
 8018cee:	4689      	mov	r9, r1
 8018cf0:	4632      	mov	r2, r6
 8018cf2:	463b      	mov	r3, r7
 8018cf4:	4640      	mov	r0, r8
 8018cf6:	4649      	mov	r1, r9
 8018cf8:	f7e7 fa98 	bl	800022c <__adddf3>
 8018cfc:	2400      	movs	r4, #0
 8018cfe:	a36a      	add	r3, pc, #424	@ (adr r3, 8018ea8 <__ieee754_pow+0xa30>)
 8018d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d04:	4620      	mov	r0, r4
 8018d06:	460d      	mov	r5, r1
 8018d08:	f7e7 fc46 	bl	8000598 <__aeabi_dmul>
 8018d0c:	4642      	mov	r2, r8
 8018d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8018d12:	464b      	mov	r3, r9
 8018d14:	4620      	mov	r0, r4
 8018d16:	4629      	mov	r1, r5
 8018d18:	f7e7 fa86 	bl	8000228 <__aeabi_dsub>
 8018d1c:	4602      	mov	r2, r0
 8018d1e:	460b      	mov	r3, r1
 8018d20:	4630      	mov	r0, r6
 8018d22:	4639      	mov	r1, r7
 8018d24:	f7e7 fa80 	bl	8000228 <__aeabi_dsub>
 8018d28:	a361      	add	r3, pc, #388	@ (adr r3, 8018eb0 <__ieee754_pow+0xa38>)
 8018d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d2e:	f7e7 fc33 	bl	8000598 <__aeabi_dmul>
 8018d32:	a361      	add	r3, pc, #388	@ (adr r3, 8018eb8 <__ieee754_pow+0xa40>)
 8018d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d38:	4680      	mov	r8, r0
 8018d3a:	4689      	mov	r9, r1
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	4629      	mov	r1, r5
 8018d40:	f7e7 fc2a 	bl	8000598 <__aeabi_dmul>
 8018d44:	4602      	mov	r2, r0
 8018d46:	460b      	mov	r3, r1
 8018d48:	4640      	mov	r0, r8
 8018d4a:	4649      	mov	r1, r9
 8018d4c:	f7e7 fa6e 	bl	800022c <__adddf3>
 8018d50:	4604      	mov	r4, r0
 8018d52:	460d      	mov	r5, r1
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018d5c:	f7e7 fa66 	bl	800022c <__adddf3>
 8018d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d64:	4680      	mov	r8, r0
 8018d66:	4689      	mov	r9, r1
 8018d68:	f7e7 fa5e 	bl	8000228 <__aeabi_dsub>
 8018d6c:	4602      	mov	r2, r0
 8018d6e:	460b      	mov	r3, r1
 8018d70:	4620      	mov	r0, r4
 8018d72:	4629      	mov	r1, r5
 8018d74:	f7e7 fa58 	bl	8000228 <__aeabi_dsub>
 8018d78:	4642      	mov	r2, r8
 8018d7a:	4606      	mov	r6, r0
 8018d7c:	460f      	mov	r7, r1
 8018d7e:	464b      	mov	r3, r9
 8018d80:	4640      	mov	r0, r8
 8018d82:	4649      	mov	r1, r9
 8018d84:	f7e7 fc08 	bl	8000598 <__aeabi_dmul>
 8018d88:	a34d      	add	r3, pc, #308	@ (adr r3, 8018ec0 <__ieee754_pow+0xa48>)
 8018d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d8e:	4604      	mov	r4, r0
 8018d90:	460d      	mov	r5, r1
 8018d92:	f7e7 fc01 	bl	8000598 <__aeabi_dmul>
 8018d96:	a34c      	add	r3, pc, #304	@ (adr r3, 8018ec8 <__ieee754_pow+0xa50>)
 8018d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d9c:	f7e7 fa44 	bl	8000228 <__aeabi_dsub>
 8018da0:	4622      	mov	r2, r4
 8018da2:	462b      	mov	r3, r5
 8018da4:	f7e7 fbf8 	bl	8000598 <__aeabi_dmul>
 8018da8:	a349      	add	r3, pc, #292	@ (adr r3, 8018ed0 <__ieee754_pow+0xa58>)
 8018daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dae:	f7e7 fa3d 	bl	800022c <__adddf3>
 8018db2:	4622      	mov	r2, r4
 8018db4:	462b      	mov	r3, r5
 8018db6:	f7e7 fbef 	bl	8000598 <__aeabi_dmul>
 8018dba:	a347      	add	r3, pc, #284	@ (adr r3, 8018ed8 <__ieee754_pow+0xa60>)
 8018dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc0:	f7e7 fa32 	bl	8000228 <__aeabi_dsub>
 8018dc4:	4622      	mov	r2, r4
 8018dc6:	462b      	mov	r3, r5
 8018dc8:	f7e7 fbe6 	bl	8000598 <__aeabi_dmul>
 8018dcc:	a344      	add	r3, pc, #272	@ (adr r3, 8018ee0 <__ieee754_pow+0xa68>)
 8018dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd2:	f7e7 fa2b 	bl	800022c <__adddf3>
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	462b      	mov	r3, r5
 8018dda:	f7e7 fbdd 	bl	8000598 <__aeabi_dmul>
 8018dde:	4602      	mov	r2, r0
 8018de0:	460b      	mov	r3, r1
 8018de2:	4640      	mov	r0, r8
 8018de4:	4649      	mov	r1, r9
 8018de6:	f7e7 fa1f 	bl	8000228 <__aeabi_dsub>
 8018dea:	4604      	mov	r4, r0
 8018dec:	460d      	mov	r5, r1
 8018dee:	4602      	mov	r2, r0
 8018df0:	460b      	mov	r3, r1
 8018df2:	4640      	mov	r0, r8
 8018df4:	4649      	mov	r1, r9
 8018df6:	f7e7 fbcf 	bl	8000598 <__aeabi_dmul>
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	e9cd 0100 	strd	r0, r1, [sp]
 8018e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018e04:	4620      	mov	r0, r4
 8018e06:	4629      	mov	r1, r5
 8018e08:	f7e7 fa0e 	bl	8000228 <__aeabi_dsub>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	460b      	mov	r3, r1
 8018e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e14:	f7e7 fcea 	bl	80007ec <__aeabi_ddiv>
 8018e18:	4632      	mov	r2, r6
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	460d      	mov	r5, r1
 8018e1e:	463b      	mov	r3, r7
 8018e20:	4640      	mov	r0, r8
 8018e22:	4649      	mov	r1, r9
 8018e24:	f7e7 fbb8 	bl	8000598 <__aeabi_dmul>
 8018e28:	4632      	mov	r2, r6
 8018e2a:	463b      	mov	r3, r7
 8018e2c:	f7e7 f9fe 	bl	800022c <__adddf3>
 8018e30:	4602      	mov	r2, r0
 8018e32:	460b      	mov	r3, r1
 8018e34:	4620      	mov	r0, r4
 8018e36:	4629      	mov	r1, r5
 8018e38:	f7e7 f9f6 	bl	8000228 <__aeabi_dsub>
 8018e3c:	4642      	mov	r2, r8
 8018e3e:	464b      	mov	r3, r9
 8018e40:	f7e7 f9f2 	bl	8000228 <__aeabi_dsub>
 8018e44:	460b      	mov	r3, r1
 8018e46:	4602      	mov	r2, r0
 8018e48:	492d      	ldr	r1, [pc, #180]	@ (8018f00 <__ieee754_pow+0xa88>)
 8018e4a:	2000      	movs	r0, #0
 8018e4c:	f7e7 f9ec 	bl	8000228 <__aeabi_dsub>
 8018e50:	ec41 0b10 	vmov	d0, r0, r1
 8018e54:	ee10 3a90 	vmov	r3, s1
 8018e58:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018e60:	da0b      	bge.n	8018e7a <__ieee754_pow+0xa02>
 8018e62:	4650      	mov	r0, sl
 8018e64:	f000 f85c 	bl	8018f20 <scalbn>
 8018e68:	ec51 0b10 	vmov	r0, r1, d0
 8018e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e70:	f7ff bb6d 	b.w	801854e <__ieee754_pow+0xd6>
 8018e74:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018e78:	e73a      	b.n	8018cf0 <__ieee754_pow+0x878>
 8018e7a:	ec51 0b10 	vmov	r0, r1, d0
 8018e7e:	4619      	mov	r1, r3
 8018e80:	e7f4      	b.n	8018e6c <__ieee754_pow+0x9f4>
 8018e82:	491f      	ldr	r1, [pc, #124]	@ (8018f00 <__ieee754_pow+0xa88>)
 8018e84:	2000      	movs	r0, #0
 8018e86:	f7ff bb14 	b.w	80184b2 <__ieee754_pow+0x3a>
 8018e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e8e:	f7ff bb10 	b.w	80184b2 <__ieee754_pow+0x3a>
 8018e92:	4630      	mov	r0, r6
 8018e94:	4639      	mov	r1, r7
 8018e96:	f7ff bb0c 	b.w	80184b2 <__ieee754_pow+0x3a>
 8018e9a:	460c      	mov	r4, r1
 8018e9c:	f7ff bb69 	b.w	8018572 <__ieee754_pow+0xfa>
 8018ea0:	2400      	movs	r4, #0
 8018ea2:	f7ff bb4b 	b.w	801853c <__ieee754_pow+0xc4>
 8018ea6:	bf00      	nop
 8018ea8:	00000000 	.word	0x00000000
 8018eac:	3fe62e43 	.word	0x3fe62e43
 8018eb0:	fefa39ef 	.word	0xfefa39ef
 8018eb4:	3fe62e42 	.word	0x3fe62e42
 8018eb8:	0ca86c39 	.word	0x0ca86c39
 8018ebc:	be205c61 	.word	0xbe205c61
 8018ec0:	72bea4d0 	.word	0x72bea4d0
 8018ec4:	3e663769 	.word	0x3e663769
 8018ec8:	c5d26bf1 	.word	0xc5d26bf1
 8018ecc:	3ebbbd41 	.word	0x3ebbbd41
 8018ed0:	af25de2c 	.word	0xaf25de2c
 8018ed4:	3f11566a 	.word	0x3f11566a
 8018ed8:	16bebd93 	.word	0x16bebd93
 8018edc:	3f66c16c 	.word	0x3f66c16c
 8018ee0:	5555553e 	.word	0x5555553e
 8018ee4:	3fc55555 	.word	0x3fc55555
 8018ee8:	40900000 	.word	0x40900000
 8018eec:	4090cbff 	.word	0x4090cbff
 8018ef0:	3f6f3400 	.word	0x3f6f3400
 8018ef4:	4090cc00 	.word	0x4090cc00
 8018ef8:	3fe00000 	.word	0x3fe00000
 8018efc:	fff00000 	.word	0xfff00000
 8018f00:	3ff00000 	.word	0x3ff00000
 8018f04:	652b82fe 	.word	0x652b82fe
 8018f08:	3c971547 	.word	0x3c971547

08018f0c <fabs>:
 8018f0c:	ec51 0b10 	vmov	r0, r1, d0
 8018f10:	4602      	mov	r2, r0
 8018f12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018f16:	ec43 2b10 	vmov	d0, r2, r3
 8018f1a:	4770      	bx	lr
 8018f1c:	0000      	movs	r0, r0
	...

08018f20 <scalbn>:
 8018f20:	b570      	push	{r4, r5, r6, lr}
 8018f22:	ec55 4b10 	vmov	r4, r5, d0
 8018f26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018f2a:	4606      	mov	r6, r0
 8018f2c:	462b      	mov	r3, r5
 8018f2e:	b991      	cbnz	r1, 8018f56 <scalbn+0x36>
 8018f30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8018f34:	4323      	orrs	r3, r4
 8018f36:	d03b      	beq.n	8018fb0 <scalbn+0x90>
 8018f38:	4b33      	ldr	r3, [pc, #204]	@ (8019008 <scalbn+0xe8>)
 8018f3a:	4620      	mov	r0, r4
 8018f3c:	4629      	mov	r1, r5
 8018f3e:	2200      	movs	r2, #0
 8018f40:	f7e7 fb2a 	bl	8000598 <__aeabi_dmul>
 8018f44:	4b31      	ldr	r3, [pc, #196]	@ (801900c <scalbn+0xec>)
 8018f46:	429e      	cmp	r6, r3
 8018f48:	4604      	mov	r4, r0
 8018f4a:	460d      	mov	r5, r1
 8018f4c:	da0f      	bge.n	8018f6e <scalbn+0x4e>
 8018f4e:	a326      	add	r3, pc, #152	@ (adr r3, 8018fe8 <scalbn+0xc8>)
 8018f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f54:	e01e      	b.n	8018f94 <scalbn+0x74>
 8018f56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018f5a:	4291      	cmp	r1, r2
 8018f5c:	d10b      	bne.n	8018f76 <scalbn+0x56>
 8018f5e:	4622      	mov	r2, r4
 8018f60:	4620      	mov	r0, r4
 8018f62:	4629      	mov	r1, r5
 8018f64:	f7e7 f962 	bl	800022c <__adddf3>
 8018f68:	4604      	mov	r4, r0
 8018f6a:	460d      	mov	r5, r1
 8018f6c:	e020      	b.n	8018fb0 <scalbn+0x90>
 8018f6e:	460b      	mov	r3, r1
 8018f70:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018f74:	3936      	subs	r1, #54	@ 0x36
 8018f76:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018f7a:	4296      	cmp	r6, r2
 8018f7c:	dd0d      	ble.n	8018f9a <scalbn+0x7a>
 8018f7e:	2d00      	cmp	r5, #0
 8018f80:	a11b      	add	r1, pc, #108	@ (adr r1, 8018ff0 <scalbn+0xd0>)
 8018f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f86:	da02      	bge.n	8018f8e <scalbn+0x6e>
 8018f88:	a11b      	add	r1, pc, #108	@ (adr r1, 8018ff8 <scalbn+0xd8>)
 8018f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f8e:	a318      	add	r3, pc, #96	@ (adr r3, 8018ff0 <scalbn+0xd0>)
 8018f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f94:	f7e7 fb00 	bl	8000598 <__aeabi_dmul>
 8018f98:	e7e6      	b.n	8018f68 <scalbn+0x48>
 8018f9a:	1872      	adds	r2, r6, r1
 8018f9c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018fa0:	428a      	cmp	r2, r1
 8018fa2:	dcec      	bgt.n	8018f7e <scalbn+0x5e>
 8018fa4:	2a00      	cmp	r2, #0
 8018fa6:	dd06      	ble.n	8018fb6 <scalbn+0x96>
 8018fa8:	f36f 531e 	bfc	r3, #20, #11
 8018fac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018fb0:	ec45 4b10 	vmov	d0, r4, r5
 8018fb4:	bd70      	pop	{r4, r5, r6, pc}
 8018fb6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018fba:	da08      	bge.n	8018fce <scalbn+0xae>
 8018fbc:	2d00      	cmp	r5, #0
 8018fbe:	a10a      	add	r1, pc, #40	@ (adr r1, 8018fe8 <scalbn+0xc8>)
 8018fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fc4:	dac3      	bge.n	8018f4e <scalbn+0x2e>
 8018fc6:	a10e      	add	r1, pc, #56	@ (adr r1, 8019000 <scalbn+0xe0>)
 8018fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fcc:	e7bf      	b.n	8018f4e <scalbn+0x2e>
 8018fce:	3236      	adds	r2, #54	@ 0x36
 8018fd0:	f36f 531e 	bfc	r3, #20, #11
 8018fd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018fd8:	4620      	mov	r0, r4
 8018fda:	4b0d      	ldr	r3, [pc, #52]	@ (8019010 <scalbn+0xf0>)
 8018fdc:	4629      	mov	r1, r5
 8018fde:	2200      	movs	r2, #0
 8018fe0:	e7d8      	b.n	8018f94 <scalbn+0x74>
 8018fe2:	bf00      	nop
 8018fe4:	f3af 8000 	nop.w
 8018fe8:	c2f8f359 	.word	0xc2f8f359
 8018fec:	01a56e1f 	.word	0x01a56e1f
 8018ff0:	8800759c 	.word	0x8800759c
 8018ff4:	7e37e43c 	.word	0x7e37e43c
 8018ff8:	8800759c 	.word	0x8800759c
 8018ffc:	fe37e43c 	.word	0xfe37e43c
 8019000:	c2f8f359 	.word	0xc2f8f359
 8019004:	81a56e1f 	.word	0x81a56e1f
 8019008:	43500000 	.word	0x43500000
 801900c:	ffff3cb0 	.word	0xffff3cb0
 8019010:	3c900000 	.word	0x3c900000

08019014 <with_errno>:
 8019014:	b510      	push	{r4, lr}
 8019016:	ed2d 8b02 	vpush	{d8}
 801901a:	eeb0 8a40 	vmov.f32	s16, s0
 801901e:	eef0 8a60 	vmov.f32	s17, s1
 8019022:	4604      	mov	r4, r0
 8019024:	f7fe fac0 	bl	80175a8 <__errno>
 8019028:	eeb0 0a48 	vmov.f32	s0, s16
 801902c:	eef0 0a68 	vmov.f32	s1, s17
 8019030:	ecbd 8b02 	vpop	{d8}
 8019034:	6004      	str	r4, [r0, #0]
 8019036:	bd10      	pop	{r4, pc}

08019038 <xflow>:
 8019038:	4603      	mov	r3, r0
 801903a:	b507      	push	{r0, r1, r2, lr}
 801903c:	ec51 0b10 	vmov	r0, r1, d0
 8019040:	b183      	cbz	r3, 8019064 <xflow+0x2c>
 8019042:	4602      	mov	r2, r0
 8019044:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019048:	e9cd 2300 	strd	r2, r3, [sp]
 801904c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019050:	f7e7 faa2 	bl	8000598 <__aeabi_dmul>
 8019054:	ec41 0b10 	vmov	d0, r0, r1
 8019058:	2022      	movs	r0, #34	@ 0x22
 801905a:	b003      	add	sp, #12
 801905c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019060:	f7ff bfd8 	b.w	8019014 <with_errno>
 8019064:	4602      	mov	r2, r0
 8019066:	460b      	mov	r3, r1
 8019068:	e7ee      	b.n	8019048 <xflow+0x10>
 801906a:	0000      	movs	r0, r0
 801906c:	0000      	movs	r0, r0
	...

08019070 <__math_uflow>:
 8019070:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019078 <__math_uflow+0x8>
 8019074:	f7ff bfe0 	b.w	8019038 <xflow>
 8019078:	00000000 	.word	0x00000000
 801907c:	10000000 	.word	0x10000000

08019080 <__math_oflow>:
 8019080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019088 <__math_oflow+0x8>
 8019084:	f7ff bfd8 	b.w	8019038 <xflow>
 8019088:	00000000 	.word	0x00000000
 801908c:	70000000 	.word	0x70000000

08019090 <__ieee754_sqrt>:
 8019090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019094:	4a66      	ldr	r2, [pc, #408]	@ (8019230 <__ieee754_sqrt+0x1a0>)
 8019096:	ec55 4b10 	vmov	r4, r5, d0
 801909a:	43aa      	bics	r2, r5
 801909c:	462b      	mov	r3, r5
 801909e:	4621      	mov	r1, r4
 80190a0:	d110      	bne.n	80190c4 <__ieee754_sqrt+0x34>
 80190a2:	4622      	mov	r2, r4
 80190a4:	4620      	mov	r0, r4
 80190a6:	4629      	mov	r1, r5
 80190a8:	f7e7 fa76 	bl	8000598 <__aeabi_dmul>
 80190ac:	4602      	mov	r2, r0
 80190ae:	460b      	mov	r3, r1
 80190b0:	4620      	mov	r0, r4
 80190b2:	4629      	mov	r1, r5
 80190b4:	f7e7 f8ba 	bl	800022c <__adddf3>
 80190b8:	4604      	mov	r4, r0
 80190ba:	460d      	mov	r5, r1
 80190bc:	ec45 4b10 	vmov	d0, r4, r5
 80190c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c4:	2d00      	cmp	r5, #0
 80190c6:	dc0e      	bgt.n	80190e6 <__ieee754_sqrt+0x56>
 80190c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80190cc:	4322      	orrs	r2, r4
 80190ce:	d0f5      	beq.n	80190bc <__ieee754_sqrt+0x2c>
 80190d0:	b19d      	cbz	r5, 80190fa <__ieee754_sqrt+0x6a>
 80190d2:	4622      	mov	r2, r4
 80190d4:	4620      	mov	r0, r4
 80190d6:	4629      	mov	r1, r5
 80190d8:	f7e7 f8a6 	bl	8000228 <__aeabi_dsub>
 80190dc:	4602      	mov	r2, r0
 80190de:	460b      	mov	r3, r1
 80190e0:	f7e7 fb84 	bl	80007ec <__aeabi_ddiv>
 80190e4:	e7e8      	b.n	80190b8 <__ieee754_sqrt+0x28>
 80190e6:	152a      	asrs	r2, r5, #20
 80190e8:	d115      	bne.n	8019116 <__ieee754_sqrt+0x86>
 80190ea:	2000      	movs	r0, #0
 80190ec:	e009      	b.n	8019102 <__ieee754_sqrt+0x72>
 80190ee:	0acb      	lsrs	r3, r1, #11
 80190f0:	3a15      	subs	r2, #21
 80190f2:	0549      	lsls	r1, r1, #21
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d0fa      	beq.n	80190ee <__ieee754_sqrt+0x5e>
 80190f8:	e7f7      	b.n	80190ea <__ieee754_sqrt+0x5a>
 80190fa:	462a      	mov	r2, r5
 80190fc:	e7fa      	b.n	80190f4 <__ieee754_sqrt+0x64>
 80190fe:	005b      	lsls	r3, r3, #1
 8019100:	3001      	adds	r0, #1
 8019102:	02dc      	lsls	r4, r3, #11
 8019104:	d5fb      	bpl.n	80190fe <__ieee754_sqrt+0x6e>
 8019106:	1e44      	subs	r4, r0, #1
 8019108:	1b12      	subs	r2, r2, r4
 801910a:	f1c0 0420 	rsb	r4, r0, #32
 801910e:	fa21 f404 	lsr.w	r4, r1, r4
 8019112:	4323      	orrs	r3, r4
 8019114:	4081      	lsls	r1, r0
 8019116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801911a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801911e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019122:	07d2      	lsls	r2, r2, #31
 8019124:	bf5c      	itt	pl
 8019126:	005b      	lslpl	r3, r3, #1
 8019128:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801912c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019130:	bf58      	it	pl
 8019132:	0049      	lslpl	r1, r1, #1
 8019134:	2600      	movs	r6, #0
 8019136:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801913a:	107f      	asrs	r7, r7, #1
 801913c:	0049      	lsls	r1, r1, #1
 801913e:	2016      	movs	r0, #22
 8019140:	4632      	mov	r2, r6
 8019142:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8019146:	1915      	adds	r5, r2, r4
 8019148:	429d      	cmp	r5, r3
 801914a:	bfde      	ittt	le
 801914c:	192a      	addle	r2, r5, r4
 801914e:	1b5b      	suble	r3, r3, r5
 8019150:	1936      	addle	r6, r6, r4
 8019152:	0fcd      	lsrs	r5, r1, #31
 8019154:	3801      	subs	r0, #1
 8019156:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801915a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801915e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019162:	d1f0      	bne.n	8019146 <__ieee754_sqrt+0xb6>
 8019164:	4605      	mov	r5, r0
 8019166:	2420      	movs	r4, #32
 8019168:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801916c:	4293      	cmp	r3, r2
 801916e:	eb0c 0e00 	add.w	lr, ip, r0
 8019172:	dc02      	bgt.n	801917a <__ieee754_sqrt+0xea>
 8019174:	d113      	bne.n	801919e <__ieee754_sqrt+0x10e>
 8019176:	458e      	cmp	lr, r1
 8019178:	d811      	bhi.n	801919e <__ieee754_sqrt+0x10e>
 801917a:	f1be 0f00 	cmp.w	lr, #0
 801917e:	eb0e 000c 	add.w	r0, lr, ip
 8019182:	da3f      	bge.n	8019204 <__ieee754_sqrt+0x174>
 8019184:	2800      	cmp	r0, #0
 8019186:	db3d      	blt.n	8019204 <__ieee754_sqrt+0x174>
 8019188:	f102 0801 	add.w	r8, r2, #1
 801918c:	1a9b      	subs	r3, r3, r2
 801918e:	458e      	cmp	lr, r1
 8019190:	bf88      	it	hi
 8019192:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019196:	eba1 010e 	sub.w	r1, r1, lr
 801919a:	4465      	add	r5, ip
 801919c:	4642      	mov	r2, r8
 801919e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80191a2:	3c01      	subs	r4, #1
 80191a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80191a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80191ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80191b0:	d1dc      	bne.n	801916c <__ieee754_sqrt+0xdc>
 80191b2:	4319      	orrs	r1, r3
 80191b4:	d01b      	beq.n	80191ee <__ieee754_sqrt+0x15e>
 80191b6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8019234 <__ieee754_sqrt+0x1a4>
 80191ba:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8019238 <__ieee754_sqrt+0x1a8>
 80191be:	e9da 0100 	ldrd	r0, r1, [sl]
 80191c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80191c6:	f7e7 f82f 	bl	8000228 <__aeabi_dsub>
 80191ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80191ce:	4602      	mov	r2, r0
 80191d0:	460b      	mov	r3, r1
 80191d2:	4640      	mov	r0, r8
 80191d4:	4649      	mov	r1, r9
 80191d6:	f7e7 fc5b 	bl	8000a90 <__aeabi_dcmple>
 80191da:	b140      	cbz	r0, 80191ee <__ieee754_sqrt+0x15e>
 80191dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80191e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80191e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80191e8:	d10e      	bne.n	8019208 <__ieee754_sqrt+0x178>
 80191ea:	3601      	adds	r6, #1
 80191ec:	4625      	mov	r5, r4
 80191ee:	1073      	asrs	r3, r6, #1
 80191f0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80191f4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80191f8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80191fc:	086b      	lsrs	r3, r5, #1
 80191fe:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8019202:	e759      	b.n	80190b8 <__ieee754_sqrt+0x28>
 8019204:	4690      	mov	r8, r2
 8019206:	e7c1      	b.n	801918c <__ieee754_sqrt+0xfc>
 8019208:	f7e7 f810 	bl	800022c <__adddf3>
 801920c:	e9da 8900 	ldrd	r8, r9, [sl]
 8019210:	4602      	mov	r2, r0
 8019212:	460b      	mov	r3, r1
 8019214:	4640      	mov	r0, r8
 8019216:	4649      	mov	r1, r9
 8019218:	f7e7 fc30 	bl	8000a7c <__aeabi_dcmplt>
 801921c:	b120      	cbz	r0, 8019228 <__ieee754_sqrt+0x198>
 801921e:	1cab      	adds	r3, r5, #2
 8019220:	bf08      	it	eq
 8019222:	3601      	addeq	r6, #1
 8019224:	3502      	adds	r5, #2
 8019226:	e7e2      	b.n	80191ee <__ieee754_sqrt+0x15e>
 8019228:	1c6b      	adds	r3, r5, #1
 801922a:	f023 0501 	bic.w	r5, r3, #1
 801922e:	e7de      	b.n	80191ee <__ieee754_sqrt+0x15e>
 8019230:	7ff00000 	.word	0x7ff00000
 8019234:	0801c430 	.word	0x0801c430
 8019238:	0801c428 	.word	0x0801c428

0801923c <_init>:
 801923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923e:	bf00      	nop
 8019240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019242:	bc08      	pop	{r3}
 8019244:	469e      	mov	lr, r3
 8019246:	4770      	bx	lr

08019248 <_fini>:
 8019248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924a:	bf00      	nop
 801924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801924e:	bc08      	pop	{r3}
 8019250:	469e      	mov	lr, r3
 8019252:	4770      	bx	lr
