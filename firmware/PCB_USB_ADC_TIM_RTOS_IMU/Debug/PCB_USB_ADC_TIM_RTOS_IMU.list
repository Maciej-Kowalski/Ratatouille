
PCB_USB_ADC_TIM_RTOS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c364  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003570  0801c4a8  0801c4a8  0001d4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801fa18  0801fa18  00020a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801fa20  0801fa20  00020a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801fa24  0801fa24  00020a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e0  20000008  0801fa28  00021008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ad8c  200002e8  0801fd08  000212e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000b074  0801fd08  00022074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000212e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e02a  00000000  00000000  00021318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007097  00000000  00000000  0005f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003880  00000000  00000000  000663e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002bbb  00000000  00000000  00069c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002c4a2  00000000  00000000  0006c81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a4c3  00000000  00000000  00098cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010f64b  00000000  00000000  000d3180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e27cb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010808  00000000  00000000  001e2810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  001f3018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e8 	.word	0x200002e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c48c 	.word	0x0801c48c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002ec 	.word	0x200002ec
 800017c:	0801c48c 	.word	0x0801c48c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8000c04:	4a2b      	ldr	r2, [pc, #172]	@ (8000cb4 <bmi2_sec_init+0xbc>)
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c0e:	6018      	str	r0, [r3, #0]
 8000c10:	3304      	adds	r3, #4
 8000c12:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f001 ff75 	bl	8002b04 <null_ptr_check>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d140      	bne.n	8000ca8 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7a5b      	ldrb	r3, [r3, #9]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d108      	bne.n	8000c48 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000c36:	f107 010e 	add.w	r1, r7, #14
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f83a 	bl	8000cb8 <bmi2_get_regs>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12b      	bne.n	8000ca8 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000c50:	f107 010e 	add.w	r1, r7, #14
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f82d 	bl	8000cb8 <bmi2_get_regs>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d11e      	bne.n	8000ca8 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	7bbb      	ldrb	r3, [r7, #14]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d114      	bne.n	8000c9e <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2210      	movs	r2, #16
 8000c78:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3328      	adds	r3, #40	@ 0x28
 8000c84:	f107 0208 	add.w	r2, r7, #8
 8000c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c8c:	6018      	str	r0, [r3, #0]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f906 	bl	8000ea4 <bmi2_soft_reset>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e004      	b.n	8000ca8 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 8000c9e:	7bba      	ldrb	r2, [r7, #14]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 8000ca4:	23fd      	movs	r3, #253	@ 0xfd
 8000ca6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0801c4a8 	.word	0x0801c4a8

08000cb8 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b0a7      	sub	sp, #156	@ 0x9c
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f001 ff17 	bl	8002b04 <null_ptr_check>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8000cdc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d153      	bne.n	8000d8c <bmi2_get_regs+0xd4>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d050      	beq.n	8000d8c <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7a5b      	ldrb	r3, [r3, #9]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d103      	bne.n	8000cfa <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cf8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	7ad2      	ldrb	r2, [r2, #11]
 8000d04:	4413      	add	r3, r2
 8000d06:	461a      	mov	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f107 0114 	add.w	r1, r7, #20
 8000d10:	7bf8      	ldrb	r0, [r7, #15]
 8000d12:	47a0      	blx	r4
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d108      	bne.n	8000d38 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6852      	ldr	r2, [r2, #4]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000d34:	4798      	blx	r3
 8000d36:	e006      	b.n	8000d46 <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6852      	ldr	r2, [r2, #4]
 8000d40:	4611      	mov	r1, r2
 8000d42:	2002      	movs	r0, #2
 8000d44:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d119      	bne.n	8000d84 <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8000d50:	e012      	b.n	8000d78 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8000d52:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	7ad2      	ldrb	r2, [r2, #11]
 8000d5a:	441a      	add	r2, r3
 8000d5c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	440b      	add	r3, r1
 8000d64:	3298      	adds	r2, #152	@ 0x98
 8000d66:	443a      	add	r2, r7
 8000d68:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8000d6c:	701a      	strb	r2, [r3, #0]
                index++;
 8000d6e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000d72:	3301      	adds	r3, #1
 8000d74:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8000d78:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000d7c:	89bb      	ldrh	r3, [r7, #12]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3e7      	bcc.n	8000d52 <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8000d82:	e006      	b.n	8000d92 <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 8000d84:	23fe      	movs	r3, #254	@ 0xfe
 8000d86:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8000d8a:	e002      	b.n	8000d92 <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8000d8c:	23ff      	movs	r3, #255	@ 0xff
 8000d8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8000d92:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	379c      	adds	r7, #156	@ 0x9c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}

08000d9e <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8000d9e:	b590      	push	{r4, r7, lr}
 8000da0:	b087      	sub	sp, #28
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	4613      	mov	r3, r2
 8000dae:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f001 fea7 	bl	8002b04 <null_ptr_check>
 8000db6:	4603      	mov	r3, r0
 8000db8:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 8000dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d168      	bne.n	8000e94 <bmi2_set_regs+0xf6>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d065      	beq.n	8000e94 <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7a5b      	ldrb	r3, [r3, #9]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d103      	bne.n	8000dd8 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dd6:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d129      	bne.n	8000e36 <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	82bb      	strh	r3, [r7, #20]
 8000de6:	e021      	b.n	8000e2c <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8000dec:	8abb      	ldrh	r3, [r7, #20]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4413      	add	r3, r2
 8000df4:	b2d8      	uxtb	r0, r3
 8000df6:	8abb      	ldrh	r3, [r7, #20]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	18d1      	adds	r1, r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	47a0      	blx	r4
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6852      	ldr	r2, [r2, #4]
 8000e14:	4611      	mov	r1, r2
 8000e16:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e1a:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d11b      	bne.n	8000e5e <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8000e26:	8abb      	ldrh	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	82bb      	strh	r3, [r7, #20]
 8000e2c:	8aba      	ldrh	r2, [r7, #20]
 8000e2e:	89bb      	ldrh	r3, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3d9      	bcc.n	8000de8 <bmi2_set_regs+0x4a>
 8000e34:	e014      	b.n	8000e60 <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8000e3a:	89ba      	ldrh	r2, [r7, #12]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	7bf8      	ldrb	r0, [r7, #15]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	47a0      	blx	r4
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6852      	ldr	r2, [r2, #4]
 8000e56:	4611      	mov	r1, r2
 8000e58:	2002      	movs	r0, #2
 8000e5a:	4798      	blx	r3
 8000e5c:	e000      	b.n	8000e60 <bmi2_set_regs+0xc2>
                    break;
 8000e5e:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e64:	d10e      	bne.n	8000e84 <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8000e7a:	e003      	b.n	8000e84 <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 8000e8e:	23fe      	movs	r3, #254	@ 0xfe
 8000e90:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8000e92:	e001      	b.n	8000e98 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8000e94:	23ff      	movs	r3, #255	@ 0xff
 8000e96:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 8000eac:	23b6      	movs	r3, #182	@ 0xb6
 8000eae:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f001 fe25 	bl	8002b04 <null_ptr_check>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d139      	bne.n	8000f3a <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 8000ec6:	f107 010e 	add.w	r1, r7, #14
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	207e      	movs	r0, #126	@ 0x7e
 8000ed0:	f7ff ff65 	bl	8000d9e <bmi2_set_regs>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6852      	ldr	r2, [r2, #4]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ee6:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10c      	bne.n	8000f12 <bmi2_soft_reset+0x6e>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a5b      	ldrb	r3, [r3, #9]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d108      	bne.n	8000f12 <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 8000f00:	f107 010d 	add.w	r1, r7, #13
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fed5 	bl	8000cb8 <bmi2_get_regs>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d104      	bne.n	8000f24 <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f85f 	bl	8000fde <bmi2_write_config_file>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d106      	bne.n	8000f3a <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	6039      	str	r1, [r7, #0]
 8000f50:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f56:	6838      	ldr	r0, [r7, #0]
 8000f58:	f001 fdd4 	bl	8002b04 <null_ptr_check>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d134      	bne.n	8000fd2 <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8000f68:	f107 010e 	add.w	r1, r7, #14
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	207c      	movs	r0, #124	@ 0x7c
 8000f72:	f7ff fea1 	bl	8000cb8 <bmi2_get_regs>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d127      	bne.n	8000fd2 <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	f023 0301 	bic.w	r3, r3, #1
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8000f9e:	f107 010e 	add.w	r1, r7, #14
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	207c      	movs	r0, #124	@ 0x7c
 8000fa8:	f7ff fef9 	bl	8000d9e <bmi2_set_regs>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 8000fb8:	23f3      	movs	r3, #243	@ 0xf3
 8000fba:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d106      	bne.n	8000fd2 <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f001 fd8a 	bl	8002b04 <null_ptr_check>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d13b      	bne.n	8001074 <bmi2_write_config_file+0x96>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001002:	2b00      	cmp	r3, #0
 8001004:	d036      	beq.n	8001074 <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	89db      	ldrh	r3, [r3, #14]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	89db      	ldrh	r3, [r3, #14]
 8001018:	3b01      	subs	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	89db      	ldrh	r3, [r3, #14]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d802      	bhi.n	800102e <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 fcab 	bl	800198a <write_config_file>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11c      	bne.n	800107a <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 8001040:	f107 030e 	add.w	r3, r7, #14
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fbae 	bl	80017a8 <bmi2_get_internal_status>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 800105a:	7bba      	ldrb	r2, [r7, #14]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 8001060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d108      	bne.n	800107a <bmi2_write_config_file+0x9c>
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 800106e:	23f7      	movs	r3, #247	@ 0xf7
 8001070:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001072:	e002      	b.n	800107a <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001074:	23ff      	movs	r3, #255	@ 0xff
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e000      	b.n	800107c <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 800107a:	bf00      	nop
    }

    return rslt;
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <bmi2_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi2_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	460b      	mov	r3, r1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f001 fd2e 	bl	8002b04 <null_ptr_check>
 80010a8:	4603      	mov	r3, r0
 80010aa:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 80010ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d117      	bne.n	80010e4 <bmi2_sensor_enable+0x5c>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d014      	beq.n	80010e4 <bmi2_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 80010ba:	f107 0210 	add.w	r2, r7, #16
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	4619      	mov	r1, r3
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 fe5e 	bl	8002d84 <select_sensor>
 80010c8:	4603      	mov	r3, r0
 80010ca:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80010cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <bmi2_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 80010d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	f001 feae 	bl	8002e3a <sensor_enable>
 80010de:	4603      	mov	r3, r0
 80010e0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80010e2:	e001      	b.n	80010e8 <bmi2_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80010e4:	23ff      	movs	r3, #255	@ 0xff
 80010e6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80010e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	460b      	mov	r3, r1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f001 fcfc 	bl	8002b04 <null_ptr_check>
 800110c:	4603      	mov	r3, r0
 800110e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8001110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 8099 	bne.w	800124c <bmi2_set_sensor_config+0x158>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8095 	beq.w	800124c <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001128:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 800112a:	2300      	movs	r3, #0
 800112c:	75bb      	strb	r3, [r7, #22]
 800112e:	e079      	b.n	8001224 <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d105      	bne.n	8001142 <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ff04 	bl	8000f46 <bmi2_set_adv_power_save>
 800113e:	4603      	mov	r3, r0
 8001140:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 8001142:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d165      	bne.n	8001216 <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 800114a:	7dba      	ldrb	r2, [r7, #22]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	461a      	mov	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d857      	bhi.n	8001210 <bmi2_set_sensor_config+0x11c>
 8001160:	a201      	add	r2, pc, #4	@ (adr r2, 8001168 <bmi2_set_sensor_config+0x74>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001191 	.word	0x08001191
 800116c:	080011b1 	.word	0x080011b1
 8001170:	080011d1 	.word	0x080011d1
 8001174:	08001211 	.word	0x08001211
 8001178:	08001211 	.word	0x08001211
 800117c:	08001211 	.word	0x08001211
 8001180:	08001211 	.word	0x08001211
 8001184:	08001211 	.word	0x08001211
 8001188:	08001211 	.word	0x08001211
 800118c:	080011f1 	.word	0x080011f1
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001190:	7dba      	ldrb	r2, [r7, #22]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	3304      	adds	r3, #4
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fbb0 	bl	800290a <set_accel_config>
 80011aa:	4603      	mov	r3, r0
 80011ac:	75fb      	strb	r3, [r7, #23]
                        break;
 80011ae:	e032      	b.n	8001216 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80011b0:	7dba      	ldrb	r2, [r7, #22]
 80011b2:	4613      	mov	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fc17 	bl	80029f8 <set_gyro_config>
 80011ca:	4603      	mov	r3, r0
 80011cc:	75fb      	strb	r3, [r7, #23]
                        break;
 80011ce:	e022      	b.n	8001216 <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 80011d0:	7dba      	ldrb	r2, [r7, #22]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	3304      	adds	r3, #4
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fdc9 	bl	8001d7c <set_aux_config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
                        break;
 80011ee:	e012      	b.n	8001216 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 80011f0:	7dba      	ldrb	r2, [r7, #22]
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	3304      	adds	r3, #4
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fde8 	bl	8001dda <set_gyro_user_gain_config>
 800120a:	4603      	mov	r3, r0
 800120c:	75fb      	strb	r3, [r7, #23]
                        break;
 800120e:	e002      	b.n	8001216 <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8001210:	23f8      	movs	r3, #248	@ 0xf8
 8001212:	75fb      	strb	r3, [r7, #23]
                        break;
 8001214:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 8001216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 800121e:	7dbb      	ldrb	r3, [r7, #22]
 8001220:	3301      	adds	r3, #1
 8001222:	75bb      	strb	r3, [r7, #22]
 8001224:	7dba      	ldrb	r2, [r7, #22]
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	429a      	cmp	r2, r3
 800122a:	d381      	bcc.n	8001130 <bmi2_set_sensor_config+0x3c>
 800122c:	e000      	b.n	8001230 <bmi2_set_sensor_config+0x13c>
            {
                break;
 800122e:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10d      	bne.n	8001252 <bmi2_set_sensor_config+0x15e>
 8001236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff fe80 	bl	8000f46 <bmi2_set_adv_power_save>
 8001246:	4603      	mov	r3, r0
 8001248:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800124a:	e002      	b.n	8001252 <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800124c:	23ff      	movs	r3, #255	@ 0xff
 800124e:	75fb      	strb	r3, [r7, #23]
 8001250:	e000      	b.n	8001254 <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001252:	bf00      	nop
    }

    return rslt;
 8001254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <bmi2_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi2_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	460b      	mov	r3, r1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 fc46 	bl	8002b04 <null_ptr_check>
 8001278:	4603      	mov	r3, r0
 800127a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 800127c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f040 80b0 	bne.w	80013e6 <bmi2_get_sensor_config+0x186>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80ac 	beq.w	80013e6 <bmi2_get_sensor_config+0x186>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001294:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8001296:	2300      	movs	r3, #0
 8001298:	75bb      	strb	r3, [r7, #22]
 800129a:	e08f      	b.n	80013bc <bmi2_get_sensor_config+0x15c>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 800129c:	7dba      	ldrb	r2, [r7, #22]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d80a      	bhi.n	80012c8 <bmi2_get_sensor_config+0x68>
 80012b2:	7dba      	ldrb	r2, [r7, #22]
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d108      	bne.n	80012da <bmi2_get_sensor_config+0x7a>
            {

                if (aps_stat == BMI2_ENABLE)
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <bmi2_get_sensor_config+0x7a>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fe38 	bl	8000f46 <bmi2_set_adv_power_save>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 80012da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d165      	bne.n	80013ae <bmi2_get_sensor_config+0x14e>
            {
                switch (sens_cfg[loop].type)
 80012e2:	7dba      	ldrb	r2, [r7, #22]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	461a      	mov	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d857      	bhi.n	80013a8 <bmi2_get_sensor_config+0x148>
 80012f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001300 <bmi2_get_sensor_config+0xa0>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001329 	.word	0x08001329
 8001304:	08001349 	.word	0x08001349
 8001308:	08001369 	.word	0x08001369
 800130c:	080013a9 	.word	0x080013a9
 8001310:	080013a9 	.word	0x080013a9
 8001314:	080013a9 	.word	0x080013a9
 8001318:	080013a9 	.word	0x080013a9
 800131c:	080013a9 	.word	0x080013a9
 8001320:	080013a9 	.word	0x080013a9
 8001324:	08001389 	.word	0x08001389
                {
                    /* Get accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001328:	7dba      	ldrb	r2, [r7, #22]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	3304      	adds	r3, #4
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ff79 	bl	8002234 <get_accel_config>
 8001342:	4603      	mov	r3, r0
 8001344:	75fb      	strb	r3, [r7, #23]
                        break;
 8001346:	e032      	b.n	80013ae <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8001348:	7dba      	ldrb	r2, [r7, #22]
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 ffab 	bl	80022b8 <get_gyro_config>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
                        break;
 8001366:	e022      	b.n	80013ae <bmi2_get_sensor_config+0x14e>

                    /* Get auxiliary configuration */
                    case BMI2_AUX:
                        rslt = get_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8001368:	7dba      	ldrb	r2, [r7, #22]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	3304      	adds	r3, #4
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 ffed 	bl	800235c <get_aux_config>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]
                        break;
 8001386:	e012      	b.n	80013ae <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = get_gyro_gain_update_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 8001388:	7dba      	ldrb	r2, [r7, #22]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	3304      	adds	r3, #4
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f001 f813 	bl	80023c8 <get_gyro_gain_update_config>
 80013a2:	4603      	mov	r3, r0
 80013a4:	75fb      	strb	r3, [r7, #23]
                        break;
 80013a6:	e002      	b.n	80013ae <bmi2_get_sensor_config+0x14e>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 80013a8:	23f8      	movs	r3, #248	@ 0xf8
 80013aa:	75fb      	strb	r3, [r7, #23]
                        break;
 80013ac:	bf00      	nop
                }
            }

            /* Return error if any of the get configurations fail */
            if (rslt != BMI2_OK)
 80013ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d108      	bne.n	80013c8 <bmi2_get_sensor_config+0x168>
        for (loop = 0; loop < n_sens; loop++)
 80013b6:	7dbb      	ldrb	r3, [r7, #22]
 80013b8:	3301      	adds	r3, #1
 80013ba:	75bb      	strb	r3, [r7, #22]
 80013bc:	7dba      	ldrb	r2, [r7, #22]
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f4ff af6b 	bcc.w	800129c <bmi2_get_sensor_config+0x3c>
 80013c6:	e000      	b.n	80013ca <bmi2_get_sensor_config+0x16a>
            {
                break;
 80013c8:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80013ca:	7d7b      	ldrb	r3, [r7, #21]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10d      	bne.n	80013ec <bmi2_get_sensor_config+0x18c>
 80013d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <bmi2_get_sensor_config+0x18c>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff fdb3 	bl	8000f46 <bmi2_set_adv_power_save>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80013e4:	e002      	b.n	80013ec <bmi2_get_sensor_config+0x18c>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80013e6:	23ff      	movs	r3, #255	@ 0xff
 80013e8:	75fb      	strb	r3, [r7, #23]
 80013ea:	e000      	b.n	80013ee <bmi2_get_sensor_config+0x18e>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80013ec:	bf00      	nop
    }

    return rslt;
 80013ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop

080013fc <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	460b      	mov	r3, r1
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 fb78 	bl	8002b04 <null_ptr_check>
 8001414:	4603      	mov	r3, r0
 8001416:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8001418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d15c      	bne.n	80014da <bmi2_get_feature_data+0xde>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d059      	beq.n	80014da <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800142c:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 800142e:	2300      	movs	r3, #0
 8001430:	75bb      	strb	r3, [r7, #22]
 8001432:	e04b      	b.n	80014cc <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 8001434:	7dbb      	ldrb	r3, [r7, #22]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d908      	bls.n	8001454 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 8001442:	7d7b      	ldrb	r3, [r7, #21]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fd7b 	bl	8000f46 <bmi2_set_adv_power_save>
 8001450:	4603      	mov	r3, r0
 8001452:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8001454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d127      	bne.n	80014ac <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b09      	cmp	r3, #9
 8001468:	d00d      	beq.n	8001486 <bmi2_get_feature_data+0x8a>
 800146a:	2b29      	cmp	r3, #41	@ 0x29
 800146c:	d117      	bne.n	800149e <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 800146e:	7dbb      	ldrb	r3, [r7, #22]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	3304      	adds	r3, #4
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fbfc 	bl	8002c78 <get_gyro_cross_sense>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
                        break;
 8001484:	e00e      	b.n	80014a4 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 8001486:	7dbb      	ldrb	r3, [r7, #22]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fb55 	bl	8002b42 <get_gyro_gain_update_status>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]
                        break;
 800149c:	e002      	b.n	80014a4 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 800149e:	23f8      	movs	r3, #248	@ 0xf8
 80014a0:	75fb      	strb	r3, [r7, #23]
                        break;
 80014a2:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 80014a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d114      	bne.n	80014d6 <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80014ac:	7d7b      	ldrb	r3, [r7, #21]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d109      	bne.n	80014c6 <bmi2_get_feature_data+0xca>
 80014b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fd42 	bl	8000f46 <bmi2_set_adv_power_save>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80014c6:	7dbb      	ldrb	r3, [r7, #22]
 80014c8:	3301      	adds	r3, #1
 80014ca:	75bb      	strb	r3, [r7, #22]
 80014cc:	7dba      	ldrb	r2, [r7, #22]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3af      	bcc.n	8001434 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80014d4:	e003      	b.n	80014de <bmi2_get_feature_data+0xe2>
                    break;
 80014d6:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80014d8:	e001      	b.n	80014de <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80014da:	23ff      	movs	r3, #255	@ 0xff
 80014dc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80014de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <bmi2_get_sensor_data>:
/*!
 * @brief This API gets the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_get_sensor_data(struct bmi2_sens_data *data, struct bmi2_dev *dev)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b08a      	sub	sp, #40	@ 0x28
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]

    /* Array to hold register sensor data */
    uint8_t sensor_data[BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES];

    /* Null-pointer check */
    if (data != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d018      	beq.n	800152c <bmi2_get_sensor_data+0x42>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, sensor_data, BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES, dev);
 80014fa:	f107 010c 	add.w	r1, r7, #12
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2218      	movs	r2, #24
 8001502:	2003      	movs	r0, #3
 8001504:	f7ff fbd8 	bl	8000cb8 <bmi2_get_regs>
 8001508:	4603      	mov	r3, r0
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI2_OK)
 800150e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <bmi2_get_sensor_data+0x48>
        {
            rslt = bmi2_parse_sensor_data(sensor_data, data, dev);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f80d 	bl	800153e <bmi2_parse_sensor_data>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800152a:	e002      	b.n	8001532 <bmi2_get_sensor_data+0x48>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800152c:	23ff      	movs	r3, #255	@ 0xff
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001532:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001536:	4618      	mov	r0, r3
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <bmi2_parse_sensor_data>:
/*!
 * @brief This API parses the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_parse_sensor_data(const uint8_t *sensor_data, struct bmi2_sens_data *data, const struct bmi2_dev *dev)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b088      	sub	sp, #32
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variables to define loop */
    uint8_t count = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	77bb      	strb	r3, [r7, #30]

    uint8_t index = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	777b      	strb	r3, [r7, #29]

    uint32_t sensor_time_byte3 = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
    uint16_t sensor_time_byte2 = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	82fb      	strh	r3, [r7, #22]
    uint8_t sensor_time_byte1 = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 fad0 	bl	8002b04 <null_ptr_check>
 8001564:	4603      	mov	r3, r0
 8001566:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMI2_OK) && (data != NULL))
 8001568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d156      	bne.n	800161e <bmi2_parse_sensor_data+0xe0>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d053      	beq.n	800161e <bmi2_parse_sensor_data+0xe0>
    {
        /* Update auxiliary sensor data length */
        index = BMI2_AUX_START_INDEX;
 8001576:	2301      	movs	r3, #1
 8001578:	777b      	strb	r3, [r7, #29]

        /* Get the 8 bytes of auxiliary data */
        do
        {
            *(data->aux_data + count++) = (sensor_data[index++]);
 800157a:	7f7b      	ldrb	r3, [r7, #29]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	777a      	strb	r2, [r7, #29]
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	441a      	add	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f103 0118 	add.w	r1, r3, #24
 800158c:	7fbb      	ldrb	r3, [r7, #30]
 800158e:	1c58      	adds	r0, r3, #1
 8001590:	77b8      	strb	r0, [r7, #30]
 8001592:	440b      	add	r3, r1
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	701a      	strb	r2, [r3, #0]
        } while (count < BMI2_AUX_NUM_BYTES);
 8001598:	7fbb      	ldrb	r3, [r7, #30]
 800159a:	2b07      	cmp	r3, #7
 800159c:	d9ed      	bls.n	800157a <bmi2_parse_sensor_data+0x3c>

        /* Update accelerometer sensor data length */
        index = BMI2_ACC_START_INDEX;
 800159e:	2309      	movs	r3, #9
 80015a0:	777b      	strb	r3, [r7, #29]

        /* Get accelerometer data from the register */
        get_acc_gyr_data(&data->acc, &sensor_data[index]);
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	7f7b      	ldrb	r3, [r7, #29]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f001 f836 	bl	800261c <get_acc_gyr_data>

        /* Get the re-mapped accelerometer data */
        get_remapped_data(&data->acc, dev);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 f895 	bl	80026e4 <get_remapped_data>

        /* Update gyroscope sensor data length */
        index = BMI2_GYR_START_INDEX;
 80015ba:	230f      	movs	r3, #15
 80015bc:	777b      	strb	r3, [r7, #29]

        /* Get gyroscope data from the register */
        get_acc_gyr_data(&data->gyr, &sensor_data[index]);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f103 000c 	add.w	r0, r3, #12
 80015c4:	7f7b      	ldrb	r3, [r7, #29]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f001 f826 	bl	800261c <get_acc_gyr_data>

        /* Get the compensated gyroscope data */
        comp_gyro_cross_axis_sensitivity(&data->gyr, dev);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	330c      	adds	r3, #12
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 f937 	bl	800284a <comp_gyro_cross_axis_sensitivity>

        /* Get the re-mapped gyroscope data */
        get_remapped_data(&data->gyr, dev);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	330c      	adds	r3, #12
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f87e 	bl	80026e4 <get_remapped_data>

        sensor_time_byte3 = sensor_data[BMI2_PARSE_SENSOR_TIME_MSB_BYTE] << 16;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3317      	adds	r3, #23
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	61bb      	str	r3, [r7, #24]
        sensor_time_byte2 = sensor_data[BMI2_PARSE_SENSOR_TIME_XLSB_BYTE] << 8;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3316      	adds	r3, #22
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	82fb      	strh	r3, [r7, #22]
        sensor_time_byte1 = sensor_data[BMI2_PARSE_SENSOR_TIME_LSB_BYTE];
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3315      	adds	r3, #21
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	757b      	strb	r3, [r7, #21]

        data->sens_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
 8001604:	8afa      	ldrh	r2, [r7, #22]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	431a      	orrs	r2, r3
 800160a:	7d7b      	ldrb	r3, [r7, #21]
 800160c:	431a      	orrs	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	621a      	str	r2, [r3, #32]

        /* Store status register value in structure */
        data->status = sensor_data[BMI2_STATUS_INDEX];
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800161c:	e001      	b.n	8001622 <bmi2_parse_sensor_data+0xe4>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800161e:	23ff      	movs	r3, #255	@ 0xff
 8001620:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001622:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f001 fa63 	bl	8002b04 <null_ptr_check>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10b      	bne.n	8001662 <bmi2_get_status+0x34>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	2003      	movs	r0, #3
 8001658:	f7ff fb2e 	bl	8000cb8 <bmi2_get_regs>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e001      	b.n	8001666 <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001662:	23ff      	movs	r3, #255	@ 0xff
 8001664:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <bmi2_map_data_int>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi2_map_data_int(uint8_t data_int, enum bmi2_hw_int_pin int_pin, struct bmi2_dev *dev)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	603a      	str	r2, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	460b      	mov	r3, r1
 8001682:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to mask interrupt pin 1 - lower nibble */
    uint8_t int1_mask = data_int;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	73bb      	strb	r3, [r7, #14]

    /* Variable to mask interrupt pin 2 - higher nibble */
    uint8_t int2_mask = (uint8_t)(data_int << 4);
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	737b      	strb	r3, [r7, #13]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	733b      	strb	r3, [r7, #12]

    /* Read interrupt map1 and map2 and register */
    rslt = bmi2_get_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 8001692:	f107 010c 	add.w	r1, r7, #12
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	2058      	movs	r0, #88	@ 0x58
 800169c:	f7ff fb0c 	bl	8000cb8 <bmi2_get_regs>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d141      	bne.n	8001730 <bmi2_map_data_int+0xbc>
    {
        if (int_pin < BMI2_INT_PIN_MAX)
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d83c      	bhi.n	800172c <bmi2_map_data_int+0xb8>
        {
            switch (int_pin)
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d82e      	bhi.n	8001716 <bmi2_map_data_int+0xa2>
 80016b8:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <bmi2_map_data_int+0x4c>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016ed 	.word	0x080016ed
 80016c8:	080016f9 	.word	0x080016f9
 80016cc:	08001705 	.word	0x08001705
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data &= ~(int1_mask | int2_mask);
 80016d0:	7bba      	ldrb	r2, [r7, #14]
 80016d2:	7b7b      	ldrb	r3, [r7, #13]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	b25a      	sxtb	r2, r3
 80016de:	7b3b      	ldrb	r3, [r7, #12]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	4013      	ands	r3, r2
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	733b      	strb	r3, [r7, #12]
                    break;
 80016ea:	e015      	b.n	8001718 <bmi2_map_data_int+0xa4>
                case BMI2_INT1:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 1
                     */
                    reg_data |= int1_mask;
 80016ec:	7b3a      	ldrb	r2, [r7, #12]
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	733b      	strb	r3, [r7, #12]
                    break;
 80016f6:	e00f      	b.n	8001718 <bmi2_map_data_int+0xa4>
                case BMI2_INT2:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 2
                     */
                    reg_data |= int2_mask;
 80016f8:	7b3a      	ldrb	r2, [r7, #12]
 80016fa:	7b7b      	ldrb	r3, [r7, #13]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	733b      	strb	r3, [r7, #12]
                    break;
 8001702:	e009      	b.n	8001718 <bmi2_map_data_int+0xa4>
                case BMI2_INT_BOTH:

                    /* Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data |= (int1_mask | int2_mask);
 8001704:	7bba      	ldrb	r2, [r7, #14]
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	4313      	orrs	r3, r2
 800170a:	b2da      	uxtb	r2, r3
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	733b      	strb	r3, [r7, #12]
                    break;
 8001714:	e000      	b.n	8001718 <bmi2_map_data_int+0xa4>
                default:
                    break;
 8001716:	bf00      	nop
            }

            /* Set the interrupts in the map register */
            rslt = bmi2_set_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 8001718:	f107 010c 	add.w	r1, r7, #12
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	2058      	movs	r0, #88	@ 0x58
 8001722:	f7ff fb3c 	bl	8000d9e <bmi2_set_regs>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e001      	b.n	8001730 <bmi2_map_data_int+0xbc>
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 800172c:	23f4      	movs	r3, #244	@ 0xf4
 800172e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d020      	beq.n	8001798 <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 f9d4 	bl	8002b04 <null_ptr_check>
 800175c:	4603      	mov	r3, r0
 800175e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8001760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d114      	bne.n	8001792 <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 8001768:	2329      	movs	r3, #41	@ 0x29
 800176a:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe41 	bl	80013fc <bmi2_get_feature_data>
 800177a:	4603      	mov	r3, r0
 800177c:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 800177e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10a      	bne.n	800179c <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 8001786:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001790:	e004      	b.n	800179c <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8001792:	23ff      	movs	r3, #255	@ 0xff
 8001794:	77fb      	strb	r3, [r7, #31]
 8001796:	e001      	b.n	800179c <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8001798:	23f8      	movs	r3, #248	@ 0xf8
 800179a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800179c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f001 f9a6 	bl	8002b04 <null_ptr_check>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 80017bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d113      	bne.n	80017ec <bmi2_get_internal_status+0x44>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	6852      	ldr	r2, [r2, #4]
 80017d2:	4611      	mov	r1, r2
 80017d4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80017d8:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	2021      	movs	r0, #33	@ 0x21
 80017e2:	f7ff fa69 	bl	8000cb8 <bmi2_get_regs>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e001      	b.n	80017f0 <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80017ec:	23ff      	movs	r3, #255	@ 0xff
 80017ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 800180a:	2310      	movs	r3, #16
 800180c:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 8001812:	2330      	movs	r3, #48	@ 0x30
 8001814:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <bmi2_get_feat_config+0x2a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 8001826:	23ff      	movs	r3, #255	@ 0xff
 8001828:	75fb      	strb	r3, [r7, #23]
 800182a:	e073      	b.n	8001914 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7e1a      	ldrb	r2, [r3, #24]
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	429a      	cmp	r2, r3
 8001834:	d96c      	bls.n	8001910 <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 8001836:	f107 010f 	add.w	r1, r7, #15
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	202f      	movs	r0, #47	@ 0x2f
 8001840:	f7ff faad 	bl	8000d9e <bmi2_set_regs>
 8001844:	4603      	mov	r3, r0
 8001846:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d152      	bne.n	80018f6 <bmi2_get_feat_config+0xfa>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	89db      	ldrh	r3, [r3, #14]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d84e      	bhi.n	80018f6 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	89db      	ldrh	r3, [r3, #14]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d041      	beq.n	80018ea <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	89db      	ldrh	r3, [r3, #14]
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8001872:	e03a      	b.n	80018ea <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8001874:	7dbb      	ldrb	r3, [r7, #22]
 8001876:	b29a      	uxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	89db      	ldrh	r3, [r3, #14]
 800187c:	429a      	cmp	r2, r3
 800187e:	d31d      	bcc.n	80018bc <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	18d1      	adds	r1, r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	89da      	ldrh	r2, [r3, #14]
 800188a:	7d38      	ldrb	r0, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f7ff fa13 	bl	8000cb8 <bmi2_get_regs>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	89db      	ldrh	r3, [r3, #14]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	4413      	add	r3, r2
 80018a0:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	89db      	ldrh	r3, [r3, #14]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	7d3b      	ldrb	r3, [r7, #20]
 80018aa:	4413      	add	r3, r2
 80018ac:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	89db      	ldrh	r3, [r3, #14]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	7d7b      	ldrb	r3, [r7, #21]
 80018b6:	4413      	add	r3, r2
 80018b8:	757b      	strb	r3, [r7, #21]
 80018ba:	e00e      	b.n	80018da <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 80018bc:	7cfb      	ldrb	r3, [r7, #19]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	18d1      	adds	r1, r2, r3
 80018c2:	7dbb      	ldrb	r3, [r7, #22]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	7d38      	ldrb	r0, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f7ff f9f5 	bl	8000cb8 <bmi2_get_regs>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 80018d2:	7d7a      	ldrb	r2, [r7, #21]
 80018d4:	7dbb      	ldrb	r3, [r7, #22]
 80018d6:	4413      	add	r3, r2
 80018d8:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 80018da:	7d7b      	ldrb	r3, [r7, #21]
 80018dc:	f1c3 0310 	rsb	r3, r3, #16
 80018e0:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 80018e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d103      	bne.n	80018f2 <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 80018ea:	7dbb      	ldrb	r3, [r7, #22]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1c1      	bne.n	8001874 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80018f0:	e010      	b.n	8001914 <bmi2_get_feat_config+0x118>
                    {
                        break;
 80018f2:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 80018f4:	e00e      	b.n	8001914 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 80018f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2210      	movs	r2, #16
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	2030      	movs	r0, #48	@ 0x30
 8001906:	f7ff f9d7 	bl	8000cb8 <bmi2_get_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	75fb      	strb	r3, [r7, #23]
 800190e:	e001      	b.n	8001914 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 8001910:	23f6      	movs	r3, #246	@ 0xf6
 8001912:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	460b      	mov	r3, r1
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8001932:	2300      	movs	r3, #0
 8001934:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 8001936:	e01c      	b.n	8001972 <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a19      	ldr	r1, [r3, #32]
 800193c:	7dfa      	ldrb	r2, [r7, #23]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	440b      	add	r3, r1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	7afa      	ldrb	r2, [r7, #11]
 800194a:	429a      	cmp	r2, r3
 800194c:	d10e      	bne.n	800196c <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a19      	ldr	r1, [r3, #32]
 8001952:	7dfa      	ldrb	r2, [r7, #23]
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	18ca      	adds	r2, r1, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8811      	ldrh	r1, [r2, #0]
 8001960:	7892      	ldrb	r2, [r2, #2]
 8001962:	8019      	strh	r1, [r3, #0]
 8001964:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8001966:	2301      	movs	r3, #1
 8001968:	75bb      	strb	r3, [r7, #22]
            break;
 800196a:	e007      	b.n	800197c <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	3301      	adds	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7e5b      	ldrb	r3, [r3, #25]
 8001976:	7dfa      	ldrb	r2, [r7, #23]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3dd      	bcc.n	8001938 <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 800197c:	7dbb      	ldrb	r3, [r7, #22]
}
 800197e:	4618      	mov	r0, r3
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800199c:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	89da      	ldrh	r2, [r3, #14]
 80019a2:	8a7b      	ldrh	r3, [r7, #18]
 80019a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019a8:	fb01 f202 	mul.w	r2, r1, r2
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fac2 	bl	8000f46 <bmi2_set_adv_power_save>
 80019c2:	4603      	mov	r3, r0
 80019c4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 80019c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8088 	bne.w	8001ae0 <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 f88a 	bl	8001aec <set_config_load>
 80019d8:	4603      	mov	r3, r0
 80019da:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 80019dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d17d      	bne.n	8001ae0 <write_config_file+0x156>
        {
            if (!remain)
 80019e4:	7c7b      	ldrb	r3, [r7, #17]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d11c      	bne.n	8001a24 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 80019ea:	2300      	movs	r3, #0
 80019ec:	82bb      	strh	r3, [r7, #20]
 80019ee:	e010      	b.n	8001a12 <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	8abb      	ldrh	r3, [r7, #20]
 80019f6:	18d0      	adds	r0, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	89da      	ldrh	r2, [r3, #14]
 80019fc:	8ab9      	ldrh	r1, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f000 f8a6 	bl	8001b50 <upload_file>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	89da      	ldrh	r2, [r3, #14]
 8001a0c:	8abb      	ldrh	r3, [r7, #20]
 8001a0e:	4413      	add	r3, r2
 8001a10:	82bb      	strh	r3, [r7, #20]
 8001a12:	8aba      	ldrh	r2, [r7, #20]
 8001a14:	8a7b      	ldrh	r3, [r7, #18]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d24e      	bcs.n	8001ab8 <write_config_file+0x12e>
 8001a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0e6      	beq.n	80019f0 <write_config_file+0x66>
 8001a22:	e049      	b.n	8001ab8 <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8001a24:	7c7b      	ldrb	r3, [r7, #17]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	8a7a      	ldrh	r2, [r7, #18]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	82bb      	strh	r3, [r7, #20]
 8001a32:	e010      	b.n	8001a56 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	8abb      	ldrh	r3, [r7, #20]
 8001a3a:	18d0      	adds	r0, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	89da      	ldrh	r2, [r3, #14]
 8001a40:	8ab9      	ldrh	r1, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f000 f884 	bl	8001b50 <upload_file>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	89da      	ldrh	r2, [r3, #14]
 8001a50:	8abb      	ldrh	r3, [r7, #20]
 8001a52:	4413      	add	r3, r2
 8001a54:	82bb      	strh	r3, [r7, #20]
 8001a56:	8aba      	ldrh	r2, [r7, #20]
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d203      	bcs.n	8001a66 <write_config_file+0xdc>
 8001a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0e6      	beq.n	8001a34 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 8001a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d124      	bne.n	8001ab8 <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	89db      	ldrh	r3, [r3, #14]
 8001a72:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	82bb      	strh	r3, [r7, #20]
 8001a7e:	e010      	b.n	8001aa2 <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	8abb      	ldrh	r3, [r7, #20]
 8001a86:	18d0      	adds	r0, r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	89da      	ldrh	r2, [r3, #14]
 8001a8c:	8ab9      	ldrh	r1, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f000 f85e 	bl	8001b50 <upload_file>
 8001a94:	4603      	mov	r3, r0
 8001a96:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	89da      	ldrh	r2, [r3, #14]
 8001a9c:	8abb      	ldrh	r3, [r7, #20]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 8001aa2:	8aba      	ldrh	r2, [r7, #20]
 8001aa4:	8a7b      	ldrh	r3, [r7, #18]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d203      	bcs.n	8001ab2 <write_config_file+0x128>
 8001aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0e6      	beq.n	8001a80 <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	89ba      	ldrh	r2, [r7, #12]
 8001ab6:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 8001ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 f812 	bl	8001aec <set_config_load>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 8001acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fa35 	bl	8000f46 <bmi2_set_adv_power_save>
 8001adc:	4603      	mov	r3, r0
 8001ade:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8001ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001afc:	f107 010e 	add.w	r1, r7, #14
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	2059      	movs	r0, #89	@ 0x59
 8001b06:	f7ff f8d7 	bl	8000cb8 <bmi2_get_regs>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001b32:	f107 010e 	add.w	r1, r7, #14
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2059      	movs	r0, #89	@ 0x59
 8001b3c:	f7ff f92f 	bl	8000d9e <bmi2_set_regs>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 8001b62:	2300      	movs	r3, #0
 8001b64:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d024      	beq.n	8001bb6 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 8001b7c:	897b      	ldrh	r3, [r7, #10]
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 8001b8a:	f107 0114 	add.w	r1, r7, #20
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	205b      	movs	r0, #91	@ 0x5b
 8001b94:	f7ff f903 	bl	8000d9e <bmi2_set_regs>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8001b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 8001ba4:	893a      	ldrh	r2, [r7, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	205e      	movs	r0, #94	@ 0x5e
 8001bac:	f7ff f8f7 	bl	8000d9e <bmi2_set_regs>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	75fb      	strb	r3, [r7, #23]
 8001bb4:	e001      	b.n	8001bba <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001bb6:	23ff      	movs	r3, #255	@ 0xff
 8001bb8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	68b8      	ldr	r0, [r7, #8]
 8001bda:	f000 fe5f 	bl	800289c <check_boundary_val>
 8001bde:	4603      	mov	r3, r0
 8001be0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d114      	bne.n	8001c14 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fe4f 	bl	800289c <check_boundary_val>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	75fb      	strb	r3, [r7, #23]
 8001c02:	e007      	b.n	8001c14 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2207      	movs	r2, #7
 8001c08:	2100      	movs	r1, #0
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fe46 	bl	800289c <check_boundary_val>
 8001c10:	4603      	mov	r3, r0
 8001c12:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	220c      	movs	r2, #12
 8001c30:	2101      	movs	r1, #1
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fe32 	bl	800289c <check_boundary_val>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	68b8      	ldr	r0, [r7, #8]
 8001c4c:	f000 fe26 	bl	800289c <check_boundary_val>
 8001c50:	4603      	mov	r3, r0
 8001c52:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1c98      	adds	r0, r3, #2
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	2100      	movs	r1, #0
 8001c74:	f000 fe12 	bl	800289c <check_boundary_val>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d13b      	bne.n	8001cfc <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1c58      	adds	r0, r3, #1
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f000 fe05 	bl	800289c <check_boundary_val>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d12e      	bne.n	8001cfc <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1d58      	adds	r0, r3, #5
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f000 fdf8 	bl	800289c <check_boundary_val>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8001cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d121      	bne.n	8001cfc <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	220d      	movs	r2, #13
 8001cbe:	2106      	movs	r1, #6
 8001cc0:	f000 fdec 	bl	800289c <check_boundary_val>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8001cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1cd8      	adds	r0, r3, #3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f000 fddf 	bl	800289c <check_boundary_val>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	1d18      	adds	r0, r3, #4
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f000 fdd2 	bl	800289c <check_boundary_val>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 8001d10:	f107 010e 	add.w	r1, r7, #14
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	201b      	movs	r0, #27
 8001d1a:	f7fe ffcd 	bl	8000cb8 <bmi2_get_regs>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d121      	bne.n	8001d6e <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	109b      	asrs	r3, r3, #2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d816      	bhi.n	8001d6c <cfg_error_status+0x64>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <cfg_error_status+0x3c>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d5b 	.word	0x08001d5b
 8001d4c:	08001d61 	.word	0x08001d61
 8001d50:	08001d67 	.word	0x08001d67
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
                break;
 8001d58:	e009      	b.n	8001d6e <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 8001d5a:	23fb      	movs	r3, #251	@ 0xfb
 8001d5c:	73fb      	strb	r3, [r7, #15]
                break;
 8001d5e:	e006      	b.n	8001d6e <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 8001d60:	23fa      	movs	r3, #250	@ 0xfa
 8001d62:	73fb      	strb	r3, [r7, #15]
                break;
 8001d64:	e003      	b.n	8001d6e <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 8001d66:	23f9      	movs	r3, #249	@ 0xf9
 8001d68:	73fb      	strb	r3, [r7, #15]
                break;
 8001d6a:	e000      	b.n	8001d6e <cfg_error_status+0x66>
            default:
                break;
 8001d6c:	bf00      	nop
        }
    }

    return rslt;
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop

08001d7c <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fa3f 	bl	800220c <validate_aux_config>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8f7 	bl	8001f90 <set_aux_interface>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f91f 	bl	8001ff4 <config_aux_interface>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f9db 	bl	8002180 <config_aux>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b08a      	sub	sp, #40	@ 0x28
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 8001dfe:	2300      	movs	r3, #0
 8001e00:	723b      	strb	r3, [r7, #8]
 8001e02:	2300      	movs	r3, #0
 8001e04:	727b      	strb	r3, [r7, #9]
 8001e06:	2300      	movs	r3, #0
 8001e08:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	2109      	movs	r1, #9
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fd81 	bl	8001920 <bmi2_extract_input_feat_config>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80aa 	beq.w	8001f7e <set_gyro_user_gain_config+0x1a4>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8001e2a:	7a7b      	ldrb	r3, [r7, #9]
 8001e2c:	f107 010c 	add.w	r1, r7, #12
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fce2 	bl	80017fc <bmi2_get_feat_config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8001e3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 809e 	bne.w	8001f84 <set_gyro_user_gain_config+0x1aa>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8001e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 8001e58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	6a3a      	ldr	r2, [r7, #32]
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e6a:	f023 0307 	bic.w	r3, r3, #7
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b219      	sxth	r1, r3
 8001e80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	6a3a      	ldr	r2, [r7, #32]
 8001e88:	4413      	add	r3, r2
 8001e8a:	b28a      	uxth	r2, r1
 8001e8c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 8001e8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e92:	3301      	adds	r3, #1
 8001e94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 8001e98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	6a3a      	ldr	r2, [r7, #32]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b219      	sxth	r1, r3
 8001ec0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b28a      	uxth	r2, r1
 8001ecc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 8001ece:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 8001ed8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	6a3a      	ldr	r2, [r7, #32]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001eea:	f023 0307 	bic.w	r3, r3, #7
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	889b      	ldrh	r3, [r3, #4]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b219      	sxth	r1, r3
 8001f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	6a3a      	ldr	r2, [r7, #32]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b28a      	uxth	r2, r1
 8001f0c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8001f0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f12:	3301      	adds	r3, #1
 8001f14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 8001f18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	7abb      	ldrb	r3, [r7, #10]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f2e:	e015      	b.n	8001f5c <set_gyro_user_gain_config+0x182>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8001f30:	7abb      	ldrb	r3, [r7, #10]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f38:	4413      	add	r3, r2
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 8001f3e:	7abb      	ldrb	r3, [r7, #10]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f46:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	3328      	adds	r3, #40	@ 0x28
 8001f4c:	443b      	add	r3, r7
 8001f4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8001f52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001f60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d3e3      	bcc.n	8001f30 <set_gyro_user_gain_config+0x156>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8001f68:	f107 010c 	add.w	r1, r7, #12
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	2030      	movs	r0, #48	@ 0x30
 8001f72:	f7fe ff14 	bl	8000d9e <bmi2_set_regs>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f7c:	e002      	b.n	8001f84 <set_gyro_user_gain_config+0x1aa>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8001f7e:	23f8      	movs	r3, #248	@ 0xf8
 8001f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001f84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3728      	adds	r7, #40	@ 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8001f9a:	f107 010e 	add.w	r1, r7, #14
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	206b      	movs	r0, #107	@ 0x6b
 8001fa4:	f7fe fe88 	bl	8000cb8 <bmi2_get_regs>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d119      	bne.n	8001fe8 <set_aux_interface+0x58>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	b25b      	sxtb	r3, r3
 8001fb8:	f023 0320 	bic.w	r3, r3, #32
 8001fbc:	b25a      	sxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	b25b      	sxtb	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8001fd6:	f107 010e 	add.w	r1, r7, #14
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	206b      	movs	r0, #107	@ 0x6b
 8001fe0:	f7fe fedd 	bl	8000d9e <bmi2_set_regs>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8001ffe:	2300      	movs	r3, #0
 8002000:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 800200a:	f107 010c 	add.w	r1, r7, #12
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2202      	movs	r2, #2
 8002012:	204b      	movs	r0, #75	@ 0x4b
 8002014:	f7fe fe50 	bl	8000cb8 <bmi2_get_regs>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800201c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 80a7 	bne.w	8002174 <config_aux_interface+0x180>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	b25b      	sxtb	r3, r3
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	b25a      	sxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	79db      	ldrb	r3, [r3, #7]
 8002034:	b25b      	sxtb	r3, r3
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	b25b      	sxtb	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b25b      	sxtb	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 8002042:	7b7b      	ldrb	r3, [r7, #13]
 8002044:	b25b      	sxtb	r3, r3
 8002046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800204a:	b25a      	sxtb	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	01db      	lsls	r3, r3, #7
 8002054:	b25b      	sxtb	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 800205e:	7b7b      	ldrb	r3, [r7, #13]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002066:	b25a      	sxtb	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	789b      	ldrb	r3, [r3, #2]
 800206c:	b25b      	sxtb	r3, r3
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	b25b      	sxtb	r3, r3
 8002078:	4313      	orrs	r3, r2
 800207a:	b25b      	sxtb	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 8002080:	7b7b      	ldrb	r3, [r7, #13]
 8002082:	b25b      	sxtb	r3, r3
 8002084:	f023 030c 	bic.w	r3, r3, #12
 8002088:	b25a      	sxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	b25b      	sxtb	r3, r3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	b25b      	sxtb	r3, r3
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	b25b      	sxtb	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 80020a2:	7b7b      	ldrb	r3, [r7, #13]
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 80020c0:	f107 030b 	add.w	r3, r7, #11
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fab1 	bl	800162e <bmi2_get_status>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 80020d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d13b      	bne.n	8002150 <config_aux_interface+0x15c>
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d136      	bne.n	8002150 <config_aux_interface+0x15c>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80020e2:	f107 010c 	add.w	r1, r7, #12
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2202      	movs	r2, #2
 80020ea:	204b      	movs	r0, #75	@ 0x4b
 80020ec:	f7fe fe57 	bl	8000d9e <bmi2_set_regs>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	6852      	ldr	r2, [r2, #4]
 80020fc:	4611      	mov	r1, r2
 80020fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002102:	4798      	blx	r3
                if (rslt == BMI2_OK)
 8002104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d132      	bne.n	8002172 <config_aux_interface+0x17e>
                {
                    /* If data mode */
                    if (!config->manual_en)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d115      	bne.n	8002140 <config_aux_interface+0x14c>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0108 	add.w	r1, r3, #8
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	204d      	movs	r0, #77	@ 0x4d
 8002126:	f7fe fe3a 	bl	8000d9e <bmi2_set_regs>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	6852      	ldr	r2, [r2, #4]
 8002136:	4611      	mov	r1, r2
 8002138:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800213c:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 800213e:	e018      	b.n	8002172 <config_aux_interface+0x17e>
                        dev->aux_man_en = 1;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	78da      	ldrb	r2, [r3, #3]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	771a      	strb	r2, [r3, #28]
                break;
 800214e:	e010      	b.n	8002172 <config_aux_interface+0x17e>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	6852      	ldr	r2, [r2, #4]
 8002158:	4611      	mov	r1, r2
 800215a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800215e:	4798      	blx	r3
            count++;
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	3301      	adds	r3, #1
 8002164:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 8002166:	7bbb      	ldrb	r3, [r7, #14]
 8002168:	2b14      	cmp	r3, #20
 800216a:	d9a9      	bls.n	80020c0 <config_aux_interface+0xcc>
            {
                rslt = BMI2_E_AUX_BUSY;
 800216c:	23f1      	movs	r3, #241	@ 0xf1
 800216e:	73fb      	strb	r3, [r7, #15]
                break;
 8002170:	e000      	b.n	8002174 <config_aux_interface+0x180>
                break;
 8002172:	bf00      	nop
            }
        }
    }

    return rslt;
 8002174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 800218a:	f107 010e 	add.w	r1, r7, #14
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	2044      	movs	r0, #68	@ 0x44
 8002194:	f7fe fd90 	bl	8000cb8 <bmi2_get_regs>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800219c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12d      	bne.n	8002200 <config_aux+0x80>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	b25a      	sxtb	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	799b      	ldrb	r3, [r3, #6]
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	f023 030f 	bic.w	r3, r3, #15
 80021c8:	b25a      	sxtb	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	795b      	ldrb	r3, [r3, #5]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80021de:	f107 010e 	add.w	r1, r7, #14
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	2044      	movs	r0, #68	@ 0x44
 80021e8:	f7fe fdd9 	bl	8000d9e <bmi2_set_regs>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	6852      	ldr	r2, [r2, #4]
 80021f8:	4611      	mov	r1, r2
 80021fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021fe:	4798      	blx	r3
    }

    return rslt;
 8002200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	1d58      	adds	r0, r3, #5
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	220b      	movs	r2, #11
 800221e:	2101      	movs	r1, #1
 8002220:	f000 fb3c 	bl	800289c <check_boundary_val>
 8002224:	4603      	mov	r3, r0
 8002226:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t get_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 800223e:	2300      	movs	r3, #0
 8002240:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	f000 fc5e 	bl	8002b04 <null_ptr_check>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 800224c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d129      	bne.n	80022a8 <get_accel_config+0x74>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d026      	beq.n	80022a8 <get_accel_config+0x74>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 800225a:	f107 010c 	add.w	r1, r7, #12
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2202      	movs	r2, #2
 8002262:	2040      	movs	r0, #64	@ 0x40
 8002264:	f7fe fd28 	bl	8000cb8 <bmi2_get_regs>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11b      	bne.n	80022ac <get_accel_config+0x78>
        {
            /* Get accelerometer performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE);
 8002274:	7b3b      	ldrb	r3, [r7, #12]
 8002276:	09db      	lsrs	r3, r3, #7
 8002278:	b2da      	uxtb	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	709a      	strb	r2, [r3, #2]

            /* Get accelerometer bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_ACC_BW_PARAM);
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	111b      	asrs	r3, r3, #4
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	705a      	strb	r2, [r3, #1]

            /* Get accelerometer ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_ACC_ODR);
 800228e:	7b3b      	ldrb	r3, [r7, #12]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	b2da      	uxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_ACC_RANGE);
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	70da      	strb	r2, [r3, #3]
        if (rslt == BMI2_OK)
 80022a6:	e001      	b.n	80022ac <get_accel_config+0x78>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80022a8:	23ff      	movs	r3, #255	@ 0xff
 80022aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range.
 */
static int8_t get_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80022c2:	2300      	movs	r3, #0
 80022c4:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80022c6:	6838      	ldr	r0, [r7, #0]
 80022c8:	f000 fc1c 	bl	8002b04 <null_ptr_check>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 80022d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d139      	bne.n	800234c <get_gyro_config+0x94>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d036      	beq.n	800234c <get_gyro_config+0x94>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 80022de:	f107 010c 	add.w	r1, r7, #12
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	2042      	movs	r0, #66	@ 0x42
 80022e8:	f7fe fce6 	bl	8000cb8 <bmi2_get_regs>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d12b      	bne.n	8002350 <get_gyro_config+0x98>
        {
            /* Get gyroscope performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE);
 80022f8:	7b3b      	ldrb	r3, [r7, #12]
 80022fa:	09db      	lsrs	r3, r3, #7
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	709a      	strb	r2, [r3, #2]

            /* Get gyroscope noise performance mode */
            config->noise_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_NOISE_PERF_MODE);
 8002302:	7b3b      	ldrb	r3, [r7, #12]
 8002304:	119b      	asrs	r3, r3, #6
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	715a      	strb	r2, [r3, #5]

            /* Get gyroscope bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_GYR_BW_PARAM);
 8002312:	7b3b      	ldrb	r3, [r7, #12]
 8002314:	111b      	asrs	r3, r3, #4
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	b2da      	uxtb	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	705a      	strb	r2, [r3, #1]

            /* Get gyroscope ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_GYR_ODR);
 8002322:	7b3b      	ldrb	r3, [r7, #12]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	b2da      	uxtb	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	701a      	strb	r2, [r3, #0]

            /* Get gyroscope OIS range */
            config->ois_range = BMI2_GET_BITS(data_array[1], BMI2_GYR_OIS_RANGE);
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	10db      	asrs	r3, r3, #3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	70da      	strb	r2, [r3, #3]

            /* Get gyroscope range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_GYR_RANGE);
 800233e:	7b7b      	ldrb	r3, [r7, #13]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	b2da      	uxtb	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	711a      	strb	r2, [r3, #4]
        if (rslt == BMI2_OK)
 800234a:	e001      	b.n	8002350 <get_gyro_config+0x98>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800234c:	23ff      	movs	r3, #255	@ 0xff
 800234e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002350:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <get_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3) Gets ODR and offset.
 */
static int8_t get_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	f000 fbcc 	bl	8002b04 <null_ptr_check>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8002370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11d      	bne.n	80023b4 <get_aux_config+0x58>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01a      	beq.n	80023b4 <get_aux_config+0x58>
    {
        /* Get enable status of auxiliary interface */
        rslt = get_aux_interface(config, dev);
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8c0 	bl	8002506 <get_aux_interface>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <get_aux_config+0x5e>
        {
            /* Get the auxiliary interface configurations */
            rslt = get_aux_interface_config(config, dev);
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8d6 	bl	8002546 <get_aux_interface_config>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <get_aux_config+0x5e>
            {
                /* Get read out offset and ODR */
                rslt = get_aux_cfg(config, dev);
 80023a6:	6839      	ldr	r1, [r7, #0]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f914 	bl	80025d6 <get_aux_cfg>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80023b2:	e002      	b.n	80023ba <get_aux_config+0x5e>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80023b4:	23ff      	movs	r3, #255	@ 0xff
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e000      	b.n	80023bc <get_aux_config+0x60>
        if (rslt == BMI2_OK)
 80023ba:	bf00      	nop
    }

    return rslt;
 80023bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <get_gyro_gain_update_config>:
/*!
 * @brief This internal API gets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t get_gyro_gain_update_config(struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 80023f2:	2300      	movs	r3, #0
 80023f4:	723b      	strb	r3, [r7, #8]
 80023f6:	2300      	movs	r3, #0
 80023f8:	727b      	strb	r3, [r7, #9]
 80023fa:	2300      	movs	r3, #0
 80023fc:	72bb      	strb	r3, [r7, #10]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	2109      	movs	r1, #9
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fa8a 	bl	8001920 <bmi2_extract_input_feat_config>
 800240c:	4603      	mov	r3, r0
 800240e:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8002410:	7ffb      	ldrb	r3, [r7, #31]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06e      	beq.n	80024f4 <get_gyro_gain_update_config+0x12c>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 8002416:	7a7b      	ldrb	r3, [r7, #9]
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f9ec 	bl	80017fc <bmi2_get_feat_config>
 8002424:	4603      	mov	r3, r0
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800242a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800242e:	2b00      	cmp	r3, #0
 8002430:	d163      	bne.n	80024fa <get_gyro_gain_update_config+0x132>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 8002432:	7abb      	ldrb	r3, [r7, #10]
 8002434:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate ratio_x */
            lsb = (uint16_t) feat_config[idx++];
 8002438:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002442:	3328      	adds	r3, #40	@ 0x28
 8002444:	443b      	add	r3, r7
 8002446:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800244a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800244c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002456:	3328      	adds	r3, #40	@ 0x28
 8002458:	443b      	add	r3, r7
 800245a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8002462:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002464:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002466:	4313      	orrs	r3, r2
 8002468:	843b      	strh	r3, [r7, #32]

            /* Get ratio_x */
            config->ratio_x = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_X_MASK;
 800246a:	8c3b      	ldrh	r3, [r7, #32]
 800246c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	801a      	strh	r2, [r3, #0]

            /* Get word to calculate ratio_y */
            lsb = (uint16_t) feat_config[idx++];
 8002476:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002480:	3328      	adds	r3, #40	@ 0x28
 8002482:	443b      	add	r3, r7
 8002484:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002488:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 800248a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002494:	3328      	adds	r3, #40	@ 0x28
 8002496:	443b      	add	r3, r7
 8002498:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80024a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80024a4:	4313      	orrs	r3, r2
 80024a6:	843b      	strh	r3, [r7, #32]

            /* Get ratio_y */
            config->ratio_y = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Y_MASK;
 80024a8:	8c3b      	ldrh	r3, [r7, #32]
 80024aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	805a      	strh	r2, [r3, #2]

            /* Get word to calculate ratio_z */
            lsb = (uint16_t) feat_config[idx++];
 80024b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80024be:	3328      	adds	r3, #40	@ 0x28
 80024c0:	443b      	add	r3, r7
 80024c2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80024c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80024c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80024d2:	3328      	adds	r3, #40	@ 0x28
 80024d4:	443b      	add	r3, r7
 80024d6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80024de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80024e2:	4313      	orrs	r3, r2
 80024e4:	843b      	strh	r3, [r7, #32]

            /* Get ratio_z */
            config->ratio_z = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Z_MASK;
 80024e6:	8c3b      	ldrh	r3, [r7, #32]
 80024e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	809a      	strh	r2, [r3, #4]
 80024f2:	e002      	b.n	80024fa <get_gyro_gain_update_config+0x132>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80024f4:	23f8      	movs	r3, #248	@ 0xf8
 80024f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80024fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3728      	adds	r7, #40	@ 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <get_aux_interface>:

/*!
 * @brief This internal API gets the enable status of auxiliary interface.
 */
static int8_t get_aux_interface(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get the enable status of auxiliary interface */
    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 8002510:	f107 010e 	add.w	r1, r7, #14
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	206b      	movs	r0, #107	@ 0x6b
 800251a:	f7fe fbcd 	bl	8000cb8 <bmi2_get_regs>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <get_aux_interface+0x34>
    {
        config->aux_en = BMI2_GET_BITS(reg_data, BMI2_AUX_IF_EN);
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	115b      	asrs	r3, r3, #5
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	b2da      	uxtb	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <get_aux_interface_config>:
/*!
 * @brief This internal API gets auxiliary configurations like manual/auto mode
 * FCU write command enable and read burst length for both data and manual mode.
 */
static int8_t get_aux_interface_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8002550:	2300      	movs	r3, #0
 8002552:	81bb      	strh	r3, [r7, #12]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 8002554:	f107 010c 	add.w	r1, r7, #12
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2202      	movs	r2, #2
 800255c:	204b      	movs	r0, #75	@ 0x4b
 800255e:	f7fe fbab 	bl	8000cb8 <bmi2_get_regs>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12d      	bne.n	80025ca <get_aux_interface_config+0x84>
    {
        /* Get I2C address for auxiliary sensor */
        config->i2c_device_addr = BMI2_GET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR);
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	71da      	strb	r2, [r3, #7]

        /* Get the AUX IF to either manual or auto mode */
        config->manual_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN);
 8002578:	7b7b      	ldrb	r3, [r7, #13]
 800257a:	09db      	lsrs	r3, r3, #7
 800257c:	b2da      	uxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	705a      	strb	r2, [r3, #1]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        config->fcu_write_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN);
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	119b      	asrs	r3, r3, #6
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	b2da      	uxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	709a      	strb	r2, [r3, #2]

        /* Get the burst read length for manual mode */
        config->man_rd_burst = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST);
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	109b      	asrs	r3, r3, #2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	b2da      	uxtb	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	70da      	strb	r2, [r3, #3]

        /* Get the burst read length for data mode */
        config->aux_rd_burst = BMI2_GET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST);
 80025a2:	7b7b      	ldrb	r3, [r7, #13]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	711a      	strb	r2, [r3, #4]

        /* If data mode, get the read address of the auxiliary sensor from where data is to be read */
        if (!config->manual_en)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <get_aux_interface_config+0x84>
        {
            rslt = bmi2_get_regs(BMI2_AUX_RD_ADDR, &config->read_addr, 1, dev);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f103 0108 	add.w	r1, r3, #8
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	204d      	movs	r0, #77	@ 0x4d
 80025c2:	f7fe fb79 	bl	8000cb8 <bmi2_get_regs>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <get_aux_cfg>:
/*!
 * @brief This internal API gets read out offset and ODR of the auxiliary
 * sensor.
 */
static int8_t get_aux_cfg(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80025e0:	f107 010e 	add.w	r1, r7, #14
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2201      	movs	r2, #1
 80025e8:	2044      	movs	r0, #68	@ 0x44
 80025ea:	f7fe fb65 	bl	8000cb8 <bmi2_get_regs>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <get_aux_cfg+0x3a>
    {
        /* Get read out offset */
        config->offset = BMI2_GET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT);
 80025fa:	7bbb      	ldrb	r3, [r7, #14]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	719a      	strb	r2, [r3, #6]

        /* Get ODR */
        config->odr = BMI2_GET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN);
 8002604:	7bbb      	ldrb	r3, [r7, #14]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	b2da      	uxtb	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	715a      	strb	r2, [r3, #5]
    }

    return rslt;
 8002610:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <get_acc_gyr_data>:

/*!
 * @brief This internal API gets the accelerometer/gyroscope data.
 */
static void get_acc_gyr_data(struct bmi2_sens_axes_data *data, const uint8_t *reg_data)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]

    /* Variables to store both msb and lsb value */
    uint16_t msb_lsb;

    /* Variables to define index */
    uint8_t index = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]

    /* Read x-axis data */
    lsb = reg_data[index++];
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	73fa      	strb	r2, [r7, #15]
 8002630:	461a      	mov	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	73fa      	strb	r2, [r7, #15]
 8002640:	461a      	mov	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 800264a:	7b7b      	ldrb	r3, [r7, #13]
 800264c:	b21b      	sxth	r3, r3
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	b21a      	sxth	r2, r3
 8002652:	7bbb      	ldrb	r3, [r7, #14]
 8002654:	b21b      	sxth	r3, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	b21b      	sxth	r3, r3
 800265a:	817b      	strh	r3, [r7, #10]
    data->x = (int16_t) msb_lsb;
 800265c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	801a      	strh	r2, [r3, #0]

    /* Read y-axis data */
    lsb = reg_data[index++];
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	73fa      	strb	r2, [r7, #15]
 800266a:	461a      	mov	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	73fa      	strb	r2, [r7, #15]
 800267a:	461a      	mov	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4413      	add	r3, r2
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8002684:	7b7b      	ldrb	r3, [r7, #13]
 8002686:	b21b      	sxth	r3, r3
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b21a      	sxth	r2, r3
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	b21b      	sxth	r3, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	b21b      	sxth	r3, r3
 8002694:	817b      	strh	r3, [r7, #10]
    data->y = (int16_t) msb_lsb;
 8002696:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	805a      	strh	r2, [r3, #2]

    /* Read z-axis data */
    lsb = reg_data[index++];
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	73fa      	strb	r2, [r7, #15]
 80026a4:	461a      	mov	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	73fa      	strb	r2, [r7, #15]
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80026be:	7b7b      	ldrb	r3, [r7, #13]
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	817b      	strh	r3, [r7, #10]
    data->z = (int16_t) msb_lsb;
 80026d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	809a      	strh	r2, [r3, #4]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <get_remapped_data>:

/*!
 * @brief This internal API gets the re-mapped accelerometer/gyroscope data.
 */
static void get_remapped_data(struct bmi2_sens_axes_data *data, const struct bmi2_dev *dev)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    /* Array to defined the re-mapped sensor data */
    int16_t remap_data[3] = { 0 };
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	809a      	strh	r2, [r3, #4]
    int16_t pos_multiplier = INT16_C(1);
 80026f8:	2301      	movs	r3, #1
 80026fa:	82fb      	strh	r3, [r7, #22]
    int16_t neg_multiplier = INT16_C(-1);
 80026fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002700:	82bb      	strh	r3, [r7, #20]

    /* Fill the array with the un-mapped sensor data */
    remap_data[0] = data->x;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	81bb      	strh	r3, [r7, #12]
    remap_data[1] = data->y;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002710:	81fb      	strh	r3, [r7, #14]
    remap_data[2] = data->z;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002718:	823b      	strh	r3, [r7, #16]

    /* Get the re-mapped x axis data */
    if (dev->remap.x_axis_sign == BMI2_POS_SIGN)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002720:	2b00      	cmp	r3, #0
 8002722:	d110      	bne.n	8002746 <get_remapped_data+0x62>
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * pos_multiplier);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	3318      	adds	r3, #24
 800272e:	443b      	add	r3, r7
 8002730:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002734:	b29a      	uxth	r2, r3
 8002736:	8afb      	ldrh	r3, [r7, #22]
 8002738:	fb12 f303 	smulbb	r3, r2, r3
 800273c:	b29b      	uxth	r3, r3
 800273e:	b21a      	sxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	e00f      	b.n	8002766 <get_remapped_data+0x82>
    }
    else
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * neg_multiplier);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	3318      	adds	r3, #24
 8002750:	443b      	add	r3, r7
 8002752:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002756:	b29a      	uxth	r2, r3
 8002758:	8abb      	ldrh	r3, [r7, #20]
 800275a:	fb12 f303 	smulbb	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	b21a      	sxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	801a      	strh	r2, [r3, #0]
    }

    /* Get the re-mapped y axis data */
    if (dev->remap.y_axis_sign == BMI2_POS_SIGN)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d110      	bne.n	8002792 <get_remapped_data+0xae>
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * pos_multiplier);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	3318      	adds	r3, #24
 800277a:	443b      	add	r3, r7
 800277c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002780:	b29a      	uxth	r2, r3
 8002782:	8afb      	ldrh	r3, [r7, #22]
 8002784:	fb12 f303 	smulbb	r3, r2, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	b21a      	sxth	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	805a      	strh	r2, [r3, #2]
 8002790:	e00f      	b.n	80027b2 <get_remapped_data+0xce>
    }
    else
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * neg_multiplier);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	3318      	adds	r3, #24
 800279c:	443b      	add	r3, r7
 800279e:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	8abb      	ldrh	r3, [r7, #20]
 80027a6:	fb12 f303 	smulbb	r3, r2, r3
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	805a      	strh	r2, [r3, #2]
    }

    /* Get the re-mapped z axis data */
    if (dev->remap.z_axis_sign == BMI2_POS_SIGN)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d110      	bne.n	80027de <get_remapped_data+0xfa>
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * pos_multiplier);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	3318      	adds	r3, #24
 80027c6:	443b      	add	r3, r7
 80027c8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	8afb      	ldrh	r3, [r7, #22]
 80027d0:	fb12 f303 	smulbb	r3, r2, r3
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
    }
}
 80027dc:	e00f      	b.n	80027fe <get_remapped_data+0x11a>
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	3318      	adds	r3, #24
 80027e8:	443b      	add	r3, r7
 80027ea:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	8abb      	ldrh	r3, [r7, #20]
 80027f2:	fb12 f303 	smulbb	r3, r2, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b21a      	sxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	809a      	strh	r2, [r3, #4]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <saturate>:

/*!
 * @brief This internal API clips the gyroscope cross-axis sensitivity within signed 16-bit limit
 */
static int16_t saturate(int32_t value, uint16_t saturation_val)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]
    int16_t retval = (int16_t)value;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	81fb      	strh	r3, [r7, #14]

    if (value > (int32_t)saturation_val)
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	dd02      	ble.n	8002828 <saturate+0x1e>
    {
        retval = (int16_t)saturation_val;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	81fb      	strh	r3, [r7, #14]
 8002826:	e008      	b.n	800283a <saturate+0x30>
    }
    else if (value < (-(int32_t)saturation_val - 1))
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	43db      	mvns	r3, r3
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	da03      	bge.n	800283a <saturate+0x30>
    {
        retval = -(int16_t)saturation_val - 1;
 8002832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002836:	43db      	mvns	r3, r3
 8002838:	81fb      	strh	r3, [r7, #14]
    }

    return retval;
 800283a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <comp_gyro_cross_axis_sensitivity>:
/*!
 * @brief This internal API corrects the gyroscope cross-axis sensitivity
 * between the z and the x axis.
 */
static void comp_gyro_cross_axis_sensitivity(struct bmi2_sens_axes_data *gyr_data, const struct bmi2_dev *dev)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
    uint16_t int16_max = UINT16_C(32767);
 8002854:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002858:	81fb      	strh	r3, [r7, #14]

    /* Get the compensated gyroscope x-axis */
    gyr_data->x =
        saturate((int32_t)(gyr_data->x - (int16_t)(((int32_t) dev->gyr_cross_sens_zx * (int32_t) gyr_data->z) / 512)),
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002860:	461a      	mov	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8002868:	4619      	mov	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	da01      	bge.n	800287c <comp_gyro_cross_axis_sensitivity+0x32>
 8002878:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800287c:	125b      	asrs	r3, r3, #9
 800287e:	b21b      	sxth	r3, r3
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	89fa      	ldrh	r2, [r7, #14]
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffbf 	bl	800280a <saturate>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
    gyr_data->x =
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	801a      	strh	r2, [r3, #0]
                 int16_max);
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	72fb      	strb	r3, [r7, #11]
 80028aa:	4613      	mov	r3, r2
 80028ac:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01e      	beq.n	80028f6 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	7afa      	ldrb	r2, [r7, #11]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d909      	bls.n	80028d6 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	7afa      	ldrb	r2, [r7, #11]
 80028c6:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7a1b      	ldrb	r3, [r3, #8]
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	7aba      	ldrb	r2, [r7, #10]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d20c      	bcs.n	80028fa <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	7aba      	ldrb	r2, [r7, #10]
 80028e4:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7a1b      	ldrb	r3, [r3, #8]
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	721a      	strb	r2, [r3, #8]
 80028f4:	e001      	b.n	80028fa <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80028f6:	23ff      	movs	r3, #255	@ 0xff
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80028fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8002914:	2300      	movs	r3, #0
 8002916:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1c58      	adds	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3302      	adds	r3, #2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	f7ff f94f 	bl	8001bc6 <validate_bw_perf_mode>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800292c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d15b      	bne.n	80029ec <set_accel_config+0xe2>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3303      	adds	r3, #3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	f7ff f96f 	bl	8001c20 <validate_odr_range>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14e      	bne.n	80029ec <set_accel_config+0xe2>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 800294e:	7b3b      	ldrb	r3, [r7, #12]
 8002950:	b25b      	sxtb	r3, r3
 8002952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002956:	b25a      	sxtb	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	789b      	ldrb	r3, [r3, #2]
 800295c:	b25b      	sxtb	r3, r3
 800295e:	01db      	lsls	r3, r3, #7
 8002960:	b25b      	sxtb	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b25b      	sxtb	r3, r3
 8002966:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8002968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800296c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002970:	b25a      	sxtb	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	b25b      	sxtb	r3, r3
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	b25b      	sxtb	r3, r3
 800297c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002980:	b25b      	sxtb	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b25b      	sxtb	r3, r3
 8002986:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 8002988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800298c:	f023 030f 	bic.w	r3, r3, #15
 8002990:	b25a      	sxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b25b      	sxtb	r3, r3
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	b25b      	sxtb	r3, r3
 800299e:	4313      	orrs	r3, r2
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 80029a8:	7b7b      	ldrb	r3, [r7, #13]
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	b25a      	sxtb	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	78db      	ldrb	r3, [r3, #3]
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
 80029c6:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 80029c8:	f107 010c 	add.w	r1, r7, #12
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2202      	movs	r2, #2
 80029d0:	2040      	movs	r0, #64	@ 0x40
 80029d2:	f7fe f9e4 	bl	8000d9e <bmi2_set_regs>
 80029d6:	4603      	mov	r3, r0
 80029d8:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <set_accel_config+0xe2>
            {
                rslt = cfg_error_status(dev);
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f7ff f990 	bl	8001d08 <cfg_error_status>
 80029e8:	4603      	mov	r3, r0
 80029ea:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80029ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 8002a02:	2300      	movs	r3, #0
 8002a04:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff f929 	bl	8001c60 <validate_gyro_config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d16e      	bne.n	8002af8 <set_gyro_config+0x100>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8002a1a:	7b3b      	ldrb	r3, [r7, #12]
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a22:	b25a      	sxtb	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	789b      	ldrb	r3, [r3, #2]
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8002a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a3c:	b25a      	sxtb	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	795b      	ldrb	r3, [r3, #5]
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 8002a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a58:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a5c:	b25a      	sxtb	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 8002a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a78:	f023 030f 	bic.w	r3, r3, #15
 8002a7c:	b25a      	sxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b25b      	sxtb	r3, r3
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	b25b      	sxtb	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 8002a90:	7bbb      	ldrb	r3, [r7, #14]
 8002a92:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 8002a94:	7b7b      	ldrb	r3, [r7, #13]
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	f023 0308 	bic.w	r3, r3, #8
 8002a9c:	b25a      	sxtb	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 8002ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab8:	f023 0307 	bic.w	r3, r3, #7
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	791b      	ldrb	r3, [r3, #4]
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8002ad4:	f107 010c 	add.w	r1, r7, #12
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	2042      	movs	r0, #66	@ 0x42
 8002ade:	f7fe f95e 	bl	8000d9e <bmi2_set_regs>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <set_gyro_config+0x100>
        {
            rslt = cfg_error_status(dev);
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f7ff f90a 	bl	8001d08 <cfg_error_status>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <null_ptr_check+0x2a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <null_ptr_check+0x2a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <null_ptr_check+0x2a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8002b2e:	23ff      	movs	r3, #255	@ 0xff
 8002b30:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b088      	sub	sp, #32
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]

    /* Variables to define index */
    uint8_t idx = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 8002b5e:	2300      	movs	r3, #0
 8002b60:	723b      	strb	r3, [r7, #8]
 8002b62:	2300      	movs	r3, #0
 8002b64:	727b      	strb	r3, [r7, #9]
 8002b66:	2300      	movs	r3, #0
 8002b68:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	2109      	movs	r1, #9
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f84b 	bl	8002c0e <extract_output_feat_config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8002b7c:	7f7b      	ldrb	r3, [r7, #29]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03d      	beq.n	8002bfe <get_gyro_gain_update_status+0xbc>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 8002b82:	7a7b      	ldrb	r3, [r7, #9]
 8002b84:	f107 010c 	add.w	r1, r7, #12
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fe36 	bl	80017fc <bmi2_get_feat_config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8002b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d132      	bne.n	8002c02 <get_gyro_gain_update_status+0xc0>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 8002b9c:	7abb      	ldrb	r3, [r7, #10]
 8002b9e:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 8002ba0:	7fbb      	ldrb	r3, [r7, #30]
 8002ba2:	3320      	adds	r3, #32
 8002ba4:	443b      	add	r3, r7
 8002ba6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8002bb4:	7fbb      	ldrb	r3, [r7, #30]
 8002bb6:	3320      	adds	r3, #32
 8002bb8:	443b      	add	r3, r7
 8002bba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002bbe:	105b      	asrs	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 8002bcc:	7fbb      	ldrb	r3, [r7, #30]
 8002bce:	3320      	adds	r3, #32
 8002bd0:	443b      	add	r3, r7
 8002bd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002bd6:	109b      	asrs	r3, r3, #2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8002be4:	7fbb      	ldrb	r3, [r7, #30]
 8002be6:	3320      	adds	r3, #32
 8002be8:	443b      	add	r3, r7
 8002bea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002bee:	10db      	asrs	r3, r3, #3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	70da      	strb	r2, [r3, #3]
 8002bfc:	e001      	b.n	8002c02 <get_gyro_gain_update_status+0xc0>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002bfe:	23f8      	movs	r3, #248	@ 0xf8
 8002c00:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b087      	sub	sp, #28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	460b      	mov	r3, r1
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8002c24:	e01c      	b.n	8002c60 <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c2a:	7dfa      	ldrb	r2, [r7, #23]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	440b      	add	r3, r1
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	7afa      	ldrb	r2, [r7, #11]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d10e      	bne.n	8002c5a <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c40:	7dfa      	ldrb	r2, [r7, #23]
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	18ca      	adds	r2, r1, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8811      	ldrh	r1, [r2, #0]
 8002c4e:	7892      	ldrb	r2, [r2, #2]
 8002c50:	8019      	strh	r1, [r3, #0]
 8002c52:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75bb      	strb	r3, [r7, #22]
            break;
 8002c58:	e007      	b.n	8002c6a <extract_output_feat_config+0x5c>
        }

        loop++;
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7e9b      	ldrb	r3, [r3, #26]
 8002c64:	7dfa      	ldrb	r2, [r7, #23]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3dd      	bcc.n	8002c26 <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8002c6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t idx = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 8002c94:	2300      	movs	r3, #0
 8002c96:	723b      	strb	r3, [r7, #8]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	727b      	strb	r3, [r7, #9]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01d      	beq.n	8002cea <get_gyro_cross_sense+0x72>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 8002cae:	f107 010b 	add.w	r1, r7, #11
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	201e      	movs	r0, #30
 8002cb8:	f7fd fffe 	bl	8000cb8 <bmi2_get_regs>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8002cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d157      	bne.n	8002d78 <get_gyro_cross_sense+0x100>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <get_gyro_cross_sense+0x68>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	3b80      	subs	r3, #128	@ 0x80
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	e04b      	b.n	8002d78 <get_gyro_cross_sense+0x100>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
 8002ce2:	b21a      	sxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e046      	b.n	8002d78 <get_gyro_cross_sense+0x100>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	2129      	movs	r1, #41	@ 0x29
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff8b 	bl	8002c0e <extract_output_feat_config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8002cfc:	7f7b      	ldrb	r3, [r7, #29]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d038      	beq.n	8002d74 <get_gyro_cross_sense+0xfc>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 8002d02:	7a7b      	ldrb	r3, [r7, #9]
 8002d04:	f107 010c 	add.w	r1, r7, #12
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fd76 	bl	80017fc <bmi2_get_feat_config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8002d14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d12d      	bne.n	8002d78 <get_gyro_cross_sense+0x100>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8002d1c:	7abb      	ldrb	r3, [r7, #10]
 8002d1e:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 8002d20:	7fbb      	ldrb	r3, [r7, #30]
 8002d22:	3320      	adds	r3, #32
 8002d24:	443b      	add	r3, r7
 8002d26:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	3320      	adds	r3, #32
 8002d34:	443b      	add	r3, r7
 8002d36:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8002d3a:	7fbb      	ldrb	r3, [r7, #30]
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	443b      	add	r3, r7
 8002d40:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <get_gyro_cross_sense+0xea>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 8002d4c:	7fbb      	ldrb	r3, [r7, #30]
 8002d4e:	3320      	adds	r3, #32
 8002d50:	443b      	add	r3, r7
 8002d52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d56:	3b80      	subs	r3, #128	@ 0x80
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	801a      	strh	r2, [r3, #0]
 8002d60:	e00a      	b.n	8002d78 <get_gyro_cross_sense+0x100>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 8002d62:	7fbb      	ldrb	r3, [r7, #30]
 8002d64:	3320      	adds	r3, #32
 8002d66:	443b      	add	r3, r7
 8002d68:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	e001      	b.n	8002d78 <get_gyro_cross_sense+0x100>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 8002d74:	23f8      	movs	r3, #248	@ 0xf8
 8002d76:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8002d78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 8002d84:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d88:	b089      	sub	sp, #36	@ 0x24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6178      	str	r0, [r7, #20]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	60fa      	str	r2, [r7, #12]
 8002d92:	74fb      	strb	r3, [r7, #19]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77bb      	strb	r3, [r7, #30]
 8002d9c:	e041      	b.n	8002e22 <select_sensor+0x9e>
    {
        switch (sens_list[count])
 8002d9e:	7fbb      	ldrb	r3, [r7, #30]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d028      	beq.n	8002dfc <select_sensor+0x78>
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	dc33      	bgt.n	8002e16 <select_sensor+0x92>
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d01a      	beq.n	8002de8 <select_sensor+0x64>
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	dc2f      	bgt.n	8002e16 <select_sensor+0x92>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <select_sensor+0x3c>
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d00a      	beq.n	8002dd4 <select_sensor+0x50>
 8002dbe:	e02a      	b.n	8002e16 <select_sensor+0x92>
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f042 0401 	orr.w	r4, r2, #1
 8002dca:	461d      	mov	r5, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 8002dd2:	e023      	b.n	8002e1c <select_sensor+0x98>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f042 0802 	orr.w	r8, r2, #2
 8002dde:	4699      	mov	r9, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 8002de6:	e019      	b.n	8002e1c <select_sensor+0x98>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f042 0a04 	orr.w	sl, r2, #4
 8002df2:	469b      	mov	fp, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 8002dfa:	e00f      	b.n	8002e1c <select_sensor+0x98>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	603a      	str	r2, [r7, #0]
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e10:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 8002e14:	e002      	b.n	8002e1c <select_sensor+0x98>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 8002e16:	23f8      	movs	r3, #248	@ 0xf8
 8002e18:	77fb      	strb	r3, [r7, #31]
                break;
 8002e1a:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 8002e1c:	7fbb      	ldrb	r3, [r7, #30]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	77bb      	strb	r3, [r7, #30]
 8002e22:	7fba      	ldrb	r2, [r7, #30]
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3b9      	bcc.n	8002d9e <select_sensor+0x1a>
        }
    }

    return rslt;
 8002e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e38:	4770      	bx	lr

08002e3a <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8002e3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3e:	b08a      	sub	sp, #40	@ 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002e46:	617a      	str	r2, [r7, #20]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8002e4e:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2201      	movs	r2, #1
 8002e56:	207d      	movs	r0, #125	@ 0x7d
 8002e58:	f7fd ff2e 	bl	8000cb8 <bmi2_get_regs>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI2_OK)
 8002e62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d158      	bne.n	8002f1c <sensor_enable+0xe2>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 8002e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e6e:	f002 0301 	and.w	r3, r2, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	d006      	beq.n	8002e90 <sensor_enable+0x56>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 8002e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 8002e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e94:	f002 0302 	and.w	r3, r2, #2
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	d006      	beq.n	8002eb6 <sensor_enable+0x7c>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 8002ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8002eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eba:	f002 0a04 	and.w	sl, r2, #4
 8002ebe:	f04f 0b00 	mov.w	fp, #0
 8002ec2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ec6:	d006      	beq.n	8002ed6 <sensor_enable+0x9c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 8002ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 8002ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eda:	f04f 0800 	mov.w	r8, #0
 8002ede:	f003 0901 	and.w	r9, r3, #1
 8002ee2:	ea58 0309 	orrs.w	r3, r8, r9
 8002ee6:	d006      	beq.n	8002ef6 <sensor_enable+0xbc>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 8002ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 8002ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002efa:	f002 0407 	and.w	r4, r2, #7
 8002efe:	f003 0501 	and.w	r5, r3, #1
 8002f02:	ea54 0305 	orrs.w	r3, r4, r5
 8002f06:	d009      	beq.n	8002f1c <sensor_enable+0xe2>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8002f08:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	207d      	movs	r0, #125	@ 0x7d
 8002f12:	f7fd ff44 	bl	8000d9e <bmi2_set_regs>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8002f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3728      	adds	r7, #40	@ 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002f2c <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8e5 	bl	8003104 <null_ptr_check>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d141      	bne.n	8002fca <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2224      	movs	r2, #36	@ 0x24
 8002f4a:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f52:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7a5b      	ldrb	r3, [r3, #9]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	72da      	strb	r2, [r3, #11]
 8002f6c:	e002      	b.n	8002f74 <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	@ (8002fd8 <bmi270_init+0xac>)
 8002f80:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd fe38 	bl	8000bf8 <bmi2_sec_init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11a      	bne.n	8002fca <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a11      	ldr	r2, [pc, #68]	@ (8002fdc <bmi270_init+0xb0>)
 8002f98:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <bmi270_init+0xb4>)
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2211      	movs	r2, #17
 8002faa:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2207      	movs	r2, #7
 8002fb0:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe4 <bmi270_init+0xb8>)
 8002fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2208      	movs	r2, #8
 8002fbc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fe fbbb 	bl	800173c <bmi2_get_gyro_cross_sense>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	0801d4dc 	.word	0x0801d4dc
 8002fdc:	0801f4dc 	.word	0x0801f4dc
 8002fe0:	0801f510 	.word	0x0801f510
 8002fe4:	20000008 	.word	0x20000008

08002fe8 <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f882 	bl	8003104 <null_ptr_check>
 8003000:	4603      	mov	r3, r0
 8003002:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8003004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d171      	bne.n	80030f0 <bmi270_set_sensor_config+0x108>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06e      	beq.n	80030f0 <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003018:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 800301a:	2300      	movs	r3, #0
 800301c:	75bb      	strb	r3, [r7, #22]
 800301e:	e053      	b.n	80030c8 <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8003020:	7dba      	ldrb	r2, [r7, #22]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d020      	beq.n	8003078 <bmi270_set_sensor_config+0x90>
 8003036:	7dba      	ldrb	r2, [r7, #22]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	461a      	mov	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d015      	beq.n	8003078 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 800304c:	7dba      	ldrb	r2, [r7, #22]
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 800305e:	2b02      	cmp	r3, #2
 8003060:	d00a      	beq.n	8003078 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8003062:	7dba      	ldrb	r2, [r7, #22]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	461a      	mov	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b09      	cmp	r3, #9
 8003076:	d10f      	bne.n	8003098 <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 8003078:	7dba      	ldrb	r2, [r7, #22]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe f831 	bl	80010f4 <bmi2_set_sensor_config>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
 8003096:	e014      	b.n	80030c2 <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 8003098:	7d7b      	ldrb	r3, [r7, #21]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fd ff50 	bl	8000f46 <bmi2_set_adv_power_save>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 80030aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 80030b2:	7dbb      	ldrb	r3, [r7, #22]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4619      	mov	r1, r3
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fdf7 	bl	8003cac <set_feat_config>
 80030be:	4603      	mov	r3, r0
 80030c0:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80030c2:	7dbb      	ldrb	r3, [r7, #22]
 80030c4:	3301      	adds	r3, #1
 80030c6:	75bb      	strb	r3, [r7, #22]
 80030c8:	7dba      	ldrb	r2, [r7, #22]
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3a7      	bcc.n	8003020 <bmi270_set_sensor_config+0x38>
 80030d0:	e000      	b.n	80030d4 <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 80030d2:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80030d4:	7d7b      	ldrb	r3, [r7, #21]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d10d      	bne.n	80030f6 <bmi270_set_sensor_config+0x10e>
 80030da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7fd ff2e 	bl	8000f46 <bmi2_set_adv_power_save>
 80030ea:	4603      	mov	r3, r0
 80030ec:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80030ee:	e002      	b.n	80030f6 <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80030f0:	23ff      	movs	r3, #255	@ 0xff
 80030f2:	75fb      	strb	r3, [r7, #23]
 80030f4:	e000      	b.n	80030f8 <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80030f6:	bf00      	nop
    }

    return rslt;
 80030f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <null_ptr_check+0x2a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <null_ptr_check+0x2a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <null_ptr_check+0x2a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 800312e:	23ff      	movs	r3, #255	@ 0xff
 8003130:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b08a      	sub	sp, #40	@ 0x28
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8003166:	2300      	movs	r3, #0
 8003168:	723b      	strb	r3, [r7, #8]
 800316a:	2300      	movs	r3, #0
 800316c:	727b      	strb	r3, [r7, #9]
 800316e:	2300      	movs	r3, #0
 8003170:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003172:	f107 030c 	add.w	r3, r7, #12
 8003176:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	2104      	movs	r1, #4
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fbcd 	bl	8001920 <bmi2_extract_input_feat_config>
 8003186:	4603      	mov	r3, r0
 8003188:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800318a:	7ffb      	ldrb	r3, [r7, #31]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80d8 	beq.w	8003342 <set_any_motion_config+0x200>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 8003192:	7a7b      	ldrb	r3, [r7, #9]
 8003194:	f107 010c 	add.w	r1, r7, #12
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fb2e 	bl	80017fc <bmi2_get_feat_config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80031a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 80cc 	bne.w	8003348 <set_any_motion_config+0x206>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 80031b0:	7abb      	ldrb	r3, [r7, #10]
 80031b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80031b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 80031c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	6a3a      	ldr	r2, [r7, #32]
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80031d2:	f023 031f 	bic.w	r3, r3, #31
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b21b      	sxth	r3, r3
 80031de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e2:	b21b      	sxth	r3, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	b219      	sxth	r1, r3
 80031e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	6a3a      	ldr	r2, [r7, #32]
 80031f0:	4413      	add	r3, r2
 80031f2:	b28a      	uxth	r2, r1
 80031f4:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 80031f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b21b      	sxth	r3, r3
 8003204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003208:	b21a      	sxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	889b      	ldrh	r3, [r3, #4]
 800320e:	b21b      	sxth	r3, r3
 8003210:	035b      	lsls	r3, r3, #13
 8003212:	b21b      	sxth	r3, r3
 8003214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003218:	b21b      	sxth	r3, r3
 800321a:	4313      	orrs	r3, r2
 800321c:	b219      	sxth	r1, r3
 800321e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	4413      	add	r3, r2
 8003228:	b28a      	uxth	r2, r1
 800322a:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 800322c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b21b      	sxth	r3, r3
 800323a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800323e:	b21a      	sxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	88db      	ldrh	r3, [r3, #6]
 8003244:	b21b      	sxth	r3, r3
 8003246:	039b      	lsls	r3, r3, #14
 8003248:	b21b      	sxth	r3, r3
 800324a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800324e:	b21b      	sxth	r3, r3
 8003250:	4313      	orrs	r3, r2
 8003252:	b219      	sxth	r1, r3
 8003254:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	4413      	add	r3, r2
 800325e:	b28a      	uxth	r2, r1
 8003260:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8003262:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	6a3a      	ldr	r2, [r7, #32]
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b21b      	sxth	r3, r3
 8003270:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003274:	b21a      	sxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	891b      	ldrh	r3, [r3, #8]
 800327a:	b21b      	sxth	r3, r3
 800327c:	03db      	lsls	r3, r3, #15
 800327e:	b21b      	sxth	r3, r3
 8003280:	4313      	orrs	r3, r2
 8003282:	b219      	sxth	r1, r3
 8003284:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	4413      	add	r3, r2
 800328e:	b28a      	uxth	r2, r1
 8003290:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8003292:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003296:	3301      	adds	r3, #1
 8003298:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 800329c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	6a3a      	ldr	r2, [r7, #32]
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032ae:	f023 0307 	bic.w	r3, r3, #7
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	885b      	ldrh	r3, [r3, #2]
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b219      	sxth	r1, r3
 80032c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	4413      	add	r3, r2
 80032ce:	b28a      	uxth	r2, r1
 80032d0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80032d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032d6:	3301      	adds	r3, #1
 80032d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 80032dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	7abb      	ldrb	r3, [r7, #10]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80032f2:	e015      	b.n	8003320 <set_any_motion_config+0x1de>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 80032f4:	7abb      	ldrb	r3, [r7, #10]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80032fc:	4413      	add	r3, r2
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 8003302:	7abb      	ldrb	r3, [r7, #10]
 8003304:	4619      	mov	r1, r3
 8003306:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800330a:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	3328      	adds	r3, #40	@ 0x28
 8003310:	443b      	add	r3, r7
 8003312:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003316:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800331a:	3301      	adds	r3, #1
 800331c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003320:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003324:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003328:	429a      	cmp	r2, r3
 800332a:	d3e3      	bcc.n	80032f4 <set_any_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800332c:	f107 010c 	add.w	r1, r7, #12
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2210      	movs	r2, #16
 8003334:	2030      	movs	r0, #48	@ 0x30
 8003336:	f7fd fd32 	bl	8000d9e <bmi2_set_regs>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003340:	e002      	b.n	8003348 <set_any_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003342:	23f8      	movs	r3, #248	@ 0xf8
 8003344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003348:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	@ 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 8003378:	2300      	movs	r3, #0
 800337a:	723b      	strb	r3, [r7, #8]
 800337c:	2300      	movs	r3, #0
 800337e:	727b      	strb	r3, [r7, #9]
 8003380:	2300      	movs	r3, #0
 8003382:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003384:	f107 030c 	add.w	r3, r7, #12
 8003388:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 800338a:	f107 0308 	add.w	r3, r7, #8
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	2105      	movs	r1, #5
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fac4 	bl	8001920 <bmi2_extract_input_feat_config>
 8003398:	4603      	mov	r3, r0
 800339a:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800339c:	7ffb      	ldrb	r3, [r7, #31]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80d8 	beq.w	8003554 <set_no_motion_config+0x200>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 80033a4:	7a7b      	ldrb	r3, [r7, #9]
 80033a6:	f107 010c 	add.w	r1, r7, #12
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe fa25 	bl	80017fc <bmi2_get_feat_config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80033b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 80cc 	bne.w	800355a <set_no_motion_config+0x206>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 80033c2:	7abb      	ldrb	r3, [r7, #10]
 80033c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80033c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 80033d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	6a3a      	ldr	r2, [r7, #32]
 80033da:	4413      	add	r3, r2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80033e4:	f023 031f 	bic.w	r3, r3, #31
 80033e8:	b21a      	sxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f4:	b21b      	sxth	r3, r3
 80033f6:	4313      	orrs	r3, r2
 80033f8:	b219      	sxth	r1, r3
 80033fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	4413      	add	r3, r2
 8003404:	b28a      	uxth	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 8003408:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	6a3a      	ldr	r2, [r7, #32]
 8003410:	4413      	add	r3, r2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b21b      	sxth	r3, r3
 8003416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800341a:	b21a      	sxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	889b      	ldrh	r3, [r3, #4]
 8003420:	b21b      	sxth	r3, r3
 8003422:	035b      	lsls	r3, r3, #13
 8003424:	b21b      	sxth	r3, r3
 8003426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800342a:	b21b      	sxth	r3, r3
 800342c:	4313      	orrs	r3, r2
 800342e:	b219      	sxth	r1, r3
 8003430:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	4413      	add	r3, r2
 800343a:	b28a      	uxth	r2, r1
 800343c:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 800343e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b21b      	sxth	r3, r3
 800344c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003450:	b21a      	sxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	88db      	ldrh	r3, [r3, #6]
 8003456:	b21b      	sxth	r3, r3
 8003458:	039b      	lsls	r3, r3, #14
 800345a:	b21b      	sxth	r3, r3
 800345c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003460:	b21b      	sxth	r3, r3
 8003462:	4313      	orrs	r3, r2
 8003464:	b219      	sxth	r1, r3
 8003466:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	4413      	add	r3, r2
 8003470:	b28a      	uxth	r2, r1
 8003472:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8003474:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	6a3a      	ldr	r2, [r7, #32]
 800347c:	4413      	add	r3, r2
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b21b      	sxth	r3, r3
 8003482:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003486:	b21a      	sxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	891b      	ldrh	r3, [r3, #8]
 800348c:	b21b      	sxth	r3, r3
 800348e:	03db      	lsls	r3, r3, #15
 8003490:	b21b      	sxth	r3, r3
 8003492:	4313      	orrs	r3, r2
 8003494:	b219      	sxth	r1, r3
 8003496:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	4413      	add	r3, r2
 80034a0:	b28a      	uxth	r2, r1
 80034a2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 80034a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034a8:	3301      	adds	r3, #1
 80034aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 80034ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80034c0:	f023 0307 	bic.w	r3, r3, #7
 80034c4:	b21a      	sxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	885b      	ldrh	r3, [r3, #2]
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b219      	sxth	r1, r3
 80034d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	4413      	add	r3, r2
 80034e0:	b28a      	uxth	r2, r1
 80034e2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80034e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034e8:	3301      	adds	r3, #1
 80034ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 80034ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	7abb      	ldrb	r3, [r7, #10]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003504:	e015      	b.n	8003532 <set_no_motion_config+0x1de>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 8003506:	7abb      	ldrb	r3, [r7, #10]
 8003508:	461a      	mov	r2, r3
 800350a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800350e:	4413      	add	r3, r2
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 8003514:	7abb      	ldrb	r3, [r7, #10]
 8003516:	4619      	mov	r1, r3
 8003518:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800351c:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	3328      	adds	r3, #40	@ 0x28
 8003522:	443b      	add	r3, r7
 8003524:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003528:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800352c:	3301      	adds	r3, #1
 800352e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003532:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003536:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800353a:	429a      	cmp	r2, r3
 800353c:	d3e3      	bcc.n	8003506 <set_no_motion_config+0x1b2>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800353e:	f107 010c 	add.w	r1, r7, #12
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	2030      	movs	r0, #48	@ 0x30
 8003548:	f7fd fc29 	bl	8000d9e <bmi2_set_regs>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003552:	e002      	b.n	800355a <set_no_motion_config+0x206>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003554:	23f8      	movs	r3, #248	@ 0xf8
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800355a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800355e:	4618      	mov	r0, r3
 8003560:	3728      	adds	r7, #40	@ 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	@ 0x28
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 800358a:	2300      	movs	r3, #0
 800358c:	723b      	strb	r3, [r7, #8]
 800358e:	2300      	movs	r3, #0
 8003590:	727b      	strb	r3, [r7, #9]
 8003592:	2300      	movs	r3, #0
 8003594:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	2103      	movs	r1, #3
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe f9bb 	bl	8001920 <bmi2_extract_input_feat_config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d055      	beq.n	8003660 <set_sig_motion_config+0xfa>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 80035b4:	7a7b      	ldrb	r3, [r7, #9]
 80035b6:	f107 010c 	add.w	r1, r7, #12
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe f91d 	bl	80017fc <bmi2_get_feat_config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80035c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d14a      	bne.n	8003666 <set_sig_motion_config+0x100>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 80035d0:	7abb      	ldrb	r3, [r7, #10]
 80035d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80035d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 80035e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	4413      	add	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80035f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035f4:	3301      	adds	r3, #1
 80035f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 80035fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	7abb      	ldrb	r3, [r7, #10]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800360a:	2300      	movs	r3, #0
 800360c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003610:	e015      	b.n	800363e <set_sig_motion_config+0xd8>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 8003612:	7abb      	ldrb	r3, [r7, #10]
 8003614:	461a      	mov	r2, r3
 8003616:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800361a:	4413      	add	r3, r2
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 8003620:	7abb      	ldrb	r3, [r7, #10]
 8003622:	4619      	mov	r1, r3
 8003624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003628:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	3328      	adds	r3, #40	@ 0x28
 800362e:	443b      	add	r3, r7
 8003630:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003638:	3301      	adds	r3, #1
 800363a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800363e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003642:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003646:	429a      	cmp	r2, r3
 8003648:	d3e3      	bcc.n	8003612 <set_sig_motion_config+0xac>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800364a:	f107 010c 	add.w	r1, r7, #12
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	2030      	movs	r0, #48	@ 0x30
 8003654:	f7fd fba3 	bl	8000d9e <bmi2_set_regs>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800365e:	e002      	b.n	8003666 <set_sig_motion_config+0x100>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003660:	23f8      	movs	r3, #248	@ 0xf8
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003666:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800366a:	4618      	mov	r0, r3
 800366c:	3728      	adds	r7, #40	@ 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b08c      	sub	sp, #48	@ 0x30
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	60da      	str	r2, [r3, #12]

    /* Variable to define index */
    uint8_t index = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 8003696:	2300      	movs	r3, #0
 8003698:	723b      	strb	r3, [r7, #8]
 800369a:	2300      	movs	r3, #0
 800369c:	727b      	strb	r3, [r7, #9]
 800369e:	2300      	movs	r3, #0
 80036a0:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 80036a2:	2332      	movs	r3, #50	@ 0x32
 80036a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 80036a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 80036b2:	2308      	movs	r3, #8
 80036b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	211d      	movs	r1, #29
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe f927 	bl	8001920 <bmi2_extract_input_feat_config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80036d6:	7ffb      	ldrb	r3, [r7, #31]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8099 	beq.w	8003810 <set_step_count_params_config+0x19e>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 80036de:	7a7b      	ldrb	r3, [r7, #9]
 80036e0:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 80036e2:	7fba      	ldrb	r2, [r7, #30]
 80036e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036e8:	4413      	add	r3, r2
 80036ea:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 80036ec:	7abb      	ldrb	r3, [r7, #10]
 80036ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 80036f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	b2da      	uxtb	r2, r3
 8003702:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003706:	4413      	add	r3, r2
 8003708:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 800370a:	7fbb      	ldrb	r3, [r7, #30]
 800370c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003710:	e078      	b.n	8003804 <set_step_count_params_config+0x192>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 8003712:	f107 010c 	add.w	r1, r7, #12
 8003716:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe f86d 	bl	80017fc <bmi2_get_feat_config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 8003728:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800372c:	2b00      	cmp	r3, #0
 800372e:	d164      	bne.n	80037fa <set_step_count_params_config+0x188>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8003730:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003734:	7fbb      	ldrb	r3, [r7, #30]
 8003736:	429a      	cmp	r2, r3
 8003738:	d902      	bls.n	8003740 <set_step_count_params_config+0xce>
                {
                    start_addr = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 8003740:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003744:	7f7b      	ldrb	r3, [r7, #29]
 8003746:	429a      	cmp	r2, r3
 8003748:	d103      	bne.n	8003752 <set_step_count_params_config+0xe0>
                {
                    max_len = (remain_len / 2);
 800374a:	7f3b      	ldrb	r3, [r7, #28]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 8003752:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 800375c:	e015      	b.n	800378a <set_step_count_params_config+0x118>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 800375e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	441a      	add	r2, r3
 8003768:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	6a39      	ldr	r1, [r7, #32]
 8003770:	440b      	add	r3, r1
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 8003776:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800377a:	3301      	adds	r3, #1
 800377c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 8003780:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003784:	3301      	adds	r3, #1
 8003786:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 800378a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800378e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003792:	429a      	cmp	r2, r3
 8003794:	d3e3      	bcc.n	800375e <set_step_count_params_config+0xec>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 8003796:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	7abb      	ldrb	r3, [r7, #10]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80037ac:	e015      	b.n	80037da <set_step_count_params_config+0x168>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 80037ae:	7abb      	ldrb	r3, [r7, #10]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037b6:	4413      	add	r3, r2
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 80037bc:	7abb      	ldrb	r3, [r7, #10]
 80037be:	4619      	mov	r1, r3
 80037c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037c4:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 80037c6:	7812      	ldrb	r2, [r2, #0]
 80037c8:	3330      	adds	r3, #48	@ 0x30
 80037ca:	443b      	add	r3, r7
 80037cc:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 80037d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037d4:	3301      	adds	r3, #1
 80037d6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80037da:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80037de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3e3      	bcc.n	80037ae <set_step_count_params_config+0x13c>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 80037e6:	f107 010c 	add.w	r1, r7, #12
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2210      	movs	r2, #16
 80037ee:	2030      	movs	r0, #48	@ 0x30
 80037f0:	f7fd fad5 	bl	8000d9e <bmi2_set_regs>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 80037fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80037fe:	3301      	adds	r3, #1
 8003800:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003804:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003808:	7f7b      	ldrb	r3, [r7, #29]
 800380a:	429a      	cmp	r2, r3
 800380c:	d981      	bls.n	8003712 <set_step_count_params_config+0xa0>
 800380e:	e002      	b.n	8003816 <set_step_count_params_config+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003810:	23f8      	movs	r3, #248	@ 0xf8
 8003812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003816:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800381a:	4618      	mov	r0, r3
 800381c:	3730      	adds	r7, #48	@ 0x30
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b08a      	sub	sp, #40	@ 0x28
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8003846:	2300      	movs	r3, #0
 8003848:	723b      	strb	r3, [r7, #8]
 800384a:	2300      	movs	r3, #0
 800384c:	727b      	strb	r3, [r7, #9]
 800384e:	2300      	movs	r3, #0
 8003850:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8003858:	f107 0308 	add.w	r3, r7, #8
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	2107      	movs	r1, #7
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe f85d 	bl	8001920 <bmi2_extract_input_feat_config>
 8003866:	4603      	mov	r3, r0
 8003868:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8084 	beq.w	800397a <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8003872:	7a7b      	ldrb	r3, [r7, #9]
 8003874:	f107 010c 	add.w	r1, r7, #12
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd ffbe 	bl	80017fc <bmi2_get_feat_config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003886:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800388a:	2b00      	cmp	r3, #0
 800388c:	d178      	bne.n	8003980 <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 800388e:	7abb      	ldrb	r3, [r7, #10]
 8003890:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003894:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 800389e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038b0:	f023 0303 	bic.w	r3, r3, #3
 80038b4:	b21a      	sxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b219      	sxth	r1, r3
 80038c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	4413      	add	r3, r2
 80038d0:	b28a      	uxth	r2, r1
 80038d2:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 80038d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	4413      	add	r3, r2
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b21b      	sxth	r3, r3
 80038e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	885b      	ldrh	r3, [r3, #2]
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	029b      	lsls	r3, r3, #10
 80038f0:	b21b      	sxth	r3, r3
 80038f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b219      	sxth	r1, r3
 80038fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	6a3a      	ldr	r2, [r7, #32]
 8003904:	4413      	add	r3, r2
 8003906:	b28a      	uxth	r2, r1
 8003908:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 800390a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800390e:	3301      	adds	r3, #1
 8003910:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 8003914:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	b2da      	uxtb	r2, r3
 800391c:	7abb      	ldrb	r3, [r7, #10]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003924:	2300      	movs	r3, #0
 8003926:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800392a:	e015      	b.n	8003958 <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 800392c:	7abb      	ldrb	r3, [r7, #10]
 800392e:	461a      	mov	r2, r3
 8003930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003934:	4413      	add	r3, r2
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 800393a:	7abb      	ldrb	r3, [r7, #10]
 800393c:	4619      	mov	r1, r3
 800393e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003942:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	3328      	adds	r3, #40	@ 0x28
 8003948:	443b      	add	r3, r7
 800394a:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 800394e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003952:	3301      	adds	r3, #1
 8003954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003958:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800395c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003960:	429a      	cmp	r2, r3
 8003962:	d3e3      	bcc.n	800392c <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003964:	f107 010c 	add.w	r1, r7, #12
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	2030      	movs	r0, #48	@ 0x30
 800396e:	f7fd fa16 	bl	8000d9e <bmi2_set_regs>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003978:	e002      	b.n	8003980 <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 800397a:	23f8      	movs	r3, #248	@ 0xf8
 800397c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003980:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003984:	4618      	mov	r0, r3
 8003986:	3728      	adds	r7, #40	@ 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	@ 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003996:	f107 030c 	add.w	r3, r7, #12
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 80039b0:	2300      	movs	r3, #0
 80039b2:	723b      	strb	r3, [r7, #8]
 80039b4:	2300      	movs	r3, #0
 80039b6:	727b      	strb	r3, [r7, #9]
 80039b8:	2300      	movs	r3, #0
 80039ba:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 80039c2:	f107 0308 	add.w	r3, r7, #8
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	2113      	movs	r1, #19
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd ffa8 	bl	8001920 <bmi2_extract_input_feat_config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8091 	beq.w	8003afe <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 80039dc:	7a7b      	ldrb	r3, [r7, #9]
 80039de:	f107 010c 	add.w	r1, r7, #12
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd ff09 	bl	80017fc <bmi2_get_feat_config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 80039f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 8085 	bne.w	8003b04 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 80039fa:	7abb      	ldrb	r3, [r7, #10]
 80039fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003a00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 8003a0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	4413      	add	r3, r2
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	f023 0310 	bic.w	r3, r3, #16
 8003a1c:	b21a      	sxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	b219      	sxth	r1, r3
 8003a32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	b28a      	uxth	r2, r1
 8003a3e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 8003a40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a44:	3301      	adds	r3, #1
 8003a46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 8003a4a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	4413      	add	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	8852      	ldrh	r2, [r2, #2]
 8003a58:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 8003a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 8003a64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	8892      	ldrh	r2, [r2, #4]
 8003a72:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 8003a74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 8003a7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	4413      	add	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	88d2      	ldrh	r2, [r2, #6]
 8003a8c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003a8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a92:	3301      	adds	r3, #1
 8003a94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 8003a98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	7abb      	ldrb	r3, [r7, #10]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003aae:	e015      	b.n	8003adc <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8003ab0:	7abb      	ldrb	r3, [r7, #10]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ab8:	4413      	add	r3, r2
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 8003abe:	7abb      	ldrb	r3, [r7, #10]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ac6:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	3328      	adds	r3, #40	@ 0x28
 8003acc:	443b      	add	r3, r7
 8003ace:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003adc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003ae0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3e3      	bcc.n	8003ab0 <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003ae8:	f107 010c 	add.w	r1, r7, #12
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2210      	movs	r2, #16
 8003af0:	2030      	movs	r0, #48	@ 0x30
 8003af2:	f7fd f954 	bl	8000d9e <bmi2_set_regs>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003afc:	e002      	b.n	8003b04 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003afe:	23f8      	movs	r3, #248	@ 0xf8
 8003b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	@ 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8003b34:	2300      	movs	r3, #0
 8003b36:	723b      	strb	r3, [r7, #8]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	727b      	strb	r3, [r7, #9]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	2114      	movs	r1, #20
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fee6 	bl	8001920 <bmi2_extract_input_feat_config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 809d 	beq.w	8003c9a <set_wrist_wear_wake_up_config+0x18a>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8003b60:	7a7b      	ldrb	r3, [r7, #9]
 8003b62:	f107 010c 	add.w	r1, r7, #12
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fe47 	bl	80017fc <bmi2_get_feat_config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f040 8091 	bne.w	8003ca0 <set_wrist_wear_wake_up_config+0x190>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 8003b7e:	7abb      	ldrb	r3, [r7, #10]
 8003b80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 8003b8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b92:	3301      	adds	r3, #1
 8003b94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 8003b98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 8003ba8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bac:	3301      	adds	r3, #1
 8003bae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 8003bb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	4413      	add	r3, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	8852      	ldrh	r2, [r2, #2]
 8003bc0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 8003bc2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 8003bcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	6a3a      	ldr	r2, [r7, #32]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	8892      	ldrh	r2, [r2, #4]
 8003bda:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 8003bdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003be0:	3301      	adds	r3, #1
 8003be2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 8003be6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	4413      	add	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	88d2      	ldrh	r2, [r2, #6]
 8003bf4:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 8003bf6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 8003c00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	4413      	add	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	8912      	ldrh	r2, [r2, #8]
 8003c0e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 8003c10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c14:	3301      	adds	r3, #1
 8003c16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 8003c1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	4413      	add	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	8952      	ldrh	r2, [r2, #10]
 8003c28:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003c2a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 8003c34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	7abb      	ldrb	r3, [r7, #10]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c4a:	e015      	b.n	8003c78 <set_wrist_wear_wake_up_config+0x168>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003c4c:	7abb      	ldrb	r3, [r7, #10]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c54:	4413      	add	r3, r2
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 8003c5a:	7abb      	ldrb	r3, [r7, #10]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c62:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	3328      	adds	r3, #40	@ 0x28
 8003c68:	443b      	add	r3, r7
 8003c6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c72:	3301      	adds	r3, #1
 8003c74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003c7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3e3      	bcc.n	8003c4c <set_wrist_wear_wake_up_config+0x13c>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003c84:	f107 010c 	add.w	r1, r7, #12
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	2030      	movs	r0, #48	@ 0x30
 8003c8e:	f7fd f886 	bl	8000d9e <bmi2_set_regs>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c98:	e002      	b.n	8003ca0 <set_wrist_wear_wake_up_config+0x190>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003c9a:	23f8      	movs	r3, #248	@ 0xf8
 8003c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003ca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3728      	adds	r7, #40	@ 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 8003cba:	7afa      	ldrb	r2, [r7, #11]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	3b03      	subs	r3, #3
 8003cce:	2b1a      	cmp	r3, #26
 8003cd0:	f200 80aa 	bhi.w	8003e28 <set_feat_config+0x17c>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <set_feat_config+0x30>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d89 	.word	0x08003d89
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003d69 	.word	0x08003d69
 8003ce8:	08003dc9 	.word	0x08003dc9
 8003cec:	08003dc9 	.word	0x08003dc9
 8003cf0:	08003dc9 	.word	0x08003dc9
 8003cf4:	08003e29 	.word	0x08003e29
 8003cf8:	08003e29 	.word	0x08003e29
 8003cfc:	08003e29 	.word	0x08003e29
 8003d00:	08003e29 	.word	0x08003e29
 8003d04:	08003e29 	.word	0x08003e29
 8003d08:	08003e29 	.word	0x08003e29
 8003d0c:	08003e29 	.word	0x08003e29
 8003d10:	08003e29 	.word	0x08003e29
 8003d14:	08003e29 	.word	0x08003e29
 8003d18:	08003e29 	.word	0x08003e29
 8003d1c:	08003de9 	.word	0x08003de9
 8003d20:	08003e09 	.word	0x08003e09
 8003d24:	08003e29 	.word	0x08003e29
 8003d28:	08003e29 	.word	0x08003e29
 8003d2c:	08003e29 	.word	0x08003e29
 8003d30:	08003e29 	.word	0x08003e29
 8003d34:	08003e29 	.word	0x08003e29
 8003d38:	08003e29 	.word	0x08003e29
 8003d3c:	08003e29 	.word	0x08003e29
 8003d40:	08003e29 	.word	0x08003e29
 8003d44:	08003da9 	.word	0x08003da9
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8003d48:	7afa      	ldrb	r2, [r7, #11]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff f9f0 	bl	8003142 <set_any_motion_config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
            break;
 8003d66:	e062      	b.n	8003e2e <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8003d68:	7afa      	ldrb	r2, [r7, #11]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fae9 	bl	8003354 <set_no_motion_config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	75fb      	strb	r3, [r7, #23]
            break;
 8003d86:	e052      	b.n	8003e2e <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8003d88:	7afa      	ldrb	r2, [r7, #11]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fbe2 	bl	8003566 <set_sig_motion_config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]
            break;
 8003da6:	e042      	b.n	8003e2e <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 8003da8:	7afa      	ldrb	r2, [r7, #11]
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	3304      	adds	r3, #4
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fc58 	bl	8003672 <set_step_count_params_config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
            break;
 8003dc6:	e032      	b.n	8003e2e <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8003dc8:	7afa      	ldrb	r2, [r7, #11]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fd20 	bl	8003822 <set_step_config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
            break;
 8003de6:	e022      	b.n	8003e2e <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 8003de8:	7afa      	ldrb	r2, [r7, #11]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fdc5 	bl	800398c <set_wrist_gest_config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]
            break;
 8003e06:	e012      	b.n	8003e2e <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 8003e08:	7afa      	ldrb	r2, [r7, #11]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	3304      	adds	r3, #4
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fe77 	bl	8003b10 <set_wrist_wear_wake_up_config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
            break;
 8003e26:	e002      	b.n	8003e2e <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 8003e28:	23f8      	movs	r3, #248	@ 0xf8
 8003e2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003e2c:	bf00      	nop
    }

    return rslt;
 8003e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <bmi2_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	f107 0314 	add.w	r3, r7, #20
 8003e52:	8812      	ldrh	r2, [r2, #0]
 8003e54:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Read(intf_info.bus, intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Read(intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
 8003e56:	7d38      	ldrb	r0, [r7, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	7bf9      	ldrb	r1, [r7, #15]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	f003 fdce 	bl	8007a00 <SensorAPI_I2Cx_Read>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <bmi2_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Write(intf_info.bus, intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Write(intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
 8003e88:	7d38      	ldrb	r0, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	7bf9      	ldrb	r1, [r7, #15]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	f003 fdd7 	bl	8007a44 <SensorAPI_I2Cx_Write>
 8003e96:	4603      	mov	r3, r0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <bmi2_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bmi2_delay_us(uint32_t period, void *intf_ptr)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	bmi160_delay_us(period);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f003 fd8e 	bl	80079cc <bmi160_delay_us>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <bmi2_interface_init>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t bmi2_interface_init(struct bmi2_dev *bmi, uint8_t intf)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMI2_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]

    if (bmi != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d026      	beq.n	8003f1c <bmi2_interface_init+0x64>
//
//            return COINES_E_UNABLE_OPEN_DEVICE;
//        }

        /* Bus configuration : I2C */
        if (intf == BMI2_I2C_INTF)
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10e      	bne.n	8003ef2 <bmi2_interface_init+0x3a>
        {
            printf("I2C Interface \n");
 8003ed4:	4815      	ldr	r0, [pc, #84]	@ (8003f2c <bmi2_interface_init+0x74>)
 8003ed6:	f015 f9df 	bl	8019298 <puts>

            /* To initialize the user I2C function */
            dev_addr = BMI2_I2C_SEC_ADDR;
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <bmi2_interface_init+0x78>)
 8003edc:	2269      	movs	r2, #105	@ 0x69
 8003ede:	701a      	strb	r2, [r3, #0]
            bmi->intf = BMI2_I2C_INTF;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	725a      	strb	r2, [r3, #9]
            bmi->read = bmi2_i2c_read;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a12      	ldr	r2, [pc, #72]	@ (8003f34 <bmi2_interface_init+0x7c>)
 8003eea:	639a      	str	r2, [r3, #56]	@ 0x38
            bmi->write = bmi2_i2c_write;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <bmi2_interface_init+0x80>)
 8003ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
//        }

//        if (COINES_SUCCESS == result)
//        {
            /* Assign device address and bus instance to interface pointer */
            intf_conf.bus = bus_inst;
 8003ef2:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <bmi2_interface_init+0x84>)
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <bmi2_interface_init+0x88>)
 8003ef8:	705a      	strb	r2, [r3, #1]
            intf_conf.dev_addr = dev_addr;
 8003efa:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <bmi2_interface_init+0x78>)
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <bmi2_interface_init+0x88>)
 8003f00:	701a      	strb	r2, [r3, #0]
            bmi->intf_ptr = ((void *)&intf_conf);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <bmi2_interface_init+0x88>)
 8003f06:	605a      	str	r2, [r3, #4]

            /* Configure delay in microseconds */
            bmi->delay_us = bmi2_delay_us;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f44 <bmi2_interface_init+0x8c>)
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
            bmi->read_write_len = READ_WRITE_LEN;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	222e      	movs	r2, #46	@ 0x2e
 8003f12:	81da      	strh	r2, [r3, #14]

            /* Assign to NULL to load the default config file. */
            bmi->config_file_ptr = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	615a      	str	r2, [r3, #20]
 8003f1a:	e001      	b.n	8003f20 <bmi2_interface_init+0x68>
//            rslt = COINES_E_COMM_INIT_FAILED;
//        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8003f1c:	23ff      	movs	r3, #255	@ 0xff
 8003f1e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	0801c4b0 	.word	0x0801c4b0
 8003f30:	20000304 	.word	0x20000304
 8003f34:	08003e3d 	.word	0x08003e3d
 8003f38:	08003e6f 	.word	0x08003e6f
 8003f3c:	20000305 	.word	0x20000305
 8003f40:	20000308 	.word	0x20000308
 8003f44:	08003ea1 	.word	0x08003ea1

08003f48 <bmi2_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi2_error_codes_print_result(int8_t rslt)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
    switch (rslt)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	3322      	adds	r3, #34	@ 0x22
 8003f58:	2b24      	cmp	r3, #36	@ 0x24
 8003f5a:	f200 812d 	bhi.w	80041b8 <bmi2_error_codes_print_result+0x270>
 8003f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <bmi2_error_codes_print_result+0x1c>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	080041ab 	.word	0x080041ab
 8003f68:	0800419d 	.word	0x0800419d
 8003f6c:	0800418f 	.word	0x0800418f
 8003f70:	080041b9 	.word	0x080041b9
 8003f74:	08004181 	.word	0x08004181
 8003f78:	080041b9 	.word	0x080041b9
 8003f7c:	080041b9 	.word	0x080041b9
 8003f80:	08004173 	.word	0x08004173
 8003f84:	08004165 	.word	0x08004165
 8003f88:	08004157 	.word	0x08004157
 8003f8c:	08004149 	.word	0x08004149
 8003f90:	0800413b 	.word	0x0800413b
 8003f94:	0800412d 	.word	0x0800412d
 8003f98:	0800411f 	.word	0x0800411f
 8003f9c:	08004111 	.word	0x08004111
 8003fa0:	08004103 	.word	0x08004103
 8003fa4:	080040f5 	.word	0x080040f5
 8003fa8:	080040e7 	.word	0x080040e7
 8003fac:	0800404d 	.word	0x0800404d
 8003fb0:	080040d9 	.word	0x080040d9
 8003fb4:	080040cb 	.word	0x080040cb
 8003fb8:	080040bd 	.word	0x080040bd
 8003fbc:	0800405b 	.word	0x0800405b
 8003fc0:	080041b9 	.word	0x080041b9
 8003fc4:	080040af 	.word	0x080040af
 8003fc8:	080040a1 	.word	0x080040a1
 8003fcc:	0800403f 	.word	0x0800403f
 8003fd0:	08004093 	.word	0x08004093
 8003fd4:	08004085 	.word	0x08004085
 8003fd8:	08004077 	.word	0x08004077
 8003fdc:	08004069 	.word	0x08004069
 8003fe0:	08004031 	.word	0x08004031
 8003fe4:	08004023 	.word	0x08004023
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	080041c7 	.word	0x080041c7
 8003ff0:	08003ff9 	.word	0x08003ff9
 8003ff4:	08004007 	.word	0x08004007

            /* Do nothing */
            break;

        case BMI2_W_FIFO_EMPTY:
            printf("Warning [%d] : FIFO empty\r\n", rslt);
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4874      	ldr	r0, [pc, #464]	@ (80041d0 <bmi2_error_codes_print_result+0x288>)
 8004000:	f015 f8e2 	bl	80191c8 <iprintf>
            break;
 8004004:	e0e0      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>
        case BMI2_W_PARTIAL_READ:
            printf("Warning [%d] : FIFO partial read\r\n", rslt);
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	4619      	mov	r1, r3
 800400c:	4871      	ldr	r0, [pc, #452]	@ (80041d4 <bmi2_error_codes_print_result+0x28c>)
 800400e:	f015 f8db 	bl	80191c8 <iprintf>
            break;
 8004012:	e0d9      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>
        case BMI2_E_NULL_PTR:
            printf(
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	4619      	mov	r1, r3
 800401a:	486f      	ldr	r0, [pc, #444]	@ (80041d8 <bmi2_error_codes_print_result+0x290>)
 800401c:	f015 f8d4 	bl	80191c8 <iprintf>
                "Error [%d] : Null pointer error. It occurs when the user tries to assign value (not address) to a pointer," " which has been initialized to NULL.\r\n",
                rslt);
            break;
 8004020:	e0d2      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_COM_FAIL:
            printf(
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	4619      	mov	r1, r3
 8004028:	486c      	ldr	r0, [pc, #432]	@ (80041dc <bmi2_error_codes_print_result+0x294>)
 800402a:	f015 f8cd 	bl	80191c8 <iprintf>
                "Error [%d] : Communication failure error. It occurs due to read/write operation failure and also due " "to power failure during communication\r\n",
                rslt);
            break;
 800402e:	e0cb      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DEV_NOT_FOUND:
            printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	4619      	mov	r1, r3
 8004036:	486a      	ldr	r0, [pc, #424]	@ (80041e0 <bmi2_error_codes_print_result+0x298>)
 8004038:	f015 f8c6 	bl	80191c8 <iprintf>
                   rslt);
            break;
 800403c:	e0c4      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_SENSOR:
            printf(
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	4619      	mov	r1, r3
 8004044:	4867      	ldr	r0, [pc, #412]	@ (80041e4 <bmi2_error_codes_print_result+0x29c>)
 8004046:	f015 f8bf 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid sensor error. It occurs when there is a mismatch in the requested feature with the " "available one\r\n",
                rslt);
            break;
 800404a:	e0bd      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_FAIL:
            printf(
 800404c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004050:	4619      	mov	r1, r3
 8004052:	4865      	ldr	r0, [pc, #404]	@ (80041e8 <bmi2_error_codes_print_result+0x2a0>)
 8004054:	f015 f8b8 	bl	80191c8 <iprintf>
                "Error [%d] : Self-test failed error. It occurs when the validation of accel self-test data is " "not satisfied\r\n",
                rslt);
            break;
 8004058:	e0b6      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INT_PIN:
            printf(
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	4619      	mov	r1, r3
 8004060:	4862      	ldr	r0, [pc, #392]	@ (80041ec <bmi2_error_codes_print_result+0x2a4>)
 8004062:	f015 f8b1 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid interrupt pin error. It occurs when the user tries to configure interrupt pins " "apart from INT1 and INT2\r\n",
                rslt);
            break;
 8004066:	e0af      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_OUT_OF_RANGE:
            printf(
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	4619      	mov	r1, r3
 800406e:	4860      	ldr	r0, [pc, #384]	@ (80041f0 <bmi2_error_codes_print_result+0x2a8>)
 8004070:	f015 f8aa 	bl	80191c8 <iprintf>
                "Error [%d] : Out of range error. It occurs when the data exceeds from filtered or unfiltered data from " "fifo and also when the range exceeds the maximum range for accel and gyro while performing FOC\r\n",
                rslt);
            break;
 8004074:	e0a8      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_INVALID_CFG:
            printf(
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	4619      	mov	r1, r3
 800407c:	485d      	ldr	r0, [pc, #372]	@ (80041f4 <bmi2_error_codes_print_result+0x2ac>)
 800407e:	f015 f8a3 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid Accel configuration error. It occurs when there is an error in accel configuration" " register which could be one among range, BW or filter performance in reg address 0x40\r\n",
                rslt);
            break;
 8004082:	e0a1      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYRO_INVALID_CFG:
            printf(
 8004084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004088:	4619      	mov	r1, r3
 800408a:	485b      	ldr	r0, [pc, #364]	@ (80041f8 <bmi2_error_codes_print_result+0x2b0>)
 800408c:	f015 f89c 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid Gyro configuration error. It occurs when there is a error in gyro configuration" "register which could be one among range, BW or filter performance in reg address 0x42\r\n",
                rslt);
            break;
 8004090:	e09a      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_GYR_INVALID_CFG:
            printf(
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	4619      	mov	r1, r3
 8004098:	4858      	ldr	r0, [pc, #352]	@ (80041fc <bmi2_error_codes_print_result+0x2b4>)
 800409a:	f015 f895 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid Accel-Gyro configuration error. It occurs when there is a error in accel and gyro" " configuration registers which could be one among range, BW or filter performance in reg address 0x40 " "and 0x42\r\n",
                rslt);
            break;
 800409e:	e093      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CONFIG_LOAD:
            printf(
 80040a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4856      	ldr	r0, [pc, #344]	@ (8004200 <bmi2_error_codes_print_result+0x2b8>)
 80040a8:	f015 f88e 	bl	80191c8 <iprintf>
                "Error [%d] : Configuration load error. It occurs when failure observed while loading the configuration " "into the sensor\r\n",
                rslt);
            break;
 80040ac:	e08c      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_PAGE:
            printf(
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4853      	ldr	r0, [pc, #332]	@ (8004204 <bmi2_error_codes_print_result+0x2bc>)
 80040b6:	f015 f887 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid page error. It occurs due to failure in writing the correct feature configuration " "from selected page\r\n",
                rslt);
            break;
 80040ba:	e085      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SET_APS_FAIL:
            printf(
 80040bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c0:	4619      	mov	r1, r3
 80040c2:	4851      	ldr	r0, [pc, #324]	@ (8004208 <bmi2_error_codes_print_result+0x2c0>)
 80040c4:	f015 f880 	bl	80191c8 <iprintf>
                "Error [%d] : APS failure error. It occurs due to failure in write of advance power mode configuration " "register\r\n",
                rslt);
            break;
 80040c8:	e07e      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_INVALID_CFG:
            printf(
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	4619      	mov	r1, r3
 80040d0:	484e      	ldr	r0, [pc, #312]	@ (800420c <bmi2_error_codes_print_result+0x2c4>)
 80040d2:	f015 f879 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid AUX configuration error. It occurs when the auxiliary interface settings are not " "enabled properly\r\n",
                rslt);
            break;
 80040d6:	e077      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_BUSY:
            printf(
 80040d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040dc:	4619      	mov	r1, r3
 80040de:	484c      	ldr	r0, [pc, #304]	@ (8004210 <bmi2_error_codes_print_result+0x2c8>)
 80040e0:	f015 f872 	bl	80191c8 <iprintf>
                "Error [%d] : AUX busy error. It occurs when the auxiliary interface buses are engaged while configuring" " the AUX\r\n",
                rslt);
            break;
 80040e4:	e070      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_REMAP_ERROR:
            printf(
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	4619      	mov	r1, r3
 80040ec:	4849      	ldr	r0, [pc, #292]	@ (8004214 <bmi2_error_codes_print_result+0x2cc>)
 80040ee:	f015 f86b 	bl	80191c8 <iprintf>
                "Error [%d] : Remap error. It occurs due to failure in assigning the remap axes data for all the axes " "after change in axis position\r\n",
                rslt);
            break;
 80040f2:	e069      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYR_USER_GAIN_UPD_FAIL:
            printf(
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	4619      	mov	r1, r3
 80040fa:	4847      	ldr	r0, [pc, #284]	@ (8004218 <bmi2_error_codes_print_result+0x2d0>)
 80040fc:	f015 f864 	bl	80191c8 <iprintf>
                "Error [%d] : Gyro user gain update fail error. It occurs when the reading of user gain update status " "fails\r\n",
                rslt);
            break;
 8004100:	e062      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_NOT_DONE:
            printf(
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	4619      	mov	r1, r3
 8004108:	4844      	ldr	r0, [pc, #272]	@ (800421c <bmi2_error_codes_print_result+0x2d4>)
 800410a:	f015 f85d 	bl	80191c8 <iprintf>
                "Error [%d] : Self-test not done error. It occurs when the self-test process is ongoing or not " "completed\r\n",
                rslt);
            break;
 800410e:	e05b      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INPUT:
            printf("Error [%d] : Invalid input error. It occurs when the sensor input validity fails\r\n", rslt);
 8004110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004114:	4619      	mov	r1, r3
 8004116:	4842      	ldr	r0, [pc, #264]	@ (8004220 <bmi2_error_codes_print_result+0x2d8>)
 8004118:	f015 f856 	bl	80191c8 <iprintf>
            break;
 800411c:	e054      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_STATUS:
            printf("Error [%d] : Invalid status error. It occurs when the feature/sensor validity fails\r\n", rslt);
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	4619      	mov	r1, r3
 8004124:	483f      	ldr	r0, [pc, #252]	@ (8004224 <bmi2_error_codes_print_result+0x2dc>)
 8004126:	f015 f84f 	bl	80191c8 <iprintf>
            break;
 800412a:	e04d      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_ERROR:
            printf("Error [%d] : CRT error. It occurs when the CRT test has failed\r\n", rslt);
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	4619      	mov	r1, r3
 8004132:	483d      	ldr	r0, [pc, #244]	@ (8004228 <bmi2_error_codes_print_result+0x2e0>)
 8004134:	f015 f848 	bl	80191c8 <iprintf>
            break;
 8004138:	e046      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_ALREADY_RUNNING:
            printf(
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	4619      	mov	r1, r3
 8004140:	483a      	ldr	r0, [pc, #232]	@ (800422c <bmi2_error_codes_print_result+0x2e4>)
 8004142:	f015 f841 	bl	80191c8 <iprintf>
                "Error [%d] : Self-test already running error. It occurs when the self-test is already running and " "another has been initiated\r\n",
                rslt);
            break;
 8004146:	e03f      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_READY_FOR_DL_FAIL_ABORT:
            printf(
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	4619      	mov	r1, r3
 800414e:	4838      	ldr	r0, [pc, #224]	@ (8004230 <bmi2_error_codes_print_result+0x2e8>)
 8004150:	f015 f83a 	bl	80191c8 <iprintf>
                "Error [%d] : CRT ready for download fail abort error. It occurs when download in CRT fails due to wrong " "address location\r\n",
                rslt);
            break;
 8004154:	e038      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DL_ERROR:
            printf(
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	4619      	mov	r1, r3
 800415c:	4835      	ldr	r0, [pc, #212]	@ (8004234 <bmi2_error_codes_print_result+0x2ec>)
 800415e:	f015 f833 	bl	80191c8 <iprintf>
                "Error [%d] : Download error. It occurs when write length exceeds that of the maximum burst length\r\n",
                rslt);
            break;
 8004162:	e031      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_PRECON_ERROR:
            printf(
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	4619      	mov	r1, r3
 800416a:	4833      	ldr	r0, [pc, #204]	@ (8004238 <bmi2_error_codes_print_result+0x2f0>)
 800416c:	f015 f82c 	bl	80191c8 <iprintf>
                "Error [%d] : Pre-conditional error. It occurs when precondition to start the feature was not " "completed\r\n",
                rslt);
            break;
 8004170:	e02a      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ABORT_ERROR:
            printf("Error [%d] : Abort error. It occurs when the device was shaken during CRT test\r\n", rslt);
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	4619      	mov	r1, r3
 8004178:	4830      	ldr	r0, [pc, #192]	@ (800423c <bmi2_error_codes_print_result+0x2f4>)
 800417a:	f015 f825 	bl	80191c8 <iprintf>
            break;
 800417e:	e023      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_WRITE_CYCLE_ONGOING:
            printf(
 8004180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004184:	4619      	mov	r1, r3
 8004186:	482e      	ldr	r0, [pc, #184]	@ (8004240 <bmi2_error_codes_print_result+0x2f8>)
 8004188:	f015 f81e 	bl	80191c8 <iprintf>
                "Error [%d] : Write cycle ongoing error. It occurs when the write cycle is already running and another " "has been initiated\r\n",
                rslt);
            break;
 800418c:	e01c      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_NOT_RUNING:
            printf(
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	4619      	mov	r1, r3
 8004194:	482b      	ldr	r0, [pc, #172]	@ (8004244 <bmi2_error_codes_print_result+0x2fc>)
 8004196:	f015 f817 	bl	80191c8 <iprintf>
                "Error [%d] : Self-test is not running error. It occurs when self-test running is disabled while it's " "running\r\n",
                rslt);
            break;
 800419a:	e015      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DATA_RDY_INT_FAILED:
            printf(
 800419c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a0:	4619      	mov	r1, r3
 80041a2:	4829      	ldr	r0, [pc, #164]	@ (8004248 <bmi2_error_codes_print_result+0x300>)
 80041a4:	f015 f810 	bl	80191c8 <iprintf>
                "Error [%d] : Data ready interrupt error. It occurs when the sample count exceeds the FOC sample limit " "and data ready status is not updated\r\n",
                rslt);
            break;
 80041a8:	e00e      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_FOC_POSITION:
            printf(
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4826      	ldr	r0, [pc, #152]	@ (800424c <bmi2_error_codes_print_result+0x304>)
 80041b2:	f015 f809 	bl	80191c8 <iprintf>
                "Error [%d] : Invalid FOC position error. It occurs when average FOC data is obtained for the wrong" " axes\r\n",
                rslt);
            break;
 80041b6:	e007      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>

        default:
            printf("Error [%d] : Unknown error code\r\n", rslt);
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041bc:	4619      	mov	r1, r3
 80041be:	4824      	ldr	r0, [pc, #144]	@ (8004250 <bmi2_error_codes_print_result+0x308>)
 80041c0:	f015 f802 	bl	80191c8 <iprintf>
            break;
 80041c4:	e000      	b.n	80041c8 <bmi2_error_codes_print_result+0x280>
            break;
 80041c6:	bf00      	nop
    }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	0801c4c0 	.word	0x0801c4c0
 80041d4:	0801c4dc 	.word	0x0801c4dc
 80041d8:	0801c500 	.word	0x0801c500
 80041dc:	0801c594 	.word	0x0801c594
 80041e0:	0801c624 	.word	0x0801c624
 80041e4:	0801c684 	.word	0x0801c684
 80041e8:	0801c6fc 	.word	0x0801c6fc
 80041ec:	0801c76c 	.word	0x0801c76c
 80041f0:	0801c7ec 	.word	0x0801c7ec
 80041f4:	0801c8b4 	.word	0x0801c8b4
 80041f8:	0801c974 	.word	0x0801c974
 80041fc:	0801ca30 	.word	0x0801ca30
 8004200:	0801cb08 	.word	0x0801cb08
 8004204:	0801cb84 	.word	0x0801cb84
 8004208:	0801cc00 	.word	0x0801cc00
 800420c:	0801cc74 	.word	0x0801cc74
 8004210:	0801ccf0 	.word	0x0801ccf0
 8004214:	0801cd64 	.word	0x0801cd64
 8004218:	0801cdec 	.word	0x0801cdec
 800421c:	0801ce5c 	.word	0x0801ce5c
 8004220:	0801cec8 	.word	0x0801cec8
 8004224:	0801cf1c 	.word	0x0801cf1c
 8004228:	0801cf74 	.word	0x0801cf74
 800422c:	0801cfb8 	.word	0x0801cfb8
 8004230:	0801d038 	.word	0x0801d038
 8004234:	0801d0b4 	.word	0x0801d0b4
 8004238:	0801d118 	.word	0x0801d118
 800423c:	0801d184 	.word	0x0801d184
 8004240:	0801d1d8 	.word	0x0801d1d8
 8004244:	0801d254 	.word	0x0801d254
 8004248:	0801d2c4 	.word	0x0801d2c4
 800424c:	0801d354 	.word	0x0801d354
 8004250:	0801d3c0 	.word	0x0801d3c0

08004254 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	4603      	mov	r3, r0
 8004260:	73fb      	strb	r3, [r7, #15]
 8004262:	4613      	mov	r3, r2
 8004264:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <bmi160_get_regs+0x24>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8004278:	23ff      	movs	r3, #255	@ 0xff
 800427a:	75fb      	strb	r3, [r7, #23]
 800427c:	e017      	b.n	80042ae <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 800427e:	89bb      	ldrh	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8004284:	23f4      	movs	r3, #244	@ 0xf4
 8004286:	75fb      	strb	r3, [r7, #23]
 8004288:	e011      	b.n	80042ae <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	789b      	ldrb	r3, [r3, #2]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d103      	bne.n	800429a <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004298:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69dc      	ldr	r4, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7858      	ldrb	r0, [r3, #1]
 80042a2:	89bb      	ldrh	r3, [r7, #12]
 80042a4:	7bf9      	ldrb	r1, [r7, #15]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	47a0      	blx	r4
 80042aa:	4603      	mov	r3, r0
 80042ac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80042ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd90      	pop	{r4, r7, pc}

080042ba <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80042ba:	b590      	push	{r4, r7, lr}
 80042bc:	b087      	sub	sp, #28
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	4613      	mov	r3, r2
 80042ca:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <bmi160_set_regs+0x28>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80042e2:	23ff      	movs	r3, #255	@ 0xff
 80042e4:	75fb      	strb	r3, [r7, #23]
 80042e6:	e045      	b.n	8004374 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80042e8:	89bb      	ldrh	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80042ee:	23f4      	movs	r3, #244	@ 0xf4
 80042f0:	75fb      	strb	r3, [r7, #23]
 80042f2:	e03f      	b.n	8004374 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d103      	bne.n	8004304 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004302:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7a1b      	ldrb	r3, [r3, #8]
 8004308:	2b11      	cmp	r3, #17
 800430a:	d003      	beq.n	8004314 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004310:	2b15      	cmp	r3, #21
 8004312:	d124      	bne.n	800435e <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1c      	ldr	r4, [r3, #32]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7858      	ldrb	r0, [r3, #1]
 800431c:	89bb      	ldrh	r3, [r7, #12]
 800431e:	7bf9      	ldrb	r1, [r7, #15]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	47a0      	blx	r4
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	2001      	movs	r0, #1
 800432e:	4798      	blx	r3
 8004330:	e01a      	b.n	8004368 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1c      	ldr	r4, [r3, #32]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7858      	ldrb	r0, [r3, #1]
 800433a:	7dbb      	ldrb	r3, [r7, #22]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	441a      	add	r2, r3
 8004340:	7bf9      	ldrb	r1, [r7, #15]
 8004342:	2301      	movs	r3, #1
 8004344:	47a0      	blx	r4
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	3301      	adds	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	2001      	movs	r0, #1
 8004356:	4798      	blx	r3
            for (; count < len; count++)
 8004358:	7dbb      	ldrb	r3, [r7, #22]
 800435a:	3301      	adds	r3, #1
 800435c:	75bb      	strb	r3, [r7, #22]
 800435e:	7dbb      	ldrb	r3, [r7, #22]
 8004360:	b29b      	uxth	r3, r3
 8004362:	89ba      	ldrh	r2, [r7, #12]
 8004364:	429a      	cmp	r2, r3
 8004366:	d8e4      	bhi.n	8004332 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8004368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8004370:	23fe      	movs	r3, #254	@ 0xfe
 8004372:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004378:	4618      	mov	r0, r3
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	bd90      	pop	{r4, r7, pc}

08004380 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8004388:	2303      	movs	r3, #3
 800438a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd3c 	bl	8004e0a <null_ptr_check>
 8004392:	4603      	mov	r3, r0
 8004394:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <bmi160_init+0x38>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	789b      	ldrb	r3, [r3, #2]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d108      	bne.n	80043b8 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80043a6:	f107 010d 	add.w	r1, r7, #13
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	207f      	movs	r0, #127	@ 0x7f
 80043b0:	f7ff ff50 	bl	8004254 <bmi160_get_regs>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80043b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d127      	bne.n	8004410 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80043c6:	e007      	b.n	80043d8 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	2024      	movs	r0, #36	@ 0x24
 80043d0:	f7ff ff40 	bl	8004254 <bmi160_get_regs>
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80043d8:	7bbb      	ldrb	r3, [r7, #14]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	73ba      	strb	r2, [r7, #14]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <bmi160_init+0x6a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2bd1      	cmp	r3, #209	@ 0xd1
 80043e8:	d1ee      	bne.n	80043c8 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80043ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <bmi160_init+0x8c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2bd1      	cmp	r3, #209	@ 0xd1
 80043f8:	d108      	bne.n	800440c <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	22ff      	movs	r2, #255	@ 0xff
 80043fe:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f80b 	bl	800441c <bmi160_soft_reset>
 8004406:	4603      	mov	r3, r0
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e001      	b.n	8004410 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 800440c:	23fd      	movs	r3, #253	@ 0xfd
 800440e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8004424:	23b6      	movs	r3, #182	@ 0xb6
 8004426:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <bmi160_soft_reset+0x1a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004436:	23ff      	movs	r3, #255	@ 0xff
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e024      	b.n	8004486 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 800443c:	f107 010e 	add.w	r1, r7, #14
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	207e      	movs	r0, #126	@ 0x7e
 8004446:	f7ff ff38 	bl	80042ba <bmi160_set_regs>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	2001      	movs	r0, #1
 8004454:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <bmi160_soft_reset+0x5c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	789b      	ldrb	r3, [r3, #2]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d108      	bne.n	8004478 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004466:	f107 010e 	add.w	r1, r7, #14
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	207f      	movs	r0, #127	@ 0x7f
 8004470:	f7ff fef0 	bl	8004254 <bmi160_get_regs>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8004478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fce2 	bl	8004e4a <default_param_settg>
        }
    }

    return rslt;
 8004486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <bmi160_set_sens_conf+0x1a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80044ac:	23ff      	movs	r3, #255	@ 0xff
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e01f      	b.n	80044f2 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fcf3 	bl	8004e9e <set_accel_conf>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80044bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fe2f 	bl	8005128 <set_gyro_conf>
 80044ca:	4603      	mov	r3, r0
 80044cc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80044ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10d      	bne.n	80044f2 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f811 	bl	80044fe <bmi160_set_power_mode>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80044e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fde8 	bl	80050be <check_invalid_settg>
 80044ee:	4603      	mov	r3, r0
 80044f0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80044f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <bmi160_set_power_mode+0x1a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004518:	23ff      	movs	r3, #255	@ 0xff
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e00d      	b.n	800453a <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 ff0c 	bl	800533c <set_accel_pwr>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 ff9a 	bl	800546a <set_gyro_pwr>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4603      	mov	r3, r0
 8004554:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8004566:	7d7b      	ldrb	r3, [r7, #21]
 8004568:	109b      	asrs	r3, r3, #2
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8004572:	7d7b      	ldrb	r3, [r7, #21]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 800457a:	7d3b      	ldrb	r3, [r7, #20]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8004580:	2303      	movs	r3, #3
 8004582:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d03c      	beq.n	8004604 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 800458a:	7d7b      	ldrb	r3, [r7, #21]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d024      	beq.n	80045da <bmi160_get_sensor_data+0x94>
 8004590:	2b03      	cmp	r3, #3
 8004592:	dc34      	bgt.n	80045fe <bmi160_get_sensor_data+0xb8>
 8004594:	2b01      	cmp	r3, #1
 8004596:	d002      	beq.n	800459e <bmi160_get_sensor_data+0x58>
 8004598:	2b02      	cmp	r3, #2
 800459a:	d00f      	beq.n	80045bc <bmi160_get_sensor_data+0x76>
 800459c:	e02f      	b.n	80045fe <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 80045a4:	23ff      	movs	r3, #255	@ 0xff
 80045a6:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 80045a8:	e02e      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 80045aa:	7dbb      	ldrb	r3, [r7, #22]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 ff9e 	bl	80054f2 <get_accel_data>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]
                break;
 80045ba:	e025      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 80045c2:	23ff      	movs	r3, #255	@ 0xff
 80045c4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 80045c6:	e01f      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80045c8:	7dbb      	ldrb	r3, [r7, #22]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f85b 	bl	800568a <get_gyro_data>
 80045d4:	4603      	mov	r3, r0
 80045d6:	75fb      	strb	r3, [r7, #23]
                break;
 80045d8:	e016      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <bmi160_get_sensor_data+0xa0>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 80045e6:	23ff      	movs	r3, #255	@ 0xff
 80045e8:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 80045ea:	e00d      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 80045ec:	7db8      	ldrb	r0, [r7, #22]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	f001 f997 	bl	8005926 <get_accel_gyro_data>
 80045f8:	4603      	mov	r3, r0
 80045fa:	75fb      	strb	r3, [r7, #23]
                break;
 80045fc:	e004      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 80045fe:	23fb      	movs	r3, #251	@ 0xfb
 8004600:	75fb      	strb	r3, [r7, #23]
                break;
 8004602:	e001      	b.n	8004608 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8004604:	23ff      	movs	r3, #255	@ 0xff
 8004606:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	2b0d      	cmp	r3, #13
 8004628:	d879      	bhi.n	800471e <bmi160_set_int_config+0x10a>
 800462a:	a201      	add	r2, pc, #4	@ (adr r2, 8004630 <bmi160_set_int_config+0x1c>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004669 	.word	0x08004669
 8004634:	08004677 	.word	0x08004677
 8004638:	080046a1 	.word	0x080046a1
 800463c:	08004693 	.word	0x08004693
 8004640:	08004693 	.word	0x08004693
 8004644:	080046af 	.word	0x080046af
 8004648:	080046bd 	.word	0x080046bd
 800464c:	080046d9 	.word	0x080046d9
 8004650:	080046cb 	.word	0x080046cb
 8004654:	08004685 	.word	0x08004685
 8004658:	080046e7 	.word	0x080046e7
 800465c:	080046f5 	.word	0x080046f5
 8004660:	08004703 	.word	0x08004703
 8004664:	08004711 	.word	0x08004711
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f963 	bl	8004936 <set_accel_any_motion_int>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]
            break;
 8004674:	e054      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8004676:	6839      	ldr	r1, [r7, #0]
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f9f6 	bl	8004a6a <set_accel_sig_motion_int>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]
            break;
 8004682:	e04d      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa1d 	bl	8004ac6 <set_accel_no_motion_int>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
            break;
 8004690:	e046      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f97c 	bl	8004992 <set_accel_tap_int>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
            break;
 800469e:	e03f      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa3d 	bl	8004b22 <set_accel_step_detect_int>
 80046a8:	4603      	mov	r3, r0
 80046aa:	73fb      	strb	r3, [r7, #15]
            break;
 80046ac:	e038      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa77 	bl	8004ba4 <set_accel_orientation_int>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73fb      	strb	r3, [r7, #15]
            break;
 80046ba:	e031      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fab1 	bl	8004c26 <set_accel_flat_detect_int>
 80046c4:	4603      	mov	r3, r0
 80046c6:	73fb      	strb	r3, [r7, #15]
            break;
 80046c8:	e02a      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 faeb 	bl	8004ca8 <set_accel_low_g_int>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
            break;
 80046d6:	e023      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fb2f 	bl	8004d3e <set_accel_high_g_int>
 80046e0:	4603      	mov	r3, r0
 80046e2:	73fb      	strb	r3, [r7, #15]
            break;
 80046e4:	e01c      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f98b 	bl	8004a04 <set_accel_gyro_data_ready_int>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]
            break;
 80046f2:	e015      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f002 fd7d 	bl	80071f6 <set_fifo_full_int>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
            break;
 8004700:	e00e      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f002 fdde 	bl	80072c6 <set_fifo_watermark_int>
 800470a:	4603      	mov	r3, r0
 800470c:	73fb      	strb	r3, [r7, #15]
            break;
 800470e:	e007      	b.n	8004720 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fb5e 	bl	8004dd4 <set_intr_pin_config>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
            break;
 800471c:	e000      	b.n	8004720 <bmi160_set_int_config+0x10c>
        default:
            break;
 800471e:	bf00      	nop
    }

    return rslt;
 8004720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb66 	bl	8004e0a <null_ptr_check>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8004742:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 800474a:	23ff      	movs	r3, #255	@ 0xff
 800474c:	75fb      	strb	r3, [r7, #23]
 800474e:	e06b      	b.n	8004828 <bmi160_start_foc+0xfc>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f002 fe3f 	bl	80073d6 <configure_offset_enable>
 8004758:	4603      	mov	r3, r0
 800475a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 800475c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d161      	bne.n	8004828 <bmi160_start_foc+0xfc>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004764:	f107 0116 	add.w	r1, r7, #22
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	2069      	movs	r0, #105	@ 0x69
 800476e:	f7ff fd71 	bl	8004254 <bmi160_get_regs>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8004776:	7dbb      	ldrb	r3, [r7, #22]
 8004778:	b25b      	sxtb	r3, r3
 800477a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800477e:	b25a      	sxtb	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	b25b      	sxtb	r3, r3
 8004786:	019b      	lsls	r3, r3, #6
 8004788:	b25b      	sxtb	r3, r3
 800478a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478e:	b25b      	sxtb	r3, r3
 8004790:	4313      	orrs	r3, r2
 8004792:	b25b      	sxtb	r3, r3
 8004794:	b2db      	uxtb	r3, r3
 8004796:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 8004798:	7dbb      	ldrb	r3, [r7, #22]
 800479a:	b25b      	sxtb	r3, r3
 800479c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80047a0:	b25a      	sxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	b25b      	sxtb	r3, r3
 80047ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80047ba:	7dbb      	ldrb	r3, [r7, #22]
 80047bc:	b25b      	sxtb	r3, r3
 80047be:	f023 030c 	bic.w	r3, r3, #12
 80047c2:	b25a      	sxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	789b      	ldrb	r3, [r3, #2]
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b25b      	sxtb	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80047dc:	7dbb      	ldrb	r3, [r7, #22]
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f023 0303 	bic.w	r3, r3, #3
 80047e4:	b25a      	sxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	b25b      	sxtb	r3, r3
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	4313      	orrs	r3, r2
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 80047fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d112      	bne.n	8004828 <bmi160_start_foc+0xfc>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004802:	f107 0116 	add.w	r1, r7, #22
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	2069      	movs	r0, #105	@ 0x69
 800480c:	f7ff fd55 	bl	80042ba <bmi160_set_regs>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8004814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d105      	bne.n	8004828 <bmi160_start_foc+0xfc>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	68b8      	ldr	r0, [r7, #8]
 8004820:	f002 fe25 	bl	800746e <trigger_foc>
 8004824:	4603      	mov	r3, r0
 8004826:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800483e:	6838      	ldr	r0, [r7, #0]
 8004840:	f000 fae3 	bl	8004e0a <null_ptr_check>
 8004844:	4603      	mov	r3, r0
 8004846:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004848:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004850:	23ff      	movs	r3, #255	@ 0xff
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e069      	b.n	800492a <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004856:	f107 010c 	add.w	r1, r7, #12
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2207      	movs	r2, #7
 800485e:	2071      	movs	r0, #113	@ 0x71
 8004860:	f7ff fcf8 	bl	8004254 <bmi160_get_regs>
 8004864:	4603      	mov	r3, r0
 8004866:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004868:	7b3b      	ldrb	r3, [r7, #12]
 800486a:	b25a      	sxtb	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8004870:	7b7b      	ldrb	r3, [r7, #13]
 8004872:	b25a      	sxtb	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004878:	7bbb      	ldrb	r3, [r7, #14]
 800487a:	b25a      	sxtb	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004884:	7cbb      	ldrb	r3, [r7, #18]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800488c:	7f7b      	ldrb	r3, [r7, #29]
 800488e:	b21b      	sxth	r3, r3
 8004890:	039b      	lsls	r3, r3, #14
 8004892:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004894:	7fbb      	ldrb	r3, [r7, #30]
 8004896:	b21b      	sxth	r3, r3
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800489c:	8b7a      	ldrh	r2, [r7, #26]
 800489e:	8b3b      	ldrh	r3, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80048a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da00      	bge.n	80048ae <bmi160_get_offsets+0x7a>
 80048ac:	333f      	adds	r3, #63	@ 0x3f
 80048ae:	119b      	asrs	r3, r3, #6
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80048b6:	7c3b      	ldrb	r3, [r7, #16]
 80048b8:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80048ba:	7cbb      	ldrb	r3, [r7, #18]
 80048bc:	109b      	asrs	r3, r3, #2
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80048c6:	7f7b      	ldrb	r3, [r7, #29]
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	039b      	lsls	r3, r3, #14
 80048cc:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80048ce:	7fbb      	ldrb	r3, [r7, #30]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	019b      	lsls	r3, r3, #6
 80048d4:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80048d6:	8b7a      	ldrh	r2, [r7, #26]
 80048d8:	8b3b      	ldrh	r3, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80048de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	da00      	bge.n	80048e8 <bmi160_get_offsets+0xb4>
 80048e6:	333f      	adds	r3, #63	@ 0x3f
 80048e8:	119b      	asrs	r3, r3, #6
 80048ea:	b21a      	sxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 80048f0:	7c7b      	ldrb	r3, [r7, #17]
 80048f2:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 80048f4:	7cbb      	ldrb	r3, [r7, #18]
 80048f6:	111b      	asrs	r3, r3, #4
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004900:	7f7b      	ldrb	r3, [r7, #29]
 8004902:	b21b      	sxth	r3, r3
 8004904:	039b      	lsls	r3, r3, #14
 8004906:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004908:	7fbb      	ldrb	r3, [r7, #30]
 800490a:	b21b      	sxth	r3, r3
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004910:	8b7a      	ldrh	r2, [r7, #26]
 8004912:	8b3b      	ldrh	r3, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004918:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800491c:	2b00      	cmp	r3, #0
 800491e:	da00      	bge.n	8004922 <bmi160_get_offsets+0xee>
 8004920:	333f      	adds	r3, #63	@ 0x3f
 8004922:	119b      	asrs	r3, r3, #6
 8004924:	b21a      	sxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 800492a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f000 fa62 	bl	8004e0a <null_ptr_check>
 8004946:	4603      	mov	r3, r0
 8004948:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800494a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <set_accel_any_motion_int+0x22>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004958:	23ff      	movs	r3, #255	@ 0xff
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e013      	b.n	8004986 <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	68b8      	ldr	r0, [r7, #8]
 8004968:	f001 f920 	bl	8005bac <enable_accel_any_motion_int>
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 fb4b 	bl	8006018 <config_any_motion_int_settg>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	f000 fa34 	bl	8004e0a <null_ptr_check>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80049a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <set_accel_tap_int+0x22>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80049b4:	23ff      	movs	r3, #255	@ 0xff
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	e01e      	b.n	80049f8 <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fe8d 	bl	80066e4 <enable_tap_int>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d110      	bne.n	80049f8 <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9fb 	bl	8004dd4 <set_intr_pin_config>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80049e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fecd 	bl	800678e <config_tap_int_settg>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80049f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004a0e:	6838      	ldr	r0, [r7, #0]
 8004a10:	f000 f9fb 	bl	8004e0a <null_ptr_check>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <set_accel_gyro_data_ready_int+0x22>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004a26:	23ff      	movs	r3, #255	@ 0xff
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e018      	b.n	8004a5e <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8004a2c:	6838      	ldr	r0, [r7, #0]
 8004a2e:	f001 fb2c 	bl	800608a <enable_data_ready_int>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9c7 	bl	8004dd4 <set_intr_pin_config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d105      	bne.n	8004a5e <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 f9df 	bl	8005e18 <map_hardware_interrupt>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004a74:	6838      	ldr	r0, [r7, #0]
 8004a76:	f000 f9c8 	bl	8004e0a <null_ptr_check>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <set_accel_sig_motion_int+0x22>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004a8c:	23ff      	movs	r3, #255	@ 0xff
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	e013      	b.n	8004aba <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f001 fc4d 	bl	800633a <enable_sig_motion_int>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f001 fc83 	bl	80063bc <config_sig_motion_int_settg>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004ad0:	6838      	ldr	r0, [r7, #0]
 8004ad2:	f000 f99a 	bl	8004e0a <null_ptr_check>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <set_accel_no_motion_int+0x22>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ae8:	23ff      	movs	r3, #255	@ 0xff
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e013      	b.n	8004b16 <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	68b8      	ldr	r0, [r7, #8]
 8004af8:	f001 faf4 	bl	80060e4 <enable_no_motion_int>
 8004afc:	4603      	mov	r3, r0
 8004afe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 fb3e 	bl	800618e <config_no_motion_int_settg>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004b2c:	6838      	ldr	r0, [r7, #0]
 8004b2e:	f000 f96c 	bl	8004e0a <null_ptr_check>
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <set_accel_step_detect_int+0x22>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004b44:	23ff      	movs	r3, #255	@ 0xff
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e026      	b.n	8004b98 <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	68b8      	ldr	r0, [r7, #8]
 8004b54:	f001 fd0b 	bl	800656e <enable_step_detect_int>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d119      	bne.n	8004b98 <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f934 	bl	8004dd4 <set_intr_pin_config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10f      	bne.n	8004b98 <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f001 f8b8 	bl	8005cf0 <map_feature_interrupt>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	68b8      	ldr	r0, [r7, #8]
 8004b90:	f001 fd27 	bl	80065e2 <config_step_detect>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004bae:	6838      	ldr	r0, [r7, #0]
 8004bb0:	f000 f92b 	bl	8004e0a <null_ptr_check>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <set_accel_orientation_int+0x22>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004bc6:	23ff      	movs	r3, #255	@ 0xff
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	e026      	b.n	8004c1a <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	68b8      	ldr	r0, [r7, #8]
 8004bd6:	f001 fee1 	bl	800699c <enable_orient_int>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f8f3 	bl	8004dd4 <set_intr_pin_config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 f877 	bl	8005cf0 <map_feature_interrupt>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8004c0e:	6839      	ldr	r1, [r7, #0]
 8004c10:	68b8      	ldr	r0, [r7, #8]
 8004c12:	f001 fefd 	bl	8006a10 <config_orient_int_settg>
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f000 f8ea 	bl	8004e0a <null_ptr_check>
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <set_accel_flat_detect_int+0x22>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004c48:	23ff      	movs	r3, #255	@ 0xff
 8004c4a:	73fb      	strb	r3, [r7, #15]
 8004c4c:	e026      	b.n	8004c9c <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f001 ff6d 	bl	8006b36 <enable_flat_int>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d119      	bne.n	8004c9c <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8b2 	bl	8004dd4 <set_intr_pin_config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f836 	bl	8005cf0 <map_feature_interrupt>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f001 ff86 	bl	8006ba4 <config_flat_int_settg>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004cb2:	6838      	ldr	r0, [r7, #0]
 8004cb4:	f000 f8a9 	bl	8004e0a <null_ptr_check>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <set_accel_low_g_int+0x22>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004cca:	23ff      	movs	r3, #255	@ 0xff
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	e030      	b.n	8004d32 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	68b8      	ldr	r0, [r7, #8]
 8004cda:	f001 ffc0 	bl	8006c5e <enable_low_g_int>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d123      	bne.n	8004d32 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f871 	bl	8004dd4 <set_intr_pin_config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d119      	bne.n	8004d32 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fff5 	bl	8005cf0 <map_feature_interrupt>
 8004d06:	4603      	mov	r3, r0
 8004d08:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	68b8      	ldr	r0, [r7, #8]
 8004d16:	f001 ffdc 	bl	8006cd2 <config_low_g_data_src>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d105      	bne.n	8004d32 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	68b8      	ldr	r0, [r7, #8]
 8004d2a:	f002 f809 	bl	8006d40 <config_low_g_int_settg>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004d48:	6838      	ldr	r0, [r7, #0]
 8004d4a:	f000 f85e 	bl	8004e0a <null_ptr_check>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <set_accel_high_g_int+0x22>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004d60:	23ff      	movs	r3, #255	@ 0xff
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e030      	b.n	8004dc8 <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	68b8      	ldr	r0, [r7, #8]
 8004d70:	f002 f83a 	bl	8006de8 <enable_high_g_int>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d123      	bne.n	8004dc8 <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f826 	bl	8004dd4 <set_intr_pin_config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d119      	bne.n	8004dc8 <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 ffaa 	bl	8005cf0 <map_feature_interrupt>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10f      	bne.n	8004dc8 <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	68b8      	ldr	r0, [r7, #8]
 8004dac:	f002 f879 	bl	8006ea2 <config_high_g_data_src>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8004db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f002 f8a6 	bl	8006f10 <config_high_g_int_settg>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 f8d7 	bl	8006f94 <config_int_out_ctrl>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f002 f999 	bl	800712c <config_int_latch>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <null_ptr_check+0x26>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <null_ptr_check+0x26>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <null_ptr_check+0x26>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8004e30:	23ff      	movs	r3, #255	@ 0xff
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e001      	b.n	8004e3a <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2210      	movs	r2, #16
 8004e62:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2203      	movs	r2, #3
 8004e68:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2208      	movs	r2, #8
 8004e74:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2214      	movs	r2, #20
 8004e7a:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6852      	ldr	r2, [r2, #4]
 8004e88:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68d2      	ldr	r2, [r2, #12]
 8004e90:	611a      	str	r2, [r3, #16]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8004eaa:	f107 030c 	add.w	r3, r7, #12
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f833 	bl	8004f1c <check_accel_config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d126      	bne.n	8004f10 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8004ec2:	f107 010c 	add.w	r1, r7, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2040      	movs	r0, #64	@ 0x40
 8004ecc:	f7ff f9f5 	bl	80042ba <bmi160_set_regs>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d119      	bne.n	8004f10 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	795a      	ldrb	r2, [r3, #5]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	79da      	ldrb	r2, [r3, #7]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	1c59      	adds	r1, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2041      	movs	r0, #65	@ 0x41
 8004ef8:	f7ff f9df 	bl	80042ba <bmi160_set_regs>
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	799a      	ldrb	r2, [r3, #6]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8004f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	2040      	movs	r0, #64	@ 0x40
 8004f2e:	f7ff f991 	bl	8004254 <bmi160_get_regs>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11b      	bne.n	8004f76 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f81e 	bl	8004f82 <process_accel_odr>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d111      	bne.n	8004f76 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f848 	bl	8004fea <process_accel_bw>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f872 	bl	8005056 <process_accel_range>
 8004f72:	4603      	mov	r3, r0
 8004f74:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	795b      	ldrb	r3, [r3, #5]
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	d81a      	bhi.n	8004fd6 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	795a      	ldrb	r2, [r3, #5]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	7a5b      	ldrb	r3, [r3, #9]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d016      	beq.n	8004fda <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	795b      	ldrb	r3, [r3, #5]
 8004fb0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f023 030f 	bic.w	r3, r3, #15
 8004fba:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8004fbc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	b25a      	sxtb	r2, r3
 8004fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e001      	b.n	8004fda <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8004fd6:	23fc      	movs	r3, #252	@ 0xfc
 8004fd8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	79db      	ldrb	r3, [r3, #7]
 8005004:	2b07      	cmp	r3, #7
 8005006:	d81c      	bhi.n	8005042 <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	79da      	ldrb	r2, [r3, #7]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	7adb      	ldrb	r3, [r3, #11]
 8005010:	429a      	cmp	r2, r3
 8005012:	d018      	beq.n	8005046 <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	79db      	ldrb	r3, [r3, #7]
 8005018:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005022:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8005024:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	b25b      	sxtb	r3, r3
 800502c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005030:	b25a      	sxtb	r2, r3
 8005032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005036:	4313      	orrs	r3, r2
 8005038:	b25b      	sxtb	r3, r3
 800503a:	b2da      	uxtb	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	e001      	b.n	8005046 <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005042:	23fc      	movs	r3, #252	@ 0xfc
 8005044:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	799b      	ldrb	r3, [r3, #6]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d81a      	bhi.n	80050aa <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	799a      	ldrb	r2, [r3, #6]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	7a9b      	ldrb	r3, [r3, #10]
 800507c:	429a      	cmp	r2, r3
 800507e:	d016      	beq.n	80050ae <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	799b      	ldrb	r3, [r3, #6]
 8005084:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f023 030f 	bic.w	r3, r3, #15
 800508e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8005090:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	b25a      	sxtb	r2, r3
 800509a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800509e:	4313      	orrs	r3, r2
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e001      	b.n	80050ae <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80050aa:	23fc      	movs	r3, #252	@ 0xfc
 80050ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80050ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80050ca:	f107 010e 	add.w	r1, r7, #14
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	2002      	movs	r0, #2
 80050d4:	f7ff f8be 	bl	8004254 <bmi160_get_regs>
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 80050dc:	7bbb      	ldrb	r3, [r7, #14]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 80050ee:	7bbb      	ldrb	r3, [r7, #14]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d102      	bne.n	80050fa <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 80050f4:	23fa      	movs	r3, #250	@ 0xfa
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e010      	b.n	800511c <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d102      	bne.n	8005106 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8005100:	23f9      	movs	r3, #249	@ 0xf9
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	e00a      	b.n	800511c <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8005106:	7bbb      	ldrb	r3, [r7, #14]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d102      	bne.n	8005112 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 800510c:	23f8      	movs	r3, #248	@ 0xf8
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	e004      	b.n	800511c <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8005112:	7bbb      	ldrb	r3, [r7, #14]
 8005114:	2b07      	cmp	r3, #7
 8005116:	d101      	bne.n	800511c <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8005118:	23f7      	movs	r3, #247	@ 0xf7
 800511a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8005130:	2300      	movs	r3, #0
 8005132:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f833 	bl	80051a6 <check_gyro_config>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d126      	bne.n	800519a <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 800514c:	f107 010c 	add.w	r1, r7, #12
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	2042      	movs	r0, #66	@ 0x42
 8005156:	f7ff f8b0 	bl	80042ba <bmi160_set_regs>
 800515a:	4603      	mov	r3, r0
 800515c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800515e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d119      	bne.n	800519a <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7b5a      	ldrb	r2, [r3, #13]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	7bda      	ldrb	r2, [r3, #15]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8005176:	f107 030c 	add.w	r3, r7, #12
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	2043      	movs	r0, #67	@ 0x43
 8005182:	f7ff f89a 	bl	80042ba <bmi160_set_regs>
 8005186:	4603      	mov	r3, r0
 8005188:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800518a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	7b9a      	ldrb	r2, [r3, #14]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 800519a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2202      	movs	r2, #2
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	2042      	movs	r0, #66	@ 0x42
 80051b8:	f7ff f84c 	bl	8004254 <bmi160_get_regs>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80051c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11b      	bne.n	8005200 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f81e 	bl	800520c <process_gyro_odr>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80051d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d111      	bne.n	8005200 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f848 	bl	8005274 <process_gyro_bw>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80051e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3301      	adds	r3, #1
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f86c 	bl	80052d4 <process_gyro_range>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	7b5b      	ldrb	r3, [r3, #13]
 8005226:	2b0d      	cmp	r3, #13
 8005228:	d81a      	bhi.n	8005260 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	7b5a      	ldrb	r2, [r3, #13]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	7c5b      	ldrb	r3, [r3, #17]
 8005232:	429a      	cmp	r2, r3
 8005234:	d016      	beq.n	8005264 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7b5b      	ldrb	r3, [r3, #13]
 800523a:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f023 030f 	bic.w	r3, r3, #15
 8005244:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8005246:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	b25a      	sxtb	r2, r3
 8005250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005254:	4313      	orrs	r3, r2
 8005256:	b25b      	sxtb	r3, r3
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e001      	b.n	8005264 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005260:	23fc      	movs	r3, #252	@ 0xfc
 8005262:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	7bdb      	ldrb	r3, [r3, #15]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d816      	bhi.n	80052c0 <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	7bdb      	ldrb	r3, [r3, #15]
 8005296:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80052a0:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 80052a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052ae:	b25a      	sxtb	r2, r3
 80052b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e001      	b.n	80052c4 <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80052c0:	23fc      	movs	r3, #252	@ 0xfc
 80052c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80052c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	7b9b      	ldrb	r3, [r3, #14]
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d81a      	bhi.n	8005328 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	7b9a      	ldrb	r2, [r3, #14]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	7c9b      	ldrb	r3, [r3, #18]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d016      	beq.n	800532c <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	7b9b      	ldrb	r3, [r3, #14]
 8005302:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f023 0307 	bic.w	r3, r3, #7
 800530c:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 800530e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	b25a      	sxtb	r2, r3
 8005318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800531c:	4313      	orrs	r3, r2
 800531e:	b25b      	sxtb	r3, r3
 8005320:	b2da      	uxtb	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e001      	b.n	800532c <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005328:	23fc      	movs	r3, #252	@ 0xfc
 800532a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800532c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	791b      	ldrb	r3, [r3, #4]
 8005350:	2b0f      	cmp	r3, #15
 8005352:	d92b      	bls.n	80053ac <set_accel_pwr+0x70>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	2b12      	cmp	r3, #18
 800535a:	d827      	bhi.n	80053ac <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	791a      	ldrb	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7a1b      	ldrb	r3, [r3, #8]
 8005364:	429a      	cmp	r2, r3
 8005366:	d024      	beq.n	80053b2 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8005368:	f107 030e 	add.w	r3, r7, #14
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f826 	bl	80053c0 <process_under_sampling>
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d118      	bne.n	80053b2 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1d19      	adds	r1, r3, #4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	207e      	movs	r0, #126	@ 0x7e
 800538a:	f7fe ff96 	bl	80042ba <bmi160_set_regs>
 800538e:	4603      	mov	r3, r0
 8005390:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7a1b      	ldrb	r3, [r3, #8]
 8005396:	2b10      	cmp	r3, #16
 8005398:	d103      	bne.n	80053a2 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539e:	2005      	movs	r0, #5
 80053a0:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	791a      	ldrb	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80053aa:	e002      	b.n	80053b2 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80053ac:	23f3      	movs	r3, #243	@ 0xf3
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	e000      	b.n	80053b4 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80053b2:	bf00      	nop
    }

    return rslt;
 80053b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80053ce:	2300      	movs	r3, #0
 80053d0:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2201      	movs	r2, #1
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	2040      	movs	r0, #64	@ 0x40
 80053da:	f7fe ff3b 	bl	8004254 <bmi160_get_regs>
 80053de:	4603      	mov	r3, r0
 80053e0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d139      	bne.n	800545e <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	791b      	ldrb	r3, [r3, #4]
 80053ee:	2b12      	cmp	r3, #18
 80053f0:	d120      	bne.n	8005434 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053fa:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80053fc:	7bbb      	ldrb	r3, [r7, #14]
 80053fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005402:	b2da      	uxtb	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	2040      	movs	r0, #64	@ 0x40
 8005410:	f7fe ff53 	bl	80042ba <bmi160_set_regs>
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8005418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11e      	bne.n	800545e <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8005420:	f107 010c 	add.w	r1, r7, #12
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2202      	movs	r2, #2
 8005428:	2058      	movs	r0, #88	@ 0x58
 800542a:	f7fe ff46 	bl	80042ba <bmi160_set_regs>
 800542e:	4603      	mov	r3, r0
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	e014      	b.n	800545e <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b25b      	sxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	da0f      	bge.n	800545e <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005446:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7bba      	ldrb	r2, [r7, #14]
 800544c:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	2040      	movs	r0, #64	@ 0x40
 8005456:	f7fe ff30 	bl	80042ba <bmi160_set_regs>
 800545a:	4603      	mov	r3, r0
 800545c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7b1b      	ldrb	r3, [r3, #12]
 800547a:	2b14      	cmp	r3, #20
 800547c:	d007      	beq.n	800548e <set_gyro_pwr+0x24>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7b1b      	ldrb	r3, [r3, #12]
 8005482:	2b15      	cmp	r3, #21
 8005484:	d003      	beq.n	800548e <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800548a:	2b17      	cmp	r3, #23
 800548c:	d129      	bne.n	80054e2 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	7b1a      	ldrb	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	7c1b      	ldrb	r3, [r3, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d025      	beq.n	80054e6 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f103 010c 	add.w	r1, r3, #12
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	207e      	movs	r0, #126	@ 0x7e
 80054a6:	f7fe ff08 	bl	80042ba <bmi160_set_regs>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7c1b      	ldrb	r3, [r3, #16]
 80054b2:	2b14      	cmp	r3, #20
 80054b4:	d104      	bne.n	80054c0 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	2050      	movs	r0, #80	@ 0x50
 80054bc:	4798      	blx	r3
 80054be:	e00b      	b.n	80054d8 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	7c1b      	ldrb	r3, [r3, #16]
 80054c4:	2b17      	cmp	r3, #23
 80054c6:	d107      	bne.n	80054d8 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80054cc:	2b15      	cmp	r3, #21
 80054ce:	d103      	bne.n	80054d8 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	200a      	movs	r0, #10
 80054d6:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7b1a      	ldrb	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80054e0:	e001      	b.n	80054e6 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80054e2:	23f3      	movs	r3, #243	@ 0xf3
 80054e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80054e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b08c      	sub	sp, #48	@ 0x30
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	4603      	mov	r3, r0
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 8005506:	f107 0314 	add.w	r3, r7, #20
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	b29b      	uxth	r3, r3
 8005524:	3306      	adds	r3, #6
 8005526:	b29a      	uxth	r2, r3
 8005528:	f107 0114 	add.w	r1, r7, #20
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2012      	movs	r0, #18
 8005530:	f7fe fe90 	bl	8004254 <bmi160_get_regs>
 8005534:	4603      	mov	r3, r0
 8005536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800553a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800553e:	2b00      	cmp	r3, #0
 8005540:	f040 809a 	bne.w	8005678 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8005544:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800554e:	3330      	adds	r3, #48	@ 0x30
 8005550:	443b      	add	r3, r7
 8005552:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800555a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005564:	3330      	adds	r3, #48	@ 0x30
 8005566:	443b      	add	r3, r7
 8005568:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800556c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005574:	b21b      	sxth	r3, r3
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	b21a      	sxth	r2, r3
 800557a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800557e:	b21b      	sxth	r3, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	8c3a      	ldrh	r2, [r7, #32]
 8005588:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800558a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005594:	3330      	adds	r3, #48	@ 0x30
 8005596:	443b      	add	r3, r7
 8005598:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800559c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80055a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80055aa:	3330      	adds	r3, #48	@ 0x30
 80055ac:	443b      	add	r3, r7
 80055ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80055b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80055b6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80055ba:	b21b      	sxth	r3, r3
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	b21a      	sxth	r2, r3
 80055c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	8c3a      	ldrh	r2, [r7, #32]
 80055ce:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80055d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80055da:	3330      	adds	r3, #48	@ 0x30
 80055dc:	443b      	add	r3, r7
 80055de:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80055e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80055f0:	3330      	adds	r3, #48	@ 0x30
 80055f2:	443b      	add	r3, r7
 80055f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80055f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80055fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005600:	b21b      	sxth	r3, r3
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	b21a      	sxth	r2, r3
 8005606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800560a:	b21b      	sxth	r3, r3
 800560c:	4313      	orrs	r3, r2
 800560e:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	8c3a      	ldrh	r2, [r7, #32]
 8005614:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d129      	bne.n	8005670 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 800561c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005626:	3330      	adds	r3, #48	@ 0x30
 8005628:	443b      	add	r3, r7
 800562a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800562e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005632:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800563c:	3330      	adds	r3, #48	@ 0x30
 800563e:	443b      	add	r3, r7
 8005640:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005648:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005652:	3330      	adds	r3, #48	@ 0x30
 8005654:	443b      	add	r3, r7
 8005656:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800565a:	041b      	lsls	r3, r3, #16
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800565e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	431a      	orrs	r2, r3
 8005664:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005668:	431a      	orrs	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	609a      	str	r2, [r3, #8]
 800566e:	e006      	b.n	800567e <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	e002      	b.n	800567e <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005678:	23fe      	movs	r3, #254	@ 0xfe
 800567a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800567e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005682:	4618      	mov	r0, r3
 8005684:	3730      	adds	r7, #48	@ 0x30
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b08c      	sub	sp, #48	@ 0x30
 800568e:	af00      	add	r7, sp, #0
 8005690:	4603      	mov	r3, r0
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800569e:	f107 0310 	add.w	r3, r7, #16
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d17e      	bne.n	80057c0 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80056c2:	f107 0110 	add.w	r1, r7, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2206      	movs	r2, #6
 80056ca:	200c      	movs	r0, #12
 80056cc:	f7fe fdc2 	bl	8004254 <bmi160_get_regs>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80056d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d16c      	bne.n	80057b8 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80056de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056e8:	3330      	adds	r3, #48	@ 0x30
 80056ea:	443b      	add	r3, r7
 80056ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80056f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056fe:	3330      	adds	r3, #48	@ 0x30
 8005700:	443b      	add	r3, r7
 8005702:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005706:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800570a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800570e:	b21b      	sxth	r3, r3
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	b21a      	sxth	r2, r3
 8005714:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005718:	b21b      	sxth	r3, r3
 800571a:	4313      	orrs	r3, r2
 800571c:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	8c3a      	ldrh	r2, [r7, #32]
 8005722:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005724:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800572e:	3330      	adds	r3, #48	@ 0x30
 8005730:	443b      	add	r3, r7
 8005732:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800573a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005744:	3330      	adds	r3, #48	@ 0x30
 8005746:	443b      	add	r3, r7
 8005748:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800574c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005750:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005754:	b21b      	sxth	r3, r3
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800575e:	b21b      	sxth	r3, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	8c3a      	ldrh	r2, [r7, #32]
 8005768:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800576a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005774:	3330      	adds	r3, #48	@ 0x30
 8005776:	443b      	add	r3, r7
 8005778:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800577c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005780:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800578a:	3330      	adds	r3, #48	@ 0x30
 800578c:	443b      	add	r3, r7
 800578e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005792:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005796:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800579a:	b21b      	sxth	r3, r3
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	b21a      	sxth	r2, r3
 80057a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057a4:	b21b      	sxth	r3, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	8c3a      	ldrh	r2, [r7, #32]
 80057ae:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	e0b0      	b.n	800591a <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80057b8:	23fe      	movs	r3, #254	@ 0xfe
 80057ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80057be:	e0ac      	b.n	800591a <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	330c      	adds	r3, #12
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f107 0110 	add.w	r1, r7, #16
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	200c      	movs	r0, #12
 80057d0:	f7fe fd40 	bl	8004254 <bmi160_get_regs>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80057da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 8098 	bne.w	8005914 <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80057e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80057ee:	3330      	adds	r3, #48	@ 0x30
 80057f0:	443b      	add	r3, r7
 80057f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80057fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005804:	3330      	adds	r3, #48	@ 0x30
 8005806:	443b      	add	r3, r7
 8005808:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800580c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005810:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005814:	b21b      	sxth	r3, r3
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	b21a      	sxth	r2, r3
 800581a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800581e:	b21b      	sxth	r3, r3
 8005820:	4313      	orrs	r3, r2
 8005822:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	8c3a      	ldrh	r2, [r7, #32]
 8005828:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800582a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005834:	3330      	adds	r3, #48	@ 0x30
 8005836:	443b      	add	r3, r7
 8005838:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800583c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005840:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800584a:	3330      	adds	r3, #48	@ 0x30
 800584c:	443b      	add	r3, r7
 800584e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005852:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005856:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800585a:	b21b      	sxth	r3, r3
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	b21a      	sxth	r2, r3
 8005860:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005864:	b21b      	sxth	r3, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	8c3a      	ldrh	r2, [r7, #32]
 800586e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800587a:	3330      	adds	r3, #48	@ 0x30
 800587c:	443b      	add	r3, r7
 800587e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005886:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005890:	3330      	adds	r3, #48	@ 0x30
 8005892:	443b      	add	r3, r7
 8005894:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800589c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	b21a      	sxth	r2, r3
 80058a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058aa:	b21b      	sxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	8c3a      	ldrh	r2, [r7, #32]
 80058b4:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80058b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058ba:	3306      	adds	r3, #6
 80058bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 80058c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058ca:	3330      	adds	r3, #48	@ 0x30
 80058cc:	443b      	add	r3, r7
 80058ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80058d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058e0:	3330      	adds	r3, #48	@ 0x30
 80058e2:	443b      	add	r3, r7
 80058e4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80058ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058f6:	3330      	adds	r3, #48	@ 0x30
 80058f8:	443b      	add	r3, r7
 80058fa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005902:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	431a      	orrs	r2, r3
 8005908:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800590c:	431a      	orrs	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	e002      	b.n	800591a <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005914:	23fe      	movs	r3, #254	@ 0xfe
 8005916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 800591a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800591e:	4618      	mov	r0, r3
 8005920:	3730      	adds	r7, #48	@ 0x30
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b08c      	sub	sp, #48	@ 0x30
 800592a:	af00      	add	r7, sp, #0
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	b29b      	uxth	r3, r3
 800595e:	330c      	adds	r3, #12
 8005960:	b29a      	uxth	r2, r3
 8005962:	f107 0110 	add.w	r1, r7, #16
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	200c      	movs	r0, #12
 800596a:	f7fe fc73 	bl	8004254 <bmi160_get_regs>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005974:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 810e 	bne.w	8005b9a <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 800597e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005988:	3330      	adds	r3, #48	@ 0x30
 800598a:	443b      	add	r3, r7
 800598c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005994:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800599e:	3330      	adds	r3, #48	@ 0x30
 80059a0:	443b      	add	r3, r7
 80059a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80059aa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80059ae:	b21b      	sxth	r3, r3
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8c3a      	ldrh	r2, [r7, #32]
 80059c2:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80059c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059ce:	3330      	adds	r3, #48	@ 0x30
 80059d0:	443b      	add	r3, r7
 80059d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80059da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059e4:	3330      	adds	r3, #48	@ 0x30
 80059e6:	443b      	add	r3, r7
 80059e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80059f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	b21a      	sxth	r2, r3
 80059fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	4313      	orrs	r3, r2
 8005a02:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8c3a      	ldrh	r2, [r7, #32]
 8005a08:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005a0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a14:	3330      	adds	r3, #48	@ 0x30
 8005a16:	443b      	add	r3, r7
 8005a18:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005a20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a2a:	3330      	adds	r3, #48	@ 0x30
 8005a2c:	443b      	add	r3, r7
 8005a2e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005a36:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	b21a      	sxth	r2, r3
 8005a40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8c3a      	ldrh	r2, [r7, #32]
 8005a4e:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8005a50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a5a:	3330      	adds	r3, #48	@ 0x30
 8005a5c:	443b      	add	r3, r7
 8005a5e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005a66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a70:	3330      	adds	r3, #48	@ 0x30
 8005a72:	443b      	add	r3, r7
 8005a74:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005a7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	b21a      	sxth	r2, r3
 8005a86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	8c3a      	ldrh	r2, [r7, #32]
 8005a94:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005a96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005aa0:	3330      	adds	r3, #48	@ 0x30
 8005aa2:	443b      	add	r3, r7
 8005aa4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005aac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ab6:	3330      	adds	r3, #48	@ 0x30
 8005ab8:	443b      	add	r3, r7
 8005aba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005abe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005ac2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	b21a      	sxth	r2, r3
 8005acc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ad0:	b21b      	sxth	r3, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	8c3a      	ldrh	r2, [r7, #32]
 8005ada:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005adc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ae6:	3330      	adds	r3, #48	@ 0x30
 8005ae8:	443b      	add	r3, r7
 8005aea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005af2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005afc:	3330      	adds	r3, #48	@ 0x30
 8005afe:	443b      	add	r3, r7
 8005b00:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005b08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b0c:	b21b      	sxth	r3, r3
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	b21a      	sxth	r2, r3
 8005b12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	8c3a      	ldrh	r2, [r7, #32]
 8005b20:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d131      	bne.n	8005b8c <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 8005b28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b32:	3330      	adds	r3, #48	@ 0x30
 8005b34:	443b      	add	r3, r7
 8005b36:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005b3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b48:	3330      	adds	r3, #48	@ 0x30
 8005b4a:	443b      	add	r3, r7
 8005b4c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005b54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b5e:	3330      	adds	r3, #48	@ 0x30
 8005b60:	443b      	add	r3, r7
 8005b62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b66:	041b      	lsls	r3, r3, #16
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005b6a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005b7a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
 8005b8a:	e009      	b.n	8005ba0 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	609a      	str	r2, [r3, #8]
 8005b98:	e002      	b.n	8005ba0 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005b9a:	23fe      	movs	r3, #254	@ 0xfe
 8005b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005ba0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3730      	adds	r7, #48	@ 0x30
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005bbe:	f107 010d 	add.w	r1, r7, #13
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	2050      	movs	r0, #80	@ 0x50
 8005bc8:	f7fe fb44 	bl	8004254 <bmi160_get_regs>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d153      	bne.n	8005c80 <enable_accel_any_motion_int+0xd4>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d03b      	beq.n	8005c5e <enable_accel_any_motion_int+0xb2>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 8005be6:	7b7b      	ldrb	r3, [r7, #13]
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 8005c02:	7b7b      	ldrb	r3, [r7, #13]
 8005c04:	f023 0302 	bic.w	r3, r3, #2
 8005c08:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	b25a      	sxtb	r2, r3
 8005c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8005c2c:	7b7b      	ldrb	r3, [r7, #13]
 8005c2e:	f023 0304 	bic.w	r3, r3, #4
 8005c32:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	b25a      	sxtb	r2, r3
 8005c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	70da      	strb	r2, [r3, #3]
 8005c5c:	e007      	b.n	8005c6e <enable_accel_any_motion_int+0xc2>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8005c5e:	7b7b      	ldrb	r3, [r7, #13]
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	22ff      	movs	r2, #255	@ 0xff
 8005c6c:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005c6e:	f107 010d 	add.w	r1, r7, #13
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2201      	movs	r2, #1
 8005c76:	2050      	movs	r0, #80	@ 0x50
 8005c78:	f7fe fb1f 	bl	80042ba <bmi160_set_regs>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005c9c:	f107 010d 	add.w	r1, r7, #13
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	2062      	movs	r0, #98	@ 0x62
 8005ca6:	f7fe fad5 	bl	8004254 <bmi160_get_regs>
 8005caa:	4603      	mov	r3, r0
 8005cac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d115      	bne.n	8005ce2 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8005cb6:	7b7b      	ldrb	r3, [r7, #13]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00e      	beq.n	8005ce2 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005cc4:	7b7b      	ldrb	r3, [r7, #13]
 8005cc6:	f023 0302 	bic.w	r3, r3, #2
 8005cca:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005cd0:	f107 010d 	add.w	r1, r7, #13
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	2062      	movs	r0, #98	@ 0x62
 8005cda:	f7fe faee 	bl	80042ba <bmi160_set_regs>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 8005cfa:	f107 030c 	add.w	r3, r7, #12
 8005cfe:	2100      	movs	r1, #0
 8005d00:	460a      	mov	r2, r1
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	460a      	mov	r2, r1
 8005d06:	709a      	strb	r2, [r3, #2]
    uint8_t temp[3] = { 0, 0, 0 };
 8005d08:	f107 0308 	add.w	r3, r7, #8
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	460a      	mov	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	460a      	mov	r2, r1
 8005d14:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005d16:	f107 010c 	add.w	r1, r7, #12
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	2055      	movs	r0, #85	@ 0x55
 8005d20:	f7fe fa98 	bl	8004254 <bmi160_get_regs>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d16a      	bne.n	8005e06 <map_feature_interrupt+0x116>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 8005d30:	7b3b      	ldrb	r3, [r7, #12]
 8005d32:	b25a      	sxtb	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4b36      	ldr	r3, [pc, #216]	@ (8005e14 <map_feature_interrupt+0x124>)
 8005d3c:	5c5b      	ldrb	r3, [r3, r1]
 8005d3e:	b25b      	sxtb	r3, r3
 8005d40:	43db      	mvns	r3, r3
 8005d42:	b25b      	sxtb	r3, r3
 8005d44:	4013      	ands	r3, r2
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	b25a      	sxtb	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	4619      	mov	r1, r3
 8005d56:	4b2f      	ldr	r3, [pc, #188]	@ (8005e14 <map_feature_interrupt+0x124>)
 8005d58:	5c5b      	ldrb	r3, [r3, r1]
 8005d5a:	b25b      	sxtb	r3, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	b25b      	sxtb	r3, r3
 8005d60:	4013      	ands	r3, r2
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d83b      	bhi.n	8005de8 <map_feature_interrupt+0xf8>
 8005d70:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <map_feature_interrupt+0x88>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d93 	.word	0x08005d93
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dc3 	.word	0x08005dc3
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8005d88:	7a3b      	ldrb	r3, [r7, #8]
 8005d8a:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005d8c:	7abb      	ldrb	r3, [r7, #10]
 8005d8e:	73bb      	strb	r3, [r7, #14]
                break;
 8005d90:	e02c      	b.n	8005dec <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8005d92:	7a3a      	ldrb	r2, [r7, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e14 <map_feature_interrupt+0x124>)
 8005d9c:	5c5b      	ldrb	r3, [r3, r1]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8005da4:	7abb      	ldrb	r3, [r7, #10]
 8005da6:	73bb      	strb	r3, [r7, #14]
                break;
 8005da8:	e020      	b.n	8005dec <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005daa:	7aba      	ldrb	r2, [r7, #10]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	4619      	mov	r1, r3
 8005db2:	4b18      	ldr	r3, [pc, #96]	@ (8005e14 <map_feature_interrupt+0x124>)
 8005db4:	5c5b      	ldrb	r3, [r3, r1]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8005dbc:	7a3b      	ldrb	r3, [r7, #8]
 8005dbe:	733b      	strb	r3, [r7, #12]
                break;
 8005dc0:	e014      	b.n	8005dec <map_feature_interrupt+0xfc>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 8005dc2:	7a3a      	ldrb	r2, [r7, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4b12      	ldr	r3, [pc, #72]	@ (8005e14 <map_feature_interrupt+0x124>)
 8005dcc:	5c5b      	ldrb	r3, [r3, r1]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8005dd4:	7aba      	ldrb	r2, [r7, #10]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <map_feature_interrupt+0x124>)
 8005dde:	5c5b      	ldrb	r3, [r3, r1]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	73bb      	strb	r3, [r7, #14]
                break;
 8005de6:	e001      	b.n	8005dec <map_feature_interrupt+0xfc>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005de8:	23fc      	movs	r3, #252	@ 0xfc
 8005dea:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <map_feature_interrupt+0x116>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005df4:	f107 010c 	add.w	r1, r7, #12
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	2055      	movs	r0, #85	@ 0x55
 8005dfe:	f7fe fa5c 	bl	80042ba <bmi160_set_regs>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	0801f528 	.word	0x0801f528

08005e18 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8005e2a:	f107 010d 	add.w	r1, r7, #13
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2201      	movs	r2, #1
 8005e32:	2056      	movs	r0, #86	@ 0x56
 8005e34:	f7fe fa0e 	bl	8004254 <bmi160_get_regs>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d168      	bne.n	8005f16 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b36      	ldr	r3, [pc, #216]	@ (8005f24 <map_hardware_interrupt+0x10c>)
 8005e4c:	5c9b      	ldrb	r3, [r3, r2]
 8005e4e:	b25b      	sxtb	r3, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	b25a      	sxtb	r2, r3
 8005e54:	7b7b      	ldrb	r3, [r7, #13]
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	4013      	ands	r3, r2
 8005e5a:	b25b      	sxtb	r3, r3
 8005e5c:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	461a      	mov	r2, r3
 8005e64:	4b2f      	ldr	r3, [pc, #188]	@ (8005f24 <map_hardware_interrupt+0x10c>)
 8005e66:	5c9b      	ldrb	r3, [r3, r2]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	b25a      	sxtb	r2, r3
 8005e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e76:	4013      	ands	r3, r2
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d839      	bhi.n	8005ef8 <map_hardware_interrupt+0xe0>
 8005e84:	a201      	add	r2, pc, #4	@ (adr r2, 8005e8c <map_hardware_interrupt+0x74>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ea3 	.word	0x08005ea3
 8005e94:	08005ebb 	.word	0x08005ebb
 8005e98:	08005ecf 	.word	0x08005ecf
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	737b      	strb	r3, [r7, #13]
                break;
 8005ea0:	e02c      	b.n	8005efc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f24 <map_hardware_interrupt+0x10c>)
 8005eaa:	5c9b      	ldrb	r3, [r3, r2]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	737b      	strb	r3, [r7, #13]
                break;
 8005eb8:	e020      	b.n	8005efc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4b18      	ldr	r3, [pc, #96]	@ (8005f24 <map_hardware_interrupt+0x10c>)
 8005ec2:	5c9a      	ldrb	r2, [r3, r2]
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	737b      	strb	r3, [r7, #13]
                break;
 8005ecc:	e016      	b.n	8005efc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <map_hardware_interrupt+0x10c>)
 8005ed6:	5c9a      	ldrb	r2, [r3, r2]
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <map_hardware_interrupt+0x10c>)
 8005ee8:	5c9b      	ldrb	r3, [r3, r2]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	737b      	strb	r3, [r7, #13]
                break;
 8005ef6:	e001      	b.n	8005efc <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8005ef8:	23fc      	movs	r3, #252	@ 0xfc
 8005efa:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8005efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8005f04:	f107 010d 	add.w	r1, r7, #13
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	2056      	movs	r0, #86	@ 0x56
 8005f0e:	f7fe f9d4 	bl	80042ba <bmi160_set_regs>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	0801f528 	.word	0x0801f528

08005f28 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005f3a:	f107 010d 	add.w	r1, r7, #13
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	2059      	movs	r0, #89	@ 0x59
 8005f44:	f7fe f986 	bl	8004254 <bmi160_get_regs>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11a      	bne.n	8005f8a <config_any_motion_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8005f54:	7b7b      	ldrb	r3, [r7, #13]
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	01db      	lsls	r3, r3, #7
 8005f6a:	b25a      	sxtb	r2, r3
 8005f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	b25b      	sxtb	r3, r3
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8005f78:	f107 010d 	add.w	r1, r7, #13
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	2059      	movs	r0, #89	@ 0x59
 8005f82:	f7fe f99a 	bl	80042ba <bmi160_set_regs>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8005fa8:	2300      	movs	r3, #0
 8005faa:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 8005fac:	f107 010c 	add.w	r1, r7, #12
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	205f      	movs	r0, #95	@ 0x5f
 8005fb6:	f7fe f94d 	bl	8004254 <bmi160_get_regs>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d122      	bne.n	800600c <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8005fd2:	7b3b      	ldrb	r3, [r7, #12]
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8005fda:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005fde:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fe2:	b25a      	sxtb	r2, r3
 8005fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 8005ff0:	7b3b      	ldrb	r3, [r7, #12]
 8005ff2:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8005ffa:	f107 0108 	add.w	r1, r7, #8
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2202      	movs	r2, #2
 8006002:	205f      	movs	r0, #95	@ 0x5f
 8006004:	f7fe f959 	bl	80042ba <bmi160_set_regs>
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800600c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7fe fed4 	bl	8004dd4 <set_intr_pin_config>
 800602c:	4603      	mov	r3, r0
 800602e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d122      	bne.n	800607e <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fe27 	bl	8005c8c <disable_sig_motion_int>
 800603e:	4603      	mov	r3, r0
 8006040:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d119      	bne.n	800607e <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fe4f 	bl	8005cf0 <map_feature_interrupt>
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	68b8      	ldr	r0, [r7, #8]
 8006062:	f7ff ff61 	bl	8005f28 <config_any_motion_src>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 800606a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d105      	bne.n	800607e <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	68b8      	ldr	r0, [r7, #8]
 8006076:	f7ff ff8e 	bl	8005f96 <config_any_dur_threshold>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800607e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800609a:	f107 010d 	add.w	r1, r7, #13
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	2051      	movs	r0, #81	@ 0x51
 80060a4:	f7fe f8d6 	bl	8004254 <bmi160_get_regs>
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80060ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d111      	bne.n	80060d8 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 80060b4:	7b7b      	ldrb	r3, [r7, #13]
 80060b6:	f023 0310 	bic.w	r3, r3, #16
 80060ba:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	f043 0310 	orr.w	r3, r3, #16
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80060c6:	f107 010d 	add.w	r1, r7, #13
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	2051      	movs	r0, #81	@ 0x51
 80060d0:	f7fe f8f3 	bl	80042ba <bmi160_set_regs>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80060d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80060f6:	f107 010d 	add.w	r1, r7, #13
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2201      	movs	r2, #1
 80060fe:	2052      	movs	r0, #82	@ 0x52
 8006100:	f7fe f8a8 	bl	8004254 <bmi160_get_regs>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d138      	bne.n	8006182 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 800611e:	7b7b      	ldrb	r3, [r7, #13]
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 800613e:	7b7b      	ldrb	r3, [r7, #13]
 8006140:	f023 0302 	bic.w	r3, r3, #2
 8006144:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	f043 0302 	orr.w	r3, r3, #2
 800614c:	b2db      	uxtb	r3, r3
 800614e:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 800615e:	7b7b      	ldrb	r3, [r7, #13]
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	f043 0304 	orr.w	r3, r3, #4
 800616c:	b2db      	uxtb	r3, r3
 800616e:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8006170:	f107 010d 	add.w	r1, r7, #13
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	2052      	movs	r0, #82	@ 0x52
 800617a:	f7fe f89e 	bl	80042ba <bmi160_set_regs>
 800617e:	4603      	mov	r3, r0
 8006180:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7fe fe19 	bl	8004dd4 <set_intr_pin_config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80061a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d119      	bne.n	80061e2 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fd9d 	bl	8005cf0 <map_feature_interrupt>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80061ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10f      	bne.n	80061e2 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	68b8      	ldr	r0, [r7, #8]
 80061c6:	f000 f812 	bl	80061ee <config_no_motion_data_src>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80061ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	68b8      	ldr	r0, [r7, #8]
 80061da:	f000 f83f 	bl	800625c <config_no_motion_dur_thr>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80061e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006200:	f107 010d 	add.w	r1, r7, #13
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2201      	movs	r2, #1
 8006208:	2059      	movs	r0, #89	@ 0x59
 800620a:	f7fe f823 	bl	8004254 <bmi160_get_regs>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d11a      	bne.n	8006250 <config_no_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 800621a:	7b7b      	ldrb	r3, [r7, #13]
 800621c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006220:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	b25b      	sxtb	r3, r3
 800622e:	01db      	lsls	r3, r3, #7
 8006230:	b25a      	sxtb	r2, r3
 8006232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006236:	4313      	orrs	r3, r2
 8006238:	b25b      	sxtb	r3, r3
 800623a:	b2db      	uxtb	r3, r3
 800623c:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800623e:	f107 010d 	add.w	r1, r7, #13
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2201      	movs	r2, #1
 8006246:	2059      	movs	r0, #89	@ 0x59
 8006248:	f7fe f837 	bl	80042ba <bmi160_set_regs>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8006272:	2300      	movs	r3, #0
 8006274:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8006276:	235f      	movs	r3, #95	@ 0x5f
 8006278:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 800627a:	f107 010b 	add.w	r1, r7, #11
 800627e:	7b38      	ldrb	r0, [r7, #12]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2201      	movs	r2, #1
 8006284:	f7fd ffe6 	bl	8004254 <bmi160_get_regs>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800628c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d14c      	bne.n	800632e <config_no_motion_dur_thr+0xd2>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	b25a      	sxtb	r2, r3
 80062ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 80062b8:	f107 010b 	add.w	r1, r7, #11
 80062bc:	7b38      	ldrb	r0, [r7, #12]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f7fd fffa 	bl	80042ba <bmi160_set_regs>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80062ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d12d      	bne.n	800632e <config_no_motion_dur_thr+0xd2>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 80062d2:	2362      	movs	r3, #98	@ 0x62
 80062d4:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80062d6:	f107 010b 	add.w	r1, r7, #11
 80062da:	7b38      	ldrb	r0, [r7, #12]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	f7fd ffb8 	bl	8004254 <bmi160_get_regs>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80062e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11e      	bne.n	800632e <config_no_motion_dur_thr+0xd2>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8006304:	7bba      	ldrb	r2, [r7, #14]
 8006306:	7b7b      	ldrb	r3, [r7, #13]
 8006308:	4313      	orrs	r3, r2
 800630a:	b2db      	uxtb	r3, r3
 800630c:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	789b      	ldrb	r3, [r3, #2]
 8006316:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8006318:	2361      	movs	r3, #97	@ 0x61
 800631a:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 800631c:	f107 0108 	add.w	r1, r7, #8
 8006320:	7b38      	ldrb	r0, [r7, #12]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2202      	movs	r2, #2
 8006326:	f7fd ffc8 	bl	80042ba <bmi160_set_regs>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800632e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800634c:	f107 010d 	add.w	r1, r7, #13
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	2050      	movs	r0, #80	@ 0x50
 8006356:	f7fd ff7d 	bl	8004254 <bmi160_get_regs>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800635e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d124      	bne.n	80063b0 <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00c      	beq.n	800638e <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8006374:	7b7b      	ldrb	r3, [r7, #13]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f043 0307 	orr.w	r3, r3, #7
 8006382:	b2db      	uxtb	r3, r3
 8006384:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2201      	movs	r2, #1
 800638a:	70da      	strb	r2, [r3, #3]
 800638c:	e007      	b.n	800639e <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 800638e:	7b7b      	ldrb	r3, [r7, #13]
 8006390:	f023 0307 	bic.w	r3, r3, #7
 8006394:	b2db      	uxtb	r3, r3
 8006396:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	22ff      	movs	r2, #255	@ 0xff
 800639c:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800639e:	f107 010d 	add.w	r1, r7, #13
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	2050      	movs	r0, #80	@ 0x50
 80063a8:	f7fd ff87 	bl	80042ba <bmi160_set_regs>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80063b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7fe fd02 	bl	8004dd4 <set_intr_pin_config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80063d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d119      	bne.n	8006410 <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fc86 	bl	8005cf0 <map_feature_interrupt>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80063e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	68b8      	ldr	r0, [r7, #8]
 80063f4:	f000 f812 	bl	800641c <config_sig_motion_data_src>
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80063fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	68b8      	ldr	r0, [r7, #8]
 8006408:	f000 f83f 	bl	800648a <config_sig_dur_threshold>
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800642e:	f107 010d 	add.w	r1, r7, #13
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2201      	movs	r2, #1
 8006436:	2059      	movs	r0, #89	@ 0x59
 8006438:	f7fd ff0c 	bl	8004254 <bmi160_get_regs>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11a      	bne.n	800647e <config_sig_motion_data_src+0x62>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8006448:	7b7b      	ldrb	r3, [r7, #13]
 800644a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800644e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	b25b      	sxtb	r3, r3
 800645c:	01db      	lsls	r3, r3, #7
 800645e:	b25a      	sxtb	r2, r3
 8006460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006464:	4313      	orrs	r3, r2
 8006466:	b25b      	sxtb	r3, r3
 8006468:	b2db      	uxtb	r3, r3
 800646a:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800646c:	f107 010d 	add.w	r1, r7, #13
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2201      	movs	r2, #1
 8006474:	2059      	movs	r0, #89	@ 0x59
 8006476:	f7fd ff20 	bl	80042ba <bmi160_set_regs>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800647e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 800649e:	f107 010d 	add.w	r1, r7, #13
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	2060      	movs	r0, #96	@ 0x60
 80064a8:	f7fd ff07 	bl	80042ba <bmi160_set_regs>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80064b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d154      	bne.n	8006562 <config_sig_dur_threshold+0xd8>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80064b8:	f107 010d 	add.w	r1, r7, #13
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2201      	movs	r2, #1
 80064c0:	2062      	movs	r0, #98	@ 0x62
 80064c2:	f7fd fec7 	bl	8004254 <bmi160_get_regs>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80064ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d147      	bne.n	8006562 <config_sig_dur_threshold+0xd8>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 80064d2:	7b7b      	ldrb	r3, [r7, #13]
 80064d4:	f023 030c 	bic.w	r3, r3, #12
 80064d8:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	f003 030c 	and.w	r3, r3, #12
 80064ee:	b25a      	sxtb	r2, r3
 80064f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 80064fc:	7b7b      	ldrb	r3, [r7, #13]
 80064fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006502:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800650c:	b2db      	uxtb	r3, r3
 800650e:	b25b      	sxtb	r3, r3
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	b25b      	sxtb	r3, r3
 8006514:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006518:	b25a      	sxtb	r2, r3
 800651a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651e:	4313      	orrs	r3, r2
 8006520:	b25b      	sxtb	r3, r3
 8006522:	b2db      	uxtb	r3, r3
 8006524:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8006526:	7b7b      	ldrb	r3, [r7, #13]
 8006528:	f023 0302 	bic.w	r3, r3, #2
 800652c:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	b25b      	sxtb	r3, r3
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	b25b      	sxtb	r3, r3
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	b25a      	sxtb	r2, r3
 8006544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006548:	4313      	orrs	r3, r2
 800654a:	b25b      	sxtb	r3, r3
 800654c:	b2db      	uxtb	r3, r3
 800654e:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8006550:	f107 010d 	add.w	r1, r7, #13
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2201      	movs	r2, #1
 8006558:	2062      	movs	r0, #98	@ 0x62
 800655a:	f7fd feae 	bl	80042ba <bmi160_set_regs>
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8006580:	f107 010d 	add.w	r1, r7, #13
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2201      	movs	r2, #1
 8006588:	2052      	movs	r0, #82	@ 0x52
 800658a:	f7fd fe63 	bl	8004254 <bmi160_get_regs>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d11d      	bne.n	80065d6 <enable_step_detect_int+0x68>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 800659a:	7b7b      	ldrb	r3, [r7, #13]
 800659c:	f023 0308 	bic.w	r3, r3, #8
 80065a0:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	b25b      	sxtb	r3, r3
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	b25a      	sxtb	r2, r3
 80065b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065bc:	4313      	orrs	r3, r2
 80065be:	b25b      	sxtb	r3, r3
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80065c4:	f107 010d 	add.w	r1, r7, #13
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2201      	movs	r2, #1
 80065cc:	2052      	movs	r0, #82	@ 0x52
 80065ce:	f7fd fe74 	bl	80042ba <bmi160_set_regs>
 80065d2:	4603      	mov	r3, r0
 80065d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80065d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 80065f0:	2300      	movs	r3, #0
 80065f2:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8006602:	2315      	movs	r3, #21
 8006604:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8006606:	2303      	movs	r3, #3
 8006608:	737b      	strb	r3, [r7, #13]
 800660a:	e05c      	b.n	80066c6 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	d104      	bne.n	8006624 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 800661a:	232d      	movs	r3, #45	@ 0x2d
 800661c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 800661e:	2300      	movs	r3, #0
 8006620:	737b      	strb	r3, [r7, #13]
 8006622:	e050      	b.n	80066c6 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b80      	cmp	r3, #128	@ 0x80
 8006630:	d104      	bne.n	800663c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8006632:	231d      	movs	r3, #29
 8006634:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8006636:	2307      	movs	r3, #7
 8006638:	737b      	strb	r3, [r7, #13]
 800663a:	e044      	b.n	80066c6 <config_step_detect+0xe4>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2bc0      	cmp	r3, #192	@ 0xc0
 8006648:	d13d      	bne.n	80066c6 <config_step_detect+0xe4>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 800664a:	f107 010c 	add.w	r1, r7, #12
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2202      	movs	r2, #2
 8006652:	207a      	movs	r0, #122	@ 0x7a
 8006654:	f7fd fdfe 	bl	8004254 <bmi160_get_regs>
 8006658:	4603      	mov	r3, r0
 800665a:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 800665c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d130      	bne.n	80066c6 <config_step_detect+0xe4>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8006664:	7b3b      	ldrb	r3, [r7, #12]
 8006666:	f023 0318 	bic.w	r3, r3, #24
 800666a:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006674:	b2db      	uxtb	r3, r3
 8006676:	b25b      	sxtb	r3, r3
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	b25b      	sxtb	r3, r3
 800667c:	f003 0318 	and.w	r3, r3, #24
 8006680:	b25a      	sxtb	r2, r3
 8006682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006686:	4313      	orrs	r3, r2
 8006688:	b25b      	sxtb	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 800668e:	7b3b      	ldrb	r3, [r7, #12]
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 80066aa:	7b7b      	ldrb	r3, [r7, #13]
 80066ac:	f023 0307 	bic.w	r3, r3, #7
 80066b0:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 80066c6:	f107 010c 	add.w	r1, r7, #12
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2202      	movs	r2, #2
 80066ce:	207a      	movs	r0, #122	@ 0x7a
 80066d0:	f7fd fdf3 	bl	80042ba <bmi160_set_regs>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73bb      	strb	r3, [r7, #14]

    return rslt;
 80066d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80066f8:	f107 0115 	add.w	r1, r7, #21
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	2050      	movs	r0, #80	@ 0x50
 8006702:	f7fd fda7 	bl	8004254 <bmi160_get_regs>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800670a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d137      	bne.n	8006782 <enable_tap_int+0x9e>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d115      	bne.n	8006746 <enable_tap_int+0x62>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 800671a:	7d7b      	ldrb	r3, [r7, #21]
 800671c:	f023 0320 	bic.w	r3, r3, #32
 8006720:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800672a:	b2db      	uxtb	r3, r3
 800672c:	b25b      	sxtb	r3, r3
 800672e:	015b      	lsls	r3, r3, #5
 8006730:	b25b      	sxtb	r3, r3
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	b25a      	sxtb	r2, r3
 8006738:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800673c:	4313      	orrs	r3, r2
 800673e:	b25b      	sxtb	r3, r3
 8006740:	b2db      	uxtb	r3, r3
 8006742:	757b      	strb	r3, [r7, #21]
 8006744:	e014      	b.n	8006770 <enable_tap_int+0x8c>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8006746:	7d7b      	ldrb	r3, [r7, #21]
 8006748:	f023 0310 	bic.w	r3, r3, #16
 800674c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	b25b      	sxtb	r3, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	b25b      	sxtb	r3, r3
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	b25a      	sxtb	r2, r3
 8006764:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006768:	4313      	orrs	r3, r2
 800676a:	b25b      	sxtb	r3, r3
 800676c:	b2db      	uxtb	r3, r3
 800676e:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006770:	f107 0115 	add.w	r1, r7, #21
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	2050      	movs	r0, #80	@ 0x50
 800677a:	f7fd fd9e 	bl	80042ba <bmi160_set_regs>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006782:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7fe fb19 	bl	8004dd4 <set_intr_pin_config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80067a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d11a      	bne.n	80067e4 <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fa9d 	bl	8005cf0 <map_feature_interrupt>
 80067b6:	4603      	mov	r3, r0
 80067b8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80067ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d110      	bne.n	80067e4 <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	68b8      	ldr	r0, [r7, #8]
 80067c6:	f000 f813 	bl	80067f0 <config_tap_data_src>
 80067ca:	4603      	mov	r3, r0
 80067cc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80067ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f842 	bl	8006864 <config_tap_param>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80067e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006802:	f107 010d 	add.w	r1, r7, #13
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2201      	movs	r2, #1
 800680a:	2058      	movs	r0, #88	@ 0x58
 800680c:	f7fd fd22 	bl	8004254 <bmi160_get_regs>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11d      	bne.n	8006858 <config_tap_data_src+0x68>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 800681c:	7b7b      	ldrb	r3, [r7, #13]
 800681e:	f023 0308 	bic.w	r3, r3, #8
 8006822:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	b25b      	sxtb	r3, r3
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	b25b      	sxtb	r3, r3
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	b25a      	sxtb	r2, r3
 800683a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683e:	4313      	orrs	r3, r2
 8006840:	b25b      	sxtb	r3, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006846:	f107 010d 	add.w	r1, r7, #13
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2201      	movs	r2, #1
 800684e:	2058      	movs	r0, #88	@ 0x58
 8006850:	f7fd fd33 	bl	80042ba <bmi160_set_regs>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8006878:	2300      	movs	r3, #0
 800687a:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8006880:	f107 0114 	add.w	r1, r7, #20
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	2063      	movs	r0, #99	@ 0x63
 800688a:	f7fd fce3 	bl	8004254 <bmi160_get_regs>
 800688e:	4603      	mov	r3, r0
 8006890:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006892:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d17a      	bne.n	8006990 <config_tap_param+0x12c>
    {
        data = data_array[count];
 800689a:	7f3b      	ldrb	r3, [r7, #28]
 800689c:	3320      	adds	r3, #32
 800689e:	443b      	add	r3, r7
 80068a0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80068a4:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d113      	bne.n	80068d6 <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 80068ba:	7fbb      	ldrb	r3, [r7, #30]
 80068bc:	f023 0307 	bic.w	r3, r3, #7
 80068c0:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 80068c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	b25a      	sxtb	r2, r3
 80068cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 80068e2:	7fbb      	ldrb	r3, [r7, #30]
 80068e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e8:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 80068ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80068ee:	019b      	lsls	r3, r3, #6
 80068f0:	b25b      	sxtb	r3, r3
 80068f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f6:	b25a      	sxtb	r2, r3
 80068f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	b25b      	sxtb	r3, r3
 8006900:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 800690e:	7fbb      	ldrb	r3, [r7, #30]
 8006910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006914:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8006916:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800691a:	01db      	lsls	r3, r3, #7
 800691c:	b25a      	sxtb	r2, r3
 800691e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006922:	4313      	orrs	r3, r2
 8006924:	b25b      	sxtb	r3, r3
 8006926:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006928:	7f3b      	ldrb	r3, [r7, #28]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	773a      	strb	r2, [r7, #28]
 800692e:	3320      	adds	r3, #32
 8006930:	443b      	add	r3, r7
 8006932:	7fba      	ldrb	r2, [r7, #30]
 8006934:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8006938:	7f3b      	ldrb	r3, [r7, #28]
 800693a:	3320      	adds	r3, #32
 800693c:	443b      	add	r3, r7
 800693e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006942:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800694c:	b2db      	uxtb	r3, r3
 800694e:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8006950:	7fbb      	ldrb	r3, [r7, #30]
 8006952:	f023 031f 	bic.w	r3, r3, #31
 8006956:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8006958:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	b25a      	sxtb	r2, r3
 8006962:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006966:	4313      	orrs	r3, r2
 8006968:	b25b      	sxtb	r3, r3
 800696a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 800696c:	7f3b      	ldrb	r3, [r7, #28]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	773a      	strb	r2, [r7, #28]
 8006972:	3320      	adds	r3, #32
 8006974:	443b      	add	r3, r7
 8006976:	7fba      	ldrb	r2, [r7, #30]
 8006978:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 800697c:	7f3b      	ldrb	r3, [r7, #28]
 800697e:	b29a      	uxth	r2, r3
 8006980:	f107 0114 	add.w	r1, r7, #20
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2063      	movs	r0, #99	@ 0x63
 8006988:	f7fd fc97 	bl	80042ba <bmi160_set_regs>
 800698c:	4603      	mov	r3, r0
 800698e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006990:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80069ae:	f107 010d 	add.w	r1, r7, #13
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	2050      	movs	r0, #80	@ 0x50
 80069b8:	f7fd fc4c 	bl	8004254 <bmi160_get_regs>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80069c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11d      	bne.n	8006a04 <enable_orient_int+0x68>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 80069c8:	7b7b      	ldrb	r3, [r7, #13]
 80069ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ce:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	b25a      	sxtb	r2, r3
 80069e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80069f2:	f107 010d 	add.w	r1, r7, #13
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2201      	movs	r2, #1
 80069fa:	2050      	movs	r0, #80	@ 0x50
 80069fc:	f7fd fc5d 	bl	80042ba <bmi160_set_regs>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006a22:	2300      	movs	r3, #0
 8006a24:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006a26:	f107 0108 	add.w	r1, r7, #8
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	2065      	movs	r0, #101	@ 0x65
 8006a30:	f7fd fc10 	bl	8004254 <bmi160_get_regs>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d174      	bne.n	8006b2a <config_orient_int_settg+0x11a>
    {
        data = data_array[0];
 8006a40:	7a3b      	ldrb	r3, [r7, #8]
 8006a42:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	7b7b      	ldrb	r3, [r7, #13]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8006a5e:	7bbb      	ldrb	r3, [r7, #14]
 8006a60:	f023 030c 	bic.w	r3, r3, #12
 8006a64:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	b25a      	sxtb	r2, r3
 8006a7c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	b25b      	sxtb	r3, r3
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	b25a      	sxtb	r2, r3
 8006a9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006aac:	7a7b      	ldrb	r3, [r7, #9]
 8006aae:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006ab6:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	7b7b      	ldrb	r3, [r7, #13]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad0:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	019b      	lsls	r3, r3, #6
 8006ae0:	b25b      	sxtb	r3, r3
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	b25a      	sxtb	r2, r3
 8006ae8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af8:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	b25a      	sxtb	r2, r3
 8006b0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	2065      	movs	r0, #101	@ 0x65
 8006b22:	f7fd fbca 	bl	80042ba <bmi160_set_regs>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006b48:	f107 010d 	add.w	r1, r7, #13
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	2050      	movs	r0, #80	@ 0x50
 8006b52:	f7fd fb7f 	bl	8004254 <bmi160_get_regs>
 8006b56:	4603      	mov	r3, r0
 8006b58:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11a      	bne.n	8006b98 <enable_flat_int+0x62>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8006b62:	7b7b      	ldrb	r3, [r7, #13]
 8006b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b68:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	01db      	lsls	r3, r3, #7
 8006b78:	b25a      	sxtb	r2, r3
 8006b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006b86:	f107 010d 	add.w	r1, r7, #13
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	2050      	movs	r0, #80	@ 0x50
 8006b90:	f7fd fb93 	bl	80042ba <bmi160_set_regs>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006bba:	f107 0108 	add.w	r1, r7, #8
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	2067      	movs	r0, #103	@ 0x67
 8006bc4:	f7fd fb46 	bl	8004254 <bmi160_get_regs>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d13e      	bne.n	8006c52 <config_flat_int_settg+0xae>
    {
        data = data_array[0];
 8006bd4:	7a3b      	ldrb	r3, [r7, #8]
 8006bd6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bde:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	7b7b      	ldrb	r3, [r7, #13]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006bf6:	7a7b      	ldrb	r3, [r7, #9]
 8006bf8:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006c00:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c16:	b25a      	sxtb	r2, r3
 8006c18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006c40:	f107 0108 	add.w	r1, r7, #8
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2202      	movs	r2, #2
 8006c48:	2067      	movs	r0, #103	@ 0x67
 8006c4a:	f7fd fb36 	bl	80042ba <bmi160_set_regs>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006c70:	f107 010d 	add.w	r1, r7, #13
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	2051      	movs	r0, #81	@ 0x51
 8006c7a:	f7fd faeb 	bl	8004254 <bmi160_get_regs>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11d      	bne.n	8006cc6 <enable_low_g_int+0x68>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8006c8a:	7b7b      	ldrb	r3, [r7, #13]
 8006c8c:	f023 0308 	bic.w	r3, r3, #8
 8006c90:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	789b      	ldrb	r3, [r3, #2]
 8006c96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	b25a      	sxtb	r2, r3
 8006ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b25b      	sxtb	r3, r3
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006cb4:	f107 010d 	add.w	r1, r7, #13
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	2051      	movs	r0, #81	@ 0x51
 8006cbe:	f7fd fafc 	bl	80042ba <bmi160_set_regs>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006ce4:	f107 010d 	add.w	r1, r7, #13
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	2058      	movs	r0, #88	@ 0x58
 8006cee:	f7fd fab1 	bl	8004254 <bmi160_get_regs>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d11a      	bne.n	8006d34 <config_low_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8006cfe:	7b7b      	ldrb	r3, [r7, #13]
 8006d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d04:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	789b      	ldrb	r3, [r3, #2]
 8006d0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	b25b      	sxtb	r3, r3
 8006d12:	01db      	lsls	r3, r3, #7
 8006d14:	b25a      	sxtb	r2, r3
 8006d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006d22:	f107 010d 	add.w	r1, r7, #13
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	2058      	movs	r0, #88	@ 0x58
 8006d2c:	f7fd fac5 	bl	80042ba <bmi160_set_regs>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8006d4e:	f107 0308 	add.w	r3, r7, #8
 8006d52:	2100      	movs	r1, #0
 8006d54:	460a      	mov	r2, r1
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	460a      	mov	r2, r1
 8006d5a:	709a      	strb	r2, [r3, #2]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8006d5c:	f107 0308 	add.w	r3, r7, #8
 8006d60:	1c99      	adds	r1, r3, #2
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2201      	movs	r2, #1
 8006d66:	205c      	movs	r0, #92	@ 0x5c
 8006d68:	f7fd fa74 	bl	8004254 <bmi160_get_regs>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d131      	bne.n	8006ddc <config_low_g_int_settg+0x9c>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8006d78:	7abb      	ldrb	r3, [r7, #10]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	789b      	ldrb	r3, [r3, #2]
 8006d84:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 8006d94:	7abb      	ldrb	r3, [r7, #10]
 8006d96:	f023 0304 	bic.w	r3, r3, #4
 8006d9a:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	789b      	ldrb	r3, [r3, #2]
 8006da0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	b25b      	sxtb	r3, r3
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	b25b      	sxtb	r3, r3
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	b25a      	sxtb	r2, r3
 8006db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	b25b      	sxtb	r3, r3
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8006dca:	f107 0108 	add.w	r1, r7, #8
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	205a      	movs	r0, #90	@ 0x5a
 8006dd4:	f7fd fa71 	bl	80042ba <bmi160_set_regs>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006dfa:	f107 010d 	add.w	r1, r7, #13
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2201      	movs	r2, #1
 8006e02:	2051      	movs	r0, #81	@ 0x51
 8006e04:	f7fd fa26 	bl	8004254 <bmi160_get_regs>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d140      	bne.n	8006e96 <enable_high_g_int+0xae>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8006e14:	7b7b      	ldrb	r3, [r7, #13]
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 8006e30:	7b7b      	ldrb	r3, [r7, #13]
 8006e32:	f023 0302 	bic.w	r3, r3, #2
 8006e36:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	b25a      	sxtb	r2, r3
 8006e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b25b      	sxtb	r3, r3
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8006e5a:	7b7b      	ldrb	r3, [r7, #13]
 8006e5c:	f023 0304 	bic.w	r3, r3, #4
 8006e60:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	b25b      	sxtb	r3, r3
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	b25a      	sxtb	r2, r3
 8006e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006e84:	f107 010d 	add.w	r1, r7, #13
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	2051      	movs	r0, #81	@ 0x51
 8006e8e:	f7fd fa14 	bl	80042ba <bmi160_set_regs>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006eb4:	f107 010d 	add.w	r1, r7, #13
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2058      	movs	r0, #88	@ 0x58
 8006ebe:	f7fd f9c9 	bl	8004254 <bmi160_get_regs>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11a      	bne.n	8006f04 <config_high_g_data_src+0x62>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8006ece:	7b7b      	ldrb	r3, [r7, #13]
 8006ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed4:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	01db      	lsls	r3, r3, #7
 8006ee4:	b25a      	sxtb	r2, r3
 8006ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b25b      	sxtb	r3, r3
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006ef2:	f107 010d 	add.w	r1, r7, #13
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	2058      	movs	r0, #88	@ 0x58
 8006efc:	f7fd f9dd 	bl	80042ba <bmi160_set_regs>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	2100      	movs	r1, #0
 8006f24:	460a      	mov	r2, r1
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	460a      	mov	r2, r1
 8006f2a:	709a      	strb	r2, [r3, #2]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2201      	movs	r2, #1
 8006f34:	205c      	movs	r0, #92	@ 0x5c
 8006f36:	f7fd f98d 	bl	8004254 <bmi160_get_regs>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d120      	bne.n	8006f88 <config_high_g_int_settg+0x78>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8006f46:	7a3b      	ldrb	r3, [r7, #8]
 8006f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f4c:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	b25b      	sxtb	r3, r3
 8006f5a:	019b      	lsls	r3, r3, #6
 8006f5c:	b25a      	sxtb	r2, r3
 8006f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	b25b      	sxtb	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	789b      	ldrb	r3, [r3, #2]
 8006f6e:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8006f76:	f107 0108 	add.w	r1, r7, #8
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	205c      	movs	r0, #92	@ 0x5c
 8006f80:	f7fd f99b 	bl	80042ba <bmi160_set_regs>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8006fa6:	f107 010f 	add.w	r1, r7, #15
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2201      	movs	r2, #1
 8006fae:	2053      	movs	r0, #83	@ 0x53
 8006fb0:	f7fd f950 	bl	8004254 <bmi160_get_regs>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f040 80af 	bne.w	8007120 <config_int_out_ctrl+0x18c>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d14d      	bne.n	800706c <config_int_out_ctrl+0xd8>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	f023 0308 	bic.w	r3, r3, #8
 8006fd6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	b25b      	sxtb	r3, r3
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	b25a      	sxtb	r2, r3
 8006fee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b25b      	sxtb	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	b25b      	sxtb	r3, r3
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	b25b      	sxtb	r3, r3
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	b25a      	sxtb	r2, r3
 8007018:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800701c:	4313      	orrs	r3, r2
 800701e:	b25b      	sxtb	r3, r3
 8007020:	b2db      	uxtb	r3, r3
 8007022:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	f023 0302 	bic.w	r3, r3, #2
 800702a:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	b25b      	sxtb	r3, r3
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	b25b      	sxtb	r3, r3
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	b25a      	sxtb	r2, r3
 8007042:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007046:	4313      	orrs	r3, r2
 8007048:	b25b      	sxtb	r3, r3
 800704a:	b2db      	uxtb	r3, r3
 800704c:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800705e:	b2db      	uxtb	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	7dbb      	ldrb	r3, [r7, #22]
 8007064:	4313      	orrs	r3, r2
 8007066:	b2db      	uxtb	r3, r3
 8007068:	73fb      	strb	r3, [r7, #15]
 800706a:	e050      	b.n	800710e <config_int_out_ctrl+0x17a>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	b25b      	sxtb	r3, r3
 8007080:	01db      	lsls	r3, r3, #7
 8007082:	b25a      	sxtb	r2, r3
 8007084:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007088:	4313      	orrs	r3, r2
 800708a:	b25b      	sxtb	r3, r3
 800708c:	b2db      	uxtb	r3, r3
 800708e:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007096:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	b25b      	sxtb	r3, r3
 80070a4:	019b      	lsls	r3, r3, #6
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ac:	b25a      	sxtb	r2, r3
 80070ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b25b      	sxtb	r3, r3
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	f023 0320 	bic.w	r3, r3, #32
 80070c0:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	015b      	lsls	r3, r3, #5
 80070d0:	b25b      	sxtb	r3, r3
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	b25a      	sxtb	r2, r3
 80070d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80070dc:	4313      	orrs	r3, r2
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	f023 0310 	bic.w	r3, r3, #16
 80070ea:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	b25b      	sxtb	r3, r3
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	b25b      	sxtb	r3, r3
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	b25a      	sxtb	r2, r3
 8007102:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007106:	4313      	orrs	r3, r2
 8007108:	b25b      	sxtb	r3, r3
 800710a:	b2db      	uxtb	r3, r3
 800710c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 800710e:	f107 010f 	add.w	r1, r7, #15
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2201      	movs	r2, #1
 8007116:	2053      	movs	r0, #83	@ 0x53
 8007118:	f7fd f8cf 	bl	80042ba <bmi160_set_regs>
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007120:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 800713e:	f107 010f 	add.w	r1, r7, #15
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	2054      	movs	r0, #84	@ 0x54
 8007148:	f7fd f884 	bl	8004254 <bmi160_get_regs>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8007150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d148      	bne.n	80071ea <config_int_latch+0xbe>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3302      	adds	r3, #2
 800715c:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d115      	bne.n	8007192 <config_int_latch+0x66>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	b25b      	sxtb	r3, r3
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	b25a      	sxtb	r2, r3
 8007184:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007188:	4313      	orrs	r3, r2
 800718a:	b25b      	sxtb	r3, r3
 800718c:	b2db      	uxtb	r3, r3
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	e014      	b.n	80071bc <config_int_latch+0x90>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	f023 0320 	bic.w	r3, r3, #32
 8007198:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	b25b      	sxtb	r3, r3
 80071a6:	015b      	lsls	r3, r3, #5
 80071a8:	b25b      	sxtb	r3, r3
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	b25a      	sxtb	r2, r3
 80071b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	f023 030f 	bic.w	r3, r3, #15
 80071c2:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	7dbb      	ldrb	r3, [r7, #22]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 80071d8:	f107 010f 	add.w	r1, r7, #15
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	2054      	movs	r0, #84	@ 0x54
 80071e2:	f7fd f86a 	bl	80042ba <bmi160_set_regs>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80071ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <set_fifo_full_int+0x1c>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8007212:	23ff      	movs	r3, #255	@ 0xff
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e019      	b.n	800724c <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f81c 	bl	8007258 <enable_fifo_full_int>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10f      	bne.n	800724c <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fd fdd0 	bl	8004dd4 <set_intr_pin_config>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe fde8 	bl	8005e18 <map_hardware_interrupt>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800724c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007266:	f107 010e 	add.w	r1, r7, #14
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2201      	movs	r2, #1
 800726e:	2051      	movs	r0, #81	@ 0x51
 8007270:	f7fc fff0 	bl	8004254 <bmi160_get_regs>
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <enable_fifo_full_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	b25b      	sxtb	r3, r3
 8007284:	f023 0320 	bic.w	r3, r3, #32
 8007288:	b25a      	sxtb	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7a1b      	ldrb	r3, [r3, #8]
 800728e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007292:	b2db      	uxtb	r3, r3
 8007294:	b25b      	sxtb	r3, r3
 8007296:	015b      	lsls	r3, r3, #5
 8007298:	b25b      	sxtb	r3, r3
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b25b      	sxtb	r3, r3
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80072a8:	f107 010e 	add.w	r1, r7, #14
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	2051      	movs	r0, #81	@ 0x51
 80072b2:	f7fd f802 	bl	80042ba <bmi160_set_regs>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80072ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <set_fifo_watermark_int+0x1c>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 80072e2:	23ff      	movs	r3, #255	@ 0xff
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e019      	b.n	800731c <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f81c 	bl	8007328 <enable_fifo_wtm_int>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80072f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10f      	bne.n	800731c <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fd fd68 	bl	8004dd4 <set_intr_pin_config>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d105      	bne.n	800731c <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fe fd80 	bl	8005e18 <map_hardware_interrupt>
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800731c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007336:	f107 010e 	add.w	r1, r7, #14
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	2051      	movs	r0, #81	@ 0x51
 8007340:	f7fc ff88 	bl	8004254 <bmi160_get_regs>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d11c      	bne.n	800738a <enable_fifo_wtm_int+0x62>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	b25b      	sxtb	r3, r3
 8007354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007358:	b25a      	sxtb	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	7a1b      	ldrb	r3, [r3, #8]
 800735e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007362:	b2db      	uxtb	r3, r3
 8007364:	b25b      	sxtb	r3, r3
 8007366:	019b      	lsls	r3, r3, #6
 8007368:	b25b      	sxtb	r3, r3
 800736a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736e:	b25b      	sxtb	r3, r3
 8007370:	4313      	orrs	r3, r2
 8007372:	b25b      	sxtb	r3, r3
 8007374:	b2db      	uxtb	r3, r3
 8007376:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007378:	f107 010e 	add.w	r1, r7, #14
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2201      	movs	r2, #1
 8007380:	2051      	movs	r0, #81	@ 0x51
 8007382:	f7fc ff9a 	bl	80042ba <bmi160_set_regs>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800738a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80073a0:	f107 010e 	add.w	r1, r7, #14
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2201      	movs	r2, #1
 80073a8:	201b      	movs	r0, #27
 80073aa:	f7fc ff53 	bl	8004254 <bmi160_get_regs>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80073b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d107      	bne.n	80073ca <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	10db      	asrs	r3, r3, #3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80073ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80073e0:	6838      	ldr	r0, [r7, #0]
 80073e2:	f7fd fd12 	bl	8004e0a <null_ptr_check>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 80073ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 80073f2:	23ff      	movs	r3, #255	@ 0xff
 80073f4:	73fb      	strb	r3, [r7, #15]
 80073f6:	e034      	b.n	8007462 <configure_offset_enable+0x8c>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 80073f8:	f107 010e 	add.w	r1, r7, #14
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2201      	movs	r2, #1
 8007400:	2077      	movs	r0, #119	@ 0x77
 8007402:	f7fc ff27 	bl	8004254 <bmi160_get_regs>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800740a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d127      	bne.n	8007462 <configure_offset_enable+0x8c>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	b25b      	sxtb	r3, r3
 8007416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741a:	b25a      	sxtb	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	795b      	ldrb	r3, [r3, #5]
 8007420:	b25b      	sxtb	r3, r3
 8007422:	01db      	lsls	r3, r3, #7
 8007424:	b25b      	sxtb	r3, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	b25b      	sxtb	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	b25b      	sxtb	r3, r3
 8007432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007436:	b25a      	sxtb	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	791b      	ldrb	r3, [r3, #4]
 800743c:	b25b      	sxtb	r3, r3
 800743e:	019b      	lsls	r3, r3, #6
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007446:	b25b      	sxtb	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b25b      	sxtb	r3, r3
 800744c:	b2db      	uxtb	r3, r3
 800744e:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8007450:	f107 010e 	add.w	r1, r7, #14
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2201      	movs	r2, #1
 8007458:	2077      	movs	r0, #119	@ 0x77
 800745a:	f7fc ff2e 	bl	80042ba <bmi160_set_regs>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8007462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8007478:	2301      	movs	r3, #1
 800747a:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 800747c:	2303      	movs	r3, #3
 800747e:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8007484:	f107 011c 	add.w	r1, r7, #28
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	207e      	movs	r0, #126	@ 0x7e
 800748e:	f7fc ff14 	bl	80042ba <bmi160_set_regs>
 8007492:	4603      	mov	r3, r0
 8007494:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8007496:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d141      	bne.n	8007522 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 800749e:	f107 031d 	add.w	r3, r7, #29
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff ff76 	bl	8007396 <get_foc_status>
 80074aa:	4603      	mov	r3, r0
 80074ac:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80074ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d112      	bne.n	80074dc <trigger_foc+0x6e>
 80074b6:	7f7b      	ldrb	r3, [r7, #29]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d025      	beq.n	8007508 <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80074bc:	e00e      	b.n	80074dc <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c2:	2019      	movs	r0, #25
 80074c4:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80074c6:	f107 031d 	add.w	r3, r7, #29
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff ff62 	bl	8007396 <get_foc_status>
 80074d2:	4603      	mov	r3, r0
 80074d4:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80074d6:	7fbb      	ldrb	r3, [r7, #30]
 80074d8:	3301      	adds	r3, #1
 80074da:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80074dc:	7f7b      	ldrb	r3, [r7, #29]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d002      	beq.n	80074e8 <trigger_foc+0x7a>
 80074e2:	7fbb      	ldrb	r3, [r7, #30]
 80074e4:	2b1f      	cmp	r3, #31
 80074e6:	d9ea      	bls.n	80074be <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 80074e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <trigger_foc+0x96>
 80074f0:	7f7b      	ldrb	r3, [r7, #29]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d106      	bne.n	8007504 <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fd f99b 	bl	8004834 <bmi160_get_offsets>
 80074fe:	4603      	mov	r3, r0
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e001      	b.n	8007508 <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8007504:	23f5      	movs	r3, #245	@ 0xf5
 8007506:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8007508:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8007510:	f107 0108 	add.w	r1, r7, #8
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2214      	movs	r2, #20
 8007518:	200c      	movs	r0, #12
 800751a:	f7fc fe9b 	bl	8004254 <bmi160_get_regs>
 800751e:	4603      	mov	r3, r0
 8007520:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8007522:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8007538:	f000 f970 	bl	800781c <set_bmi160_Ares>
	set_bmi160_Gres();
 800753c:	f000 f99a 	bl	8007874 <set_bmi160_Gres>
	get_bmi160_Ares();
 8007540:	f000 f9ca 	bl	80078d8 <get_bmi160_Ares>
	get_bmi160_Gres();
 8007544:	f000 f9fe 	bl	8007944 <get_bmi160_Gres>

    sensor.id = 0;
 8007548:	4b52      	ldr	r3, [pc, #328]	@ (8007694 <BMI160_init+0x164>)
 800754a:	2200      	movs	r2, #0
 800754c:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 800754e:	4b51      	ldr	r3, [pc, #324]	@ (8007694 <BMI160_init+0x164>)
 8007550:	2200      	movs	r2, #0
 8007552:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8007554:	4b4f      	ldr	r3, [pc, #316]	@ (8007694 <BMI160_init+0x164>)
 8007556:	4a50      	ldr	r2, [pc, #320]	@ (8007698 <BMI160_init+0x168>)
 8007558:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800755a:	4b4e      	ldr	r3, [pc, #312]	@ (8007694 <BMI160_init+0x164>)
 800755c:	4a4f      	ldr	r2, [pc, #316]	@ (800769c <BMI160_init+0x16c>)
 800755e:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8007560:	4b4c      	ldr	r3, [pc, #304]	@ (8007694 <BMI160_init+0x164>)
 8007562:	4a4f      	ldr	r2, [pc, #316]	@ (80076a0 <BMI160_init+0x170>)
 8007564:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 8007566:	4b4b      	ldr	r3, [pc, #300]	@ (8007694 <BMI160_init+0x164>)
 8007568:	2220      	movs	r2, #32
 800756a:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 800756c:	4849      	ldr	r0, [pc, #292]	@ (8007694 <BMI160_init+0x164>)
 800756e:	f7fc ff55 	bl	800441c <bmi160_soft_reset>
 8007572:	4603      	mov	r3, r0
 8007574:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 8007576:	4b47      	ldr	r3, [pc, #284]	@ (8007694 <BMI160_init+0x164>)
 8007578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757a:	20c8      	movs	r0, #200	@ 0xc8
 800757c:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 800757e:	4845      	ldr	r0, [pc, #276]	@ (8007694 <BMI160_init+0x164>)
 8007580:	f7fc fefe 	bl	8004380 <bmi160_init>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 8007588:	2324      	movs	r3, #36	@ 0x24
 800758a:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8007590:	2301      	movs	r3, #1
 8007592:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8007594:	89ba      	ldrh	r2, [r7, #12]
 8007596:	f107 010b 	add.w	r1, r7, #11
 800759a:	7bb8      	ldrb	r0, [r7, #14]
 800759c:	4b3d      	ldr	r3, [pc, #244]	@ (8007694 <BMI160_init+0x164>)
 800759e:	f7fc fe59 	bl	8004254 <bmi160_get_regs>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80075a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007694 <BMI160_init+0x164>)
 80075a8:	220b      	movs	r2, #11
 80075aa:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80075ac:	4b39      	ldr	r3, [pc, #228]	@ (8007694 <BMI160_init+0x164>)
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	2064      	movs	r0, #100	@ 0x64
 80075b2:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80075b4:	4b3b      	ldr	r3, [pc, #236]	@ (80076a4 <BMI160_init+0x174>)
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <BMI160_init+0x164>)
 80075ba:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80075bc:	4b35      	ldr	r3, [pc, #212]	@ (8007694 <BMI160_init+0x164>)
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	2064      	movs	r0, #100	@ 0x64
 80075c2:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80075c4:	4b33      	ldr	r3, [pc, #204]	@ (8007694 <BMI160_init+0x164>)
 80075c6:	2211      	movs	r2, #17
 80075c8:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80075ca:	4b32      	ldr	r3, [pc, #200]	@ (8007694 <BMI160_init+0x164>)
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	2064      	movs	r0, #100	@ 0x64
 80075d0:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80075d2:	4b30      	ldr	r3, [pc, #192]	@ (8007694 <BMI160_init+0x164>)
 80075d4:	2202      	movs	r2, #2
 80075d6:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80075d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007694 <BMI160_init+0x164>)
 80075da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075dc:	2064      	movs	r0, #100	@ 0x64
 80075de:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 80075e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007694 <BMI160_init+0x164>)
 80075e2:	220b      	movs	r2, #11
 80075e4:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 80075e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007694 <BMI160_init+0x164>)
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	2064      	movs	r0, #100	@ 0x64
 80075ec:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 80075ee:	4b2e      	ldr	r3, [pc, #184]	@ (80076a8 <BMI160_init+0x178>)
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	4b28      	ldr	r3, [pc, #160]	@ (8007694 <BMI160_init+0x164>)
 80075f4:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 80075f6:	4b27      	ldr	r3, [pc, #156]	@ (8007694 <BMI160_init+0x164>)
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	2064      	movs	r0, #100	@ 0x64
 80075fc:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80075fe:	4b25      	ldr	r3, [pc, #148]	@ (8007694 <BMI160_init+0x164>)
 8007600:	2215      	movs	r2, #21
 8007602:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8007604:	4b23      	ldr	r3, [pc, #140]	@ (8007694 <BMI160_init+0x164>)
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	2064      	movs	r0, #100	@ 0x64
 800760a:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 800760c:	4b21      	ldr	r3, [pc, #132]	@ (8007694 <BMI160_init+0x164>)
 800760e:	2202      	movs	r2, #2
 8007610:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8007612:	4b20      	ldr	r3, [pc, #128]	@ (8007694 <BMI160_init+0x164>)
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	2064      	movs	r0, #100	@ 0x64
 8007618:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 800761a:	481e      	ldr	r0, [pc, #120]	@ (8007694 <BMI160_init+0x164>)
 800761c:	f7fc ff39 	bl	8004492 <bmi160_set_sens_conf>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8007624:	f000 f844 	bl	80076b0 <start_foc>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 800762c:	4b1f      	ldr	r3, [pc, #124]	@ (80076ac <BMI160_init+0x17c>)
 800762e:	2201      	movs	r2, #1
 8007630:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8007632:	4b1e      	ldr	r3, [pc, #120]	@ (80076ac <BMI160_init+0x17c>)
 8007634:	220a      	movs	r2, #10
 8007636:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8007638:	4a1c      	ldr	r2, [pc, #112]	@ (80076ac <BMI160_init+0x17c>)
 800763a:	7893      	ldrb	r3, [r2, #2]
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8007642:	4a1a      	ldr	r2, [pc, #104]	@ (80076ac <BMI160_init+0x17c>)
 8007644:	7893      	ldrb	r3, [r2, #2]
 8007646:	f023 0302 	bic.w	r3, r3, #2
 800764a:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 800764c:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <BMI160_init+0x17c>)
 800764e:	7893      	ldrb	r3, [r2, #2]
 8007650:	f023 0304 	bic.w	r3, r3, #4
 8007654:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8007656:	4a15      	ldr	r2, [pc, #84]	@ (80076ac <BMI160_init+0x17c>)
 8007658:	7893      	ldrb	r3, [r2, #2]
 800765a:	f043 0308 	orr.w	r3, r3, #8
 800765e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8007660:	4a12      	ldr	r2, [pc, #72]	@ (80076ac <BMI160_init+0x17c>)
 8007662:	7893      	ldrb	r3, [r2, #2]
 8007664:	f023 0310 	bic.w	r3, r3, #16
 8007668:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 800766a:	4a10      	ldr	r2, [pc, #64]	@ (80076ac <BMI160_init+0x17c>)
 800766c:	8853      	ldrh	r3, [r2, #2]
 800766e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007672:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8007674:	4907      	ldr	r1, [pc, #28]	@ (8007694 <BMI160_init+0x164>)
 8007676:	480d      	ldr	r0, [pc, #52]	@ (80076ac <BMI160_init+0x17c>)
 8007678:	f7fc ffcc 	bl	8004614 <bmi160_set_int_config>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	761a      	strb	r2, [r3, #24]
    return rslt;
 8007686:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2000030c 	.word	0x2000030c
 8007698:	08007a01 	.word	0x08007a01
 800769c:	08007a45 	.word	0x08007a45
 80076a0:	08008d1d 	.word	0x08008d1d
 80076a4:	2000036e 	.word	0x2000036e
 80076a8:	2000036f 	.word	0x2000036f
 80076ac:	20000364 	.word	0x20000364

080076b0 <start_foc>:

int8_t start_foc()
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 80076ba:	4b13      	ldr	r3, [pc, #76]	@ (8007708 <start_foc+0x58>)
 80076bc:	2201      	movs	r2, #1
 80076be:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 80076c0:	4b11      	ldr	r3, [pc, #68]	@ (8007708 <start_foc+0x58>)
 80076c2:	2203      	movs	r2, #3
 80076c4:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 80076c6:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <start_foc+0x58>)
 80076c8:	2203      	movs	r2, #3
 80076ca:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 80076cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007708 <start_foc+0x58>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 80076d2:	4b0e      	ldr	r3, [pc, #56]	@ (800770c <start_foc+0x5c>)
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	2064      	movs	r0, #100	@ 0x64
 80076d8:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <start_foc+0x58>)
 80076dc:	2201      	movs	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 80076e0:	4b09      	ldr	r3, [pc, #36]	@ (8007708 <start_foc+0x58>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 80076e6:	4b09      	ldr	r3, [pc, #36]	@ (800770c <start_foc+0x5c>)
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	2064      	movs	r0, #100	@ 0x64
 80076ec:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 80076ee:	4a07      	ldr	r2, [pc, #28]	@ (800770c <start_foc+0x5c>)
 80076f0:	4907      	ldr	r1, [pc, #28]	@ (8007710 <start_foc+0x60>)
 80076f2:	4805      	ldr	r0, [pc, #20]	@ (8007708 <start_foc+0x58>)
 80076f4:	f7fd f81a 	bl	800472c <bmi160_start_foc>
 80076f8:	4603      	mov	r3, r0
 80076fa:	71fb      	strb	r3, [r7, #7]

	return rslt;
 80076fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000350 	.word	0x20000350
 800770c:	2000030c 	.word	0x2000030c
 8007710:	20000358 	.word	0x20000358

08007714 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	@ 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 800771c:	4b3a      	ldr	r3, [pc, #232]	@ (8007808 <bmi160ReadAccelGyro+0xf4>)
 800771e:	4a3b      	ldr	r2, [pc, #236]	@ (800780c <bmi160ReadAccelGyro+0xf8>)
 8007720:	493b      	ldr	r1, [pc, #236]	@ (8007810 <bmi160ReadAccelGyro+0xfc>)
 8007722:	2003      	movs	r0, #3
 8007724:	f7fc ff0f 	bl	8004546 <bmi160_get_sensor_data>
 8007728:	4603      	mov	r3, r0
 800772a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 800772e:	4b38      	ldr	r3, [pc, #224]	@ (8007810 <bmi160ReadAccelGyro+0xfc>)
 8007730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800773c:	4b35      	ldr	r3, [pc, #212]	@ (8007814 <bmi160ReadAccelGyro+0x100>)
 800773e:	ed93 7a00 	vldr	s14, [r3]
 8007742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007746:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 800774a:	4b31      	ldr	r3, [pc, #196]	@ (8007810 <bmi160ReadAccelGyro+0xfc>)
 800774c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007758:	4b2e      	ldr	r3, [pc, #184]	@ (8007814 <bmi160ReadAccelGyro+0x100>)
 800775a:	ed93 7a00 	vldr	s14, [r3]
 800775e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 8007766:	4b2a      	ldr	r3, [pc, #168]	@ (8007810 <bmi160ReadAccelGyro+0xfc>)
 8007768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007774:	4b27      	ldr	r3, [pc, #156]	@ (8007814 <bmi160ReadAccelGyro+0x100>)
 8007776:	ed93 7a00 	vldr	s14, [r3]
 800777a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777e:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 8007782:	4b22      	ldr	r3, [pc, #136]	@ (800780c <bmi160ReadAccelGyro+0xf8>)
 8007784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007790:	4b21      	ldr	r3, [pc, #132]	@ (8007818 <bmi160ReadAccelGyro+0x104>)
 8007792:	ed93 7a00 	vldr	s14, [r3]
 8007796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779a:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 800779e:	4b1b      	ldr	r3, [pc, #108]	@ (800780c <bmi160ReadAccelGyro+0xf8>)
 80077a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80077ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007818 <bmi160ReadAccelGyro+0x104>)
 80077ae:	ed93 7a00 	vldr	s14, [r3]
 80077b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b6:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 80077ba:	4b14      	ldr	r3, [pc, #80]	@ (800780c <bmi160ReadAccelGyro+0xf8>)
 80077bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80077c8:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <bmi160ReadAccelGyro+0x104>)
 80077ca:	ed93 7a00 	vldr	s14, [r3]
 80077ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d2:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a3a      	ldr	r2, [r7, #32]
 80077da:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	615a      	str	r2, [r3, #20]

	return rslt;
 80077fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	@ 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	2000030c 	.word	0x2000030c
 800780c:	20000344 	.word	0x20000344
 8007810:	20000338 	.word	0x20000338
 8007814:	20000370 	.word	0x20000370
 8007818:	20000374 	.word	0x20000374

0800781c <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8007820:	4b12      	ldr	r3, [pc, #72]	@ (800786c <set_bmi160_Ares+0x50>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	3b01      	subs	r3, #1
 8007826:	2b03      	cmp	r3, #3
 8007828:	d81a      	bhi.n	8007860 <set_bmi160_Ares+0x44>
 800782a:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <set_bmi160_Ares+0x14>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007841 	.word	0x08007841
 8007834:	08007849 	.word	0x08007849
 8007838:	08007851 	.word	0x08007851
 800783c:	08007859 	.word	0x08007859
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8007840:	4b0b      	ldr	r3, [pc, #44]	@ (8007870 <set_bmi160_Ares+0x54>)
 8007842:	2203      	movs	r2, #3
 8007844:	701a      	strb	r2, [r3, #0]
			break;
 8007846:	e00b      	b.n	8007860 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8007848:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <set_bmi160_Ares+0x54>)
 800784a:	2205      	movs	r2, #5
 800784c:	701a      	strb	r2, [r3, #0]
			break;
 800784e:	e007      	b.n	8007860 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8007850:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <set_bmi160_Ares+0x54>)
 8007852:	2208      	movs	r2, #8
 8007854:	701a      	strb	r2, [r3, #0]
			break;
 8007856:	e003      	b.n	8007860 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <set_bmi160_Ares+0x54>)
 800785a:	220c      	movs	r2, #12
 800785c:	701a      	strb	r2, [r3, #0]
			break;
 800785e:	bf00      	nop
	}
}
 8007860:	bf00      	nop
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	20000018 	.word	0x20000018
 8007870:	2000036e 	.word	0x2000036e

08007874 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8007878:	4b15      	ldr	r3, [pc, #84]	@ (80078d0 <set_bmi160_Gres+0x5c>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	3b01      	subs	r3, #1
 800787e:	2b04      	cmp	r3, #4
 8007880:	d820      	bhi.n	80078c4 <set_bmi160_Gres+0x50>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <set_bmi160_Gres+0x14>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	0800789d 	.word	0x0800789d
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078b5 	.word	0x080078b5
 8007898:	080078bd 	.word	0x080078bd
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 800789c:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <set_bmi160_Gres+0x60>)
 800789e:	2204      	movs	r2, #4
 80078a0:	701a      	strb	r2, [r3, #0]
			break;
 80078a2:	e00f      	b.n	80078c4 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 80078a4:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <set_bmi160_Gres+0x60>)
 80078a6:	2203      	movs	r2, #3
 80078a8:	701a      	strb	r2, [r3, #0]
			break;
 80078aa:	e00b      	b.n	80078c4 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 80078ac:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <set_bmi160_Gres+0x60>)
 80078ae:	2202      	movs	r2, #2
 80078b0:	701a      	strb	r2, [r3, #0]
			break;
 80078b2:	e007      	b.n	80078c4 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 80078b4:	4b07      	ldr	r3, [pc, #28]	@ (80078d4 <set_bmi160_Gres+0x60>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	701a      	strb	r2, [r3, #0]
			break;
 80078ba:	e003      	b.n	80078c4 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <set_bmi160_Gres+0x60>)
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
			break;
 80078c2:	bf00      	nop
	}
}
 80078c4:	bf00      	nop
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000019 	.word	0x20000019
 80078d4:	2000036f 	.word	0x2000036f

080078d8 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80078dc:	4b17      	ldr	r3, [pc, #92]	@ (800793c <get_bmi160_Ares+0x64>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d826      	bhi.n	8007932 <get_bmi160_Ares+0x5a>
 80078e4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <get_bmi160_Ares+0x14>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007901 	.word	0x08007901
 80078f0:	0800790b 	.word	0x0800790b
 80078f4:	08007915 	.word	0x08007915
 80078f8:	0800791f 	.word	0x0800791f
 80078fc:	08007929 	.word	0x08007929
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8007900:	4b0f      	ldr	r3, [pc, #60]	@ (8007940 <get_bmi160_Ares+0x68>)
 8007902:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007906:	601a      	str	r2, [r3, #0]
			break;
 8007908:	e013      	b.n	8007932 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <get_bmi160_Ares+0x68>)
 800790c:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8007910:	601a      	str	r2, [r3, #0]
			break;
 8007912:	e00e      	b.n	8007932 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8007914:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <get_bmi160_Ares+0x68>)
 8007916:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800791a:	601a      	str	r2, [r3, #0]
			break;
 800791c:	e009      	b.n	8007932 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 800791e:	4b08      	ldr	r3, [pc, #32]	@ (8007940 <get_bmi160_Ares+0x68>)
 8007920:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8007924:	601a      	str	r2, [r3, #0]
			break;
 8007926:	e004      	b.n	8007932 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <get_bmi160_Ares+0x68>)
 800792a:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800792e:	601a      	str	r2, [r3, #0]
			break;
 8007930:	bf00      	nop
	}
}
 8007932:	bf00      	nop
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	2000001a 	.word	0x2000001a
 8007940:	20000370 	.word	0x20000370

08007944 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8007948:	4b18      	ldr	r3, [pc, #96]	@ (80079ac <get_bmi160_Gres+0x68>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b05      	cmp	r3, #5
 800794e:	d828      	bhi.n	80079a2 <get_bmi160_Gres+0x5e>
 8007950:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <get_bmi160_Gres+0x14>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007971 	.word	0x08007971
 800795c:	0800797b 	.word	0x0800797b
 8007960:	08007983 	.word	0x08007983
 8007964:	0800798b 	.word	0x0800798b
 8007968:	08007993 	.word	0x08007993
 800796c:	0800799b 	.word	0x0800799b
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8007970:	4b0f      	ldr	r3, [pc, #60]	@ (80079b0 <get_bmi160_Gres+0x6c>)
 8007972:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007976:	601a      	str	r2, [r3, #0]
			break;
 8007978:	e013      	b.n	80079a2 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 800797a:	4b0e      	ldr	r3, [pc, #56]	@ (80079b4 <get_bmi160_Gres+0x70>)
 800797c:	4a0e      	ldr	r2, [pc, #56]	@ (80079b8 <get_bmi160_Gres+0x74>)
 800797e:	601a      	str	r2, [r3, #0]
			break;
 8007980:	e00f      	b.n	80079a2 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8007982:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <get_bmi160_Gres+0x70>)
 8007984:	4a0d      	ldr	r2, [pc, #52]	@ (80079bc <get_bmi160_Gres+0x78>)
 8007986:	601a      	str	r2, [r3, #0]
			break;
 8007988:	e00b      	b.n	80079a2 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 800798a:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <get_bmi160_Gres+0x70>)
 800798c:	4a0c      	ldr	r2, [pc, #48]	@ (80079c0 <get_bmi160_Gres+0x7c>)
 800798e:	601a      	str	r2, [r3, #0]
			break;
 8007990:	e007      	b.n	80079a2 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8007992:	4b08      	ldr	r3, [pc, #32]	@ (80079b4 <get_bmi160_Gres+0x70>)
 8007994:	4a0b      	ldr	r2, [pc, #44]	@ (80079c4 <get_bmi160_Gres+0x80>)
 8007996:	601a      	str	r2, [r3, #0]
			break;
 8007998:	e003      	b.n	80079a2 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 800799a:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <get_bmi160_Gres+0x70>)
 800799c:	4a0a      	ldr	r2, [pc, #40]	@ (80079c8 <get_bmi160_Gres+0x84>)
 800799e:	601a      	str	r2, [r3, #0]
			break;
 80079a0:	bf00      	nop
	}
}
 80079a2:	bf00      	nop
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	2000001b 	.word	0x2000001b
 80079b0:	20000370 	.word	0x20000370
 80079b4:	20000374 	.word	0x20000374
 80079b8:	43833333 	.word	0x43833333
 80079bc:	43033333 	.word	0x43033333
 80079c0:	42833333 	.word	0x42833333
 80079c4:	42033333 	.word	0x42033333
 80079c8:	41833333 	.word	0x41833333

080079cc <bmi160_delay_us>:
		}
	}
}

void bmi160_delay_us(uint32_t period)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 80079d4:	e008      	b.n	80079e8 <bmi160_delay_us+0x1c>
	{
		for(i = 0; i < 84; i++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	e002      	b.n	80079e2 <bmi160_delay_us+0x16>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3301      	adds	r3, #1
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b53      	cmp	r3, #83	@ 0x53
 80079e6:	d9f9      	bls.n	80079dc <bmi160_delay_us+0x10>
	while(period--)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	1e5a      	subs	r2, r3, #1
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f1      	bne.n	80079d6 <bmi160_delay_us+0xa>
		{
			;
		}
	}
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	603a      	str	r2, [r7, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	71bb      	strb	r3, [r7, #6]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8007a16:	1dba      	adds	r2, r7, #6
 8007a18:	2364      	movs	r3, #100	@ 0x64
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	21d2      	movs	r1, #210	@ 0xd2
 8007a20:	4807      	ldr	r0, [pc, #28]	@ (8007a40 <SensorAPI_I2Cx_Read+0x40>)
 8007a22:	f003 fa21 	bl	800ae68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8007a26:	88bb      	ldrh	r3, [r7, #4]
 8007a28:	2264      	movs	r2, #100	@ 0x64
 8007a2a:	9200      	str	r2, [sp, #0]
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	21d2      	movs	r1, #210	@ 0xd2
 8007a30:	4803      	ldr	r0, [pc, #12]	@ (8007a40 <SensorAPI_I2Cx_Read+0x40>)
 8007a32:	f003 fb31 	bl	800b098 <HAL_I2C_Master_Receive>
	return 0;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000658 	.word	0x20000658

08007a44 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	603a      	str	r2, [r7, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
 8007a52:	460b      	mov	r3, r1
 8007a54:	71bb      	strb	r3, [r7, #6]
 8007a56:	4613      	mov	r3, r2
 8007a58:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <SensorAPI_I2Cx_Write+0x48>)
 8007a5c:	79bb      	ldrb	r3, [r7, #6]
 8007a5e:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8007a60:	88bb      	ldrh	r3, [r7, #4]
 8007a62:	461a      	mov	r2, r3
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	480a      	ldr	r0, [pc, #40]	@ (8007a90 <SensorAPI_I2Cx_Write+0x4c>)
 8007a68:	f011 fdf5 	bl	8019656 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8007a6c:	88bb      	ldrh	r3, [r7, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2264      	movs	r2, #100	@ 0x64
 8007a74:	9200      	str	r2, [sp, #0]
 8007a76:	4a05      	ldr	r2, [pc, #20]	@ (8007a8c <SensorAPI_I2Cx_Write+0x48>)
 8007a78:	21d2      	movs	r1, #210	@ 0xd2
 8007a7a:	4806      	ldr	r0, [pc, #24]	@ (8007a94 <SensorAPI_I2Cx_Write+0x50>)
 8007a7c:	f003 f9f4 	bl	800ae68 <HAL_I2C_Master_Transmit>
	return 0;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000378 	.word	0x20000378
 8007a90:	20000379 	.word	0x20000379
 8007a94:	20000658 	.word	0x20000658

08007a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <__NVIC_SetPriorityGrouping+0x44>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aca:	4a04      	ldr	r2, [pc, #16]	@ (8007adc <__NVIC_SetPriorityGrouping+0x44>)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	60d3      	str	r3, [r2, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	e000ed00 	.word	0xe000ed00

08007ae0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007afc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4013      	ands	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4013      	ands	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	bf00      	nop
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b48:	f001 f89c 	bl	8008c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b4c:	f000 f862 	bl	8007c14 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007b50:	f000 f8ca 	bl	8007ce8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b54:	f000 f9ea 	bl	8007f2c <MX_GPIO_Init>
  MX_DMA_Init();
 8007b58:	f000 f9d6 	bl	8007f08 <MX_DMA_Init>
  MX_ADC1_Init();
 8007b5c:	f000 f8e2 	bl	8007d24 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007b60:	f000 f984 	bl	8007e6c <MX_TIM2_Init>
  MX_I2C1_Init();
 8007b64:	f000 f942 	bl	8007dec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_reading, 1);
 8007b68:	2201      	movs	r2, #1
 8007b6a:	491b      	ldr	r1, [pc, #108]	@ (8007bd8 <main+0x94>)
 8007b6c:	481b      	ldr	r0, [pc, #108]	@ (8007bdc <main+0x98>)
 8007b6e:	f001 fc2d 	bl	80093cc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8007b72:	481b      	ldr	r0, [pc, #108]	@ (8007be0 <main+0x9c>)
 8007b74:	f008 f816 	bl	800fba4 <HAL_TIM_Base_Start_IT>
  NVIC_SetPriorityGrouping( 0 );
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f7ff ff8d 	bl	8007a98 <__NVIC_SetPriorityGrouping>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007b7e:	f00c fa21 	bl	8013fc4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of TransmitMutex */
  TransmitMutexHandle = osMutexNew(&TransmitMutex_attributes);
 8007b82:	4818      	ldr	r0, [pc, #96]	@ (8007be4 <main+0xa0>)
 8007b84:	f00c fbd1 	bl	801432a <osMutexNew>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4a17      	ldr	r2, [pc, #92]	@ (8007be8 <main+0xa4>)
 8007b8c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (1, sizeof(uint8_t*), &AudioQueue_attributes);
 8007b8e:	4a17      	ldr	r2, [pc, #92]	@ (8007bec <main+0xa8>)
 8007b90:	2104      	movs	r1, #4
 8007b92:	2001      	movs	r0, #1
 8007b94:	f00c fcd7 	bl	8014546 <osMessageQueueNew>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	4a15      	ldr	r2, [pc, #84]	@ (8007bf0 <main+0xac>)
 8007b9c:	6013      	str	r3, [r2, #0]

  /* creation of BMIQueue */
  BMIQueueHandle = osMessageQueueNew (1, 4, &BMIQueue_attributes);
 8007b9e:	4a15      	ldr	r2, [pc, #84]	@ (8007bf4 <main+0xb0>)
 8007ba0:	2104      	movs	r1, #4
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	f00c fccf 	bl	8014546 <osMessageQueueNew>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	4a13      	ldr	r2, [pc, #76]	@ (8007bf8 <main+0xb4>)
 8007bac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007bae:	4a13      	ldr	r2, [pc, #76]	@ (8007bfc <main+0xb8>)
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4813      	ldr	r0, [pc, #76]	@ (8007c00 <main+0xbc>)
 8007bb4:	f00c fa50 	bl	8014058 <osThreadNew>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4a12      	ldr	r2, [pc, #72]	@ (8007c04 <main+0xc0>)
 8007bbc:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_handler, NULL, &Task1_attributes);
 8007bbe:	4a12      	ldr	r2, [pc, #72]	@ (8007c08 <main+0xc4>)
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4812      	ldr	r0, [pc, #72]	@ (8007c0c <main+0xc8>)
 8007bc4:	f00c fa48 	bl	8014058 <osThreadNew>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	4a11      	ldr	r2, [pc, #68]	@ (8007c10 <main+0xcc>)
 8007bcc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007bce:	f00c fa1d 	bl	801400c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <main+0x8e>
 8007bd6:	bf00      	nop
 8007bd8:	2000070c 	.word	0x2000070c
 8007bdc:	20000594 	.word	0x20000594
 8007be0:	200006ac 	.word	0x200006ac
 8007be4:	0801f5b0 	.word	0x0801f5b0
 8007be8:	20000708 	.word	0x20000708
 8007bec:	0801f580 	.word	0x0801f580
 8007bf0:	20000700 	.word	0x20000700
 8007bf4:	0801f598 	.word	0x0801f598
 8007bf8:	20000704 	.word	0x20000704
 8007bfc:	0801f538 	.word	0x0801f538
 8007c00:	08008181 	.word	0x08008181
 8007c04:	200006f8 	.word	0x200006f8
 8007c08:	0801f55c 	.word	0x0801f55c
 8007c0c:	08008291 	.word	0x08008291
 8007c10:	200006fc 	.word	0x200006fc

08007c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b09a      	sub	sp, #104	@ 0x68
 8007c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c1a:	f107 0320 	add.w	r3, r7, #32
 8007c1e:	2248      	movs	r2, #72	@ 0x48
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f011 fc3a 	bl	801949c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c28:	1d3b      	adds	r3, r7, #4
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	605a      	str	r2, [r3, #4]
 8007c30:	609a      	str	r2, [r3, #8]
 8007c32:	60da      	str	r2, [r3, #12]
 8007c34:	611a      	str	r2, [r3, #16]
 8007c36:	615a      	str	r2, [r3, #20]
 8007c38:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce4 <SystemClock_Config+0xd0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c42:	4a28      	ldr	r2, [pc, #160]	@ (8007ce4 <SystemClock_Config+0xd0>)
 8007c44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	4b26      	ldr	r3, [pc, #152]	@ (8007ce4 <SystemClock_Config+0xd0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8007c56:	2362      	movs	r3, #98	@ 0x62
 8007c58:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007c60:	2301      	movs	r3, #1
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007c64:	2301      	movs	r3, #1
 8007c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007c68:	2340      	movs	r3, #64	@ 0x40
 8007c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007c70:	2360      	movs	r3, #96	@ 0x60
 8007c72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c74:	2302      	movs	r3, #2
 8007c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8007c80:	2320      	movs	r3, #32
 8007c82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007c8a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007c8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c94:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c96:	f107 0320 	add.w	r3, r7, #32
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f006 fcd4 	bl	800e648 <HAL_RCC_OscConfig>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007ca6:	f000 fc79 	bl	800859c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8007caa:	236f      	movs	r3, #111	@ 0x6f
 8007cac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8007cbe:	2380      	movs	r3, #128	@ 0x80
 8007cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	2103      	movs	r1, #3
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f007 f830 	bl	800ed30 <HAL_RCC_ClockConfig>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007cd6:	f000 fc61 	bl	800859c <Error_Handler>
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3768      	adds	r7, #104	@ 0x68
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	58000400 	.word	0x58000400

08007ce8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b094      	sub	sp, #80	@ 0x50
 8007cec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007cee:	463b      	mov	r3, r7
 8007cf0:	2250      	movs	r2, #80	@ 0x50
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f011 fbd1 	bl	801949c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8007cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007cfe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8007d00:	2300      	movs	r3, #0
 8007d02:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8007d04:	2310      	movs	r3, #16
 8007d06:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d08:	463b      	mov	r3, r7
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f007 fc6b 	bl	800f5e6 <HAL_RCCEx_PeriphCLKConfig>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8007d16:	f000 fc41 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8007d1a:	bf00      	nop
 8007d1c:	3750      	adds	r7, #80	@ 0x50
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	609a      	str	r2, [r3, #8]
 8007d34:	60da      	str	r2, [r3, #12]
 8007d36:	611a      	str	r2, [r3, #16]
 8007d38:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007d3a:	4b29      	ldr	r3, [pc, #164]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d3c:	4a29      	ldr	r2, [pc, #164]	@ (8007de4 <MX_ADC1_Init+0xc0>)
 8007d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007d40:	4b27      	ldr	r3, [pc, #156]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d46:	4b26      	ldr	r3, [pc, #152]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d4c:	4b24      	ldr	r3, [pc, #144]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007d52:	4b23      	ldr	r3, [pc, #140]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d58:	4b21      	ldr	r3, [pc, #132]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007d5e:	4b20      	ldr	r3, [pc, #128]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007d64:	4b1e      	ldr	r3, [pc, #120]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d70:	4b1b      	ldr	r3, [pc, #108]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d78:	4b19      	ldr	r3, [pc, #100]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d7e:	4b18      	ldr	r3, [pc, #96]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007d84:	4b16      	ldr	r3, [pc, #88]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007d8c:	4b14      	ldr	r3, [pc, #80]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007d92:	4b13      	ldr	r3, [pc, #76]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d9a:	4811      	ldr	r0, [pc, #68]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007d9c:	f001 f9ca 	bl	8009134 <HAL_ADC_Init>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8007da6:	f000 fbf9 	bl	800859c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007daa:	4b0f      	ldr	r3, [pc, #60]	@ (8007de8 <MX_ADC1_Init+0xc4>)
 8007dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007dae:	2306      	movs	r3, #6
 8007db0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8007db2:	2306      	movs	r3, #6
 8007db4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007db6:	237f      	movs	r3, #127	@ 0x7f
 8007db8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007dba:	2304      	movs	r3, #4
 8007dbc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4806      	ldr	r0, [pc, #24]	@ (8007de0 <MX_ADC1_Init+0xbc>)
 8007dc8:	f001 fd62 	bl	8009890 <HAL_ADC_ConfigChannel>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8007dd2:	f000 fbe3 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007dd6:	bf00      	nop
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000594 	.word	0x20000594
 8007de4:	50040000 	.word	0x50040000
 8007de8:	14f00020 	.word	0x14f00020

08007dec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007df0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007df2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e64 <MX_I2C1_Init+0x78>)
 8007df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8007df6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007df8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <MX_I2C1_Init+0x7c>)
 8007dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007dfc:	4b18      	ldr	r3, [pc, #96]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e02:	4b17      	ldr	r3, [pc, #92]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e08:	4b15      	ldr	r3, [pc, #84]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007e0e:	4b14      	ldr	r3, [pc, #80]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007e14:	4b12      	ldr	r3, [pc, #72]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e1a:	4b11      	ldr	r3, [pc, #68]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e20:	4b0f      	ldr	r3, [pc, #60]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e26:	480e      	ldr	r0, [pc, #56]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e28:	f002 ff82 	bl	800ad30 <HAL_I2C_Init>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007e32:	f000 fbb3 	bl	800859c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007e36:	2100      	movs	r1, #0
 8007e38:	4809      	ldr	r0, [pc, #36]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e3a:	f004 fabd 	bl	800c3b8 <HAL_I2CEx_ConfigAnalogFilter>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007e44:	f000 fbaa 	bl	800859c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4805      	ldr	r0, [pc, #20]	@ (8007e60 <MX_I2C1_Init+0x74>)
 8007e4c:	f004 faff 	bl	800c44e <HAL_I2CEx_ConfigDigitalFilter>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007e56:	f000 fba1 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007e5a:	bf00      	nop
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000658 	.word	0x20000658
 8007e64:	40005400 	.word	0x40005400
 8007e68:	10b17db5 	.word	0x10b17db5

08007e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e72:	f107 0310 	add.w	r3, r7, #16
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e80:	1d3b      	adds	r3, r7, #4
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007e8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007e92:	4b1b      	ldr	r3, [pc, #108]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e98:	4b19      	ldr	r3, [pc, #100]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2560000-1;
 8007e9e:	4b18      	ldr	r3, [pc, #96]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007ea0:	4a18      	ldr	r2, [pc, #96]	@ (8007f04 <MX_TIM2_Init+0x98>)
 8007ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ea4:	4b16      	ldr	r3, [pc, #88]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007eac:	2280      	movs	r2, #128	@ 0x80
 8007eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007eb0:	4813      	ldr	r0, [pc, #76]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007eb2:	f007 fe1f 	bl	800faf4 <HAL_TIM_Base_Init>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007ebc:	f000 fb6e 	bl	800859c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007ec6:	f107 0310 	add.w	r3, r7, #16
 8007eca:	4619      	mov	r1, r3
 8007ecc:	480c      	ldr	r0, [pc, #48]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007ece:	f007 ffbe 	bl	800fe4e <HAL_TIM_ConfigClockSource>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007ed8:	f000 fb60 	bl	800859c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007edc:	2320      	movs	r3, #32
 8007ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007ee4:	1d3b      	adds	r3, r7, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4805      	ldr	r0, [pc, #20]	@ (8007f00 <MX_TIM2_Init+0x94>)
 8007eea:	f008 f9a7 	bl	801023c <HAL_TIMEx_MasterConfigSynchronization>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007ef4:	f000 fb52 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007ef8:	bf00      	nop
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200006ac 	.word	0x200006ac
 8007f04:	00270fff 	.word	0x00270fff

08007f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007f0c:	2004      	movs	r0, #4
 8007f0e:	f7ff fde7 	bl	8007ae0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f12:	2001      	movs	r0, #1
 8007f14:	f7ff fde4 	bl	8007ae0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2105      	movs	r1, #5
 8007f1c:	200b      	movs	r0, #11
 8007f1e:	f002 fa75 	bl	800a40c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007f22:	200b      	movs	r0, #11
 8007f24:	f002 fa8c 	bl	800a440 <HAL_NVIC_EnableIRQ>

}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f32:	1d3b      	adds	r3, r7, #4
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	605a      	str	r2, [r3, #4]
 8007f3a:	609a      	str	r2, [r3, #8]
 8007f3c:	60da      	str	r2, [r3, #12]
 8007f3e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f40:	2004      	movs	r0, #4
 8007f42:	f7ff fde6 	bl	8007b12 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f46:	2001      	movs	r0, #1
 8007f48:	f7ff fde3 	bl	8007b12 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f4c:	2002      	movs	r0, #2
 8007f4e:	f7ff fde0 	bl	8007b12 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEL_Pin|HELL_Pin|HELLO_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2138      	movs	r1, #56	@ 0x38
 8007f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f5a:	f002 fed1 	bl	800ad00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEL_Pin HELL_Pin HELLO_Pin */
  GPIO_InitStruct.Pin = HEL_Pin|HELL_Pin|HELLO_Pin;
 8007f5e:	2338      	movs	r3, #56	@ 0x38
 8007f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f62:	2301      	movs	r3, #1
 8007f64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f76:	f002 fd53 	bl	800aa20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <USB_transmit>:

/* USER CODE BEGIN 4 */
void USB_transmit(uint8_t *buffer, size_t length){
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
	osStatus_t status;

	osMutexAcquire(TransmitMutexHandle, osWaitForever);
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc0 <USB_transmit+0x3c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f04f 31ff 	mov.w	r1, #4294967295
 8007f96:	4618      	mov	r0, r3
 8007f98:	f00c fa4d 	bl	8014436 <osMutexAcquire>
	status = CDC_Transmit_FS(buffer, length);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f00f ff66 	bl	8017e74 <CDC_Transmit_FS>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	60fb      	str	r3, [r7, #12]
	osMutexRelease(TransmitMutexHandle);
 8007fac:	4b04      	ldr	r3, [pc, #16]	@ (8007fc0 <USB_transmit+0x3c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f00c fa8b 	bl	80144cc <osMutexRelease>
		//sprintf(msg, "Error, status code: %d \r\n", status);
		//sprintf(msg, "Error");
		//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	}
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000708 	.word	0x20000708

08007fc4 <set_accel_gyro_config>:

/* BMI 270 Functions */
static int8_t set_accel_gyro_config(struct bmi2_dev *bmi)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b0a0      	sub	sp, #128	@ 0x80
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

    /* Structure to define accelerometer and gyro configuration. */
    struct bmi2_sens_config config[2];

    /* Configure the type of feature. */
    config[ACCEL].type = BMI2_ACCEL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	733b      	strb	r3, [r7, #12]
    config[GYRO].type = BMI2_GYRO;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Get default configurations for the type of feature selected. */
    rslt = bmi270_set_sensor_config(config, 2, bmi);
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	2102      	movs	r1, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fb f802 	bl	8002fe8 <bmi270_set_sensor_config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 8007fea:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fb ffaa 	bl	8003f48 <bmi2_error_codes_print_result>

    /* Map data ready interrupt to interrupt pin. */
    rslt = bmi2_map_data_int(BMI2_DRDY_INT, BMI2_INT1, bmi);
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	2004      	movs	r0, #4
 8007ffa:	f7f9 fb3b 	bl	8001674 <bmi2_map_data_int>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 8008004:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8008008:	4618      	mov	r0, r3
 800800a:	f7fb ff9d 	bl	8003f48 <bmi2_error_codes_print_result>

    if (rslt == BMI2_OK)
 800800e:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8008012:	2b00      	cmp	r3, #0
 8008014:	d125      	bne.n	8008062 <set_accel_gyro_config+0x9e>
    {
        /* NOTE: The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[ACCEL].cfg.acc.odr = BMI2_ACC_ODR_800HZ;
 8008016:	230b      	movs	r3, #11
 8008018:	743b      	strb	r3, [r7, #16]

        /* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
        config[ACCEL].cfg.acc.range = BMI2_ACC_RANGE_2G;
 800801a:	2300      	movs	r3, #0
 800801c:	74fb      	strb	r3, [r7, #19]
         * are averaged, resulting in 4 averaged samples.
         * Note1 : For more information, refer the datasheet.
         * Note2 : A higher number of averaged samples will result in a lower noise level of the signal, but
         * this has an adverse effect on the power consumed.
         */
        config[ACCEL].cfg.acc.bwp = BMI2_ACC_NORMAL_AVG4;
 800801e:	2302      	movs	r3, #2
 8008020:	747b      	strb	r3, [r7, #17]
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         * For more info refer datasheet.
         */
        config[ACCEL].cfg.acc.filter_perf = BMI2_PERF_OPT_MODE;
 8008022:	2301      	movs	r3, #1
 8008024:	74bb      	strb	r3, [r7, #18]

        /* The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[GYRO].cfg.gyr.odr = BMI2_GYR_ODR_800HZ;
 8008026:	230b      	movs	r3, #11
 8008028:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        /* Gyroscope Angular Rate Measurement Range.By default the range is 2000dps. */
        config[GYRO].cfg.gyr.range = BMI2_GYR_RANGE_2000;
 800802c:	2300      	movs	r3, #0
 800802e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        /* Gyroscope bandwidth parameters. By default the gyro bandwidth is in normal mode. */
        config[GYRO].cfg.gyr.bwp = BMI2_GYR_NORMAL_MODE;
 8008032:	2302      	movs	r3, #2
 8008034:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        /* Enable/Disable the noise performance mode for precision yaw rate sensing
         * There are two modes
         *  0 -> Ultra low power mode(Default)
         *  1 -> High performance mode
         */
        config[GYRO].cfg.gyr.noise_perf = BMI2_POWER_OPT_MODE;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
         * will be done based on above set bandwidth and ODR.
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         */
        config[GYRO].cfg.gyr.filter_perf = BMI2_PERF_OPT_MODE;
 800803e:	2301      	movs	r3, #1
 8008040:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

        /* Set the accel and gyro configurations. */
        rslt = bmi270_set_sensor_config(config, 2, bmi);
 8008044:	f107 030c 	add.w	r3, r7, #12
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	2102      	movs	r1, #2
 800804c:	4618      	mov	r0, r3
 800804e:	f7fa ffcb 	bl	8002fe8 <bmi270_set_sensor_config>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        bmi2_error_codes_print_result(rslt);
 8008058:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800805c:	4618      	mov	r0, r3
 800805e:	f7fb ff73 	bl	8003f48 <bmi2_error_codes_print_result>
    }

    return rslt;
 8008062:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
}
 8008066:	4618      	mov	r0, r3
 8008068:	3780      	adds	r7, #128	@ 0x80
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <lsb_to_mps2>:

static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	ed87 0a00 	vstr	s0, [r7]
 800807c:	460a      	mov	r2, r1
 800807e:	80fb      	strh	r3, [r7, #6]
 8008080:	4613      	mov	r3, r2
 8008082:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800808c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8008090:	797b      	ldrb	r3, [r7, #5]
 8008092:	4618      	mov	r0, r3
 8008094:	f7f8 fa0e 	bl	80004b4 <__aeabi_ui2d>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	ec43 2b11 	vmov	d1, r2, r3
 80080a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80080a4:	f013 fa94 	bl	801b5d0 <pow>
 80080a8:	ec51 0b10 	vmov	r0, r1, d0
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080b4:	f7f8 fba2 	bl	80007fc <__aeabi_ddiv>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	f7f8 fd4a 	bl	8000b58 <__aeabi_d2f>
 80080c4:	4603      	mov	r3, r0
 80080c6:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 80080c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080d4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80080fc <lsb_to_mps2+0x8c>
 80080d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80080dc:	edd7 7a00 	vldr	s15, [r7]
 80080e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80080e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80080ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80080f0:	eeb0 0a67 	vmov.f32	s0, s15
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	411ce80a 	.word	0x411ce80a

08008100 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	ed87 0a00 	vstr	s0, [r7]
 800810c:	460a      	mov	r2, r1
 800810e:	80fb      	strh	r3, [r7, #6]
 8008110:	4613      	mov	r3, r2
 8008112:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800811c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8008120:	797b      	ldrb	r3, [r7, #5]
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 f9c6 	bl	80004b4 <__aeabi_ui2d>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	ec43 2b11 	vmov	d1, r2, r3
 8008130:	ed97 0b04 	vldr	d0, [r7, #16]
 8008134:	f013 fa4c 	bl	801b5d0 <pow>
 8008138:	ec51 0b10 	vmov	r0, r1, d0
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008144:	f7f8 fb5a 	bl	80007fc <__aeabi_ddiv>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	f7f8 fd02 	bl	8000b58 <__aeabi_d2f>
 8008154:	4603      	mov	r3, r0
 8008156:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8008158:	edd7 6a00 	vldr	s13, [r7]
 800815c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008168:	ee07 3a90 	vmov	s15, r3
 800816c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008170:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8008174:	eeb0 0a67 	vmov.f32	s0, s15
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b0b7      	sub	sp, #220	@ 0xdc
 8008184:	af04      	add	r7, sp, #16
 8008186:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8008188:	f00f fdb6 	bl	8017cf8 <MX_USB_Device_Init>
  uint8_t buffer[20];
  //RAVEN initiate sensor

  /* IMU Variable Setup */
  	int8_t rslt;
  	uint8_t sensor_list[2] = { BMI2_ACCEL, BMI2_GYRO };
 800818c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008190:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
  	struct bmi2_dev bmi;
  	struct bmi2_sens_config config;
  	osStatus_t status;
  /* IMU Variable Setup END */

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8008194:	bf00      	nop
 8008196:	4b3a      	ldr	r3, [pc, #232]	@ (8008280 <StartDefaultTask+0x100>)
 8008198:	466c      	mov	r4, sp
 800819a:	f103 0210 	add.w	r2, r3, #16
 800819e:	ca07      	ldmia	r2, {r0, r1, r2}
 80081a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081a6:	f7ff f9c3 	bl	8007530 <BMI160_init>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d0f2      	beq.n	8008196 <StartDefaultTask+0x16>
  rslt = bmi2_interface_init(&bmi, BMI2_I2C_INTF);
 80081b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80081b4:	2101      	movs	r1, #1
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fb fe7e 	bl	8003eb8 <bmi2_interface_init>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  bmi2_error_codes_print_result(rslt);
 80081c2:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fb febe 	bl	8003f48 <bmi2_error_codes_print_result>
  rslt = bmi270_init(&bmi);
 80081cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fa feab 	bl	8002f2c <bmi270_init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  bmi2_error_codes_print_result(rslt);
 80081dc:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fb feb1 	bl	8003f48 <bmi2_error_codes_print_result>
  rslt = set_accel_gyro_config(&bmi);
 80081e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff feea 	bl	8007fc4 <set_accel_gyro_config>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  bmi2_error_codes_print_result(rslt);
 80081f6:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fb fea4 	bl	8003f48 <bmi2_error_codes_print_result>
  rslt = bmi2_sensor_enable(sensor_list, 2, &bmi);
 8008200:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008204:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008208:	2102      	movs	r1, #2
 800820a:	4618      	mov	r0, r3
 800820c:	f7f8 ff3c 	bl	8001088 <bmi2_sensor_enable>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  bmi2_error_codes_print_result(rslt);
 8008216:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 800821a:	4618      	mov	r0, r3
 800821c:	f7fb fe94 	bl	8003f48 <bmi2_error_codes_print_result>
  config.type = BMI2_ACCEL;
 8008220:	2300      	movs	r3, #0
 8008222:	723b      	strb	r3, [r7, #8]
  rslt = bmi2_get_sensor_config(&config, 1, &bmi);
 8008224:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008228:	f107 0308 	add.w	r3, r7, #8
 800822c:	2101      	movs	r1, #1
 800822e:	4618      	mov	r0, r3
 8008230:	f7f9 f816 	bl	8001260 <bmi2_get_sensor_config>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  bmi2_error_codes_print_result(rslt);
 800823a:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 800823e:	4618      	mov	r0, r3
 8008240:	f7fb fe82 	bl	8003f48 <bmi2_error_codes_print_result>

  if (imu_t.INIT_OK_i8 != TRUE){
 8008244:	4b0e      	ldr	r3, [pc, #56]	@ (8008280 <StartDefaultTask+0x100>)
 8008246:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d00b      	beq.n	8008266 <StartDefaultTask+0xe6>
	  // Check if the BMI has not initiated properly: Print or turn LED on
	  sprintf((char*)buffer,"IMU setup error \r\n");
 800824e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008252:	490c      	ldr	r1, [pc, #48]	@ (8008284 <StartDefaultTask+0x104>)
 8008254:	4618      	mov	r0, r3
 8008256:	f011 f827 	bl	80192a8 <siprintf>
	  USB_transmit(buffer, sizeof(buffer));
 800825a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800825e:	2114      	movs	r1, #20
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff fe8f 	bl	8007f84 <USB_transmit>
  }
  status = osMessageQueuePut(BMIQueueHandle, (const void*)&bmi, 0, 0);
 8008266:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <StartDefaultTask+0x108>)
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	f00c f9db 	bl	801462c <osMessageQueuePut>
 8008276:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

  /* Infinite loop */
  for(;;)
  {
	osThreadExit();
 800827a:	f00b ff7f 	bl	801417c <osThreadExit>
 800827e:	bf00      	nop
 8008280:	20000578 	.word	0x20000578
 8008284:	0801d420 	.word	0x0801d420
 8008288:	20000704 	.word	0x20000704
 800828c:	00000000 	.word	0x00000000

08008290 <task1_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_handler */
void task1_handler(void *argument)
{
 8008290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008294:	f5ad 7d3a 	sub.w	sp, sp, #744	@ 0x2e8
 8008298:	af0a      	add	r7, sp, #40	@ 0x28
 800829a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800829e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80082a2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task1_handler */
	uint8_t buffer[500];
	//RAVEN set up variables - if there are things needed both for initiation and taking measurements, talk to me
	/* IMU */
	float IMU_reading[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}; // GX, GY, GZ, AX, AY, AZ
 80082a4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80082a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80082ac:	461a      	mov	r2, r3
 80082ae:	2300      	movs	r3, #0
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	6053      	str	r3, [r2, #4]
 80082b4:	6093      	str	r3, [r2, #8]
 80082b6:	60d3      	str	r3, [r2, #12]
 80082b8:	6113      	str	r3, [r2, #16]
 80082ba:	6153      	str	r3, [r2, #20]
	int8_t rslt;
	struct bmi2_dev bmi;
	struct bmi2_sens_data sensor_data = { { 0 } };
 80082bc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80082c0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80082c4:	4618      	mov	r0, r3
 80082c6:	2328      	movs	r3, #40	@ 0x28
 80082c8:	461a      	mov	r2, r3
 80082ca:	2100      	movs	r1, #0
 80082cc:	f011 f8e6 	bl	801949c <memset>
	/* IMU END */
	osStatus_t status = osMessageQueueGet(BMIQueueHandle, (const void*)&bmi, 0, 0);
 80082d0:	4b9f      	ldr	r3, [pc, #636]	@ (8008550 <task1_handler+0x2c0>)
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80082d8:	2300      	movs	r3, #0
 80082da:	2200      	movs	r2, #0
 80082dc:	f00c fa06 	bl	80146ec <osMessageQueueGet>
 80082e0:	f8c7 02bc 	str.w	r0, [r7, #700]	@ 0x2bc
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	2100      	movs	r1, #0
 80082ea:	2001      	movs	r0, #1
 80082ec:	f00b ff9c 	bl	8014228 <osThreadFlagsWait>

	  bmi160ReadAccelGyro(&imu_t);
 80082f0:	4898      	ldr	r0, [pc, #608]	@ (8008554 <task1_handler+0x2c4>)
 80082f2:	f7ff fa0f 	bl	8007714 <bmi160ReadAccelGyro>
	  rslt = bmi2_get_sensor_data(&sensor_data, &bmi);
 80082f6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80082fa:	f107 0318 	add.w	r3, r7, #24
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7f9 f8f2 	bl	80014ea <bmi2_get_sensor_data>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 32bb 	strb.w	r3, [r7, #699]	@ 0x2bb
	  bmi2_error_codes_print_result(rslt);
 800830c:	f997 32bb 	ldrsb.w	r3, [r7, #699]	@ 0x2bb
 8008310:	4618      	mov	r0, r3
 8008312:	f7fb fe19 	bl	8003f48 <bmi2_error_codes_print_result>

	  /* Converting lsb to meter per second squared for 16 bit accelerometer at 2G range. */
	  IMU_reading[5] = lsb_to_mps2(sensor_data.acc.x, (float)2, bmi.resolution);
 8008316:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800831a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800831e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008322:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008326:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800832a:	7b1b      	ldrb	r3, [r3, #12]
 800832c:	4619      	mov	r1, r3
 800832e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8008332:	4610      	mov	r0, r2
 8008334:	f7ff fe9c 	bl	8008070 <lsb_to_mps2>
 8008338:	eef0 7a40 	vmov.f32	s15, s0
 800833c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008340:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8008344:	edc3 7a05 	vstr	s15, [r3, #20]
	  IMU_reading[6] = lsb_to_mps2(sensor_data.acc.y, (float)2, bmi.resolution);
 8008348:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800834c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008350:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008354:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008358:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800835c:	7b1b      	ldrb	r3, [r3, #12]
 800835e:	4619      	mov	r1, r3
 8008360:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8008364:	4610      	mov	r0, r2
 8008366:	f7ff fe83 	bl	8008070 <lsb_to_mps2>
 800836a:	eef0 7a40 	vmov.f32	s15, s0
 800836e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008372:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8008376:	edc3 7a06 	vstr	s15, [r3, #24]
	  IMU_reading[4] = lsb_to_mps2(sensor_data.acc.z, (float)2, bmi.resolution);
 800837a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800837e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008382:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008386:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800838a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800838e:	7b1b      	ldrb	r3, [r3, #12]
 8008390:	4619      	mov	r1, r3
 8008392:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8008396:	4610      	mov	r0, r2
 8008398:	f7ff fe6a 	bl	8008070 <lsb_to_mps2>
 800839c:	eef0 7a40 	vmov.f32	s15, s0
 80083a0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80083a4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80083a8:	edc3 7a04 	vstr	s15, [r3, #16]

	  /* Converting lsb to degree per second for 16 bit gyro at 2000dps range. */
	  IMU_reading[1] = lsb_to_dps(sensor_data.gyr.x, (float)2000, bmi.resolution)*0.0174533;
 80083ac:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80083b0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80083b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80083b8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80083bc:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80083c0:	7b1b      	ldrb	r3, [r3, #12]
 80083c2:	4619      	mov	r1, r3
 80083c4:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8008558 <task1_handler+0x2c8>
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7ff fe99 	bl	8008100 <lsb_to_dps>
 80083ce:	ee10 3a10 	vmov	r3, s0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7f8 f890 	bl	80004f8 <__aeabi_f2d>
 80083d8:	a35b      	add	r3, pc, #364	@ (adr r3, 8008548 <task1_handler+0x2b8>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f8 f8e3 	bl	80005a8 <__aeabi_dmul>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	f7f8 fbb5 	bl	8000b58 <__aeabi_d2f>
 80083ee:	4602      	mov	r2, r0
 80083f0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80083f4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80083f8:	605a      	str	r2, [r3, #4]
	  IMU_reading[2] = lsb_to_dps(sensor_data.gyr.y, (float)2000, bmi.resolution)*0.0174533;
 80083fa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80083fe:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008402:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008406:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800840a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800840e:	7b1b      	ldrb	r3, [r3, #12]
 8008410:	4619      	mov	r1, r3
 8008412:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8008558 <task1_handler+0x2c8>
 8008416:	4610      	mov	r0, r2
 8008418:	f7ff fe72 	bl	8008100 <lsb_to_dps>
 800841c:	ee10 3a10 	vmov	r3, s0
 8008420:	4618      	mov	r0, r3
 8008422:	f7f8 f869 	bl	80004f8 <__aeabi_f2d>
 8008426:	a348      	add	r3, pc, #288	@ (adr r3, 8008548 <task1_handler+0x2b8>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f8 f8bc 	bl	80005a8 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4610      	mov	r0, r2
 8008436:	4619      	mov	r1, r3
 8008438:	f7f8 fb8e 	bl	8000b58 <__aeabi_d2f>
 800843c:	4602      	mov	r2, r0
 800843e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008442:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8008446:	609a      	str	r2, [r3, #8]
	  IMU_reading[0] = lsb_to_dps(sensor_data.gyr.z, (float)2000, bmi.resolution)*0.0174533;
 8008448:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800844c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008450:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008454:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008458:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800845c:	7b1b      	ldrb	r3, [r3, #12]
 800845e:	4619      	mov	r1, r3
 8008460:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8008558 <task1_handler+0x2c8>
 8008464:	4610      	mov	r0, r2
 8008466:	f7ff fe4b 	bl	8008100 <lsb_to_dps>
 800846a:	ee10 3a10 	vmov	r3, s0
 800846e:	4618      	mov	r0, r3
 8008470:	f7f8 f842 	bl	80004f8 <__aeabi_f2d>
 8008474:	a334      	add	r3, pc, #208	@ (adr r3, 8008548 <task1_handler+0x2b8>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f8 f895 	bl	80005a8 <__aeabi_dmul>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4610      	mov	r0, r2
 8008484:	4619      	mov	r1, r3
 8008486:	f7f8 fb67 	bl	8000b58 <__aeabi_d2f>
 800848a:	4602      	mov	r2, r0
 800848c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8008490:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8008494:	601a      	str	r2, [r3, #0]

	  sprintf((char*)buffer,"%f, %f, %f, %f, %f, %f\r\n",IMU_reading[0],IMU_reading[1],IMU_reading[2],IMU_reading[3],IMU_reading[4],IMU_reading[5]);
 8008496:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800849a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f8 f829 	bl	80004f8 <__aeabi_f2d>
 80084a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80084aa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80084ae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f8 f81f 	bl	80004f8 <__aeabi_f2d>
 80084ba:	4604      	mov	r4, r0
 80084bc:	460d      	mov	r5, r1
 80084be:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80084c2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7f8 f815 	bl	80004f8 <__aeabi_f2d>
 80084ce:	4680      	mov	r8, r0
 80084d0:	4689      	mov	r9, r1
 80084d2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80084d6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f80b 	bl	80004f8 <__aeabi_f2d>
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80084ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f8 f801 	bl	80004f8 <__aeabi_f2d>
 80084f6:	e9c7 0100 	strd	r0, r1, [r7]
 80084fa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80084fe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	4618      	mov	r0, r3
 8008506:	f7f7 fff7 	bl	80004f8 <__aeabi_f2d>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8008512:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008516:	ed97 7b00 	vldr	d7, [r7]
 800851a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800851e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8008522:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008526:	e9cd 4500 	strd	r4, r5, [sp]
 800852a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852e:	490b      	ldr	r1, [pc, #44]	@ (800855c <task1_handler+0x2cc>)
 8008530:	f010 feba 	bl	80192a8 <siprintf>
	  USB_transmit(buffer, sizeof(buffer));
 8008534:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8008538:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fd21 	bl	8007f84 <USB_transmit>
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8008542:	bf00      	nop
 8008544:	e6ce      	b.n	80082e4 <task1_handler+0x54>
 8008546:	bf00      	nop
 8008548:	22d4405f 	.word	0x22d4405f
 800854c:	3f91df47 	.word	0x3f91df47
 8008550:	20000704 	.word	0x20000704
 8008554:	20000578 	.word	0x20000578
 8008558:	44fa0000 	.word	0x44fa0000
 800855c:	0801d434 	.word	0x0801d434

08008560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a09      	ldr	r2, [pc, #36]	@ (8008594 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d101      	bne.n	8008576 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8008572:	f000 fba7 	bl	8008cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857e:	d105      	bne.n	800858c <HAL_TIM_PeriodElapsedCallback+0x2c>
		osThreadFlagsSet(Task1Handle, 0x01);
 8008580:	4b05      	ldr	r3, [pc, #20]	@ (8008598 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2101      	movs	r1, #1
 8008586:	4618      	mov	r0, r3
 8008588:	f00b fe00 	bl	801418c <osThreadFlagsSet>
  		sample_count = 0;
  		osThreadFlagsSet(Task1Handle, 0x01);
  	}*/
    }
  /* USER CODE END Callback 1 */
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40012c00 	.word	0x40012c00
 8008598:	200006fc 	.word	0x200006fc

0800859c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80085a0:	b672      	cpsid	i
}
 80085a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <Error_Handler+0x8>

080085a8 <LL_AHB2_GRP1_EnableClock>:
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80085b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4313      	orrs	r3, r2
 80085be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80085c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4013      	ands	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085cc:	68fb      	ldr	r3, [r7, #12]
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80085e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80085f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4013      	ands	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085fe:	68fb      	ldr	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008610:	2200      	movs	r2, #0
 8008612:	210f      	movs	r1, #15
 8008614:	f06f 0001 	mvn.w	r0, #1
 8008618:	f001 fef8 	bl	800a40c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b09c      	sub	sp, #112	@ 0x70
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008628:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	605a      	str	r2, [r3, #4]
 8008632:	609a      	str	r2, [r3, #8]
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008638:	f107 030c 	add.w	r3, r7, #12
 800863c:	2250      	movs	r2, #80	@ 0x50
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f010 ff2b 	bl	801949c <memset>
  if(hadc->Instance==ADC1)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a36      	ldr	r2, [pc, #216]	@ (8008724 <HAL_ADC_MspInit+0x104>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d164      	bne.n	800871a <HAL_ADC_MspInit+0xfa>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008654:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008656:	2318      	movs	r3, #24
 8008658:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800865a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800865e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008664:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008666:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800866a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 800866c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008670:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008672:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008676:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008678:	f107 030c 	add.w	r3, r7, #12
 800867c:	4618      	mov	r0, r3
 800867e:	f006 ffb2 	bl	800f5e6 <HAL_RCCEx_PeriphCLKConfig>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8008688:	f7ff ff88 	bl	800859c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800868c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008690:	f7ff ff8a 	bl	80085a8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008694:	2001      	movs	r0, #1
 8008696:	f7ff ff87 	bl	80085a8 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800869a:	2301      	movs	r3, #1
 800869c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800869e:	2303      	movs	r3, #3
 80086a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086a6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80086aa:	4619      	mov	r1, r3
 80086ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086b0:	f002 f9b6 	bl	800aa20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80086b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086b6:	4a1d      	ldr	r2, [pc, #116]	@ (800872c <HAL_ADC_MspInit+0x10c>)
 80086b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80086ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086bc:	2205      	movs	r2, #5
 80086be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086c0:	4b19      	ldr	r3, [pc, #100]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80086c6:	4b18      	ldr	r3, [pc, #96]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80086cc:	4b16      	ldr	r3, [pc, #88]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086ce:	2280      	movs	r2, #128	@ 0x80
 80086d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80086d2:	4b15      	ldr	r3, [pc, #84]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80086da:	4b13      	ldr	r3, [pc, #76]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80086e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80086e2:	4b11      	ldr	r3, [pc, #68]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086e4:	2220      	movs	r2, #32
 80086e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80086e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80086ee:	480e      	ldr	r0, [pc, #56]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 80086f0:	f001 feb4 	bl	800a45c <HAL_DMA_Init>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 80086fa:	f7ff ff4f 	bl	800859c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a09      	ldr	r2, [pc, #36]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 8008702:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008704:	4a08      	ldr	r2, [pc, #32]	@ (8008728 <HAL_ADC_MspInit+0x108>)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 800870a:	2200      	movs	r2, #0
 800870c:	2105      	movs	r1, #5
 800870e:	2012      	movs	r0, #18
 8008710:	f001 fe7c 	bl	800a40c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8008714:	2012      	movs	r0, #18
 8008716:	f001 fe93 	bl	800a440 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800871a:	bf00      	nop
 800871c:	3770      	adds	r7, #112	@ 0x70
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	50040000 	.word	0x50040000
 8008728:	200005f8 	.word	0x200005f8
 800872c:	40020008 	.word	0x40020008

08008730 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b09c      	sub	sp, #112	@ 0x70
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008738:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	609a      	str	r2, [r3, #8]
 8008744:	60da      	str	r2, [r3, #12]
 8008746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	2250      	movs	r2, #80	@ 0x50
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f010 fea3 	bl	801949c <memset>
  if(hi2c->Instance==I2C1)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1e      	ldr	r2, [pc, #120]	@ (80087d4 <HAL_I2C_MspInit+0xa4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d135      	bne.n	80087cc <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008760:	2304      	movs	r3, #4
 8008762:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008764:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8008768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800876a:	f107 030c 	add.w	r3, r7, #12
 800876e:	4618      	mov	r0, r3
 8008770:	f006 ff39 	bl	800f5e6 <HAL_RCCEx_PeriphCLKConfig>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800877a:	f7ff ff0f 	bl	800859c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800877e:	2002      	movs	r0, #2
 8008780:	f7ff ff12 	bl	80085a8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008784:	23c0      	movs	r3, #192	@ 0xc0
 8008786:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008788:	2312      	movs	r3, #18
 800878a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878c:	2300      	movs	r3, #0
 800878e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008790:	2300      	movs	r3, #0
 8008792:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008794:	2304      	movs	r3, #4
 8008796:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008798:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800879c:	4619      	mov	r1, r3
 800879e:	480e      	ldr	r0, [pc, #56]	@ (80087d8 <HAL_I2C_MspInit+0xa8>)
 80087a0:	f002 f93e 	bl	800aa20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80087a4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80087a8:	f7ff ff17 	bl	80085da <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80087ac:	2200      	movs	r2, #0
 80087ae:	2105      	movs	r1, #5
 80087b0:	201e      	movs	r0, #30
 80087b2:	f001 fe2b 	bl	800a40c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80087b6:	201e      	movs	r0, #30
 80087b8:	f001 fe42 	bl	800a440 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80087bc:	2200      	movs	r2, #0
 80087be:	2105      	movs	r1, #5
 80087c0:	201f      	movs	r0, #31
 80087c2:	f001 fe23 	bl	800a40c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80087c6:	201f      	movs	r0, #31
 80087c8:	f001 fe3a 	bl	800a440 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80087cc:	bf00      	nop
 80087ce:	3770      	adds	r7, #112	@ 0x70
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40005400 	.word	0x40005400
 80087d8:	48000400 	.word	0x48000400

080087dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ec:	d10a      	bne.n	8008804 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80087ee:	2001      	movs	r0, #1
 80087f0:	f7ff fef3 	bl	80085da <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80087f4:	2200      	movs	r2, #0
 80087f6:	2105      	movs	r1, #5
 80087f8:	201c      	movs	r0, #28
 80087fa:	f001 fe07 	bl	800a40c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80087fe:	201c      	movs	r0, #28
 8008800:	f001 fe1e 	bl	800a440 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008818:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800881a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4313      	orrs	r3, r2
 8008822:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008828:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4013      	ands	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08e      	sub	sp, #56	@ 0x38
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8008856:	2200      	movs	r2, #0
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	2019      	movs	r0, #25
 800885c:	f001 fdd6 	bl	800a40c <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008860:	2019      	movs	r0, #25
 8008862:	f001 fded 	bl	800a440 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008866:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800886a:	f7ff ffcf 	bl	800880c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800886e:	f107 020c 	add.w	r2, r7, #12
 8008872:	f107 0310 	add.w	r3, r7, #16
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f006 fc31 	bl	800f0e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800887e:	f006 fc19 	bl	800f0b4 <HAL_RCC_GetPCLK2Freq>
 8008882:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	4a21      	ldr	r2, [pc, #132]	@ (800890c <HAL_InitTick+0xcc>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	0c9b      	lsrs	r3, r3, #18
 800888e:	3b01      	subs	r3, #1
 8008890:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008892:	4b1f      	ldr	r3, [pc, #124]	@ (8008910 <HAL_InitTick+0xd0>)
 8008894:	4a1f      	ldr	r2, [pc, #124]	@ (8008914 <HAL_InitTick+0xd4>)
 8008896:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8008898:	4b1d      	ldr	r3, [pc, #116]	@ (8008910 <HAL_InitTick+0xd0>)
 800889a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800889e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80088a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008910 <HAL_InitTick+0xd0>)
 80088a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80088a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008910 <HAL_InitTick+0xd0>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088ac:	4b18      	ldr	r3, [pc, #96]	@ (8008910 <HAL_InitTick+0xd0>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80088b2:	4817      	ldr	r0, [pc, #92]	@ (8008910 <HAL_InitTick+0xd0>)
 80088b4:	f007 f91e 	bl	800faf4 <HAL_TIM_Base_Init>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80088be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d11b      	bne.n	80088fe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80088c6:	4812      	ldr	r0, [pc, #72]	@ (8008910 <HAL_InitTick+0xd0>)
 80088c8:	f007 f96c 	bl	800fba4 <HAL_TIM_Base_Start_IT>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80088d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d111      	bne.n	80088fe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80088da:	2019      	movs	r0, #25
 80088dc:	f001 fdb0 	bl	800a440 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d808      	bhi.n	80088f8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80088e6:	2200      	movs	r2, #0
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	2019      	movs	r0, #25
 80088ec:	f001 fd8e 	bl	800a40c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80088f0:	4a09      	ldr	r2, [pc, #36]	@ (8008918 <HAL_InitTick+0xd8>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	e002      	b.n	80088fe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 80088fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8008902:	4618      	mov	r0, r3
 8008904:	3738      	adds	r7, #56	@ 0x38
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	431bde83 	.word	0x431bde83
 8008910:	20000710 	.word	0x20000710
 8008914:	40012c00 	.word	0x40012c00
 8008918:	20000020 	.word	0x20000020

0800891c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008920:	bf00      	nop
 8008922:	e7fd      	b.n	8008920 <NMI_Handler+0x4>

08008924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <HardFault_Handler+0x4>

0800892c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008930:	bf00      	nop
 8008932:	e7fd      	b.n	8008930 <MemManage_Handler+0x4>

08008934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008934:	b480      	push	{r7}
 8008936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <BusFault_Handler+0x4>

0800893c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008940:	bf00      	nop
 8008942:	e7fd      	b.n	8008940 <UsageFault_Handler+0x4>

08008944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008948:	bf00      	nop
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008958:	4802      	ldr	r0, [pc, #8]	@ (8008964 <DMA1_Channel1_IRQHandler+0x10>)
 800895a:	f001 ff01 	bl	800a760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800895e:	bf00      	nop
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200005f8 	.word	0x200005f8

08008968 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800896c:	4802      	ldr	r0, [pc, #8]	@ (8008978 <ADC1_IRQHandler+0x10>)
 800896e:	f000 fdb1 	bl	80094d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8008972:	bf00      	nop
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000594 	.word	0x20000594

0800897c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008980:	4802      	ldr	r0, [pc, #8]	@ (800898c <USB_LP_IRQHandler+0x10>)
 8008982:	f003 fea0 	bl	800c6c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8008986:	bf00      	nop
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	2000aa2c 	.word	0x2000aa2c

08008990 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008994:	4802      	ldr	r0, [pc, #8]	@ (80089a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8008996:	f007 f953 	bl	800fc40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800899a:	bf00      	nop
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000710 	.word	0x20000710

080089a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80089a8:	4802      	ldr	r0, [pc, #8]	@ (80089b4 <TIM2_IRQHandler+0x10>)
 80089aa:	f007 f949 	bl	800fc40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80089ae:	bf00      	nop
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200006ac 	.word	0x200006ac

080089b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80089bc:	4802      	ldr	r0, [pc, #8]	@ (80089c8 <I2C1_EV_IRQHandler+0x10>)
 80089be:	f002 fc61 	bl	800b284 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80089c2:	bf00      	nop
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000658 	.word	0x20000658

080089cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80089d0:	4802      	ldr	r0, [pc, #8]	@ (80089dc <I2C1_ER_IRQHandler+0x10>)
 80089d2:	f002 fc71 	bl	800b2b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80089d6:	bf00      	nop
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000658 	.word	0x20000658

080089e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  return 1;
 80089e4:	2301      	movs	r3, #1
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <_kill>:

int _kill(int pid, int sig)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80089fa:	f010 fdff 	bl	80195fc <__errno>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2216      	movs	r2, #22
 8008a02:	601a      	str	r2, [r3, #0]
  return -1;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <_exit>:

void _exit (int status)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008a18:	f04f 31ff 	mov.w	r1, #4294967295
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff ffe7 	bl	80089f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <_exit+0x12>

08008a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b086      	sub	sp, #24
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	e00a      	b.n	8008a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008a38:	f3af 8000 	nop.w
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	60ba      	str	r2, [r7, #8]
 8008a44:	b2ca      	uxtb	r2, r1
 8008a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	dbf0      	blt.n	8008a38 <_read+0x12>
  }

  return len;
 8008a56:	687b      	ldr	r3, [r7, #4]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e009      	b.n	8008a86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	60ba      	str	r2, [r7, #8]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3301      	adds	r3, #1
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	dbf1      	blt.n	8008a72 <_write+0x12>
  }
  return len;
 8008a8e:	687b      	ldr	r3, [r7, #4]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <_close>:

int _close(int file)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <_isatty>:

int _isatty(int file)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008ad8:	2301      	movs	r3, #1
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b08:	4a14      	ldr	r2, [pc, #80]	@ (8008b5c <_sbrk+0x5c>)
 8008b0a:	4b15      	ldr	r3, [pc, #84]	@ (8008b60 <_sbrk+0x60>)
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b14:	4b13      	ldr	r3, [pc, #76]	@ (8008b64 <_sbrk+0x64>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d102      	bne.n	8008b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b1c:	4b11      	ldr	r3, [pc, #68]	@ (8008b64 <_sbrk+0x64>)
 8008b1e:	4a12      	ldr	r2, [pc, #72]	@ (8008b68 <_sbrk+0x68>)
 8008b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b22:	4b10      	ldr	r3, [pc, #64]	@ (8008b64 <_sbrk+0x64>)
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d207      	bcs.n	8008b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b30:	f010 fd64 	bl	80195fc <__errno>
 8008b34:	4603      	mov	r3, r0
 8008b36:	220c      	movs	r2, #12
 8008b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3e:	e009      	b.n	8008b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b40:	4b08      	ldr	r3, [pc, #32]	@ (8008b64 <_sbrk+0x64>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b46:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <_sbrk+0x64>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	4a05      	ldr	r2, [pc, #20]	@ (8008b64 <_sbrk+0x64>)
 8008b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b52:	68fb      	ldr	r3, [r7, #12]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20030000 	.word	0x20030000
 8008b60:	00000400 	.word	0x00000400
 8008b64:	2000075c 	.word	0x2000075c
 8008b68:	2000b078 	.word	0x2000b078

08008b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8008b70:	4b24      	ldr	r3, [pc, #144]	@ (8008c04 <SystemInit+0x98>)
 8008b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b76:	4a23      	ldr	r2, [pc, #140]	@ (8008c04 <SystemInit+0x98>)
 8008b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8008b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b94:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8008b98:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8008b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ba4:	4b18      	ldr	r3, [pc, #96]	@ (8008c08 <SystemInit+0x9c>)
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8008baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bb6:	f023 0305 	bic.w	r3, r3, #5
 8008bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bca:	f023 0301 	bic.w	r3, r3, #1
 8008bce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8008bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8008c0c <SystemInit+0xa0>)
 8008bd8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8008bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bde:	4a0b      	ldr	r2, [pc, #44]	@ (8008c0c <SystemInit+0xa0>)
 8008be0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	619a      	str	r2, [r3, #24]
}
 8008bfa:	bf00      	nop
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	e000ed00 	.word	0xe000ed00
 8008c08:	faf6fefb 	.word	0xfaf6fefb
 8008c0c:	22041000 	.word	0x22041000

08008c10 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8008c10:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c12:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c14:	3304      	adds	r3, #4

08008c16 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c16:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c18:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8008c1a:	d3f9      	bcc.n	8008c10 <CopyDataInit>
  bx lr
 8008c1c:	4770      	bx	lr

08008c1e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8008c1e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8008c20:	3004      	adds	r0, #4

08008c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8008c22:	4288      	cmp	r0, r1
  bcc FillZerobss
 8008c24:	d3fb      	bcc.n	8008c1e <FillZerobss>
  bx lr
 8008c26:	4770      	bx	lr

08008c28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c28:	480c      	ldr	r0, [pc, #48]	@ (8008c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c2c:	f7ff ff9e 	bl	8008b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8008c30:	480b      	ldr	r0, [pc, #44]	@ (8008c60 <LoopForever+0x6>)
 8008c32:	490c      	ldr	r1, [pc, #48]	@ (8008c64 <LoopForever+0xa>)
 8008c34:	4a0c      	ldr	r2, [pc, #48]	@ (8008c68 <LoopForever+0xe>)
 8008c36:	2300      	movs	r3, #0
 8008c38:	f7ff ffed 	bl	8008c16 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008c3c:	480b      	ldr	r0, [pc, #44]	@ (8008c6c <LoopForever+0x12>)
 8008c3e:	490c      	ldr	r1, [pc, #48]	@ (8008c70 <LoopForever+0x16>)
 8008c40:	4a0c      	ldr	r2, [pc, #48]	@ (8008c74 <LoopForever+0x1a>)
 8008c42:	2300      	movs	r3, #0
 8008c44:	f7ff ffe7 	bl	8008c16 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8008c48:	480b      	ldr	r0, [pc, #44]	@ (8008c78 <LoopForever+0x1e>)
 8008c4a:	490c      	ldr	r1, [pc, #48]	@ (8008c7c <LoopForever+0x22>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f7ff ffe8 	bl	8008c22 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008c52:	f010 fcd9 	bl	8019608 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008c56:	f7fe ff75 	bl	8007b44 <main>

08008c5a <LoopForever>:

LoopForever:
  b LoopForever
 8008c5a:	e7fe      	b.n	8008c5a <LoopForever>
  ldr   r0, =_estack
 8008c5c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8008c60:	20000008 	.word	0x20000008
 8008c64:	200002e8 	.word	0x200002e8
 8008c68:	0801fa28 	.word	0x0801fa28
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008c6c:	20030000 	.word	0x20030000
 8008c70:	20030000 	.word	0x20030000
 8008c74:	0801fd08 	.word	0x0801fd08
  INIT_BSS _sbss, _ebss
 8008c78:	200002e8 	.word	0x200002e8
 8008c7c:	2000b074 	.word	0x2000b074

08008c80 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c80:	e7fe      	b.n	8008c80 <AES1_IRQHandler>
	...

08008c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <HAL_Init+0x3c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a0b      	ldr	r2, [pc, #44]	@ (8008cc0 <HAL_Init+0x3c>)
 8008c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c9a:	2003      	movs	r0, #3
 8008c9c:	f001 fbab 	bl	800a3f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ca0:	200f      	movs	r0, #15
 8008ca2:	f7ff fdcd 	bl	8008840 <HAL_InitTick>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	71fb      	strb	r3, [r7, #7]
 8008cb0:	e001      	b.n	8008cb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008cb2:	f7ff fcab 	bl	800860c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	58004000 	.word	0x58004000

08008cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008cc8:	4b06      	ldr	r3, [pc, #24]	@ (8008ce4 <HAL_IncTick+0x20>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <HAL_IncTick+0x24>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	4a04      	ldr	r2, [pc, #16]	@ (8008ce8 <HAL_IncTick+0x24>)
 8008cd6:	6013      	str	r3, [r2, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20000024 	.word	0x20000024
 8008ce8:	20000760 	.word	0x20000760

08008cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
  return uwTick;
 8008cf0:	4b03      	ldr	r3, [pc, #12]	@ (8008d00 <HAL_GetTick+0x14>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20000760 	.word	0x20000760

08008d04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008d08:	4b03      	ldr	r3, [pc, #12]	@ (8008d18 <HAL_GetTickPrio+0x14>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000020 	.word	0x20000020

08008d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d24:	f7ff ffe2 	bl	8008cec <HAL_GetTick>
 8008d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d005      	beq.n	8008d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <HAL_Delay+0x44>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d42:	bf00      	nop
 8008d44:	f7ff ffd2 	bl	8008cec <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d8f7      	bhi.n	8008d44 <HAL_Delay+0x28>
  {
  }
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000024 	.word	0x20000024

08008d64 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	609a      	str	r2, [r3, #8]
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3360      	adds	r3, #96	@ 0x60
 8008dde:	461a      	mov	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <LL_ADC_SetOffset+0x44>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	03fff000 	.word	0x03fff000

08008e14 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3360      	adds	r3, #96	@ 0x60
 8008e22:	461a      	mov	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3360      	adds	r3, #96	@ 0x60
 8008e50:	461a      	mov	r2, r3
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	431a      	orrs	r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008e8e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3330      	adds	r3, #48	@ 0x30
 8008eac:	461a      	mov	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	0a1b      	lsrs	r3, r3, #8
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	f003 030c 	and.w	r3, r3, #12
 8008eb8:	4413      	add	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 031f 	and.w	r3, r3, #31
 8008ec6:	211f      	movs	r1, #31
 8008ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	0e9b      	lsrs	r3, r3, #26
 8008ed4:	f003 011f 	and.w	r1, r3, #31
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008ee8:	bf00      	nop
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b087      	sub	sp, #28
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3314      	adds	r3, #20
 8008f46:	461a      	mov	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	0e5b      	lsrs	r3, r3, #25
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	4413      	add	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	0d1b      	lsrs	r3, r3, #20
 8008f5e:	f003 031f 	and.w	r3, r3, #31
 8008f62:	2107      	movs	r1, #7
 8008f64:	fa01 f303 	lsl.w	r3, r1, r3
 8008f68:	43db      	mvns	r3, r3
 8008f6a:	401a      	ands	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	0d1b      	lsrs	r3, r3, #20
 8008f70:	f003 031f 	and.w	r3, r3, #31
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008f80:	bf00      	nop
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	401a      	ands	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f003 0318 	and.w	r3, r3, #24
 8008fae:	4908      	ldr	r1, [pc, #32]	@ (8008fd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008fb0:	40d9      	lsrs	r1, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	400b      	ands	r3, r1
 8008fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008fc2:	bf00      	nop
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	0007ffff 	.word	0x0007ffff

08008fd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008fe4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6093      	str	r3, [r2, #8]
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900c:	d101      	bne.n	8009012 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009030:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009034:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800905c:	d101      	bne.n	8009062 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009080:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009084:	f043 0201 	orr.w	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <LL_ADC_IsEnabled+0x18>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <LL_ADC_IsEnabled+0x1a>
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80090d2:	f043 0204 	orr.w	r2, r3, #4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d101      	bne.n	80090fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b08      	cmp	r3, #8
 800911e:	d101      	bne.n	8009124 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009120:	2301      	movs	r3, #1
 8009122:	e000      	b.n	8009126 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
	...

08009134 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8009140:	2300      	movs	r3, #0
 8009142:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009144:	2300      	movs	r3, #0
 8009146:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e12e      	b.n	80093b0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fa5d 	bl	8008620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ff3d 	bl	8008ff8 <LL_ADC_IsDeepPowerDownEnabled>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d004      	beq.n	800918e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff ff23 	bl	8008fd4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff ff58 	bl	8009048 <LL_ADC_IsInternalRegulatorEnabled>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d115      	bne.n	80091ca <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff ff3c 	bl	8009020 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80091a8:	4b83      	ldr	r3, [pc, #524]	@ (80093b8 <HAL_ADC_Init+0x284>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	099b      	lsrs	r3, r3, #6
 80091ae:	4a83      	ldr	r2, [pc, #524]	@ (80093bc <HAL_ADC_Init+0x288>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	099b      	lsrs	r3, r3, #6
 80091b6:	3301      	adds	r3, #1
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091bc:	e002      	b.n	80091c4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f9      	bne.n	80091be <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff ff3a 	bl	8009048 <LL_ADC_IsInternalRegulatorEnabled>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10d      	bne.n	80091f6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091de:	f043 0210 	orr.w	r2, r3, #16
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ea:	f043 0201 	orr.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff ff73 	bl	80090e6 <LL_ADC_REG_IsConversionOngoing>
 8009200:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b00      	cmp	r3, #0
 800920c:	f040 80c7 	bne.w	800939e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f040 80c3 	bne.w	800939e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800921c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009220:	f043 0202 	orr.w	r2, r3, #2
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff ff33 	bl	8009098 <LL_ADC_IsEnabled>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009238:	4861      	ldr	r0, [pc, #388]	@ (80093c0 <HAL_ADC_Init+0x28c>)
 800923a:	f7ff ff2d 	bl	8009098 <LL_ADC_IsEnabled>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4619      	mov	r1, r3
 800924a:	485e      	ldr	r0, [pc, #376]	@ (80093c4 <HAL_ADC_Init+0x290>)
 800924c:	f7ff fd8a 	bl	8008d64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7e5b      	ldrb	r3, [r3, #25]
 8009254:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800925a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009260:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009266:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800926e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8009270:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	4313      	orrs	r3, r2
 8009276:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d106      	bne.n	8009290 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009286:	3b01      	subs	r3, #1
 8009288:	045b      	lsls	r3, r3, #17
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	4313      	orrs	r3, r2
 800928e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	2b00      	cmp	r3, #0
 8009296:	d009      	beq.n	80092ac <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	4b45      	ldr	r3, [pc, #276]	@ (80093c8 <HAL_ADC_Init+0x294>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	69b9      	ldr	r1, [r7, #24]
 80092bc:	430b      	orrs	r3, r1
 80092be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff ff0e 	bl	80090e6 <LL_ADC_REG_IsConversionOngoing>
 80092ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff ff1b 	bl	800910c <LL_ADC_INJ_IsConversionOngoing>
 80092d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d13d      	bne.n	800935a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d13a      	bne.n	800935a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80092e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80092f2:	4313      	orrs	r3, r2
 80092f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009300:	f023 0302 	bic.w	r3, r3, #2
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6812      	ldr	r2, [r2, #0]
 8009308:	69b9      	ldr	r1, [r7, #24]
 800930a:	430b      	orrs	r3, r1
 800930c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009314:	2b01      	cmp	r3, #1
 8009316:	d118      	bne.n	800934a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009322:	f023 0304 	bic.w	r3, r3, #4
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800932e:	4311      	orrs	r1, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009334:	4311      	orrs	r1, r2
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800933a:	430a      	orrs	r2, r1
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	611a      	str	r2, [r3, #16]
 8009348:	e007      	b.n	800935a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0201 	bic.w	r2, r2, #1
 8009358:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d10c      	bne.n	800937c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009368:	f023 010f 	bic.w	r1, r3, #15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	1e5a      	subs	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	631a      	str	r2, [r3, #48]	@ 0x30
 800937a:	e007      	b.n	800938c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 020f 	bic.w	r2, r2, #15
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	655a      	str	r2, [r3, #84]	@ 0x54
 800939c:	e007      	b.n	80093ae <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	f043 0210 	orr.w	r2, r3, #16
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80093ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2000001c 	.word	0x2000001c
 80093bc:	053e2d63 	.word	0x053e2d63
 80093c0:	50040000 	.word	0x50040000
 80093c4:	50040300 	.word	0x50040300
 80093c8:	fff0c007 	.word	0xfff0c007

080093cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fe82 	bl	80090e6 <LL_ADC_REG_IsConversionOngoing>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d167      	bne.n	80094b8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_ADC_Start_DMA+0x2a>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e063      	b.n	80094be <HAL_ADC_Start_DMA+0xf2>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 fe0c 	bl	800a01c <ADC_Enable>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d14f      	bne.n	80094ae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009412:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009416:	f023 0301 	bic.w	r3, r3, #1
 800941a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009432:	f023 0206 	bic.w	r2, r3, #6
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	659a      	str	r2, [r3, #88]	@ 0x58
 800943a:	e002      	b.n	8009442 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009446:	4a20      	ldr	r2, [pc, #128]	@ (80094c8 <HAL_ADC_Start_DMA+0xfc>)
 8009448:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800944e:	4a1f      	ldr	r2, [pc, #124]	@ (80094cc <HAL_ADC_Start_DMA+0x100>)
 8009450:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009456:	4a1e      	ldr	r2, [pc, #120]	@ (80094d0 <HAL_ADC_Start_DMA+0x104>)
 8009458:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	221c      	movs	r2, #28
 8009460:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0210 	orr.w	r2, r2, #16
 8009478:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0201 	orr.w	r2, r2, #1
 8009488:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3340      	adds	r3, #64	@ 0x40
 8009494:	4619      	mov	r1, r3
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f001 f887 	bl	800a5ac <HAL_DMA_Start_IT>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7ff fe09 	bl	80090be <LL_ADC_REG_StartConversion>
 80094ac:	e006      	b.n	80094bc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80094b6:	e001      	b.n	80094bc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
 80094ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	0800a111 	.word	0x0800a111
 80094cc:	0800a1e9 	.word	0x0800a1e9
 80094d0:	0800a205 	.word	0x0800a205

080094d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80094dc:	2300      	movs	r3, #0
 80094de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d017      	beq.n	800952a <HAL_ADC_IRQHandler+0x56>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d012      	beq.n	800952a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b00      	cmp	r3, #0
 800950e:	d105      	bne.n	800951c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009514:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 feb3 	bl	800a288 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2202      	movs	r2, #2
 8009528:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <HAL_ADC_IRQHandler+0x6a>
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f003 0304 	and.w	r3, r3, #4
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009544:	2b00      	cmp	r3, #0
 8009546:	d05d      	beq.n	8009604 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d058      	beq.n	8009604 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009556:	f003 0310 	and.w	r3, r3, #16
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009562:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fc81 	bl	8008e76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d03d      	beq.n	80095f6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009588:	d035      	beq.n	80095f6 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b08      	cmp	r3, #8
 8009596:	d12e      	bne.n	80095f6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff fda2 	bl	80090e6 <LL_ADC_REG_IsConversionOngoing>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11a      	bne.n	80095de <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 020c 	bic.w	r2, r2, #12
 80095b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d112      	bne.n	80095f6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d4:	f043 0201 	orr.w	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	655a      	str	r2, [r3, #84]	@ 0x54
 80095dc:	e00b      	b.n	80095f6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e2:	f043 0210 	orr.w	r2, r3, #16
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ee:	f043 0201 	orr.w	r2, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f922 	bl	8009840 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	220c      	movs	r2, #12
 8009602:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_ADC_IRQHandler+0x144>
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800961e:	2b00      	cmp	r3, #0
 8009620:	d074      	beq.n	800970c <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d06f      	beq.n	800970c <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	d105      	bne.n	8009644 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fc61 	bl	8008f10 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800964e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fc0e 	bl	8008e76 <LL_ADC_REG_IsTriggerSourceSWStart>
 800965a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d049      	beq.n	80096fe <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <HAL_ADC_IRQHandler+0x1b0>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d041      	beq.n	80096fe <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009680:	2b00      	cmp	r3, #0
 8009682:	d13c      	bne.n	80096fe <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800968e:	2b40      	cmp	r3, #64	@ 0x40
 8009690:	d135      	bne.n	80096fe <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d12e      	bne.n	80096fe <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff fd31 	bl	800910c <LL_ADC_INJ_IsConversionOngoing>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11a      	bne.n	80096e6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80096be:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d112      	bne.n	80096fe <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096dc:	f043 0201 	orr.w	r2, r3, #1
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80096e4:	e00b      	b.n	80096fe <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ea:	f043 0210 	orr.w	r2, r3, #16
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f6:	f043 0201 	orr.w	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fd9a 	bl	800a238 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2260      	movs	r2, #96	@ 0x60
 800970a:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009712:	2b00      	cmp	r3, #0
 8009714:	d011      	beq.n	800973a <HAL_ADC_IRQHandler+0x266>
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00c      	beq.n	800973a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f89b 	bl	8009868 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2280      	movs	r2, #128	@ 0x80
 8009738:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009740:	2b00      	cmp	r3, #0
 8009742:	d012      	beq.n	800976a <HAL_ADC_IRQHandler+0x296>
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00d      	beq.n	800976a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009752:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fd80 	bl	800a260 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009768:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009770:	2b00      	cmp	r3, #0
 8009772:	d012      	beq.n	800979a <HAL_ADC_IRQHandler+0x2c6>
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009782:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fd72 	bl	800a274 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009798:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f003 0310 	and.w	r3, r3, #16
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d02b      	beq.n	80097fc <HAL_ADC_IRQHandler+0x328>
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f003 0310 	and.w	r3, r3, #16
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d026      	beq.n	80097fc <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80097b6:	2301      	movs	r3, #1
 80097b8:	61fb      	str	r3, [r7, #28]
 80097ba:	e009      	b.n	80097d0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff fb97 	bl	8008ef4 <LL_ADC_REG_GetDMATransfer>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80097cc:	2301      	movs	r3, #1
 80097ce:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d10e      	bne.n	80097f4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097da:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e6:	f043 0202 	orr.w	r2, r3, #2
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f844 	bl	800987c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2210      	movs	r2, #16
 80097fa:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009802:	2b00      	cmp	r3, #0
 8009804:	d018      	beq.n	8009838 <HAL_ADC_IRQHandler+0x364>
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800980c:	2b00      	cmp	r3, #0
 800980e:	d013      	beq.n	8009838 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009814:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009820:	f043 0208 	orr.w	r2, r3, #8
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009830:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fd0a 	bl	800a24c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8009838:	bf00      	nop
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b0b6      	sub	sp, #216	@ 0xd8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_ADC_ConfigChannel+0x22>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e39f      	b.n	8009ff2 <HAL_ADC_ConfigChannel+0x762>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fc11 	bl	80090e6 <LL_ADC_REG_IsConversionOngoing>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f040 8384 	bne.w	8009fd4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6859      	ldr	r1, [r3, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	f7ff fadf 	bl	8008e9c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fbff 	bl	80090e6 <LL_ADC_REG_IsConversionOngoing>
 80098e8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fc0b 	bl	800910c <LL_ADC_INJ_IsConversionOngoing>
 80098f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80098fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f040 81a6 	bne.w	8009c50 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009908:	2b00      	cmp	r3, #0
 800990a:	f040 81a1 	bne.w	8009c50 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	6819      	ldr	r1, [r3, #0]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	461a      	mov	r2, r3
 800991c:	f7ff fb0b 	bl	8008f36 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695a      	ldr	r2, [r3, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	08db      	lsrs	r3, r3, #3
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00a      	beq.n	8009958 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6919      	ldr	r1, [r3, #16]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009952:	f7ff fa3b 	bl	8008dcc <LL_ADC_SetOffset>
 8009956:	e17b      	b.n	8009c50 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fa58 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009964:	4603      	mov	r3, r0
 8009966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <HAL_ADC_ConfigChannel+0xf4>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2100      	movs	r1, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff fa4d 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 800997a:	4603      	mov	r3, r0
 800997c:	0e9b      	lsrs	r3, r3, #26
 800997e:	f003 021f 	and.w	r2, r3, #31
 8009982:	e01e      	b.n	80099c2 <HAL_ADC_ConfigChannel+0x132>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fa42 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009990:	4603      	mov	r3, r0
 8009992:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800999a:	fa93 f3a3 	rbit	r3, r3
 800999e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80099a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80099a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80099aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80099b2:	2320      	movs	r3, #32
 80099b4:	e004      	b.n	80099c0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80099b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ba:	fab3 f383 	clz	r3, r3
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <HAL_ADC_ConfigChannel+0x14a>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	0e9b      	lsrs	r3, r3, #26
 80099d4:	f003 031f 	and.w	r3, r3, #31
 80099d8:	e018      	b.n	8009a0c <HAL_ADC_ConfigChannel+0x17c>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80099e6:	fa93 f3a3 	rbit	r3, r3
 80099ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80099ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80099f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80099fe:	2320      	movs	r3, #32
 8009a00:	e004      	b.n	8009a0c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8009a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a06:	fab3 f383 	clz	r3, r3
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d106      	bne.n	8009a1e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fa11 	bl	8008e40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2101      	movs	r1, #1
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff f9f5 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <HAL_ADC_ConfigChannel+0x1ba>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2101      	movs	r1, #1
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff f9ea 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009a40:	4603      	mov	r3, r0
 8009a42:	0e9b      	lsrs	r3, r3, #26
 8009a44:	f003 021f 	and.w	r2, r3, #31
 8009a48:	e01e      	b.n	8009a88 <HAL_ADC_ConfigChannel+0x1f8>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2101      	movs	r1, #1
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff f9df 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a60:	fa93 f3a3 	rbit	r3, r3
 8009a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8009a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8009a78:	2320      	movs	r3, #32
 8009a7a:	e004      	b.n	8009a86 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8009a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a80:	fab3 f383 	clz	r3, r3
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <HAL_ADC_ConfigChannel+0x210>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	0e9b      	lsrs	r3, r3, #26
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	e018      	b.n	8009ad2 <HAL_ADC_ConfigChannel+0x242>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009aac:	fa93 f3a3 	rbit	r3, r3
 8009ab0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8009abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	e004      	b.n	8009ad2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8009ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009acc:	fab3 f383 	clz	r3, r3
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d106      	bne.n	8009ae4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2200      	movs	r2, #0
 8009adc:	2101      	movs	r1, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff f9ae 	bl	8008e40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2102      	movs	r1, #2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff f992 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <HAL_ADC_ConfigChannel+0x280>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2102      	movs	r1, #2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff f987 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009b06:	4603      	mov	r3, r0
 8009b08:	0e9b      	lsrs	r3, r3, #26
 8009b0a:	f003 021f 	and.w	r2, r3, #31
 8009b0e:	e01e      	b.n	8009b4e <HAL_ADC_ConfigChannel+0x2be>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2102      	movs	r1, #2
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff f97c 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b26:	fa93 f3a3 	rbit	r3, r3
 8009b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8009b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8009b3e:	2320      	movs	r3, #32
 8009b40:	e004      	b.n	8009b4c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8009b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b46:	fab3 f383 	clz	r3, r3
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d105      	bne.n	8009b66 <HAL_ADC_ConfigChannel+0x2d6>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	0e9b      	lsrs	r3, r3, #26
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	e016      	b.n	8009b94 <HAL_ADC_ConfigChannel+0x304>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b72:	fa93 f3a3 	rbit	r3, r3
 8009b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009b78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8009b86:	2320      	movs	r3, #32
 8009b88:	e004      	b.n	8009b94 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8009b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b8e:	fab3 f383 	clz	r3, r3
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d106      	bne.n	8009ba6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2102      	movs	r1, #2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff f94d 	bl	8008e40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2103      	movs	r1, #3
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff f931 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <HAL_ADC_ConfigChannel+0x342>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2103      	movs	r1, #3
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff f926 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	0e9b      	lsrs	r3, r3, #26
 8009bcc:	f003 021f 	and.w	r2, r3, #31
 8009bd0:	e017      	b.n	8009c02 <HAL_ADC_ConfigChannel+0x372>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2103      	movs	r1, #3
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff f91b 	bl	8008e14 <LL_ADC_GetOffsetChannel>
 8009bde:	4603      	mov	r3, r0
 8009be0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be4:	fa93 f3a3 	rbit	r3, r3
 8009be8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8009bf4:	2320      	movs	r3, #32
 8009bf6:	e003      	b.n	8009c00 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8009bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bfa:	fab3 f383 	clz	r3, r3
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	461a      	mov	r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <HAL_ADC_ConfigChannel+0x38a>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	0e9b      	lsrs	r3, r3, #26
 8009c14:	f003 031f 	and.w	r3, r3, #31
 8009c18:	e011      	b.n	8009c3e <HAL_ADC_ConfigChannel+0x3ae>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c22:	fa93 f3a3 	rbit	r3, r3
 8009c26:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8009c32:	2320      	movs	r3, #32
 8009c34:	e003      	b.n	8009c3e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8009c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c38:	fab3 f383 	clz	r3, r3
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d106      	bne.n	8009c50 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	2103      	movs	r1, #3
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff f8f8 	bl	8008e40 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fa1f 	bl	8009098 <LL_ADC_IsEnabled>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 81c2 	bne.w	8009fe6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	6819      	ldr	r1, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7ff f98c 	bl	8008f8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	4a8e      	ldr	r2, [pc, #568]	@ (8009eb4 <HAL_ADC_ConfigChannel+0x624>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	f040 8130 	bne.w	8009ee0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10b      	bne.n	8009ca8 <HAL_ADC_ConfigChannel+0x418>
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	0e9b      	lsrs	r3, r3, #26
 8009c96:	3301      	adds	r3, #1
 8009c98:	f003 031f 	and.w	r3, r3, #31
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	bf94      	ite	ls
 8009ca0:	2301      	movls	r3, #1
 8009ca2:	2300      	movhi	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	e019      	b.n	8009cdc <HAL_ADC_ConfigChannel+0x44c>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cb0:	fa93 f3a3 	rbit	r3, r3
 8009cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cb8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8009cc0:	2320      	movs	r3, #32
 8009cc2:	e003      	b.n	8009ccc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8009cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cc6:	fab3 f383 	clz	r3, r3
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	3301      	adds	r3, #1
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	bf94      	ite	ls
 8009cd6:	2301      	movls	r3, #1
 8009cd8:	2300      	movhi	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d079      	beq.n	8009dd4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d107      	bne.n	8009cfc <HAL_ADC_ConfigChannel+0x46c>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	0e9b      	lsrs	r3, r3, #26
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	069b      	lsls	r3, r3, #26
 8009cf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009cfa:	e015      	b.n	8009d28 <HAL_ADC_ConfigChannel+0x498>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d04:	fa93 f3a3 	rbit	r3, r3
 8009d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8009d14:	2320      	movs	r3, #32
 8009d16:	e003      	b.n	8009d20 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8009d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d1a:	fab3 f383 	clz	r3, r3
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	3301      	adds	r3, #1
 8009d22:	069b      	lsls	r3, r3, #26
 8009d24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_ADC_ConfigChannel+0x4b8>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	0e9b      	lsrs	r3, r3, #26
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	f003 031f 	and.w	r3, r3, #31
 8009d40:	2101      	movs	r1, #1
 8009d42:	fa01 f303 	lsl.w	r3, r1, r3
 8009d46:	e017      	b.n	8009d78 <HAL_ADC_ConfigChannel+0x4e8>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d50:	fa93 f3a3 	rbit	r3, r3
 8009d54:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d58:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8009d60:	2320      	movs	r3, #32
 8009d62:	e003      	b.n	8009d6c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8009d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d66:	fab3 f383 	clz	r3, r3
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f003 031f 	and.w	r3, r3, #31
 8009d72:	2101      	movs	r1, #1
 8009d74:	fa01 f303 	lsl.w	r3, r1, r3
 8009d78:	ea42 0103 	orr.w	r1, r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <HAL_ADC_ConfigChannel+0x50e>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	0e9b      	lsrs	r3, r3, #26
 8009d8e:	3301      	adds	r3, #1
 8009d90:	f003 021f 	and.w	r2, r3, #31
 8009d94:	4613      	mov	r3, r2
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	4413      	add	r3, r2
 8009d9a:	051b      	lsls	r3, r3, #20
 8009d9c:	e018      	b.n	8009dd0 <HAL_ADC_ConfigChannel+0x540>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da6:	fa93 f3a3 	rbit	r3, r3
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009db6:	2320      	movs	r3, #32
 8009db8:	e003      	b.n	8009dc2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dbc:	fab3 f383 	clz	r3, r3
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	f003 021f 	and.w	r2, r3, #31
 8009dc8:	4613      	mov	r3, r2
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	4413      	add	r3, r2
 8009dce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	e080      	b.n	8009ed6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d107      	bne.n	8009df0 <HAL_ADC_ConfigChannel+0x560>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	0e9b      	lsrs	r3, r3, #26
 8009de6:	3301      	adds	r3, #1
 8009de8:	069b      	lsls	r3, r3, #26
 8009dea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009dee:	e015      	b.n	8009e1c <HAL_ADC_ConfigChannel+0x58c>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df8:	fa93 f3a3 	rbit	r3, r3
 8009dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8009e08:	2320      	movs	r3, #32
 8009e0a:	e003      	b.n	8009e14 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	fab3 f383 	clz	r3, r3
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	069b      	lsls	r3, r3, #26
 8009e18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_ADC_ConfigChannel+0x5ac>
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	0e9b      	lsrs	r3, r3, #26
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	2101      	movs	r1, #1
 8009e36:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3a:	e017      	b.n	8009e6c <HAL_ADC_ConfigChannel+0x5dc>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	fa93 f3a3 	rbit	r3, r3
 8009e48:	61fb      	str	r3, [r7, #28]
  return result;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8009e54:	2320      	movs	r3, #32
 8009e56:	e003      	b.n	8009e60 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	fab3 f383 	clz	r3, r3
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	3301      	adds	r3, #1
 8009e62:	f003 031f 	and.w	r3, r3, #31
 8009e66:	2101      	movs	r1, #1
 8009e68:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6c:	ea42 0103 	orr.w	r1, r2, r3
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10d      	bne.n	8009e98 <HAL_ADC_ConfigChannel+0x608>
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	0e9b      	lsrs	r3, r3, #26
 8009e82:	3301      	adds	r3, #1
 8009e84:	f003 021f 	and.w	r2, r3, #31
 8009e88:	4613      	mov	r3, r2
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	4413      	add	r3, r2
 8009e8e:	3b1e      	subs	r3, #30
 8009e90:	051b      	lsls	r3, r3, #20
 8009e92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009e96:	e01d      	b.n	8009ed4 <HAL_ADC_ConfigChannel+0x644>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	fa93 f3a3 	rbit	r3, r3
 8009ea4:	613b      	str	r3, [r7, #16]
  return result;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	e005      	b.n	8009ec0 <HAL_ADC_ConfigChannel+0x630>
 8009eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	fab3 f383 	clz	r3, r3
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	f003 021f 	and.w	r2, r3, #31
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	4413      	add	r3, r2
 8009ecc:	3b1e      	subs	r3, #30
 8009ece:	051b      	lsls	r3, r3, #20
 8009ed0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ed4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009eda:	4619      	mov	r1, r3
 8009edc:	f7ff f82b 	bl	8008f36 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	4b45      	ldr	r3, [pc, #276]	@ (8009ffc <HAL_ADC_ConfigChannel+0x76c>)
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d07c      	beq.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009eec:	4844      	ldr	r0, [pc, #272]	@ (800a000 <HAL_ADC_ConfigChannel+0x770>)
 8009eee:	f7fe ff5f 	bl	8008db0 <LL_ADC_GetCommonPathInternalCh>
 8009ef2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009ef6:	4843      	ldr	r0, [pc, #268]	@ (800a004 <HAL_ADC_ConfigChannel+0x774>)
 8009ef8:	f7ff f8ce 	bl	8009098 <LL_ADC_IsEnabled>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d15e      	bne.n	8009fc0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a40      	ldr	r2, [pc, #256]	@ (800a008 <HAL_ADC_ConfigChannel+0x778>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d127      	bne.n	8009f5c <HAL_ADC_ConfigChannel+0x6cc>
 8009f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d121      	bne.n	8009f5c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a39      	ldr	r2, [pc, #228]	@ (800a004 <HAL_ADC_ConfigChannel+0x774>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d161      	bne.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4834      	ldr	r0, [pc, #208]	@ (800a000 <HAL_ADC_ConfigChannel+0x770>)
 8009f2e:	f7fe ff2c 	bl	8008d8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009f32:	4b36      	ldr	r3, [pc, #216]	@ (800a00c <HAL_ADC_ConfigChannel+0x77c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	099b      	lsrs	r3, r3, #6
 8009f38:	4a35      	ldr	r2, [pc, #212]	@ (800a010 <HAL_ADC_ConfigChannel+0x780>)
 8009f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f3e:	099b      	lsrs	r3, r3, #6
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	4613      	mov	r3, r2
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009f4c:	e002      	b.n	8009f54 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1f9      	bne.n	8009f4e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f5a:	e044      	b.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a2c      	ldr	r2, [pc, #176]	@ (800a014 <HAL_ADC_ConfigChannel+0x784>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d113      	bne.n	8009f8e <HAL_ADC_ConfigChannel+0x6fe>
 8009f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10d      	bne.n	8009f8e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a23      	ldr	r2, [pc, #140]	@ (800a004 <HAL_ADC_ConfigChannel+0x774>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d134      	bne.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f84:	4619      	mov	r1, r3
 8009f86:	481e      	ldr	r0, [pc, #120]	@ (800a000 <HAL_ADC_ConfigChannel+0x770>)
 8009f88:	f7fe feff 	bl	8008d8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f8c:	e02b      	b.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a21      	ldr	r2, [pc, #132]	@ (800a018 <HAL_ADC_ConfigChannel+0x788>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d126      	bne.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
 8009f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d120      	bne.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a16      	ldr	r2, [pc, #88]	@ (800a004 <HAL_ADC_ConfigChannel+0x774>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d11b      	bne.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009fae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4811      	ldr	r0, [pc, #68]	@ (800a000 <HAL_ADC_ConfigChannel+0x770>)
 8009fba:	f7fe fee6 	bl	8008d8a <LL_ADC_SetCommonPathInternalCh>
 8009fbe:	e012      	b.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc4:	f043 0220 	orr.w	r2, r3, #32
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009fd2:	e008      	b.n	8009fe6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd8:	f043 0220 	orr.w	r2, r3, #32
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8009fee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	37d8      	adds	r7, #216	@ 0xd8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	80080000 	.word	0x80080000
 800a000:	50040300 	.word	0x50040300
 800a004:	50040000 	.word	0x50040000
 800a008:	c7520000 	.word	0xc7520000
 800a00c:	2000001c 	.word	0x2000001c
 800a010:	053e2d63 	.word	0x053e2d63
 800a014:	cb840000 	.word	0xcb840000
 800a018:	80000001 	.word	0x80000001

0800a01c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a024:	2300      	movs	r3, #0
 800a026:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff f833 	bl	8009098 <LL_ADC_IsEnabled>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d15e      	bne.n	800a0f6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	4b30      	ldr	r3, [pc, #192]	@ (800a100 <ADC_Enable+0xe4>)
 800a040:	4013      	ands	r3, r2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00d      	beq.n	800a062 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a04a:	f043 0210 	orr.w	r2, r3, #16
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a056:	f043 0201 	orr.w	r2, r3, #1
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e04a      	b.n	800a0f8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff f802 	bl	8009070 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a06c:	4825      	ldr	r0, [pc, #148]	@ (800a104 <ADC_Enable+0xe8>)
 800a06e:	f7fe fe9f 	bl	8008db0 <LL_ADC_GetCommonPathInternalCh>
 800a072:	4603      	mov	r3, r0
 800a074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00f      	beq.n	800a09c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a07c:	4b22      	ldr	r3, [pc, #136]	@ (800a108 <ADC_Enable+0xec>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	099b      	lsrs	r3, r3, #6
 800a082:	4a22      	ldr	r2, [pc, #136]	@ (800a10c <ADC_Enable+0xf0>)
 800a084:	fba2 2303 	umull	r2, r3, r2, r3
 800a088:	099b      	lsrs	r3, r3, #6
 800a08a:	3301      	adds	r3, #1
 800a08c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800a08e:	e002      	b.n	800a096 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	3b01      	subs	r3, #1
 800a094:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f9      	bne.n	800a090 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800a09c:	f7fe fe26 	bl	8008cec <HAL_GetTick>
 800a0a0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0a2:	e021      	b.n	800a0e8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fff5 	bl	8009098 <LL_ADC_IsEnabled>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe ffd9 	bl	8009070 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a0be:	f7fe fe15 	bl	8008cec <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d90d      	bls.n	800a0e8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0d0:	f043 0210 	orr.w	r2, r3, #16
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0dc:	f043 0201 	orr.w	r2, r3, #1
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e007      	b.n	800a0f8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d1d6      	bne.n	800a0a4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	8000003f 	.word	0x8000003f
 800a104:	50040300 	.word	0x50040300
 800a108:	2000001c 	.word	0x2000001c
 800a10c:	053e2d63 	.word	0x053e2d63

0800a110 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a122:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a126:	2b00      	cmp	r3, #0
 800a128:	d14b      	bne.n	800a1c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a12e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d021      	beq.n	800a188 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fe94 	bl	8008e76 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d032      	beq.n	800a1ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d12b      	bne.n	800a1ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a166:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d11f      	bne.n	800a1ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a17e:	f043 0201 	orr.w	r2, r3, #1
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	655a      	str	r2, [r3, #84]	@ 0x54
 800a186:	e018      	b.n	800a1ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d111      	bne.n	800a1ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d105      	bne.n	800a1ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b2:	f043 0201 	orr.w	r2, r3, #1
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff fb40 	bl	8009840 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a1c0:	e00e      	b.n	800a1e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c6:	f003 0310 	and.w	r3, r3, #16
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fb54 	bl	800987c <HAL_ADC_ErrorCallback>
}
 800a1d4:	e004      	b.n	800a1e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fb2c 	bl	8009854 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a216:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a222:	f043 0204 	orr.w	r2, r3, #4
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff fb26 	bl	800987c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <__NVIC_SetPriorityGrouping>:
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e0 <__NVIC_SetPriorityGrouping+0x44>)
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a2c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a2c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a2ce:	4a04      	ldr	r2, [pc, #16]	@ (800a2e0 <__NVIC_SetPriorityGrouping+0x44>)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	60d3      	str	r3, [r2, #12]
}
 800a2d4:	bf00      	nop
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	e000ed00 	.word	0xe000ed00

0800a2e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a2e8:	4b04      	ldr	r3, [pc, #16]	@ (800a2fc <__NVIC_GetPriorityGrouping+0x18>)
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	f003 0307 	and.w	r3, r3, #7
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	e000ed00 	.word	0xe000ed00

0800a300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a30a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	db0b      	blt.n	800a32a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	f003 021f 	and.w	r2, r3, #31
 800a318:	4907      	ldr	r1, [pc, #28]	@ (800a338 <__NVIC_EnableIRQ+0x38>)
 800a31a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	2001      	movs	r0, #1
 800a322:	fa00 f202 	lsl.w	r2, r0, r2
 800a326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	e000e100 	.word	0xe000e100

0800a33c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	6039      	str	r1, [r7, #0]
 800a346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	db0a      	blt.n	800a366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	b2da      	uxtb	r2, r3
 800a354:	490c      	ldr	r1, [pc, #48]	@ (800a388 <__NVIC_SetPriority+0x4c>)
 800a356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a35a:	0112      	lsls	r2, r2, #4
 800a35c:	b2d2      	uxtb	r2, r2
 800a35e:	440b      	add	r3, r1
 800a360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a364:	e00a      	b.n	800a37c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	4908      	ldr	r1, [pc, #32]	@ (800a38c <__NVIC_SetPriority+0x50>)
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	f003 030f 	and.w	r3, r3, #15
 800a372:	3b04      	subs	r3, #4
 800a374:	0112      	lsls	r2, r2, #4
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	440b      	add	r3, r1
 800a37a:	761a      	strb	r2, [r3, #24]
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	e000e100 	.word	0xe000e100
 800a38c:	e000ed00 	.word	0xe000ed00

0800a390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a390:	b480      	push	{r7}
 800a392:	b089      	sub	sp, #36	@ 0x24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 0307 	and.w	r3, r3, #7
 800a3a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f1c3 0307 	rsb	r3, r3, #7
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	bf28      	it	cs
 800a3ae:	2304      	movcs	r3, #4
 800a3b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	2b06      	cmp	r3, #6
 800a3b8:	d902      	bls.n	800a3c0 <NVIC_EncodePriority+0x30>
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	3b03      	subs	r3, #3
 800a3be:	e000      	b.n	800a3c2 <NVIC_EncodePriority+0x32>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	43da      	mvns	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	401a      	ands	r2, r3
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a3d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e2:	43d9      	mvns	r1, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a3e8:	4313      	orrs	r3, r2
         );
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3724      	adds	r7, #36	@ 0x24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff ff4c 	bl	800a29c <__NVIC_SetPriorityGrouping>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a41a:	f7ff ff63 	bl	800a2e4 <__NVIC_GetPriorityGrouping>
 800a41e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	6978      	ldr	r0, [r7, #20]
 800a426:	f7ff ffb3 	bl	800a390 <NVIC_EncodePriority>
 800a42a:	4602      	mov	r2, r0
 800a42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a430:	4611      	mov	r1, r2
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff ff82 	bl	800a33c <__NVIC_SetPriority>
}
 800a438:	bf00      	nop
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff ff56 	bl	800a300 <__NVIC_EnableIRQ>
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e08e      	b.n	800a58c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	4b47      	ldr	r3, [pc, #284]	@ (800a594 <HAL_DMA_Init+0x138>)
 800a476:	429a      	cmp	r2, r3
 800a478:	d80f      	bhi.n	800a49a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	4b45      	ldr	r3, [pc, #276]	@ (800a598 <HAL_DMA_Init+0x13c>)
 800a482:	4413      	add	r3, r2
 800a484:	4a45      	ldr	r2, [pc, #276]	@ (800a59c <HAL_DMA_Init+0x140>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	091b      	lsrs	r3, r3, #4
 800a48c:	009a      	lsls	r2, r3, #2
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a42      	ldr	r2, [pc, #264]	@ (800a5a0 <HAL_DMA_Init+0x144>)
 800a496:	641a      	str	r2, [r3, #64]	@ 0x40
 800a498:	e00e      	b.n	800a4b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	4b40      	ldr	r3, [pc, #256]	@ (800a5a4 <HAL_DMA_Init+0x148>)
 800a4a2:	4413      	add	r3, r2
 800a4a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a59c <HAL_DMA_Init+0x140>)
 800a4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4aa:	091b      	lsrs	r3, r3, #4
 800a4ac:	009a      	lsls	r2, r3, #2
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a5a8 <HAL_DMA_Init+0x14c>)
 800a4b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a4ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a4dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a4e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a4f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fa24 	bl	800a958 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a518:	d102      	bne.n	800a520 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a528:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a52c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a536:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <HAL_DMA_Init+0x106>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b04      	cmp	r3, #4
 800a546:	d80c      	bhi.n	800a562 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fa43 	bl	800a9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a55e:	605a      	str	r2, [r3, #4]
 800a560:	e008      	b.n	800a574 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	40020407 	.word	0x40020407
 800a598:	bffdfff8 	.word	0xbffdfff8
 800a59c:	cccccccd 	.word	0xcccccccd
 800a5a0:	40020000 	.word	0x40020000
 800a5a4:	bffdfbf8 	.word	0xbffdfbf8
 800a5a8:	40020400 	.word	0x40020400

0800a5ac <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_DMA_Start_IT+0x20>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e066      	b.n	800a69a <HAL_DMA_Start_IT+0xee>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d155      	bne.n	800a68c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0201 	bic.w	r2, r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f968 	bl	800a8da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d008      	beq.n	800a624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f042 020e 	orr.w	r2, r2, #14
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	e00f      	b.n	800a644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 0204 	bic.w	r2, r2, #4
 800a632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 020a 	orr.w	r2, r2, #10
 800a642:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a65c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a660:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a666:	2b00      	cmp	r3, #0
 800a668:	d007      	beq.n	800a67a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a678:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0201 	orr.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e005      	b.n	800a698 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a694:	2302      	movs	r3, #2
 800a696:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d005      	beq.n	800a6c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2204      	movs	r2, #4
 800a6be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
 800a6c4:	e047      	b.n	800a756 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 020e 	bic.w	r2, r2, #14
 800a6d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0201 	bic.w	r2, r2, #1
 800a6e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a6f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6fa:	f003 021c 	and.w	r2, r3, #28
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a702:	2101      	movs	r1, #1
 800a704:	fa01 f202 	lsl.w	r2, r1, r2
 800a708:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a712:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00c      	beq.n	800a736 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a726:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a72a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a734:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	4798      	blx	r3
    }
  }
  return status;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a77c:	f003 031c 	and.w	r3, r3, #28
 800a780:	2204      	movs	r2, #4
 800a782:	409a      	lsls	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4013      	ands	r3, r2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d026      	beq.n	800a7da <HAL_DMA_IRQHandler+0x7a>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d021      	beq.n	800a7da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d107      	bne.n	800a7b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0204 	bic.w	r2, r2, #4
 800a7b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7b8:	f003 021c 	and.w	r2, r3, #28
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c0:	2104      	movs	r1, #4
 800a7c2:	fa01 f202 	lsl.w	r2, r1, r2
 800a7c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d071      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a7d8:	e06c      	b.n	800a8b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7de:	f003 031c 	and.w	r3, r3, #28
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	409a      	lsls	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d02e      	beq.n	800a84c <HAL_DMA_IRQHandler+0xec>
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d029      	beq.n	800a84c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 020a 	bic.w	r2, r2, #10
 800a814:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a822:	f003 021c 	and.w	r2, r3, #28
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82a:	2102      	movs	r1, #2
 800a82c:	fa01 f202 	lsl.w	r2, r1, r2
 800a830:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d038      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a84a:	e033      	b.n	800a8b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a850:	f003 031c 	and.w	r3, r3, #28
 800a854:	2208      	movs	r2, #8
 800a856:	409a      	lsls	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d02a      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x156>
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f003 0308 	and.w	r3, r3, #8
 800a866:	2b00      	cmp	r3, #0
 800a868:	d025      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 020e 	bic.w	r2, r2, #14
 800a878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a87e:	f003 021c 	and.w	r2, r3, #28
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	2101      	movs	r1, #1
 800a888:	fa01 f202 	lsl.w	r2, r1, r2
 800a88c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d004      	beq.n	800a8b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop
}
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a8cc:	b2db      	uxtb	r3, r3
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a8f0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a902:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a908:	f003 021c 	and.w	r2, r3, #28
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a910:	2101      	movs	r1, #1
 800a912:	fa01 f202 	lsl.w	r2, r1, r2
 800a916:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	2b10      	cmp	r3, #16
 800a926:	d108      	bne.n	800a93a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a938:	e007      	b.n	800a94a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	60da      	str	r2, [r3, #12]
}
 800a94a:	bf00      	nop
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	461a      	mov	r2, r3
 800a966:	4b17      	ldr	r3, [pc, #92]	@ (800a9c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a968:	429a      	cmp	r2, r3
 800a96a:	d80a      	bhi.n	800a982 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a970:	089b      	lsrs	r3, r3, #2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a978:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6493      	str	r3, [r2, #72]	@ 0x48
 800a980:	e007      	b.n	800a992 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a986:	089b      	lsrs	r3, r3, #2
 800a988:	009a      	lsls	r2, r3, #2
 800a98a:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a98c:	4413      	add	r3, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	3b08      	subs	r3, #8
 800a99a:	4a0c      	ldr	r2, [pc, #48]	@ (800a9cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a99c:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a0:	091b      	lsrs	r3, r3, #4
 800a9a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a9a8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f003 031f 	and.w	r3, r3, #31
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	409a      	lsls	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a9b8:	bf00      	nop
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	40020407 	.word	0x40020407
 800a9c8:	4002081c 	.word	0x4002081c
 800a9cc:	cccccccd 	.word	0xcccccccd
 800a9d0:	40020880 	.word	0x40020880

0800a9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4b0b      	ldr	r3, [pc, #44]	@ (800aa18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a09      	ldr	r2, [pc, #36]	@ (800aa1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800a9f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	2201      	movs	r2, #1
 800aa04:	409a      	lsls	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	1000823f 	.word	0x1000823f
 800aa1c:	40020940 	.word	0x40020940

0800aa20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aa2e:	e14c      	b.n	800acca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	2101      	movs	r1, #1
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	fa01 f303 	lsl.w	r3, r1, r3
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 813e 	beq.w	800acc4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d005      	beq.n	800aa60 <HAL_GPIO_Init+0x40>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f003 0303 	and.w	r3, r3, #3
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d130      	bne.n	800aac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa70:	43db      	mvns	r3, r3
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	4013      	ands	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	68da      	ldr	r2, [r3, #12]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	fa02 f303 	lsl.w	r3, r2, r3
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aa96:	2201      	movs	r2, #1
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9e:	43db      	mvns	r3, r3
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	091b      	lsrs	r3, r3, #4
 800aaac:	f003 0201 	and.w	r2, r3, #1
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	fa02 f303 	lsl.w	r3, r2, r3
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d017      	beq.n	800aafe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	2203      	movs	r2, #3
 800aada:	fa02 f303 	lsl.w	r3, r2, r3
 800aade:	43db      	mvns	r3, r3
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4013      	ands	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	689a      	ldr	r2, [r3, #8]
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d123      	bne.n	800ab52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	08da      	lsrs	r2, r3, #3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	3208      	adds	r2, #8
 800ab12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	220f      	movs	r2, #15
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	43db      	mvns	r3, r3
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	691a      	ldr	r2, [r3, #16]
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	08da      	lsrs	r2, r3, #3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3208      	adds	r2, #8
 800ab4c:	6939      	ldr	r1, [r7, #16]
 800ab4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	2203      	movs	r2, #3
 800ab5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab62:	43db      	mvns	r3, r3
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	4013      	ands	r3, r2
 800ab68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f003 0203 	and.w	r2, r3, #3
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 8098 	beq.w	800acc4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800ab94:	4a54      	ldr	r2, [pc, #336]	@ (800ace8 <HAL_GPIO_Init+0x2c8>)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	089b      	lsrs	r3, r3, #2
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f003 0303 	and.w	r3, r3, #3
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	220f      	movs	r2, #15
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	43db      	mvns	r3, r3
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4013      	ands	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800abbe:	d019      	beq.n	800abf4 <HAL_GPIO_Init+0x1d4>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a4a      	ldr	r2, [pc, #296]	@ (800acec <HAL_GPIO_Init+0x2cc>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d013      	beq.n	800abf0 <HAL_GPIO_Init+0x1d0>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a49      	ldr	r2, [pc, #292]	@ (800acf0 <HAL_GPIO_Init+0x2d0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d00d      	beq.n	800abec <HAL_GPIO_Init+0x1cc>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a48      	ldr	r2, [pc, #288]	@ (800acf4 <HAL_GPIO_Init+0x2d4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d007      	beq.n	800abe8 <HAL_GPIO_Init+0x1c8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a47      	ldr	r2, [pc, #284]	@ (800acf8 <HAL_GPIO_Init+0x2d8>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d101      	bne.n	800abe4 <HAL_GPIO_Init+0x1c4>
 800abe0:	2304      	movs	r3, #4
 800abe2:	e008      	b.n	800abf6 <HAL_GPIO_Init+0x1d6>
 800abe4:	2307      	movs	r3, #7
 800abe6:	e006      	b.n	800abf6 <HAL_GPIO_Init+0x1d6>
 800abe8:	2303      	movs	r3, #3
 800abea:	e004      	b.n	800abf6 <HAL_GPIO_Init+0x1d6>
 800abec:	2302      	movs	r3, #2
 800abee:	e002      	b.n	800abf6 <HAL_GPIO_Init+0x1d6>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <HAL_GPIO_Init+0x1d6>
 800abf4:	2300      	movs	r3, #0
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	f002 0203 	and.w	r2, r2, #3
 800abfc:	0092      	lsls	r2, r2, #2
 800abfe:	4093      	lsls	r3, r2
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ac06:	4938      	ldr	r1, [pc, #224]	@ (800ace8 <HAL_GPIO_Init+0x2c8>)
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	089b      	lsrs	r3, r3, #2
 800ac0c:	3302      	adds	r3, #2
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ac14:	4b39      	ldr	r3, [pc, #228]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	43db      	mvns	r3, r3
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	4013      	ands	r3, r2
 800ac22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ac38:	4a30      	ldr	r2, [pc, #192]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ac3e:	4b2f      	ldr	r3, [pc, #188]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	43db      	mvns	r3, r3
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ac62:	4a26      	ldr	r2, [pc, #152]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ac68:	4b24      	ldr	r3, [pc, #144]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	43db      	mvns	r3, r3
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	4013      	ands	r3, r2
 800ac78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ac8e:	4a1b      	ldr	r2, [pc, #108]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800ac96:	4b19      	ldr	r3, [pc, #100]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800ac98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	43db      	mvns	r3, r3
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4013      	ands	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d003      	beq.n	800acbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4313      	orrs	r3, r2
 800acba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800acbc:	4a0f      	ldr	r2, [pc, #60]	@ (800acfc <HAL_GPIO_Init+0x2dc>)
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	3301      	adds	r3, #1
 800acc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	fa22 f303 	lsr.w	r3, r2, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f47f aeab 	bne.w	800aa30 <HAL_GPIO_Init+0x10>
  }
}
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	40010000 	.word	0x40010000
 800acec:	48000400 	.word	0x48000400
 800acf0:	48000800 	.word	0x48000800
 800acf4:	48000c00 	.word	0x48000c00
 800acf8:	48001000 	.word	0x48001000
 800acfc:	58000800 	.word	0x58000800

0800ad00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	807b      	strh	r3, [r7, #2]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ad10:	787b      	ldrb	r3, [r7, #1]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ad16:	887a      	ldrh	r2, [r7, #2]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ad1c:	e002      	b.n	800ad24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ad1e:	887a      	ldrh	r2, [r7, #2]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e08d      	b.n	800ae5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7fd fcea 	bl	8008730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2224      	movs	r2, #36	@ 0x24
 800ad60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f022 0201 	bic.w	r2, r2, #1
 800ad72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ad80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ad90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d107      	bne.n	800adaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	689a      	ldr	r2, [r3, #8]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ada6:	609a      	str	r2, [r3, #8]
 800ada8:	e006      	b.n	800adb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800adb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d108      	bne.n	800add2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adce:	605a      	str	r2, [r3, #4]
 800add0:	e007      	b.n	800ade2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ade0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	6812      	ldr	r2, [r2, #0]
 800adec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800adf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68da      	ldr	r2, [r3, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691a      	ldr	r2, [r3, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	69d9      	ldr	r1, [r3, #28]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a1a      	ldr	r2, [r3, #32]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0201 	orr.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
	...

0800ae68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af02      	add	r7, sp, #8
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	607a      	str	r2, [r7, #4]
 800ae72:	461a      	mov	r2, r3
 800ae74:	460b      	mov	r3, r1
 800ae76:	817b      	strh	r3, [r7, #10]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	f040 80fd 	bne.w	800b084 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d101      	bne.n	800ae98 <HAL_I2C_Master_Transmit+0x30>
 800ae94:	2302      	movs	r3, #2
 800ae96:	e0f6      	b.n	800b086 <HAL_I2C_Master_Transmit+0x21e>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aea0:	f7fd ff24 	bl	8008cec <HAL_GetTick>
 800aea4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	2319      	movs	r3, #25
 800aeac:	2201      	movs	r2, #1
 800aeae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 ffa1 	bl	800bdfa <I2C_WaitOnFlagUntilTimeout>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e0e1      	b.n	800b086 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2221      	movs	r2, #33	@ 0x21
 800aec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2210      	movs	r2, #16
 800aece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	893a      	ldrh	r2, [r7, #8]
 800aee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	2bff      	cmp	r3, #255	@ 0xff
 800aef2:	d906      	bls.n	800af02 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	22ff      	movs	r2, #255	@ 0xff
 800aef8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800aefa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	e007      	b.n	800af12 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af06:	b29a      	uxth	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800af0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800af10:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af16:	2b00      	cmp	r3, #0
 800af18:	d024      	beq.n	800af64 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af34:	b29b      	uxth	r3, r3
 800af36:	3b01      	subs	r3, #1
 800af38:	b29a      	uxth	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af42:	3b01      	subs	r3, #1
 800af44:	b29a      	uxth	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	3301      	adds	r3, #1
 800af52:	b2da      	uxtb	r2, r3
 800af54:	8979      	ldrh	r1, [r7, #10]
 800af56:	4b4e      	ldr	r3, [pc, #312]	@ (800b090 <HAL_I2C_Master_Transmit+0x228>)
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f001 f99b 	bl	800c298 <I2C_TransferConfig>
 800af62:	e066      	b.n	800b032 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	8979      	ldrh	r1, [r7, #10]
 800af6c:	4b48      	ldr	r3, [pc, #288]	@ (800b090 <HAL_I2C_Master_Transmit+0x228>)
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f001 f990 	bl	800c298 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800af78:	e05b      	b.n	800b032 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	6a39      	ldr	r1, [r7, #32]
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 ff94 	bl	800beac <I2C_WaitOnTXISFlagUntilTimeout>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e07b      	b.n	800b086 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af92:	781a      	ldrb	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	3b01      	subs	r3, #1
 800afac:	b29a      	uxth	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afb6:	3b01      	subs	r3, #1
 800afb8:	b29a      	uxth	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d034      	beq.n	800b032 <HAL_I2C_Master_Transmit+0x1ca>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d130      	bne.n	800b032 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	2200      	movs	r2, #0
 800afd8:	2180      	movs	r1, #128	@ 0x80
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f000 ff0d 	bl	800bdfa <I2C_WaitOnFlagUntilTimeout>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e04d      	b.n	800b086 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afee:	b29b      	uxth	r3, r3
 800aff0:	2bff      	cmp	r3, #255	@ 0xff
 800aff2:	d90e      	bls.n	800b012 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	22ff      	movs	r2, #255	@ 0xff
 800aff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800affe:	b2da      	uxtb	r2, r3
 800b000:	8979      	ldrh	r1, [r7, #10]
 800b002:	2300      	movs	r3, #0
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f001 f944 	bl	800c298 <I2C_TransferConfig>
 800b010:	e00f      	b.n	800b032 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b016:	b29a      	uxth	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b020:	b2da      	uxtb	r2, r3
 800b022:	8979      	ldrh	r1, [r7, #10]
 800b024:	2300      	movs	r3, #0
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f001 f933 	bl	800c298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b036:	b29b      	uxth	r3, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d19e      	bne.n	800af7a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	6a39      	ldr	r1, [r7, #32]
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 ff7a 	bl	800bf3a <I2C_WaitOnSTOPFlagUntilTimeout>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e01a      	b.n	800b086 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2220      	movs	r2, #32
 800b056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6859      	ldr	r1, [r3, #4]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	4b0c      	ldr	r3, [pc, #48]	@ (800b094 <HAL_I2C_Master_Transmit+0x22c>)
 800b064:	400b      	ands	r3, r1
 800b066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2220      	movs	r2, #32
 800b06c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	e000      	b.n	800b086 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b084:	2302      	movs	r3, #2
  }
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	80002000 	.word	0x80002000
 800b094:	fe00e800 	.word	0xfe00e800

0800b098 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	817b      	strh	r3, [r7, #10]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	f040 80db 	bne.w	800b270 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_I2C_Master_Receive+0x30>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e0d4      	b.n	800b272 <HAL_I2C_Master_Receive+0x1da>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b0d0:	f7fd fe0c 	bl	8008cec <HAL_GetTick>
 800b0d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	2319      	movs	r3, #25
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 fe89 	bl	800bdfa <I2C_WaitOnFlagUntilTimeout>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e0bf      	b.n	800b272 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2222      	movs	r2, #34	@ 0x22
 800b0f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2210      	movs	r2, #16
 800b0fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	893a      	ldrh	r2, [r7, #8]
 800b112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b11e:	b29b      	uxth	r3, r3
 800b120:	2bff      	cmp	r3, #255	@ 0xff
 800b122:	d90e      	bls.n	800b142 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	22ff      	movs	r2, #255	@ 0xff
 800b128:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	8979      	ldrh	r1, [r7, #10]
 800b132:	4b52      	ldr	r3, [pc, #328]	@ (800b27c <HAL_I2C_Master_Receive+0x1e4>)
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f001 f8ac 	bl	800c298 <I2C_TransferConfig>
 800b140:	e06d      	b.n	800b21e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b150:	b2da      	uxtb	r2, r3
 800b152:	8979      	ldrh	r1, [r7, #10]
 800b154:	4b49      	ldr	r3, [pc, #292]	@ (800b27c <HAL_I2C_Master_Receive+0x1e4>)
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f001 f89b 	bl	800c298 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b162:	e05c      	b.n	800b21e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	6a39      	ldr	r1, [r7, #32]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 ff29 	bl	800bfc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e07c      	b.n	800b272 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b194:	3b01      	subs	r3, #1
 800b196:	b29a      	uxth	r2, r3
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d034      	beq.n	800b21e <HAL_I2C_Master_Receive+0x186>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d130      	bne.n	800b21e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2180      	movs	r1, #128	@ 0x80
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 fe17 	bl	800bdfa <I2C_WaitOnFlagUntilTimeout>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e04d      	b.n	800b272 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	2bff      	cmp	r3, #255	@ 0xff
 800b1de:	d90e      	bls.n	800b1fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	22ff      	movs	r2, #255	@ 0xff
 800b1e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	8979      	ldrh	r1, [r7, #10]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f001 f84e 	bl	800c298 <I2C_TransferConfig>
 800b1fc:	e00f      	b.n	800b21e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	8979      	ldrh	r1, [r7, #10]
 800b210:	2300      	movs	r3, #0
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f001 f83d 	bl	800c298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b222:	b29b      	uxth	r3, r3
 800b224:	2b00      	cmp	r3, #0
 800b226:	d19d      	bne.n	800b164 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	6a39      	ldr	r1, [r7, #32]
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 fe84 	bl	800bf3a <I2C_WaitOnSTOPFlagUntilTimeout>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d001      	beq.n	800b23c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e01a      	b.n	800b272 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2220      	movs	r2, #32
 800b242:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	4b0c      	ldr	r3, [pc, #48]	@ (800b280 <HAL_I2C_Master_Receive+0x1e8>)
 800b250:	400b      	ands	r3, r1
 800b252:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	e000      	b.n	800b272 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b270:	2302      	movs	r3, #2
  }
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	80002400 	.word	0x80002400
 800b280:	fe00e800 	.word	0xfe00e800

0800b284 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d005      	beq.n	800b2b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	4798      	blx	r3
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	0a1b      	lsrs	r3, r3, #8
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d010      	beq.n	800b2fe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	09db      	lsrs	r3, r3, #7
 800b2e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00a      	beq.n	800b2fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ec:	f043 0201 	orr.w	r2, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	0a9b      	lsrs	r3, r3, #10
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b00      	cmp	r3, #0
 800b308:	d010      	beq.n	800b32c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	09db      	lsrs	r3, r3, #7
 800b30e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b31a:	f043 0208 	orr.w	r2, r3, #8
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b32a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	0a5b      	lsrs	r3, r3, #9
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d010      	beq.n	800b35a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	09db      	lsrs	r3, r3, #7
 800b33c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00a      	beq.n	800b35a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b348:	f043 0202 	orr.w	r2, r3, #2
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b358:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b35e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f003 030b 	and.w	r3, r3, #11
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b36a:	68f9      	ldr	r1, [r7, #12]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fbeb 	bl	800bb48 <I2C_ITError>
  }
}
 800b372:	bf00      	nop
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	70fb      	strb	r3, [r7, #3]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b083      	sub	sp, #12
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b3da:	bf00      	nop
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b3ee:	bf00      	nop
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b086      	sub	sp, #24
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b416:	2b01      	cmp	r3, #1
 800b418:	d101      	bne.n	800b41e <I2C_Slave_ISR_IT+0x24>
 800b41a:	2302      	movs	r3, #2
 800b41c:	e0ed      	b.n	800b5fa <I2C_Slave_ISR_IT+0x200>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	095b      	lsrs	r3, r3, #5
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	095b      	lsrs	r3, r3, #5
 800b436:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d004      	beq.n	800b448 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b43e:	6939      	ldr	r1, [r7, #16]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 f9c1 	bl	800b7c8 <I2C_ITSlaveCplt>
 800b446:	e0d3      	b.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	091b      	lsrs	r3, r3, #4
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	2b00      	cmp	r3, #0
 800b452:	d04d      	beq.n	800b4f0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	091b      	lsrs	r3, r3, #4
 800b458:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d047      	beq.n	800b4f0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b464:	b29b      	uxth	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d128      	bne.n	800b4bc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b28      	cmp	r3, #40	@ 0x28
 800b474:	d108      	bne.n	800b488 <I2C_Slave_ISR_IT+0x8e>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b47c:	d104      	bne.n	800b488 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b47e:	6939      	ldr	r1, [r7, #16]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 fb0b 	bl	800ba9c <I2C_ITListenCplt>
 800b486:	e032      	b.n	800b4ee <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b29      	cmp	r3, #41	@ 0x29
 800b492:	d10e      	bne.n	800b4b2 <I2C_Slave_ISR_IT+0xb8>
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b49a:	d00a      	beq.n	800b4b2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2210      	movs	r2, #16
 800b4a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fc66 	bl	800bd76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f000 f92d 	bl	800b70a <I2C_ITSlaveSeqCplt>
 800b4b0:	e01d      	b.n	800b4ee <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2210      	movs	r2, #16
 800b4b8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b4ba:	e096      	b.n	800b5ea <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2210      	movs	r2, #16
 800b4c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c8:	f043 0204 	orr.w	r2, r3, #4
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d004      	beq.n	800b4e0 <I2C_Slave_ISR_IT+0xe6>
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4dc:	f040 8085 	bne.w	800b5ea <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 fb2e 	bl	800bb48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b4ec:	e07d      	b.n	800b5ea <I2C_Slave_ISR_IT+0x1f0>
 800b4ee:	e07c      	b.n	800b5ea <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	089b      	lsrs	r3, r3, #2
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d030      	beq.n	800b55e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	089b      	lsrs	r3, r3, #2
 800b500:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b504:	2b00      	cmp	r3, #0
 800b506:	d02a      	beq.n	800b55e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d018      	beq.n	800b544 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b51c:	b2d2      	uxtb	r2, r2
 800b51e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	3b01      	subs	r3, #1
 800b53e:	b29a      	uxth	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d14f      	bne.n	800b5ee <I2C_Slave_ISR_IT+0x1f4>
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b554:	d04b      	beq.n	800b5ee <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 f8d7 	bl	800b70a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b55c:	e047      	b.n	800b5ee <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	08db      	lsrs	r3, r3, #3
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	08db      	lsrs	r3, r3, #3
 800b56e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b576:	6939      	ldr	r1, [r7, #16]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 f842 	bl	800b602 <I2C_ITAddrCplt>
 800b57e:	e037      	b.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	085b      	lsrs	r3, r3, #1
 800b584:	f003 0301 	and.w	r3, r3, #1
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d031      	beq.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	085b      	lsrs	r3, r3, #1
 800b590:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b594:	2b00      	cmp	r3, #0
 800b596:	d02b      	beq.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d018      	beq.n	800b5d4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b5d2:	e00d      	b.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5da:	d002      	beq.n	800b5e2 <I2C_Slave_ISR_IT+0x1e8>
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d106      	bne.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f891 	bl	800b70a <I2C_ITSlaveSeqCplt>
 800b5e8:	e002      	b.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800b5ea:	bf00      	nop
 800b5ec:	e000      	b.n	800b5f0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800b5ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b618:	2b28      	cmp	r3, #40	@ 0x28
 800b61a:	d16a      	bne.n	800b6f2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	0c1b      	lsrs	r3, r3, #16
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	0c1b      	lsrs	r3, r3, #16
 800b634:	b29b      	uxth	r3, r3
 800b636:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b63a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	b29b      	uxth	r3, r3
 800b644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b648:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	b29b      	uxth	r3, r3
 800b652:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b656:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d138      	bne.n	800b6d2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b660:	897b      	ldrh	r3, [r7, #10]
 800b662:	09db      	lsrs	r3, r3, #7
 800b664:	b29a      	uxth	r2, r3
 800b666:	89bb      	ldrh	r3, [r7, #12]
 800b668:	4053      	eors	r3, r2
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	f003 0306 	and.w	r3, r3, #6
 800b670:	2b00      	cmp	r3, #0
 800b672:	d11c      	bne.n	800b6ae <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b674:	897b      	ldrh	r3, [r7, #10]
 800b676:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b686:	2b02      	cmp	r3, #2
 800b688:	d13b      	bne.n	800b702 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2208      	movs	r2, #8
 800b696:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b6a0:	89ba      	ldrh	r2, [r7, #12]
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fe7b 	bl	800b3a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b6ac:	e029      	b.n	800b702 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b6ae:	893b      	ldrh	r3, [r7, #8]
 800b6b0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b6b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fe20 	bl	800c2fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b6c4:	89ba      	ldrh	r2, [r7, #12]
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7ff fe69 	bl	800b3a2 <HAL_I2C_AddrCallback>
}
 800b6d0:	e017      	b.n	800b702 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b6d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fe10 	bl	800c2fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b6e4:	89ba      	ldrh	r2, [r7, #12]
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff fe59 	bl	800b3a2 <HAL_I2C_AddrCallback>
}
 800b6f0:	e007      	b.n	800b702 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2208      	movs	r2, #8
 800b6f8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	0b9b      	lsrs	r3, r3, #14
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d008      	beq.n	800b740 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e00d      	b.n	800b75c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	0bdb      	lsrs	r3, r3, #15
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d007      	beq.n	800b75c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b75a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b29      	cmp	r3, #41	@ 0x29
 800b766:	d112      	bne.n	800b78e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2228      	movs	r2, #40	@ 0x28
 800b76c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2221      	movs	r2, #33	@ 0x21
 800b774:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b776:	2101      	movs	r1, #1
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fdbf 	bl	800c2fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff fdf7 	bl	800b37a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b78c:	e017      	b.n	800b7be <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b2a      	cmp	r3, #42	@ 0x2a
 800b798:	d111      	bne.n	800b7be <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2228      	movs	r2, #40	@ 0x28
 800b79e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2222      	movs	r2, #34	@ 0x22
 800b7a6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fda6 	bl	800c2fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fde8 	bl	800b38e <HAL_I2C_SlaveRxCpltCallback>
}
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
	...

0800b7c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b7ea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	2b21      	cmp	r3, #33	@ 0x21
 800b7f8:	d002      	beq.n	800b800 <I2C_ITSlaveCplt+0x38>
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
 800b7fc:	2b29      	cmp	r3, #41	@ 0x29
 800b7fe:	d108      	bne.n	800b812 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b800:	f248 0101 	movw	r1, #32769	@ 0x8001
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fd79 	bl	800c2fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2221      	movs	r2, #33	@ 0x21
 800b80e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b810:	e019      	b.n	800b846 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b812:	7afb      	ldrb	r3, [r7, #11]
 800b814:	2b22      	cmp	r3, #34	@ 0x22
 800b816:	d002      	beq.n	800b81e <I2C_ITSlaveCplt+0x56>
 800b818:	7afb      	ldrb	r3, [r7, #11]
 800b81a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b81c:	d108      	bne.n	800b830 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b81e:	f248 0102 	movw	r1, #32770	@ 0x8002
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fd6a 	bl	800c2fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2222      	movs	r2, #34	@ 0x22
 800b82c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b82e:	e00a      	b.n	800b846 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	2b28      	cmp	r3, #40	@ 0x28
 800b834:	d107      	bne.n	800b846 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b836:	f248 0103 	movw	r1, #32771	@ 0x8003
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fd5e 	bl	800c2fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b854:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6859      	ldr	r1, [r3, #4]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	4b8c      	ldr	r3, [pc, #560]	@ (800ba94 <I2C_ITSlaveCplt+0x2cc>)
 800b862:	400b      	ands	r3, r1
 800b864:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa85 	bl	800bd76 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	0b9b      	lsrs	r3, r3, #14
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d013      	beq.n	800b8a0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b886:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d020      	beq.n	800b8d2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	b29a      	uxth	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b89e:	e018      	b.n	800b8d2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	0bdb      	lsrs	r3, r3, #15
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d012      	beq.n	800b8d2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b8ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d006      	beq.n	800b8d2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	089b      	lsrs	r3, r3, #2
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d020      	beq.n	800b920 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f023 0304 	bic.w	r3, r3, #4
 800b8e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f0:	b2d2      	uxtb	r2, r2
 800b8f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00c      	beq.n	800b920 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b90a:	3b01      	subs	r3, #1
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b916:	b29b      	uxth	r3, r3
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d005      	beq.n	800b936 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b92e:	f043 0204 	orr.w	r2, r3, #4
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	091b      	lsrs	r3, r3, #4
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d04a      	beq.n	800b9d8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	091b      	lsrs	r3, r3, #4
 800b946:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d044      	beq.n	800b9d8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b952:	b29b      	uxth	r3, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d128      	bne.n	800b9aa <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b28      	cmp	r3, #40	@ 0x28
 800b962:	d108      	bne.n	800b976 <I2C_ITSlaveCplt+0x1ae>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b96a:	d104      	bne.n	800b976 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b96c:	6979      	ldr	r1, [r7, #20]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f894 	bl	800ba9c <I2C_ITListenCplt>
 800b974:	e030      	b.n	800b9d8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b29      	cmp	r3, #41	@ 0x29
 800b980:	d10e      	bne.n	800b9a0 <I2C_ITSlaveCplt+0x1d8>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b988:	d00a      	beq.n	800b9a0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2210      	movs	r2, #16
 800b990:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9ef 	bl	800bd76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff feb6 	bl	800b70a <I2C_ITSlaveSeqCplt>
 800b99e:	e01b      	b.n	800b9d8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2210      	movs	r2, #16
 800b9a6:	61da      	str	r2, [r3, #28]
 800b9a8:	e016      	b.n	800b9d8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2210      	movs	r2, #16
 800b9b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9b6:	f043 0204 	orr.w	r2, r3, #4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d003      	beq.n	800b9cc <I2C_ITSlaveCplt+0x204>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ca:	d105      	bne.n	800b9d8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f8b8 	bl	800bb48 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d010      	beq.n	800ba10 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f8a7 	bl	800bb48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b28      	cmp	r3, #40	@ 0x28
 800ba04:	d141      	bne.n	800ba8a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba06:	6979      	ldr	r1, [r7, #20]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f847 	bl	800ba9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba0e:	e03c      	b.n	800ba8a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ba18:	d014      	beq.n	800ba44 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7ff fe75 	bl	800b70a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a1d      	ldr	r2, [pc, #116]	@ (800ba98 <I2C_ITSlaveCplt+0x2d0>)
 800ba24:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fcbe 	bl	800b3be <HAL_I2C_ListenCpltCallback>
}
 800ba42:	e022      	b.n	800ba8a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b22      	cmp	r3, #34	@ 0x22
 800ba4e:	d10e      	bne.n	800ba6e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2220      	movs	r2, #32
 800ba54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff fc91 	bl	800b38e <HAL_I2C_SlaveRxCpltCallback>
}
 800ba6c:	e00d      	b.n	800ba8a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2220      	movs	r2, #32
 800ba72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff fc78 	bl	800b37a <HAL_I2C_SlaveTxCpltCallback>
}
 800ba8a:	bf00      	nop
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	fe00e800 	.word	0xfe00e800
 800ba98:	ffff0000 	.word	0xffff0000

0800ba9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a26      	ldr	r2, [pc, #152]	@ (800bb44 <I2C_ITListenCplt+0xa8>)
 800baaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2220      	movs	r2, #32
 800bab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	089b      	lsrs	r3, r3, #2
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d022      	beq.n	800bb1a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d012      	beq.n	800bb1a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	3b01      	subs	r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb12:	f043 0204 	orr.w	r2, r3, #4
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb1a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fbec 	bl	800c2fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2210      	movs	r2, #16
 800bb2a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fc42 	bl	800b3be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bb3a:	bf00      	nop
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	ffff0000 	.word	0xffff0000

0800bb48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb58:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a6d      	ldr	r2, [pc, #436]	@ (800bd1c <I2C_ITError+0x1d4>)
 800bb66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	2b28      	cmp	r3, #40	@ 0x28
 800bb7e:	d005      	beq.n	800bb8c <I2C_ITError+0x44>
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b29      	cmp	r3, #41	@ 0x29
 800bb84:	d002      	beq.n	800bb8c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb8a:	d10b      	bne.n	800bba4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb8c:	2103      	movs	r1, #3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fbb4 	bl	800c2fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2228      	movs	r2, #40	@ 0x28
 800bb98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a60      	ldr	r2, [pc, #384]	@ (800bd20 <I2C_ITError+0x1d8>)
 800bba0:	635a      	str	r2, [r3, #52]	@ 0x34
 800bba2:	e030      	b.n	800bc06 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bba4:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fba7 	bl	800c2fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f8e1 	bl	800bd76 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b60      	cmp	r3, #96	@ 0x60
 800bbbe:	d01f      	beq.n	800bc00 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	f003 0320 	and.w	r3, r3, #32
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d114      	bne.n	800bc00 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	f003 0310 	and.w	r3, r3, #16
 800bbe0:	2b10      	cmp	r3, #16
 800bbe2:	d109      	bne.n	800bbf8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2210      	movs	r2, #16
 800bbea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbf0:	f043 0204 	orr.w	r2, r3, #4
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d039      	beq.n	800bc88 <I2C_ITError+0x140>
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b11      	cmp	r3, #17
 800bc18:	d002      	beq.n	800bc20 <I2C_ITError+0xd8>
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b21      	cmp	r3, #33	@ 0x21
 800bc1e:	d133      	bne.n	800bc88 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc2e:	d107      	bne.n	800bc40 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bc3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fe fe3a 	bl	800a8be <HAL_DMA_GetState>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d017      	beq.n	800bc80 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc54:	4a33      	ldr	r2, [pc, #204]	@ (800bd24 <I2C_ITError+0x1dc>)
 800bc56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fe fd1c 	bl	800a6a2 <HAL_DMA_Abort_IT>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d04d      	beq.n	800bd0c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc7e:	e045      	b.n	800bd0c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f851 	bl	800bd28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc86:	e041      	b.n	800bd0c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d039      	beq.n	800bd04 <I2C_ITError+0x1bc>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b12      	cmp	r3, #18
 800bc94:	d002      	beq.n	800bc9c <I2C_ITError+0x154>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b22      	cmp	r3, #34	@ 0x22
 800bc9a:	d133      	bne.n	800bd04 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcaa:	d107      	bne.n	800bcbc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bcba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fdfc 	bl	800a8be <HAL_DMA_GetState>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d017      	beq.n	800bcfc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd0:	4a14      	ldr	r2, [pc, #80]	@ (800bd24 <I2C_ITError+0x1dc>)
 800bcd2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fe fcde 	bl	800a6a2 <HAL_DMA_Abort_IT>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d011      	beq.n	800bd10 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bcfa:	e009      	b.n	800bd10 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 f813 	bl	800bd28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd02:	e005      	b.n	800bd10 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f80f 	bl	800bd28 <I2C_TreatErrorCallback>
  }
}
 800bd0a:	e002      	b.n	800bd12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd0c:	bf00      	nop
 800bd0e:	e000      	b.n	800bd12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd10:	bf00      	nop
}
 800bd12:	bf00      	nop
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	ffff0000 	.word	0xffff0000
 800bd20:	0800b3fb 	.word	0x0800b3fb
 800bd24:	0800bdbf 	.word	0x0800bdbf

0800bd28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b60      	cmp	r3, #96	@ 0x60
 800bd3a:	d10e      	bne.n	800bd5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff fb47 	bl	800b3e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bd58:	e009      	b.n	800bd6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fb32 	bl	800b3d2 <HAL_I2C_ErrorCallback>
}
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	f003 0302 	and.w	r3, r3, #2
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d103      	bne.n	800bd94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2200      	movs	r2, #0
 800bd92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d007      	beq.n	800bdb2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	699a      	ldr	r2, [r3, #24]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f042 0201 	orr.w	r2, r2, #1
 800bdb0:	619a      	str	r2, [r3, #24]
  }
}
 800bdb2:	bf00      	nop
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd8:	2200      	movs	r2, #0
 800bdda:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde8:	2200      	movs	r2, #0
 800bdea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7ff ff9b 	bl	800bd28 <I2C_TreatErrorCallback>
}
 800bdf2:	bf00      	nop
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	603b      	str	r3, [r7, #0]
 800be06:	4613      	mov	r3, r2
 800be08:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be0a:	e03b      	b.n	800be84 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f961 	bl	800c0d8 <I2C_IsErrorOccurred>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e041      	b.n	800bea4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be26:	d02d      	beq.n	800be84 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be28:	f7fc ff60 	bl	8008cec <HAL_GetTick>
 800be2c:	4602      	mov	r2, r0
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d302      	bcc.n	800be3e <I2C_WaitOnFlagUntilTimeout+0x44>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d122      	bne.n	800be84 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	4013      	ands	r3, r2
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	bf0c      	ite	eq
 800be4e:	2301      	moveq	r3, #1
 800be50:	2300      	movne	r3, #0
 800be52:	b2db      	uxtb	r3, r3
 800be54:	461a      	mov	r2, r3
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d113      	bne.n	800be84 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be60:	f043 0220 	orr.w	r2, r3, #32
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e00f      	b.n	800bea4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	699a      	ldr	r2, [r3, #24]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	4013      	ands	r3, r2
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	429a      	cmp	r2, r3
 800be92:	bf0c      	ite	eq
 800be94:	2301      	moveq	r3, #1
 800be96:	2300      	movne	r3, #0
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d0b4      	beq.n	800be0c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800beb8:	e033      	b.n	800bf22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	68b9      	ldr	r1, [r7, #8]
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	f000 f90a 	bl	800c0d8 <I2C_IsErrorOccurred>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e031      	b.n	800bf32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d025      	beq.n	800bf22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bed6:	f7fc ff09 	bl	8008cec <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d302      	bcc.n	800beec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d11a      	bne.n	800bf22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d013      	beq.n	800bf22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800befe:	f043 0220 	orr.w	r2, r3, #32
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e007      	b.n	800bf32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d1c4      	bne.n	800beba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	60f8      	str	r0, [r7, #12]
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf46:	e02f      	b.n	800bfa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f8c3 	bl	800c0d8 <I2C_IsErrorOccurred>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e02d      	b.n	800bfb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf5c:	f7fc fec6 	bl	8008cec <HAL_GetTick>
 800bf60:	4602      	mov	r2, r0
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d302      	bcc.n	800bf72 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11a      	bne.n	800bfa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	f003 0320 	and.w	r3, r3, #32
 800bf7c:	2b20      	cmp	r3, #32
 800bf7e:	d013      	beq.n	800bfa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf84:	f043 0220 	orr.w	r2, r3, #32
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e007      	b.n	800bfb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d1c8      	bne.n	800bf48 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bfd0:	e071      	b.n	800c0b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	68b9      	ldr	r1, [r7, #8]
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 f87e 	bl	800c0d8 <I2C_IsErrorOccurred>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	f003 0320 	and.w	r3, r3, #32
 800bff0:	2b20      	cmp	r3, #32
 800bff2:	d13b      	bne.n	800c06c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d138      	bne.n	800c06c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b04      	cmp	r3, #4
 800c006:	d105      	bne.n	800c014 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b10      	cmp	r3, #16
 800c020:	d121      	bne.n	800c066 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2210      	movs	r2, #16
 800c028:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2204      	movs	r2, #4
 800c02e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2220      	movs	r2, #32
 800c036:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6859      	ldr	r1, [r3, #4]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	4b24      	ldr	r3, [pc, #144]	@ (800c0d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c044:	400b      	ands	r3, r1
 800c046:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2220      	movs	r2, #32
 800c04c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	75fb      	strb	r3, [r7, #23]
 800c064:	e002      	b.n	800c06c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800c06c:	f7fc fe3e 	bl	8008cec <HAL_GetTick>
 800c070:	4602      	mov	r2, r0
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d302      	bcc.n	800c082 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d119      	bne.n	800c0b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d116      	bne.n	800c0b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	f003 0304 	and.w	r3, r3, #4
 800c092:	2b04      	cmp	r3, #4
 800c094:	d00f      	beq.n	800c0b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09a:	f043 0220 	orr.w	r2, r3, #32
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	f003 0304 	and.w	r3, r3, #4
 800c0c0:	2b04      	cmp	r3, #4
 800c0c2:	d002      	beq.n	800c0ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d083      	beq.n	800bfd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	fe00e800 	.word	0xfe00e800

0800c0d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08a      	sub	sp, #40	@ 0x28
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	f003 0310 	and.w	r3, r3, #16
 800c100:	2b00      	cmp	r3, #0
 800c102:	d068      	beq.n	800c1d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2210      	movs	r2, #16
 800c10a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c10c:	e049      	b.n	800c1a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d045      	beq.n	800c1a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c116:	f7fc fde9 	bl	8008cec <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	429a      	cmp	r2, r3
 800c124:	d302      	bcc.n	800c12c <I2C_IsErrorOccurred+0x54>
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d13a      	bne.n	800c1a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c136:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c13e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c14a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c14e:	d121      	bne.n	800c194 <I2C_IsErrorOccurred+0xbc>
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c156:	d01d      	beq.n	800c194 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c158:	7cfb      	ldrb	r3, [r7, #19]
 800c15a:	2b20      	cmp	r3, #32
 800c15c:	d01a      	beq.n	800c194 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c16c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c16e:	f7fc fdbd 	bl	8008cec <HAL_GetTick>
 800c172:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c174:	e00e      	b.n	800c194 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c176:	f7fc fdb9 	bl	8008cec <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	2b19      	cmp	r3, #25
 800c182:	d907      	bls.n	800c194 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	f043 0320 	orr.w	r3, r3, #32
 800c18a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c192:	e006      	b.n	800c1a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	f003 0320 	and.w	r3, r3, #32
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	d1e9      	bne.n	800c176 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	f003 0320 	and.w	r3, r3, #32
 800c1ac:	2b20      	cmp	r3, #32
 800c1ae:	d003      	beq.n	800c1b8 <I2C_IsErrorOccurred+0xe0>
 800c1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d0aa      	beq.n	800c10e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c1c8:	6a3b      	ldr	r3, [r7, #32]
 800c1ca:	f043 0304 	orr.w	r3, r3, #4
 800c1ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00b      	beq.n	800c200 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	f043 0301 	orr.w	r3, r3, #1
 800c1ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00b      	beq.n	800c222 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	f043 0308 	orr.w	r3, r3, #8
 800c210:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c21a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00b      	beq.n	800c244 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	f043 0302 	orr.w	r3, r3, #2
 800c232:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c23c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01c      	beq.n	800c286 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f7ff fd92 	bl	800bd76 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6859      	ldr	r1, [r3, #4]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	4b0d      	ldr	r3, [pc, #52]	@ (800c294 <I2C_IsErrorOccurred+0x1bc>)
 800c25e:	400b      	ands	r3, r1
 800c260:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	431a      	orrs	r2, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2220      	movs	r2, #32
 800c272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3728      	adds	r7, #40	@ 0x28
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	fe00e800 	.word	0xfe00e800

0800c298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	817b      	strh	r3, [r7, #10]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2aa:	897b      	ldrh	r3, [r7, #10]
 800c2ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c2b0:	7a7b      	ldrb	r3, [r7, #9]
 800c2b2:	041b      	lsls	r3, r3, #16
 800c2b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	0d5b      	lsrs	r3, r3, #21
 800c2d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c2d6:	4b08      	ldr	r3, [pc, #32]	@ (800c2f8 <I2C_TransferConfig+0x60>)
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	43db      	mvns	r3, r3
 800c2dc:	ea02 0103 	and.w	r1, r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c2ea:	bf00      	nop
 800c2ec:	371c      	adds	r7, #28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	03ff63ff 	.word	0x03ff63ff

0800c2fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c308:	2300      	movs	r3, #0
 800c30a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c30c:	887b      	ldrh	r3, [r7, #2]
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00f      	beq.n	800c336 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800c31c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c324:	b2db      	uxtb	r3, r3
 800c326:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c32a:	2b28      	cmp	r3, #40	@ 0x28
 800c32c:	d003      	beq.n	800c336 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c334:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c336:	887b      	ldrh	r3, [r7, #2]
 800c338:	f003 0302 	and.w	r3, r3, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00f      	beq.n	800c360 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800c346:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c354:	2b28      	cmp	r3, #40	@ 0x28
 800c356:	d003      	beq.n	800c360 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c35e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c364:	2b00      	cmp	r3, #0
 800c366:	da03      	bge.n	800c370 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800c36e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c370:	887b      	ldrh	r3, [r7, #2]
 800c372:	2b10      	cmp	r3, #16
 800c374:	d103      	bne.n	800c37e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800c37c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c37e:	887b      	ldrh	r3, [r7, #2]
 800c380:	2b20      	cmp	r3, #32
 800c382:	d103      	bne.n	800c38c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f043 0320 	orr.w	r3, r3, #32
 800c38a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c38c:	887b      	ldrh	r3, [r7, #2]
 800c38e:	2b40      	cmp	r3, #64	@ 0x40
 800c390:	d103      	bne.n	800c39a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c398:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6819      	ldr	r1, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	43da      	mvns	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	400a      	ands	r2, r1
 800c3aa:	601a      	str	r2, [r3, #0]
}
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b20      	cmp	r3, #32
 800c3cc:	d138      	bne.n	800c440 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e032      	b.n	800c442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2224      	movs	r2, #36	@ 0x24
 800c3e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0201 	bic.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c40a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6819      	ldr	r1, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	430a      	orrs	r2, r1
 800c41a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f042 0201 	orr.w	r2, r2, #1
 800c42a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2220      	movs	r2, #32
 800c430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e000      	b.n	800c442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c440:	2302      	movs	r3, #2
  }
}
 800c442:	4618      	mov	r0, r3
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c44e:	b480      	push	{r7}
 800c450:	b085      	sub	sp, #20
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b20      	cmp	r3, #32
 800c462:	d139      	bne.n	800c4d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d101      	bne.n	800c472 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c46e:	2302      	movs	r3, #2
 800c470:	e033      	b.n	800c4da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2224      	movs	r2, #36	@ 0x24
 800c47e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f022 0201 	bic.w	r2, r2, #1
 800c490:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c4a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	021b      	lsls	r3, r3, #8
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0201 	orr.w	r2, r2, #1
 800c4c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e000      	b.n	800c4da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c4d8:	2302      	movs	r3, #2
  }
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e0c0      	b.n	800c67a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d106      	bne.n	800c512 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f00b fe2b 	bl	8018168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2203      	movs	r2, #3
 800c516:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f003 ff21 	bl	8010366 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c524:	2300      	movs	r3, #0
 800c526:	73fb      	strb	r3, [r7, #15]
 800c528:	e03e      	b.n	800c5a8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c52a:	7bfa      	ldrb	r2, [r7, #15]
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	440b      	add	r3, r1
 800c538:	3311      	adds	r3, #17
 800c53a:	2201      	movs	r2, #1
 800c53c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c53e:	7bfa      	ldrb	r2, [r7, #15]
 800c540:	6879      	ldr	r1, [r7, #4]
 800c542:	4613      	mov	r3, r2
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	440b      	add	r3, r1
 800c54c:	3310      	adds	r3, #16
 800c54e:	7bfa      	ldrb	r2, [r7, #15]
 800c550:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c552:	7bfa      	ldrb	r2, [r7, #15]
 800c554:	6879      	ldr	r1, [r7, #4]
 800c556:	4613      	mov	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	3313      	adds	r3, #19
 800c562:	2200      	movs	r2, #0
 800c564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c566:	7bfa      	ldrb	r2, [r7, #15]
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	4613      	mov	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	00db      	lsls	r3, r3, #3
 800c572:	440b      	add	r3, r1
 800c574:	3320      	adds	r3, #32
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c57a:	7bfa      	ldrb	r2, [r7, #15]
 800c57c:	6879      	ldr	r1, [r7, #4]
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	440b      	add	r3, r1
 800c588:	3324      	adds	r3, #36	@ 0x24
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	4613      	mov	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	00db      	lsls	r3, r3, #3
 800c59c:	440b      	add	r3, r1
 800c59e:	2200      	movs	r2, #0
 800c5a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	73fb      	strb	r3, [r7, #15]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	791b      	ldrb	r3, [r3, #4]
 800c5ac:	7bfa      	ldrb	r2, [r7, #15]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d3bb      	bcc.n	800c52a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73fb      	strb	r3, [r7, #15]
 800c5b6:	e044      	b.n	800c642 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c5b8:	7bfa      	ldrb	r2, [r7, #15]
 800c5ba:	6879      	ldr	r1, [r7, #4]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	440b      	add	r3, r1
 800c5c6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c5ce:	7bfa      	ldrb	r2, [r7, #15]
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	440b      	add	r3, r1
 800c5dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5e0:	7bfa      	ldrb	r2, [r7, #15]
 800c5e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c5e4:	7bfa      	ldrb	r2, [r7, #15]
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	440b      	add	r3, r1
 800c5f2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c5fa:	7bfa      	ldrb	r2, [r7, #15]
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	4613      	mov	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	00db      	lsls	r3, r3, #3
 800c606:	440b      	add	r3, r1
 800c608:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800c60c:	2200      	movs	r2, #0
 800c60e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c610:	7bfa      	ldrb	r2, [r7, #15]
 800c612:	6879      	ldr	r1, [r7, #4]
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	440b      	add	r3, r1
 800c61e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c626:	7bfa      	ldrb	r2, [r7, #15]
 800c628:	6879      	ldr	r1, [r7, #4]
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	440b      	add	r3, r1
 800c634:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800c638:	2200      	movs	r2, #0
 800c63a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	3301      	adds	r3, #1
 800c640:	73fb      	strb	r3, [r7, #15]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	791b      	ldrb	r3, [r3, #4]
 800c646:	7bfa      	ldrb	r2, [r7, #15]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d3b5      	bcc.n	800c5b8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	3304      	adds	r3, #4
 800c654:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c658:	f003 fea0 	bl	801039c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7a9b      	ldrb	r3, [r3, #10]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d102      	bne.n	800c678 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f001 fc0e 	bl	800de94 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b082      	sub	sp, #8
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_PCD_Start+0x16>
 800c694:	2302      	movs	r3, #2
 800c696:	e012      	b.n	800c6be <HAL_PCD_Start+0x3c>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f003 fe47 	bl	8010338 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f005 fc24 	bl	8011efc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f005 fc29 	bl	8011f2a <USB_ReadInterrupts>
 800c6d8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fb06 	bl	800ccf6 <PCD_EP_ISR_Handler>

    return;
 800c6ea:	e110      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d013      	beq.n	800c71e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c708:	b292      	uxth	r2, r2
 800c70a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f00b fdcd 	bl	80182ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c714:	2100      	movs	r1, #0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f8fc 	bl	800c914 <HAL_PCD_SetAddress>

    return;
 800c71c:	e0f7      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00c      	beq.n	800c742 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c730:	b29a      	uxth	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c73a:	b292      	uxth	r2, r2
 800c73c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800c740:	e0e5      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00c      	beq.n	800c766 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c754:	b29a      	uxth	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c75e:	b292      	uxth	r2, r2
 800c760:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800c764:	e0d3      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d034      	beq.n	800c7da <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c778:	b29a      	uxth	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f022 0204 	bic.w	r2, r2, #4
 800c782:	b292      	uxth	r2, r2
 800c784:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f022 0208 	bic.w	r2, r2, #8
 800c79a:	b292      	uxth	r2, r2
 800c79c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d107      	bne.n	800c7ba <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f00b ff6f 	bl	8018698 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f00b fdb0 	bl	8018320 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c7d2:	b292      	uxth	r2, r2
 800c7d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800c7d8:	e099      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d027      	beq.n	800c834 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f042 0208 	orr.w	r2, r2, #8
 800c7f6:	b292      	uxth	r2, r2
 800c7f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c804:	b29a      	uxth	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c80e:	b292      	uxth	r2, r2
 800c810:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0204 	orr.w	r2, r2, #4
 800c826:	b292      	uxth	r2, r2
 800c828:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f00b fd5d 	bl	80182ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c832:	e06c      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d040      	beq.n	800c8c0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c850:	b292      	uxth	r2, r2
 800c852:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d12b      	bne.n	800c8b8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c868:	b29a      	uxth	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f042 0204 	orr.w	r2, r2, #4
 800c872:	b292      	uxth	r2, r2
 800c874:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c880:	b29a      	uxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f042 0208 	orr.w	r2, r2, #8
 800c88a:	b292      	uxth	r2, r2
 800c88c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	089b      	lsrs	r3, r3, #2
 800c8a4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f00b fef1 	bl	8018698 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c8b6:	e02a      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f00b fd17 	bl	80182ec <HAL_PCD_SuspendCallback>
    return;
 800c8be:	e026      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00f      	beq.n	800c8ea <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c8dc:	b292      	uxth	r2, r2
 800c8de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f00b fcd5 	bl	8018292 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c8e8:	e011      	b.n	800c90e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00c      	beq.n	800c90e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c906:	b292      	uxth	r2, r2
 800c908:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800c90c:	bf00      	nop
  }
}
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800c926:	2b01      	cmp	r3, #1
 800c928:	d101      	bne.n	800c92e <HAL_PCD_SetAddress+0x1a>
 800c92a:	2302      	movs	r3, #2
 800c92c:	e012      	b.n	800c954 <HAL_PCD_SetAddress+0x40>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	78fa      	ldrb	r2, [r7, #3]
 800c93a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f005 fac5 	bl	8011ed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	4608      	mov	r0, r1
 800c966:	4611      	mov	r1, r2
 800c968:	461a      	mov	r2, r3
 800c96a:	4603      	mov	r3, r0
 800c96c:	70fb      	strb	r3, [r7, #3]
 800c96e:	460b      	mov	r3, r1
 800c970:	803b      	strh	r3, [r7, #0]
 800c972:	4613      	mov	r3, r2
 800c974:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c97a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da0e      	bge.n	800c9a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	f003 0207 	and.w	r2, r3, #7
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	3310      	adds	r3, #16
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	4413      	add	r3, r2
 800c996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2201      	movs	r2, #1
 800c99c:	705a      	strb	r2, [r3, #1]
 800c99e:	e00e      	b.n	800c9be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9a0:	78fb      	ldrb	r3, [r7, #3]
 800c9a2:	f003 0207 	and.w	r2, r3, #7
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c9be:	78fb      	ldrb	r3, [r7, #3]
 800c9c0:	f003 0307 	and.w	r3, r3, #7
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c9ca:	883b      	ldrh	r3, [r7, #0]
 800c9cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	78ba      	ldrb	r2, [r7, #2]
 800c9d8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c9da:	78bb      	ldrb	r3, [r7, #2]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d102      	bne.n	800c9e6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d101      	bne.n	800c9f4 <HAL_PCD_EP_Open+0x98>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e00e      	b.n	800ca12 <HAL_PCD_EP_Open+0xb6>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68f9      	ldr	r1, [r7, #12]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f003 fce8 	bl	80103d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800ca10:	7afb      	ldrb	r3, [r7, #11]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b084      	sub	sp, #16
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	460b      	mov	r3, r1
 800ca24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ca26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	da0e      	bge.n	800ca4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca2e:	78fb      	ldrb	r3, [r7, #3]
 800ca30:	f003 0207 	and.w	r2, r3, #7
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	3310      	adds	r3, #16
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	4413      	add	r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	705a      	strb	r2, [r3, #1]
 800ca4a:	e00e      	b.n	800ca6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca4c:	78fb      	ldrb	r3, [r7, #3]
 800ca4e:	f003 0207 	and.w	r2, r3, #7
 800ca52:	4613      	mov	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	4413      	add	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca6a:	78fb      	ldrb	r3, [r7, #3]
 800ca6c:	f003 0307 	and.w	r3, r3, #7
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d101      	bne.n	800ca84 <HAL_PCD_EP_Close+0x6a>
 800ca80:	2302      	movs	r3, #2
 800ca82:	e00e      	b.n	800caa2 <HAL_PCD_EP_Close+0x88>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68f9      	ldr	r1, [r7, #12]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f004 f988 	bl	8010da8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b086      	sub	sp, #24
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
 800cab6:	460b      	mov	r3, r1
 800cab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800caba:	7afb      	ldrb	r3, [r7, #11]
 800cabc:	f003 0207 	and.w	r2, r3, #7
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2200      	movs	r2, #0
 800cae2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2200      	movs	r2, #0
 800cae8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800caea:	7afb      	ldrb	r3, [r7, #11]
 800caec:	f003 0307 	and.w	r3, r3, #7
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6979      	ldr	r1, [r7, #20]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f004 fb40 	bl	8011182 <USB_EPStartXfer>

  return HAL_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cb18:	78fb      	ldrb	r3, [r7, #3]
 800cb1a:	f003 0207 	and.w	r2, r3, #7
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	4613      	mov	r3, r2
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	4413      	add	r3, r2
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	440b      	add	r3, r1
 800cb2a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800cb2e:	681b      	ldr	r3, [r3, #0]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	607a      	str	r2, [r7, #4]
 800cb46:	603b      	str	r3, [r7, #0]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb4c:	7afb      	ldrb	r3, [r7, #11]
 800cb4e:	f003 0207 	and.w	r2, r3, #7
 800cb52:	4613      	mov	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	3310      	adds	r3, #16
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2201      	movs	r2, #1
 800cb86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb88:	7afb      	ldrb	r3, [r7, #11]
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6979      	ldr	r1, [r7, #20]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f004 faf1 	bl	8011182 <USB_EPStartXfer>

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cbb6:	78fb      	ldrb	r3, [r7, #3]
 800cbb8:	f003 0307 	and.w	r3, r3, #7
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	7912      	ldrb	r2, [r2, #4]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d901      	bls.n	800cbc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e03e      	b.n	800cc46 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cbc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da0e      	bge.n	800cbee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	f003 0207 	and.w	r2, r3, #7
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	3310      	adds	r3, #16
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	705a      	strb	r2, [r3, #1]
 800cbec:	e00c      	b.n	800cc08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	4413      	add	r3, r2
 800cc00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc0e:	78fb      	ldrb	r3, [r7, #3]
 800cc10:	f003 0307 	and.w	r3, r3, #7
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d101      	bne.n	800cc28 <HAL_PCD_EP_SetStall+0x7e>
 800cc24:	2302      	movs	r3, #2
 800cc26:	e00e      	b.n	800cc46 <HAL_PCD_EP_SetStall+0x9c>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f005 f852 	bl	8011ce0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	460b      	mov	r3, r1
 800cc58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	f003 030f 	and.w	r3, r3, #15
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	7912      	ldrb	r2, [r2, #4]
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d901      	bls.n	800cc6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e040      	b.n	800ccee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cc6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	da0e      	bge.n	800cc92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	f003 0207 	and.w	r2, r3, #7
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4413      	add	r3, r2
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	3310      	adds	r3, #16
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	4413      	add	r3, r2
 800cc88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	705a      	strb	r2, [r3, #1]
 800cc90:	e00e      	b.n	800ccb0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc92:	78fb      	ldrb	r3, [r7, #3]
 800cc94:	f003 0207 	and.w	r2, r3, #7
 800cc98:	4613      	mov	r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	4413      	add	r3, r2
 800cca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccb6:	78fb      	ldrb	r3, [r7, #3]
 800ccb8:	f003 0307 	and.w	r3, r3, #7
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d101      	bne.n	800ccd0 <HAL_PCD_EP_ClrStall+0x82>
 800cccc:	2302      	movs	r3, #2
 800ccce:	e00e      	b.n	800ccee <HAL_PCD_EP_ClrStall+0xa0>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68f9      	ldr	r1, [r7, #12]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f005 f84f 	bl	8011d82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b092      	sub	sp, #72	@ 0x48
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ccfe:	e333      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd08:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800cd0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	f003 030f 	and.w	r3, r3, #15
 800cd12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800cd16:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f040 8108 	bne.w	800cf30 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800cd20:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cd22:	f003 0310 	and.w	r3, r3, #16
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d14c      	bne.n	800cdc4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800cd36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd3a:	813b      	strh	r3, [r7, #8]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	893b      	ldrh	r3, [r7, #8]
 800cd42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	3310      	adds	r3, #16
 800cd52:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	4413      	add	r3, r2
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	6812      	ldr	r2, [r2, #0]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800cd78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800cd7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd7e:	695a      	ldr	r2, [r3, #20]
 800cd80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	441a      	add	r2, r3
 800cd86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f00b fa66 	bl	801825e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	7b1b      	ldrb	r3, [r3, #12]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 82e5 	beq.w	800d368 <PCD_EP_ISR_Handler+0x672>
 800cd9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f040 82e0 	bne.w	800d368 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	7b1b      	ldrb	r3, [r3, #12]
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	731a      	strb	r2, [r3, #12]
 800cdc2:	e2d1      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cdca:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800cdd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cdd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d032      	beq.n	800ce44 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	461a      	mov	r2, r3
 800cdea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	00db      	lsls	r3, r3, #3
 800cdf0:	4413      	add	r3, r2
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	6812      	ldr	r2, [r2, #0]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ce02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800ce10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ce14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	f005 f8d9 	bl	8011fd0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	817b      	strh	r3, [r7, #10]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	897a      	ldrh	r2, [r7, #10]
 800ce34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ce38:	b292      	uxth	r2, r2
 800ce3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f00b f9e1 	bl	8018204 <HAL_PCD_SetupStageCallback>
 800ce42:	e291      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ce44:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f280 828d 	bge.w	800d368 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	81fb      	strh	r3, [r7, #14]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	89fa      	ldrh	r2, [r7, #14]
 800ce64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ce68:	b292      	uxth	r2, r2
 800ce6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	461a      	mov	r2, r3
 800ce78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	4413      	add	r3, r2
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	6812      	ldr	r2, [r2, #0]
 800ce84:	4413      	add	r3, r2
 800ce86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ce90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ce94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d019      	beq.n	800ced0 <PCD_EP_ISR_Handler+0x1da>
 800ce9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d015      	beq.n	800ced0 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceaa:	6959      	ldr	r1, [r3, #20]
 800ceac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ceb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	f005 f88b 	bl	8011fd0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ceba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cebc:	695a      	ldr	r2, [r3, #20]
 800cebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	441a      	add	r2, r3
 800cec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cec6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800cec8:	2100      	movs	r1, #0
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f00b f9ac 	bl	8018228 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ced8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ceda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 8242 	bne.w	800d368 <PCD_EP_ISR_Handler+0x672>
 800cee4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cee6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ceea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ceee:	f000 823b 	beq.w	800d368 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cefe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf02:	81bb      	strh	r3, [r7, #12]
 800cf04:	89bb      	ldrh	r3, [r7, #12]
 800cf06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cf0a:	81bb      	strh	r3, [r7, #12]
 800cf0c:	89bb      	ldrh	r3, [r7, #12]
 800cf0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cf12:	81bb      	strh	r3, [r7, #12]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	89bb      	ldrh	r3, [r7, #12]
 800cf1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	8013      	strh	r3, [r2, #0]
 800cf2e:	e21b      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	461a      	mov	r2, r3
 800cf36:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800cf42:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f280 80f1 	bge.w	800d12e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	461a      	mov	r2, r3
 800cf52:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800cf62:	4013      	ands	r3, r2
 800cf64:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800cf76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cf7a:	b292      	uxth	r2, r2
 800cf7c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800cf7e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800cf82:	4613      	mov	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4413      	add	r3, r2
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	4413      	add	r3, r2
 800cf92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800cf94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf96:	7b1b      	ldrb	r3, [r3, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d123      	bne.n	800cfe4 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	4413      	add	r3, r2
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	6812      	ldr	r2, [r2, #0]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800cfc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	f000 808b 	beq.w	800d0e4 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfd4:	6959      	ldr	r1, [r3, #20]
 800cfd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfd8:	88da      	ldrh	r2, [r3, #6]
 800cfda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cfde:	f004 fff7 	bl	8011fd0 <USB_ReadPMA>
 800cfe2:	e07f      	b.n	800d0e4 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800cfe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe6:	78db      	ldrb	r3, [r3, #3]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d109      	bne.n	800d000 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800cfec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cfee:	461a      	mov	r2, r3
 800cff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f9c6 	bl	800d384 <HAL_PCD_EP_DB_Receive>
 800cff8:	4603      	mov	r3, r0
 800cffa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cffe:	e071      	b.n	800d0e4 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	461a      	mov	r2, r3
 800d006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	b29b      	uxth	r3, r3
 800d012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d01a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	461a      	mov	r2, r3
 800d022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	441a      	add	r2, r3
 800d02a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d02c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d038:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	461a      	mov	r2, r3
 800d046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	b29b      	uxth	r3, r3
 800d052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d022      	beq.n	800d0a0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d062:	b29b      	uxth	r3, r3
 800d064:	461a      	mov	r2, r3
 800d066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	4413      	add	r3, r2
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	6812      	ldr	r2, [r2, #0]
 800d072:	4413      	add	r3, r2
 800d074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d07e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800d082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d086:	2b00      	cmp	r3, #0
 800d088:	d02c      	beq.n	800d0e4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d090:	6959      	ldr	r1, [r3, #20]
 800d092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d094:	891a      	ldrh	r2, [r3, #8]
 800d096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d09a:	f004 ff99 	bl	8011fd0 <USB_ReadPMA>
 800d09e:	e021      	b.n	800d0e4 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	00db      	lsls	r3, r3, #3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	6812      	ldr	r2, [r2, #0]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0be:	881b      	ldrh	r3, [r3, #0]
 800d0c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800d0c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d009      	beq.n	800d0e4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6818      	ldr	r0, [r3, #0]
 800d0d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0d6:	6959      	ldr	r1, [r3, #20]
 800d0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0da:	895a      	ldrh	r2, [r3, #10]
 800d0dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d0e0:	f004 ff76 	bl	8011fd0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d0e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0e6:	69da      	ldr	r2, [r3, #28]
 800d0e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d0ec:	441a      	add	r2, r3
 800d0ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0f4:	695a      	ldr	r2, [r3, #20]
 800d0f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d0fa:	441a      	add	r2, r3
 800d0fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d005      	beq.n	800d114 <PCD_EP_ISR_Handler+0x41e>
 800d108:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	429a      	cmp	r2, r3
 800d112:	d206      	bcs.n	800d122 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800d114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f00b f884 	bl	8018228 <HAL_PCD_DataOutStageCallback>
 800d120:	e005      	b.n	800d12e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d128:	4618      	mov	r0, r3
 800d12a:	f004 f82a 	bl	8011182 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d12e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8117 	beq.w	800d368 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800d13a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	3310      	adds	r3, #16
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	4413      	add	r3, r2
 800d14c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800d164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d168:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	441a      	add	r2, r3
 800d178:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d182:	b29b      	uxth	r3, r3
 800d184:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800d186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d188:	78db      	ldrb	r3, [r3, #3]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	f040 80a1 	bne.w	800d2d2 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800d190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d192:	2200      	movs	r2, #0
 800d194:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800d196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d198:	7b1b      	ldrb	r3, [r3, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 8092 	beq.w	800d2c4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d1a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d1a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d046      	beq.n	800d238 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ac:	785b      	ldrb	r3, [r3, #1]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d126      	bne.n	800d200 <PCD_EP_ISR_Handler+0x50a>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	00da      	lsls	r2, r3, #3
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1d8:	613b      	str	r3, [r7, #16]
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	801a      	strh	r2, [r3, #0]
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	881b      	ldrh	r3, [r3, #0]
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	801a      	strh	r2, [r3, #0]
 800d1fe:	e061      	b.n	800d2c4 <PCD_EP_ISR_Handler+0x5ce>
 800d200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d202:	785b      	ldrb	r3, [r3, #1]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d15d      	bne.n	800d2c4 <PCD_EP_ISR_Handler+0x5ce>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	61fb      	str	r3, [r7, #28]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d216:	b29b      	uxth	r3, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	4413      	add	r3, r2
 800d21e:	61fb      	str	r3, [r7, #28]
 800d220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00da      	lsls	r2, r3, #3
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	4413      	add	r3, r2
 800d22a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d22e:	61bb      	str	r3, [r7, #24]
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	2200      	movs	r2, #0
 800d234:	801a      	strh	r2, [r3, #0]
 800d236:	e045      	b.n	800d2c4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d23e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d240:	785b      	ldrb	r3, [r3, #1]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d126      	bne.n	800d294 <PCD_EP_ISR_Handler+0x59e>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d254:	b29b      	uxth	r3, r3
 800d256:	461a      	mov	r2, r3
 800d258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25a:	4413      	add	r3, r2
 800d25c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d25e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	00da      	lsls	r2, r3, #3
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	4413      	add	r3, r2
 800d268:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d26c:	623b      	str	r3, [r7, #32]
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	b29b      	uxth	r3, r3
 800d274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d278:	b29a      	uxth	r2, r3
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	801a      	strh	r2, [r3, #0]
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	b29b      	uxth	r3, r3
 800d284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	801a      	strh	r2, [r3, #0]
 800d292:	e017      	b.n	800d2c4 <PCD_EP_ISR_Handler+0x5ce>
 800d294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d113      	bne.n	800d2c4 <PCD_EP_ISR_Handler+0x5ce>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2aa:	4413      	add	r3, r2
 800d2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	00da      	lsls	r2, r3, #3
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d2c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f00a ffc7 	bl	801825e <HAL_PCD_DataInStageCallback>
 800d2d0:	e04a      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800d2d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d13f      	bne.n	800d35c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	00db      	lsls	r3, r3, #3
 800d2ee:	4413      	add	r3, r2
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	6812      	ldr	r2, [r2, #0]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d300:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800d302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d304:	699a      	ldr	r2, [r3, #24]
 800d306:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d308:	429a      	cmp	r2, r3
 800d30a:	d906      	bls.n	800d31a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800d30c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d30e:	699a      	ldr	r2, [r3, #24]
 800d310:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d312:	1ad2      	subs	r2, r2, r3
 800d314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d316:	619a      	str	r2, [r3, #24]
 800d318:	e002      	b.n	800d320 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800d31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d31c:	2200      	movs	r2, #0
 800d31e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800d320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d322:	699b      	ldr	r3, [r3, #24]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d106      	bne.n	800d336 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f00a ff95 	bl	801825e <HAL_PCD_DataInStageCallback>
 800d334:	e018      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800d336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d338:	695a      	ldr	r2, [r3, #20]
 800d33a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d33c:	441a      	add	r2, r3
 800d33e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d340:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800d342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d344:	69da      	ldr	r2, [r3, #28]
 800d346:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d348:	441a      	add	r2, r3
 800d34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d34c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d354:	4618      	mov	r0, r3
 800d356:	f003 ff14 	bl	8011182 <USB_EPStartXfer>
 800d35a:	e005      	b.n	800d368 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800d35c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d35e:	461a      	mov	r2, r3
 800d360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f917 	bl	800d596 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d370:	b29b      	uxth	r3, r3
 800d372:	b21b      	sxth	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	f6ff acc3 	blt.w	800cd00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3748      	adds	r7, #72	@ 0x48
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4613      	mov	r3, r2
 800d390:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d392:	88fb      	ldrh	r3, [r7, #6]
 800d394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d07c      	beq.n	800d496 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	4413      	add	r3, r2
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	6812      	ldr	r2, [r2, #0]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	699a      	ldr	r2, [r3, #24]
 800d3c6:	8b7b      	ldrh	r3, [r7, #26]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d306      	bcc.n	800d3da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	8b7b      	ldrh	r3, [r7, #26]
 800d3d2:	1ad2      	subs	r2, r2, r3
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	619a      	str	r2, [r3, #24]
 800d3d8:	e002      	b.n	800d3e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d123      	bne.n	800d430 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d402:	833b      	strh	r3, [r7, #24]
 800d404:	8b3b      	ldrh	r3, [r7, #24]
 800d406:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d40a:	833b      	strh	r3, [r7, #24]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	441a      	add	r2, r3
 800d41a:	8b3b      	ldrh	r3, [r7, #24]
 800d41c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d430:	88fb      	ldrh	r3, [r7, #6]
 800d432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d436:	2b00      	cmp	r3, #0
 800d438:	d01f      	beq.n	800d47a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d454:	82fb      	strh	r3, [r7, #22]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	441a      	add	r2, r3
 800d464:	8afb      	ldrh	r3, [r7, #22]
 800d466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d46a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d46e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d476:	b29b      	uxth	r3, r3
 800d478:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d47a:	8b7b      	ldrh	r3, [r7, #26]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 8085 	beq.w	800d58c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6959      	ldr	r1, [r3, #20]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	891a      	ldrh	r2, [r3, #8]
 800d48e:	8b7b      	ldrh	r3, [r7, #26]
 800d490:	f004 fd9e 	bl	8011fd0 <USB_ReadPMA>
 800d494:	e07a      	b.n	800d58c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	4413      	add	r3, r2
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	699a      	ldr	r2, [r3, #24]
 800d4c0:	8b7b      	ldrh	r3, [r7, #26]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d306      	bcc.n	800d4d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	699a      	ldr	r2, [r3, #24]
 800d4ca:	8b7b      	ldrh	r3, [r7, #26]
 800d4cc:	1ad2      	subs	r2, r2, r3
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	619a      	str	r2, [r3, #24]
 800d4d2:	e002      	b.n	800d4da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	699b      	ldr	r3, [r3, #24]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d123      	bne.n	800d52a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d4f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4fc:	83fb      	strh	r3, [r7, #30]
 800d4fe:	8bfb      	ldrh	r3, [r7, #30]
 800d500:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d504:	83fb      	strh	r3, [r7, #30]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	461a      	mov	r2, r3
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	441a      	add	r2, r3
 800d514:	8bfb      	ldrh	r3, [r7, #30]
 800d516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d51a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d51e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d526:	b29b      	uxth	r3, r3
 800d528:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800d52a:	88fb      	ldrh	r3, [r7, #6]
 800d52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d530:	2b00      	cmp	r3, #0
 800d532:	d11f      	bne.n	800d574 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	461a      	mov	r2, r3
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	b29b      	uxth	r3, r3
 800d546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d54a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d54e:	83bb      	strh	r3, [r7, #28]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	461a      	mov	r2, r3
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	441a      	add	r2, r3
 800d55e:	8bbb      	ldrh	r3, [r7, #28]
 800d560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d56c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d570:	b29b      	uxth	r3, r3
 800d572:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d574:	8b7b      	ldrh	r3, [r7, #26]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d008      	beq.n	800d58c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6818      	ldr	r0, [r3, #0]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6959      	ldr	r1, [r3, #20]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	895a      	ldrh	r2, [r3, #10]
 800d586:	8b7b      	ldrh	r3, [r7, #26]
 800d588:	f004 fd22 	bl	8011fd0 <USB_ReadPMA>
    }
  }

  return count;
 800d58c:	8b7b      	ldrh	r3, [r7, #26]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b0a6      	sub	sp, #152	@ 0x98
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d5a4:	88fb      	ldrh	r3, [r7, #6]
 800d5a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 81f7 	beq.w	800d99e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	4413      	add	r3, r2
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	6812      	ldr	r2, [r2, #0]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5d4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	699a      	ldr	r2, [r3, #24]
 800d5dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d907      	bls.n	800d5f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	699a      	ldr	r2, [r3, #24]
 800d5e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d5ec:	1ad2      	subs	r2, r2, r3
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	619a      	str	r2, [r3, #24]
 800d5f2:	e002      	b.n	800d5fa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f040 80e1 	bne.w	800d7c6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	785b      	ldrb	r3, [r3, #1]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d126      	bne.n	800d65a <HAL_PCD_EP_DB_Transmit+0xc4>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	633b      	str	r3, [r7, #48]	@ 0x30
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	461a      	mov	r2, r3
 800d61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d620:	4413      	add	r3, r2
 800d622:	633b      	str	r3, [r7, #48]	@ 0x30
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	00da      	lsls	r2, r3, #3
 800d62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62c:	4413      	add	r3, r2
 800d62e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d63e:	b29a      	uxth	r2, r3
 800d640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d642:	801a      	strh	r2, [r3, #0]
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d64e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d652:	b29a      	uxth	r2, r3
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	801a      	strh	r2, [r3, #0]
 800d658:	e01a      	b.n	800d690 <HAL_PCD_EP_DB_Transmit+0xfa>
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	785b      	ldrb	r3, [r3, #1]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d116      	bne.n	800d690 <HAL_PCD_EP_DB_Transmit+0xfa>
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d670:	b29b      	uxth	r3, r3
 800d672:	461a      	mov	r2, r3
 800d674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d676:	4413      	add	r3, r2
 800d678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	00da      	lsls	r2, r3, #3
 800d680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d682:	4413      	add	r3, r2
 800d684:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
 800d68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68c:	2200      	movs	r2, #0
 800d68e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	785b      	ldrb	r3, [r3, #1]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d126      	bne.n	800d6ec <HAL_PCD_EP_DB_Transmit+0x156>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	623b      	str	r3, [r7, #32]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	623b      	str	r3, [r7, #32]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	00da      	lsls	r2, r3, #3
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6c4:	61fb      	str	r3, [r7, #28]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	881b      	ldrh	r3, [r3, #0]
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	801a      	strh	r2, [r3, #0]
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	801a      	strh	r2, [r3, #0]
 800d6ea:	e017      	b.n	800d71c <HAL_PCD_EP_DB_Transmit+0x186>
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	785b      	ldrb	r3, [r3, #1]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d113      	bne.n	800d71c <HAL_PCD_EP_DB_Transmit+0x186>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	461a      	mov	r2, r3
 800d700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d702:	4413      	add	r3, r2
 800d704:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	00da      	lsls	r2, r3, #3
 800d70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70e:	4413      	add	r3, r2
 800d710:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d714:	627b      	str	r3, [r7, #36]	@ 0x24
 800d716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d718:	2200      	movs	r2, #0
 800d71a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	78db      	ldrb	r3, [r3, #3]
 800d720:	2b02      	cmp	r3, #2
 800d722:	d123      	bne.n	800d76c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	461a      	mov	r2, r3
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	b29b      	uxth	r3, r3
 800d736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d73a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d73e:	837b      	strh	r3, [r7, #26]
 800d740:	8b7b      	ldrh	r3, [r7, #26]
 800d742:	f083 0320 	eor.w	r3, r3, #32
 800d746:	837b      	strh	r3, [r7, #26]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	441a      	add	r2, r3
 800d756:	8b7b      	ldrh	r3, [r7, #26]
 800d758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d75c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d768:	b29b      	uxth	r3, r3
 800d76a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	4619      	mov	r1, r3
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f00a fd73 	bl	801825e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d778:	88fb      	ldrh	r3, [r7, #6]
 800d77a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d01f      	beq.n	800d7c2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	4413      	add	r3, r2
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	b29b      	uxth	r3, r3
 800d794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d79c:	833b      	strh	r3, [r7, #24]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	441a      	add	r2, r3
 800d7ac:	8b3b      	ldrh	r3, [r7, #24]
 800d7ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e31f      	b.n	800de06 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d7c6:	88fb      	ldrh	r3, [r7, #6]
 800d7c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d021      	beq.n	800d814 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4413      	add	r3, r2
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	441a      	add	r2, r3
 800d7fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d80c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d810:	b29b      	uxth	r3, r3
 800d812:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	f040 82ca 	bne.w	800ddb4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	695a      	ldr	r2, [r3, #20]
 800d824:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d828:	441a      	add	r2, r3
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	69da      	ldr	r2, [r3, #28]
 800d832:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d836:	441a      	add	r2, r3
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	6a1a      	ldr	r2, [r3, #32]
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	429a      	cmp	r2, r3
 800d846:	d309      	bcc.n	800d85c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6a1a      	ldr	r2, [r3, #32]
 800d852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d854:	1ad2      	subs	r2, r2, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	621a      	str	r2, [r3, #32]
 800d85a:	e015      	b.n	800d888 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d107      	bne.n	800d874 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800d864:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d868:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800d872:	e009      	b.n	800d888 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	6a1b      	ldr	r3, [r3, #32]
 800d880:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2200      	movs	r2, #0
 800d886:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	785b      	ldrb	r3, [r3, #1]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d15f      	bne.n	800d950 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	643b      	str	r3, [r7, #64]	@ 0x40
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8a4:	4413      	add	r3, r2
 800d8a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	00da      	lsls	r2, r3, #3
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c6:	801a      	strh	r2, [r3, #0]
 800d8c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <HAL_PCD_EP_DB_Transmit+0x34e>
 800d8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8e0:	801a      	strh	r2, [r3, #0]
 800d8e2:	e051      	b.n	800d988 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800d8e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8e8:	d816      	bhi.n	800d918 <HAL_PCD_EP_DB_Transmit+0x382>
 800d8ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8ec:	085b      	lsrs	r3, r3, #1
 800d8ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <HAL_PCD_EP_DB_Transmit+0x36a>
 800d8fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800d900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d902:	881b      	ldrh	r3, [r3, #0]
 800d904:	b29a      	uxth	r2, r3
 800d906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d908:	b29b      	uxth	r3, r3
 800d90a:	029b      	lsls	r3, r3, #10
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	4313      	orrs	r3, r2
 800d910:	b29a      	uxth	r2, r3
 800d912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d914:	801a      	strh	r2, [r3, #0]
 800d916:	e037      	b.n	800d988 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800d918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d91a:	095b      	lsrs	r3, r3, #5
 800d91c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d91e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d920:	f003 031f 	and.w	r3, r3, #31
 800d924:	2b00      	cmp	r3, #0
 800d926:	d102      	bne.n	800d92e <HAL_PCD_EP_DB_Transmit+0x398>
 800d928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d92a:	3b01      	subs	r3, #1
 800d92c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	b29a      	uxth	r2, r3
 800d934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d936:	b29b      	uxth	r3, r3
 800d938:	029b      	lsls	r3, r3, #10
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	4313      	orrs	r3, r2
 800d93e:	b29b      	uxth	r3, r3
 800d940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d948:	b29a      	uxth	r2, r3
 800d94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d94c:	801a      	strh	r2, [r3, #0]
 800d94e:	e01b      	b.n	800d988 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d117      	bne.n	800d988 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d966:	b29b      	uxth	r3, r3
 800d968:	461a      	mov	r2, r3
 800d96a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d96c:	4413      	add	r3, r2
 800d96e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	00da      	lsls	r2, r3, #3
 800d976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d978:	4413      	add	r3, r2
 800d97a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d97e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d982:	b29a      	uxth	r2, r3
 800d984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d986:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6818      	ldr	r0, [r3, #0]
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6959      	ldr	r1, [r3, #20]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	891a      	ldrh	r2, [r3, #8]
 800d994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d996:	b29b      	uxth	r3, r3
 800d998:	f004 fad7 	bl	8011f4a <USB_WritePMA>
 800d99c:	e20a      	b.n	800ddb4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	4413      	add	r3, r2
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	6812      	ldr	r2, [r2, #0]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9c2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	699a      	ldr	r2, [r3, #24]
 800d9ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d307      	bcc.n	800d9e2 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d9da:	1ad2      	subs	r2, r2, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	619a      	str	r2, [r3, #24]
 800d9e0:	e002      	b.n	800d9e8 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f040 80f6 	bne.w	800dbde <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d126      	bne.n	800da48 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da08:	b29b      	uxth	r3, r3
 800da0a:	461a      	mov	r2, r3
 800da0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da0e:	4413      	add	r3, r2
 800da10:	677b      	str	r3, [r7, #116]	@ 0x74
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	00da      	lsls	r2, r3, #3
 800da18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da1a:	4413      	add	r3, r2
 800da1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da20:	673b      	str	r3, [r7, #112]	@ 0x70
 800da22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	b29b      	uxth	r3, r3
 800da28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da30:	801a      	strh	r2, [r3, #0]
 800da32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	b29b      	uxth	r3, r3
 800da38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da40:	b29a      	uxth	r2, r3
 800da42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da44:	801a      	strh	r2, [r3, #0]
 800da46:	e01a      	b.n	800da7e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	785b      	ldrb	r3, [r3, #1]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d116      	bne.n	800da7e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da5e:	b29b      	uxth	r3, r3
 800da60:	461a      	mov	r2, r3
 800da62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da64:	4413      	add	r3, r2
 800da66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	00da      	lsls	r2, r3, #3
 800da6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da70:	4413      	add	r3, r2
 800da72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da76:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da7a:	2200      	movs	r2, #0
 800da7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	785b      	ldrb	r3, [r3, #1]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d12f      	bne.n	800daee <HAL_PCD_EP_DB_Transmit+0x558>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	461a      	mov	r2, r3
 800daa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800daa6:	4413      	add	r3, r2
 800daa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	00da      	lsls	r2, r3, #3
 800dab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dab6:	4413      	add	r3, r2
 800dab8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dabc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dacc:	b29a      	uxth	r2, r3
 800dace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dad2:	801a      	strh	r2, [r3, #0]
 800dad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800daea:	801a      	strh	r2, [r3, #0]
 800daec:	e01c      	b.n	800db28 <HAL_PCD_EP_DB_Transmit+0x592>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	785b      	ldrb	r3, [r3, #1]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d118      	bne.n	800db28 <HAL_PCD_EP_DB_Transmit+0x592>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dafe:	b29b      	uxth	r3, r3
 800db00:	461a      	mov	r2, r3
 800db02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800db06:	4413      	add	r3, r2
 800db08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	00da      	lsls	r2, r3, #3
 800db12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800db16:	4413      	add	r3, r2
 800db18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db24:	2200      	movs	r2, #0
 800db26:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	78db      	ldrb	r3, [r3, #3]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d127      	bne.n	800db80 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4413      	add	r3, r2
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	b29b      	uxth	r3, r3
 800db42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db4a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800db4e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800db52:	f083 0320 	eor.w	r3, r3, #32
 800db56:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	441a      	add	r2, r3
 800db68:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800db6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	4619      	mov	r1, r3
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f00a fb69 	bl	801825e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800db8c:	88fb      	ldrh	r3, [r7, #6]
 800db8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db92:	2b00      	cmp	r3, #0
 800db94:	d121      	bne.n	800dbda <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbb0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	441a      	add	r2, r3
 800dbc2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800dbc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e113      	b.n	800de06 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d121      	bne.n	800dc2c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	461a      	mov	r2, r3
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	441a      	add	r2, r3
 800dc14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	f040 80be 	bne.w	800ddb4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	695a      	ldr	r2, [r3, #20]
 800dc3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc40:	441a      	add	r2, r3
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	69da      	ldr	r2, [r3, #28]
 800dc4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc4e:	441a      	add	r2, r3
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	6a1a      	ldr	r2, [r3, #32]
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	691b      	ldr	r3, [r3, #16]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d309      	bcc.n	800dc74 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6a1a      	ldr	r2, [r3, #32]
 800dc6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc6c:	1ad2      	subs	r2, r2, r3
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	621a      	str	r2, [r3, #32]
 800dc72:	e015      	b.n	800dca0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	6a1b      	ldr	r3, [r3, #32]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d107      	bne.n	800dc8c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800dc7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc80:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800dc8a:	e009      	b.n	800dca0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	6a1b      	ldr	r3, [r3, #32]
 800dc90:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	2200      	movs	r2, #0
 800dc96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	785b      	ldrb	r3, [r3, #1]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d15f      	bne.n	800dd6e <HAL_PCD_EP_DB_Transmit+0x7d8>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcc2:	4413      	add	r3, r2
 800dcc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	00da      	lsls	r2, r3, #3
 800dccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcce:	4413      	add	r3, r2
 800dcd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dcd4:	667b      	str	r3, [r7, #100]	@ 0x64
 800dcd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcd8:	881b      	ldrh	r3, [r3, #0]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dce4:	801a      	strh	r2, [r3, #0]
 800dce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10a      	bne.n	800dd02 <HAL_PCD_EP_DB_Transmit+0x76c>
 800dcec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcfe:	801a      	strh	r2, [r3, #0]
 800dd00:	e04e      	b.n	800dda0 <HAL_PCD_EP_DB_Transmit+0x80a>
 800dd02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd04:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd06:	d816      	bhi.n	800dd36 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800dd08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd0a:	085b      	lsrs	r3, r3, #1
 800dd0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <HAL_PCD_EP_DB_Transmit+0x788>
 800dd18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	029b      	lsls	r3, r3, #10
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd32:	801a      	strh	r2, [r3, #0]
 800dd34:	e034      	b.n	800dda0 <HAL_PCD_EP_DB_Transmit+0x80a>
 800dd36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd38:	095b      	lsrs	r3, r3, #5
 800dd3a:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd3e:	f003 031f 	and.w	r3, r3, #31
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d102      	bne.n	800dd4c <HAL_PCD_EP_DB_Transmit+0x7b6>
 800dd46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	029b      	lsls	r3, r3, #10
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd6a:	801a      	strh	r2, [r3, #0]
 800dd6c:	e018      	b.n	800dda0 <HAL_PCD_EP_DB_Transmit+0x80a>
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	785b      	ldrb	r3, [r3, #1]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d114      	bne.n	800dda0 <HAL_PCD_EP_DB_Transmit+0x80a>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	461a      	mov	r2, r3
 800dd82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd84:	4413      	add	r3, r2
 800dd86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	00da      	lsls	r2, r3, #3
 800dd8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd90:	4413      	add	r3, r2
 800dd92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd9e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6818      	ldr	r0, [r3, #0]
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	6959      	ldr	r1, [r3, #20]
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	895a      	ldrh	r2, [r3, #10]
 800ddac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	f004 f8cb 	bl	8011f4a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	881b      	ldrh	r3, [r3, #0]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddce:	82fb      	strh	r3, [r7, #22]
 800ddd0:	8afb      	ldrh	r3, [r7, #22]
 800ddd2:	f083 0310 	eor.w	r3, r3, #16
 800ddd6:	82fb      	strh	r3, [r7, #22]
 800ddd8:	8afb      	ldrh	r3, [r7, #22]
 800ddda:	f083 0320 	eor.w	r3, r3, #32
 800ddde:	82fb      	strh	r3, [r7, #22]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	461a      	mov	r2, r3
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	441a      	add	r2, r3
 800ddee:	8afb      	ldrh	r3, [r7, #22]
 800ddf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de00:	b29b      	uxth	r3, r3
 800de02:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3798      	adds	r7, #152	@ 0x98
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800de0e:	b480      	push	{r7}
 800de10:	b087      	sub	sp, #28
 800de12:	af00      	add	r7, sp, #0
 800de14:	60f8      	str	r0, [r7, #12]
 800de16:	607b      	str	r3, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	817b      	strh	r3, [r7, #10]
 800de1c:	4613      	mov	r3, r2
 800de1e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800de20:	897b      	ldrh	r3, [r7, #10]
 800de22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de26:	b29b      	uxth	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00b      	beq.n	800de44 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800de2c:	897b      	ldrh	r3, [r7, #10]
 800de2e:	f003 0207 	and.w	r2, r3, #7
 800de32:	4613      	mov	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	00db      	lsls	r3, r3, #3
 800de3a:	3310      	adds	r3, #16
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	4413      	add	r3, r2
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	e009      	b.n	800de58 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800de44:	897a      	ldrh	r2, [r7, #10]
 800de46:	4613      	mov	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	00db      	lsls	r3, r3, #3
 800de4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	4413      	add	r3, r2
 800de56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800de58:	893b      	ldrh	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d107      	bne.n	800de6e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	2200      	movs	r2, #0
 800de62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	b29a      	uxth	r2, r3
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	80da      	strh	r2, [r3, #6]
 800de6c:	e00b      	b.n	800de86 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	2201      	movs	r2, #1
 800de72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	b29a      	uxth	r2, r3
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	0c1b      	lsrs	r3, r3, #16
 800de80:	b29a      	uxth	r2, r3
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800de86:	2300      	movs	r3, #0
}
 800de88:	4618      	mov	r0, r3
 800de8a:	371c      	adds	r7, #28
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2201      	movs	r2, #1
 800dea6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800deb8:	b29b      	uxth	r3, r3
 800deba:	f043 0301 	orr.w	r3, r3, #1
 800debe:	b29a      	uxth	r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800decc:	b29b      	uxth	r3, r3
 800dece:	f043 0302 	orr.w	r3, r3, #2
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3714      	adds	r7, #20
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800deec:	4b05      	ldr	r3, [pc, #20]	@ (800df04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a04      	ldr	r2, [pc, #16]	@ (800df04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800def2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800def6:	6013      	str	r3, [r2, #0]
}
 800def8:	bf00      	nop
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	58000400 	.word	0x58000400

0800df08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800df08:	b480      	push	{r7}
 800df0a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800df0c:	4b04      	ldr	r3, [pc, #16]	@ (800df20 <HAL_PWREx_GetVoltageRange+0x18>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800df14:	4618      	mov	r0, r3
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	58000400 	.word	0x58000400

0800df24 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800df24:	b480      	push	{r7}
 800df26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800df28:	4b05      	ldr	r3, [pc, #20]	@ (800df40 <HAL_PWREx_EnableVddUSB+0x1c>)
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	4a04      	ldr	r2, [pc, #16]	@ (800df40 <HAL_PWREx_EnableVddUSB+0x1c>)
 800df2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800df32:	6053      	str	r3, [r2, #4]
}
 800df34:	bf00      	nop
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	58000400 	.word	0x58000400

0800df44 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800df48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df56:	d101      	bne.n	800df5c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800df58:	2301      	movs	r3, #1
 800df5a:	e000      	b.n	800df5e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800df68:	b480      	push	{r7}
 800df6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800df6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df7a:	6013      	str	r3, [r2, #0]
}
 800df7c:	bf00      	nop
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800df86:	b480      	push	{r7}
 800df88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800df8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df98:	6013      	str	r3, [r2, #0]
}
 800df9a:	bf00      	nop
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800dfa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfb6:	d101      	bne.n	800dfbc <LL_RCC_HSE_IsReady+0x18>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e000      	b.n	800dfbe <LL_RCC_HSE_IsReady+0x1a>
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800dfcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dfd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dfda:	6013      	str	r3, [r2, #0]
}
 800dfdc:	bf00      	nop
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800dfea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dff8:	6013      	str	r3, [r2, #0]
}
 800dffa:	bf00      	nop
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800e004:	b480      	push	{r7}
 800e006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e016:	d101      	bne.n	800e01c <LL_RCC_HSI_IsReady+0x18>
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <LL_RCC_HSI_IsReady+0x1a>
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	061b      	lsls	r3, r3, #24
 800e03e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e042:	4313      	orrs	r3, r2
 800e044:	604b      	str	r3, [r1, #4]
}
 800e046:	bf00      	nop
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800e052:	b480      	push	{r7}
 800e054:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e05a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e05e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e062:	f043 0301 	orr.w	r3, r3, #1
 800e066:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e06a:	bf00      	nop
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800e074:	b480      	push	{r7}
 800e076:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e07c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e080:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e084:	f023 0301 	bic.w	r3, r3, #1
 800e088:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e08c:	bf00      	nop
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800e096:	b480      	push	{r7}
 800e098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e09a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e09e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e0a2:	f003 0302 	and.w	r3, r3, #2
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d101      	bne.n	800e0ae <LL_RCC_HSI48_IsReady+0x18>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <LL_RCC_HSI48_IsReady+0x1a>
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e0be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e0ca:	f043 0301 	orr.w	r3, r3, #1
 800e0ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e0d2:	bf00      	nop
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e0e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e0ec:	f023 0301 	bic.w	r3, r3, #1
 800e0f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e0f4:	bf00      	nop
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800e0fe:	b480      	push	{r7}
 800e100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e10a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e10e:	f043 0304 	orr.w	r3, r3, #4
 800e112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e116:	bf00      	nop
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800e120:	b480      	push	{r7}
 800e122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e12c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e130:	f023 0304 	bic.w	r3, r3, #4
 800e134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e138:	bf00      	nop
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800e142:	b480      	push	{r7}
 800e144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e14e:	f003 0302 	and.w	r3, r3, #2
 800e152:	2b02      	cmp	r3, #2
 800e154:	d101      	bne.n	800e15a <LL_RCC_LSE_IsReady+0x18>
 800e156:	2301      	movs	r3, #1
 800e158:	e000      	b.n	800e15c <LL_RCC_LSE_IsReady+0x1a>
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr

0800e166 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800e166:	b480      	push	{r7}
 800e168:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e16a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e176:	f043 0301 	orr.w	r3, r3, #1
 800e17a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e17e:	bf00      	nop
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800e188:	b480      	push	{r7}
 800e18a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e18c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e198:	f023 0301 	bic.w	r3, r3, #1
 800e19c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e1a0:	bf00      	nop
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800e1aa:	b480      	push	{r7}
 800e1ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e1ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e1b6:	f003 0302 	and.w	r3, r3, #2
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d101      	bne.n	800e1c2 <LL_RCC_LSI1_IsReady+0x18>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e000      	b.n	800e1c4 <LL_RCC_LSI1_IsReady+0x1a>
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800e1ce:	b480      	push	{r7}
 800e1d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e1da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e1de:	f043 0304 	orr.w	r3, r3, #4
 800e1e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e1e6:	bf00      	nop
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e1f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e1f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e1fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e200:	f023 0304 	bic.w	r3, r3, #4
 800e204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e208:	bf00      	nop
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800e212:	b480      	push	{r7}
 800e214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e21e:	f003 0308 	and.w	r3, r3, #8
 800e222:	2b08      	cmp	r3, #8
 800e224:	d101      	bne.n	800e22a <LL_RCC_LSI2_IsReady+0x18>
 800e226:	2301      	movs	r3, #1
 800e228:	e000      	b.n	800e22c <LL_RCC_LSI2_IsReady+0x1a>
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr

0800e236 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800e236:	b480      	push	{r7}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e23e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e246:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	021b      	lsls	r3, r3, #8
 800e24e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e252:	4313      	orrs	r3, r2
 800e254:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800e264:	b480      	push	{r7}
 800e266:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e272:	f043 0301 	orr.w	r3, r3, #1
 800e276:	6013      	str	r3, [r2, #0]
}
 800e278:	bf00      	nop
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800e282:	b480      	push	{r7}
 800e284:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e290:	f023 0301 	bic.w	r3, r3, #1
 800e294:	6013      	str	r3, [r2, #0]
}
 800e296:	bf00      	nop
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e2a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d101      	bne.n	800e2b6 <LL_RCC_MSI_IsReady+0x16>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e000      	b.n	800e2b8 <LL_RCC_MSI_IsReady+0x18>
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr

0800e2c2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800e2c2:	b480      	push	{r7}
 800e2c4:	b083      	sub	sp, #12
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e2ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e2d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	600b      	str	r3, [r1, #0]
}
 800e2de:	bf00      	nop
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800e2ea:	b480      	push	{r7}
 800e2ec:	b083      	sub	sp, #12
 800e2ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e2f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e2fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2bb0      	cmp	r3, #176	@ 0xb0
 800e300:	d901      	bls.n	800e306 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800e302:	23b0      	movs	r3, #176	@ 0xb0
 800e304:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800e306:	687b      	ldr	r3, [r7, #4]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e31c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	021b      	lsls	r3, r3, #8
 800e32a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e32e:	4313      	orrs	r3, r2
 800e330:	604b      	str	r3, [r1, #4]
}
 800e332:	bf00      	nop
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800e33e:	b480      	push	{r7}
 800e340:	b083      	sub	sp, #12
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	f023 0203 	bic.w	r2, r3, #3
 800e350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4313      	orrs	r3, r2
 800e358:	608b      	str	r3, [r1, #8]
}
 800e35a:	bf00      	nop
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr

0800e366 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800e366:	b480      	push	{r7}
 800e368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e36a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	f003 030c 	and.w	r3, r3, #12
}
 800e374:	4618      	mov	r0, r3
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800e37e:	b480      	push	{r7}
 800e380:	b083      	sub	sp, #12
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4313      	orrs	r3, r2
 800e398:	608b      	str	r3, [r1, #8]
}
 800e39a:	bf00      	nop
 800e39c:	370c      	adds	r7, #12
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	b083      	sub	sp, #12
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e3ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e3b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e3ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e3c6:	bf00      	nop
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800e3d2:	b480      	push	{r7}
 800e3d4:	b083      	sub	sp, #12
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e3da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e3e2:	f023 020f 	bic.w	r2, r3, #15
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	091b      	lsrs	r3, r3, #4
 800e3ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e3f4:	bf00      	nop
 800e3f6:	370c      	adds	r7, #12
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	4313      	orrs	r3, r2
 800e41a:	608b      	str	r3, [r1, #8]
}
 800e41c:	bf00      	nop
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e43a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4313      	orrs	r3, r2
 800e442:	608b      	str	r3, [r1, #8]
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800e450:	b480      	push	{r7}
 800e452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800e468:	b480      	push	{r7}
 800e46a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800e46c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e470:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr

0800e482 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800e482:	b480      	push	{r7}
 800e484:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e48a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e48e:	011b      	lsls	r3, r3, #4
 800e490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e494:	4618      	mov	r0, r3
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr

0800e49e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800e49e:	b480      	push	{r7}
 800e4a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e4a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e4ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e4d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e4e0:	6013      	str	r3, [r2, #0]
}
 800e4e2:	bf00      	nop
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e4f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e4fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e4fe:	6013      	str	r3, [r2, #0]
}
 800e500:	bf00      	nop
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e50a:	b480      	push	{r7}
 800e50c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e50e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e518:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e51c:	d101      	bne.n	800e522 <LL_RCC_PLL_IsReady+0x18>
 800e51e:	2301      	movs	r3, #1
 800e520:	e000      	b.n	800e524 <LL_RCC_PLL_IsReady+0x1a>
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e52e:	b480      	push	{r7}
 800e530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	0a1b      	lsrs	r3, r3, #8
 800e53a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e53e:	4618      	mov	r0, r3
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e548:	b480      	push	{r7}
 800e54a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e54c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800e556:	4618      	mov	r0, r3
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e560:	b480      	push	{r7}
 800e562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800e56e:	4618      	mov	r0, r3
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e578:	b480      	push	{r7}
 800e57a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e57c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	f003 0303 	and.w	r3, r3, #3
}
 800e586:	4618      	mov	r0, r3
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800e590:	b480      	push	{r7}
 800e592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e59e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5a2:	d101      	bne.n	800e5a8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e000      	b.n	800e5aa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e5a8:	2300      	movs	r3, #0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e5b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e5c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5c8:	d101      	bne.n	800e5ce <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e5de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e5e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5ee:	d101      	bne.n	800e5f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e000      	b.n	800e5f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800e600:	b480      	push	{r7}
 800e602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e60e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e612:	d101      	bne.n	800e618 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e614:	2301      	movs	r3, #1
 800e616:	e000      	b.n	800e61a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800e624:	b480      	push	{r7}
 800e626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e636:	d101      	bne.n	800e63c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e638:	2301      	movs	r3, #1
 800e63a:	e000      	b.n	800e63e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e648:	b590      	push	{r4, r7, lr}
 800e64a:	b08d      	sub	sp, #52	@ 0x34
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d101      	bne.n	800e65a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	e363      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 0320 	and.w	r3, r3, #32
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 808d 	beq.w	800e782 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e668:	f7ff fe7d 	bl	800e366 <LL_RCC_GetSysClkSource>
 800e66c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e66e:	f7ff ff83 	bl	800e578 <LL_RCC_PLL_GetMainSource>
 800e672:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e676:	2b00      	cmp	r3, #0
 800e678:	d005      	beq.n	800e686 <HAL_RCC_OscConfig+0x3e>
 800e67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67c:	2b0c      	cmp	r3, #12
 800e67e:	d147      	bne.n	800e710 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e682:	2b01      	cmp	r3, #1
 800e684:	d144      	bne.n	800e710 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d101      	bne.n	800e692 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	e347      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e696:	f7ff fe28 	bl	800e2ea <LL_RCC_MSI_GetRange>
 800e69a:	4603      	mov	r3, r0
 800e69c:	429c      	cmp	r4, r3
 800e69e:	d914      	bls.n	800e6ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f000 fd4d 	bl	800f144 <RCC_SetFlashLatencyFromMSIRange>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e336      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff fe02 	bl	800e2c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff fe26 	bl	800e314 <LL_RCC_MSI_SetCalibTrimming>
 800e6c8:	e013      	b.n	800e6f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fdf7 	bl	800e2c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6a1b      	ldr	r3, [r3, #32]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff fe1b 	bl	800e314 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 fd2e 	bl	800f144 <RCC_SetFlashLatencyFromMSIRange>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e317      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e6f2:	f000 fccb 	bl	800f08c <HAL_RCC_GetHCLKFreq>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	4aa4      	ldr	r2, [pc, #656]	@ (800e98c <HAL_RCC_OscConfig+0x344>)
 800e6fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e6fc:	4ba4      	ldr	r3, [pc, #656]	@ (800e990 <HAL_RCC_OscConfig+0x348>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4618      	mov	r0, r3
 800e702:	f7fa f89d 	bl	8008840 <HAL_InitTick>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d039      	beq.n	800e780 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e70c:	2301      	movs	r3, #1
 800e70e:	e308      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	69db      	ldr	r3, [r3, #28]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d01e      	beq.n	800e756 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e718:	f7ff fda4 	bl	800e264 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e71c:	f7fa fae6 	bl	8008cec <HAL_GetTick>
 800e720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e722:	e008      	b.n	800e736 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e724:	f7fa fae2 	bl	8008cec <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d901      	bls.n	800e736 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	e2f5      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e736:	f7ff fdb3 	bl	800e2a0 <LL_RCC_MSI_IsReady>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d0f1      	beq.n	800e724 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fdbc 	bl	800e2c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff fde0 	bl	800e314 <LL_RCC_MSI_SetCalibTrimming>
 800e754:	e015      	b.n	800e782 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e756:	f7ff fd94 	bl	800e282 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e75a:	f7fa fac7 	bl	8008cec <HAL_GetTick>
 800e75e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e760:	e008      	b.n	800e774 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e762:	f7fa fac3 	bl	8008cec <HAL_GetTick>
 800e766:	4602      	mov	r2, r0
 800e768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d901      	bls.n	800e774 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e770:	2303      	movs	r3, #3
 800e772:	e2d6      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e774:	f7ff fd94 	bl	800e2a0 <LL_RCC_MSI_IsReady>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1f1      	bne.n	800e762 <HAL_RCC_OscConfig+0x11a>
 800e77e:	e000      	b.n	800e782 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e780:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f003 0301 	and.w	r3, r3, #1
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d047      	beq.n	800e81e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e78e:	f7ff fdea 	bl	800e366 <LL_RCC_GetSysClkSource>
 800e792:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e794:	f7ff fef0 	bl	800e578 <LL_RCC_PLL_GetMainSource>
 800e798:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	2b08      	cmp	r3, #8
 800e79e:	d005      	beq.n	800e7ac <HAL_RCC_OscConfig+0x164>
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	2b0c      	cmp	r3, #12
 800e7a4:	d108      	bne.n	800e7b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d105      	bne.n	800e7b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d134      	bne.n	800e81e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e2b4      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7c0:	d102      	bne.n	800e7c8 <HAL_RCC_OscConfig+0x180>
 800e7c2:	f7ff fbd1 	bl	800df68 <LL_RCC_HSE_Enable>
 800e7c6:	e001      	b.n	800e7cc <HAL_RCC_OscConfig+0x184>
 800e7c8:	f7ff fbdd 	bl	800df86 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d012      	beq.n	800e7fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7d4:	f7fa fa8a 	bl	8008cec <HAL_GetTick>
 800e7d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e7da:	e008      	b.n	800e7ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e7dc:	f7fa fa86 	bl	8008cec <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	2b64      	cmp	r3, #100	@ 0x64
 800e7e8:	d901      	bls.n	800e7ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	e299      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e7ee:	f7ff fbd9 	bl	800dfa4 <LL_RCC_HSE_IsReady>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d0f1      	beq.n	800e7dc <HAL_RCC_OscConfig+0x194>
 800e7f8:	e011      	b.n	800e81e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7fa:	f7fa fa77 	bl	8008cec <HAL_GetTick>
 800e7fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e800:	e008      	b.n	800e814 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e802:	f7fa fa73 	bl	8008cec <HAL_GetTick>
 800e806:	4602      	mov	r2, r0
 800e808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	2b64      	cmp	r3, #100	@ 0x64
 800e80e:	d901      	bls.n	800e814 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e810:	2303      	movs	r3, #3
 800e812:	e286      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800e814:	f7ff fbc6 	bl	800dfa4 <LL_RCC_HSE_IsReady>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1f1      	bne.n	800e802 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f003 0302 	and.w	r3, r3, #2
 800e826:	2b00      	cmp	r3, #0
 800e828:	d04c      	beq.n	800e8c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e82a:	f7ff fd9c 	bl	800e366 <LL_RCC_GetSysClkSource>
 800e82e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e830:	f7ff fea2 	bl	800e578 <LL_RCC_PLL_GetMainSource>
 800e834:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	2b04      	cmp	r3, #4
 800e83a:	d005      	beq.n	800e848 <HAL_RCC_OscConfig+0x200>
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	2b0c      	cmp	r3, #12
 800e840:	d10e      	bne.n	800e860 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d10b      	bne.n	800e860 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d101      	bne.n	800e854 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800e850:	2301      	movs	r3, #1
 800e852:	e266      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	691b      	ldr	r3, [r3, #16]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff fbe5 	bl	800e028 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e85e:	e031      	b.n	800e8c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d019      	beq.n	800e89c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e868:	f7ff fbae 	bl	800dfc8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e86c:	f7fa fa3e 	bl	8008cec <HAL_GetTick>
 800e870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800e872:	e008      	b.n	800e886 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e874:	f7fa fa3a 	bl	8008cec <HAL_GetTick>
 800e878:	4602      	mov	r2, r0
 800e87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87c:	1ad3      	subs	r3, r2, r3
 800e87e:	2b02      	cmp	r3, #2
 800e880:	d901      	bls.n	800e886 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e882:	2303      	movs	r3, #3
 800e884:	e24d      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800e886:	f7ff fbbd 	bl	800e004 <LL_RCC_HSI_IsReady>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d0f1      	beq.n	800e874 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff fbc7 	bl	800e028 <LL_RCC_HSI_SetCalibTrimming>
 800e89a:	e013      	b.n	800e8c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e89c:	f7ff fba3 	bl	800dfe6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8a0:	f7fa fa24 	bl	8008cec <HAL_GetTick>
 800e8a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800e8a6:	e008      	b.n	800e8ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8a8:	f7fa fa20 	bl	8008cec <HAL_GetTick>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d901      	bls.n	800e8ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	e233      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800e8ba:	f7ff fba3 	bl	800e004 <LL_RCC_HSI_IsReady>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1f1      	bne.n	800e8a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f003 0308 	and.w	r3, r3, #8
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 80a3 	beq.w	800ea24 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	695b      	ldr	r3, [r3, #20]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d076      	beq.n	800e9d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f003 0310 	and.w	r3, r3, #16
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d046      	beq.n	800e980 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800e8f2:	f7ff fc5a 	bl	800e1aa <LL_RCC_LSI1_IsReady>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d113      	bne.n	800e924 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800e8fc:	f7ff fc33 	bl	800e166 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e900:	f7fa f9f4 	bl	8008cec <HAL_GetTick>
 800e904:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e906:	e008      	b.n	800e91a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e908:	f7fa f9f0 	bl	8008cec <HAL_GetTick>
 800e90c:	4602      	mov	r2, r0
 800e90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	2b02      	cmp	r3, #2
 800e914:	d901      	bls.n	800e91a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800e916:	2303      	movs	r3, #3
 800e918:	e203      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e91a:	f7ff fc46 	bl	800e1aa <LL_RCC_LSI1_IsReady>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d0f1      	beq.n	800e908 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800e924:	f7ff fc53 	bl	800e1ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e928:	f7fa f9e0 	bl	8008cec <HAL_GetTick>
 800e92c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e92e:	e008      	b.n	800e942 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e930:	f7fa f9dc 	bl	8008cec <HAL_GetTick>
 800e934:	4602      	mov	r2, r0
 800e936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	2b03      	cmp	r3, #3
 800e93c:	d901      	bls.n	800e942 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800e93e:	2303      	movs	r3, #3
 800e940:	e1ef      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e942:	f7ff fc66 	bl	800e212 <LL_RCC_LSI2_IsReady>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d0f1      	beq.n	800e930 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	699b      	ldr	r3, [r3, #24]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fc70 	bl	800e236 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800e956:	f7ff fc17 	bl	800e188 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e95a:	f7fa f9c7 	bl	8008cec <HAL_GetTick>
 800e95e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e960:	e008      	b.n	800e974 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e962:	f7fa f9c3 	bl	8008cec <HAL_GetTick>
 800e966:	4602      	mov	r2, r0
 800e968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d901      	bls.n	800e974 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800e970:	2303      	movs	r3, #3
 800e972:	e1d6      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e974:	f7ff fc19 	bl	800e1aa <LL_RCC_LSI1_IsReady>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1f1      	bne.n	800e962 <HAL_RCC_OscConfig+0x31a>
 800e97e:	e051      	b.n	800ea24 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800e980:	f7ff fbf1 	bl	800e166 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e984:	f7fa f9b2 	bl	8008cec <HAL_GetTick>
 800e988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e98a:	e00c      	b.n	800e9a6 <HAL_RCC_OscConfig+0x35e>
 800e98c:	2000001c 	.word	0x2000001c
 800e990:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e994:	f7fa f9aa 	bl	8008cec <HAL_GetTick>
 800e998:	4602      	mov	r2, r0
 800e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d901      	bls.n	800e9a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e1bd      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e9a6:	f7ff fc00 	bl	800e1aa <LL_RCC_LSI1_IsReady>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d0f1      	beq.n	800e994 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800e9b0:	f7ff fc1e 	bl	800e1f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e9b4:	e008      	b.n	800e9c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e9b6:	f7fa f999 	bl	8008cec <HAL_GetTick>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	2b03      	cmp	r3, #3
 800e9c2:	d901      	bls.n	800e9c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	e1ac      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e9c8:	f7ff fc23 	bl	800e212 <LL_RCC_LSI2_IsReady>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1f1      	bne.n	800e9b6 <HAL_RCC_OscConfig+0x36e>
 800e9d2:	e027      	b.n	800ea24 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800e9d4:	f7ff fc0c 	bl	800e1f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9d8:	f7fa f988 	bl	8008cec <HAL_GetTick>
 800e9dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e9de:	e008      	b.n	800e9f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e9e0:	f7fa f984 	bl	8008cec <HAL_GetTick>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	d901      	bls.n	800e9f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	e197      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e9f2:	f7ff fc0e 	bl	800e212 <LL_RCC_LSI2_IsReady>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1f1      	bne.n	800e9e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800e9fc:	f7ff fbc4 	bl	800e188 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea00:	f7fa f974 	bl	8008cec <HAL_GetTick>
 800ea04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ea06:	e008      	b.n	800ea1a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ea08:	f7fa f970 	bl	8008cec <HAL_GetTick>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d901      	bls.n	800ea1a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e183      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ea1a:	f7ff fbc6 	bl	800e1aa <LL_RCC_LSI1_IsReady>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1f1      	bne.n	800ea08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f003 0304 	and.w	r3, r3, #4
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d05b      	beq.n	800eae8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ea30:	4ba7      	ldr	r3, [pc, #668]	@ (800ecd0 <HAL_RCC_OscConfig+0x688>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d114      	bne.n	800ea66 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ea3c:	f7ff fa54 	bl	800dee8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ea40:	f7fa f954 	bl	8008cec <HAL_GetTick>
 800ea44:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ea46:	e008      	b.n	800ea5a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea48:	f7fa f950 	bl	8008cec <HAL_GetTick>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d901      	bls.n	800ea5a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ea56:	2303      	movs	r3, #3
 800ea58:	e163      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ea5a:	4b9d      	ldr	r3, [pc, #628]	@ (800ecd0 <HAL_RCC_OscConfig+0x688>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d0f0      	beq.n	800ea48 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d102      	bne.n	800ea74 <HAL_RCC_OscConfig+0x42c>
 800ea6e:	f7ff fb24 	bl	800e0ba <LL_RCC_LSE_Enable>
 800ea72:	e00c      	b.n	800ea8e <HAL_RCC_OscConfig+0x446>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	2b05      	cmp	r3, #5
 800ea7a:	d104      	bne.n	800ea86 <HAL_RCC_OscConfig+0x43e>
 800ea7c:	f7ff fb3f 	bl	800e0fe <LL_RCC_LSE_EnableBypass>
 800ea80:	f7ff fb1b 	bl	800e0ba <LL_RCC_LSE_Enable>
 800ea84:	e003      	b.n	800ea8e <HAL_RCC_OscConfig+0x446>
 800ea86:	f7ff fb29 	bl	800e0dc <LL_RCC_LSE_Disable>
 800ea8a:	f7ff fb49 	bl	800e120 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d014      	beq.n	800eac0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea96:	f7fa f929 	bl	8008cec <HAL_GetTick>
 800ea9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ea9c:	e00a      	b.n	800eab4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea9e:	f7fa f925 	bl	8008cec <HAL_GetTick>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d901      	bls.n	800eab4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e136      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800eab4:	f7ff fb45 	bl	800e142 <LL_RCC_LSE_IsReady>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d0ef      	beq.n	800ea9e <HAL_RCC_OscConfig+0x456>
 800eabe:	e013      	b.n	800eae8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eac0:	f7fa f914 	bl	8008cec <HAL_GetTick>
 800eac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800eac6:	e00a      	b.n	800eade <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eac8:	f7fa f910 	bl	8008cec <HAL_GetTick>
 800eacc:	4602      	mov	r2, r0
 800eace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d901      	bls.n	800eade <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800eada:	2303      	movs	r3, #3
 800eadc:	e121      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800eade:	f7ff fb30 	bl	800e142 <LL_RCC_LSE_IsReady>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1ef      	bne.n	800eac8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d02c      	beq.n	800eb4e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d014      	beq.n	800eb26 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800eafc:	f7ff faa9 	bl	800e052 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb00:	f7fa f8f4 	bl	8008cec <HAL_GetTick>
 800eb04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800eb06:	e008      	b.n	800eb1a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb08:	f7fa f8f0 	bl	8008cec <HAL_GetTick>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d901      	bls.n	800eb1a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800eb16:	2303      	movs	r3, #3
 800eb18:	e103      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800eb1a:	f7ff fabc 	bl	800e096 <LL_RCC_HSI48_IsReady>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d0f1      	beq.n	800eb08 <HAL_RCC_OscConfig+0x4c0>
 800eb24:	e013      	b.n	800eb4e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eb26:	f7ff faa5 	bl	800e074 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb2a:	f7fa f8df 	bl	8008cec <HAL_GetTick>
 800eb2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800eb30:	e008      	b.n	800eb44 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb32:	f7fa f8db 	bl	8008cec <HAL_GetTick>
 800eb36:	4602      	mov	r2, r0
 800eb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	d901      	bls.n	800eb44 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800eb40:	2303      	movs	r3, #3
 800eb42:	e0ee      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800eb44:	f7ff faa7 	bl	800e096 <LL_RCC_HSI48_IsReady>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1f1      	bne.n	800eb32 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f000 80e4 	beq.w	800ed20 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb58:	f7ff fc05 	bl	800e366 <LL_RCC_GetSysClkSource>
 800eb5c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800eb5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	f040 80b4 	bne.w	800ecd8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f003 0203 	and.w	r2, r3, #3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d123      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d11c      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	0a1b      	lsrs	r3, r3, #8
 800eb90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d114      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d10d      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d106      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d05d      	beq.n	800ec82 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b0c      	cmp	r3, #12
 800ebca:	d058      	beq.n	800ec7e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ebcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e0a1      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ebde:	f7ff fc85 	bl	800e4ec <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ebe2:	f7fa f883 	bl	8008cec <HAL_GetTick>
 800ebe6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ebe8:	e008      	b.n	800ebfc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebea:	f7fa f87f 	bl	8008cec <HAL_GetTick>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d901      	bls.n	800ebfc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e092      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ebfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d1ef      	bne.n	800ebea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ec0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec0e:	68da      	ldr	r2, [r3, #12]
 800ec10:	4b30      	ldr	r3, [pc, #192]	@ (800ecd4 <HAL_RCC_OscConfig+0x68c>)
 800ec12:	4013      	ands	r3, r2
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ec1c:	4311      	orrs	r1, r2
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ec22:	0212      	lsls	r2, r2, #8
 800ec24:	4311      	orrs	r1, r2
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ec2a:	4311      	orrs	r1, r2
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ec30:	4311      	orrs	r1, r2
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ec36:	430a      	orrs	r2, r1
 800ec38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ec40:	f7ff fc45 	bl	800e4ce <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ec44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ec4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ec54:	f7fa f84a 	bl	8008cec <HAL_GetTick>
 800ec58:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ec5a:	e008      	b.n	800ec6e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec5c:	f7fa f846 	bl	8008cec <HAL_GetTick>
 800ec60:	4602      	mov	r2, r0
 800ec62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec64:	1ad3      	subs	r3, r2, r3
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d901      	bls.n	800ec6e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e059      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ec6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0ef      	beq.n	800ec5c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ec7c:	e050      	b.n	800ed20 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e04f      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ec82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d147      	bne.n	800ed20 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ec90:	f7ff fc1d 	bl	800e4ce <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ec94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ec9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800eca4:	f7fa f822 	bl	8008cec <HAL_GetTick>
 800eca8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ecaa:	e008      	b.n	800ecbe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecac:	f7fa f81e 	bl	8008cec <HAL_GetTick>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d901      	bls.n	800ecbe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	e031      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ecbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d0ef      	beq.n	800ecac <HAL_RCC_OscConfig+0x664>
 800eccc:	e028      	b.n	800ed20 <HAL_RCC_OscConfig+0x6d8>
 800ecce:	bf00      	nop
 800ecd0:	58000400 	.word	0x58000400
 800ecd4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	2b0c      	cmp	r3, #12
 800ecdc:	d01e      	beq.n	800ed1c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecde:	f7ff fc05 	bl	800e4ec <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ece2:	f7fa f803 	bl	8008cec <HAL_GetTick>
 800ece6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ece8:	e008      	b.n	800ecfc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecea:	f7f9 ffff 	bl	8008cec <HAL_GetTick>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d901      	bls.n	800ecfc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	e012      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ecfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1ef      	bne.n	800ecea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ed0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed0e:	68da      	ldr	r2, [r3, #12]
 800ed10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed14:	4b05      	ldr	r3, [pc, #20]	@ (800ed2c <HAL_RCC_OscConfig+0x6e4>)
 800ed16:	4013      	ands	r3, r2
 800ed18:	60cb      	str	r3, [r1, #12]
 800ed1a:	e001      	b.n	800ed20 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e000      	b.n	800ed22 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3734      	adds	r7, #52	@ 0x34
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd90      	pop	{r4, r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	eefefffc 	.word	0xeefefffc

0800ed30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e12d      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ed44:	4b98      	ldr	r3, [pc, #608]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f003 0307 	and.w	r3, r3, #7
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d91b      	bls.n	800ed8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed52:	4b95      	ldr	r3, [pc, #596]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f023 0207 	bic.w	r2, r3, #7
 800ed5a:	4993      	ldr	r1, [pc, #588]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed62:	f7f9 ffc3 	bl	8008cec <HAL_GetTick>
 800ed66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed68:	e008      	b.n	800ed7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ed6a:	f7f9 ffbf 	bl	8008cec <HAL_GetTick>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d901      	bls.n	800ed7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800ed78:	2303      	movs	r3, #3
 800ed7a:	e111      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed7c:	4b8a      	ldr	r3, [pc, #552]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f003 0307 	and.w	r3, r3, #7
 800ed84:	683a      	ldr	r2, [r7, #0]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d1ef      	bne.n	800ed6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f003 0302 	and.w	r3, r3, #2
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d016      	beq.n	800edc4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff faef 	bl	800e37e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800eda0:	f7f9 ffa4 	bl	8008cec <HAL_GetTick>
 800eda4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800eda6:	e008      	b.n	800edba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800eda8:	f7f9 ffa0 	bl	8008cec <HAL_GetTick>
 800edac:	4602      	mov	r2, r0
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d901      	bls.n	800edba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e0f2      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800edba:	f7ff fbe9 	bl	800e590 <LL_RCC_IsActiveFlag_HPRE>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0f1      	beq.n	800eda8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 0320 	and.w	r3, r3, #32
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d016      	beq.n	800edfe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	695b      	ldr	r3, [r3, #20]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff fae6 	bl	800e3a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800edda:	f7f9 ff87 	bl	8008cec <HAL_GetTick>
 800edde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ede0:	e008      	b.n	800edf4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ede2:	f7f9 ff83 	bl	8008cec <HAL_GetTick>
 800ede6:	4602      	mov	r2, r0
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	2b02      	cmp	r3, #2
 800edee:	d901      	bls.n	800edf4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800edf0:	2303      	movs	r3, #3
 800edf2:	e0d5      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800edf4:	f7ff fbde 	bl	800e5b4 <LL_RCC_IsActiveFlag_C2HPRE>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0f1      	beq.n	800ede2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d016      	beq.n	800ee38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7ff fadf 	bl	800e3d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ee14:	f7f9 ff6a 	bl	8008cec <HAL_GetTick>
 800ee18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ee1a:	e008      	b.n	800ee2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ee1c:	f7f9 ff66 	bl	8008cec <HAL_GetTick>
 800ee20:	4602      	mov	r2, r0
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d901      	bls.n	800ee2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	e0b8      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ee2e:	f7ff fbd4 	bl	800e5da <LL_RCC_IsActiveFlag_SHDHPRE>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d0f1      	beq.n	800ee1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d016      	beq.n	800ee72 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7ff fad9 	bl	800e400 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ee4e:	f7f9 ff4d 	bl	8008cec <HAL_GetTick>
 800ee52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ee54:	e008      	b.n	800ee68 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ee56:	f7f9 ff49 	bl	8008cec <HAL_GetTick>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d901      	bls.n	800ee68 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ee64:	2303      	movs	r3, #3
 800ee66:	e09b      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ee68:	f7ff fbca 	bl	800e600 <LL_RCC_IsActiveFlag_PPRE1>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d0f1      	beq.n	800ee56 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f003 0308 	and.w	r3, r3, #8
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d017      	beq.n	800eeae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	00db      	lsls	r3, r3, #3
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7ff facf 	bl	800e428 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ee8a:	f7f9 ff2f 	bl	8008cec <HAL_GetTick>
 800ee8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ee90:	e008      	b.n	800eea4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ee92:	f7f9 ff2b 	bl	8008cec <HAL_GetTick>
 800ee96:	4602      	mov	r2, r0
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	1ad3      	subs	r3, r2, r3
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	d901      	bls.n	800eea4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800eea0:	2303      	movs	r3, #3
 800eea2:	e07d      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800eea4:	f7ff fbbe 	bl	800e624 <LL_RCC_IsActiveFlag_PPRE2>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0f1      	beq.n	800ee92 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d043      	beq.n	800ef42 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d106      	bne.n	800eed0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800eec2:	f7ff f86f 	bl	800dfa4 <LL_RCC_HSE_IsReady>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d11e      	bne.n	800ef0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800eecc:	2301      	movs	r3, #1
 800eece:	e067      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d106      	bne.n	800eee6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800eed8:	f7ff fb17 	bl	800e50a <LL_RCC_PLL_IsReady>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d113      	bne.n	800ef0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800eee2:	2301      	movs	r3, #1
 800eee4:	e05c      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800eeee:	f7ff f9d7 	bl	800e2a0 <LL_RCC_MSI_IsReady>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d108      	bne.n	800ef0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	e051      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800eefc:	f7ff f882 	bl	800e004 <LL_RCC_HSI_IsReady>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d101      	bne.n	800ef0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ef06:	2301      	movs	r3, #1
 800ef08:	e04a      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7ff fa15 	bl	800e33e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef14:	f7f9 feea 	bl	8008cec <HAL_GetTick>
 800ef18:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef1a:	e00a      	b.n	800ef32 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef1c:	f7f9 fee6 	bl	8008cec <HAL_GetTick>
 800ef20:	4602      	mov	r2, r0
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d901      	bls.n	800ef32 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e036      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef32:	f7ff fa18 	bl	800e366 <LL_RCC_GetSysClkSource>
 800ef36:	4602      	mov	r2, r0
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d1ec      	bne.n	800ef1c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ef42:	4b19      	ldr	r3, [pc, #100]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f003 0307 	and.w	r3, r3, #7
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d21b      	bcs.n	800ef88 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef50:	4b15      	ldr	r3, [pc, #84]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f023 0207 	bic.w	r2, r3, #7
 800ef58:	4913      	ldr	r1, [pc, #76]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef60:	f7f9 fec4 	bl	8008cec <HAL_GetTick>
 800ef64:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef66:	e008      	b.n	800ef7a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ef68:	f7f9 fec0 	bl	8008cec <HAL_GetTick>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d901      	bls.n	800ef7a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800ef76:	2303      	movs	r3, #3
 800ef78:	e012      	b.n	800efa0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef7a:	4b0b      	ldr	r3, [pc, #44]	@ (800efa8 <HAL_RCC_ClockConfig+0x278>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f003 0307 	and.w	r3, r3, #7
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d1ef      	bne.n	800ef68 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ef88:	f000 f880 	bl	800f08c <HAL_RCC_GetHCLKFreq>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4a07      	ldr	r2, [pc, #28]	@ (800efac <HAL_RCC_ClockConfig+0x27c>)
 800ef90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800ef92:	f7f9 feb7 	bl	8008d04 <HAL_GetTickPrio>
 800ef96:	4603      	mov	r3, r0
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f9 fc51 	bl	8008840 <HAL_InitTick>
 800ef9e:	4603      	mov	r3, r0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	58004000 	.word	0x58004000
 800efac:	2000001c 	.word	0x2000001c

0800efb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800efb6:	f7ff f9d6 	bl	800e366 <LL_RCC_GetSysClkSource>
 800efba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10a      	bne.n	800efd8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800efc2:	f7ff f992 	bl	800e2ea <LL_RCC_MSI_GetRange>
 800efc6:	4603      	mov	r3, r0
 800efc8:	091b      	lsrs	r3, r3, #4
 800efca:	f003 030f 	and.w	r3, r3, #15
 800efce:	4a2b      	ldr	r2, [pc, #172]	@ (800f07c <HAL_RCC_GetSysClockFreq+0xcc>)
 800efd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efd4:	60fb      	str	r3, [r7, #12]
 800efd6:	e04b      	b.n	800f070 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b04      	cmp	r3, #4
 800efdc:	d102      	bne.n	800efe4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800efde:	4b28      	ldr	r3, [pc, #160]	@ (800f080 <HAL_RCC_GetSysClockFreq+0xd0>)
 800efe0:	60fb      	str	r3, [r7, #12]
 800efe2:	e045      	b.n	800f070 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b08      	cmp	r3, #8
 800efe8:	d10a      	bne.n	800f000 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800efea:	f7fe ffab 	bl	800df44 <LL_RCC_HSE_IsEnabledDiv2>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d102      	bne.n	800effa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800eff4:	4b23      	ldr	r3, [pc, #140]	@ (800f084 <HAL_RCC_GetSysClockFreq+0xd4>)
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	e03a      	b.n	800f070 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800effa:	4b23      	ldr	r3, [pc, #140]	@ (800f088 <HAL_RCC_GetSysClockFreq+0xd8>)
 800effc:	60fb      	str	r3, [r7, #12]
 800effe:	e037      	b.n	800f070 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f000:	f7ff faba 	bl	800e578 <LL_RCC_PLL_GetMainSource>
 800f004:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d003      	beq.n	800f014 <HAL_RCC_GetSysClockFreq+0x64>
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b03      	cmp	r3, #3
 800f010:	d003      	beq.n	800f01a <HAL_RCC_GetSysClockFreq+0x6a>
 800f012:	e00d      	b.n	800f030 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f014:	4b1a      	ldr	r3, [pc, #104]	@ (800f080 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f016:	60bb      	str	r3, [r7, #8]
        break;
 800f018:	e015      	b.n	800f046 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f01a:	f7fe ff93 	bl	800df44 <LL_RCC_HSE_IsEnabledDiv2>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b01      	cmp	r3, #1
 800f022:	d102      	bne.n	800f02a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f024:	4b17      	ldr	r3, [pc, #92]	@ (800f084 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f026:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f028:	e00d      	b.n	800f046 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f02a:	4b17      	ldr	r3, [pc, #92]	@ (800f088 <HAL_RCC_GetSysClockFreq+0xd8>)
 800f02c:	60bb      	str	r3, [r7, #8]
        break;
 800f02e:	e00a      	b.n	800f046 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f030:	f7ff f95b 	bl	800e2ea <LL_RCC_MSI_GetRange>
 800f034:	4603      	mov	r3, r0
 800f036:	091b      	lsrs	r3, r3, #4
 800f038:	f003 030f 	and.w	r3, r3, #15
 800f03c:	4a0f      	ldr	r2, [pc, #60]	@ (800f07c <HAL_RCC_GetSysClockFreq+0xcc>)
 800f03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f042:	60bb      	str	r3, [r7, #8]
        break;
 800f044:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f046:	f7ff fa72 	bl	800e52e <LL_RCC_PLL_GetN>
 800f04a:	4602      	mov	r2, r0
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	fb03 f402 	mul.w	r4, r3, r2
 800f052:	f7ff fa85 	bl	800e560 <LL_RCC_PLL_GetDivider>
 800f056:	4603      	mov	r3, r0
 800f058:	091b      	lsrs	r3, r3, #4
 800f05a:	3301      	adds	r3, #1
 800f05c:	fbb4 f4f3 	udiv	r4, r4, r3
 800f060:	f7ff fa72 	bl	800e548 <LL_RCC_PLL_GetR>
 800f064:	4603      	mov	r3, r0
 800f066:	0f5b      	lsrs	r3, r3, #29
 800f068:	3301      	adds	r3, #1
 800f06a:	fbb4 f3f3 	udiv	r3, r4, r3
 800f06e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f070:	68fb      	ldr	r3, [r7, #12]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3714      	adds	r7, #20
 800f076:	46bd      	mov	sp, r7
 800f078:	bd90      	pop	{r4, r7, pc}
 800f07a:	bf00      	nop
 800f07c:	0801f620 	.word	0x0801f620
 800f080:	00f42400 	.word	0x00f42400
 800f084:	003d0900 	.word	0x003d0900
 800f088:	007a1200 	.word	0x007a1200

0800f08c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f08c:	b598      	push	{r3, r4, r7, lr}
 800f08e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f090:	f7ff ff8e 	bl	800efb0 <HAL_RCC_GetSysClockFreq>
 800f094:	4604      	mov	r4, r0
 800f096:	f7ff f9db 	bl	800e450 <LL_RCC_GetAHBPrescaler>
 800f09a:	4603      	mov	r3, r0
 800f09c:	091b      	lsrs	r3, r3, #4
 800f09e:	f003 030f 	and.w	r3, r3, #15
 800f0a2:	4a03      	ldr	r2, [pc, #12]	@ (800f0b0 <HAL_RCC_GetHCLKFreq+0x24>)
 800f0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	bd98      	pop	{r3, r4, r7, pc}
 800f0b0:	0801f5c0 	.word	0x0801f5c0

0800f0b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f0b4:	b598      	push	{r3, r4, r7, lr}
 800f0b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f0b8:	f7ff ffe8 	bl	800f08c <HAL_RCC_GetHCLKFreq>
 800f0bc:	4604      	mov	r4, r0
 800f0be:	f7ff f9fa 	bl	800e4b6 <LL_RCC_GetAPB2Prescaler>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	0adb      	lsrs	r3, r3, #11
 800f0c6:	f003 0307 	and.w	r3, r3, #7
 800f0ca:	4a04      	ldr	r2, [pc, #16]	@ (800f0dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800f0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d0:	f003 031f 	and.w	r3, r3, #31
 800f0d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	bd98      	pop	{r3, r4, r7, pc}
 800f0dc:	0801f600 	.word	0x0801f600

0800f0e0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	226f      	movs	r2, #111	@ 0x6f
 800f0ee:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800f0f0:	f7ff f939 	bl	800e366 <LL_RCC_GetSysClkSource>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800f0fa:	f7ff f9a9 	bl	800e450 <LL_RCC_GetAHBPrescaler>
 800f0fe:	4602      	mov	r2, r0
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800f104:	f7ff f9cb 	bl	800e49e <LL_RCC_GetAPB1Prescaler>
 800f108:	4602      	mov	r2, r0
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800f10e:	f7ff f9d2 	bl	800e4b6 <LL_RCC_GetAPB2Prescaler>
 800f112:	4602      	mov	r2, r0
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800f118:	f7ff f9a6 	bl	800e468 <LL_C2_RCC_GetAHBPrescaler>
 800f11c:	4602      	mov	r2, r0
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800f122:	f7ff f9ae 	bl	800e482 <LL_RCC_GetAHB4Prescaler>
 800f126:	4602      	mov	r2, r0
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800f12c:	4b04      	ldr	r3, [pc, #16]	@ (800f140 <HAL_RCC_GetClockConfig+0x60>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f003 0207 	and.w	r2, r3, #7
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	601a      	str	r2, [r3, #0]
}
 800f138:	bf00      	nop
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	58004000 	.word	0x58004000

0800f144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f144:	b590      	push	{r4, r7, lr}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2bb0      	cmp	r3, #176	@ 0xb0
 800f150:	d903      	bls.n	800f15a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f152:	4b15      	ldr	r3, [pc, #84]	@ (800f1a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f156:	60fb      	str	r3, [r7, #12]
 800f158:	e007      	b.n	800f16a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	091b      	lsrs	r3, r3, #4
 800f15e:	f003 030f 	and.w	r3, r3, #15
 800f162:	4a11      	ldr	r2, [pc, #68]	@ (800f1a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f168:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f16a:	f7ff f98a 	bl	800e482 <LL_RCC_GetAHB4Prescaler>
 800f16e:	4603      	mov	r3, r0
 800f170:	091b      	lsrs	r3, r3, #4
 800f172:	f003 030f 	and.w	r3, r3, #15
 800f176:	4a0d      	ldr	r2, [pc, #52]	@ (800f1ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f182:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	4a0a      	ldr	r2, [pc, #40]	@ (800f1b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f188:	fba2 2303 	umull	r2, r3, r2, r3
 800f18c:	0c9c      	lsrs	r4, r3, #18
 800f18e:	f7fe febb 	bl	800df08 <HAL_PWREx_GetVoltageRange>
 800f192:	4603      	mov	r3, r0
 800f194:	4619      	mov	r1, r3
 800f196:	4620      	mov	r0, r4
 800f198:	f000 f80c 	bl	800f1b4 <RCC_SetFlashLatency>
 800f19c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3714      	adds	r7, #20
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd90      	pop	{r4, r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	0801f620 	.word	0x0801f620
 800f1ac:	0801f5c0 	.word	0x0801f5c0
 800f1b0:	431bde83 	.word	0x431bde83

0800f1b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f1b4:	b590      	push	{r4, r7, lr}
 800f1b6:	b093      	sub	sp, #76	@ 0x4c
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f1be:	4b37      	ldr	r3, [pc, #220]	@ (800f29c <RCC_SetFlashLatency+0xe8>)
 800f1c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800f1c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f1ca:	4a35      	ldr	r2, [pc, #212]	@ (800f2a0 <RCC_SetFlashLatency+0xec>)
 800f1cc:	f107 031c 	add.w	r3, r7, #28
 800f1d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f1d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f1d6:	4b33      	ldr	r3, [pc, #204]	@ (800f2a4 <RCC_SetFlashLatency+0xf0>)
 800f1d8:	f107 040c 	add.w	r4, r7, #12
 800f1dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1ec:	d11a      	bne.n	800f224 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1f2:	e013      	b.n	800f21c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f1f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	3348      	adds	r3, #72	@ 0x48
 800f1fa:	443b      	add	r3, r7
 800f1fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	429a      	cmp	r2, r3
 800f204:	d807      	bhi.n	800f216 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	3348      	adds	r3, #72	@ 0x48
 800f20c:	443b      	add	r3, r7
 800f20e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f212:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f214:	e020      	b.n	800f258 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f218:	3301      	adds	r3, #1
 800f21a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f21e:	2b03      	cmp	r3, #3
 800f220:	d9e8      	bls.n	800f1f4 <RCC_SetFlashLatency+0x40>
 800f222:	e019      	b.n	800f258 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f224:	2300      	movs	r3, #0
 800f226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f228:	e013      	b.n	800f252 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	3348      	adds	r3, #72	@ 0x48
 800f230:	443b      	add	r3, r7
 800f232:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d807      	bhi.n	800f24c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	3348      	adds	r3, #72	@ 0x48
 800f242:	443b      	add	r3, r7
 800f244:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f248:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f24a:	e005      	b.n	800f258 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f24c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f24e:	3301      	adds	r3, #1
 800f250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f254:	2b02      	cmp	r3, #2
 800f256:	d9e8      	bls.n	800f22a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f258:	4b13      	ldr	r3, [pc, #76]	@ (800f2a8 <RCC_SetFlashLatency+0xf4>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f023 0207 	bic.w	r2, r3, #7
 800f260:	4911      	ldr	r1, [pc, #68]	@ (800f2a8 <RCC_SetFlashLatency+0xf4>)
 800f262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f264:	4313      	orrs	r3, r2
 800f266:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f268:	f7f9 fd40 	bl	8008cec <HAL_GetTick>
 800f26c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f26e:	e008      	b.n	800f282 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f270:	f7f9 fd3c 	bl	8008cec <HAL_GetTick>
 800f274:	4602      	mov	r2, r0
 800f276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f278:	1ad3      	subs	r3, r2, r3
 800f27a:	2b02      	cmp	r3, #2
 800f27c:	d901      	bls.n	800f282 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f27e:	2303      	movs	r3, #3
 800f280:	e007      	b.n	800f292 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f282:	4b09      	ldr	r3, [pc, #36]	@ (800f2a8 <RCC_SetFlashLatency+0xf4>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f003 0307 	and.w	r3, r3, #7
 800f28a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d1ef      	bne.n	800f270 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	374c      	adds	r7, #76	@ 0x4c
 800f296:	46bd      	mov	sp, r7
 800f298:	bd90      	pop	{r4, r7, pc}
 800f29a:	bf00      	nop
 800f29c:	0801d450 	.word	0x0801d450
 800f2a0:	0801d460 	.word	0x0801d460
 800f2a4:	0801d46c 	.word	0x0801d46c
 800f2a8:	58004000 	.word	0x58004000

0800f2ac <LL_RCC_LSE_IsEnabled>:
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f2b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2b8:	f003 0301 	and.w	r3, r3, #1
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d101      	bne.n	800f2c4 <LL_RCC_LSE_IsEnabled+0x18>
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	e000      	b.n	800f2c6 <LL_RCC_LSE_IsEnabled+0x1a>
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <LL_RCC_LSE_IsReady>:
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f2d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2dc:	f003 0302 	and.w	r3, r3, #2
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d101      	bne.n	800f2e8 <LL_RCC_LSE_IsReady+0x18>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e000      	b.n	800f2ea <LL_RCC_LSE_IsReady+0x1a>
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <LL_RCC_SetRFWKPClockSource>:
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f2fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f304:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4313      	orrs	r3, r2
 800f310:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f314:	bf00      	nop
 800f316:	370c      	adds	r7, #12
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <LL_RCC_SetSMPSClockSource>:
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32e:	f023 0203 	bic.w	r2, r3, #3
 800f332:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4313      	orrs	r3, r2
 800f33a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <LL_RCC_SetSMPSPrescaler>:
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f356:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f35a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4313      	orrs	r3, r2
 800f362:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f364:	bf00      	nop
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <LL_RCC_SetUSARTClockSource>:
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f380:	f023 0203 	bic.w	r2, r3, #3
 800f384:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <LL_RCC_SetLPUARTClockSource>:
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f3a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f3b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <LL_RCC_SetI2CClockSource>:
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	091b      	lsrs	r3, r3, #4
 800f3dc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f3e0:	43db      	mvns	r3, r3
 800f3e2:	401a      	ands	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f3ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f3f6:	bf00      	nop
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <LL_RCC_SetLPTIMClockSource>:
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f40a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f40e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	0c1b      	lsrs	r3, r3, #16
 800f416:	041b      	lsls	r3, r3, #16
 800f418:	43db      	mvns	r3, r3
 800f41a:	401a      	ands	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	041b      	lsls	r3, r3, #16
 800f420:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f424:	4313      	orrs	r3, r2
 800f426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f42a:	bf00      	nop
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr

0800f436 <LL_RCC_SetSAIClockSource>:
{
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f43e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f446:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f44a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4313      	orrs	r3, r2
 800f452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f456:	bf00      	nop
 800f458:	370c      	adds	r7, #12
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr

0800f462 <LL_RCC_SetRNGClockSource>:
{
 800f462:	b480      	push	{r7}
 800f464:	b083      	sub	sp, #12
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f46a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f472:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f482:	bf00      	nop
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <LL_RCC_SetCLK48ClockSource>:
{
 800f48e:	b480      	push	{r7}
 800f490:	b083      	sub	sp, #12
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f49e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f4a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f4ae:	bf00      	nop
 800f4b0:	370c      	adds	r7, #12
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr

0800f4ba <LL_RCC_SetUSBClockSource>:
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7ff ffe3 	bl	800f48e <LL_RCC_SetCLK48ClockSource>
}
 800f4c8:	bf00      	nop
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <LL_RCC_SetADCClockSource>:
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f4d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f4e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <LL_RCC_SetRTCClockSource>:
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f50c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f510:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4313      	orrs	r3, r2
 800f518:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <LL_RCC_GetRTCClockSource>:
{
 800f528:	b480      	push	{r7}
 800f52a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f52c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f538:	4618      	mov	r0, r3
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <LL_RCC_ForceBackupDomainReset>:
{
 800f542:	b480      	push	{r7}
 800f544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f54e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f55a:	bf00      	nop
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f564:	b480      	push	{r7}
 800f566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f57c:	bf00      	nop
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <LL_RCC_PLLSAI1_Enable>:
{
 800f586:	b480      	push	{r7}
 800f588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f58a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f594:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f598:	6013      	str	r3, [r2, #0]
}
 800f59a:	bf00      	nop
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <LL_RCC_PLLSAI1_Disable>:
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f5a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f5b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f5b6:	6013      	str	r3, [r2, #0]
}
 800f5b8:	bf00      	nop
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <LL_RCC_PLLSAI1_IsReady>:
{
 800f5c2:	b480      	push	{r7}
 800f5c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f5c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f5d4:	d101      	bne.n	800f5da <LL_RCC_PLLSAI1_IsReady+0x18>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e000      	b.n	800f5dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b088      	sub	sp, #32
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d034      	beq.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f606:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f60a:	d021      	beq.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f60c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f610:	d81b      	bhi.n	800f64a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f612:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f616:	d01d      	beq.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f61c:	d815      	bhi.n	800f64a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00b      	beq.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f626:	d110      	bne.n	800f64a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f636:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f638:	e00d      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3304      	adds	r3, #4
 800f63e:	4618      	mov	r0, r3
 800f640:	f000 f947 	bl	800f8d2 <RCCEx_PLLSAI1_ConfigNP>
 800f644:	4603      	mov	r3, r0
 800f646:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f648:	e005      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f64a:	2301      	movs	r3, #1
 800f64c:	77fb      	strb	r3, [r7, #31]
        break;
 800f64e:	e002      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f650:	bf00      	nop
 800f652:	e000      	b.n	800f656 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f654:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f656:	7ffb      	ldrb	r3, [r7, #31]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d105      	bne.n	800f668 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f660:	4618      	mov	r0, r3
 800f662:	f7ff fee8 	bl	800f436 <LL_RCC_SetSAIClockSource>
 800f666:	e001      	b.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f668:	7ffb      	ldrb	r3, [r7, #31]
 800f66a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f674:	2b00      	cmp	r3, #0
 800f676:	d046      	beq.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800f678:	f7ff ff56 	bl	800f528 <LL_RCC_GetRTCClockSource>
 800f67c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f682:	69ba      	ldr	r2, [r7, #24]
 800f684:	429a      	cmp	r2, r3
 800f686:	d03c      	beq.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f688:	f7fe fc2e 	bl	800dee8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d105      	bne.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff ff30 	bl	800f4fc <LL_RCC_SetRTCClockSource>
 800f69c:	e02e      	b.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f69e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f6a8:	f7ff ff4b 	bl	800f542 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800f6ac:	f7ff ff5a 	bl	800f564 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800f6be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f6c8:	f7ff fdf0 	bl	800f2ac <LL_RCC_LSE_IsEnabled>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d114      	bne.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f6d2:	f7f9 fb0b 	bl	8008cec <HAL_GetTick>
 800f6d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f6d8:	e00b      	b.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f6da:	f7f9 fb07 	bl	8008cec <HAL_GetTick>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d902      	bls.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f6ec:	2303      	movs	r3, #3
 800f6ee:	77fb      	strb	r3, [r7, #31]
              break;
 800f6f0:	e004      	b.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f6f2:	f7ff fded 	bl	800f2d0 <LL_RCC_LSE_IsReady>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d1ee      	bne.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f6fc:	7ffb      	ldrb	r3, [r7, #31]
 800f6fe:	77bb      	strb	r3, [r7, #30]
 800f700:	e001      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f702:	7ffb      	ldrb	r3, [r7, #31]
 800f704:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d004      	beq.n	800f71c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	699b      	ldr	r3, [r3, #24]
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff fe2a 	bl	800f370 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d004      	beq.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7ff fe35 	bl	800f39c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	f003 0310 	and.w	r3, r3, #16
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d004      	beq.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f742:	4618      	mov	r0, r3
 800f744:	f7ff fe5d 	bl	800f402 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f003 0320 	and.w	r3, r3, #32
 800f750:	2b00      	cmp	r3, #0
 800f752:	d004      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f758:	4618      	mov	r0, r3
 800f75a:	f7ff fe52 	bl	800f402 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f003 0304 	and.w	r3, r3, #4
 800f766:	2b00      	cmp	r3, #0
 800f768:	d004      	beq.n	800f774 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7ff fe2a 	bl	800f3c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f003 0308 	and.w	r3, r3, #8
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d004      	beq.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fe1f 	bl	800f3c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f792:	2b00      	cmp	r3, #0
 800f794:	d022      	beq.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7ff fe8d 	bl	800f4ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f7a8:	d107      	bne.n	800f7ba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f7aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f7b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f7b8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f7c2:	d10b      	bne.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 f8dd 	bl	800f988 <RCCEx_PLLSAI1_ConfigNQ>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f7d2:	7ffb      	ldrb	r3, [r7, #31]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d001      	beq.n	800f7dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f7d8:	7ffb      	ldrb	r3, [r7, #31]
 800f7da:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d02b      	beq.n	800f840 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7f0:	d008      	beq.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7fa:	d003      	beq.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f800:	2b00      	cmp	r3, #0
 800f802:	d105      	bne.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff fe2a 	bl	800f462 <LL_RCC_SetRNGClockSource>
 800f80e:	e00a      	b.n	800f826 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f818:	60fb      	str	r3, [r7, #12]
 800f81a:	2000      	movs	r0, #0
 800f81c:	f7ff fe21 	bl	800f462 <LL_RCC_SetRNGClockSource>
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f7ff fe34 	bl	800f48e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f82a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800f82e:	d107      	bne.n	800f840 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f83a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f83e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d022      	beq.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f850:	4618      	mov	r0, r3
 800f852:	f7ff fe3d 	bl	800f4d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f85e:	d107      	bne.n	800f870 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f86a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f86e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f878:	d10b      	bne.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	3304      	adds	r3, #4
 800f87e:	4618      	mov	r0, r3
 800f880:	f000 f8dd 	bl	800fa3e <RCCEx_PLLSAI1_ConfigNR>
 800f884:	4603      	mov	r3, r0
 800f886:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f888:	7ffb      	ldrb	r3, [r7, #31]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800f88e:	7ffb      	ldrb	r3, [r7, #31]
 800f890:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d004      	beq.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff fd26 	bl	800f2f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d009      	beq.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7ff fd45 	bl	800f348 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7ff fd2c 	bl	800f320 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800f8c8:	7fbb      	ldrb	r3, [r7, #30]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3720      	adds	r7, #32
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f8de:	f7ff fe61 	bl	800f5a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f8e2:	f7f9 fa03 	bl	8008cec <HAL_GetTick>
 800f8e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f8e8:	e009      	b.n	800f8fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f8ea:	f7f9 f9ff 	bl	8008cec <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d902      	bls.n	800f8fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f8fc:	e004      	b.n	800f908 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f8fe:	f7ff fe60 	bl	800f5c2 <LL_RCC_PLLSAI1_IsReady>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1f0      	bne.n	800f8ea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800f908:	7bfb      	ldrb	r3, [r7, #15]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d137      	bne.n	800f97e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f90e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	021b      	lsls	r3, r3, #8
 800f91e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f922:	4313      	orrs	r3, r2
 800f924:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800f926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f938:	4313      	orrs	r3, r2
 800f93a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f93c:	f7ff fe23 	bl	800f586 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f940:	f7f9 f9d4 	bl	8008cec <HAL_GetTick>
 800f944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f946:	e009      	b.n	800f95c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f948:	f7f9 f9d0 	bl	8008cec <HAL_GetTick>
 800f94c:	4602      	mov	r2, r0
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	2b02      	cmp	r3, #2
 800f954:	d902      	bls.n	800f95c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800f956:	2303      	movs	r3, #3
 800f958:	73fb      	strb	r3, [r7, #15]
        break;
 800f95a:	e004      	b.n	800f966 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f95c:	f7ff fe31 	bl	800f5c2 <LL_RCC_PLLSAI1_IsReady>
 800f960:	4603      	mov	r3, r0
 800f962:	2b01      	cmp	r3, #1
 800f964:	d1f0      	bne.n	800f948 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800f966:	7bfb      	ldrb	r3, [r7, #15]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d108      	bne.n	800f97e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f96c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f970:	691a      	ldr	r2, [r3, #16]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f97a:	4313      	orrs	r3, r2
 800f97c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f980:	4618      	mov	r0, r3
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f994:	f7ff fe06 	bl	800f5a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f998:	f7f9 f9a8 	bl	8008cec <HAL_GetTick>
 800f99c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f99e:	e009      	b.n	800f9b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f9a0:	f7f9 f9a4 	bl	8008cec <HAL_GetTick>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d902      	bls.n	800f9b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800f9ae:	2303      	movs	r3, #3
 800f9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9b2:	e004      	b.n	800f9be <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f9b4:	f7ff fe05 	bl	800f5c2 <LL_RCC_PLLSAI1_IsReady>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1f0      	bne.n	800f9a0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d137      	bne.n	800fa34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f9c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	021b      	lsls	r3, r3, #8
 800f9d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800f9dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9e0:	691b      	ldr	r3, [r3, #16]
 800f9e2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f9f2:	f7ff fdc8 	bl	800f586 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9f6:	f7f9 f979 	bl	8008cec <HAL_GetTick>
 800f9fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f9fc:	e009      	b.n	800fa12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f9fe:	f7f9 f975 	bl	8008cec <HAL_GetTick>
 800fa02:	4602      	mov	r2, r0
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d902      	bls.n	800fa12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	73fb      	strb	r3, [r7, #15]
        break;
 800fa10:	e004      	b.n	800fa1c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fa12:	f7ff fdd6 	bl	800f5c2 <LL_RCC_PLLSAI1_IsReady>
 800fa16:	4603      	mov	r3, r0
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d1f0      	bne.n	800f9fe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d108      	bne.n	800fa34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fa22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa26:	691a      	ldr	r2, [r3, #16]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa30:	4313      	orrs	r3, r2
 800fa32:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fa34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b084      	sub	sp, #16
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fa4a:	f7ff fdab 	bl	800f5a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fa4e:	f7f9 f94d 	bl	8008cec <HAL_GetTick>
 800fa52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fa54:	e009      	b.n	800fa6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fa56:	f7f9 f949 	bl	8008cec <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d902      	bls.n	800fa6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800fa64:	2303      	movs	r3, #3
 800fa66:	73fb      	strb	r3, [r7, #15]
      break;
 800fa68:	e004      	b.n	800fa74 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fa6a:	f7ff fdaa 	bl	800f5c2 <LL_RCC_PLLSAI1_IsReady>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1f0      	bne.n	800fa56 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d137      	bne.n	800faea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fa7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa7e:	691b      	ldr	r3, [r3, #16]
 800fa80:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	021b      	lsls	r3, r3, #8
 800fa8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800fa92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa96:	691b      	ldr	r3, [r3, #16]
 800fa98:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800faa4:	4313      	orrs	r3, r2
 800faa6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800faa8:	f7ff fd6d 	bl	800f586 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800faac:	f7f9 f91e 	bl	8008cec <HAL_GetTick>
 800fab0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fab2:	e009      	b.n	800fac8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fab4:	f7f9 f91a 	bl	8008cec <HAL_GetTick>
 800fab8:	4602      	mov	r2, r0
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	1ad3      	subs	r3, r2, r3
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d902      	bls.n	800fac8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800fac2:	2303      	movs	r3, #3
 800fac4:	73fb      	strb	r3, [r7, #15]
        break;
 800fac6:	e004      	b.n	800fad2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fac8:	f7ff fd7b 	bl	800f5c2 <LL_RCC_PLLSAI1_IsReady>
 800facc:	4603      	mov	r3, r0
 800face:	2b01      	cmp	r3, #1
 800fad0:	d1f0      	bne.n	800fab4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d108      	bne.n	800faea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fadc:	691a      	ldr	r2, [r3, #16]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fae6:	4313      	orrs	r3, r2
 800fae8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800faea:	7bfb      	ldrb	r3, [r7, #15]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d101      	bne.n	800fb06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb02:	2301      	movs	r3, #1
 800fb04:	e049      	b.n	800fb9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d106      	bne.n	800fb20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7f8 fe5e 	bl	80087dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2202      	movs	r2, #2
 800fb24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	3304      	adds	r3, #4
 800fb30:	4619      	mov	r1, r3
 800fb32:	4610      	mov	r0, r2
 800fb34:	f000 fa7c 	bl	8010030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2201      	movs	r2, #1
 800fb74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb98:	2300      	movs	r3, #0
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d001      	beq.n	800fbbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	e036      	b.n	800fc2a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68da      	ldr	r2, [r3, #12]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f042 0201 	orr.w	r2, r2, #1
 800fbd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a17      	ldr	r2, [pc, #92]	@ (800fc38 <HAL_TIM_Base_Start_IT+0x94>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d004      	beq.n	800fbe8 <HAL_TIM_Base_Start_IT+0x44>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbe6:	d115      	bne.n	800fc14 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	689a      	ldr	r2, [r3, #8]
 800fbee:	4b13      	ldr	r3, [pc, #76]	@ (800fc3c <HAL_TIM_Base_Start_IT+0x98>)
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b06      	cmp	r3, #6
 800fbf8:	d015      	beq.n	800fc26 <HAL_TIM_Base_Start_IT+0x82>
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc00:	d011      	beq.n	800fc26 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f042 0201 	orr.w	r2, r2, #1
 800fc10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc12:	e008      	b.n	800fc26 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f042 0201 	orr.w	r2, r2, #1
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	e000      	b.n	800fc28 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	40012c00 	.word	0x40012c00
 800fc3c:	00010007 	.word	0x00010007

0800fc40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	f003 0302 	and.w	r3, r3, #2
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d020      	beq.n	800fca4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f003 0302 	and.w	r3, r3, #2
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d01b      	beq.n	800fca4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f06f 0202 	mvn.w	r2, #2
 800fc74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2201      	movs	r2, #1
 800fc7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	f003 0303 	and.w	r3, r3, #3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f9b2 	bl	800fff4 <HAL_TIM_IC_CaptureCallback>
 800fc90:	e005      	b.n	800fc9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 f9a4 	bl	800ffe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f000 f9b5 	bl	8010008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2200      	movs	r2, #0
 800fca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	f003 0304 	and.w	r3, r3, #4
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d020      	beq.n	800fcf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f003 0304 	and.w	r3, r3, #4
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d01b      	beq.n	800fcf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f06f 0204 	mvn.w	r2, #4
 800fcc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2202      	movs	r2, #2
 800fcc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f98c 	bl	800fff4 <HAL_TIM_IC_CaptureCallback>
 800fcdc:	e005      	b.n	800fcea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 f97e 	bl	800ffe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f98f 	bl	8010008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	f003 0308 	and.w	r3, r3, #8
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d020      	beq.n	800fd3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f003 0308 	and.w	r3, r3, #8
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d01b      	beq.n	800fd3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f06f 0208 	mvn.w	r2, #8
 800fd0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2204      	movs	r2, #4
 800fd12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	69db      	ldr	r3, [r3, #28]
 800fd1a:	f003 0303 	and.w	r3, r3, #3
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f966 	bl	800fff4 <HAL_TIM_IC_CaptureCallback>
 800fd28:	e005      	b.n	800fd36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 f958 	bl	800ffe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f000 f969 	bl	8010008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	f003 0310 	and.w	r3, r3, #16
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d020      	beq.n	800fd88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f003 0310 	and.w	r3, r3, #16
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01b      	beq.n	800fd88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f06f 0210 	mvn.w	r2, #16
 800fd58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2208      	movs	r2, #8
 800fd5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	69db      	ldr	r3, [r3, #28]
 800fd66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d003      	beq.n	800fd76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 f940 	bl	800fff4 <HAL_TIM_IC_CaptureCallback>
 800fd74:	e005      	b.n	800fd82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 f932 	bl	800ffe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 f943 	bl	8010008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	f003 0301 	and.w	r3, r3, #1
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d00c      	beq.n	800fdac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f003 0301 	and.w	r3, r3, #1
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d007      	beq.n	800fdac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f06f 0201 	mvn.w	r2, #1
 800fda4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7f8 fbda 	bl	8008560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d104      	bne.n	800fdc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00c      	beq.n	800fdda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d007      	beq.n	800fdda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fdd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 fa9b 	bl	8010310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00c      	beq.n	800fdfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d007      	beq.n	800fdfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fa93 	bl	8010324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00c      	beq.n	800fe22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d007      	beq.n	800fe22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fe1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 f8fd 	bl	801001c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	f003 0320 	and.w	r3, r3, #32
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00c      	beq.n	800fe46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f003 0320 	and.w	r3, r3, #32
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d007      	beq.n	800fe46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f06f 0220 	mvn.w	r2, #32
 800fe3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fa5b 	bl	80102fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe46:	bf00      	nop
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b084      	sub	sp, #16
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d101      	bne.n	800fe6a <HAL_TIM_ConfigClockSource+0x1c>
 800fe66:	2302      	movs	r3, #2
 800fe68:	e0b6      	b.n	800ffd8 <HAL_TIM_ConfigClockSource+0x18a>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2202      	movs	r2, #2
 800fe76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fe88:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fe8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fea6:	d03e      	beq.n	800ff26 <HAL_TIM_ConfigClockSource+0xd8>
 800fea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800feac:	f200 8087 	bhi.w	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800feb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800feb4:	f000 8086 	beq.w	800ffc4 <HAL_TIM_ConfigClockSource+0x176>
 800feb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800febc:	d87f      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800febe:	2b70      	cmp	r3, #112	@ 0x70
 800fec0:	d01a      	beq.n	800fef8 <HAL_TIM_ConfigClockSource+0xaa>
 800fec2:	2b70      	cmp	r3, #112	@ 0x70
 800fec4:	d87b      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800fec6:	2b60      	cmp	r3, #96	@ 0x60
 800fec8:	d050      	beq.n	800ff6c <HAL_TIM_ConfigClockSource+0x11e>
 800feca:	2b60      	cmp	r3, #96	@ 0x60
 800fecc:	d877      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800fece:	2b50      	cmp	r3, #80	@ 0x50
 800fed0:	d03c      	beq.n	800ff4c <HAL_TIM_ConfigClockSource+0xfe>
 800fed2:	2b50      	cmp	r3, #80	@ 0x50
 800fed4:	d873      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800fed6:	2b40      	cmp	r3, #64	@ 0x40
 800fed8:	d058      	beq.n	800ff8c <HAL_TIM_ConfigClockSource+0x13e>
 800feda:	2b40      	cmp	r3, #64	@ 0x40
 800fedc:	d86f      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800fede:	2b30      	cmp	r3, #48	@ 0x30
 800fee0:	d064      	beq.n	800ffac <HAL_TIM_ConfigClockSource+0x15e>
 800fee2:	2b30      	cmp	r3, #48	@ 0x30
 800fee4:	d86b      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800fee6:	2b20      	cmp	r3, #32
 800fee8:	d060      	beq.n	800ffac <HAL_TIM_ConfigClockSource+0x15e>
 800feea:	2b20      	cmp	r3, #32
 800feec:	d867      	bhi.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d05c      	beq.n	800ffac <HAL_TIM_ConfigClockSource+0x15e>
 800fef2:	2b10      	cmp	r3, #16
 800fef4:	d05a      	beq.n	800ffac <HAL_TIM_ConfigClockSource+0x15e>
 800fef6:	e062      	b.n	800ffbe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ff08:	f000 f978 	bl	80101fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ff1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	68ba      	ldr	r2, [r7, #8]
 800ff22:	609a      	str	r2, [r3, #8]
      break;
 800ff24:	e04f      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ff36:	f000 f961 	bl	80101fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	689a      	ldr	r2, [r3, #8]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff48:	609a      	str	r2, [r3, #8]
      break;
 800ff4a:	e03c      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff58:	461a      	mov	r2, r3
 800ff5a:	f000 f8d3 	bl	8010104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2150      	movs	r1, #80	@ 0x50
 800ff64:	4618      	mov	r0, r3
 800ff66:	f000 f92c 	bl	80101c2 <TIM_ITRx_SetConfig>
      break;
 800ff6a:	e02c      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff78:	461a      	mov	r2, r3
 800ff7a:	f000 f8f2 	bl	8010162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2160      	movs	r1, #96	@ 0x60
 800ff84:	4618      	mov	r0, r3
 800ff86:	f000 f91c 	bl	80101c2 <TIM_ITRx_SetConfig>
      break;
 800ff8a:	e01c      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff98:	461a      	mov	r2, r3
 800ff9a:	f000 f8b3 	bl	8010104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2140      	movs	r1, #64	@ 0x40
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f000 f90c 	bl	80101c2 <TIM_ITRx_SetConfig>
      break;
 800ffaa:	e00c      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	f000 f903 	bl	80101c2 <TIM_ITRx_SetConfig>
      break;
 800ffbc:	e003      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	73fb      	strb	r3, [r7, #15]
      break;
 800ffc2:	e000      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ffc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ffd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fffc:	bf00      	nop
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010030:	b480      	push	{r7}
 8010032:	b085      	sub	sp, #20
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4a2d      	ldr	r2, [pc, #180]	@ (80100f8 <TIM_Base_SetConfig+0xc8>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d003      	beq.n	8010050 <TIM_Base_SetConfig+0x20>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801004e:	d108      	bne.n	8010062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	4313      	orrs	r3, r2
 8010060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4a24      	ldr	r2, [pc, #144]	@ (80100f8 <TIM_Base_SetConfig+0xc8>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d00b      	beq.n	8010082 <TIM_Base_SetConfig+0x52>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010070:	d007      	beq.n	8010082 <TIM_Base_SetConfig+0x52>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4a21      	ldr	r2, [pc, #132]	@ (80100fc <TIM_Base_SetConfig+0xcc>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d003      	beq.n	8010082 <TIM_Base_SetConfig+0x52>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a20      	ldr	r2, [pc, #128]	@ (8010100 <TIM_Base_SetConfig+0xd0>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d108      	bne.n	8010094 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	4313      	orrs	r3, r2
 8010092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	4313      	orrs	r3, r2
 80100a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	689a      	ldr	r2, [r3, #8]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4a10      	ldr	r2, [pc, #64]	@ (80100f8 <TIM_Base_SetConfig+0xc8>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d007      	beq.n	80100ca <TIM_Base_SetConfig+0x9a>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4a0f      	ldr	r2, [pc, #60]	@ (80100fc <TIM_Base_SetConfig+0xcc>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d003      	beq.n	80100ca <TIM_Base_SetConfig+0x9a>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4a0e      	ldr	r2, [pc, #56]	@ (8010100 <TIM_Base_SetConfig+0xd0>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d103      	bne.n	80100d2 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	691a      	ldr	r2, [r3, #16]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f043 0204 	orr.w	r2, r3, #4
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2201      	movs	r2, #1
 80100e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	601a      	str	r2, [r3, #0]
}
 80100ea:	bf00      	nop
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	40012c00 	.word	0x40012c00
 80100fc:	40014400 	.word	0x40014400
 8010100:	40014800 	.word	0x40014800

08010104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010104:	b480      	push	{r7}
 8010106:	b087      	sub	sp, #28
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6a1b      	ldr	r3, [r3, #32]
 8010114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6a1b      	ldr	r3, [r3, #32]
 801011a:	f023 0201 	bic.w	r2, r3, #1
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	699b      	ldr	r3, [r3, #24]
 8010126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801012e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	4313      	orrs	r3, r2
 8010138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f023 030a 	bic.w	r3, r3, #10
 8010140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010142:	697a      	ldr	r2, [r7, #20]
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	4313      	orrs	r3, r2
 8010148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	621a      	str	r2, [r3, #32]
}
 8010156:	bf00      	nop
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010162:	b480      	push	{r7}
 8010164:	b087      	sub	sp, #28
 8010166:	af00      	add	r7, sp, #0
 8010168:	60f8      	str	r0, [r7, #12]
 801016a:	60b9      	str	r1, [r7, #8]
 801016c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6a1b      	ldr	r3, [r3, #32]
 8010172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a1b      	ldr	r3, [r3, #32]
 8010178:	f023 0210 	bic.w	r2, r3, #16
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	699b      	ldr	r3, [r3, #24]
 8010184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801018c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	031b      	lsls	r3, r3, #12
 8010192:	693a      	ldr	r2, [r7, #16]
 8010194:	4313      	orrs	r3, r2
 8010196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801019e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	011b      	lsls	r3, r3, #4
 80101a4:	697a      	ldr	r2, [r7, #20]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	693a      	ldr	r2, [r7, #16]
 80101ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	621a      	str	r2, [r3, #32]
}
 80101b6:	bf00      	nop
 80101b8:	371c      	adds	r7, #28
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr

080101c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101c2:	b480      	push	{r7}
 80101c4:	b085      	sub	sp, #20
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80101d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80101de:	683a      	ldr	r2, [r7, #0]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	f043 0307 	orr.w	r3, r3, #7
 80101e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	609a      	str	r2, [r3, #8]
}
 80101f0:	bf00      	nop
 80101f2:	3714      	adds	r7, #20
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b087      	sub	sp, #28
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
 8010208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	021a      	lsls	r2, r3, #8
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	431a      	orrs	r2, r3
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	4313      	orrs	r3, r2
 8010224:	697a      	ldr	r2, [r7, #20]
 8010226:	4313      	orrs	r3, r2
 8010228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	697a      	ldr	r2, [r7, #20]
 801022e:	609a      	str	r2, [r3, #8]
}
 8010230:	bf00      	nop
 8010232:	371c      	adds	r7, #28
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801023c:	b480      	push	{r7}
 801023e:	b085      	sub	sp, #20
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801024c:	2b01      	cmp	r3, #1
 801024e:	d101      	bne.n	8010254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010250:	2302      	movs	r3, #2
 8010252:	e04a      	b.n	80102ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2202      	movs	r2, #2
 8010260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	689b      	ldr	r3, [r3, #8]
 8010272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4a1f      	ldr	r2, [pc, #124]	@ (80102f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d108      	bne.n	8010290 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	4313      	orrs	r3, r2
 801028e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	4313      	orrs	r3, r2
 80102a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a12      	ldr	r2, [pc, #72]	@ (80102f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d004      	beq.n	80102be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102bc:	d10c      	bne.n	80102d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80102c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	68ba      	ldr	r2, [r7, #8]
 80102d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2201      	movs	r2, #1
 80102dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	40012c00 	.word	0x40012c00

080102fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010310:	b480      	push	{r7}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010318:	bf00      	nop
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801032c:	bf00      	nop
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010348:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801034c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	b29a      	uxth	r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3714      	adds	r7, #20
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010366:	b480      	push	{r7}
 8010368:	b085      	sub	sp, #20
 801036a:	af00      	add	r7, sp, #0
 801036c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801036e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010372:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801037a:	b29a      	uxth	r2, r3
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	b29b      	uxth	r3, r3
 8010380:	43db      	mvns	r3, r3
 8010382:	b29b      	uxth	r3, r3
 8010384:	4013      	ands	r3, r2
 8010386:	b29a      	uxth	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3714      	adds	r7, #20
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	1d3b      	adds	r3, r7, #4
 80103a6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2201      	movs	r2, #1
 80103ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2200      	movs	r2, #0
 80103c6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80103d8:	b480      	push	{r7}
 80103da:	b0a7      	sub	sp, #156	@ 0x9c
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80103e2:	2300      	movs	r3, #0
 80103e4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	4413      	add	r3, r2
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80103fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103fe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	78db      	ldrb	r3, [r3, #3]
 8010406:	2b03      	cmp	r3, #3
 8010408:	d81f      	bhi.n	801044a <USB_ActivateEndpoint+0x72>
 801040a:	a201      	add	r2, pc, #4	@ (adr r2, 8010410 <USB_ActivateEndpoint+0x38>)
 801040c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010410:	08010421 	.word	0x08010421
 8010414:	0801043d 	.word	0x0801043d
 8010418:	08010453 	.word	0x08010453
 801041c:	0801042f 	.word	0x0801042f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010420:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010424:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010428:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801042c:	e012      	b.n	8010454 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801042e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010432:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8010436:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801043a:	e00b      	b.n	8010454 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801043c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010444:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010448:	e004      	b.n	8010454 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8010450:	e000      	b.n	8010454 <USB_ActivateEndpoint+0x7c>
      break;
 8010452:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	441a      	add	r2, r3
 801045e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010466:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801046a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801046e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010472:	b29b      	uxth	r3, r3
 8010474:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4413      	add	r3, r2
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	b29b      	uxth	r3, r3
 8010484:	b21b      	sxth	r3, r3
 8010486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801048a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801048e:	b21a      	sxth	r2, r3
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	b21b      	sxth	r3, r3
 8010496:	4313      	orrs	r3, r2
 8010498:	b21b      	sxth	r3, r3
 801049a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	441a      	add	r2, r3
 80104a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80104ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104bc:	b29b      	uxth	r3, r3
 80104be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	7b1b      	ldrb	r3, [r3, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f040 8180 	bne.w	80107ca <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	785b      	ldrb	r3, [r3, #1]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 8084 	beq.w	80105dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	61bb      	str	r3, [r7, #24]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80104de:	b29b      	uxth	r3, r3
 80104e0:	461a      	mov	r2, r3
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	4413      	add	r3, r2
 80104e6:	61bb      	str	r3, [r7, #24]
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	00da      	lsls	r2, r3, #3
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	4413      	add	r3, r2
 80104f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80104f6:	617b      	str	r3, [r7, #20]
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	88db      	ldrh	r3, [r3, #6]
 80104fc:	085b      	lsrs	r3, r3, #1
 80104fe:	b29b      	uxth	r3, r3
 8010500:	005b      	lsls	r3, r3, #1
 8010502:	b29a      	uxth	r2, r3
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4413      	add	r3, r2
 8010512:	881b      	ldrh	r3, [r3, #0]
 8010514:	827b      	strh	r3, [r7, #18]
 8010516:	8a7b      	ldrh	r3, [r7, #18]
 8010518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801051c:	2b00      	cmp	r3, #0
 801051e:	d01b      	beq.n	8010558 <USB_ActivateEndpoint+0x180>
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	881b      	ldrh	r3, [r3, #0]
 801052c:	b29b      	uxth	r3, r3
 801052e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010536:	823b      	strh	r3, [r7, #16]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	441a      	add	r2, r3
 8010542:	8a3b      	ldrh	r3, [r7, #16]
 8010544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801054c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010550:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010554:	b29b      	uxth	r3, r3
 8010556:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	78db      	ldrb	r3, [r3, #3]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d020      	beq.n	80105a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4413      	add	r3, r2
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	b29b      	uxth	r3, r3
 801056e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010576:	81bb      	strh	r3, [r7, #12]
 8010578:	89bb      	ldrh	r3, [r7, #12]
 801057a:	f083 0320 	eor.w	r3, r3, #32
 801057e:	81bb      	strh	r3, [r7, #12]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	441a      	add	r2, r3
 801058a:	89bb      	ldrh	r3, [r7, #12]
 801058c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801059c:	b29b      	uxth	r3, r3
 801059e:	8013      	strh	r3, [r2, #0]
 80105a0:	e3f9      	b.n	8010d96 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	4413      	add	r3, r2
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105b8:	81fb      	strh	r3, [r7, #14]
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	441a      	add	r2, r3
 80105c4:	89fb      	ldrh	r3, [r7, #14]
 80105c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	8013      	strh	r3, [r2, #0]
 80105da:	e3dc      	b.n	8010d96 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	633b      	str	r3, [r7, #48]	@ 0x30
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	461a      	mov	r2, r3
 80105ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ec:	4413      	add	r3, r2
 80105ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	00da      	lsls	r2, r3, #3
 80105f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105f8:	4413      	add	r3, r2
 80105fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80105fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	88db      	ldrh	r3, [r3, #6]
 8010604:	085b      	lsrs	r3, r3, #1
 8010606:	b29b      	uxth	r3, r3
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	b29a      	uxth	r2, r3
 801060c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801060e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801061a:	b29b      	uxth	r3, r3
 801061c:	461a      	mov	r2, r3
 801061e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010620:	4413      	add	r3, r2
 8010622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	00da      	lsls	r2, r3, #3
 801062a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062c:	4413      	add	r3, r2
 801062e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010632:	627b      	str	r3, [r7, #36]	@ 0x24
 8010634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	b29b      	uxth	r3, r3
 801063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801063e:	b29a      	uxth	r2, r3
 8010640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010642:	801a      	strh	r2, [r3, #0]
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	691b      	ldr	r3, [r3, #16]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10a      	bne.n	8010662 <USB_ActivateEndpoint+0x28a>
 801064c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	b29b      	uxth	r3, r3
 8010652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801065a:	b29a      	uxth	r2, r3
 801065c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065e:	801a      	strh	r2, [r3, #0]
 8010660:	e041      	b.n	80106e6 <USB_ActivateEndpoint+0x30e>
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	2b3e      	cmp	r3, #62	@ 0x3e
 8010668:	d81c      	bhi.n	80106a4 <USB_ActivateEndpoint+0x2cc>
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	085b      	lsrs	r3, r3, #1
 8010670:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	f003 0301 	and.w	r3, r3, #1
 801067c:	2b00      	cmp	r3, #0
 801067e:	d004      	beq.n	801068a <USB_ActivateEndpoint+0x2b2>
 8010680:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010684:	3301      	adds	r3, #1
 8010686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801068a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	b29a      	uxth	r2, r3
 8010690:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010694:	b29b      	uxth	r3, r3
 8010696:	029b      	lsls	r3, r3, #10
 8010698:	b29b      	uxth	r3, r3
 801069a:	4313      	orrs	r3, r2
 801069c:	b29a      	uxth	r2, r3
 801069e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a0:	801a      	strh	r2, [r3, #0]
 80106a2:	e020      	b.n	80106e6 <USB_ActivateEndpoint+0x30e>
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	691b      	ldr	r3, [r3, #16]
 80106a8:	095b      	lsrs	r3, r3, #5
 80106aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	f003 031f 	and.w	r3, r3, #31
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d104      	bne.n	80106c4 <USB_ActivateEndpoint+0x2ec>
 80106ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80106be:	3b01      	subs	r3, #1
 80106c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80106c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c6:	881b      	ldrh	r3, [r3, #0]
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	029b      	lsls	r3, r3, #10
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	4313      	orrs	r3, r2
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	4413      	add	r3, r2
 80106f0:	881b      	ldrh	r3, [r3, #0]
 80106f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80106f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80106f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d01b      	beq.n	8010736 <USB_ActivateEndpoint+0x35e>
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	4413      	add	r3, r2
 8010708:	881b      	ldrh	r3, [r3, #0]
 801070a:	b29b      	uxth	r3, r3
 801070c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010714:	843b      	strh	r3, [r7, #32]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	441a      	add	r2, r3
 8010720:	8c3b      	ldrh	r3, [r7, #32]
 8010722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801072a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801072e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010732:	b29b      	uxth	r3, r3
 8010734:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d124      	bne.n	8010788 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	4413      	add	r3, r2
 8010748:	881b      	ldrh	r3, [r3, #0]
 801074a:	b29b      	uxth	r3, r3
 801074c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010754:	83bb      	strh	r3, [r7, #28]
 8010756:	8bbb      	ldrh	r3, [r7, #28]
 8010758:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801075c:	83bb      	strh	r3, [r7, #28]
 801075e:	8bbb      	ldrh	r3, [r7, #28]
 8010760:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010764:	83bb      	strh	r3, [r7, #28]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	441a      	add	r2, r3
 8010770:	8bbb      	ldrh	r3, [r7, #28]
 8010772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801077a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801077e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010782:	b29b      	uxth	r3, r3
 8010784:	8013      	strh	r3, [r2, #0]
 8010786:	e306      	b.n	8010d96 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4413      	add	r3, r2
 8010792:	881b      	ldrh	r3, [r3, #0]
 8010794:	b29b      	uxth	r3, r3
 8010796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801079a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801079e:	83fb      	strh	r3, [r7, #30]
 80107a0:	8bfb      	ldrh	r3, [r7, #30]
 80107a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80107a6:	83fb      	strh	r3, [r7, #30]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	441a      	add	r2, r3
 80107b2:	8bfb      	ldrh	r3, [r7, #30]
 80107b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	8013      	strh	r3, [r2, #0]
 80107c8:	e2e5      	b.n	8010d96 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	78db      	ldrb	r3, [r3, #3]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d11e      	bne.n	8010810 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107e8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	441a      	add	r2, r3
 80107f6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80107fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010802:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801080a:	b29b      	uxth	r3, r3
 801080c:	8013      	strh	r3, [r2, #0]
 801080e:	e01d      	b.n	801084c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	4413      	add	r3, r2
 801081a:	881b      	ldrh	r3, [r3, #0]
 801081c:	b29b      	uxth	r3, r3
 801081e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010826:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	441a      	add	r2, r3
 8010834:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8010838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801083c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010848:	b29b      	uxth	r3, r3
 801084a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010856:	b29b      	uxth	r3, r3
 8010858:	461a      	mov	r2, r3
 801085a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801085c:	4413      	add	r3, r2
 801085e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	00da      	lsls	r2, r3, #3
 8010866:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010868:	4413      	add	r3, r2
 801086a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801086e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	891b      	ldrh	r3, [r3, #8]
 8010874:	085b      	lsrs	r3, r3, #1
 8010876:	b29b      	uxth	r3, r3
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	b29a      	uxth	r2, r3
 801087c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801087e:	801a      	strh	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	677b      	str	r3, [r7, #116]	@ 0x74
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801088a:	b29b      	uxth	r3, r3
 801088c:	461a      	mov	r2, r3
 801088e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010890:	4413      	add	r3, r2
 8010892:	677b      	str	r3, [r7, #116]	@ 0x74
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	00da      	lsls	r2, r3, #3
 801089a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801089c:	4413      	add	r3, r2
 801089e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80108a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	895b      	ldrh	r3, [r3, #10]
 80108a8:	085b      	lsrs	r3, r3, #1
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80108b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	785b      	ldrb	r3, [r3, #1]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f040 81af 	bne.w	8010c1c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4413      	add	r3, r2
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80108ce:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80108d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d01d      	beq.n	8010916 <USB_ActivateEndpoint+0x53e>
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108f0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	441a      	add	r2, r3
 80108fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8010902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801090a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801090e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010912:	b29b      	uxth	r3, r3
 8010914:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	4413      	add	r3, r2
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8010926:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801092a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801092e:	2b00      	cmp	r3, #0
 8010930:	d01d      	beq.n	801096e <USB_ActivateEndpoint+0x596>
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	4413      	add	r3, r2
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	b29b      	uxth	r3, r3
 8010940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010948:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	441a      	add	r2, r3
 8010956:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801095a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801095e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010966:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801096a:	b29b      	uxth	r3, r3
 801096c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	785b      	ldrb	r3, [r3, #1]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d16b      	bne.n	8010a4e <USB_ActivateEndpoint+0x676>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010980:	b29b      	uxth	r3, r3
 8010982:	461a      	mov	r2, r3
 8010984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010986:	4413      	add	r3, r2
 8010988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	00da      	lsls	r2, r3, #3
 8010990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010992:	4413      	add	r3, r2
 8010994:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010998:	64bb      	str	r3, [r7, #72]	@ 0x48
 801099a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801099c:	881b      	ldrh	r3, [r3, #0]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109a8:	801a      	strh	r2, [r3, #0]
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	691b      	ldr	r3, [r3, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10a      	bne.n	80109c8 <USB_ActivateEndpoint+0x5f0>
 80109b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109c4:	801a      	strh	r2, [r3, #0]
 80109c6:	e05d      	b.n	8010a84 <USB_ActivateEndpoint+0x6ac>
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80109ce:	d81c      	bhi.n	8010a0a <USB_ActivateEndpoint+0x632>
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	085b      	lsrs	r3, r3, #1
 80109d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	f003 0301 	and.w	r3, r3, #1
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d004      	beq.n	80109f0 <USB_ActivateEndpoint+0x618>
 80109e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109ea:	3301      	adds	r3, #1
 80109ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80109f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	029b      	lsls	r3, r3, #10
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	4313      	orrs	r3, r2
 8010a02:	b29a      	uxth	r2, r3
 8010a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a06:	801a      	strh	r2, [r3, #0]
 8010a08:	e03c      	b.n	8010a84 <USB_ActivateEndpoint+0x6ac>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	095b      	lsrs	r3, r3, #5
 8010a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	691b      	ldr	r3, [r3, #16]
 8010a18:	f003 031f 	and.w	r3, r3, #31
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d104      	bne.n	8010a2a <USB_ActivateEndpoint+0x652>
 8010a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010a24:	3b01      	subs	r3, #1
 8010a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a2c:	881b      	ldrh	r3, [r3, #0]
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	029b      	lsls	r3, r3, #10
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a4a:	801a      	strh	r2, [r3, #0]
 8010a4c:	e01a      	b.n	8010a84 <USB_ActivateEndpoint+0x6ac>
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	785b      	ldrb	r3, [r3, #1]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d116      	bne.n	8010a84 <USB_ActivateEndpoint+0x6ac>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	461a      	mov	r2, r3
 8010a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a66:	4413      	add	r3, r2
 8010a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	00da      	lsls	r2, r3, #3
 8010a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a72:	4413      	add	r3, r2
 8010a74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010a78:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	691b      	ldr	r3, [r3, #16]
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a82:	801a      	strh	r2, [r3, #0]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	785b      	ldrb	r3, [r3, #1]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d16b      	bne.n	8010b68 <USB_ActivateEndpoint+0x790>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa0:	4413      	add	r3, r2
 8010aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	00da      	lsls	r2, r3, #3
 8010aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aac:	4413      	add	r3, r2
 8010aae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac2:	801a      	strh	r2, [r3, #0]
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	691b      	ldr	r3, [r3, #16]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d10a      	bne.n	8010ae2 <USB_ActivateEndpoint+0x70a>
 8010acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ade:	801a      	strh	r2, [r3, #0]
 8010ae0:	e05b      	b.n	8010b9a <USB_ActivateEndpoint+0x7c2>
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	2b3e      	cmp	r3, #62	@ 0x3e
 8010ae8:	d81c      	bhi.n	8010b24 <USB_ActivateEndpoint+0x74c>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	085b      	lsrs	r3, r3, #1
 8010af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	691b      	ldr	r3, [r3, #16]
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d004      	beq.n	8010b0a <USB_ActivateEndpoint+0x732>
 8010b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b04:	3301      	adds	r3, #1
 8010b06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0c:	881b      	ldrh	r3, [r3, #0]
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	029b      	lsls	r3, r3, #10
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	4313      	orrs	r3, r2
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b20:	801a      	strh	r2, [r3, #0]
 8010b22:	e03a      	b.n	8010b9a <USB_ActivateEndpoint+0x7c2>
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	095b      	lsrs	r3, r3, #5
 8010b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	f003 031f 	and.w	r3, r3, #31
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d104      	bne.n	8010b44 <USB_ActivateEndpoint+0x76c>
 8010b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b46:	881b      	ldrh	r3, [r3, #0]
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	029b      	lsls	r3, r3, #10
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	4313      	orrs	r3, r2
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b64:	801a      	strh	r2, [r3, #0]
 8010b66:	e018      	b.n	8010b9a <USB_ActivateEndpoint+0x7c2>
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	785b      	ldrb	r3, [r3, #1]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d114      	bne.n	8010b9a <USB_ActivateEndpoint+0x7c2>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	461a      	mov	r2, r3
 8010b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b7c:	4413      	add	r3, r2
 8010b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	00da      	lsls	r2, r3, #3
 8010b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b88:	4413      	add	r3, r2
 8010b8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b98:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	4413      	add	r3, r2
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010bb2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010bb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010bb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010bba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010bbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010bc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010bc2:	687a      	ldr	r2, [r7, #4]
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	441a      	add	r2, r3
 8010bcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	4413      	add	r3, r2
 8010bec:	881b      	ldrh	r3, [r3, #0]
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010bf8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	441a      	add	r2, r3
 8010c04:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	8013      	strh	r3, [r2, #0]
 8010c1a:	e0bc      	b.n	8010d96 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010c2c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d01d      	beq.n	8010c74 <USB_ActivateEndpoint+0x89c>
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	441a      	add	r2, r3
 8010c5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	4413      	add	r3, r2
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010c84:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d01d      	beq.n	8010ccc <USB_ActivateEndpoint+0x8f4>
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ca6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	441a      	add	r2, r3
 8010cb4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010cc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	78db      	ldrb	r3, [r3, #3]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d024      	beq.n	8010d1e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4413      	add	r3, r2
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010cee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010cf2:	f083 0320 	eor.w	r3, r3, #32
 8010cf6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	441a      	add	r2, r3
 8010d04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	8013      	strh	r3, [r2, #0]
 8010d1c:	e01d      	b.n	8010d5a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4413      	add	r3, r2
 8010d28:	881b      	ldrh	r3, [r3, #0]
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d34:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	441a      	add	r2, r3
 8010d42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d70:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	441a      	add	r2, r3
 8010d7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010d96:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	379c      	adds	r7, #156	@ 0x9c
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop

08010da8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b08d      	sub	sp, #52	@ 0x34
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	7b1b      	ldrb	r3, [r3, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f040 808e 	bne.w	8010ed8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	785b      	ldrb	r3, [r3, #1]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d044      	beq.n	8010e4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	009b      	lsls	r3, r3, #2
 8010dcc:	4413      	add	r3, r2
 8010dce:	881b      	ldrh	r3, [r3, #0]
 8010dd0:	81bb      	strh	r3, [r7, #12]
 8010dd2:	89bb      	ldrh	r3, [r7, #12]
 8010dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d01b      	beq.n	8010e14 <USB_DeactivateEndpoint+0x6c>
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	009b      	lsls	r3, r3, #2
 8010de4:	4413      	add	r3, r2
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010df2:	817b      	strh	r3, [r7, #10]
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	441a      	add	r2, r3
 8010dfe:	897b      	ldrh	r3, [r7, #10]
 8010e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010e0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4413      	add	r3, r2
 8010e1e:	881b      	ldrh	r3, [r3, #0]
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e2a:	813b      	strh	r3, [r7, #8]
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	441a      	add	r2, r3
 8010e36:	893b      	ldrh	r3, [r7, #8]
 8010e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	8013      	strh	r3, [r2, #0]
 8010e4c:	e192      	b.n	8011174 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	4413      	add	r3, r2
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	827b      	strh	r3, [r7, #18]
 8010e5c:	8a7b      	ldrh	r3, [r7, #18]
 8010e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d01b      	beq.n	8010e9e <USB_DeactivateEndpoint+0xf6>
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e7c:	823b      	strh	r3, [r7, #16]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	441a      	add	r2, r3
 8010e88:	8a3b      	ldrh	r3, [r7, #16]
 8010e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4413      	add	r3, r2
 8010ea8:	881b      	ldrh	r3, [r3, #0]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010eb4:	81fb      	strh	r3, [r7, #14]
 8010eb6:	687a      	ldr	r2, [r7, #4]
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	441a      	add	r2, r3
 8010ec0:	89fb      	ldrh	r3, [r7, #14]
 8010ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	8013      	strh	r3, [r2, #0]
 8010ed6:	e14d      	b.n	8011174 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	785b      	ldrb	r3, [r3, #1]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f040 80a5 	bne.w	801102c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	4413      	add	r3, r2
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	843b      	strh	r3, [r7, #32]
 8010ef0:	8c3b      	ldrh	r3, [r7, #32]
 8010ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d01b      	beq.n	8010f32 <USB_DeactivateEndpoint+0x18a>
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	881b      	ldrh	r3, [r3, #0]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f10:	83fb      	strh	r3, [r7, #30]
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	441a      	add	r2, r3
 8010f1c:	8bfb      	ldrh	r3, [r7, #30]
 8010f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	4413      	add	r3, r2
 8010f3c:	881b      	ldrh	r3, [r3, #0]
 8010f3e:	83bb      	strh	r3, [r7, #28]
 8010f40:	8bbb      	ldrh	r3, [r7, #28]
 8010f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d01b      	beq.n	8010f82 <USB_DeactivateEndpoint+0x1da>
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	4413      	add	r3, r2
 8010f54:	881b      	ldrh	r3, [r3, #0]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f60:	837b      	strh	r3, [r7, #26]
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	441a      	add	r2, r3
 8010f6c:	8b7b      	ldrh	r3, [r7, #26]
 8010f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	009b      	lsls	r3, r3, #2
 8010f8a:	4413      	add	r3, r2
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f98:	833b      	strh	r3, [r7, #24]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	441a      	add	r2, r3
 8010fa4:	8b3b      	ldrh	r3, [r7, #24]
 8010fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fd0:	82fb      	strh	r3, [r7, #22]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	441a      	add	r2, r3
 8010fdc:	8afb      	ldrh	r3, [r7, #22]
 8010fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	4413      	add	r3, r2
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011008:	82bb      	strh	r3, [r7, #20]
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	441a      	add	r2, r3
 8011014:	8abb      	ldrh	r3, [r7, #20]
 8011016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801101a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801101e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011026:	b29b      	uxth	r3, r3
 8011028:	8013      	strh	r3, [r2, #0]
 801102a:	e0a3      	b.n	8011174 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	4413      	add	r3, r2
 8011036:	881b      	ldrh	r3, [r3, #0]
 8011038:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801103a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801103c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011040:	2b00      	cmp	r3, #0
 8011042:	d01b      	beq.n	801107c <USB_DeactivateEndpoint+0x2d4>
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4413      	add	r3, r2
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	b29b      	uxth	r3, r3
 8011052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801105a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	441a      	add	r2, r3
 8011066:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801106c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011078:	b29b      	uxth	r3, r3
 801107a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	4413      	add	r3, r2
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801108a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801108c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011090:	2b00      	cmp	r3, #0
 8011092:	d01b      	beq.n	80110cc <USB_DeactivateEndpoint+0x324>
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	4413      	add	r3, r2
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	441a      	add	r2, r3
 80110b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80110b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4413      	add	r3, r2
 80110d6:	881b      	ldrh	r3, [r3, #0]
 80110d8:	b29b      	uxth	r3, r3
 80110da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	441a      	add	r2, r3
 80110ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80110fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011100:	b29b      	uxth	r3, r3
 8011102:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	4413      	add	r3, r2
 801110e:	881b      	ldrh	r3, [r3, #0]
 8011110:	b29b      	uxth	r3, r3
 8011112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801111a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	441a      	add	r2, r3
 8011126:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801112c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011138:	b29b      	uxth	r3, r3
 801113a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	4413      	add	r3, r2
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	b29b      	uxth	r3, r3
 801114a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801114e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011152:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	441a      	add	r2, r3
 801115e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801116c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011170:	b29b      	uxth	r3, r3
 8011172:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011174:	2300      	movs	r3, #0
}
 8011176:	4618      	mov	r0, r3
 8011178:	3734      	adds	r7, #52	@ 0x34
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr

08011182 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b0ac      	sub	sp, #176	@ 0xb0
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
 801118a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	785b      	ldrb	r3, [r3, #1]
 8011190:	2b01      	cmp	r3, #1
 8011192:	f040 84ca 	bne.w	8011b2a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	699a      	ldr	r2, [r3, #24]
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d904      	bls.n	80111ac <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80111aa:	e003      	b.n	80111b4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	7b1b      	ldrb	r3, [r3, #12]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d122      	bne.n	8011202 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	6959      	ldr	r1, [r3, #20]
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	88da      	ldrh	r2, [r3, #6]
 80111c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 febd 	bl	8011f4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	613b      	str	r3, [r7, #16]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80111da:	b29b      	uxth	r3, r3
 80111dc:	461a      	mov	r2, r3
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	4413      	add	r3, r2
 80111e2:	613b      	str	r3, [r7, #16]
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	00da      	lsls	r2, r3, #3
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	4413      	add	r3, r2
 80111ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	801a      	strh	r2, [r3, #0]
 80111fe:	f000 bc6f 	b.w	8011ae0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	78db      	ldrb	r3, [r3, #3]
 8011206:	2b02      	cmp	r3, #2
 8011208:	f040 831e 	bne.w	8011848 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	6a1a      	ldr	r2, [r3, #32]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	429a      	cmp	r2, r3
 8011216:	f240 82cf 	bls.w	80117b8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	4413      	add	r3, r2
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	b29b      	uxth	r3, r3
 8011228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801122c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011230:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	441a      	add	r2, r3
 801123e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801124a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801124e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011252:	b29b      	uxth	r3, r3
 8011254:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	6a1a      	ldr	r2, [r3, #32]
 801125a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801125e:	1ad2      	subs	r2, r2, r3
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	4413      	add	r3, r2
 801126e:	881b      	ldrh	r3, [r3, #0]
 8011270:	b29b      	uxth	r3, r3
 8011272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011276:	2b00      	cmp	r3, #0
 8011278:	f000 814f 	beq.w	801151a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	785b      	ldrb	r3, [r3, #1]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d16b      	bne.n	8011360 <USB_EPStartXfer+0x1de>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011292:	b29b      	uxth	r3, r3
 8011294:	461a      	mov	r2, r3
 8011296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011298:	4413      	add	r3, r2
 801129a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	00da      	lsls	r2, r3, #3
 80112a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112a4:	4413      	add	r3, r2
 80112a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80112aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80112ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ba:	801a      	strh	r2, [r3, #0]
 80112bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d10a      	bne.n	80112da <USB_EPStartXfer+0x158>
 80112c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c6:	881b      	ldrh	r3, [r3, #0]
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d6:	801a      	strh	r2, [r3, #0]
 80112d8:	e05b      	b.n	8011392 <USB_EPStartXfer+0x210>
 80112da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112de:	2b3e      	cmp	r3, #62	@ 0x3e
 80112e0:	d81c      	bhi.n	801131c <USB_EPStartXfer+0x19a>
 80112e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112e6:	085b      	lsrs	r3, r3, #1
 80112e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80112ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112f0:	f003 0301 	and.w	r3, r3, #1
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d004      	beq.n	8011302 <USB_EPStartXfer+0x180>
 80112f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80112fc:	3301      	adds	r3, #1
 80112fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	b29a      	uxth	r2, r3
 8011308:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801130c:	b29b      	uxth	r3, r3
 801130e:	029b      	lsls	r3, r3, #10
 8011310:	b29b      	uxth	r3, r3
 8011312:	4313      	orrs	r3, r2
 8011314:	b29a      	uxth	r2, r3
 8011316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011318:	801a      	strh	r2, [r3, #0]
 801131a:	e03a      	b.n	8011392 <USB_EPStartXfer+0x210>
 801131c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011320:	095b      	lsrs	r3, r3, #5
 8011322:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801132a:	f003 031f 	and.w	r3, r3, #31
 801132e:	2b00      	cmp	r3, #0
 8011330:	d104      	bne.n	801133c <USB_EPStartXfer+0x1ba>
 8011332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011336:	3b01      	subs	r3, #1
 8011338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801133e:	881b      	ldrh	r3, [r3, #0]
 8011340:	b29a      	uxth	r2, r3
 8011342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011346:	b29b      	uxth	r3, r3
 8011348:	029b      	lsls	r3, r3, #10
 801134a:	b29b      	uxth	r3, r3
 801134c:	4313      	orrs	r3, r2
 801134e:	b29b      	uxth	r3, r3
 8011350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011358:	b29a      	uxth	r2, r3
 801135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801135c:	801a      	strh	r2, [r3, #0]
 801135e:	e018      	b.n	8011392 <USB_EPStartXfer+0x210>
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	785b      	ldrb	r3, [r3, #1]
 8011364:	2b01      	cmp	r3, #1
 8011366:	d114      	bne.n	8011392 <USB_EPStartXfer+0x210>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801136e:	b29b      	uxth	r3, r3
 8011370:	461a      	mov	r2, r3
 8011372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011374:	4413      	add	r3, r2
 8011376:	633b      	str	r3, [r7, #48]	@ 0x30
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	00da      	lsls	r2, r3, #3
 801137e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011380:	4413      	add	r3, r2
 8011382:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801138c:	b29a      	uxth	r2, r3
 801138e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011390:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	895b      	ldrh	r3, [r3, #10]
 8011396:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	6959      	ldr	r1, [r3, #20]
 801139e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f000 fdce 	bl	8011f4a <USB_WritePMA>
            ep->xfer_buff += len;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	695a      	ldr	r2, [r3, #20]
 80113b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113b6:	441a      	add	r2, r3
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	6a1a      	ldr	r2, [r3, #32]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	691b      	ldr	r3, [r3, #16]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d907      	bls.n	80113d8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	6a1a      	ldr	r2, [r3, #32]
 80113cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113d0:	1ad2      	subs	r2, r2, r3
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	621a      	str	r2, [r3, #32]
 80113d6:	e006      	b.n	80113e6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	6a1b      	ldr	r3, [r3, #32]
 80113dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	2200      	movs	r2, #0
 80113e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	785b      	ldrb	r3, [r3, #1]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d16b      	bne.n	80114c6 <USB_EPStartXfer+0x344>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	61bb      	str	r3, [r7, #24]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	461a      	mov	r2, r3
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	4413      	add	r3, r2
 8011400:	61bb      	str	r3, [r7, #24]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	00da      	lsls	r2, r3, #3
 8011408:	69bb      	ldr	r3, [r7, #24]
 801140a:	4413      	add	r3, r2
 801140c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011410:	617b      	str	r3, [r7, #20]
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	b29b      	uxth	r3, r3
 8011418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801141c:	b29a      	uxth	r2, r3
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	801a      	strh	r2, [r3, #0]
 8011422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011426:	2b00      	cmp	r3, #0
 8011428:	d10a      	bne.n	8011440 <USB_EPStartXfer+0x2be>
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	b29b      	uxth	r3, r3
 8011430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011438:	b29a      	uxth	r2, r3
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	801a      	strh	r2, [r3, #0]
 801143e:	e05d      	b.n	80114fc <USB_EPStartXfer+0x37a>
 8011440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011444:	2b3e      	cmp	r3, #62	@ 0x3e
 8011446:	d81c      	bhi.n	8011482 <USB_EPStartXfer+0x300>
 8011448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801144c:	085b      	lsrs	r3, r3, #1
 801144e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011456:	f003 0301 	and.w	r3, r3, #1
 801145a:	2b00      	cmp	r3, #0
 801145c:	d004      	beq.n	8011468 <USB_EPStartXfer+0x2e6>
 801145e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011462:	3301      	adds	r3, #1
 8011464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	b29a      	uxth	r2, r3
 801146e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011472:	b29b      	uxth	r3, r3
 8011474:	029b      	lsls	r3, r3, #10
 8011476:	b29b      	uxth	r3, r3
 8011478:	4313      	orrs	r3, r2
 801147a:	b29a      	uxth	r2, r3
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	801a      	strh	r2, [r3, #0]
 8011480:	e03c      	b.n	80114fc <USB_EPStartXfer+0x37a>
 8011482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011486:	095b      	lsrs	r3, r3, #5
 8011488:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801148c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011490:	f003 031f 	and.w	r3, r3, #31
 8011494:	2b00      	cmp	r3, #0
 8011496:	d104      	bne.n	80114a2 <USB_EPStartXfer+0x320>
 8011498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801149c:	3b01      	subs	r3, #1
 801149e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	029b      	lsls	r3, r3, #10
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	4313      	orrs	r3, r2
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114be:	b29a      	uxth	r2, r3
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	801a      	strh	r2, [r3, #0]
 80114c4:	e01a      	b.n	80114fc <USB_EPStartXfer+0x37a>
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	785b      	ldrb	r3, [r3, #1]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d116      	bne.n	80114fc <USB_EPStartXfer+0x37a>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	623b      	str	r3, [r7, #32]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114d8:	b29b      	uxth	r3, r3
 80114da:	461a      	mov	r2, r3
 80114dc:	6a3b      	ldr	r3, [r7, #32]
 80114de:	4413      	add	r3, r2
 80114e0:	623b      	str	r3, [r7, #32]
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	00da      	lsls	r2, r3, #3
 80114e8:	6a3b      	ldr	r3, [r7, #32]
 80114ea:	4413      	add	r3, r2
 80114ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80114f0:	61fb      	str	r3, [r7, #28]
 80114f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	69fb      	ldr	r3, [r7, #28]
 80114fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	891b      	ldrh	r3, [r3, #8]
 8011500:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	6959      	ldr	r1, [r3, #20]
 8011508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801150c:	b29b      	uxth	r3, r3
 801150e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 fd19 	bl	8011f4a <USB_WritePMA>
 8011518:	e2e2      	b.n	8011ae0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	785b      	ldrb	r3, [r3, #1]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d16b      	bne.n	80115fa <USB_EPStartXfer+0x478>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801152c:	b29b      	uxth	r3, r3
 801152e:	461a      	mov	r2, r3
 8011530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011532:	4413      	add	r3, r2
 8011534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	00da      	lsls	r2, r3, #3
 801153c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801153e:	4413      	add	r3, r2
 8011540:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011544:	647b      	str	r3, [r7, #68]	@ 0x44
 8011546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011548:	881b      	ldrh	r3, [r3, #0]
 801154a:	b29b      	uxth	r3, r3
 801154c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011550:	b29a      	uxth	r2, r3
 8011552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011554:	801a      	strh	r2, [r3, #0]
 8011556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10a      	bne.n	8011574 <USB_EPStartXfer+0x3f2>
 801155e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	b29b      	uxth	r3, r3
 8011564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801156c:	b29a      	uxth	r2, r3
 801156e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011570:	801a      	strh	r2, [r3, #0]
 8011572:	e05d      	b.n	8011630 <USB_EPStartXfer+0x4ae>
 8011574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011578:	2b3e      	cmp	r3, #62	@ 0x3e
 801157a:	d81c      	bhi.n	80115b6 <USB_EPStartXfer+0x434>
 801157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011580:	085b      	lsrs	r3, r3, #1
 8011582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801158a:	f003 0301 	and.w	r3, r3, #1
 801158e:	2b00      	cmp	r3, #0
 8011590:	d004      	beq.n	801159c <USB_EPStartXfer+0x41a>
 8011592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011596:	3301      	adds	r3, #1
 8011598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801159c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	029b      	lsls	r3, r3, #10
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	4313      	orrs	r3, r2
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115b2:	801a      	strh	r2, [r3, #0]
 80115b4:	e03c      	b.n	8011630 <USB_EPStartXfer+0x4ae>
 80115b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115ba:	095b      	lsrs	r3, r3, #5
 80115bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80115c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115c4:	f003 031f 	and.w	r3, r3, #31
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d104      	bne.n	80115d6 <USB_EPStartXfer+0x454>
 80115cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115d0:	3b01      	subs	r3, #1
 80115d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80115d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	b29a      	uxth	r2, r3
 80115dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	029b      	lsls	r3, r3, #10
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	4313      	orrs	r3, r2
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115f6:	801a      	strh	r2, [r3, #0]
 80115f8:	e01a      	b.n	8011630 <USB_EPStartXfer+0x4ae>
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	785b      	ldrb	r3, [r3, #1]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d116      	bne.n	8011630 <USB_EPStartXfer+0x4ae>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	653b      	str	r3, [r7, #80]	@ 0x50
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801160c:	b29b      	uxth	r3, r3
 801160e:	461a      	mov	r2, r3
 8011610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011612:	4413      	add	r3, r2
 8011614:	653b      	str	r3, [r7, #80]	@ 0x50
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	00da      	lsls	r2, r3, #3
 801161c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801161e:	4413      	add	r3, r2
 8011620:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801162a:	b29a      	uxth	r2, r3
 801162c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801162e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	891b      	ldrh	r3, [r3, #8]
 8011634:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	6959      	ldr	r1, [r3, #20]
 801163c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011640:	b29b      	uxth	r3, r3
 8011642:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f000 fc7f 	bl	8011f4a <USB_WritePMA>
            ep->xfer_buff += len;
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	695a      	ldr	r2, [r3, #20]
 8011650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011654:	441a      	add	r2, r3
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	6a1a      	ldr	r2, [r3, #32]
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	691b      	ldr	r3, [r3, #16]
 8011662:	429a      	cmp	r2, r3
 8011664:	d907      	bls.n	8011676 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	6a1a      	ldr	r2, [r3, #32]
 801166a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801166e:	1ad2      	subs	r2, r2, r3
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	621a      	str	r2, [r3, #32]
 8011674:	e006      	b.n	8011684 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	6a1b      	ldr	r3, [r3, #32]
 801167a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	2200      	movs	r2, #0
 8011682:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	643b      	str	r3, [r7, #64]	@ 0x40
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	785b      	ldrb	r3, [r3, #1]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d16b      	bne.n	8011768 <USB_EPStartXfer+0x5e6>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801169a:	b29b      	uxth	r3, r3
 801169c:	461a      	mov	r2, r3
 801169e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a0:	4413      	add	r3, r2
 80116a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	00da      	lsls	r2, r3, #3
 80116aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ac:	4413      	add	r3, r2
 80116ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80116b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80116b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116be:	b29a      	uxth	r2, r3
 80116c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116c2:	801a      	strh	r2, [r3, #0]
 80116c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d10a      	bne.n	80116e2 <USB_EPStartXfer+0x560>
 80116cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116da:	b29a      	uxth	r2, r3
 80116dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116de:	801a      	strh	r2, [r3, #0]
 80116e0:	e05b      	b.n	801179a <USB_EPStartXfer+0x618>
 80116e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80116e8:	d81c      	bhi.n	8011724 <USB_EPStartXfer+0x5a2>
 80116ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116ee:	085b      	lsrs	r3, r3, #1
 80116f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d004      	beq.n	801170a <USB_EPStartXfer+0x588>
 8011700:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011704:	3301      	adds	r3, #1
 8011706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801170a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801170c:	881b      	ldrh	r3, [r3, #0]
 801170e:	b29a      	uxth	r2, r3
 8011710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011714:	b29b      	uxth	r3, r3
 8011716:	029b      	lsls	r3, r3, #10
 8011718:	b29b      	uxth	r3, r3
 801171a:	4313      	orrs	r3, r2
 801171c:	b29a      	uxth	r2, r3
 801171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011720:	801a      	strh	r2, [r3, #0]
 8011722:	e03a      	b.n	801179a <USB_EPStartXfer+0x618>
 8011724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011728:	095b      	lsrs	r3, r3, #5
 801172a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801172e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011732:	f003 031f 	and.w	r3, r3, #31
 8011736:	2b00      	cmp	r3, #0
 8011738:	d104      	bne.n	8011744 <USB_EPStartXfer+0x5c2>
 801173a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801173e:	3b01      	subs	r3, #1
 8011740:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	b29a      	uxth	r2, r3
 801174a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801174e:	b29b      	uxth	r3, r3
 8011750:	029b      	lsls	r3, r3, #10
 8011752:	b29b      	uxth	r3, r3
 8011754:	4313      	orrs	r3, r2
 8011756:	b29b      	uxth	r3, r3
 8011758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801175c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011760:	b29a      	uxth	r2, r3
 8011762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011764:	801a      	strh	r2, [r3, #0]
 8011766:	e018      	b.n	801179a <USB_EPStartXfer+0x618>
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	785b      	ldrb	r3, [r3, #1]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d114      	bne.n	801179a <USB_EPStartXfer+0x618>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011776:	b29b      	uxth	r3, r3
 8011778:	461a      	mov	r2, r3
 801177a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801177c:	4413      	add	r3, r2
 801177e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	00da      	lsls	r2, r3, #3
 8011786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011788:	4413      	add	r3, r2
 801178a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011794:	b29a      	uxth	r2, r3
 8011796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011798:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	895b      	ldrh	r3, [r3, #10]
 801179e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	6959      	ldr	r1, [r3, #20]
 80117a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fbca 	bl	8011f4a <USB_WritePMA>
 80117b6:	e193      	b.n	8011ae0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	6a1b      	ldr	r3, [r3, #32]
 80117bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	009b      	lsls	r3, r3, #2
 80117c8:	4413      	add	r3, r2
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80117d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	441a      	add	r2, r3
 80117e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80117e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011806:	b29b      	uxth	r3, r3
 8011808:	461a      	mov	r2, r3
 801180a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801180c:	4413      	add	r3, r2
 801180e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	00da      	lsls	r2, r3, #3
 8011816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011818:	4413      	add	r3, r2
 801181a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801181e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011824:	b29a      	uxth	r2, r3
 8011826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011828:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	891b      	ldrh	r3, [r3, #8]
 801182e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	6959      	ldr	r1, [r3, #20]
 8011836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801183a:	b29b      	uxth	r3, r3
 801183c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 fb82 	bl	8011f4a <USB_WritePMA>
 8011846:	e14b      	b.n	8011ae0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	6a1a      	ldr	r2, [r3, #32]
 801184c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011850:	1ad2      	subs	r2, r2, r3
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	4413      	add	r3, r2
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	b29b      	uxth	r3, r3
 8011864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011868:	2b00      	cmp	r3, #0
 801186a:	f000 809a 	beq.w	80119a2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	673b      	str	r3, [r7, #112]	@ 0x70
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	785b      	ldrb	r3, [r3, #1]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d16b      	bne.n	8011952 <USB_EPStartXfer+0x7d0>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011884:	b29b      	uxth	r3, r3
 8011886:	461a      	mov	r2, r3
 8011888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801188a:	4413      	add	r3, r2
 801188c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	00da      	lsls	r2, r3, #3
 8011894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011896:	4413      	add	r3, r2
 8011898:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801189c:	667b      	str	r3, [r7, #100]	@ 0x64
 801189e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118a0:	881b      	ldrh	r3, [r3, #0]
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118ac:	801a      	strh	r2, [r3, #0]
 80118ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d10a      	bne.n	80118cc <USB_EPStartXfer+0x74a>
 80118b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118b8:	881b      	ldrh	r3, [r3, #0]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118c4:	b29a      	uxth	r2, r3
 80118c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118c8:	801a      	strh	r2, [r3, #0]
 80118ca:	e05b      	b.n	8011984 <USB_EPStartXfer+0x802>
 80118cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80118d2:	d81c      	bhi.n	801190e <USB_EPStartXfer+0x78c>
 80118d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118d8:	085b      	lsrs	r3, r3, #1
 80118da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80118de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118e2:	f003 0301 	and.w	r3, r3, #1
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d004      	beq.n	80118f4 <USB_EPStartXfer+0x772>
 80118ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118ee:	3301      	adds	r3, #1
 80118f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80118f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118f6:	881b      	ldrh	r3, [r3, #0]
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118fe:	b29b      	uxth	r3, r3
 8011900:	029b      	lsls	r3, r3, #10
 8011902:	b29b      	uxth	r3, r3
 8011904:	4313      	orrs	r3, r2
 8011906:	b29a      	uxth	r2, r3
 8011908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801190a:	801a      	strh	r2, [r3, #0]
 801190c:	e03a      	b.n	8011984 <USB_EPStartXfer+0x802>
 801190e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011912:	095b      	lsrs	r3, r3, #5
 8011914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801191c:	f003 031f 	and.w	r3, r3, #31
 8011920:	2b00      	cmp	r3, #0
 8011922:	d104      	bne.n	801192e <USB_EPStartXfer+0x7ac>
 8011924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011928:	3b01      	subs	r3, #1
 801192a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801192e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011930:	881b      	ldrh	r3, [r3, #0]
 8011932:	b29a      	uxth	r2, r3
 8011934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011938:	b29b      	uxth	r3, r3
 801193a:	029b      	lsls	r3, r3, #10
 801193c:	b29b      	uxth	r3, r3
 801193e:	4313      	orrs	r3, r2
 8011940:	b29b      	uxth	r3, r3
 8011942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801194a:	b29a      	uxth	r2, r3
 801194c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801194e:	801a      	strh	r2, [r3, #0]
 8011950:	e018      	b.n	8011984 <USB_EPStartXfer+0x802>
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	785b      	ldrb	r3, [r3, #1]
 8011956:	2b01      	cmp	r3, #1
 8011958:	d114      	bne.n	8011984 <USB_EPStartXfer+0x802>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011960:	b29b      	uxth	r3, r3
 8011962:	461a      	mov	r2, r3
 8011964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011966:	4413      	add	r3, r2
 8011968:	673b      	str	r3, [r7, #112]	@ 0x70
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	00da      	lsls	r2, r3, #3
 8011970:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011972:	4413      	add	r3, r2
 8011974:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011978:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801197a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801197e:	b29a      	uxth	r2, r3
 8011980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011982:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	895b      	ldrh	r3, [r3, #10]
 8011988:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	6959      	ldr	r1, [r3, #20]
 8011990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011994:	b29b      	uxth	r3, r3
 8011996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fad5 	bl	8011f4a <USB_WritePMA>
 80119a0:	e09e      	b.n	8011ae0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	785b      	ldrb	r3, [r3, #1]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d16b      	bne.n	8011a82 <USB_EPStartXfer+0x900>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	461a      	mov	r2, r3
 80119b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80119ba:	4413      	add	r3, r2
 80119bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	00da      	lsls	r2, r3, #3
 80119c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80119c6:	4413      	add	r3, r2
 80119c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80119cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80119ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119d0:	881b      	ldrh	r3, [r3, #0]
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119d8:	b29a      	uxth	r2, r3
 80119da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119dc:	801a      	strh	r2, [r3, #0]
 80119de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10a      	bne.n	80119fc <USB_EPStartXfer+0x87a>
 80119e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119f8:	801a      	strh	r2, [r3, #0]
 80119fa:	e063      	b.n	8011ac4 <USB_EPStartXfer+0x942>
 80119fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a00:	2b3e      	cmp	r3, #62	@ 0x3e
 8011a02:	d81c      	bhi.n	8011a3e <USB_EPStartXfer+0x8bc>
 8011a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a08:	085b      	lsrs	r3, r3, #1
 8011a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d004      	beq.n	8011a24 <USB_EPStartXfer+0x8a2>
 8011a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011a1e:	3301      	adds	r3, #1
 8011a20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	b29a      	uxth	r2, r3
 8011a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	029b      	lsls	r3, r3, #10
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	4313      	orrs	r3, r2
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a3a:	801a      	strh	r2, [r3, #0]
 8011a3c:	e042      	b.n	8011ac4 <USB_EPStartXfer+0x942>
 8011a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a42:	095b      	lsrs	r3, r3, #5
 8011a44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a4c:	f003 031f 	and.w	r3, r3, #31
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d104      	bne.n	8011a5e <USB_EPStartXfer+0x8dc>
 8011a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a60:	881b      	ldrh	r3, [r3, #0]
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	029b      	lsls	r3, r3, #10
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a7e:	801a      	strh	r2, [r3, #0]
 8011a80:	e020      	b.n	8011ac4 <USB_EPStartXfer+0x942>
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	785b      	ldrb	r3, [r3, #1]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d11c      	bne.n	8011ac4 <USB_EPStartXfer+0x942>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	461a      	mov	r2, r3
 8011a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	00da      	lsls	r2, r3, #3
 8011aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011aae:	4413      	add	r3, r2
 8011ab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011ac2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	891b      	ldrh	r3, [r3, #8]
 8011ac8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	6959      	ldr	r1, [r3, #20]
 8011ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f000 fa35 	bl	8011f4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	4413      	add	r3, r2
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011af6:	817b      	strh	r3, [r7, #10]
 8011af8:	897b      	ldrh	r3, [r7, #10]
 8011afa:	f083 0310 	eor.w	r3, r3, #16
 8011afe:	817b      	strh	r3, [r7, #10]
 8011b00:	897b      	ldrh	r3, [r7, #10]
 8011b02:	f083 0320 	eor.w	r3, r3, #32
 8011b06:	817b      	strh	r3, [r7, #10]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	441a      	add	r2, r3
 8011b12:	897b      	ldrh	r3, [r7, #10]
 8011b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	8013      	strh	r3, [r2, #0]
 8011b28:	e0d5      	b.n	8011cd6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	7b1b      	ldrb	r3, [r3, #12]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d156      	bne.n	8011be0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	699b      	ldr	r3, [r3, #24]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d122      	bne.n	8011b80 <USB_EPStartXfer+0x9fe>
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	78db      	ldrb	r3, [r3, #3]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d11e      	bne.n	8011b80 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4413      	add	r3, r2
 8011b4c:	881b      	ldrh	r3, [r3, #0]
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b58:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	441a      	add	r2, r3
 8011b66:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	8013      	strh	r3, [r2, #0]
 8011b7e:	e01d      	b.n	8011bbc <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b96:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	441a      	add	r2, r3
 8011ba4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	699a      	ldr	r2, [r3, #24]
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d907      	bls.n	8011bd8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	699a      	ldr	r2, [r3, #24]
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	1ad2      	subs	r2, r2, r3
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	619a      	str	r2, [r3, #24]
 8011bd6:	e054      	b.n	8011c82 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	619a      	str	r2, [r3, #24]
 8011bde:	e050      	b.n	8011c82 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	78db      	ldrb	r3, [r3, #3]
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d142      	bne.n	8011c6e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	69db      	ldr	r3, [r3, #28]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d048      	beq.n	8011c82 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	4413      	add	r3, r2
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011c00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d005      	beq.n	8011c18 <USB_EPStartXfer+0xa96>
 8011c0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d10b      	bne.n	8011c30 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011c18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d12e      	bne.n	8011c82 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011c24:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d128      	bne.n	8011c82 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	4413      	add	r3, r2
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c46:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	441a      	add	r2, r3
 8011c54:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	8013      	strh	r3, [r2, #0]
 8011c6c:	e009      	b.n	8011c82 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	78db      	ldrb	r3, [r3, #3]
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d103      	bne.n	8011c7e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	619a      	str	r2, [r3, #24]
 8011c7c:	e001      	b.n	8011c82 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	e02a      	b.n	8011cd8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	4413      	add	r3, r2
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011c9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011ca0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011ca4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011ca8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011cac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011cb0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	441a      	add	r2, r3
 8011cbe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011cd6:	2300      	movs	r3, #0
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	37b0      	adds	r7, #176	@ 0xb0
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	785b      	ldrb	r3, [r3, #1]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d020      	beq.n	8011d34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d08:	81bb      	strh	r3, [r7, #12]
 8011d0a:	89bb      	ldrh	r3, [r7, #12]
 8011d0c:	f083 0310 	eor.w	r3, r3, #16
 8011d10:	81bb      	strh	r3, [r7, #12]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	441a      	add	r2, r3
 8011d1c:	89bb      	ldrh	r3, [r7, #12]
 8011d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	8013      	strh	r3, [r2, #0]
 8011d32:	e01f      	b.n	8011d74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	4413      	add	r3, r2
 8011d3e:	881b      	ldrh	r3, [r3, #0]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d4a:	81fb      	strh	r3, [r7, #14]
 8011d4c:	89fb      	ldrh	r3, [r7, #14]
 8011d4e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011d52:	81fb      	strh	r3, [r7, #14]
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	441a      	add	r2, r3
 8011d5e:	89fb      	ldrh	r3, [r7, #14]
 8011d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011d74:	2300      	movs	r3, #0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011d82:	b480      	push	{r7}
 8011d84:	b087      	sub	sp, #28
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	785b      	ldrb	r3, [r3, #1]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d04c      	beq.n	8011e2e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	4413      	add	r3, r2
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	823b      	strh	r3, [r7, #16]
 8011da2:	8a3b      	ldrh	r3, [r7, #16]
 8011da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d01b      	beq.n	8011de4 <USB_EPClearStall+0x62>
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dc2:	81fb      	strh	r3, [r7, #14]
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	441a      	add	r2, r3
 8011dce:	89fb      	ldrh	r3, [r7, #14]
 8011dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ddc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	78db      	ldrb	r3, [r3, #3]
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d06c      	beq.n	8011ec6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	881b      	ldrh	r3, [r3, #0]
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e02:	81bb      	strh	r3, [r7, #12]
 8011e04:	89bb      	ldrh	r3, [r7, #12]
 8011e06:	f083 0320 	eor.w	r3, r3, #32
 8011e0a:	81bb      	strh	r3, [r7, #12]
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	441a      	add	r2, r3
 8011e16:	89bb      	ldrh	r3, [r7, #12]
 8011e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	8013      	strh	r3, [r2, #0]
 8011e2c:	e04b      	b.n	8011ec6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	4413      	add	r3, r2
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	82fb      	strh	r3, [r7, #22]
 8011e3c:	8afb      	ldrh	r3, [r7, #22]
 8011e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d01b      	beq.n	8011e7e <USB_EPClearStall+0xfc>
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4413      	add	r3, r2
 8011e50:	881b      	ldrh	r3, [r3, #0]
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e5c:	82bb      	strh	r3, [r7, #20]
 8011e5e:	687a      	ldr	r2, [r7, #4]
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	441a      	add	r2, r3
 8011e68:	8abb      	ldrh	r3, [r7, #20]
 8011e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	881b      	ldrh	r3, [r3, #0]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e94:	827b      	strh	r3, [r7, #18]
 8011e96:	8a7b      	ldrh	r3, [r7, #18]
 8011e98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011e9c:	827b      	strh	r3, [r7, #18]
 8011e9e:	8a7b      	ldrh	r3, [r7, #18]
 8011ea0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011ea4:	827b      	strh	r3, [r7, #18]
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	441a      	add	r2, r3
 8011eb0:	8a7b      	ldrh	r3, [r7, #18]
 8011eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	371c      	adds	r7, #28
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	460b      	mov	r3, r1
 8011ede:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011ee0:	78fb      	ldrb	r3, [r7, #3]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d103      	bne.n	8011eee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2280      	movs	r2, #128	@ 0x80
 8011eea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	370c      	adds	r7, #12
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efa:	4770      	bx	lr

08011efc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b083      	sub	sp, #12
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f14:	b29a      	uxth	r2, r3
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	370c      	adds	r7, #12
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr

08011f2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011f2a:	b480      	push	{r7}
 8011f2c:	b085      	sub	sp, #20
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3714      	adds	r7, #20
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr

08011f4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011f4a:	b480      	push	{r7}
 8011f4c:	b08b      	sub	sp, #44	@ 0x2c
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	60f8      	str	r0, [r7, #12]
 8011f52:	60b9      	str	r1, [r7, #8]
 8011f54:	4611      	mov	r1, r2
 8011f56:	461a      	mov	r2, r3
 8011f58:	460b      	mov	r3, r1
 8011f5a:	80fb      	strh	r3, [r7, #6]
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011f60:	88bb      	ldrh	r3, [r7, #4]
 8011f62:	3301      	adds	r3, #1
 8011f64:	085b      	lsrs	r3, r3, #1
 8011f66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011f70:	88fa      	ldrh	r2, [r7, #6]
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	4413      	add	r3, r2
 8011f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f7a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f80:	e01c      	b.n	8011fbc <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	b21b      	sxth	r3, r3
 8011f90:	021b      	lsls	r3, r3, #8
 8011f92:	b21a      	sxth	r2, r3
 8011f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f98:	4313      	orrs	r3, r2
 8011f9a:	b21b      	sxth	r3, r3
 8011f9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011f9e:	6a3b      	ldr	r3, [r7, #32]
 8011fa0:	8a7a      	ldrh	r2, [r7, #18]
 8011fa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011fa4:	6a3b      	ldr	r3, [r7, #32]
 8011fa6:	3302      	adds	r3, #2
 8011fa8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	3301      	adds	r3, #1
 8011fae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1df      	bne.n	8011f82 <USB_WritePMA+0x38>
  }
}
 8011fc2:	bf00      	nop
 8011fc4:	bf00      	nop
 8011fc6:	372c      	adds	r7, #44	@ 0x2c
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b08b      	sub	sp, #44	@ 0x2c
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	4611      	mov	r1, r2
 8011fdc:	461a      	mov	r2, r3
 8011fde:	460b      	mov	r3, r1
 8011fe0:	80fb      	strh	r3, [r7, #6]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011fe6:	88bb      	ldrh	r3, [r7, #4]
 8011fe8:	085b      	lsrs	r3, r3, #1
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011ff6:	88fa      	ldrh	r2, [r7, #6]
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012000:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012002:	69bb      	ldr	r3, [r7, #24]
 8012004:	627b      	str	r3, [r7, #36]	@ 0x24
 8012006:	e018      	b.n	801203a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012008:	6a3b      	ldr	r3, [r7, #32]
 801200a:	881b      	ldrh	r3, [r3, #0]
 801200c:	b29b      	uxth	r3, r3
 801200e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012010:	6a3b      	ldr	r3, [r7, #32]
 8012012:	3302      	adds	r3, #2
 8012014:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	b2da      	uxtb	r2, r3
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	3301      	adds	r3, #1
 8012022:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	0a1b      	lsrs	r3, r3, #8
 8012028:	b2da      	uxtb	r2, r3
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	3301      	adds	r3, #1
 8012032:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012036:	3b01      	subs	r3, #1
 8012038:	627b      	str	r3, [r7, #36]	@ 0x24
 801203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1e3      	bne.n	8012008 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012040:	88bb      	ldrh	r3, [r7, #4]
 8012042:	f003 0301 	and.w	r3, r3, #1
 8012046:	b29b      	uxth	r3, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	d007      	beq.n	801205c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801204c:	6a3b      	ldr	r3, [r7, #32]
 801204e:	881b      	ldrh	r3, [r3, #0]
 8012050:	b29b      	uxth	r3, r3
 8012052:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	b2da      	uxtb	r2, r3
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	701a      	strb	r2, [r3, #0]
  }
}
 801205c:	bf00      	nop
 801205e:	372c      	adds	r7, #44	@ 0x2c
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr

08012068 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	460b      	mov	r3, r1
 8012072:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012074:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012078:	f006 fb44 	bl	8018704 <USBD_static_malloc>
 801207c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d109      	bne.n	8012098 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	32b0      	adds	r2, #176	@ 0xb0
 801208e:	2100      	movs	r1, #0
 8012090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012094:	2302      	movs	r3, #2
 8012096:	e0d4      	b.n	8012242 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012098:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801209c:	2100      	movs	r1, #0
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f007 f9fc 	bl	801949c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	32b0      	adds	r2, #176	@ 0xb0
 80120ae:	68f9      	ldr	r1, [r7, #12]
 80120b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	32b0      	adds	r2, #176	@ 0xb0
 80120be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	7c1b      	ldrb	r3, [r3, #16]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d138      	bne.n	8012142 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80120d0:	4b5e      	ldr	r3, [pc, #376]	@ (801224c <USBD_CDC_Init+0x1e4>)
 80120d2:	7819      	ldrb	r1, [r3, #0]
 80120d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80120d8:	2202      	movs	r2, #2
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f006 f9b9 	bl	8018452 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80120e0:	4b5a      	ldr	r3, [pc, #360]	@ (801224c <USBD_CDC_Init+0x1e4>)
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	f003 020f 	and.w	r2, r3, #15
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	4613      	mov	r3, r2
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	4413      	add	r3, r2
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	440b      	add	r3, r1
 80120f4:	3324      	adds	r3, #36	@ 0x24
 80120f6:	2201      	movs	r2, #1
 80120f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80120fa:	4b55      	ldr	r3, [pc, #340]	@ (8012250 <USBD_CDC_Init+0x1e8>)
 80120fc:	7819      	ldrb	r1, [r3, #0]
 80120fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012102:	2202      	movs	r2, #2
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f006 f9a4 	bl	8018452 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801210a:	4b51      	ldr	r3, [pc, #324]	@ (8012250 <USBD_CDC_Init+0x1e8>)
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	f003 020f 	and.w	r2, r3, #15
 8012112:	6879      	ldr	r1, [r7, #4]
 8012114:	4613      	mov	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	4413      	add	r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	440b      	add	r3, r1
 801211e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012122:	2201      	movs	r2, #1
 8012124:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012126:	4b4b      	ldr	r3, [pc, #300]	@ (8012254 <USBD_CDC_Init+0x1ec>)
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	f003 020f 	and.w	r2, r3, #15
 801212e:	6879      	ldr	r1, [r7, #4]
 8012130:	4613      	mov	r3, r2
 8012132:	009b      	lsls	r3, r3, #2
 8012134:	4413      	add	r3, r2
 8012136:	009b      	lsls	r3, r3, #2
 8012138:	440b      	add	r3, r1
 801213a:	3326      	adds	r3, #38	@ 0x26
 801213c:	2210      	movs	r2, #16
 801213e:	801a      	strh	r2, [r3, #0]
 8012140:	e035      	b.n	80121ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012142:	4b42      	ldr	r3, [pc, #264]	@ (801224c <USBD_CDC_Init+0x1e4>)
 8012144:	7819      	ldrb	r1, [r3, #0]
 8012146:	2340      	movs	r3, #64	@ 0x40
 8012148:	2202      	movs	r2, #2
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f006 f981 	bl	8018452 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012150:	4b3e      	ldr	r3, [pc, #248]	@ (801224c <USBD_CDC_Init+0x1e4>)
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	f003 020f 	and.w	r2, r3, #15
 8012158:	6879      	ldr	r1, [r7, #4]
 801215a:	4613      	mov	r3, r2
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	4413      	add	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	440b      	add	r3, r1
 8012164:	3324      	adds	r3, #36	@ 0x24
 8012166:	2201      	movs	r2, #1
 8012168:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801216a:	4b39      	ldr	r3, [pc, #228]	@ (8012250 <USBD_CDC_Init+0x1e8>)
 801216c:	7819      	ldrb	r1, [r3, #0]
 801216e:	2340      	movs	r3, #64	@ 0x40
 8012170:	2202      	movs	r2, #2
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f006 f96d 	bl	8018452 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012178:	4b35      	ldr	r3, [pc, #212]	@ (8012250 <USBD_CDC_Init+0x1e8>)
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	f003 020f 	and.w	r2, r3, #15
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	4613      	mov	r3, r2
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	4413      	add	r3, r2
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	440b      	add	r3, r1
 801218c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012190:	2201      	movs	r2, #1
 8012192:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012194:	4b2f      	ldr	r3, [pc, #188]	@ (8012254 <USBD_CDC_Init+0x1ec>)
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	f003 020f 	and.w	r2, r3, #15
 801219c:	6879      	ldr	r1, [r7, #4]
 801219e:	4613      	mov	r3, r2
 80121a0:	009b      	lsls	r3, r3, #2
 80121a2:	4413      	add	r3, r2
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	440b      	add	r3, r1
 80121a8:	3326      	adds	r3, #38	@ 0x26
 80121aa:	2210      	movs	r2, #16
 80121ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80121ae:	4b29      	ldr	r3, [pc, #164]	@ (8012254 <USBD_CDC_Init+0x1ec>)
 80121b0:	7819      	ldrb	r1, [r3, #0]
 80121b2:	2308      	movs	r3, #8
 80121b4:	2203      	movs	r2, #3
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f006 f94b 	bl	8018452 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80121bc:	4b25      	ldr	r3, [pc, #148]	@ (8012254 <USBD_CDC_Init+0x1ec>)
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	f003 020f 	and.w	r2, r3, #15
 80121c4:	6879      	ldr	r1, [r7, #4]
 80121c6:	4613      	mov	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	4413      	add	r3, r2
 80121cc:	009b      	lsls	r3, r3, #2
 80121ce:	440b      	add	r3, r1
 80121d0:	3324      	adds	r3, #36	@ 0x24
 80121d2:	2201      	movs	r2, #1
 80121d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	33b0      	adds	r3, #176	@ 0xb0
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	4413      	add	r3, r2
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2200      	movs	r2, #0
 80121f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2200      	movs	r2, #0
 80121fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012208:	2b00      	cmp	r3, #0
 801220a:	d101      	bne.n	8012210 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801220c:	2302      	movs	r3, #2
 801220e:	e018      	b.n	8012242 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	7c1b      	ldrb	r3, [r3, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d10a      	bne.n	801222e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012218:	4b0d      	ldr	r3, [pc, #52]	@ (8012250 <USBD_CDC_Init+0x1e8>)
 801221a:	7819      	ldrb	r1, [r3, #0]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f006 fa02 	bl	8018630 <USBD_LL_PrepareReceive>
 801222c:	e008      	b.n	8012240 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801222e:	4b08      	ldr	r3, [pc, #32]	@ (8012250 <USBD_CDC_Init+0x1e8>)
 8012230:	7819      	ldrb	r1, [r3, #0]
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012238:	2340      	movs	r3, #64	@ 0x40
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f006 f9f8 	bl	8018630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012240:	2300      	movs	r3, #0
}
 8012242:	4618      	mov	r0, r3
 8012244:	3710      	adds	r7, #16
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	200000af 	.word	0x200000af
 8012250:	200000b0 	.word	0x200000b0
 8012254:	200000b1 	.word	0x200000b1

08012258 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	460b      	mov	r3, r1
 8012262:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012264:	4b3a      	ldr	r3, [pc, #232]	@ (8012350 <USBD_CDC_DeInit+0xf8>)
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	4619      	mov	r1, r3
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f006 f917 	bl	801849e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012270:	4b37      	ldr	r3, [pc, #220]	@ (8012350 <USBD_CDC_DeInit+0xf8>)
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	f003 020f 	and.w	r2, r3, #15
 8012278:	6879      	ldr	r1, [r7, #4]
 801227a:	4613      	mov	r3, r2
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	4413      	add	r3, r2
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	440b      	add	r3, r1
 8012284:	3324      	adds	r3, #36	@ 0x24
 8012286:	2200      	movs	r2, #0
 8012288:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801228a:	4b32      	ldr	r3, [pc, #200]	@ (8012354 <USBD_CDC_DeInit+0xfc>)
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	4619      	mov	r1, r3
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f006 f904 	bl	801849e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012296:	4b2f      	ldr	r3, [pc, #188]	@ (8012354 <USBD_CDC_DeInit+0xfc>)
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	f003 020f 	and.w	r2, r3, #15
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	4613      	mov	r3, r2
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	4413      	add	r3, r2
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	440b      	add	r3, r1
 80122aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80122ae:	2200      	movs	r2, #0
 80122b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80122b2:	4b29      	ldr	r3, [pc, #164]	@ (8012358 <USBD_CDC_DeInit+0x100>)
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	4619      	mov	r1, r3
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f006 f8f0 	bl	801849e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80122be:	4b26      	ldr	r3, [pc, #152]	@ (8012358 <USBD_CDC_DeInit+0x100>)
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	f003 020f 	and.w	r2, r3, #15
 80122c6:	6879      	ldr	r1, [r7, #4]
 80122c8:	4613      	mov	r3, r2
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	4413      	add	r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	440b      	add	r3, r1
 80122d2:	3324      	adds	r3, #36	@ 0x24
 80122d4:	2200      	movs	r2, #0
 80122d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80122d8:	4b1f      	ldr	r3, [pc, #124]	@ (8012358 <USBD_CDC_DeInit+0x100>)
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	f003 020f 	and.w	r2, r3, #15
 80122e0:	6879      	ldr	r1, [r7, #4]
 80122e2:	4613      	mov	r3, r2
 80122e4:	009b      	lsls	r3, r3, #2
 80122e6:	4413      	add	r3, r2
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	440b      	add	r3, r1
 80122ec:	3326      	adds	r3, #38	@ 0x26
 80122ee:	2200      	movs	r2, #0
 80122f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	32b0      	adds	r2, #176	@ 0xb0
 80122fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d01f      	beq.n	8012344 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	33b0      	adds	r3, #176	@ 0xb0
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	4413      	add	r3, r2
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	32b0      	adds	r2, #176	@ 0xb0
 8012322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012326:	4618      	mov	r0, r3
 8012328:	f006 f9fa 	bl	8018720 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	32b0      	adds	r2, #176	@ 0xb0
 8012336:	2100      	movs	r1, #0
 8012338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2200      	movs	r2, #0
 8012340:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	200000af 	.word	0x200000af
 8012354:	200000b0 	.word	0x200000b0
 8012358:	200000b1 	.word	0x200000b1

0801235c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	32b0      	adds	r2, #176	@ 0xb0
 8012370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012374:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012376:	2300      	movs	r3, #0
 8012378:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801237a:	2300      	movs	r3, #0
 801237c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801237e:	2300      	movs	r3, #0
 8012380:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d101      	bne.n	801238c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012388:	2303      	movs	r3, #3
 801238a:	e0bf      	b.n	801250c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012394:	2b00      	cmp	r3, #0
 8012396:	d050      	beq.n	801243a <USBD_CDC_Setup+0xde>
 8012398:	2b20      	cmp	r3, #32
 801239a:	f040 80af 	bne.w	80124fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	88db      	ldrh	r3, [r3, #6]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d03a      	beq.n	801241c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	b25b      	sxtb	r3, r3
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	da1b      	bge.n	80123e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	33b0      	adds	r3, #176	@ 0xb0
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	4413      	add	r3, r2
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80123c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	88d2      	ldrh	r2, [r2, #6]
 80123cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	88db      	ldrh	r3, [r3, #6]
 80123d2:	2b07      	cmp	r3, #7
 80123d4:	bf28      	it	cs
 80123d6:	2307      	movcs	r3, #7
 80123d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	89fa      	ldrh	r2, [r7, #14]
 80123de:	4619      	mov	r1, r3
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f001 fd2b 	bl	8013e3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80123e6:	e090      	b.n	801250a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	785a      	ldrb	r2, [r3, #1]
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	88db      	ldrh	r3, [r3, #6]
 80123f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80123f8:	d803      	bhi.n	8012402 <USBD_CDC_Setup+0xa6>
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	88db      	ldrh	r3, [r3, #6]
 80123fe:	b2da      	uxtb	r2, r3
 8012400:	e000      	b.n	8012404 <USBD_CDC_Setup+0xa8>
 8012402:	2240      	movs	r2, #64	@ 0x40
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801240a:	6939      	ldr	r1, [r7, #16]
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012412:	461a      	mov	r2, r3
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f001 fd3d 	bl	8013e94 <USBD_CtlPrepareRx>
      break;
 801241a:	e076      	b.n	801250a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	33b0      	adds	r3, #176	@ 0xb0
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	689b      	ldr	r3, [r3, #8]
 801242e:	683a      	ldr	r2, [r7, #0]
 8012430:	7850      	ldrb	r0, [r2, #1]
 8012432:	2200      	movs	r2, #0
 8012434:	6839      	ldr	r1, [r7, #0]
 8012436:	4798      	blx	r3
      break;
 8012438:	e067      	b.n	801250a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	785b      	ldrb	r3, [r3, #1]
 801243e:	2b0b      	cmp	r3, #11
 8012440:	d851      	bhi.n	80124e6 <USBD_CDC_Setup+0x18a>
 8012442:	a201      	add	r2, pc, #4	@ (adr r2, 8012448 <USBD_CDC_Setup+0xec>)
 8012444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012448:	08012479 	.word	0x08012479
 801244c:	080124f5 	.word	0x080124f5
 8012450:	080124e7 	.word	0x080124e7
 8012454:	080124e7 	.word	0x080124e7
 8012458:	080124e7 	.word	0x080124e7
 801245c:	080124e7 	.word	0x080124e7
 8012460:	080124e7 	.word	0x080124e7
 8012464:	080124e7 	.word	0x080124e7
 8012468:	080124e7 	.word	0x080124e7
 801246c:	080124e7 	.word	0x080124e7
 8012470:	080124a3 	.word	0x080124a3
 8012474:	080124cd 	.word	0x080124cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801247e:	b2db      	uxtb	r3, r3
 8012480:	2b03      	cmp	r3, #3
 8012482:	d107      	bne.n	8012494 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012484:	f107 030a 	add.w	r3, r7, #10
 8012488:	2202      	movs	r2, #2
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f001 fcd5 	bl	8013e3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012492:	e032      	b.n	80124fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012494:	6839      	ldr	r1, [r7, #0]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f001 fc53 	bl	8013d42 <USBD_CtlError>
            ret = USBD_FAIL;
 801249c:	2303      	movs	r3, #3
 801249e:	75fb      	strb	r3, [r7, #23]
          break;
 80124a0:	e02b      	b.n	80124fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	2b03      	cmp	r3, #3
 80124ac:	d107      	bne.n	80124be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80124ae:	f107 030d 	add.w	r3, r7, #13
 80124b2:	2201      	movs	r2, #1
 80124b4:	4619      	mov	r1, r3
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f001 fcc0 	bl	8013e3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80124bc:	e01d      	b.n	80124fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80124be:	6839      	ldr	r1, [r7, #0]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f001 fc3e 	bl	8013d42 <USBD_CtlError>
            ret = USBD_FAIL;
 80124c6:	2303      	movs	r3, #3
 80124c8:	75fb      	strb	r3, [r7, #23]
          break;
 80124ca:	e016      	b.n	80124fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b03      	cmp	r3, #3
 80124d6:	d00f      	beq.n	80124f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80124d8:	6839      	ldr	r1, [r7, #0]
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f001 fc31 	bl	8013d42 <USBD_CtlError>
            ret = USBD_FAIL;
 80124e0:	2303      	movs	r3, #3
 80124e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80124e4:	e008      	b.n	80124f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80124e6:	6839      	ldr	r1, [r7, #0]
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f001 fc2a 	bl	8013d42 <USBD_CtlError>
          ret = USBD_FAIL;
 80124ee:	2303      	movs	r3, #3
 80124f0:	75fb      	strb	r3, [r7, #23]
          break;
 80124f2:	e002      	b.n	80124fa <USBD_CDC_Setup+0x19e>
          break;
 80124f4:	bf00      	nop
 80124f6:	e008      	b.n	801250a <USBD_CDC_Setup+0x1ae>
          break;
 80124f8:	bf00      	nop
      }
      break;
 80124fa:	e006      	b.n	801250a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f001 fc1f 	bl	8013d42 <USBD_CtlError>
      ret = USBD_FAIL;
 8012504:	2303      	movs	r3, #3
 8012506:	75fb      	strb	r3, [r7, #23]
      break;
 8012508:	bf00      	nop
  }

  return (uint8_t)ret;
 801250a:	7dfb      	ldrb	r3, [r7, #23]
}
 801250c:	4618      	mov	r0, r3
 801250e:	3718      	adds	r7, #24
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	460b      	mov	r3, r1
 801251e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	32b0      	adds	r2, #176	@ 0xb0
 8012532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d101      	bne.n	801253e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801253a:	2303      	movs	r3, #3
 801253c:	e065      	b.n	801260a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	32b0      	adds	r2, #176	@ 0xb0
 8012548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801254c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801254e:	78fb      	ldrb	r3, [r7, #3]
 8012550:	f003 020f 	and.w	r2, r3, #15
 8012554:	6879      	ldr	r1, [r7, #4]
 8012556:	4613      	mov	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	440b      	add	r3, r1
 8012560:	3318      	adds	r3, #24
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d02f      	beq.n	80125c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012568:	78fb      	ldrb	r3, [r7, #3]
 801256a:	f003 020f 	and.w	r2, r3, #15
 801256e:	6879      	ldr	r1, [r7, #4]
 8012570:	4613      	mov	r3, r2
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	4413      	add	r3, r2
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	440b      	add	r3, r1
 801257a:	3318      	adds	r3, #24
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	78fb      	ldrb	r3, [r7, #3]
 8012580:	f003 010f 	and.w	r1, r3, #15
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	460b      	mov	r3, r1
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	440b      	add	r3, r1
 801258c:	00db      	lsls	r3, r3, #3
 801258e:	4403      	add	r3, r0
 8012590:	3320      	adds	r3, #32
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	fbb2 f1f3 	udiv	r1, r2, r3
 8012598:	fb01 f303 	mul.w	r3, r1, r3
 801259c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d112      	bne.n	80125c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80125a2:	78fb      	ldrb	r3, [r7, #3]
 80125a4:	f003 020f 	and.w	r2, r3, #15
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	4613      	mov	r3, r2
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	4413      	add	r3, r2
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	440b      	add	r3, r1
 80125b4:	3318      	adds	r3, #24
 80125b6:	2200      	movs	r2, #0
 80125b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80125ba:	78f9      	ldrb	r1, [r7, #3]
 80125bc:	2300      	movs	r3, #0
 80125be:	2200      	movs	r2, #0
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f006 f814 	bl	80185ee <USBD_LL_Transmit>
 80125c6:	e01f      	b.n	8012608 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2200      	movs	r2, #0
 80125cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	33b0      	adds	r3, #176	@ 0xb0
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	4413      	add	r3, r2
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	691b      	ldr	r3, [r3, #16]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d010      	beq.n	8012608 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	33b0      	adds	r3, #176	@ 0xb0
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	4413      	add	r3, r2
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	68ba      	ldr	r2, [r7, #8]
 80125fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80125fe:	68ba      	ldr	r2, [r7, #8]
 8012600:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012604:	78fa      	ldrb	r2, [r7, #3]
 8012606:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012608:	2300      	movs	r3, #0
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
 801261a:	460b      	mov	r3, r1
 801261c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	32b0      	adds	r2, #176	@ 0xb0
 8012628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801262c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	32b0      	adds	r2, #176	@ 0xb0
 8012638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d101      	bne.n	8012644 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012640:	2303      	movs	r3, #3
 8012642:	e01a      	b.n	801267a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012644:	78fb      	ldrb	r3, [r7, #3]
 8012646:	4619      	mov	r1, r3
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f006 f812 	bl	8018672 <USBD_LL_GetRxDataSize>
 801264e:	4602      	mov	r2, r0
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	33b0      	adds	r3, #176	@ 0xb0
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	4413      	add	r3, r2
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	68fa      	ldr	r2, [r7, #12]
 801266a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801266e:	68fa      	ldr	r2, [r7, #12]
 8012670:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012674:	4611      	mov	r1, r2
 8012676:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	32b0      	adds	r2, #176	@ 0xb0
 8012694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012698:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d101      	bne.n	80126a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80126a0:	2303      	movs	r3, #3
 80126a2:	e024      	b.n	80126ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	33b0      	adds	r3, #176	@ 0xb0
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	4413      	add	r3, r2
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d019      	beq.n	80126ec <USBD_CDC_EP0_RxReady+0x6a>
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80126be:	2bff      	cmp	r3, #255	@ 0xff
 80126c0:	d014      	beq.n	80126ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	33b0      	adds	r3, #176	@ 0xb0
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	4413      	add	r3, r2
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80126da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80126e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	22ff      	movs	r2, #255	@ 0xff
 80126e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80126ec:	2300      	movs	r3, #0
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
	...

080126f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012700:	2182      	movs	r1, #130	@ 0x82
 8012702:	4818      	ldr	r0, [pc, #96]	@ (8012764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012704:	f000 fcbd 	bl	8013082 <USBD_GetEpDesc>
 8012708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801270a:	2101      	movs	r1, #1
 801270c:	4815      	ldr	r0, [pc, #84]	@ (8012764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801270e:	f000 fcb8 	bl	8013082 <USBD_GetEpDesc>
 8012712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012714:	2181      	movs	r1, #129	@ 0x81
 8012716:	4813      	ldr	r0, [pc, #76]	@ (8012764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012718:	f000 fcb3 	bl	8013082 <USBD_GetEpDesc>
 801271c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	2210      	movs	r2, #16
 8012728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d006      	beq.n	801273e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	2200      	movs	r2, #0
 8012734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012738:	711a      	strb	r2, [r3, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d006      	beq.n	8012752 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2200      	movs	r2, #0
 8012748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801274c:	711a      	strb	r2, [r3, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2243      	movs	r2, #67	@ 0x43
 8012756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012758:	4b02      	ldr	r3, [pc, #8]	@ (8012764 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801275a:	4618      	mov	r0, r3
 801275c:	3718      	adds	r7, #24
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	2000006c 	.word	0x2000006c

08012768 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b086      	sub	sp, #24
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012770:	2182      	movs	r1, #130	@ 0x82
 8012772:	4818      	ldr	r0, [pc, #96]	@ (80127d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012774:	f000 fc85 	bl	8013082 <USBD_GetEpDesc>
 8012778:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801277a:	2101      	movs	r1, #1
 801277c:	4815      	ldr	r0, [pc, #84]	@ (80127d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801277e:	f000 fc80 	bl	8013082 <USBD_GetEpDesc>
 8012782:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012784:	2181      	movs	r1, #129	@ 0x81
 8012786:	4813      	ldr	r0, [pc, #76]	@ (80127d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012788:	f000 fc7b 	bl	8013082 <USBD_GetEpDesc>
 801278c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d002      	beq.n	801279a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2210      	movs	r2, #16
 8012798:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d006      	beq.n	80127ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	2200      	movs	r2, #0
 80127a4:	711a      	strb	r2, [r3, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f042 0202 	orr.w	r2, r2, #2
 80127ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d006      	beq.n	80127c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2200      	movs	r2, #0
 80127b8:	711a      	strb	r2, [r3, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f042 0202 	orr.w	r2, r2, #2
 80127c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2243      	movs	r2, #67	@ 0x43
 80127c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80127c8:	4b02      	ldr	r3, [pc, #8]	@ (80127d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3718      	adds	r7, #24
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	2000006c 	.word	0x2000006c

080127d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80127e0:	2182      	movs	r1, #130	@ 0x82
 80127e2:	4818      	ldr	r0, [pc, #96]	@ (8012844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80127e4:	f000 fc4d 	bl	8013082 <USBD_GetEpDesc>
 80127e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80127ea:	2101      	movs	r1, #1
 80127ec:	4815      	ldr	r0, [pc, #84]	@ (8012844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80127ee:	f000 fc48 	bl	8013082 <USBD_GetEpDesc>
 80127f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80127f4:	2181      	movs	r1, #129	@ 0x81
 80127f6:	4813      	ldr	r0, [pc, #76]	@ (8012844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80127f8:	f000 fc43 	bl	8013082 <USBD_GetEpDesc>
 80127fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d002      	beq.n	801280a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	2210      	movs	r2, #16
 8012808:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d006      	beq.n	801281e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	2200      	movs	r2, #0
 8012814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012818:	711a      	strb	r2, [r3, #4]
 801281a:	2200      	movs	r2, #0
 801281c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d006      	beq.n	8012832 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	2200      	movs	r2, #0
 8012828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801282c:	711a      	strb	r2, [r3, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2243      	movs	r2, #67	@ 0x43
 8012836:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012838:	4b02      	ldr	r3, [pc, #8]	@ (8012844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801283a:	4618      	mov	r0, r3
 801283c:	3718      	adds	r7, #24
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	2000006c 	.word	0x2000006c

08012848 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	220a      	movs	r2, #10
 8012854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012856:	4b03      	ldr	r3, [pc, #12]	@ (8012864 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012858:	4618      	mov	r0, r3
 801285a:	370c      	adds	r7, #12
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr
 8012864:	20000028 	.word	0x20000028

08012868 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012868:	b480      	push	{r7}
 801286a:	b083      	sub	sp, #12
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d101      	bne.n	801287c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012878:	2303      	movs	r3, #3
 801287a:	e009      	b.n	8012890 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	33b0      	adds	r3, #176	@ 0xb0
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	4413      	add	r3, r2
 801288a:	683a      	ldr	r2, [r7, #0]
 801288c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801289c:	b480      	push	{r7}
 801289e:	b087      	sub	sp, #28
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	60f8      	str	r0, [r7, #12]
 80128a4:	60b9      	str	r1, [r7, #8]
 80128a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	32b0      	adds	r2, #176	@ 0xb0
 80128b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d101      	bne.n	80128c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80128be:	2303      	movs	r3, #3
 80128c0:	e008      	b.n	80128d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	68ba      	ldr	r2, [r7, #8]
 80128c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80128d2:	2300      	movs	r3, #0
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	371c      	adds	r7, #28
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80128e0:	b480      	push	{r7}
 80128e2:	b085      	sub	sp, #20
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	32b0      	adds	r2, #176	@ 0xb0
 80128f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d101      	bne.n	8012904 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012900:	2303      	movs	r3, #3
 8012902:	e004      	b.n	801290e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	683a      	ldr	r2, [r7, #0]
 8012908:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801290c:	2300      	movs	r3, #0
}
 801290e:	4618      	mov	r0, r3
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
	...

0801291c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	32b0      	adds	r2, #176	@ 0xb0
 801292e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012932:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012934:	2301      	movs	r3, #1
 8012936:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d101      	bne.n	8012942 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801293e:	2303      	movs	r3, #3
 8012940:	e025      	b.n	801298e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012948:	2b00      	cmp	r3, #0
 801294a:	d11f      	bne.n	801298c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	2201      	movs	r2, #1
 8012950:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012954:	4b10      	ldr	r3, [pc, #64]	@ (8012998 <USBD_CDC_TransmitPacket+0x7c>)
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	f003 020f 	and.w	r2, r3, #15
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	4613      	mov	r3, r2
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	4413      	add	r3, r2
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	4403      	add	r3, r0
 801296e:	3318      	adds	r3, #24
 8012970:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012972:	4b09      	ldr	r3, [pc, #36]	@ (8012998 <USBD_CDC_TransmitPacket+0x7c>)
 8012974:	7819      	ldrb	r1, [r3, #0]
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f005 fe33 	bl	80185ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8012988:	2300      	movs	r3, #0
 801298a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801298c:	7bfb      	ldrb	r3, [r7, #15]
}
 801298e:	4618      	mov	r0, r3
 8012990:	3710      	adds	r7, #16
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	200000af 	.word	0x200000af

0801299c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	32b0      	adds	r2, #176	@ 0xb0
 80129ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	32b0      	adds	r2, #176	@ 0xb0
 80129be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d101      	bne.n	80129ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80129c6:	2303      	movs	r3, #3
 80129c8:	e018      	b.n	80129fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	7c1b      	ldrb	r3, [r3, #16]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d10a      	bne.n	80129e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80129d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012a04 <USBD_CDC_ReceivePacket+0x68>)
 80129d4:	7819      	ldrb	r1, [r3, #0]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80129dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f005 fe25 	bl	8018630 <USBD_LL_PrepareReceive>
 80129e6:	e008      	b.n	80129fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80129e8:	4b06      	ldr	r3, [pc, #24]	@ (8012a04 <USBD_CDC_ReceivePacket+0x68>)
 80129ea:	7819      	ldrb	r1, [r3, #0]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80129f2:	2340      	movs	r3, #64	@ 0x40
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f005 fe1b 	bl	8018630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80129fa:	2300      	movs	r3, #0
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	200000b0 	.word	0x200000b0

08012a08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	4613      	mov	r3, r2
 8012a14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d101      	bne.n	8012a20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012a1c:	2303      	movs	r3, #3
 8012a1e:	e01f      	b.n	8012a60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2200      	movs	r2, #0
 8012a24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2200      	movs	r2, #0
 8012a34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d003      	beq.n	8012a46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	68ba      	ldr	r2, [r7, #8]
 8012a42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2201      	movs	r2, #1
 8012a4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	79fa      	ldrb	r2, [r7, #7]
 8012a52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f005 fc7f 	bl	8018358 <USBD_LL_Init>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3718      	adds	r7, #24
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012a72:	2300      	movs	r3, #0
 8012a74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d101      	bne.n	8012a80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	e025      	b.n	8012acc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	683a      	ldr	r2, [r7, #0]
 8012a84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	32ae      	adds	r2, #174	@ 0xae
 8012a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d00f      	beq.n	8012abc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	32ae      	adds	r2, #174	@ 0xae
 8012aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aac:	f107 020e 	add.w	r2, r7, #14
 8012ab0:	4610      	mov	r0, r2
 8012ab2:	4798      	blx	r3
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012ac2:	1c5a      	adds	r2, r3, #1
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012aca:	2300      	movs	r3, #0
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f005 fc9d 	bl	801841c <USBD_LL_Start>
 8012ae2:	4603      	mov	r3, r0
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3708      	adds	r7, #8
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012af4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr

08012b02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b02:	b580      	push	{r7, lr}
 8012b04:	b084      	sub	sp, #16
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	6078      	str	r0, [r7, #4]
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d009      	beq.n	8012b30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	78fa      	ldrb	r2, [r7, #3]
 8012b26:	4611      	mov	r1, r2
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	4798      	blx	r3
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3710      	adds	r7, #16
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b084      	sub	sp, #16
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	460b      	mov	r3, r1
 8012b44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012b46:	2300      	movs	r3, #0
 8012b48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	78fa      	ldrb	r2, [r7, #3]
 8012b54:	4611      	mov	r1, r2
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	4798      	blx	r3
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012b60:	2303      	movs	r3, #3
 8012b62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3710      	adds	r7, #16
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012b6e:	b580      	push	{r7, lr}
 8012b70:	b084      	sub	sp, #16
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
 8012b76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b7e:	6839      	ldr	r1, [r7, #0]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f001 f8a4 	bl	8013cce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2201      	movs	r2, #1
 8012b8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012b94:	461a      	mov	r2, r3
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012ba2:	f003 031f 	and.w	r3, r3, #31
 8012ba6:	2b02      	cmp	r3, #2
 8012ba8:	d01a      	beq.n	8012be0 <USBD_LL_SetupStage+0x72>
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d822      	bhi.n	8012bf4 <USBD_LL_SetupStage+0x86>
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d002      	beq.n	8012bb8 <USBD_LL_SetupStage+0x4a>
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d00a      	beq.n	8012bcc <USBD_LL_SetupStage+0x5e>
 8012bb6:	e01d      	b.n	8012bf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f000 fad1 	bl	8013168 <USBD_StdDevReq>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8012bca:	e020      	b.n	8012c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f000 fb39 	bl	801324c <USBD_StdItfReq>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8012bde:	e016      	b.n	8012c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 fb9b 	bl	8013324 <USBD_StdEPReq>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8012bf2:	e00c      	b.n	8012c0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012bfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	4619      	mov	r1, r3
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f005 fc6a 	bl	80184dc <USBD_LL_StallEP>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8012c0c:	bf00      	nop
  }

  return ret;
 8012c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3710      	adds	r7, #16
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b086      	sub	sp, #24
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	460b      	mov	r3, r1
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012c2a:	7afb      	ldrb	r3, [r7, #11]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d16e      	bne.n	8012d0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012c36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	f040 8098 	bne.w	8012d74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	689a      	ldr	r2, [r3, #8]
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d913      	bls.n	8012c78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	689a      	ldr	r2, [r3, #8]
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	1ad2      	subs	r2, r2, r3
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	68da      	ldr	r2, [r3, #12]
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	689b      	ldr	r3, [r3, #8]
 8012c66:	4293      	cmp	r3, r2
 8012c68:	bf28      	it	cs
 8012c6a:	4613      	movcs	r3, r2
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	6879      	ldr	r1, [r7, #4]
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	f001 f92c 	bl	8013ece <USBD_CtlContinueRx>
 8012c76:	e07d      	b.n	8012d74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012c7e:	f003 031f 	and.w	r3, r3, #31
 8012c82:	2b02      	cmp	r3, #2
 8012c84:	d014      	beq.n	8012cb0 <USBD_LL_DataOutStage+0x98>
 8012c86:	2b02      	cmp	r3, #2
 8012c88:	d81d      	bhi.n	8012cc6 <USBD_LL_DataOutStage+0xae>
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d002      	beq.n	8012c94 <USBD_LL_DataOutStage+0x7c>
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d003      	beq.n	8012c9a <USBD_LL_DataOutStage+0x82>
 8012c92:	e018      	b.n	8012cc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012c94:	2300      	movs	r3, #0
 8012c96:	75bb      	strb	r3, [r7, #22]
            break;
 8012c98:	e018      	b.n	8012ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f000 f9d2 	bl	801304e <USBD_CoreFindIF>
 8012caa:	4603      	mov	r3, r0
 8012cac:	75bb      	strb	r3, [r7, #22]
            break;
 8012cae:	e00d      	b.n	8012ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	4619      	mov	r1, r3
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f000 f9d4 	bl	8013068 <USBD_CoreFindEP>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8012cc4:	e002      	b.n	8012ccc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	75bb      	strb	r3, [r7, #22]
            break;
 8012cca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012ccc:	7dbb      	ldrb	r3, [r7, #22]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d119      	bne.n	8012d06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	2b03      	cmp	r3, #3
 8012cdc:	d113      	bne.n	8012d06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012cde:	7dba      	ldrb	r2, [r7, #22]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	32ae      	adds	r2, #174	@ 0xae
 8012ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ce8:	691b      	ldr	r3, [r3, #16]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d00b      	beq.n	8012d06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012cee:	7dba      	ldrb	r2, [r7, #22]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012cf6:	7dba      	ldrb	r2, [r7, #22]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	32ae      	adds	r2, #174	@ 0xae
 8012cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d00:	691b      	ldr	r3, [r3, #16]
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f001 f8f2 	bl	8013ef0 <USBD_CtlSendStatus>
 8012d0c:	e032      	b.n	8012d74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012d0e:	7afb      	ldrb	r3, [r7, #11]
 8012d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	4619      	mov	r1, r3
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f000 f9a5 	bl	8013068 <USBD_CoreFindEP>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012d22:	7dbb      	ldrb	r3, [r7, #22]
 8012d24:	2bff      	cmp	r3, #255	@ 0xff
 8012d26:	d025      	beq.n	8012d74 <USBD_LL_DataOutStage+0x15c>
 8012d28:	7dbb      	ldrb	r3, [r7, #22]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d122      	bne.n	8012d74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	2b03      	cmp	r3, #3
 8012d38:	d117      	bne.n	8012d6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012d3a:	7dba      	ldrb	r2, [r7, #22]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	32ae      	adds	r2, #174	@ 0xae
 8012d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d44:	699b      	ldr	r3, [r3, #24]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d00f      	beq.n	8012d6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012d4a:	7dba      	ldrb	r2, [r7, #22]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012d52:	7dba      	ldrb	r2, [r7, #22]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	32ae      	adds	r2, #174	@ 0xae
 8012d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d5c:	699b      	ldr	r3, [r3, #24]
 8012d5e:	7afa      	ldrb	r2, [r7, #11]
 8012d60:	4611      	mov	r1, r2
 8012d62:	68f8      	ldr	r0, [r7, #12]
 8012d64:	4798      	blx	r3
 8012d66:	4603      	mov	r3, r0
 8012d68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012d6a:	7dfb      	ldrb	r3, [r7, #23]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d001      	beq.n	8012d74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012d70:	7dfb      	ldrb	r3, [r7, #23]
 8012d72:	e000      	b.n	8012d76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b086      	sub	sp, #24
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	60f8      	str	r0, [r7, #12]
 8012d86:	460b      	mov	r3, r1
 8012d88:	607a      	str	r2, [r7, #4]
 8012d8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012d8c:	7afb      	ldrb	r3, [r7, #11]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d16f      	bne.n	8012e72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	3314      	adds	r3, #20
 8012d96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012d9e:	2b02      	cmp	r3, #2
 8012da0:	d15a      	bne.n	8012e58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	689a      	ldr	r2, [r3, #8]
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d914      	bls.n	8012dd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	689a      	ldr	r2, [r3, #8]
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	1ad2      	subs	r2, r2, r3
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	689b      	ldr	r3, [r3, #8]
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	6879      	ldr	r1, [r7, #4]
 8012dc4:	68f8      	ldr	r0, [r7, #12]
 8012dc6:	f001 f854 	bl	8013e72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012dca:	2300      	movs	r3, #0
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2100      	movs	r1, #0
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f005 fc2d 	bl	8018630 <USBD_LL_PrepareReceive>
 8012dd6:	e03f      	b.n	8012e58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	68da      	ldr	r2, [r3, #12]
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d11c      	bne.n	8012e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	685a      	ldr	r2, [r3, #4]
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d316      	bcc.n	8012e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	685a      	ldr	r2, [r3, #4]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d20f      	bcs.n	8012e1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012dfe:	2200      	movs	r2, #0
 8012e00:	2100      	movs	r1, #0
 8012e02:	68f8      	ldr	r0, [r7, #12]
 8012e04:	f001 f835 	bl	8013e72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e10:	2300      	movs	r3, #0
 8012e12:	2200      	movs	r2, #0
 8012e14:	2100      	movs	r1, #0
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f005 fc0a 	bl	8018630 <USBD_LL_PrepareReceive>
 8012e1c:	e01c      	b.n	8012e58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	2b03      	cmp	r3, #3
 8012e28:	d10f      	bne.n	8012e4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e30:	68db      	ldr	r3, [r3, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d009      	beq.n	8012e4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	68f8      	ldr	r0, [r7, #12]
 8012e48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012e4a:	2180      	movs	r1, #128	@ 0x80
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f005 fb45 	bl	80184dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012e52:	68f8      	ldr	r0, [r7, #12]
 8012e54:	f001 f85f 	bl	8013f16 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d03a      	beq.n	8012ed8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f7ff fe42 	bl	8012aec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012e70:	e032      	b.n	8012ed8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012e72:	7afb      	ldrb	r3, [r7, #11]
 8012e74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 f8f3 	bl	8013068 <USBD_CoreFindEP>
 8012e82:	4603      	mov	r3, r0
 8012e84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e86:	7dfb      	ldrb	r3, [r7, #23]
 8012e88:	2bff      	cmp	r3, #255	@ 0xff
 8012e8a:	d025      	beq.n	8012ed8 <USBD_LL_DataInStage+0x15a>
 8012e8c:	7dfb      	ldrb	r3, [r7, #23]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d122      	bne.n	8012ed8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	2b03      	cmp	r3, #3
 8012e9c:	d11c      	bne.n	8012ed8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012e9e:	7dfa      	ldrb	r2, [r7, #23]
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	32ae      	adds	r2, #174	@ 0xae
 8012ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea8:	695b      	ldr	r3, [r3, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d014      	beq.n	8012ed8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012eae:	7dfa      	ldrb	r2, [r7, #23]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012eb6:	7dfa      	ldrb	r2, [r7, #23]
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	32ae      	adds	r2, #174	@ 0xae
 8012ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ec0:	695b      	ldr	r3, [r3, #20]
 8012ec2:	7afa      	ldrb	r2, [r7, #11]
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	4798      	blx	r3
 8012eca:	4603      	mov	r3, r0
 8012ecc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012ece:	7dbb      	ldrb	r3, [r7, #22]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012ed4:	7dbb      	ldrb	r3, [r7, #22]
 8012ed6:	e000      	b.n	8012eda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012ed8:	2300      	movs	r3, #0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3718      	adds	r7, #24
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012ee2:	b580      	push	{r7, lr}
 8012ee4:	b084      	sub	sp, #16
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012eea:	2300      	movs	r3, #0
 8012eec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2200      	movs	r2, #0
 8012f08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d014      	beq.n	8012f48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00e      	beq.n	8012f48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	6852      	ldr	r2, [r2, #4]
 8012f36:	b2d2      	uxtb	r2, r2
 8012f38:	4611      	mov	r1, r2
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	4798      	blx	r3
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d001      	beq.n	8012f48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012f44:	2303      	movs	r3, #3
 8012f46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012f48:	2340      	movs	r3, #64	@ 0x40
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f005 fa7f 	bl	8018452 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2201      	movs	r2, #1
 8012f58:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2240      	movs	r2, #64	@ 0x40
 8012f60:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012f64:	2340      	movs	r3, #64	@ 0x40
 8012f66:	2200      	movs	r2, #0
 8012f68:	2180      	movs	r1, #128	@ 0x80
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f005 fa71 	bl	8018452 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2201      	movs	r2, #1
 8012f74:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2240      	movs	r2, #64	@ 0x40
 8012f7a:	621a      	str	r2, [r3, #32]

  return ret;
 8012f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3710      	adds	r7, #16
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}

08012f86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012f86:	b480      	push	{r7}
 8012f88:	b083      	sub	sp, #12
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
 8012f8e:	460b      	mov	r3, r1
 8012f90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	78fa      	ldrb	r2, [r7, #3]
 8012f96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	370c      	adds	r7, #12
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr

08012fa6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012fa6:	b480      	push	{r7}
 8012fa8:	b083      	sub	sp, #12
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b04      	cmp	r3, #4
 8012fb8:	d006      	beq.n	8012fc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2204      	movs	r2, #4
 8012fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	370c      	adds	r7, #12
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr

08012fde <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012fde:	b480      	push	{r7}
 8012fe0:	b083      	sub	sp, #12
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	2b04      	cmp	r3, #4
 8012ff0:	d106      	bne.n	8013000 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012ff8:	b2da      	uxtb	r2, r3
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013000:	2300      	movs	r3, #0
}
 8013002:	4618      	mov	r0, r3
 8013004:	370c      	adds	r7, #12
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr

0801300e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801300e:	b580      	push	{r7, lr}
 8013010:	b082      	sub	sp, #8
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801301c:	b2db      	uxtb	r3, r3
 801301e:	2b03      	cmp	r3, #3
 8013020:	d110      	bne.n	8013044 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00b      	beq.n	8013044 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013032:	69db      	ldr	r3, [r3, #28]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d005      	beq.n	8013044 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801303e:	69db      	ldr	r3, [r3, #28]
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013044:	2300      	movs	r3, #0
}
 8013046:	4618      	mov	r0, r3
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801304e:	b480      	push	{r7}
 8013050:	b083      	sub	sp, #12
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
 8013056:	460b      	mov	r3, r1
 8013058:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801305a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801305c:	4618      	mov	r0, r3
 801305e:	370c      	adds	r7, #12
 8013060:	46bd      	mov	sp, r7
 8013062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013066:	4770      	bx	lr

08013068 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013068:	b480      	push	{r7}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	460b      	mov	r3, r1
 8013072:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013074:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b086      	sub	sp, #24
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	460b      	mov	r3, r1
 801308c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013096:	2300      	movs	r3, #0
 8013098:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	885b      	ldrh	r3, [r3, #2]
 801309e:	b29b      	uxth	r3, r3
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	7812      	ldrb	r2, [r2, #0]
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d91f      	bls.n	80130e8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80130ae:	e013      	b.n	80130d8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80130b0:	f107 030a 	add.w	r3, r7, #10
 80130b4:	4619      	mov	r1, r3
 80130b6:	6978      	ldr	r0, [r7, #20]
 80130b8:	f000 f81b 	bl	80130f2 <USBD_GetNextDesc>
 80130bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	785b      	ldrb	r3, [r3, #1]
 80130c2:	2b05      	cmp	r3, #5
 80130c4:	d108      	bne.n	80130d8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	789b      	ldrb	r3, [r3, #2]
 80130ce:	78fa      	ldrb	r2, [r7, #3]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d008      	beq.n	80130e6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80130d4:	2300      	movs	r3, #0
 80130d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	885b      	ldrh	r3, [r3, #2]
 80130dc:	b29a      	uxth	r2, r3
 80130de:	897b      	ldrh	r3, [r7, #10]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d8e5      	bhi.n	80130b0 <USBD_GetEpDesc+0x2e>
 80130e4:	e000      	b.n	80130e8 <USBD_GetEpDesc+0x66>
          break;
 80130e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80130e8:	693b      	ldr	r3, [r7, #16]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80130f2:	b480      	push	{r7}
 80130f4:	b085      	sub	sp, #20
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
 80130fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	68fa      	ldr	r2, [r7, #12]
 8013106:	7812      	ldrb	r2, [r2, #0]
 8013108:	4413      	add	r3, r2
 801310a:	b29a      	uxth	r2, r3
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	461a      	mov	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	4413      	add	r3, r2
 801311a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801311c:	68fb      	ldr	r3, [r7, #12]
}
 801311e:	4618      	mov	r0, r3
 8013120:	3714      	adds	r7, #20
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr

0801312a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801312a:	b480      	push	{r7}
 801312c:	b087      	sub	sp, #28
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	3301      	adds	r3, #1
 8013140:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013148:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801314c:	021b      	lsls	r3, r3, #8
 801314e:	b21a      	sxth	r2, r3
 8013150:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013154:	4313      	orrs	r3, r2
 8013156:	b21b      	sxth	r3, r3
 8013158:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801315a:	89fb      	ldrh	r3, [r7, #14]
}
 801315c:	4618      	mov	r0, r3
 801315e:	371c      	adds	r7, #28
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr

08013168 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801317e:	2b40      	cmp	r3, #64	@ 0x40
 8013180:	d005      	beq.n	801318e <USBD_StdDevReq+0x26>
 8013182:	2b40      	cmp	r3, #64	@ 0x40
 8013184:	d857      	bhi.n	8013236 <USBD_StdDevReq+0xce>
 8013186:	2b00      	cmp	r3, #0
 8013188:	d00f      	beq.n	80131aa <USBD_StdDevReq+0x42>
 801318a:	2b20      	cmp	r3, #32
 801318c:	d153      	bne.n	8013236 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	32ae      	adds	r2, #174	@ 0xae
 8013198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801319c:	689b      	ldr	r3, [r3, #8]
 801319e:	6839      	ldr	r1, [r7, #0]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	4798      	blx	r3
 80131a4:	4603      	mov	r3, r0
 80131a6:	73fb      	strb	r3, [r7, #15]
      break;
 80131a8:	e04a      	b.n	8013240 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	785b      	ldrb	r3, [r3, #1]
 80131ae:	2b09      	cmp	r3, #9
 80131b0:	d83b      	bhi.n	801322a <USBD_StdDevReq+0xc2>
 80131b2:	a201      	add	r2, pc, #4	@ (adr r2, 80131b8 <USBD_StdDevReq+0x50>)
 80131b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b8:	0801320d 	.word	0x0801320d
 80131bc:	08013221 	.word	0x08013221
 80131c0:	0801322b 	.word	0x0801322b
 80131c4:	08013217 	.word	0x08013217
 80131c8:	0801322b 	.word	0x0801322b
 80131cc:	080131eb 	.word	0x080131eb
 80131d0:	080131e1 	.word	0x080131e1
 80131d4:	0801322b 	.word	0x0801322b
 80131d8:	08013203 	.word	0x08013203
 80131dc:	080131f5 	.word	0x080131f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80131e0:	6839      	ldr	r1, [r7, #0]
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 fa3c 	bl	8013660 <USBD_GetDescriptor>
          break;
 80131e8:	e024      	b.n	8013234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80131ea:	6839      	ldr	r1, [r7, #0]
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f000 fbcb 	bl	8013988 <USBD_SetAddress>
          break;
 80131f2:	e01f      	b.n	8013234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80131f4:	6839      	ldr	r1, [r7, #0]
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f000 fc0a 	bl	8013a10 <USBD_SetConfig>
 80131fc:	4603      	mov	r3, r0
 80131fe:	73fb      	strb	r3, [r7, #15]
          break;
 8013200:	e018      	b.n	8013234 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013202:	6839      	ldr	r1, [r7, #0]
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 fcad 	bl	8013b64 <USBD_GetConfig>
          break;
 801320a:	e013      	b.n	8013234 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801320c:	6839      	ldr	r1, [r7, #0]
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f000 fcde 	bl	8013bd0 <USBD_GetStatus>
          break;
 8013214:	e00e      	b.n	8013234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013216:	6839      	ldr	r1, [r7, #0]
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f000 fd0d 	bl	8013c38 <USBD_SetFeature>
          break;
 801321e:	e009      	b.n	8013234 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013220:	6839      	ldr	r1, [r7, #0]
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f000 fd31 	bl	8013c8a <USBD_ClrFeature>
          break;
 8013228:	e004      	b.n	8013234 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801322a:	6839      	ldr	r1, [r7, #0]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 fd88 	bl	8013d42 <USBD_CtlError>
          break;
 8013232:	bf00      	nop
      }
      break;
 8013234:	e004      	b.n	8013240 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013236:	6839      	ldr	r1, [r7, #0]
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f000 fd82 	bl	8013d42 <USBD_CtlError>
      break;
 801323e:	bf00      	nop
  }

  return ret;
 8013240:	7bfb      	ldrb	r3, [r7, #15]
}
 8013242:	4618      	mov	r0, r3
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop

0801324c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013256:	2300      	movs	r3, #0
 8013258:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013262:	2b40      	cmp	r3, #64	@ 0x40
 8013264:	d005      	beq.n	8013272 <USBD_StdItfReq+0x26>
 8013266:	2b40      	cmp	r3, #64	@ 0x40
 8013268:	d852      	bhi.n	8013310 <USBD_StdItfReq+0xc4>
 801326a:	2b00      	cmp	r3, #0
 801326c:	d001      	beq.n	8013272 <USBD_StdItfReq+0x26>
 801326e:	2b20      	cmp	r3, #32
 8013270:	d14e      	bne.n	8013310 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013278:	b2db      	uxtb	r3, r3
 801327a:	3b01      	subs	r3, #1
 801327c:	2b02      	cmp	r3, #2
 801327e:	d840      	bhi.n	8013302 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	889b      	ldrh	r3, [r3, #4]
 8013284:	b2db      	uxtb	r3, r3
 8013286:	2b01      	cmp	r3, #1
 8013288:	d836      	bhi.n	80132f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	889b      	ldrh	r3, [r3, #4]
 801328e:	b2db      	uxtb	r3, r3
 8013290:	4619      	mov	r1, r3
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f7ff fedb 	bl	801304e <USBD_CoreFindIF>
 8013298:	4603      	mov	r3, r0
 801329a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801329c:	7bbb      	ldrb	r3, [r7, #14]
 801329e:	2bff      	cmp	r3, #255	@ 0xff
 80132a0:	d01d      	beq.n	80132de <USBD_StdItfReq+0x92>
 80132a2:	7bbb      	ldrb	r3, [r7, #14]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d11a      	bne.n	80132de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80132a8:	7bba      	ldrb	r2, [r7, #14]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	32ae      	adds	r2, #174	@ 0xae
 80132ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d00f      	beq.n	80132d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80132b8:	7bba      	ldrb	r2, [r7, #14]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80132c0:	7bba      	ldrb	r2, [r7, #14]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	32ae      	adds	r2, #174	@ 0xae
 80132c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	6839      	ldr	r1, [r7, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	4798      	blx	r3
 80132d2:	4603      	mov	r3, r0
 80132d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80132d6:	e004      	b.n	80132e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80132d8:	2303      	movs	r3, #3
 80132da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80132dc:	e001      	b.n	80132e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80132de:	2303      	movs	r3, #3
 80132e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	88db      	ldrh	r3, [r3, #6]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d110      	bne.n	801330c <USBD_StdItfReq+0xc0>
 80132ea:	7bfb      	ldrb	r3, [r7, #15]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d10d      	bne.n	801330c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 fdfd 	bl	8013ef0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80132f6:	e009      	b.n	801330c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 fd21 	bl	8013d42 <USBD_CtlError>
          break;
 8013300:	e004      	b.n	801330c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013302:	6839      	ldr	r1, [r7, #0]
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f000 fd1c 	bl	8013d42 <USBD_CtlError>
          break;
 801330a:	e000      	b.n	801330e <USBD_StdItfReq+0xc2>
          break;
 801330c:	bf00      	nop
      }
      break;
 801330e:	e004      	b.n	801331a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013310:	6839      	ldr	r1, [r7, #0]
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 fd15 	bl	8013d42 <USBD_CtlError>
      break;
 8013318:	bf00      	nop
  }

  return ret;
 801331a:	7bfb      	ldrb	r3, [r7, #15]
}
 801331c:	4618      	mov	r0, r3
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}

08013324 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801332e:	2300      	movs	r3, #0
 8013330:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	889b      	ldrh	r3, [r3, #4]
 8013336:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013340:	2b40      	cmp	r3, #64	@ 0x40
 8013342:	d007      	beq.n	8013354 <USBD_StdEPReq+0x30>
 8013344:	2b40      	cmp	r3, #64	@ 0x40
 8013346:	f200 817f 	bhi.w	8013648 <USBD_StdEPReq+0x324>
 801334a:	2b00      	cmp	r3, #0
 801334c:	d02a      	beq.n	80133a4 <USBD_StdEPReq+0x80>
 801334e:	2b20      	cmp	r3, #32
 8013350:	f040 817a 	bne.w	8013648 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013354:	7bbb      	ldrb	r3, [r7, #14]
 8013356:	4619      	mov	r1, r3
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7ff fe85 	bl	8013068 <USBD_CoreFindEP>
 801335e:	4603      	mov	r3, r0
 8013360:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013362:	7b7b      	ldrb	r3, [r7, #13]
 8013364:	2bff      	cmp	r3, #255	@ 0xff
 8013366:	f000 8174 	beq.w	8013652 <USBD_StdEPReq+0x32e>
 801336a:	7b7b      	ldrb	r3, [r7, #13]
 801336c:	2b00      	cmp	r3, #0
 801336e:	f040 8170 	bne.w	8013652 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013372:	7b7a      	ldrb	r2, [r7, #13]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801337a:	7b7a      	ldrb	r2, [r7, #13]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	32ae      	adds	r2, #174	@ 0xae
 8013380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013384:	689b      	ldr	r3, [r3, #8]
 8013386:	2b00      	cmp	r3, #0
 8013388:	f000 8163 	beq.w	8013652 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801338c:	7b7a      	ldrb	r2, [r7, #13]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	32ae      	adds	r2, #174	@ 0xae
 8013392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013396:	689b      	ldr	r3, [r3, #8]
 8013398:	6839      	ldr	r1, [r7, #0]
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	4798      	blx	r3
 801339e:	4603      	mov	r3, r0
 80133a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80133a2:	e156      	b.n	8013652 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	785b      	ldrb	r3, [r3, #1]
 80133a8:	2b03      	cmp	r3, #3
 80133aa:	d008      	beq.n	80133be <USBD_StdEPReq+0x9a>
 80133ac:	2b03      	cmp	r3, #3
 80133ae:	f300 8145 	bgt.w	801363c <USBD_StdEPReq+0x318>
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 809b 	beq.w	80134ee <USBD_StdEPReq+0x1ca>
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	d03c      	beq.n	8013436 <USBD_StdEPReq+0x112>
 80133bc:	e13e      	b.n	801363c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	d002      	beq.n	80133d0 <USBD_StdEPReq+0xac>
 80133ca:	2b03      	cmp	r3, #3
 80133cc:	d016      	beq.n	80133fc <USBD_StdEPReq+0xd8>
 80133ce:	e02c      	b.n	801342a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133d0:	7bbb      	ldrb	r3, [r7, #14]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00d      	beq.n	80133f2 <USBD_StdEPReq+0xce>
 80133d6:	7bbb      	ldrb	r3, [r7, #14]
 80133d8:	2b80      	cmp	r3, #128	@ 0x80
 80133da:	d00a      	beq.n	80133f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80133dc:	7bbb      	ldrb	r3, [r7, #14]
 80133de:	4619      	mov	r1, r3
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f005 f87b 	bl	80184dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80133e6:	2180      	movs	r1, #128	@ 0x80
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f005 f877 	bl	80184dc <USBD_LL_StallEP>
 80133ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80133f0:	e020      	b.n	8013434 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80133f2:	6839      	ldr	r1, [r7, #0]
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 fca4 	bl	8013d42 <USBD_CtlError>
              break;
 80133fa:	e01b      	b.n	8013434 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	885b      	ldrh	r3, [r3, #2]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d10e      	bne.n	8013422 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013404:	7bbb      	ldrb	r3, [r7, #14]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d00b      	beq.n	8013422 <USBD_StdEPReq+0xfe>
 801340a:	7bbb      	ldrb	r3, [r7, #14]
 801340c:	2b80      	cmp	r3, #128	@ 0x80
 801340e:	d008      	beq.n	8013422 <USBD_StdEPReq+0xfe>
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	88db      	ldrh	r3, [r3, #6]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d104      	bne.n	8013422 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013418:	7bbb      	ldrb	r3, [r7, #14]
 801341a:	4619      	mov	r1, r3
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f005 f85d 	bl	80184dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f000 fd64 	bl	8013ef0 <USBD_CtlSendStatus>

              break;
 8013428:	e004      	b.n	8013434 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801342a:	6839      	ldr	r1, [r7, #0]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f000 fc88 	bl	8013d42 <USBD_CtlError>
              break;
 8013432:	bf00      	nop
          }
          break;
 8013434:	e107      	b.n	8013646 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801343c:	b2db      	uxtb	r3, r3
 801343e:	2b02      	cmp	r3, #2
 8013440:	d002      	beq.n	8013448 <USBD_StdEPReq+0x124>
 8013442:	2b03      	cmp	r3, #3
 8013444:	d016      	beq.n	8013474 <USBD_StdEPReq+0x150>
 8013446:	e04b      	b.n	80134e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013448:	7bbb      	ldrb	r3, [r7, #14]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00d      	beq.n	801346a <USBD_StdEPReq+0x146>
 801344e:	7bbb      	ldrb	r3, [r7, #14]
 8013450:	2b80      	cmp	r3, #128	@ 0x80
 8013452:	d00a      	beq.n	801346a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013454:	7bbb      	ldrb	r3, [r7, #14]
 8013456:	4619      	mov	r1, r3
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f005 f83f 	bl	80184dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801345e:	2180      	movs	r1, #128	@ 0x80
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f005 f83b 	bl	80184dc <USBD_LL_StallEP>
 8013466:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013468:	e040      	b.n	80134ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801346a:	6839      	ldr	r1, [r7, #0]
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 fc68 	bl	8013d42 <USBD_CtlError>
              break;
 8013472:	e03b      	b.n	80134ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	885b      	ldrh	r3, [r3, #2]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d136      	bne.n	80134ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801347c:	7bbb      	ldrb	r3, [r7, #14]
 801347e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013482:	2b00      	cmp	r3, #0
 8013484:	d004      	beq.n	8013490 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013486:	7bbb      	ldrb	r3, [r7, #14]
 8013488:	4619      	mov	r1, r3
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f005 f845 	bl	801851a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 fd2d 	bl	8013ef0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013496:	7bbb      	ldrb	r3, [r7, #14]
 8013498:	4619      	mov	r1, r3
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7ff fde4 	bl	8013068 <USBD_CoreFindEP>
 80134a0:	4603      	mov	r3, r0
 80134a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80134a4:	7b7b      	ldrb	r3, [r7, #13]
 80134a6:	2bff      	cmp	r3, #255	@ 0xff
 80134a8:	d01f      	beq.n	80134ea <USBD_StdEPReq+0x1c6>
 80134aa:	7b7b      	ldrb	r3, [r7, #13]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d11c      	bne.n	80134ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80134b0:	7b7a      	ldrb	r2, [r7, #13]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80134b8:	7b7a      	ldrb	r2, [r7, #13]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	32ae      	adds	r2, #174	@ 0xae
 80134be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d010      	beq.n	80134ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80134c8:	7b7a      	ldrb	r2, [r7, #13]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	32ae      	adds	r2, #174	@ 0xae
 80134ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134d2:	689b      	ldr	r3, [r3, #8]
 80134d4:	6839      	ldr	r1, [r7, #0]
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	4798      	blx	r3
 80134da:	4603      	mov	r3, r0
 80134dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80134de:	e004      	b.n	80134ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 fc2d 	bl	8013d42 <USBD_CtlError>
              break;
 80134e8:	e000      	b.n	80134ec <USBD_StdEPReq+0x1c8>
              break;
 80134ea:	bf00      	nop
          }
          break;
 80134ec:	e0ab      	b.n	8013646 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d002      	beq.n	8013500 <USBD_StdEPReq+0x1dc>
 80134fa:	2b03      	cmp	r3, #3
 80134fc:	d032      	beq.n	8013564 <USBD_StdEPReq+0x240>
 80134fe:	e097      	b.n	8013630 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013500:	7bbb      	ldrb	r3, [r7, #14]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d007      	beq.n	8013516 <USBD_StdEPReq+0x1f2>
 8013506:	7bbb      	ldrb	r3, [r7, #14]
 8013508:	2b80      	cmp	r3, #128	@ 0x80
 801350a:	d004      	beq.n	8013516 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801350c:	6839      	ldr	r1, [r7, #0]
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 fc17 	bl	8013d42 <USBD_CtlError>
                break;
 8013514:	e091      	b.n	801363a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801351a:	2b00      	cmp	r3, #0
 801351c:	da0b      	bge.n	8013536 <USBD_StdEPReq+0x212>
 801351e:	7bbb      	ldrb	r3, [r7, #14]
 8013520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013524:	4613      	mov	r3, r2
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	4413      	add	r3, r2
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	3310      	adds	r3, #16
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	4413      	add	r3, r2
 8013532:	3304      	adds	r3, #4
 8013534:	e00b      	b.n	801354e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013536:	7bbb      	ldrb	r3, [r7, #14]
 8013538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801353c:	4613      	mov	r3, r2
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	4413      	add	r3, r2
 8013542:	009b      	lsls	r3, r3, #2
 8013544:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	4413      	add	r3, r2
 801354c:	3304      	adds	r3, #4
 801354e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	2202      	movs	r2, #2
 801355a:	4619      	mov	r1, r3
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 fc6d 	bl	8013e3c <USBD_CtlSendData>
              break;
 8013562:	e06a      	b.n	801363a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013568:	2b00      	cmp	r3, #0
 801356a:	da11      	bge.n	8013590 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801356c:	7bbb      	ldrb	r3, [r7, #14]
 801356e:	f003 020f 	and.w	r2, r3, #15
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	4613      	mov	r3, r2
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	4413      	add	r3, r2
 801357a:	009b      	lsls	r3, r3, #2
 801357c:	440b      	add	r3, r1
 801357e:	3324      	adds	r3, #36	@ 0x24
 8013580:	881b      	ldrh	r3, [r3, #0]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d117      	bne.n	80135b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013586:	6839      	ldr	r1, [r7, #0]
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 fbda 	bl	8013d42 <USBD_CtlError>
                  break;
 801358e:	e054      	b.n	801363a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013590:	7bbb      	ldrb	r3, [r7, #14]
 8013592:	f003 020f 	and.w	r2, r3, #15
 8013596:	6879      	ldr	r1, [r7, #4]
 8013598:	4613      	mov	r3, r2
 801359a:	009b      	lsls	r3, r3, #2
 801359c:	4413      	add	r3, r2
 801359e:	009b      	lsls	r3, r3, #2
 80135a0:	440b      	add	r3, r1
 80135a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80135a6:	881b      	ldrh	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d104      	bne.n	80135b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80135ac:	6839      	ldr	r1, [r7, #0]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fbc7 	bl	8013d42 <USBD_CtlError>
                  break;
 80135b4:	e041      	b.n	801363a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	da0b      	bge.n	80135d6 <USBD_StdEPReq+0x2b2>
 80135be:	7bbb      	ldrb	r3, [r7, #14]
 80135c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80135c4:	4613      	mov	r3, r2
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	4413      	add	r3, r2
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	3310      	adds	r3, #16
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	4413      	add	r3, r2
 80135d2:	3304      	adds	r3, #4
 80135d4:	e00b      	b.n	80135ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80135d6:	7bbb      	ldrb	r3, [r7, #14]
 80135d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135dc:	4613      	mov	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	4413      	add	r3, r2
 80135ec:	3304      	adds	r3, #4
 80135ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80135f0:	7bbb      	ldrb	r3, [r7, #14]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d002      	beq.n	80135fc <USBD_StdEPReq+0x2d8>
 80135f6:	7bbb      	ldrb	r3, [r7, #14]
 80135f8:	2b80      	cmp	r3, #128	@ 0x80
 80135fa:	d103      	bne.n	8013604 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	2200      	movs	r2, #0
 8013600:	601a      	str	r2, [r3, #0]
 8013602:	e00e      	b.n	8013622 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013604:	7bbb      	ldrb	r3, [r7, #14]
 8013606:	4619      	mov	r1, r3
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f004 ffa5 	bl	8018558 <USBD_LL_IsStallEP>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d003      	beq.n	801361c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	2201      	movs	r2, #1
 8013618:	601a      	str	r2, [r3, #0]
 801361a:	e002      	b.n	8013622 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	2200      	movs	r2, #0
 8013620:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	2202      	movs	r2, #2
 8013626:	4619      	mov	r1, r3
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 fc07 	bl	8013e3c <USBD_CtlSendData>
              break;
 801362e:	e004      	b.n	801363a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f000 fb85 	bl	8013d42 <USBD_CtlError>
              break;
 8013638:	bf00      	nop
          }
          break;
 801363a:	e004      	b.n	8013646 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801363c:	6839      	ldr	r1, [r7, #0]
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f000 fb7f 	bl	8013d42 <USBD_CtlError>
          break;
 8013644:	bf00      	nop
      }
      break;
 8013646:	e005      	b.n	8013654 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013648:	6839      	ldr	r1, [r7, #0]
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 fb79 	bl	8013d42 <USBD_CtlError>
      break;
 8013650:	e000      	b.n	8013654 <USBD_StdEPReq+0x330>
      break;
 8013652:	bf00      	nop
  }

  return ret;
 8013654:	7bfb      	ldrb	r3, [r7, #15]
}
 8013656:	4618      	mov	r0, r3
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
	...

08013660 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801366a:	2300      	movs	r3, #0
 801366c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801366e:	2300      	movs	r3, #0
 8013670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013672:	2300      	movs	r3, #0
 8013674:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	885b      	ldrh	r3, [r3, #2]
 801367a:	0a1b      	lsrs	r3, r3, #8
 801367c:	b29b      	uxth	r3, r3
 801367e:	3b01      	subs	r3, #1
 8013680:	2b0e      	cmp	r3, #14
 8013682:	f200 8152 	bhi.w	801392a <USBD_GetDescriptor+0x2ca>
 8013686:	a201      	add	r2, pc, #4	@ (adr r2, 801368c <USBD_GetDescriptor+0x2c>)
 8013688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801368c:	080136fd 	.word	0x080136fd
 8013690:	08013715 	.word	0x08013715
 8013694:	08013755 	.word	0x08013755
 8013698:	0801392b 	.word	0x0801392b
 801369c:	0801392b 	.word	0x0801392b
 80136a0:	080138cb 	.word	0x080138cb
 80136a4:	080138f7 	.word	0x080138f7
 80136a8:	0801392b 	.word	0x0801392b
 80136ac:	0801392b 	.word	0x0801392b
 80136b0:	0801392b 	.word	0x0801392b
 80136b4:	0801392b 	.word	0x0801392b
 80136b8:	0801392b 	.word	0x0801392b
 80136bc:	0801392b 	.word	0x0801392b
 80136c0:	0801392b 	.word	0x0801392b
 80136c4:	080136c9 	.word	0x080136c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136ce:	69db      	ldr	r3, [r3, #28]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d00b      	beq.n	80136ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136da:	69db      	ldr	r3, [r3, #28]
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	7c12      	ldrb	r2, [r2, #16]
 80136e0:	f107 0108 	add.w	r1, r7, #8
 80136e4:	4610      	mov	r0, r2
 80136e6:	4798      	blx	r3
 80136e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80136ea:	e126      	b.n	801393a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80136ec:	6839      	ldr	r1, [r7, #0]
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f000 fb27 	bl	8013d42 <USBD_CtlError>
        err++;
 80136f4:	7afb      	ldrb	r3, [r7, #11]
 80136f6:	3301      	adds	r3, #1
 80136f8:	72fb      	strb	r3, [r7, #11]
      break;
 80136fa:	e11e      	b.n	801393a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	7c12      	ldrb	r2, [r2, #16]
 8013708:	f107 0108 	add.w	r1, r7, #8
 801370c:	4610      	mov	r0, r2
 801370e:	4798      	blx	r3
 8013710:	60f8      	str	r0, [r7, #12]
      break;
 8013712:	e112      	b.n	801393a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	7c1b      	ldrb	r3, [r3, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d10d      	bne.n	8013738 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013724:	f107 0208 	add.w	r2, r7, #8
 8013728:	4610      	mov	r0, r2
 801372a:	4798      	blx	r3
 801372c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	3301      	adds	r3, #1
 8013732:	2202      	movs	r2, #2
 8013734:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013736:	e100      	b.n	801393a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013740:	f107 0208 	add.w	r2, r7, #8
 8013744:	4610      	mov	r0, r2
 8013746:	4798      	blx	r3
 8013748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	3301      	adds	r3, #1
 801374e:	2202      	movs	r2, #2
 8013750:	701a      	strb	r2, [r3, #0]
      break;
 8013752:	e0f2      	b.n	801393a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	885b      	ldrh	r3, [r3, #2]
 8013758:	b2db      	uxtb	r3, r3
 801375a:	2b05      	cmp	r3, #5
 801375c:	f200 80ac 	bhi.w	80138b8 <USBD_GetDescriptor+0x258>
 8013760:	a201      	add	r2, pc, #4	@ (adr r2, 8013768 <USBD_GetDescriptor+0x108>)
 8013762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013766:	bf00      	nop
 8013768:	08013781 	.word	0x08013781
 801376c:	080137b5 	.word	0x080137b5
 8013770:	080137e9 	.word	0x080137e9
 8013774:	0801381d 	.word	0x0801381d
 8013778:	08013851 	.word	0x08013851
 801377c:	08013885 	.word	0x08013885
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d00b      	beq.n	80137a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	7c12      	ldrb	r2, [r2, #16]
 8013798:	f107 0108 	add.w	r1, r7, #8
 801379c:	4610      	mov	r0, r2
 801379e:	4798      	blx	r3
 80137a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137a2:	e091      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80137a4:	6839      	ldr	r1, [r7, #0]
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f000 facb 	bl	8013d42 <USBD_CtlError>
            err++;
 80137ac:	7afb      	ldrb	r3, [r7, #11]
 80137ae:	3301      	adds	r3, #1
 80137b0:	72fb      	strb	r3, [r7, #11]
          break;
 80137b2:	e089      	b.n	80138c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137ba:	689b      	ldr	r3, [r3, #8]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00b      	beq.n	80137d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137c6:	689b      	ldr	r3, [r3, #8]
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	7c12      	ldrb	r2, [r2, #16]
 80137cc:	f107 0108 	add.w	r1, r7, #8
 80137d0:	4610      	mov	r0, r2
 80137d2:	4798      	blx	r3
 80137d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137d6:	e077      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80137d8:	6839      	ldr	r1, [r7, #0]
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f000 fab1 	bl	8013d42 <USBD_CtlError>
            err++;
 80137e0:	7afb      	ldrb	r3, [r7, #11]
 80137e2:	3301      	adds	r3, #1
 80137e4:	72fb      	strb	r3, [r7, #11]
          break;
 80137e6:	e06f      	b.n	80138c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d00b      	beq.n	801380c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	7c12      	ldrb	r2, [r2, #16]
 8013800:	f107 0108 	add.w	r1, r7, #8
 8013804:	4610      	mov	r0, r2
 8013806:	4798      	blx	r3
 8013808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801380a:	e05d      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801380c:	6839      	ldr	r1, [r7, #0]
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f000 fa97 	bl	8013d42 <USBD_CtlError>
            err++;
 8013814:	7afb      	ldrb	r3, [r7, #11]
 8013816:	3301      	adds	r3, #1
 8013818:	72fb      	strb	r3, [r7, #11]
          break;
 801381a:	e055      	b.n	80138c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013822:	691b      	ldr	r3, [r3, #16]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00b      	beq.n	8013840 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801382e:	691b      	ldr	r3, [r3, #16]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	7c12      	ldrb	r2, [r2, #16]
 8013834:	f107 0108 	add.w	r1, r7, #8
 8013838:	4610      	mov	r0, r2
 801383a:	4798      	blx	r3
 801383c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801383e:	e043      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013840:	6839      	ldr	r1, [r7, #0]
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 fa7d 	bl	8013d42 <USBD_CtlError>
            err++;
 8013848:	7afb      	ldrb	r3, [r7, #11]
 801384a:	3301      	adds	r3, #1
 801384c:	72fb      	strb	r3, [r7, #11]
          break;
 801384e:	e03b      	b.n	80138c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013856:	695b      	ldr	r3, [r3, #20]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d00b      	beq.n	8013874 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013862:	695b      	ldr	r3, [r3, #20]
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	7c12      	ldrb	r2, [r2, #16]
 8013868:	f107 0108 	add.w	r1, r7, #8
 801386c:	4610      	mov	r0, r2
 801386e:	4798      	blx	r3
 8013870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013872:	e029      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013874:	6839      	ldr	r1, [r7, #0]
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 fa63 	bl	8013d42 <USBD_CtlError>
            err++;
 801387c:	7afb      	ldrb	r3, [r7, #11]
 801387e:	3301      	adds	r3, #1
 8013880:	72fb      	strb	r3, [r7, #11]
          break;
 8013882:	e021      	b.n	80138c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801388a:	699b      	ldr	r3, [r3, #24]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00b      	beq.n	80138a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013896:	699b      	ldr	r3, [r3, #24]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	7c12      	ldrb	r2, [r2, #16]
 801389c:	f107 0108 	add.w	r1, r7, #8
 80138a0:	4610      	mov	r0, r2
 80138a2:	4798      	blx	r3
 80138a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80138a6:	e00f      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80138a8:	6839      	ldr	r1, [r7, #0]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f000 fa49 	bl	8013d42 <USBD_CtlError>
            err++;
 80138b0:	7afb      	ldrb	r3, [r7, #11]
 80138b2:	3301      	adds	r3, #1
 80138b4:	72fb      	strb	r3, [r7, #11]
          break;
 80138b6:	e007      	b.n	80138c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80138b8:	6839      	ldr	r1, [r7, #0]
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 fa41 	bl	8013d42 <USBD_CtlError>
          err++;
 80138c0:	7afb      	ldrb	r3, [r7, #11]
 80138c2:	3301      	adds	r3, #1
 80138c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80138c6:	bf00      	nop
      }
      break;
 80138c8:	e037      	b.n	801393a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	7c1b      	ldrb	r3, [r3, #16]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d109      	bne.n	80138e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80138da:	f107 0208 	add.w	r2, r7, #8
 80138de:	4610      	mov	r0, r2
 80138e0:	4798      	blx	r3
 80138e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80138e4:	e029      	b.n	801393a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80138e6:	6839      	ldr	r1, [r7, #0]
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 fa2a 	bl	8013d42 <USBD_CtlError>
        err++;
 80138ee:	7afb      	ldrb	r3, [r7, #11]
 80138f0:	3301      	adds	r3, #1
 80138f2:	72fb      	strb	r3, [r7, #11]
      break;
 80138f4:	e021      	b.n	801393a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	7c1b      	ldrb	r3, [r3, #16]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d10d      	bne.n	801391a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013906:	f107 0208 	add.w	r2, r7, #8
 801390a:	4610      	mov	r0, r2
 801390c:	4798      	blx	r3
 801390e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	3301      	adds	r3, #1
 8013914:	2207      	movs	r2, #7
 8013916:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013918:	e00f      	b.n	801393a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 fa10 	bl	8013d42 <USBD_CtlError>
        err++;
 8013922:	7afb      	ldrb	r3, [r7, #11]
 8013924:	3301      	adds	r3, #1
 8013926:	72fb      	strb	r3, [r7, #11]
      break;
 8013928:	e007      	b.n	801393a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801392a:	6839      	ldr	r1, [r7, #0]
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 fa08 	bl	8013d42 <USBD_CtlError>
      err++;
 8013932:	7afb      	ldrb	r3, [r7, #11]
 8013934:	3301      	adds	r3, #1
 8013936:	72fb      	strb	r3, [r7, #11]
      break;
 8013938:	bf00      	nop
  }

  if (err != 0U)
 801393a:	7afb      	ldrb	r3, [r7, #11]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d11e      	bne.n	801397e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	88db      	ldrh	r3, [r3, #6]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d016      	beq.n	8013976 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013948:	893b      	ldrh	r3, [r7, #8]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00e      	beq.n	801396c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	88da      	ldrh	r2, [r3, #6]
 8013952:	893b      	ldrh	r3, [r7, #8]
 8013954:	4293      	cmp	r3, r2
 8013956:	bf28      	it	cs
 8013958:	4613      	movcs	r3, r2
 801395a:	b29b      	uxth	r3, r3
 801395c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801395e:	893b      	ldrh	r3, [r7, #8]
 8013960:	461a      	mov	r2, r3
 8013962:	68f9      	ldr	r1, [r7, #12]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 fa69 	bl	8013e3c <USBD_CtlSendData>
 801396a:	e009      	b.n	8013980 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801396c:	6839      	ldr	r1, [r7, #0]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 f9e7 	bl	8013d42 <USBD_CtlError>
 8013974:	e004      	b.n	8013980 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f000 faba 	bl	8013ef0 <USBD_CtlSendStatus>
 801397c:	e000      	b.n	8013980 <USBD_GetDescriptor+0x320>
    return;
 801397e:	bf00      	nop
  }
}
 8013980:	3710      	adds	r7, #16
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop

08013988 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	889b      	ldrh	r3, [r3, #4]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d131      	bne.n	80139fe <USBD_SetAddress+0x76>
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	88db      	ldrh	r3, [r3, #6]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d12d      	bne.n	80139fe <USBD_SetAddress+0x76>
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	885b      	ldrh	r3, [r3, #2]
 80139a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80139a8:	d829      	bhi.n	80139fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	885b      	ldrh	r3, [r3, #2]
 80139ae:	b2db      	uxtb	r3, r3
 80139b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	2b03      	cmp	r3, #3
 80139c0:	d104      	bne.n	80139cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 f9bc 	bl	8013d42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139ca:	e01d      	b.n	8013a08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	7bfa      	ldrb	r2, [r7, #15]
 80139d0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80139d4:	7bfb      	ldrb	r3, [r7, #15]
 80139d6:	4619      	mov	r1, r3
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f004 fde9 	bl	80185b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f000 fa86 	bl	8013ef0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80139e4:	7bfb      	ldrb	r3, [r7, #15]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d004      	beq.n	80139f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2202      	movs	r2, #2
 80139ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139f2:	e009      	b.n	8013a08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2201      	movs	r2, #1
 80139f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139fc:	e004      	b.n	8013a08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f000 f99e 	bl	8013d42 <USBD_CtlError>
  }
}
 8013a06:	bf00      	nop
 8013a08:	bf00      	nop
 8013a0a:	3710      	adds	r7, #16
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b084      	sub	sp, #16
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	885b      	ldrh	r3, [r3, #2]
 8013a22:	b2da      	uxtb	r2, r3
 8013a24:	4b4e      	ldr	r3, [pc, #312]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013a26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013a28:	4b4d      	ldr	r3, [pc, #308]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d905      	bls.n	8013a3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013a30:	6839      	ldr	r1, [r7, #0]
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f000 f985 	bl	8013d42 <USBD_CtlError>
    return USBD_FAIL;
 8013a38:	2303      	movs	r3, #3
 8013a3a:	e08c      	b.n	8013b56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	2b02      	cmp	r3, #2
 8013a46:	d002      	beq.n	8013a4e <USBD_SetConfig+0x3e>
 8013a48:	2b03      	cmp	r3, #3
 8013a4a:	d029      	beq.n	8013aa0 <USBD_SetConfig+0x90>
 8013a4c:	e075      	b.n	8013b3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013a4e:	4b44      	ldr	r3, [pc, #272]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d020      	beq.n	8013a98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013a56:	4b42      	ldr	r3, [pc, #264]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013a60:	4b3f      	ldr	r3, [pc, #252]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	4619      	mov	r1, r3
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f7ff f84b 	bl	8012b02 <USBD_SetClassConfig>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013a70:	7bfb      	ldrb	r3, [r7, #15]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d008      	beq.n	8013a88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013a76:	6839      	ldr	r1, [r7, #0]
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f962 	bl	8013d42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2202      	movs	r2, #2
 8013a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013a86:	e065      	b.n	8013b54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f000 fa31 	bl	8013ef0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2203      	movs	r2, #3
 8013a92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013a96:	e05d      	b.n	8013b54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fa29 	bl	8013ef0 <USBD_CtlSendStatus>
      break;
 8013a9e:	e059      	b.n	8013b54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d112      	bne.n	8013ace <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2202      	movs	r2, #2
 8013aac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013aba:	4b29      	ldr	r3, [pc, #164]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013abc:	781b      	ldrb	r3, [r3, #0]
 8013abe:	4619      	mov	r1, r3
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7ff f83a 	bl	8012b3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f000 fa12 	bl	8013ef0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013acc:	e042      	b.n	8013b54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013ace:	4b24      	ldr	r3, [pc, #144]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d02a      	beq.n	8013b32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ff f828 	bl	8012b3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013aea:	4b1d      	ldr	r3, [pc, #116]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	461a      	mov	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013af4:	4b1a      	ldr	r3, [pc, #104]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	4619      	mov	r1, r3
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7ff f801 	bl	8012b02 <USBD_SetClassConfig>
 8013b00:	4603      	mov	r3, r0
 8013b02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013b04:	7bfb      	ldrb	r3, [r7, #15]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00f      	beq.n	8013b2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013b0a:	6839      	ldr	r1, [r7, #0]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 f918 	bl	8013d42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	4619      	mov	r1, r3
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7ff f80d 	bl	8012b3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2202      	movs	r2, #2
 8013b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013b28:	e014      	b.n	8013b54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f000 f9e0 	bl	8013ef0 <USBD_CtlSendStatus>
      break;
 8013b30:	e010      	b.n	8013b54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f000 f9dc 	bl	8013ef0 <USBD_CtlSendStatus>
      break;
 8013b38:	e00c      	b.n	8013b54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013b3a:	6839      	ldr	r1, [r7, #0]
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f000 f900 	bl	8013d42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013b42:	4b07      	ldr	r3, [pc, #28]	@ (8013b60 <USBD_SetConfig+0x150>)
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	4619      	mov	r1, r3
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f7fe fff6 	bl	8012b3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013b4e:	2303      	movs	r3, #3
 8013b50:	73fb      	strb	r3, [r7, #15]
      break;
 8013b52:	bf00      	nop
  }

  return ret;
 8013b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3710      	adds	r7, #16
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	20000764 	.word	0x20000764

08013b64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	88db      	ldrh	r3, [r3, #6]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d004      	beq.n	8013b80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013b76:	6839      	ldr	r1, [r7, #0]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 f8e2 	bl	8013d42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013b7e:	e023      	b.n	8013bc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	2b02      	cmp	r3, #2
 8013b8a:	dc02      	bgt.n	8013b92 <USBD_GetConfig+0x2e>
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	dc03      	bgt.n	8013b98 <USBD_GetConfig+0x34>
 8013b90:	e015      	b.n	8013bbe <USBD_GetConfig+0x5a>
 8013b92:	2b03      	cmp	r3, #3
 8013b94:	d00b      	beq.n	8013bae <USBD_GetConfig+0x4a>
 8013b96:	e012      	b.n	8013bbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	3308      	adds	r3, #8
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f000 f948 	bl	8013e3c <USBD_CtlSendData>
        break;
 8013bac:	e00c      	b.n	8013bc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	3304      	adds	r3, #4
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f000 f940 	bl	8013e3c <USBD_CtlSendData>
        break;
 8013bbc:	e004      	b.n	8013bc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013bbe:	6839      	ldr	r1, [r7, #0]
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 f8be 	bl	8013d42 <USBD_CtlError>
        break;
 8013bc6:	bf00      	nop
}
 8013bc8:	bf00      	nop
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	3b01      	subs	r3, #1
 8013be4:	2b02      	cmp	r3, #2
 8013be6:	d81e      	bhi.n	8013c26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	88db      	ldrh	r3, [r3, #6]
 8013bec:	2b02      	cmp	r3, #2
 8013bee:	d004      	beq.n	8013bfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013bf0:	6839      	ldr	r1, [r7, #0]
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f8a5 	bl	8013d42 <USBD_CtlError>
        break;
 8013bf8:	e01a      	b.n	8013c30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d005      	beq.n	8013c16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	f043 0202 	orr.w	r2, r3, #2
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	330c      	adds	r3, #12
 8013c1a:	2202      	movs	r2, #2
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f000 f90c 	bl	8013e3c <USBD_CtlSendData>
      break;
 8013c24:	e004      	b.n	8013c30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013c26:	6839      	ldr	r1, [r7, #0]
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f000 f88a 	bl	8013d42 <USBD_CtlError>
      break;
 8013c2e:	bf00      	nop
  }
}
 8013c30:	bf00      	nop
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	885b      	ldrh	r3, [r3, #2]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d107      	bne.n	8013c5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f000 f94c 	bl	8013ef0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013c58:	e013      	b.n	8013c82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	885b      	ldrh	r3, [r3, #2]
 8013c5e:	2b02      	cmp	r3, #2
 8013c60:	d10b      	bne.n	8013c7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	889b      	ldrh	r3, [r3, #4]
 8013c66:	0a1b      	lsrs	r3, r3, #8
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	b2da      	uxtb	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f000 f93c 	bl	8013ef0 <USBD_CtlSendStatus>
}
 8013c78:	e003      	b.n	8013c82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 f860 	bl	8013d42 <USBD_CtlError>
}
 8013c82:	bf00      	nop
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b082      	sub	sp, #8
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	2b02      	cmp	r3, #2
 8013ca0:	d80b      	bhi.n	8013cba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	885b      	ldrh	r3, [r3, #2]
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d10c      	bne.n	8013cc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 f91c 	bl	8013ef0 <USBD_CtlSendStatus>
      }
      break;
 8013cb8:	e004      	b.n	8013cc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013cba:	6839      	ldr	r1, [r7, #0]
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f000 f840 	bl	8013d42 <USBD_CtlError>
      break;
 8013cc2:	e000      	b.n	8013cc6 <USBD_ClrFeature+0x3c>
      break;
 8013cc4:	bf00      	nop
  }
}
 8013cc6:	bf00      	nop
 8013cc8:	3708      	adds	r7, #8
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b084      	sub	sp, #16
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
 8013cd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	781a      	ldrb	r2, [r3, #0]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	781a      	ldrb	r2, [r3, #0]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013cf8:	68f8      	ldr	r0, [r7, #12]
 8013cfa:	f7ff fa16 	bl	801312a <SWAPBYTE>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	461a      	mov	r2, r3
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	3301      	adds	r3, #1
 8013d0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013d12:	68f8      	ldr	r0, [r7, #12]
 8013d14:	f7ff fa09 	bl	801312a <SWAPBYTE>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	3301      	adds	r3, #1
 8013d24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f7ff f9fc 	bl	801312a <SWAPBYTE>
 8013d32:	4603      	mov	r3, r0
 8013d34:	461a      	mov	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	80da      	strh	r2, [r3, #6]
}
 8013d3a:	bf00      	nop
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d42:	b580      	push	{r7, lr}
 8013d44:	b082      	sub	sp, #8
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
 8013d4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d4c:	2180      	movs	r1, #128	@ 0x80
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f004 fbc4 	bl	80184dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013d54:	2100      	movs	r1, #0
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f004 fbc0 	bl	80184dc <USBD_LL_StallEP>
}
 8013d5c:	bf00      	nop
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b086      	sub	sp, #24
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013d70:	2300      	movs	r3, #0
 8013d72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d042      	beq.n	8013e00 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013d7e:	6938      	ldr	r0, [r7, #16]
 8013d80:	f000 f842 	bl	8013e08 <USBD_GetLen>
 8013d84:	4603      	mov	r3, r0
 8013d86:	3301      	adds	r3, #1
 8013d88:	005b      	lsls	r3, r3, #1
 8013d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d8e:	d808      	bhi.n	8013da2 <USBD_GetString+0x3e>
 8013d90:	6938      	ldr	r0, [r7, #16]
 8013d92:	f000 f839 	bl	8013e08 <USBD_GetLen>
 8013d96:	4603      	mov	r3, r0
 8013d98:	3301      	adds	r3, #1
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	005b      	lsls	r3, r3, #1
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	e001      	b.n	8013da6 <USBD_GetString+0x42>
 8013da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013daa:	7dfb      	ldrb	r3, [r7, #23]
 8013dac:	68ba      	ldr	r2, [r7, #8]
 8013dae:	4413      	add	r3, r2
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	7812      	ldrb	r2, [r2, #0]
 8013db4:	701a      	strb	r2, [r3, #0]
  idx++;
 8013db6:	7dfb      	ldrb	r3, [r7, #23]
 8013db8:	3301      	adds	r3, #1
 8013dba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013dbc:	7dfb      	ldrb	r3, [r7, #23]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	2203      	movs	r2, #3
 8013dc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8013dc6:	7dfb      	ldrb	r3, [r7, #23]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013dcc:	e013      	b.n	8013df6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013dce:	7dfb      	ldrb	r3, [r7, #23]
 8013dd0:	68ba      	ldr	r2, [r7, #8]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	7812      	ldrb	r2, [r2, #0]
 8013dd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	3301      	adds	r3, #1
 8013dde:	613b      	str	r3, [r7, #16]
    idx++;
 8013de0:	7dfb      	ldrb	r3, [r7, #23]
 8013de2:	3301      	adds	r3, #1
 8013de4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	68ba      	ldr	r2, [r7, #8]
 8013dea:	4413      	add	r3, r2
 8013dec:	2200      	movs	r2, #0
 8013dee:	701a      	strb	r2, [r3, #0]
    idx++;
 8013df0:	7dfb      	ldrb	r3, [r7, #23]
 8013df2:	3301      	adds	r3, #1
 8013df4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d1e7      	bne.n	8013dce <USBD_GetString+0x6a>
 8013dfe:	e000      	b.n	8013e02 <USBD_GetString+0x9e>
    return;
 8013e00:	bf00      	nop
  }
}
 8013e02:	3718      	adds	r7, #24
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b085      	sub	sp, #20
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013e10:	2300      	movs	r3, #0
 8013e12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013e18:	e005      	b.n	8013e26 <USBD_GetLen+0x1e>
  {
    len++;
 8013e1a:	7bfb      	ldrb	r3, [r7, #15]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	3301      	adds	r3, #1
 8013e24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d1f5      	bne.n	8013e1a <USBD_GetLen+0x12>
  }

  return len;
 8013e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3714      	adds	r7, #20
 8013e34:	46bd      	mov	sp, r7
 8013e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3a:	4770      	bx	lr

08013e3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	60b9      	str	r1, [r7, #8]
 8013e46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2202      	movs	r2, #2
 8013e4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	2100      	movs	r1, #0
 8013e62:	68f8      	ldr	r0, [r7, #12]
 8013e64:	f004 fbc3 	bl	80185ee <USBD_LL_Transmit>

  return USBD_OK;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b084      	sub	sp, #16
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	60f8      	str	r0, [r7, #12]
 8013e7a:	60b9      	str	r1, [r7, #8]
 8013e7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	2100      	movs	r1, #0
 8013e84:	68f8      	ldr	r0, [r7, #12]
 8013e86:	f004 fbb2 	bl	80185ee <USBD_LL_Transmit>

  return USBD_OK;
 8013e8a:	2300      	movs	r3, #0
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3710      	adds	r7, #16
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	60f8      	str	r0, [r7, #12]
 8013e9c:	60b9      	str	r1, [r7, #8]
 8013e9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2203      	movs	r2, #3
 8013ea4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	68ba      	ldr	r2, [r7, #8]
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	f004 fbb6 	bl	8018630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ec4:	2300      	movs	r3, #0
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}

08013ece <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013ece:	b580      	push	{r7, lr}
 8013ed0:	b084      	sub	sp, #16
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	60f8      	str	r0, [r7, #12]
 8013ed6:	60b9      	str	r1, [r7, #8]
 8013ed8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	2100      	movs	r1, #0
 8013ee0:	68f8      	ldr	r0, [r7, #12]
 8013ee2:	f004 fba5 	bl	8018630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ee6:	2300      	movs	r3, #0
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3710      	adds	r7, #16
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2204      	movs	r2, #4
 8013efc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013f00:	2300      	movs	r3, #0
 8013f02:	2200      	movs	r2, #0
 8013f04:	2100      	movs	r1, #0
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f004 fb71 	bl	80185ee <USBD_LL_Transmit>

  return USBD_OK;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3708      	adds	r7, #8
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013f16:	b580      	push	{r7, lr}
 8013f18:	b082      	sub	sp, #8
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2205      	movs	r2, #5
 8013f22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f26:	2300      	movs	r3, #0
 8013f28:	2200      	movs	r2, #0
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f004 fb7f 	bl	8018630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013f32:	2300      	movs	r3, #0
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <__NVIC_SetPriority>:
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b083      	sub	sp, #12
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	4603      	mov	r3, r0
 8013f44:	6039      	str	r1, [r7, #0]
 8013f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	db0a      	blt.n	8013f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	b2da      	uxtb	r2, r3
 8013f54:	490c      	ldr	r1, [pc, #48]	@ (8013f88 <__NVIC_SetPriority+0x4c>)
 8013f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f5a:	0112      	lsls	r2, r2, #4
 8013f5c:	b2d2      	uxtb	r2, r2
 8013f5e:	440b      	add	r3, r1
 8013f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013f64:	e00a      	b.n	8013f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	b2da      	uxtb	r2, r3
 8013f6a:	4908      	ldr	r1, [pc, #32]	@ (8013f8c <__NVIC_SetPriority+0x50>)
 8013f6c:	79fb      	ldrb	r3, [r7, #7]
 8013f6e:	f003 030f 	and.w	r3, r3, #15
 8013f72:	3b04      	subs	r3, #4
 8013f74:	0112      	lsls	r2, r2, #4
 8013f76:	b2d2      	uxtb	r2, r2
 8013f78:	440b      	add	r3, r1
 8013f7a:	761a      	strb	r2, [r3, #24]
}
 8013f7c:	bf00      	nop
 8013f7e:	370c      	adds	r7, #12
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr
 8013f88:	e000e100 	.word	0xe000e100
 8013f8c:	e000ed00 	.word	0xe000ed00

08013f90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013f90:	b580      	push	{r7, lr}
 8013f92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013f94:	4b05      	ldr	r3, [pc, #20]	@ (8013fac <SysTick_Handler+0x1c>)
 8013f96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013f98:	f002 fb2c 	bl	80165f4 <xTaskGetSchedulerState>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d001      	beq.n	8013fa6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013fa2:	f003 fc29 	bl	80177f8 <xPortSysTickHandler>
  }
}
 8013fa6:	bf00      	nop
 8013fa8:	bd80      	pop	{r7, pc}
 8013faa:	bf00      	nop
 8013fac:	e000e010 	.word	0xe000e010

08013fb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	f06f 0004 	mvn.w	r0, #4
 8013fba:	f7ff ffbf 	bl	8013f3c <__NVIC_SetPriority>
#endif
}
 8013fbe:	bf00      	nop
 8013fc0:	bd80      	pop	{r7, pc}
	...

08013fc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013fca:	f3ef 8305 	mrs	r3, IPSR
 8013fce:	603b      	str	r3, [r7, #0]
  return(result);
 8013fd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d003      	beq.n	8013fde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013fd6:	f06f 0305 	mvn.w	r3, #5
 8013fda:	607b      	str	r3, [r7, #4]
 8013fdc:	e00c      	b.n	8013ff8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013fde:	4b0a      	ldr	r3, [pc, #40]	@ (8014008 <osKernelInitialize+0x44>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d105      	bne.n	8013ff2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013fe6:	4b08      	ldr	r3, [pc, #32]	@ (8014008 <osKernelInitialize+0x44>)
 8013fe8:	2201      	movs	r2, #1
 8013fea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013fec:	2300      	movs	r3, #0
 8013fee:	607b      	str	r3, [r7, #4]
 8013ff0:	e002      	b.n	8013ff8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ff6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013ff8:	687b      	ldr	r3, [r7, #4]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	370c      	adds	r7, #12
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop
 8014008:	20000768 	.word	0x20000768

0801400c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014012:	f3ef 8305 	mrs	r3, IPSR
 8014016:	603b      	str	r3, [r7, #0]
  return(result);
 8014018:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801401a:	2b00      	cmp	r3, #0
 801401c:	d003      	beq.n	8014026 <osKernelStart+0x1a>
    stat = osErrorISR;
 801401e:	f06f 0305 	mvn.w	r3, #5
 8014022:	607b      	str	r3, [r7, #4]
 8014024:	e010      	b.n	8014048 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014026:	4b0b      	ldr	r3, [pc, #44]	@ (8014054 <osKernelStart+0x48>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2b01      	cmp	r3, #1
 801402c:	d109      	bne.n	8014042 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801402e:	f7ff ffbf 	bl	8013fb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014032:	4b08      	ldr	r3, [pc, #32]	@ (8014054 <osKernelStart+0x48>)
 8014034:	2202      	movs	r2, #2
 8014036:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014038:	f001 fe68 	bl	8015d0c <vTaskStartScheduler>
      stat = osOK;
 801403c:	2300      	movs	r3, #0
 801403e:	607b      	str	r3, [r7, #4]
 8014040:	e002      	b.n	8014048 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014042:	f04f 33ff 	mov.w	r3, #4294967295
 8014046:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014048:	687b      	ldr	r3, [r7, #4]
}
 801404a:	4618      	mov	r0, r3
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	20000768 	.word	0x20000768

08014058 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014058:	b580      	push	{r7, lr}
 801405a:	b08e      	sub	sp, #56	@ 0x38
 801405c:	af04      	add	r7, sp, #16
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014064:	2300      	movs	r3, #0
 8014066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014068:	f3ef 8305 	mrs	r3, IPSR
 801406c:	617b      	str	r3, [r7, #20]
  return(result);
 801406e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014070:	2b00      	cmp	r3, #0
 8014072:	d17e      	bne.n	8014172 <osThreadNew+0x11a>
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d07b      	beq.n	8014172 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801407a:	2380      	movs	r3, #128	@ 0x80
 801407c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801407e:	2318      	movs	r3, #24
 8014080:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014082:	2300      	movs	r3, #0
 8014084:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8014086:	f04f 33ff 	mov.w	r3, #4294967295
 801408a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d045      	beq.n	801411e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d002      	beq.n	80140a0 <osThreadNew+0x48>
        name = attr->name;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	699b      	ldr	r3, [r3, #24]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	699b      	ldr	r3, [r3, #24]
 80140ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d008      	beq.n	80140c6 <osThreadNew+0x6e>
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	2b38      	cmp	r3, #56	@ 0x38
 80140b8:	d805      	bhi.n	80140c6 <osThreadNew+0x6e>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	f003 0301 	and.w	r3, r3, #1
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d001      	beq.n	80140ca <osThreadNew+0x72>
        return (NULL);
 80140c6:	2300      	movs	r3, #0
 80140c8:	e054      	b.n	8014174 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	695b      	ldr	r3, [r3, #20]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d003      	beq.n	80140da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	695b      	ldr	r3, [r3, #20]
 80140d6:	089b      	lsrs	r3, r3, #2
 80140d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	689b      	ldr	r3, [r3, #8]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00e      	beq.n	8014100 <osThreadNew+0xa8>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80140e8:	d90a      	bls.n	8014100 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d006      	beq.n	8014100 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	695b      	ldr	r3, [r3, #20]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d002      	beq.n	8014100 <osThreadNew+0xa8>
        mem = 1;
 80140fa:	2301      	movs	r3, #1
 80140fc:	61bb      	str	r3, [r7, #24]
 80140fe:	e010      	b.n	8014122 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d10c      	bne.n	8014122 <osThreadNew+0xca>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d108      	bne.n	8014122 <osThreadNew+0xca>
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	691b      	ldr	r3, [r3, #16]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d104      	bne.n	8014122 <osThreadNew+0xca>
          mem = 0;
 8014118:	2300      	movs	r3, #0
 801411a:	61bb      	str	r3, [r7, #24]
 801411c:	e001      	b.n	8014122 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801411e:	2300      	movs	r3, #0
 8014120:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	2b01      	cmp	r3, #1
 8014126:	d110      	bne.n	801414a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014130:	9202      	str	r2, [sp, #8]
 8014132:	9301      	str	r3, [sp, #4]
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	9300      	str	r3, [sp, #0]
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	6a3a      	ldr	r2, [r7, #32]
 801413c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801413e:	68f8      	ldr	r0, [r7, #12]
 8014140:	f001 fbb2 	bl	80158a8 <xTaskCreateStatic>
 8014144:	4603      	mov	r3, r0
 8014146:	613b      	str	r3, [r7, #16]
 8014148:	e013      	b.n	8014172 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d110      	bne.n	8014172 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014150:	6a3b      	ldr	r3, [r7, #32]
 8014152:	b29a      	uxth	r2, r3
 8014154:	f107 0310 	add.w	r3, r7, #16
 8014158:	9301      	str	r3, [sp, #4]
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f001 fc00 	bl	8015968 <xTaskCreate>
 8014168:	4603      	mov	r3, r0
 801416a:	2b01      	cmp	r3, #1
 801416c:	d001      	beq.n	8014172 <osThreadNew+0x11a>
            hTask = NULL;
 801416e:	2300      	movs	r3, #0
 8014170:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014172:	693b      	ldr	r3, [r7, #16]
}
 8014174:	4618      	mov	r0, r3
 8014176:	3728      	adds	r7, #40	@ 0x28
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 801417c:	b580      	push	{r7, lr}
 801417e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8014180:	2000      	movs	r0, #0
 8014182:	f001 fd4f 	bl	8015c24 <vTaskDelete>
#endif
  for (;;);
 8014186:	bf00      	nop
 8014188:	e7fd      	b.n	8014186 <osThreadExit+0xa>
	...

0801418c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 801418c:	b580      	push	{r7, lr}
 801418e:	b088      	sub	sp, #32
 8014190:	af02      	add	r7, sp, #8
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d002      	beq.n	80141a6 <osThreadFlagsSet+0x1a>
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	da03      	bge.n	80141ae <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80141a6:	f06f 0303 	mvn.w	r3, #3
 80141aa:	60fb      	str	r3, [r7, #12]
 80141ac:	e035      	b.n	801421a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80141ae:	f04f 33ff 	mov.w	r3, #4294967295
 80141b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80141b4:	f3ef 8305 	mrs	r3, IPSR
 80141b8:	613b      	str	r3, [r7, #16]
  return(result);
 80141ba:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d01f      	beq.n	8014200 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80141c0:	2300      	movs	r3, #0
 80141c2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80141c4:	f107 0308 	add.w	r3, r7, #8
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	2300      	movs	r3, #0
 80141cc:	2201      	movs	r2, #1
 80141ce:	6839      	ldr	r1, [r7, #0]
 80141d0:	6978      	ldr	r0, [r7, #20]
 80141d2:	f002 fcbf 	bl	8016b54 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80141d6:	f107 030c 	add.w	r3, r7, #12
 80141da:	2200      	movs	r2, #0
 80141dc:	9200      	str	r2, [sp, #0]
 80141de:	2200      	movs	r2, #0
 80141e0:	2100      	movs	r1, #0
 80141e2:	6978      	ldr	r0, [r7, #20]
 80141e4:	f002 fcb6 	bl	8016b54 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d015      	beq.n	801421a <osThreadFlagsSet+0x8e>
 80141ee:	4b0d      	ldr	r3, [pc, #52]	@ (8014224 <osThreadFlagsSet+0x98>)
 80141f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141f4:	601a      	str	r2, [r3, #0]
 80141f6:	f3bf 8f4f 	dsb	sy
 80141fa:	f3bf 8f6f 	isb	sy
 80141fe:	e00c      	b.n	801421a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8014200:	2300      	movs	r3, #0
 8014202:	2201      	movs	r2, #1
 8014204:	6839      	ldr	r1, [r7, #0]
 8014206:	6978      	ldr	r0, [r7, #20]
 8014208:	f002 fbe2 	bl	80169d0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801420c:	f107 030c 	add.w	r3, r7, #12
 8014210:	2200      	movs	r2, #0
 8014212:	2100      	movs	r1, #0
 8014214:	6978      	ldr	r0, [r7, #20]
 8014216:	f002 fbdb 	bl	80169d0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801421a:	68fb      	ldr	r3, [r7, #12]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3718      	adds	r7, #24
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	e000ed04 	.word	0xe000ed04

08014228 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8014228:	b580      	push	{r7, lr}
 801422a:	b08c      	sub	sp, #48	@ 0x30
 801422c:	af00      	add	r7, sp, #0
 801422e:	60f8      	str	r0, [r7, #12]
 8014230:	60b9      	str	r1, [r7, #8]
 8014232:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014234:	f3ef 8305 	mrs	r3, IPSR
 8014238:	617b      	str	r3, [r7, #20]
  return(result);
 801423a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801423c:	2b00      	cmp	r3, #0
 801423e:	d003      	beq.n	8014248 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8014240:	f06f 0305 	mvn.w	r3, #5
 8014244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014246:	e06b      	b.n	8014320 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2b00      	cmp	r3, #0
 801424c:	da03      	bge.n	8014256 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 801424e:	f06f 0303 	mvn.w	r3, #3
 8014252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014254:	e064      	b.n	8014320 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	f003 0302 	and.w	r3, r3, #2
 801425c:	2b00      	cmp	r3, #0
 801425e:	d002      	beq.n	8014266 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8014260:	2300      	movs	r3, #0
 8014262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014264:	e001      	b.n	801426a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 801426a:	2300      	movs	r3, #0
 801426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8014272:	f001 fe67 	bl	8015f44 <xTaskGetTickCount>
 8014276:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8014278:	f107 0210 	add.w	r2, r7, #16
 801427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801427e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014280:	2000      	movs	r0, #0
 8014282:	f002 fb45 	bl	8016910 <xTaskNotifyWait>
 8014286:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	2b01      	cmp	r3, #1
 801428c:	d137      	bne.n	80142fe <osThreadFlagsWait+0xd6>
        rflags &= flags;
 801428e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	4013      	ands	r3, r2
 8014294:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801429a:	4313      	orrs	r3, r2
 801429c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	f003 0301 	and.w	r3, r3, #1
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00c      	beq.n	80142c2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80142a8:	68fa      	ldr	r2, [r7, #12]
 80142aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ac:	4013      	ands	r3, r2
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d032      	beq.n	801431a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d10f      	bne.n	80142da <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80142ba:	f06f 0302 	mvn.w	r3, #2
 80142be:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80142c0:	e02e      	b.n	8014320 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80142c2:	68fa      	ldr	r2, [r7, #12]
 80142c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c6:	4013      	ands	r3, r2
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d128      	bne.n	801431e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d103      	bne.n	80142da <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80142d2:	f06f 0302 	mvn.w	r3, #2
 80142d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80142d8:	e022      	b.n	8014320 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80142da:	f001 fe33 	bl	8015f44 <xTaskGetTickCount>
 80142de:	4602      	mov	r2, r0
 80142e0:	6a3b      	ldr	r3, [r7, #32]
 80142e2:	1ad3      	subs	r3, r2, r3
 80142e4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80142e6:	69ba      	ldr	r2, [r7, #24]
 80142e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d902      	bls.n	80142f4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80142ee:	2300      	movs	r3, #0
 80142f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80142f2:	e00e      	b.n	8014312 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80142f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142f6:	69bb      	ldr	r3, [r7, #24]
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80142fc:	e009      	b.n	8014312 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d103      	bne.n	801430c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8014304:	f06f 0302 	mvn.w	r3, #2
 8014308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801430a:	e002      	b.n	8014312 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801430c:	f06f 0301 	mvn.w	r3, #1
 8014310:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1af      	bne.n	8014278 <osThreadFlagsWait+0x50>
 8014318:	e002      	b.n	8014320 <osThreadFlagsWait+0xf8>
            break;
 801431a:	bf00      	nop
 801431c:	e000      	b.n	8014320 <osThreadFlagsWait+0xf8>
            break;
 801431e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8014320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8014322:	4618      	mov	r0, r3
 8014324:	3730      	adds	r7, #48	@ 0x30
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}

0801432a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801432a:	b580      	push	{r7, lr}
 801432c:	b088      	sub	sp, #32
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014332:	2300      	movs	r3, #0
 8014334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014336:	f3ef 8305 	mrs	r3, IPSR
 801433a:	60bb      	str	r3, [r7, #8]
  return(result);
 801433c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801433e:	2b00      	cmp	r3, #0
 8014340:	d174      	bne.n	801442c <osMutexNew+0x102>
    if (attr != NULL) {
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d003      	beq.n	8014350 <osMutexNew+0x26>
      type = attr->attr_bits;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	61bb      	str	r3, [r7, #24]
 801434e:	e001      	b.n	8014354 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8014350:	2300      	movs	r3, #0
 8014352:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	f003 0301 	and.w	r3, r3, #1
 801435a:	2b00      	cmp	r3, #0
 801435c:	d002      	beq.n	8014364 <osMutexNew+0x3a>
      rmtx = 1U;
 801435e:	2301      	movs	r3, #1
 8014360:	617b      	str	r3, [r7, #20]
 8014362:	e001      	b.n	8014368 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8014364:	2300      	movs	r3, #0
 8014366:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	f003 0308 	and.w	r3, r3, #8
 801436e:	2b00      	cmp	r3, #0
 8014370:	d15c      	bne.n	801442c <osMutexNew+0x102>
      mem = -1;
 8014372:	f04f 33ff 	mov.w	r3, #4294967295
 8014376:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d015      	beq.n	80143aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	689b      	ldr	r3, [r3, #8]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d006      	beq.n	8014394 <osMutexNew+0x6a>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	68db      	ldr	r3, [r3, #12]
 801438a:	2b4f      	cmp	r3, #79	@ 0x4f
 801438c:	d902      	bls.n	8014394 <osMutexNew+0x6a>
          mem = 1;
 801438e:	2301      	movs	r3, #1
 8014390:	613b      	str	r3, [r7, #16]
 8014392:	e00c      	b.n	80143ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	689b      	ldr	r3, [r3, #8]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d108      	bne.n	80143ae <osMutexNew+0x84>
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d104      	bne.n	80143ae <osMutexNew+0x84>
            mem = 0;
 80143a4:	2300      	movs	r3, #0
 80143a6:	613b      	str	r3, [r7, #16]
 80143a8:	e001      	b.n	80143ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80143aa:	2300      	movs	r3, #0
 80143ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d112      	bne.n	80143da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d007      	beq.n	80143ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	4619      	mov	r1, r3
 80143c0:	2004      	movs	r0, #4
 80143c2:	f000 fc50 	bl	8014c66 <xQueueCreateMutexStatic>
 80143c6:	61f8      	str	r0, [r7, #28]
 80143c8:	e016      	b.n	80143f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	4619      	mov	r1, r3
 80143d0:	2001      	movs	r0, #1
 80143d2:	f000 fc48 	bl	8014c66 <xQueueCreateMutexStatic>
 80143d6:	61f8      	str	r0, [r7, #28]
 80143d8:	e00e      	b.n	80143f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d10b      	bne.n	80143f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d004      	beq.n	80143f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80143e6:	2004      	movs	r0, #4
 80143e8:	f000 fc25 	bl	8014c36 <xQueueCreateMutex>
 80143ec:	61f8      	str	r0, [r7, #28]
 80143ee:	e003      	b.n	80143f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80143f0:	2001      	movs	r0, #1
 80143f2:	f000 fc20 	bl	8014c36 <xQueueCreateMutex>
 80143f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d00c      	beq.n	8014418 <osMutexNew+0xee>
        if (attr != NULL) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d003      	beq.n	801440c <osMutexNew+0xe2>
          name = attr->name;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	60fb      	str	r3, [r7, #12]
 801440a:	e001      	b.n	8014410 <osMutexNew+0xe6>
        } else {
          name = NULL;
 801440c:	2300      	movs	r3, #0
 801440e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8014410:	68f9      	ldr	r1, [r7, #12]
 8014412:	69f8      	ldr	r0, [r7, #28]
 8014414:	f001 f9ea 	bl	80157ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014418:	69fb      	ldr	r3, [r7, #28]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d006      	beq.n	801442c <osMutexNew+0x102>
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d003      	beq.n	801442c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	f043 0301 	orr.w	r3, r3, #1
 801442a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801442c:	69fb      	ldr	r3, [r7, #28]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3720      	adds	r7, #32
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}

08014436 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8014436:	b580      	push	{r7, lr}
 8014438:	b086      	sub	sp, #24
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
 801443e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f023 0301 	bic.w	r3, r3, #1
 8014446:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f003 0301 	and.w	r3, r3, #1
 801444e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014450:	2300      	movs	r3, #0
 8014452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014454:	f3ef 8305 	mrs	r3, IPSR
 8014458:	60bb      	str	r3, [r7, #8]
  return(result);
 801445a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801445c:	2b00      	cmp	r3, #0
 801445e:	d003      	beq.n	8014468 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8014460:	f06f 0305 	mvn.w	r3, #5
 8014464:	617b      	str	r3, [r7, #20]
 8014466:	e02c      	b.n	80144c2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d103      	bne.n	8014476 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801446e:	f06f 0303 	mvn.w	r3, #3
 8014472:	617b      	str	r3, [r7, #20]
 8014474:	e025      	b.n	80144c2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d011      	beq.n	80144a0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801447c:	6839      	ldr	r1, [r7, #0]
 801447e:	6938      	ldr	r0, [r7, #16]
 8014480:	f000 fc41 	bl	8014d06 <xQueueTakeMutexRecursive>
 8014484:	4603      	mov	r3, r0
 8014486:	2b01      	cmp	r3, #1
 8014488:	d01b      	beq.n	80144c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d003      	beq.n	8014498 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8014490:	f06f 0301 	mvn.w	r3, #1
 8014494:	617b      	str	r3, [r7, #20]
 8014496:	e014      	b.n	80144c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014498:	f06f 0302 	mvn.w	r3, #2
 801449c:	617b      	str	r3, [r7, #20]
 801449e:	e010      	b.n	80144c2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80144a0:	6839      	ldr	r1, [r7, #0]
 80144a2:	6938      	ldr	r0, [r7, #16]
 80144a4:	f000 fee8 	bl	8015278 <xQueueSemaphoreTake>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d009      	beq.n	80144c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d003      	beq.n	80144bc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80144b4:	f06f 0301 	mvn.w	r3, #1
 80144b8:	617b      	str	r3, [r7, #20]
 80144ba:	e002      	b.n	80144c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80144bc:	f06f 0302 	mvn.w	r3, #2
 80144c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80144c2:	697b      	ldr	r3, [r7, #20]
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3718      	adds	r7, #24
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b086      	sub	sp, #24
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f023 0301 	bic.w	r3, r3, #1
 80144da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f003 0301 	and.w	r3, r3, #1
 80144e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80144e4:	2300      	movs	r3, #0
 80144e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144e8:	f3ef 8305 	mrs	r3, IPSR
 80144ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80144ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d003      	beq.n	80144fc <osMutexRelease+0x30>
    stat = osErrorISR;
 80144f4:	f06f 0305 	mvn.w	r3, #5
 80144f8:	617b      	str	r3, [r7, #20]
 80144fa:	e01f      	b.n	801453c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d103      	bne.n	801450a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8014502:	f06f 0303 	mvn.w	r3, #3
 8014506:	617b      	str	r3, [r7, #20]
 8014508:	e018      	b.n	801453c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d009      	beq.n	8014524 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014510:	6938      	ldr	r0, [r7, #16]
 8014512:	f000 fbc3 	bl	8014c9c <xQueueGiveMutexRecursive>
 8014516:	4603      	mov	r3, r0
 8014518:	2b01      	cmp	r3, #1
 801451a:	d00f      	beq.n	801453c <osMutexRelease+0x70>
        stat = osErrorResource;
 801451c:	f06f 0302 	mvn.w	r3, #2
 8014520:	617b      	str	r3, [r7, #20]
 8014522:	e00b      	b.n	801453c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8014524:	2300      	movs	r3, #0
 8014526:	2200      	movs	r2, #0
 8014528:	2100      	movs	r1, #0
 801452a:	6938      	ldr	r0, [r7, #16]
 801452c:	f000 fc22 	bl	8014d74 <xQueueGenericSend>
 8014530:	4603      	mov	r3, r0
 8014532:	2b01      	cmp	r3, #1
 8014534:	d002      	beq.n	801453c <osMutexRelease+0x70>
        stat = osErrorResource;
 8014536:	f06f 0302 	mvn.w	r3, #2
 801453a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801453c:	697b      	ldr	r3, [r7, #20]
}
 801453e:	4618      	mov	r0, r3
 8014540:	3718      	adds	r7, #24
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014546:	b580      	push	{r7, lr}
 8014548:	b08a      	sub	sp, #40	@ 0x28
 801454a:	af02      	add	r7, sp, #8
 801454c:	60f8      	str	r0, [r7, #12]
 801454e:	60b9      	str	r1, [r7, #8]
 8014550:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014552:	2300      	movs	r3, #0
 8014554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014556:	f3ef 8305 	mrs	r3, IPSR
 801455a:	613b      	str	r3, [r7, #16]
  return(result);
 801455c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801455e:	2b00      	cmp	r3, #0
 8014560:	d15f      	bne.n	8014622 <osMessageQueueNew+0xdc>
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d05c      	beq.n	8014622 <osMessageQueueNew+0xdc>
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d059      	beq.n	8014622 <osMessageQueueNew+0xdc>
    mem = -1;
 801456e:	f04f 33ff 	mov.w	r3, #4294967295
 8014572:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d029      	beq.n	80145ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	689b      	ldr	r3, [r3, #8]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d012      	beq.n	80145a8 <osMessageQueueNew+0x62>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	2b4f      	cmp	r3, #79	@ 0x4f
 8014588:	d90e      	bls.n	80145a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00a      	beq.n	80145a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	695a      	ldr	r2, [r3, #20]
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	68b9      	ldr	r1, [r7, #8]
 801459a:	fb01 f303 	mul.w	r3, r1, r3
 801459e:	429a      	cmp	r2, r3
 80145a0:	d302      	bcc.n	80145a8 <osMessageQueueNew+0x62>
        mem = 1;
 80145a2:	2301      	movs	r3, #1
 80145a4:	61bb      	str	r3, [r7, #24]
 80145a6:	e014      	b.n	80145d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	689b      	ldr	r3, [r3, #8]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d110      	bne.n	80145d2 <osMessageQueueNew+0x8c>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	68db      	ldr	r3, [r3, #12]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d10c      	bne.n	80145d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d108      	bne.n	80145d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	695b      	ldr	r3, [r3, #20]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d104      	bne.n	80145d2 <osMessageQueueNew+0x8c>
          mem = 0;
 80145c8:	2300      	movs	r3, #0
 80145ca:	61bb      	str	r3, [r7, #24]
 80145cc:	e001      	b.n	80145d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80145ce:	2300      	movs	r3, #0
 80145d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d10b      	bne.n	80145f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	691a      	ldr	r2, [r3, #16]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	689b      	ldr	r3, [r3, #8]
 80145e0:	2100      	movs	r1, #0
 80145e2:	9100      	str	r1, [sp, #0]
 80145e4:	68b9      	ldr	r1, [r7, #8]
 80145e6:	68f8      	ldr	r0, [r7, #12]
 80145e8:	f000 fa30 	bl	8014a4c <xQueueGenericCreateStatic>
 80145ec:	61f8      	str	r0, [r7, #28]
 80145ee:	e008      	b.n	8014602 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d105      	bne.n	8014602 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80145f6:	2200      	movs	r2, #0
 80145f8:	68b9      	ldr	r1, [r7, #8]
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f000 faa3 	bl	8014b46 <xQueueGenericCreate>
 8014600:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d00c      	beq.n	8014622 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d003      	beq.n	8014616 <osMessageQueueNew+0xd0>
        name = attr->name;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	617b      	str	r3, [r7, #20]
 8014614:	e001      	b.n	801461a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014616:	2300      	movs	r3, #0
 8014618:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801461a:	6979      	ldr	r1, [r7, #20]
 801461c:	69f8      	ldr	r0, [r7, #28]
 801461e:	f001 f8e5 	bl	80157ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014622:	69fb      	ldr	r3, [r7, #28]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3720      	adds	r7, #32
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801462c:	b580      	push	{r7, lr}
 801462e:	b088      	sub	sp, #32
 8014630:	af00      	add	r7, sp, #0
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	603b      	str	r3, [r7, #0]
 8014638:	4613      	mov	r3, r2
 801463a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014640:	2300      	movs	r3, #0
 8014642:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014644:	f3ef 8305 	mrs	r3, IPSR
 8014648:	617b      	str	r3, [r7, #20]
  return(result);
 801464a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801464c:	2b00      	cmp	r3, #0
 801464e:	d028      	beq.n	80146a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d005      	beq.n	8014662 <osMessageQueuePut+0x36>
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d002      	beq.n	8014662 <osMessageQueuePut+0x36>
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d003      	beq.n	801466a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014662:	f06f 0303 	mvn.w	r3, #3
 8014666:	61fb      	str	r3, [r7, #28]
 8014668:	e038      	b.n	80146dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801466a:	2300      	movs	r3, #0
 801466c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801466e:	f107 0210 	add.w	r2, r7, #16
 8014672:	2300      	movs	r3, #0
 8014674:	68b9      	ldr	r1, [r7, #8]
 8014676:	69b8      	ldr	r0, [r7, #24]
 8014678:	f000 fc7e 	bl	8014f78 <xQueueGenericSendFromISR>
 801467c:	4603      	mov	r3, r0
 801467e:	2b01      	cmp	r3, #1
 8014680:	d003      	beq.n	801468a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014682:	f06f 0302 	mvn.w	r3, #2
 8014686:	61fb      	str	r3, [r7, #28]
 8014688:	e028      	b.n	80146dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d025      	beq.n	80146dc <osMessageQueuePut+0xb0>
 8014690:	4b15      	ldr	r3, [pc, #84]	@ (80146e8 <osMessageQueuePut+0xbc>)
 8014692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014696:	601a      	str	r2, [r3, #0]
 8014698:	f3bf 8f4f 	dsb	sy
 801469c:	f3bf 8f6f 	isb	sy
 80146a0:	e01c      	b.n	80146dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d002      	beq.n	80146ae <osMessageQueuePut+0x82>
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d103      	bne.n	80146b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80146ae:	f06f 0303 	mvn.w	r3, #3
 80146b2:	61fb      	str	r3, [r7, #28]
 80146b4:	e012      	b.n	80146dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80146b6:	2300      	movs	r3, #0
 80146b8:	683a      	ldr	r2, [r7, #0]
 80146ba:	68b9      	ldr	r1, [r7, #8]
 80146bc:	69b8      	ldr	r0, [r7, #24]
 80146be:	f000 fb59 	bl	8014d74 <xQueueGenericSend>
 80146c2:	4603      	mov	r3, r0
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d009      	beq.n	80146dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d003      	beq.n	80146d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80146ce:	f06f 0301 	mvn.w	r3, #1
 80146d2:	61fb      	str	r3, [r7, #28]
 80146d4:	e002      	b.n	80146dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80146d6:	f06f 0302 	mvn.w	r3, #2
 80146da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80146dc:	69fb      	ldr	r3, [r7, #28]
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3720      	adds	r7, #32
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	e000ed04 	.word	0xe000ed04

080146ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b088      	sub	sp, #32
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80146fe:	2300      	movs	r3, #0
 8014700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014702:	f3ef 8305 	mrs	r3, IPSR
 8014706:	617b      	str	r3, [r7, #20]
  return(result);
 8014708:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801470a:	2b00      	cmp	r3, #0
 801470c:	d028      	beq.n	8014760 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d005      	beq.n	8014720 <osMessageQueueGet+0x34>
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d002      	beq.n	8014720 <osMessageQueueGet+0x34>
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d003      	beq.n	8014728 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014720:	f06f 0303 	mvn.w	r3, #3
 8014724:	61fb      	str	r3, [r7, #28]
 8014726:	e037      	b.n	8014798 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014728:	2300      	movs	r3, #0
 801472a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801472c:	f107 0310 	add.w	r3, r7, #16
 8014730:	461a      	mov	r2, r3
 8014732:	68b9      	ldr	r1, [r7, #8]
 8014734:	69b8      	ldr	r0, [r7, #24]
 8014736:	f000 feaf 	bl	8015498 <xQueueReceiveFromISR>
 801473a:	4603      	mov	r3, r0
 801473c:	2b01      	cmp	r3, #1
 801473e:	d003      	beq.n	8014748 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014740:	f06f 0302 	mvn.w	r3, #2
 8014744:	61fb      	str	r3, [r7, #28]
 8014746:	e027      	b.n	8014798 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d024      	beq.n	8014798 <osMessageQueueGet+0xac>
 801474e:	4b15      	ldr	r3, [pc, #84]	@ (80147a4 <osMessageQueueGet+0xb8>)
 8014750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	f3bf 8f4f 	dsb	sy
 801475a:	f3bf 8f6f 	isb	sy
 801475e:	e01b      	b.n	8014798 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014760:	69bb      	ldr	r3, [r7, #24]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d002      	beq.n	801476c <osMessageQueueGet+0x80>
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d103      	bne.n	8014774 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801476c:	f06f 0303 	mvn.w	r3, #3
 8014770:	61fb      	str	r3, [r7, #28]
 8014772:	e011      	b.n	8014798 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014774:	683a      	ldr	r2, [r7, #0]
 8014776:	68b9      	ldr	r1, [r7, #8]
 8014778:	69b8      	ldr	r0, [r7, #24]
 801477a:	f000 fc9b 	bl	80150b4 <xQueueReceive>
 801477e:	4603      	mov	r3, r0
 8014780:	2b01      	cmp	r3, #1
 8014782:	d009      	beq.n	8014798 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d003      	beq.n	8014792 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801478a:	f06f 0301 	mvn.w	r3, #1
 801478e:	61fb      	str	r3, [r7, #28]
 8014790:	e002      	b.n	8014798 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8014792:	f06f 0302 	mvn.w	r3, #2
 8014796:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014798:	69fb      	ldr	r3, [r7, #28]
}
 801479a:	4618      	mov	r0, r3
 801479c:	3720      	adds	r7, #32
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	e000ed04 	.word	0xe000ed04

080147a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80147a8:	b480      	push	{r7}
 80147aa:	b085      	sub	sp, #20
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	4a07      	ldr	r2, [pc, #28]	@ (80147d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80147b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	4a06      	ldr	r2, [pc, #24]	@ (80147d8 <vApplicationGetIdleTaskMemory+0x30>)
 80147be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2280      	movs	r2, #128	@ 0x80
 80147c4:	601a      	str	r2, [r3, #0]
}
 80147c6:	bf00      	nop
 80147c8:	3714      	adds	r7, #20
 80147ca:	46bd      	mov	sp, r7
 80147cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d0:	4770      	bx	lr
 80147d2:	bf00      	nop
 80147d4:	2000076c 	.word	0x2000076c
 80147d8:	20000814 	.word	0x20000814

080147dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	4a07      	ldr	r2, [pc, #28]	@ (8014808 <vApplicationGetTimerTaskMemory+0x2c>)
 80147ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	4a06      	ldr	r2, [pc, #24]	@ (801480c <vApplicationGetTimerTaskMemory+0x30>)
 80147f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80147fa:	601a      	str	r2, [r3, #0]
}
 80147fc:	bf00      	nop
 80147fe:	3714      	adds	r7, #20
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr
 8014808:	20000a14 	.word	0x20000a14
 801480c:	20000abc 	.word	0x20000abc

08014810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014810:	b480      	push	{r7}
 8014812:	b083      	sub	sp, #12
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f103 0208 	add.w	r2, r3, #8
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f04f 32ff 	mov.w	r2, #4294967295
 8014828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f103 0208 	add.w	r2, r3, #8
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f103 0208 	add.w	r2, r3, #8
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014844:	bf00      	nop
 8014846:	370c      	adds	r7, #12
 8014848:	46bd      	mov	sp, r7
 801484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484e:	4770      	bx	lr

08014850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014850:	b480      	push	{r7}
 8014852:	b083      	sub	sp, #12
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2200      	movs	r2, #0
 801485c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801485e:	bf00      	nop
 8014860:	370c      	adds	r7, #12
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr

0801486a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801486a:	b480      	push	{r7}
 801486c:	b085      	sub	sp, #20
 801486e:	af00      	add	r7, sp, #0
 8014870:	6078      	str	r0, [r7, #4]
 8014872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	689a      	ldr	r2, [r3, #8]
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	683a      	ldr	r2, [r7, #0]
 801488e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	1c5a      	adds	r2, r3, #1
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	601a      	str	r2, [r3, #0]
}
 80148a6:	bf00      	nop
 80148a8:	3714      	adds	r7, #20
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr

080148b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80148b2:	b480      	push	{r7}
 80148b4:	b085      	sub	sp, #20
 80148b6:	af00      	add	r7, sp, #0
 80148b8:	6078      	str	r0, [r7, #4]
 80148ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148c8:	d103      	bne.n	80148d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	691b      	ldr	r3, [r3, #16]
 80148ce:	60fb      	str	r3, [r7, #12]
 80148d0:	e00c      	b.n	80148ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	3308      	adds	r3, #8
 80148d6:	60fb      	str	r3, [r7, #12]
 80148d8:	e002      	b.n	80148e0 <vListInsert+0x2e>
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	60fb      	str	r3, [r7, #12]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	68ba      	ldr	r2, [r7, #8]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d2f6      	bcs.n	80148da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	685a      	ldr	r2, [r3, #4]
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	683a      	ldr	r2, [r7, #0]
 80148fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	68fa      	ldr	r2, [r7, #12]
 8014900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	683a      	ldr	r2, [r7, #0]
 8014906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	1c5a      	adds	r2, r3, #1
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	601a      	str	r2, [r3, #0]
}
 8014918:	bf00      	nop
 801491a:	3714      	adds	r7, #20
 801491c:	46bd      	mov	sp, r7
 801491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014922:	4770      	bx	lr

08014924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014924:	b480      	push	{r7}
 8014926:	b085      	sub	sp, #20
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	691b      	ldr	r3, [r3, #16]
 8014930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	6892      	ldr	r2, [r2, #8]
 801493a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	689b      	ldr	r3, [r3, #8]
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	6852      	ldr	r2, [r2, #4]
 8014944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	429a      	cmp	r2, r3
 801494e:	d103      	bne.n	8014958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	689a      	ldr	r2, [r3, #8]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2200      	movs	r2, #0
 801495c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	1e5a      	subs	r2, r3, #1
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
}
 801496c:	4618      	mov	r0, r3
 801496e:	3714      	adds	r7, #20
 8014970:	46bd      	mov	sp, r7
 8014972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014976:	4770      	bx	lr

08014978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d10b      	bne.n	80149a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014990:	f383 8811 	msr	BASEPRI, r3
 8014994:	f3bf 8f6f 	isb	sy
 8014998:	f3bf 8f4f 	dsb	sy
 801499c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801499e:	bf00      	nop
 80149a0:	bf00      	nop
 80149a2:	e7fd      	b.n	80149a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80149a4:	f002 fe98 	bl	80176d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149b0:	68f9      	ldr	r1, [r7, #12]
 80149b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80149b4:	fb01 f303 	mul.w	r3, r1, r3
 80149b8:	441a      	add	r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2200      	movs	r2, #0
 80149c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681a      	ldr	r2, [r3, #0]
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	681a      	ldr	r2, [r3, #0]
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149d4:	3b01      	subs	r3, #1
 80149d6:	68f9      	ldr	r1, [r7, #12]
 80149d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80149da:	fb01 f303 	mul.w	r3, r1, r3
 80149de:	441a      	add	r2, r3
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	22ff      	movs	r2, #255	@ 0xff
 80149e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	22ff      	movs	r2, #255	@ 0xff
 80149f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d114      	bne.n	8014a24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	691b      	ldr	r3, [r3, #16]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d01a      	beq.n	8014a38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	3310      	adds	r3, #16
 8014a06:	4618      	mov	r0, r3
 8014a08:	f001 fc1e 	bl	8016248 <xTaskRemoveFromEventList>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d012      	beq.n	8014a38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014a12:	4b0d      	ldr	r3, [pc, #52]	@ (8014a48 <xQueueGenericReset+0xd0>)
 8014a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a18:	601a      	str	r2, [r3, #0]
 8014a1a:	f3bf 8f4f 	dsb	sy
 8014a1e:	f3bf 8f6f 	isb	sy
 8014a22:	e009      	b.n	8014a38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	3310      	adds	r3, #16
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7ff fef1 	bl	8014810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	3324      	adds	r3, #36	@ 0x24
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7ff feec 	bl	8014810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014a38:	f002 fe80 	bl	801773c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014a3c:	2301      	movs	r3, #1
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3710      	adds	r7, #16
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	e000ed04 	.word	0xe000ed04

08014a4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b08e      	sub	sp, #56	@ 0x38
 8014a50:	af02      	add	r7, sp, #8
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
 8014a58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d10b      	bne.n	8014a78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8014a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a64:	f383 8811 	msr	BASEPRI, r3
 8014a68:	f3bf 8f6f 	isb	sy
 8014a6c:	f3bf 8f4f 	dsb	sy
 8014a70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014a72:	bf00      	nop
 8014a74:	bf00      	nop
 8014a76:	e7fd      	b.n	8014a74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d10b      	bne.n	8014a96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8014a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a82:	f383 8811 	msr	BASEPRI, r3
 8014a86:	f3bf 8f6f 	isb	sy
 8014a8a:	f3bf 8f4f 	dsb	sy
 8014a8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014a90:	bf00      	nop
 8014a92:	bf00      	nop
 8014a94:	e7fd      	b.n	8014a92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d002      	beq.n	8014aa2 <xQueueGenericCreateStatic+0x56>
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d001      	beq.n	8014aa6 <xQueueGenericCreateStatic+0x5a>
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	e000      	b.n	8014aa8 <xQueueGenericCreateStatic+0x5c>
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d10b      	bne.n	8014ac4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8014aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ab0:	f383 8811 	msr	BASEPRI, r3
 8014ab4:	f3bf 8f6f 	isb	sy
 8014ab8:	f3bf 8f4f 	dsb	sy
 8014abc:	623b      	str	r3, [r7, #32]
}
 8014abe:	bf00      	nop
 8014ac0:	bf00      	nop
 8014ac2:	e7fd      	b.n	8014ac0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d102      	bne.n	8014ad0 <xQueueGenericCreateStatic+0x84>
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d101      	bne.n	8014ad4 <xQueueGenericCreateStatic+0x88>
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	e000      	b.n	8014ad6 <xQueueGenericCreateStatic+0x8a>
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d10b      	bne.n	8014af2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8014ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ade:	f383 8811 	msr	BASEPRI, r3
 8014ae2:	f3bf 8f6f 	isb	sy
 8014ae6:	f3bf 8f4f 	dsb	sy
 8014aea:	61fb      	str	r3, [r7, #28]
}
 8014aec:	bf00      	nop
 8014aee:	bf00      	nop
 8014af0:	e7fd      	b.n	8014aee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014af2:	2350      	movs	r3, #80	@ 0x50
 8014af4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	2b50      	cmp	r3, #80	@ 0x50
 8014afa:	d00b      	beq.n	8014b14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8014afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b00:	f383 8811 	msr	BASEPRI, r3
 8014b04:	f3bf 8f6f 	isb	sy
 8014b08:	f3bf 8f4f 	dsb	sy
 8014b0c:	61bb      	str	r3, [r7, #24]
}
 8014b0e:	bf00      	nop
 8014b10:	bf00      	nop
 8014b12:	e7fd      	b.n	8014b10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014b14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d00d      	beq.n	8014b3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b22:	2201      	movs	r2, #1
 8014b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014b28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	4613      	mov	r3, r2
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	68b9      	ldr	r1, [r7, #8]
 8014b36:	68f8      	ldr	r0, [r7, #12]
 8014b38:	f000 f840 	bl	8014bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3730      	adds	r7, #48	@ 0x30
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}

08014b46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014b46:	b580      	push	{r7, lr}
 8014b48:	b08a      	sub	sp, #40	@ 0x28
 8014b4a:	af02      	add	r7, sp, #8
 8014b4c:	60f8      	str	r0, [r7, #12]
 8014b4e:	60b9      	str	r1, [r7, #8]
 8014b50:	4613      	mov	r3, r2
 8014b52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d10b      	bne.n	8014b72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8014b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b5e:	f383 8811 	msr	BASEPRI, r3
 8014b62:	f3bf 8f6f 	isb	sy
 8014b66:	f3bf 8f4f 	dsb	sy
 8014b6a:	613b      	str	r3, [r7, #16]
}
 8014b6c:	bf00      	nop
 8014b6e:	bf00      	nop
 8014b70:	e7fd      	b.n	8014b6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	68ba      	ldr	r2, [r7, #8]
 8014b76:	fb02 f303 	mul.w	r3, r2, r3
 8014b7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014b7c:	69fb      	ldr	r3, [r7, #28]
 8014b7e:	3350      	adds	r3, #80	@ 0x50
 8014b80:	4618      	mov	r0, r3
 8014b82:	f002 fecb 	bl	801791c <pvPortMalloc>
 8014b86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014b88:	69bb      	ldr	r3, [r7, #24]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d011      	beq.n	8014bb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	3350      	adds	r3, #80	@ 0x50
 8014b96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ba0:	79fa      	ldrb	r2, [r7, #7]
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	697a      	ldr	r2, [r7, #20]
 8014baa:	68b9      	ldr	r1, [r7, #8]
 8014bac:	68f8      	ldr	r0, [r7, #12]
 8014bae:	f000 f805 	bl	8014bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3720      	adds	r7, #32
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	607a      	str	r2, [r7, #4]
 8014bc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d103      	bne.n	8014bd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	69ba      	ldr	r2, [r7, #24]
 8014bd4:	601a      	str	r2, [r3, #0]
 8014bd6:	e002      	b.n	8014bde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	687a      	ldr	r2, [r7, #4]
 8014bdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014bde:	69bb      	ldr	r3, [r7, #24]
 8014be0:	68fa      	ldr	r2, [r7, #12]
 8014be2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014be4:	69bb      	ldr	r3, [r7, #24]
 8014be6:	68ba      	ldr	r2, [r7, #8]
 8014be8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014bea:	2101      	movs	r1, #1
 8014bec:	69b8      	ldr	r0, [r7, #24]
 8014bee:	f7ff fec3 	bl	8014978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	78fa      	ldrb	r2, [r7, #3]
 8014bf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014bfa:	bf00      	nop
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014c02:	b580      	push	{r7, lr}
 8014c04:	b082      	sub	sp, #8
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00e      	beq.n	8014c2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2200      	movs	r2, #0
 8014c14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014c22:	2300      	movs	r3, #0
 8014c24:	2200      	movs	r2, #0
 8014c26:	2100      	movs	r1, #0
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f000 f8a3 	bl	8014d74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014c2e:	bf00      	nop
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b086      	sub	sp, #24
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014c40:	2301      	movs	r3, #1
 8014c42:	617b      	str	r3, [r7, #20]
 8014c44:	2300      	movs	r3, #0
 8014c46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014c48:	79fb      	ldrb	r3, [r7, #7]
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	6939      	ldr	r1, [r7, #16]
 8014c4e:	6978      	ldr	r0, [r7, #20]
 8014c50:	f7ff ff79 	bl	8014b46 <xQueueGenericCreate>
 8014c54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014c56:	68f8      	ldr	r0, [r7, #12]
 8014c58:	f7ff ffd3 	bl	8014c02 <prvInitialiseMutex>

		return xNewQueue;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
	}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3718      	adds	r7, #24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}

08014c66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b088      	sub	sp, #32
 8014c6a:	af02      	add	r7, sp, #8
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	6039      	str	r1, [r7, #0]
 8014c70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014c72:	2301      	movs	r3, #1
 8014c74:	617b      	str	r3, [r7, #20]
 8014c76:	2300      	movs	r3, #0
 8014c78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014c7a:	79fb      	ldrb	r3, [r7, #7]
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	2200      	movs	r2, #0
 8014c82:	6939      	ldr	r1, [r7, #16]
 8014c84:	6978      	ldr	r0, [r7, #20]
 8014c86:	f7ff fee1 	bl	8014a4c <xQueueGenericCreateStatic>
 8014c8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014c8c:	68f8      	ldr	r0, [r7, #12]
 8014c8e:	f7ff ffb8 	bl	8014c02 <prvInitialiseMutex>

		return xNewQueue;
 8014c92:	68fb      	ldr	r3, [r7, #12]
	}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3718      	adds	r7, #24
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014c9c:	b590      	push	{r4, r7, lr}
 8014c9e:	b087      	sub	sp, #28
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d10b      	bne.n	8014cc6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8014cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cb2:	f383 8811 	msr	BASEPRI, r3
 8014cb6:	f3bf 8f6f 	isb	sy
 8014cba:	f3bf 8f4f 	dsb	sy
 8014cbe:	60fb      	str	r3, [r7, #12]
}
 8014cc0:	bf00      	nop
 8014cc2:	bf00      	nop
 8014cc4:	e7fd      	b.n	8014cc2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	689c      	ldr	r4, [r3, #8]
 8014cca:	f001 fc83 	bl	80165d4 <xTaskGetCurrentTaskHandle>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	429c      	cmp	r4, r3
 8014cd2:	d111      	bne.n	8014cf8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	1e5a      	subs	r2, r3, #1
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d105      	bne.n	8014cf2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	2200      	movs	r2, #0
 8014cea:	2100      	movs	r1, #0
 8014cec:	6938      	ldr	r0, [r7, #16]
 8014cee:	f000 f841 	bl	8014d74 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	617b      	str	r3, [r7, #20]
 8014cf6:	e001      	b.n	8014cfc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8014cfc:	697b      	ldr	r3, [r7, #20]
	}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	371c      	adds	r7, #28
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd90      	pop	{r4, r7, pc}

08014d06 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8014d06:	b590      	push	{r4, r7, lr}
 8014d08:	b087      	sub	sp, #28
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
 8014d0e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d10b      	bne.n	8014d32 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8014d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	60fb      	str	r3, [r7, #12]
}
 8014d2c:	bf00      	nop
 8014d2e:	bf00      	nop
 8014d30:	e7fd      	b.n	8014d2e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	689c      	ldr	r4, [r3, #8]
 8014d36:	f001 fc4d 	bl	80165d4 <xTaskGetCurrentTaskHandle>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	429c      	cmp	r4, r3
 8014d3e:	d107      	bne.n	8014d50 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	1c5a      	adds	r2, r3, #1
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	617b      	str	r3, [r7, #20]
 8014d4e:	e00c      	b.n	8014d6a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8014d50:	6839      	ldr	r1, [r7, #0]
 8014d52:	6938      	ldr	r0, [r7, #16]
 8014d54:	f000 fa90 	bl	8015278 <xQueueSemaphoreTake>
 8014d58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d004      	beq.n	8014d6a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	68db      	ldr	r3, [r3, #12]
 8014d64:	1c5a      	adds	r2, r3, #1
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014d6a:	697b      	ldr	r3, [r7, #20]
	}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	371c      	adds	r7, #28
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd90      	pop	{r4, r7, pc}

08014d74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b08e      	sub	sp, #56	@ 0x38
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
 8014d80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014d82:	2300      	movs	r3, #0
 8014d84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d10b      	bne.n	8014da8 <xQueueGenericSend+0x34>
	__asm volatile
 8014d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d94:	f383 8811 	msr	BASEPRI, r3
 8014d98:	f3bf 8f6f 	isb	sy
 8014d9c:	f3bf 8f4f 	dsb	sy
 8014da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014da2:	bf00      	nop
 8014da4:	bf00      	nop
 8014da6:	e7fd      	b.n	8014da4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d103      	bne.n	8014db6 <xQueueGenericSend+0x42>
 8014dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d101      	bne.n	8014dba <xQueueGenericSend+0x46>
 8014db6:	2301      	movs	r3, #1
 8014db8:	e000      	b.n	8014dbc <xQueueGenericSend+0x48>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d10b      	bne.n	8014dd8 <xQueueGenericSend+0x64>
	__asm volatile
 8014dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc4:	f383 8811 	msr	BASEPRI, r3
 8014dc8:	f3bf 8f6f 	isb	sy
 8014dcc:	f3bf 8f4f 	dsb	sy
 8014dd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014dd2:	bf00      	nop
 8014dd4:	bf00      	nop
 8014dd6:	e7fd      	b.n	8014dd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	2b02      	cmp	r3, #2
 8014ddc:	d103      	bne.n	8014de6 <xQueueGenericSend+0x72>
 8014dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	d101      	bne.n	8014dea <xQueueGenericSend+0x76>
 8014de6:	2301      	movs	r3, #1
 8014de8:	e000      	b.n	8014dec <xQueueGenericSend+0x78>
 8014dea:	2300      	movs	r3, #0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d10b      	bne.n	8014e08 <xQueueGenericSend+0x94>
	__asm volatile
 8014df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014df4:	f383 8811 	msr	BASEPRI, r3
 8014df8:	f3bf 8f6f 	isb	sy
 8014dfc:	f3bf 8f4f 	dsb	sy
 8014e00:	623b      	str	r3, [r7, #32]
}
 8014e02:	bf00      	nop
 8014e04:	bf00      	nop
 8014e06:	e7fd      	b.n	8014e04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014e08:	f001 fbf4 	bl	80165f4 <xTaskGetSchedulerState>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d102      	bne.n	8014e18 <xQueueGenericSend+0xa4>
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d101      	bne.n	8014e1c <xQueueGenericSend+0xa8>
 8014e18:	2301      	movs	r3, #1
 8014e1a:	e000      	b.n	8014e1e <xQueueGenericSend+0xaa>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d10b      	bne.n	8014e3a <xQueueGenericSend+0xc6>
	__asm volatile
 8014e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e26:	f383 8811 	msr	BASEPRI, r3
 8014e2a:	f3bf 8f6f 	isb	sy
 8014e2e:	f3bf 8f4f 	dsb	sy
 8014e32:	61fb      	str	r3, [r7, #28]
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop
 8014e38:	e7fd      	b.n	8014e36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014e3a:	f002 fc4d 	bl	80176d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d302      	bcc.n	8014e50 <xQueueGenericSend+0xdc>
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	2b02      	cmp	r3, #2
 8014e4e:	d129      	bne.n	8014ea4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014e50:	683a      	ldr	r2, [r7, #0]
 8014e52:	68b9      	ldr	r1, [r7, #8]
 8014e54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e56:	f000 fbb9 	bl	80155cc <prvCopyDataToQueue>
 8014e5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d010      	beq.n	8014e86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e66:	3324      	adds	r3, #36	@ 0x24
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f001 f9ed 	bl	8016248 <xTaskRemoveFromEventList>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d013      	beq.n	8014e9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014e74:	4b3f      	ldr	r3, [pc, #252]	@ (8014f74 <xQueueGenericSend+0x200>)
 8014e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e7a:	601a      	str	r2, [r3, #0]
 8014e7c:	f3bf 8f4f 	dsb	sy
 8014e80:	f3bf 8f6f 	isb	sy
 8014e84:	e00a      	b.n	8014e9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d007      	beq.n	8014e9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014e8c:	4b39      	ldr	r3, [pc, #228]	@ (8014f74 <xQueueGenericSend+0x200>)
 8014e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e92:	601a      	str	r2, [r3, #0]
 8014e94:	f3bf 8f4f 	dsb	sy
 8014e98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014e9c:	f002 fc4e 	bl	801773c <vPortExitCritical>
				return pdPASS;
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	e063      	b.n	8014f6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d103      	bne.n	8014eb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014eaa:	f002 fc47 	bl	801773c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	e05c      	b.n	8014f6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d106      	bne.n	8014ec6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014eb8:	f107 0314 	add.w	r3, r7, #20
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f001 fa27 	bl	8016310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014ec6:	f002 fc39 	bl	801773c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014eca:	f000 ff8f 	bl	8015dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ece:	f002 fc03 	bl	80176d8 <vPortEnterCritical>
 8014ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014ed8:	b25b      	sxtb	r3, r3
 8014eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ede:	d103      	bne.n	8014ee8 <xQueueGenericSend+0x174>
 8014ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014eee:	b25b      	sxtb	r3, r3
 8014ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ef4:	d103      	bne.n	8014efe <xQueueGenericSend+0x18a>
 8014ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ef8:	2200      	movs	r2, #0
 8014efa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014efe:	f002 fc1d 	bl	801773c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014f02:	1d3a      	adds	r2, r7, #4
 8014f04:	f107 0314 	add.w	r3, r7, #20
 8014f08:	4611      	mov	r1, r2
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f001 fa16 	bl	801633c <xTaskCheckForTimeOut>
 8014f10:	4603      	mov	r3, r0
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d124      	bne.n	8014f60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014f16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f18:	f000 fc50 	bl	80157bc <prvIsQueueFull>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d018      	beq.n	8014f54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f24:	3310      	adds	r3, #16
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	4611      	mov	r1, r2
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f001 f93a 	bl	80161a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014f30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f32:	f000 fbdb 	bl	80156ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014f36:	f000 ff67 	bl	8015e08 <xTaskResumeAll>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	f47f af7c 	bne.w	8014e3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014f42:	4b0c      	ldr	r3, [pc, #48]	@ (8014f74 <xQueueGenericSend+0x200>)
 8014f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f48:	601a      	str	r2, [r3, #0]
 8014f4a:	f3bf 8f4f 	dsb	sy
 8014f4e:	f3bf 8f6f 	isb	sy
 8014f52:	e772      	b.n	8014e3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f56:	f000 fbc9 	bl	80156ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f5a:	f000 ff55 	bl	8015e08 <xTaskResumeAll>
 8014f5e:	e76c      	b.n	8014e3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014f60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f62:	f000 fbc3 	bl	80156ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f66:	f000 ff4f 	bl	8015e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014f6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3738      	adds	r7, #56	@ 0x38
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	e000ed04 	.word	0xe000ed04

08014f78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b090      	sub	sp, #64	@ 0x40
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
 8014f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8014f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d10b      	bne.n	8014fa8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f94:	f383 8811 	msr	BASEPRI, r3
 8014f98:	f3bf 8f6f 	isb	sy
 8014f9c:	f3bf 8f4f 	dsb	sy
 8014fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014fa2:	bf00      	nop
 8014fa4:	bf00      	nop
 8014fa6:	e7fd      	b.n	8014fa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d103      	bne.n	8014fb6 <xQueueGenericSendFromISR+0x3e>
 8014fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d101      	bne.n	8014fba <xQueueGenericSendFromISR+0x42>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e000      	b.n	8014fbc <xQueueGenericSendFromISR+0x44>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d10b      	bne.n	8014fd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014fd2:	bf00      	nop
 8014fd4:	bf00      	nop
 8014fd6:	e7fd      	b.n	8014fd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	2b02      	cmp	r3, #2
 8014fdc:	d103      	bne.n	8014fe6 <xQueueGenericSendFromISR+0x6e>
 8014fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fe2:	2b01      	cmp	r3, #1
 8014fe4:	d101      	bne.n	8014fea <xQueueGenericSendFromISR+0x72>
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e000      	b.n	8014fec <xQueueGenericSendFromISR+0x74>
 8014fea:	2300      	movs	r3, #0
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d10b      	bne.n	8015008 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff4:	f383 8811 	msr	BASEPRI, r3
 8014ff8:	f3bf 8f6f 	isb	sy
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	623b      	str	r3, [r7, #32]
}
 8015002:	bf00      	nop
 8015004:	bf00      	nop
 8015006:	e7fd      	b.n	8015004 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015008:	f002 fc46 	bl	8017898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801500c:	f3ef 8211 	mrs	r2, BASEPRI
 8015010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	61fa      	str	r2, [r7, #28]
 8015022:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015024:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015026:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801502a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015030:	429a      	cmp	r2, r3
 8015032:	d302      	bcc.n	801503a <xQueueGenericSendFromISR+0xc2>
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	2b02      	cmp	r3, #2
 8015038:	d12f      	bne.n	801509a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801503c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015040:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015048:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801504a:	683a      	ldr	r2, [r7, #0]
 801504c:	68b9      	ldr	r1, [r7, #8]
 801504e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015050:	f000 fabc 	bl	80155cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015054:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801505c:	d112      	bne.n	8015084 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801505e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015062:	2b00      	cmp	r3, #0
 8015064:	d016      	beq.n	8015094 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015068:	3324      	adds	r3, #36	@ 0x24
 801506a:	4618      	mov	r0, r3
 801506c:	f001 f8ec 	bl	8016248 <xTaskRemoveFromEventList>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d00e      	beq.n	8015094 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d00b      	beq.n	8015094 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2201      	movs	r2, #1
 8015080:	601a      	str	r2, [r3, #0]
 8015082:	e007      	b.n	8015094 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015084:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015088:	3301      	adds	r3, #1
 801508a:	b2db      	uxtb	r3, r3
 801508c:	b25a      	sxtb	r2, r3
 801508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8015094:	2301      	movs	r3, #1
 8015096:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8015098:	e001      	b.n	801509e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801509a:	2300      	movs	r3, #0
 801509c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801509e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80150a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80150aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3740      	adds	r7, #64	@ 0x40
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b08c      	sub	sp, #48	@ 0x30
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	60f8      	str	r0, [r7, #12]
 80150bc:	60b9      	str	r1, [r7, #8]
 80150be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80150c0:	2300      	movs	r3, #0
 80150c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80150c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d10b      	bne.n	80150e6 <xQueueReceive+0x32>
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	623b      	str	r3, [r7, #32]
}
 80150e0:	bf00      	nop
 80150e2:	bf00      	nop
 80150e4:	e7fd      	b.n	80150e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d103      	bne.n	80150f4 <xQueueReceive+0x40>
 80150ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d101      	bne.n	80150f8 <xQueueReceive+0x44>
 80150f4:	2301      	movs	r3, #1
 80150f6:	e000      	b.n	80150fa <xQueueReceive+0x46>
 80150f8:	2300      	movs	r3, #0
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d10b      	bne.n	8015116 <xQueueReceive+0x62>
	__asm volatile
 80150fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	61fb      	str	r3, [r7, #28]
}
 8015110:	bf00      	nop
 8015112:	bf00      	nop
 8015114:	e7fd      	b.n	8015112 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015116:	f001 fa6d 	bl	80165f4 <xTaskGetSchedulerState>
 801511a:	4603      	mov	r3, r0
 801511c:	2b00      	cmp	r3, #0
 801511e:	d102      	bne.n	8015126 <xQueueReceive+0x72>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d101      	bne.n	801512a <xQueueReceive+0x76>
 8015126:	2301      	movs	r3, #1
 8015128:	e000      	b.n	801512c <xQueueReceive+0x78>
 801512a:	2300      	movs	r3, #0
 801512c:	2b00      	cmp	r3, #0
 801512e:	d10b      	bne.n	8015148 <xQueueReceive+0x94>
	__asm volatile
 8015130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015134:	f383 8811 	msr	BASEPRI, r3
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	f3bf 8f4f 	dsb	sy
 8015140:	61bb      	str	r3, [r7, #24]
}
 8015142:	bf00      	nop
 8015144:	bf00      	nop
 8015146:	e7fd      	b.n	8015144 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015148:	f002 fac6 	bl	80176d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801514e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015150:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015154:	2b00      	cmp	r3, #0
 8015156:	d01f      	beq.n	8015198 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015158:	68b9      	ldr	r1, [r7, #8]
 801515a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801515c:	f000 faa0 	bl	80156a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015162:	1e5a      	subs	r2, r3, #1
 8015164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015166:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801516a:	691b      	ldr	r3, [r3, #16]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00f      	beq.n	8015190 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015172:	3310      	adds	r3, #16
 8015174:	4618      	mov	r0, r3
 8015176:	f001 f867 	bl	8016248 <xTaskRemoveFromEventList>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d007      	beq.n	8015190 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015180:	4b3c      	ldr	r3, [pc, #240]	@ (8015274 <xQueueReceive+0x1c0>)
 8015182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015186:	601a      	str	r2, [r3, #0]
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015190:	f002 fad4 	bl	801773c <vPortExitCritical>
				return pdPASS;
 8015194:	2301      	movs	r3, #1
 8015196:	e069      	b.n	801526c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d103      	bne.n	80151a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801519e:	f002 facd 	bl	801773c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e062      	b.n	801526c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80151a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d106      	bne.n	80151ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80151ac:	f107 0310 	add.w	r3, r7, #16
 80151b0:	4618      	mov	r0, r3
 80151b2:	f001 f8ad 	bl	8016310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80151b6:	2301      	movs	r3, #1
 80151b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80151ba:	f002 fabf 	bl	801773c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80151be:	f000 fe15 	bl	8015dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80151c2:	f002 fa89 	bl	80176d8 <vPortEnterCritical>
 80151c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80151cc:	b25b      	sxtb	r3, r3
 80151ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d2:	d103      	bne.n	80151dc <xQueueReceive+0x128>
 80151d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151d6:	2200      	movs	r2, #0
 80151d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80151dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80151e2:	b25b      	sxtb	r3, r3
 80151e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151e8:	d103      	bne.n	80151f2 <xQueueReceive+0x13e>
 80151ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151ec:	2200      	movs	r2, #0
 80151ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80151f2:	f002 faa3 	bl	801773c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80151f6:	1d3a      	adds	r2, r7, #4
 80151f8:	f107 0310 	add.w	r3, r7, #16
 80151fc:	4611      	mov	r1, r2
 80151fe:	4618      	mov	r0, r3
 8015200:	f001 f89c 	bl	801633c <xTaskCheckForTimeOut>
 8015204:	4603      	mov	r3, r0
 8015206:	2b00      	cmp	r3, #0
 8015208:	d123      	bne.n	8015252 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801520a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801520c:	f000 fac0 	bl	8015790 <prvIsQueueEmpty>
 8015210:	4603      	mov	r3, r0
 8015212:	2b00      	cmp	r3, #0
 8015214:	d017      	beq.n	8015246 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015218:	3324      	adds	r3, #36	@ 0x24
 801521a:	687a      	ldr	r2, [r7, #4]
 801521c:	4611      	mov	r1, r2
 801521e:	4618      	mov	r0, r3
 8015220:	f000 ffc0 	bl	80161a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015226:	f000 fa61 	bl	80156ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801522a:	f000 fded 	bl	8015e08 <xTaskResumeAll>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d189      	bne.n	8015148 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8015234:	4b0f      	ldr	r3, [pc, #60]	@ (8015274 <xQueueReceive+0x1c0>)
 8015236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801523a:	601a      	str	r2, [r3, #0]
 801523c:	f3bf 8f4f 	dsb	sy
 8015240:	f3bf 8f6f 	isb	sy
 8015244:	e780      	b.n	8015148 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015248:	f000 fa50 	bl	80156ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801524c:	f000 fddc 	bl	8015e08 <xTaskResumeAll>
 8015250:	e77a      	b.n	8015148 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015254:	f000 fa4a 	bl	80156ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015258:	f000 fdd6 	bl	8015e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801525c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801525e:	f000 fa97 	bl	8015790 <prvIsQueueEmpty>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	f43f af6f 	beq.w	8015148 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801526a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801526c:	4618      	mov	r0, r3
 801526e:	3730      	adds	r7, #48	@ 0x30
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	e000ed04 	.word	0xe000ed04

08015278 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b08e      	sub	sp, #56	@ 0x38
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015282:	2300      	movs	r3, #0
 8015284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801528a:	2300      	movs	r3, #0
 801528c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015290:	2b00      	cmp	r3, #0
 8015292:	d10b      	bne.n	80152ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8015294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015298:	f383 8811 	msr	BASEPRI, r3
 801529c:	f3bf 8f6f 	isb	sy
 80152a0:	f3bf 8f4f 	dsb	sy
 80152a4:	623b      	str	r3, [r7, #32]
}
 80152a6:	bf00      	nop
 80152a8:	bf00      	nop
 80152aa:	e7fd      	b.n	80152a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80152ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d00b      	beq.n	80152cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80152b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152b8:	f383 8811 	msr	BASEPRI, r3
 80152bc:	f3bf 8f6f 	isb	sy
 80152c0:	f3bf 8f4f 	dsb	sy
 80152c4:	61fb      	str	r3, [r7, #28]
}
 80152c6:	bf00      	nop
 80152c8:	bf00      	nop
 80152ca:	e7fd      	b.n	80152c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152cc:	f001 f992 	bl	80165f4 <xTaskGetSchedulerState>
 80152d0:	4603      	mov	r3, r0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d102      	bne.n	80152dc <xQueueSemaphoreTake+0x64>
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d101      	bne.n	80152e0 <xQueueSemaphoreTake+0x68>
 80152dc:	2301      	movs	r3, #1
 80152de:	e000      	b.n	80152e2 <xQueueSemaphoreTake+0x6a>
 80152e0:	2300      	movs	r3, #0
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d10b      	bne.n	80152fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 80152e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ea:	f383 8811 	msr	BASEPRI, r3
 80152ee:	f3bf 8f6f 	isb	sy
 80152f2:	f3bf 8f4f 	dsb	sy
 80152f6:	61bb      	str	r3, [r7, #24]
}
 80152f8:	bf00      	nop
 80152fa:	bf00      	nop
 80152fc:	e7fd      	b.n	80152fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80152fe:	f002 f9eb 	bl	80176d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015306:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801530a:	2b00      	cmp	r3, #0
 801530c:	d024      	beq.n	8015358 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015310:	1e5a      	subs	r2, r3, #1
 8015312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015314:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d104      	bne.n	8015328 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801531e:	f001 fae3 	bl	80168e8 <pvTaskIncrementMutexHeldCount>
 8015322:	4602      	mov	r2, r0
 8015324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015326:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532a:	691b      	ldr	r3, [r3, #16]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d00f      	beq.n	8015350 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015332:	3310      	adds	r3, #16
 8015334:	4618      	mov	r0, r3
 8015336:	f000 ff87 	bl	8016248 <xTaskRemoveFromEventList>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d007      	beq.n	8015350 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015340:	4b54      	ldr	r3, [pc, #336]	@ (8015494 <xQueueSemaphoreTake+0x21c>)
 8015342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015346:	601a      	str	r2, [r3, #0]
 8015348:	f3bf 8f4f 	dsb	sy
 801534c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015350:	f002 f9f4 	bl	801773c <vPortExitCritical>
				return pdPASS;
 8015354:	2301      	movs	r3, #1
 8015356:	e098      	b.n	801548a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d112      	bne.n	8015384 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015360:	2b00      	cmp	r3, #0
 8015362:	d00b      	beq.n	801537c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8015364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015368:	f383 8811 	msr	BASEPRI, r3
 801536c:	f3bf 8f6f 	isb	sy
 8015370:	f3bf 8f4f 	dsb	sy
 8015374:	617b      	str	r3, [r7, #20]
}
 8015376:	bf00      	nop
 8015378:	bf00      	nop
 801537a:	e7fd      	b.n	8015378 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801537c:	f002 f9de 	bl	801773c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015380:	2300      	movs	r3, #0
 8015382:	e082      	b.n	801548a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801538a:	f107 030c 	add.w	r3, r7, #12
 801538e:	4618      	mov	r0, r3
 8015390:	f000 ffbe 	bl	8016310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015394:	2301      	movs	r3, #1
 8015396:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015398:	f002 f9d0 	bl	801773c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801539c:	f000 fd26 	bl	8015dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80153a0:	f002 f99a 	bl	80176d8 <vPortEnterCritical>
 80153a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80153aa:	b25b      	sxtb	r3, r3
 80153ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153b0:	d103      	bne.n	80153ba <xQueueSemaphoreTake+0x142>
 80153b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b4:	2200      	movs	r2, #0
 80153b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80153ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80153c0:	b25b      	sxtb	r3, r3
 80153c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153c6:	d103      	bne.n	80153d0 <xQueueSemaphoreTake+0x158>
 80153c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ca:	2200      	movs	r2, #0
 80153cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80153d0:	f002 f9b4 	bl	801773c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80153d4:	463a      	mov	r2, r7
 80153d6:	f107 030c 	add.w	r3, r7, #12
 80153da:	4611      	mov	r1, r2
 80153dc:	4618      	mov	r0, r3
 80153de:	f000 ffad 	bl	801633c <xTaskCheckForTimeOut>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d132      	bne.n	801544e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80153e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153ea:	f000 f9d1 	bl	8015790 <prvIsQueueEmpty>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d026      	beq.n	8015442 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80153f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d109      	bne.n	8015410 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80153fc:	f002 f96c 	bl	80176d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015402:	689b      	ldr	r3, [r3, #8]
 8015404:	4618      	mov	r0, r3
 8015406:	f001 f913 	bl	8016630 <xTaskPriorityInherit>
 801540a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801540c:	f002 f996 	bl	801773c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015412:	3324      	adds	r3, #36	@ 0x24
 8015414:	683a      	ldr	r2, [r7, #0]
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f000 fec3 	bl	80161a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801541e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015420:	f000 f964 	bl	80156ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015424:	f000 fcf0 	bl	8015e08 <xTaskResumeAll>
 8015428:	4603      	mov	r3, r0
 801542a:	2b00      	cmp	r3, #0
 801542c:	f47f af67 	bne.w	80152fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8015430:	4b18      	ldr	r3, [pc, #96]	@ (8015494 <xQueueSemaphoreTake+0x21c>)
 8015432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015436:	601a      	str	r2, [r3, #0]
 8015438:	f3bf 8f4f 	dsb	sy
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	e75d      	b.n	80152fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015444:	f000 f952 	bl	80156ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015448:	f000 fcde 	bl	8015e08 <xTaskResumeAll>
 801544c:	e757      	b.n	80152fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801544e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015450:	f000 f94c 	bl	80156ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015454:	f000 fcd8 	bl	8015e08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801545a:	f000 f999 	bl	8015790 <prvIsQueueEmpty>
 801545e:	4603      	mov	r3, r0
 8015460:	2b00      	cmp	r3, #0
 8015462:	f43f af4c 	beq.w	80152fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00d      	beq.n	8015488 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801546c:	f002 f934 	bl	80176d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015472:	f000 f893 	bl	801559c <prvGetDisinheritPriorityAfterTimeout>
 8015476:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547a:	689b      	ldr	r3, [r3, #8]
 801547c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801547e:	4618      	mov	r0, r3
 8015480:	f001 f9ae 	bl	80167e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015484:	f002 f95a 	bl	801773c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801548a:	4618      	mov	r0, r3
 801548c:	3738      	adds	r7, #56	@ 0x38
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	e000ed04 	.word	0xe000ed04

08015498 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b08e      	sub	sp, #56	@ 0x38
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80154a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10b      	bne.n	80154c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80154ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154b2:	f383 8811 	msr	BASEPRI, r3
 80154b6:	f3bf 8f6f 	isb	sy
 80154ba:	f3bf 8f4f 	dsb	sy
 80154be:	623b      	str	r3, [r7, #32]
}
 80154c0:	bf00      	nop
 80154c2:	bf00      	nop
 80154c4:	e7fd      	b.n	80154c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d103      	bne.n	80154d4 <xQueueReceiveFromISR+0x3c>
 80154cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d101      	bne.n	80154d8 <xQueueReceiveFromISR+0x40>
 80154d4:	2301      	movs	r3, #1
 80154d6:	e000      	b.n	80154da <xQueueReceiveFromISR+0x42>
 80154d8:	2300      	movs	r3, #0
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d10b      	bne.n	80154f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80154de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e2:	f383 8811 	msr	BASEPRI, r3
 80154e6:	f3bf 8f6f 	isb	sy
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	61fb      	str	r3, [r7, #28]
}
 80154f0:	bf00      	nop
 80154f2:	bf00      	nop
 80154f4:	e7fd      	b.n	80154f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80154f6:	f002 f9cf 	bl	8017898 <vPortValidateInterruptPriority>
	__asm volatile
 80154fa:	f3ef 8211 	mrs	r2, BASEPRI
 80154fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015502:	f383 8811 	msr	BASEPRI, r3
 8015506:	f3bf 8f6f 	isb	sy
 801550a:	f3bf 8f4f 	dsb	sy
 801550e:	61ba      	str	r2, [r7, #24]
 8015510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801551a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551e:	2b00      	cmp	r3, #0
 8015520:	d02f      	beq.n	8015582 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801552c:	68b9      	ldr	r1, [r7, #8]
 801552e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015530:	f000 f8b6 	bl	80156a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015536:	1e5a      	subs	r2, r3, #1
 8015538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801553a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801553c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015544:	d112      	bne.n	801556c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015548:	691b      	ldr	r3, [r3, #16]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d016      	beq.n	801557c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015550:	3310      	adds	r3, #16
 8015552:	4618      	mov	r0, r3
 8015554:	f000 fe78 	bl	8016248 <xTaskRemoveFromEventList>
 8015558:	4603      	mov	r3, r0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d00e      	beq.n	801557c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d00b      	beq.n	801557c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2201      	movs	r2, #1
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	e007      	b.n	801557c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801556c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015570:	3301      	adds	r3, #1
 8015572:	b2db      	uxtb	r3, r3
 8015574:	b25a      	sxtb	r2, r3
 8015576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801557c:	2301      	movs	r3, #1
 801557e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015580:	e001      	b.n	8015586 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8015582:	2300      	movs	r3, #0
 8015584:	637b      	str	r3, [r7, #52]	@ 0x34
 8015586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015588:	613b      	str	r3, [r7, #16]
	__asm volatile
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	f383 8811 	msr	BASEPRI, r3
}
 8015590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015594:	4618      	mov	r0, r3
 8015596:	3738      	adds	r7, #56	@ 0x38
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801559c:	b480      	push	{r7}
 801559e:	b085      	sub	sp, #20
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d006      	beq.n	80155ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80155b6:	60fb      	str	r3, [r7, #12]
 80155b8:	e001      	b.n	80155be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80155ba:	2300      	movs	r3, #0
 80155bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80155be:	68fb      	ldr	r3, [r7, #12]
	}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3714      	adds	r7, #20
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr

080155cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b086      	sub	sp, #24
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80155d8:	2300      	movs	r3, #0
 80155da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d10d      	bne.n	8015606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d14d      	bne.n	801568e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	689b      	ldr	r3, [r3, #8]
 80155f6:	4618      	mov	r0, r3
 80155f8:	f001 f882 	bl	8016700 <xTaskPriorityDisinherit>
 80155fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2200      	movs	r2, #0
 8015602:	609a      	str	r2, [r3, #8]
 8015604:	e043      	b.n	801568e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d119      	bne.n	8015640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	6858      	ldr	r0, [r3, #4]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015614:	461a      	mov	r2, r3
 8015616:	68b9      	ldr	r1, [r7, #8]
 8015618:	f004 f81d 	bl	8019656 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	685a      	ldr	r2, [r3, #4]
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015624:	441a      	add	r2, r3
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	685a      	ldr	r2, [r3, #4]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	689b      	ldr	r3, [r3, #8]
 8015632:	429a      	cmp	r2, r3
 8015634:	d32b      	bcc.n	801568e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681a      	ldr	r2, [r3, #0]
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	605a      	str	r2, [r3, #4]
 801563e:	e026      	b.n	801568e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	68d8      	ldr	r0, [r3, #12]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015648:	461a      	mov	r2, r3
 801564a:	68b9      	ldr	r1, [r7, #8]
 801564c:	f004 f803 	bl	8019656 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	68da      	ldr	r2, [r3, #12]
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015658:	425b      	negs	r3, r3
 801565a:	441a      	add	r2, r3
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	68da      	ldr	r2, [r3, #12]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	429a      	cmp	r2, r3
 801566a:	d207      	bcs.n	801567c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	689a      	ldr	r2, [r3, #8]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015674:	425b      	negs	r3, r3
 8015676:	441a      	add	r2, r3
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2b02      	cmp	r3, #2
 8015680:	d105      	bne.n	801568e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015682:	693b      	ldr	r3, [r7, #16]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d002      	beq.n	801568e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	3b01      	subs	r3, #1
 801568c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	1c5a      	adds	r2, r3, #1
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015696:	697b      	ldr	r3, [r7, #20]
}
 8015698:	4618      	mov	r0, r3
 801569a:	3718      	adds	r7, #24
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d018      	beq.n	80156e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	68da      	ldr	r2, [r3, #12]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156ba:	441a      	add	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	68da      	ldr	r2, [r3, #12]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	689b      	ldr	r3, [r3, #8]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d303      	bcc.n	80156d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681a      	ldr	r2, [r3, #0]
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	68d9      	ldr	r1, [r3, #12]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156dc:	461a      	mov	r2, r3
 80156de:	6838      	ldr	r0, [r7, #0]
 80156e0:	f003 ffb9 	bl	8019656 <memcpy>
	}
}
 80156e4:	bf00      	nop
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80156f4:	f001 fff0 	bl	80176d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80156fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015700:	e011      	b.n	8015726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015706:	2b00      	cmp	r3, #0
 8015708:	d012      	beq.n	8015730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	3324      	adds	r3, #36	@ 0x24
 801570e:	4618      	mov	r0, r3
 8015710:	f000 fd9a 	bl	8016248 <xTaskRemoveFromEventList>
 8015714:	4603      	mov	r3, r0
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801571a:	f000 fe73 	bl	8016404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801571e:	7bfb      	ldrb	r3, [r7, #15]
 8015720:	3b01      	subs	r3, #1
 8015722:	b2db      	uxtb	r3, r3
 8015724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801572a:	2b00      	cmp	r3, #0
 801572c:	dce9      	bgt.n	8015702 <prvUnlockQueue+0x16>
 801572e:	e000      	b.n	8015732 <prvUnlockQueue+0x46>
					break;
 8015730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	22ff      	movs	r2, #255	@ 0xff
 8015736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801573a:	f001 ffff 	bl	801773c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801573e:	f001 ffcb 	bl	80176d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801574a:	e011      	b.n	8015770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	691b      	ldr	r3, [r3, #16]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d012      	beq.n	801577a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	3310      	adds	r3, #16
 8015758:	4618      	mov	r0, r3
 801575a:	f000 fd75 	bl	8016248 <xTaskRemoveFromEventList>
 801575e:	4603      	mov	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d001      	beq.n	8015768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015764:	f000 fe4e 	bl	8016404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015768:	7bbb      	ldrb	r3, [r7, #14]
 801576a:	3b01      	subs	r3, #1
 801576c:	b2db      	uxtb	r3, r3
 801576e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015774:	2b00      	cmp	r3, #0
 8015776:	dce9      	bgt.n	801574c <prvUnlockQueue+0x60>
 8015778:	e000      	b.n	801577c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801577a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	22ff      	movs	r2, #255	@ 0xff
 8015780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015784:	f001 ffda 	bl	801773c <vPortExitCritical>
}
 8015788:	bf00      	nop
 801578a:	3710      	adds	r7, #16
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015798:	f001 ff9e 	bl	80176d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d102      	bne.n	80157aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80157a4:	2301      	movs	r3, #1
 80157a6:	60fb      	str	r3, [r7, #12]
 80157a8:	e001      	b.n	80157ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80157aa:	2300      	movs	r3, #0
 80157ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157ae:	f001 ffc5 	bl	801773c <vPortExitCritical>

	return xReturn;
 80157b2:	68fb      	ldr	r3, [r7, #12]
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3710      	adds	r7, #16
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b084      	sub	sp, #16
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80157c4:	f001 ff88 	bl	80176d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d102      	bne.n	80157da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80157d4:	2301      	movs	r3, #1
 80157d6:	60fb      	str	r3, [r7, #12]
 80157d8:	e001      	b.n	80157de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80157da:	2300      	movs	r3, #0
 80157dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157de:	f001 ffad 	bl	801773c <vPortExitCritical>

	return xReturn;
 80157e2:	68fb      	ldr	r3, [r7, #12]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3710      	adds	r7, #16
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80157ec:	b480      	push	{r7}
 80157ee:	b085      	sub	sp, #20
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80157f6:	2300      	movs	r3, #0
 80157f8:	60fb      	str	r3, [r7, #12]
 80157fa:	e014      	b.n	8015826 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80157fc:	4a0f      	ldr	r2, [pc, #60]	@ (801583c <vQueueAddToRegistry+0x50>)
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d10b      	bne.n	8015820 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015808:	490c      	ldr	r1, [pc, #48]	@ (801583c <vQueueAddToRegistry+0x50>)
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	683a      	ldr	r2, [r7, #0]
 801580e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015812:	4a0a      	ldr	r2, [pc, #40]	@ (801583c <vQueueAddToRegistry+0x50>)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	00db      	lsls	r3, r3, #3
 8015818:	4413      	add	r3, r2
 801581a:	687a      	ldr	r2, [r7, #4]
 801581c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801581e:	e006      	b.n	801582e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	3301      	adds	r3, #1
 8015824:	60fb      	str	r3, [r7, #12]
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2b07      	cmp	r3, #7
 801582a:	d9e7      	bls.n	80157fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801582c:	bf00      	nop
 801582e:	bf00      	nop
 8015830:	3714      	adds	r7, #20
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr
 801583a:	bf00      	nop
 801583c:	20000ebc 	.word	0x20000ebc

08015840 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015840:	b580      	push	{r7, lr}
 8015842:	b086      	sub	sp, #24
 8015844:	af00      	add	r7, sp, #0
 8015846:	60f8      	str	r0, [r7, #12]
 8015848:	60b9      	str	r1, [r7, #8]
 801584a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015850:	f001 ff42 	bl	80176d8 <vPortEnterCritical>
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801585a:	b25b      	sxtb	r3, r3
 801585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015860:	d103      	bne.n	801586a <vQueueWaitForMessageRestricted+0x2a>
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	2200      	movs	r2, #0
 8015866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015870:	b25b      	sxtb	r3, r3
 8015872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015876:	d103      	bne.n	8015880 <vQueueWaitForMessageRestricted+0x40>
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	2200      	movs	r2, #0
 801587c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015880:	f001 ff5c 	bl	801773c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015888:	2b00      	cmp	r3, #0
 801588a:	d106      	bne.n	801589a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	3324      	adds	r3, #36	@ 0x24
 8015890:	687a      	ldr	r2, [r7, #4]
 8015892:	68b9      	ldr	r1, [r7, #8]
 8015894:	4618      	mov	r0, r3
 8015896:	f000 fcab 	bl	80161f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801589a:	6978      	ldr	r0, [r7, #20]
 801589c:	f7ff ff26 	bl	80156ec <prvUnlockQueue>
	}
 80158a0:	bf00      	nop
 80158a2:	3718      	adds	r7, #24
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b08e      	sub	sp, #56	@ 0x38
 80158ac:	af04      	add	r7, sp, #16
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
 80158b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80158b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d10b      	bne.n	80158d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80158bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158c0:	f383 8811 	msr	BASEPRI, r3
 80158c4:	f3bf 8f6f 	isb	sy
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	623b      	str	r3, [r7, #32]
}
 80158ce:	bf00      	nop
 80158d0:	bf00      	nop
 80158d2:	e7fd      	b.n	80158d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80158d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d10b      	bne.n	80158f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80158da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158de:	f383 8811 	msr	BASEPRI, r3
 80158e2:	f3bf 8f6f 	isb	sy
 80158e6:	f3bf 8f4f 	dsb	sy
 80158ea:	61fb      	str	r3, [r7, #28]
}
 80158ec:	bf00      	nop
 80158ee:	bf00      	nop
 80158f0:	e7fd      	b.n	80158ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80158f2:	23a8      	movs	r3, #168	@ 0xa8
 80158f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80158fa:	d00b      	beq.n	8015914 <xTaskCreateStatic+0x6c>
	__asm volatile
 80158fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015900:	f383 8811 	msr	BASEPRI, r3
 8015904:	f3bf 8f6f 	isb	sy
 8015908:	f3bf 8f4f 	dsb	sy
 801590c:	61bb      	str	r3, [r7, #24]
}
 801590e:	bf00      	nop
 8015910:	bf00      	nop
 8015912:	e7fd      	b.n	8015910 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015914:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015918:	2b00      	cmp	r3, #0
 801591a:	d01e      	beq.n	801595a <xTaskCreateStatic+0xb2>
 801591c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801591e:	2b00      	cmp	r3, #0
 8015920:	d01b      	beq.n	801595a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015924:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015928:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801592a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801592e:	2202      	movs	r2, #2
 8015930:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015934:	2300      	movs	r3, #0
 8015936:	9303      	str	r3, [sp, #12]
 8015938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801593a:	9302      	str	r3, [sp, #8]
 801593c:	f107 0314 	add.w	r3, r7, #20
 8015940:	9301      	str	r3, [sp, #4]
 8015942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	68b9      	ldr	r1, [r7, #8]
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f000 f851 	bl	80159f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015952:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015954:	f000 f8f6 	bl	8015b44 <prvAddNewTaskToReadyList>
 8015958:	e001      	b.n	801595e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801595a:	2300      	movs	r3, #0
 801595c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801595e:	697b      	ldr	r3, [r7, #20]
	}
 8015960:	4618      	mov	r0, r3
 8015962:	3728      	adds	r7, #40	@ 0x28
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}

08015968 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015968:	b580      	push	{r7, lr}
 801596a:	b08c      	sub	sp, #48	@ 0x30
 801596c:	af04      	add	r7, sp, #16
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	603b      	str	r3, [r7, #0]
 8015974:	4613      	mov	r3, r2
 8015976:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015978:	88fb      	ldrh	r3, [r7, #6]
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	4618      	mov	r0, r3
 801597e:	f001 ffcd 	bl	801791c <pvPortMalloc>
 8015982:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d00e      	beq.n	80159a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801598a:	20a8      	movs	r0, #168	@ 0xa8
 801598c:	f001 ffc6 	bl	801791c <pvPortMalloc>
 8015990:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015992:	69fb      	ldr	r3, [r7, #28]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d003      	beq.n	80159a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	697a      	ldr	r2, [r7, #20]
 801599c:	631a      	str	r2, [r3, #48]	@ 0x30
 801599e:	e005      	b.n	80159ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80159a0:	6978      	ldr	r0, [r7, #20]
 80159a2:	f002 f889 	bl	8017ab8 <vPortFree>
 80159a6:	e001      	b.n	80159ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80159a8:	2300      	movs	r3, #0
 80159aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d017      	beq.n	80159e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	2200      	movs	r2, #0
 80159b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80159ba:	88fa      	ldrh	r2, [r7, #6]
 80159bc:	2300      	movs	r3, #0
 80159be:	9303      	str	r3, [sp, #12]
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	9302      	str	r3, [sp, #8]
 80159c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ca:	9300      	str	r3, [sp, #0]
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	68b9      	ldr	r1, [r7, #8]
 80159d0:	68f8      	ldr	r0, [r7, #12]
 80159d2:	f000 f80f 	bl	80159f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80159d6:	69f8      	ldr	r0, [r7, #28]
 80159d8:	f000 f8b4 	bl	8015b44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80159dc:	2301      	movs	r3, #1
 80159de:	61bb      	str	r3, [r7, #24]
 80159e0:	e002      	b.n	80159e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80159e2:	f04f 33ff 	mov.w	r3, #4294967295
 80159e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80159e8:	69bb      	ldr	r3, [r7, #24]
	}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3720      	adds	r7, #32
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
	...

080159f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b088      	sub	sp, #32
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	60f8      	str	r0, [r7, #12]
 80159fc:	60b9      	str	r1, [r7, #8]
 80159fe:	607a      	str	r2, [r7, #4]
 8015a00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a04:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	21a5      	movs	r1, #165	@ 0xa5
 8015a0e:	f003 fd45 	bl	801949c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8015a1c:	3b01      	subs	r3, #1
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	4413      	add	r3, r2
 8015a22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	f023 0307 	bic.w	r3, r3, #7
 8015a2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015a2c:	69bb      	ldr	r3, [r7, #24]
 8015a2e:	f003 0307 	and.w	r3, r3, #7
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d00b      	beq.n	8015a4e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a3a:	f383 8811 	msr	BASEPRI, r3
 8015a3e:	f3bf 8f6f 	isb	sy
 8015a42:	f3bf 8f4f 	dsb	sy
 8015a46:	617b      	str	r3, [r7, #20]
}
 8015a48:	bf00      	nop
 8015a4a:	bf00      	nop
 8015a4c:	e7fd      	b.n	8015a4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d01f      	beq.n	8015a94 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015a54:	2300      	movs	r3, #0
 8015a56:	61fb      	str	r3, [r7, #28]
 8015a58:	e012      	b.n	8015a80 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015a5a:	68ba      	ldr	r2, [r7, #8]
 8015a5c:	69fb      	ldr	r3, [r7, #28]
 8015a5e:	4413      	add	r3, r2
 8015a60:	7819      	ldrb	r1, [r3, #0]
 8015a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	4413      	add	r3, r2
 8015a68:	3334      	adds	r3, #52	@ 0x34
 8015a6a:	460a      	mov	r2, r1
 8015a6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015a6e:	68ba      	ldr	r2, [r7, #8]
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	4413      	add	r3, r2
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d006      	beq.n	8015a88 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015a7a:	69fb      	ldr	r3, [r7, #28]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	61fb      	str	r3, [r7, #28]
 8015a80:	69fb      	ldr	r3, [r7, #28]
 8015a82:	2b0f      	cmp	r3, #15
 8015a84:	d9e9      	bls.n	8015a5a <prvInitialiseNewTask+0x66>
 8015a86:	e000      	b.n	8015a8a <prvInitialiseNewTask+0x96>
			{
				break;
 8015a88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015a92:	e003      	b.n	8015a9c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a96:	2200      	movs	r2, #0
 8015a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a9e:	2b37      	cmp	r3, #55	@ 0x37
 8015aa0:	d901      	bls.n	8015aa6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015aa2:	2337      	movs	r3, #55	@ 0x37
 8015aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aba:	3304      	adds	r3, #4
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7fe fec7 	bl	8014850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac4:	3318      	adds	r3, #24
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7fe fec2 	bl	8014850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ad0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ad4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ada:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ae0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aec:	2200      	movs	r2, #0
 8015aee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015af4:	3354      	adds	r3, #84	@ 0x54
 8015af6:	224c      	movs	r2, #76	@ 0x4c
 8015af8:	2100      	movs	r1, #0
 8015afa:	4618      	mov	r0, r3
 8015afc:	f003 fcce 	bl	801949c <memset>
 8015b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b02:	4a0d      	ldr	r2, [pc, #52]	@ (8015b38 <prvInitialiseNewTask+0x144>)
 8015b04:	659a      	str	r2, [r3, #88]	@ 0x58
 8015b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b08:	4a0c      	ldr	r2, [pc, #48]	@ (8015b3c <prvInitialiseNewTask+0x148>)
 8015b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8015b40 <prvInitialiseNewTask+0x14c>)
 8015b10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	68f9      	ldr	r1, [r7, #12]
 8015b16:	69b8      	ldr	r0, [r7, #24]
 8015b18:	f001 fcb0 	bl	801747c <pxPortInitialiseStack>
 8015b1c:	4602      	mov	r2, r0
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b2e:	bf00      	nop
 8015b30:	3720      	adds	r7, #32
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	2000af28 	.word	0x2000af28
 8015b3c:	2000af90 	.word	0x2000af90
 8015b40:	2000aff8 	.word	0x2000aff8

08015b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015b4c:	f001 fdc4 	bl	80176d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015b50:	4b2d      	ldr	r3, [pc, #180]	@ (8015c08 <prvAddNewTaskToReadyList+0xc4>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	3301      	adds	r3, #1
 8015b56:	4a2c      	ldr	r2, [pc, #176]	@ (8015c08 <prvAddNewTaskToReadyList+0xc4>)
 8015b58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8015c0c <prvAddNewTaskToReadyList+0xc8>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d109      	bne.n	8015b76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015b62:	4a2a      	ldr	r2, [pc, #168]	@ (8015c0c <prvAddNewTaskToReadyList+0xc8>)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015b68:	4b27      	ldr	r3, [pc, #156]	@ (8015c08 <prvAddNewTaskToReadyList+0xc4>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	2b01      	cmp	r3, #1
 8015b6e:	d110      	bne.n	8015b92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015b70:	f000 fc6c 	bl	801644c <prvInitialiseTaskLists>
 8015b74:	e00d      	b.n	8015b92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015b76:	4b26      	ldr	r3, [pc, #152]	@ (8015c10 <prvAddNewTaskToReadyList+0xcc>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d109      	bne.n	8015b92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015b7e:	4b23      	ldr	r3, [pc, #140]	@ (8015c0c <prvAddNewTaskToReadyList+0xc8>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	d802      	bhi.n	8015b92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8015c0c <prvAddNewTaskToReadyList+0xc8>)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015b92:	4b20      	ldr	r3, [pc, #128]	@ (8015c14 <prvAddNewTaskToReadyList+0xd0>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	3301      	adds	r3, #1
 8015b98:	4a1e      	ldr	r2, [pc, #120]	@ (8015c14 <prvAddNewTaskToReadyList+0xd0>)
 8015b9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8015c14 <prvAddNewTaskToReadyList+0xd0>)
 8015b9e:	681a      	ldr	r2, [r3, #0]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8015c18 <prvAddNewTaskToReadyList+0xd4>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d903      	bls.n	8015bb8 <prvAddNewTaskToReadyList+0x74>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bb4:	4a18      	ldr	r2, [pc, #96]	@ (8015c18 <prvAddNewTaskToReadyList+0xd4>)
 8015bb6:	6013      	str	r3, [r2, #0]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bbc:	4613      	mov	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	4413      	add	r3, r2
 8015bc2:	009b      	lsls	r3, r3, #2
 8015bc4:	4a15      	ldr	r2, [pc, #84]	@ (8015c1c <prvAddNewTaskToReadyList+0xd8>)
 8015bc6:	441a      	add	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	3304      	adds	r3, #4
 8015bcc:	4619      	mov	r1, r3
 8015bce:	4610      	mov	r0, r2
 8015bd0:	f7fe fe4b 	bl	801486a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015bd4:	f001 fdb2 	bl	801773c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8015c10 <prvAddNewTaskToReadyList+0xcc>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d00e      	beq.n	8015bfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015be0:	4b0a      	ldr	r3, [pc, #40]	@ (8015c0c <prvAddNewTaskToReadyList+0xc8>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d207      	bcs.n	8015bfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015bee:	4b0c      	ldr	r3, [pc, #48]	@ (8015c20 <prvAddNewTaskToReadyList+0xdc>)
 8015bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	f3bf 8f4f 	dsb	sy
 8015bfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015bfe:	bf00      	nop
 8015c00:	3708      	adds	r7, #8
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	200013d0 	.word	0x200013d0
 8015c0c:	20000efc 	.word	0x20000efc
 8015c10:	200013dc 	.word	0x200013dc
 8015c14:	200013ec 	.word	0x200013ec
 8015c18:	200013d8 	.word	0x200013d8
 8015c1c:	20000f00 	.word	0x20000f00
 8015c20:	e000ed04 	.word	0xe000ed04

08015c24 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015c2c:	f001 fd54 	bl	80176d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d102      	bne.n	8015c3c <vTaskDelete+0x18>
 8015c36:	4b2d      	ldr	r3, [pc, #180]	@ (8015cec <vTaskDelete+0xc8>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	e000      	b.n	8015c3e <vTaskDelete+0x1a>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	3304      	adds	r3, #4
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7fe fe6d 	bl	8014924 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d004      	beq.n	8015c5c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	3318      	adds	r3, #24
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7fe fe64 	bl	8014924 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8015c5c:	4b24      	ldr	r3, [pc, #144]	@ (8015cf0 <vTaskDelete+0xcc>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	3301      	adds	r3, #1
 8015c62:	4a23      	ldr	r2, [pc, #140]	@ (8015cf0 <vTaskDelete+0xcc>)
 8015c64:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8015c66:	4b21      	ldr	r3, [pc, #132]	@ (8015cec <vTaskDelete+0xc8>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	68fa      	ldr	r2, [r7, #12]
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d10b      	bne.n	8015c88 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	3304      	adds	r3, #4
 8015c74:	4619      	mov	r1, r3
 8015c76:	481f      	ldr	r0, [pc, #124]	@ (8015cf4 <vTaskDelete+0xd0>)
 8015c78:	f7fe fdf7 	bl	801486a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8015c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8015cf8 <vTaskDelete+0xd4>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	3301      	adds	r3, #1
 8015c82:	4a1d      	ldr	r2, [pc, #116]	@ (8015cf8 <vTaskDelete+0xd4>)
 8015c84:	6013      	str	r3, [r2, #0]
 8015c86:	e009      	b.n	8015c9c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8015c88:	4b1c      	ldr	r3, [pc, #112]	@ (8015cfc <vTaskDelete+0xd8>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8015cfc <vTaskDelete+0xd8>)
 8015c90:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f000 fc48 	bl	8016528 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8015c98:	f000 fc7c 	bl	8016594 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8015c9c:	f001 fd4e 	bl	801773c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8015ca0:	4b17      	ldr	r3, [pc, #92]	@ (8015d00 <vTaskDelete+0xdc>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d01c      	beq.n	8015ce2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8015ca8:	4b10      	ldr	r3, [pc, #64]	@ (8015cec <vTaskDelete+0xc8>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	68fa      	ldr	r2, [r7, #12]
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d117      	bne.n	8015ce2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8015cb2:	4b14      	ldr	r3, [pc, #80]	@ (8015d04 <vTaskDelete+0xe0>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d00b      	beq.n	8015cd2 <vTaskDelete+0xae>
	__asm volatile
 8015cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cbe:	f383 8811 	msr	BASEPRI, r3
 8015cc2:	f3bf 8f6f 	isb	sy
 8015cc6:	f3bf 8f4f 	dsb	sy
 8015cca:	60bb      	str	r3, [r7, #8]
}
 8015ccc:	bf00      	nop
 8015cce:	bf00      	nop
 8015cd0:	e7fd      	b.n	8015cce <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8015cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015d08 <vTaskDelete+0xe4>)
 8015cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015cd8:	601a      	str	r2, [r3, #0]
 8015cda:	f3bf 8f4f 	dsb	sy
 8015cde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015ce2:	bf00      	nop
 8015ce4:	3710      	adds	r7, #16
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	20000efc 	.word	0x20000efc
 8015cf0:	200013ec 	.word	0x200013ec
 8015cf4:	200013a4 	.word	0x200013a4
 8015cf8:	200013b8 	.word	0x200013b8
 8015cfc:	200013d0 	.word	0x200013d0
 8015d00:	200013dc 	.word	0x200013dc
 8015d04:	200013f8 	.word	0x200013f8
 8015d08:	e000ed04 	.word	0xe000ed04

08015d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b08a      	sub	sp, #40	@ 0x28
 8015d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015d12:	2300      	movs	r3, #0
 8015d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015d16:	2300      	movs	r3, #0
 8015d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015d1a:	463a      	mov	r2, r7
 8015d1c:	1d39      	adds	r1, r7, #4
 8015d1e:	f107 0308 	add.w	r3, r7, #8
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7fe fd40 	bl	80147a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015d28:	6839      	ldr	r1, [r7, #0]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	68ba      	ldr	r2, [r7, #8]
 8015d2e:	9202      	str	r2, [sp, #8]
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	2300      	movs	r3, #0
 8015d34:	9300      	str	r3, [sp, #0]
 8015d36:	2300      	movs	r3, #0
 8015d38:	460a      	mov	r2, r1
 8015d3a:	4924      	ldr	r1, [pc, #144]	@ (8015dcc <vTaskStartScheduler+0xc0>)
 8015d3c:	4824      	ldr	r0, [pc, #144]	@ (8015dd0 <vTaskStartScheduler+0xc4>)
 8015d3e:	f7ff fdb3 	bl	80158a8 <xTaskCreateStatic>
 8015d42:	4603      	mov	r3, r0
 8015d44:	4a23      	ldr	r2, [pc, #140]	@ (8015dd4 <vTaskStartScheduler+0xc8>)
 8015d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015d48:	4b22      	ldr	r3, [pc, #136]	@ (8015dd4 <vTaskStartScheduler+0xc8>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d002      	beq.n	8015d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015d50:	2301      	movs	r3, #1
 8015d52:	617b      	str	r3, [r7, #20]
 8015d54:	e001      	b.n	8015d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015d56:	2300      	movs	r3, #0
 8015d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	d102      	bne.n	8015d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015d60:	f001 f832 	bl	8016dc8 <xTimerCreateTimerTask>
 8015d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	2b01      	cmp	r3, #1
 8015d6a:	d11b      	bne.n	8015da4 <vTaskStartScheduler+0x98>
	__asm volatile
 8015d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d70:	f383 8811 	msr	BASEPRI, r3
 8015d74:	f3bf 8f6f 	isb	sy
 8015d78:	f3bf 8f4f 	dsb	sy
 8015d7c:	613b      	str	r3, [r7, #16]
}
 8015d7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015d80:	4b15      	ldr	r3, [pc, #84]	@ (8015dd8 <vTaskStartScheduler+0xcc>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	3354      	adds	r3, #84	@ 0x54
 8015d86:	4a15      	ldr	r2, [pc, #84]	@ (8015ddc <vTaskStartScheduler+0xd0>)
 8015d88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015d8a:	4b15      	ldr	r3, [pc, #84]	@ (8015de0 <vTaskStartScheduler+0xd4>)
 8015d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8015d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015d92:	4b14      	ldr	r3, [pc, #80]	@ (8015de4 <vTaskStartScheduler+0xd8>)
 8015d94:	2201      	movs	r2, #1
 8015d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015d98:	4b13      	ldr	r3, [pc, #76]	@ (8015de8 <vTaskStartScheduler+0xdc>)
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015d9e:	f001 fbf7 	bl	8017590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015da2:	e00f      	b.n	8015dc4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015daa:	d10b      	bne.n	8015dc4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8015dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015db0:	f383 8811 	msr	BASEPRI, r3
 8015db4:	f3bf 8f6f 	isb	sy
 8015db8:	f3bf 8f4f 	dsb	sy
 8015dbc:	60fb      	str	r3, [r7, #12]
}
 8015dbe:	bf00      	nop
 8015dc0:	bf00      	nop
 8015dc2:	e7fd      	b.n	8015dc0 <vTaskStartScheduler+0xb4>
}
 8015dc4:	bf00      	nop
 8015dc6:	3718      	adds	r7, #24
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	0801d47c 	.word	0x0801d47c
 8015dd0:	0801641d 	.word	0x0801641d
 8015dd4:	200013f4 	.word	0x200013f4
 8015dd8:	20000efc 	.word	0x20000efc
 8015ddc:	2000012c 	.word	0x2000012c
 8015de0:	200013f0 	.word	0x200013f0
 8015de4:	200013dc 	.word	0x200013dc
 8015de8:	200013d4 	.word	0x200013d4

08015dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015dec:	b480      	push	{r7}
 8015dee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015df0:	4b04      	ldr	r3, [pc, #16]	@ (8015e04 <vTaskSuspendAll+0x18>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	3301      	adds	r3, #1
 8015df6:	4a03      	ldr	r2, [pc, #12]	@ (8015e04 <vTaskSuspendAll+0x18>)
 8015df8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015dfa:	bf00      	nop
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	200013f8 	.word	0x200013f8

08015e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b084      	sub	sp, #16
 8015e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015e12:	2300      	movs	r3, #0
 8015e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015e16:	4b42      	ldr	r3, [pc, #264]	@ (8015f20 <xTaskResumeAll+0x118>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d10b      	bne.n	8015e36 <xTaskResumeAll+0x2e>
	__asm volatile
 8015e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e22:	f383 8811 	msr	BASEPRI, r3
 8015e26:	f3bf 8f6f 	isb	sy
 8015e2a:	f3bf 8f4f 	dsb	sy
 8015e2e:	603b      	str	r3, [r7, #0]
}
 8015e30:	bf00      	nop
 8015e32:	bf00      	nop
 8015e34:	e7fd      	b.n	8015e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015e36:	f001 fc4f 	bl	80176d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015e3a:	4b39      	ldr	r3, [pc, #228]	@ (8015f20 <xTaskResumeAll+0x118>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	3b01      	subs	r3, #1
 8015e40:	4a37      	ldr	r2, [pc, #220]	@ (8015f20 <xTaskResumeAll+0x118>)
 8015e42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e44:	4b36      	ldr	r3, [pc, #216]	@ (8015f20 <xTaskResumeAll+0x118>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d162      	bne.n	8015f12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015e4c:	4b35      	ldr	r3, [pc, #212]	@ (8015f24 <xTaskResumeAll+0x11c>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d05e      	beq.n	8015f12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015e54:	e02f      	b.n	8015eb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e56:	4b34      	ldr	r3, [pc, #208]	@ (8015f28 <xTaskResumeAll+0x120>)
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	68db      	ldr	r3, [r3, #12]
 8015e5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	3318      	adds	r3, #24
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7fe fd5e 	bl	8014924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	3304      	adds	r3, #4
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7fe fd59 	bl	8014924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e76:	4b2d      	ldr	r3, [pc, #180]	@ (8015f2c <xTaskResumeAll+0x124>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d903      	bls.n	8015e86 <xTaskResumeAll+0x7e>
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e82:	4a2a      	ldr	r2, [pc, #168]	@ (8015f2c <xTaskResumeAll+0x124>)
 8015e84:	6013      	str	r3, [r2, #0]
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	4413      	add	r3, r2
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	4a27      	ldr	r2, [pc, #156]	@ (8015f30 <xTaskResumeAll+0x128>)
 8015e94:	441a      	add	r2, r3
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	3304      	adds	r3, #4
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	4610      	mov	r0, r2
 8015e9e:	f7fe fce4 	bl	801486a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ea6:	4b23      	ldr	r3, [pc, #140]	@ (8015f34 <xTaskResumeAll+0x12c>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d302      	bcc.n	8015eb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015eb0:	4b21      	ldr	r3, [pc, #132]	@ (8015f38 <xTaskResumeAll+0x130>)
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8015f28 <xTaskResumeAll+0x120>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d1cb      	bne.n	8015e56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d001      	beq.n	8015ec8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015ec4:	f000 fb66 	bl	8016594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8015f3c <xTaskResumeAll+0x134>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d010      	beq.n	8015ef6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015ed4:	f000 f846 	bl	8015f64 <xTaskIncrementTick>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d002      	beq.n	8015ee4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015ede:	4b16      	ldr	r3, [pc, #88]	@ (8015f38 <xTaskResumeAll+0x130>)
 8015ee0:	2201      	movs	r2, #1
 8015ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	3b01      	subs	r3, #1
 8015ee8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d1f1      	bne.n	8015ed4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015ef0:	4b12      	ldr	r3, [pc, #72]	@ (8015f3c <xTaskResumeAll+0x134>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015ef6:	4b10      	ldr	r3, [pc, #64]	@ (8015f38 <xTaskResumeAll+0x130>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d009      	beq.n	8015f12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015efe:	2301      	movs	r3, #1
 8015f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015f02:	4b0f      	ldr	r3, [pc, #60]	@ (8015f40 <xTaskResumeAll+0x138>)
 8015f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f08:	601a      	str	r2, [r3, #0]
 8015f0a:	f3bf 8f4f 	dsb	sy
 8015f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015f12:	f001 fc13 	bl	801773c <vPortExitCritical>

	return xAlreadyYielded;
 8015f16:	68bb      	ldr	r3, [r7, #8]
}
 8015f18:	4618      	mov	r0, r3
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}
 8015f20:	200013f8 	.word	0x200013f8
 8015f24:	200013d0 	.word	0x200013d0
 8015f28:	20001390 	.word	0x20001390
 8015f2c:	200013d8 	.word	0x200013d8
 8015f30:	20000f00 	.word	0x20000f00
 8015f34:	20000efc 	.word	0x20000efc
 8015f38:	200013e4 	.word	0x200013e4
 8015f3c:	200013e0 	.word	0x200013e0
 8015f40:	e000ed04 	.word	0xe000ed04

08015f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015f44:	b480      	push	{r7}
 8015f46:	b083      	sub	sp, #12
 8015f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015f4a:	4b05      	ldr	r3, [pc, #20]	@ (8015f60 <xTaskGetTickCount+0x1c>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015f50:	687b      	ldr	r3, [r7, #4]
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	370c      	adds	r7, #12
 8015f56:	46bd      	mov	sp, r7
 8015f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5c:	4770      	bx	lr
 8015f5e:	bf00      	nop
 8015f60:	200013d4 	.word	0x200013d4

08015f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b086      	sub	sp, #24
 8015f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80160ac <xTaskIncrementTick+0x148>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	f040 8090 	bne.w	8016098 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015f78:	4b4d      	ldr	r3, [pc, #308]	@ (80160b0 <xTaskIncrementTick+0x14c>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015f80:	4a4b      	ldr	r2, [pc, #300]	@ (80160b0 <xTaskIncrementTick+0x14c>)
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d121      	bne.n	8015fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015f8c:	4b49      	ldr	r3, [pc, #292]	@ (80160b4 <xTaskIncrementTick+0x150>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00b      	beq.n	8015fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8015f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f9a:	f383 8811 	msr	BASEPRI, r3
 8015f9e:	f3bf 8f6f 	isb	sy
 8015fa2:	f3bf 8f4f 	dsb	sy
 8015fa6:	603b      	str	r3, [r7, #0]
}
 8015fa8:	bf00      	nop
 8015faa:	bf00      	nop
 8015fac:	e7fd      	b.n	8015faa <xTaskIncrementTick+0x46>
 8015fae:	4b41      	ldr	r3, [pc, #260]	@ (80160b4 <xTaskIncrementTick+0x150>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	4b40      	ldr	r3, [pc, #256]	@ (80160b8 <xTaskIncrementTick+0x154>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80160b4 <xTaskIncrementTick+0x150>)
 8015fba:	6013      	str	r3, [r2, #0]
 8015fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80160b8 <xTaskIncrementTick+0x154>)
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	6013      	str	r3, [r2, #0]
 8015fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80160bc <xTaskIncrementTick+0x158>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80160bc <xTaskIncrementTick+0x158>)
 8015fca:	6013      	str	r3, [r2, #0]
 8015fcc:	f000 fae2 	bl	8016594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80160c0 <xTaskIncrementTick+0x15c>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	693a      	ldr	r2, [r7, #16]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d349      	bcc.n	801606e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015fda:	4b36      	ldr	r3, [pc, #216]	@ (80160b4 <xTaskIncrementTick+0x150>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d104      	bne.n	8015fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015fe4:	4b36      	ldr	r3, [pc, #216]	@ (80160c0 <xTaskIncrementTick+0x15c>)
 8015fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8015fea:	601a      	str	r2, [r3, #0]
					break;
 8015fec:	e03f      	b.n	801606e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fee:	4b31      	ldr	r3, [pc, #196]	@ (80160b4 <xTaskIncrementTick+0x150>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	68db      	ldr	r3, [r3, #12]
 8015ff4:	68db      	ldr	r3, [r3, #12]
 8015ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015ffe:	693a      	ldr	r2, [r7, #16]
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	429a      	cmp	r2, r3
 8016004:	d203      	bcs.n	801600e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016006:	4a2e      	ldr	r2, [pc, #184]	@ (80160c0 <xTaskIncrementTick+0x15c>)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801600c:	e02f      	b.n	801606e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	3304      	adds	r3, #4
 8016012:	4618      	mov	r0, r3
 8016014:	f7fe fc86 	bl	8014924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801601c:	2b00      	cmp	r3, #0
 801601e:	d004      	beq.n	801602a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	3318      	adds	r3, #24
 8016024:	4618      	mov	r0, r3
 8016026:	f7fe fc7d 	bl	8014924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801602e:	4b25      	ldr	r3, [pc, #148]	@ (80160c4 <xTaskIncrementTick+0x160>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	429a      	cmp	r2, r3
 8016034:	d903      	bls.n	801603e <xTaskIncrementTick+0xda>
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801603a:	4a22      	ldr	r2, [pc, #136]	@ (80160c4 <xTaskIncrementTick+0x160>)
 801603c:	6013      	str	r3, [r2, #0]
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016042:	4613      	mov	r3, r2
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	4413      	add	r3, r2
 8016048:	009b      	lsls	r3, r3, #2
 801604a:	4a1f      	ldr	r2, [pc, #124]	@ (80160c8 <xTaskIncrementTick+0x164>)
 801604c:	441a      	add	r2, r3
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	3304      	adds	r3, #4
 8016052:	4619      	mov	r1, r3
 8016054:	4610      	mov	r0, r2
 8016056:	f7fe fc08 	bl	801486a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801605e:	4b1b      	ldr	r3, [pc, #108]	@ (80160cc <xTaskIncrementTick+0x168>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016064:	429a      	cmp	r2, r3
 8016066:	d3b8      	bcc.n	8015fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8016068:	2301      	movs	r3, #1
 801606a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801606c:	e7b5      	b.n	8015fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801606e:	4b17      	ldr	r3, [pc, #92]	@ (80160cc <xTaskIncrementTick+0x168>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016074:	4914      	ldr	r1, [pc, #80]	@ (80160c8 <xTaskIncrementTick+0x164>)
 8016076:	4613      	mov	r3, r2
 8016078:	009b      	lsls	r3, r3, #2
 801607a:	4413      	add	r3, r2
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	440b      	add	r3, r1
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	2b01      	cmp	r3, #1
 8016084:	d901      	bls.n	801608a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8016086:	2301      	movs	r3, #1
 8016088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801608a:	4b11      	ldr	r3, [pc, #68]	@ (80160d0 <xTaskIncrementTick+0x16c>)
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d007      	beq.n	80160a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8016092:	2301      	movs	r3, #1
 8016094:	617b      	str	r3, [r7, #20]
 8016096:	e004      	b.n	80160a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016098:	4b0e      	ldr	r3, [pc, #56]	@ (80160d4 <xTaskIncrementTick+0x170>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	3301      	adds	r3, #1
 801609e:	4a0d      	ldr	r2, [pc, #52]	@ (80160d4 <xTaskIncrementTick+0x170>)
 80160a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80160a2:	697b      	ldr	r3, [r7, #20]
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3718      	adds	r7, #24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	200013f8 	.word	0x200013f8
 80160b0:	200013d4 	.word	0x200013d4
 80160b4:	20001388 	.word	0x20001388
 80160b8:	2000138c 	.word	0x2000138c
 80160bc:	200013e8 	.word	0x200013e8
 80160c0:	200013f0 	.word	0x200013f0
 80160c4:	200013d8 	.word	0x200013d8
 80160c8:	20000f00 	.word	0x20000f00
 80160cc:	20000efc 	.word	0x20000efc
 80160d0:	200013e4 	.word	0x200013e4
 80160d4:	200013e0 	.word	0x200013e0

080160d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80160d8:	b480      	push	{r7}
 80160da:	b085      	sub	sp, #20
 80160dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80160de:	4b2b      	ldr	r3, [pc, #172]	@ (801618c <vTaskSwitchContext+0xb4>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d003      	beq.n	80160ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80160e6:	4b2a      	ldr	r3, [pc, #168]	@ (8016190 <vTaskSwitchContext+0xb8>)
 80160e8:	2201      	movs	r2, #1
 80160ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80160ec:	e047      	b.n	801617e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80160ee:	4b28      	ldr	r3, [pc, #160]	@ (8016190 <vTaskSwitchContext+0xb8>)
 80160f0:	2200      	movs	r2, #0
 80160f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160f4:	4b27      	ldr	r3, [pc, #156]	@ (8016194 <vTaskSwitchContext+0xbc>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	60fb      	str	r3, [r7, #12]
 80160fa:	e011      	b.n	8016120 <vTaskSwitchContext+0x48>
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d10b      	bne.n	801611a <vTaskSwitchContext+0x42>
	__asm volatile
 8016102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016106:	f383 8811 	msr	BASEPRI, r3
 801610a:	f3bf 8f6f 	isb	sy
 801610e:	f3bf 8f4f 	dsb	sy
 8016112:	607b      	str	r3, [r7, #4]
}
 8016114:	bf00      	nop
 8016116:	bf00      	nop
 8016118:	e7fd      	b.n	8016116 <vTaskSwitchContext+0x3e>
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	3b01      	subs	r3, #1
 801611e:	60fb      	str	r3, [r7, #12]
 8016120:	491d      	ldr	r1, [pc, #116]	@ (8016198 <vTaskSwitchContext+0xc0>)
 8016122:	68fa      	ldr	r2, [r7, #12]
 8016124:	4613      	mov	r3, r2
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	4413      	add	r3, r2
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	440b      	add	r3, r1
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d0e3      	beq.n	80160fc <vTaskSwitchContext+0x24>
 8016134:	68fa      	ldr	r2, [r7, #12]
 8016136:	4613      	mov	r3, r2
 8016138:	009b      	lsls	r3, r3, #2
 801613a:	4413      	add	r3, r2
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	4a16      	ldr	r2, [pc, #88]	@ (8016198 <vTaskSwitchContext+0xc0>)
 8016140:	4413      	add	r3, r2
 8016142:	60bb      	str	r3, [r7, #8]
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	685a      	ldr	r2, [r3, #4]
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	605a      	str	r2, [r3, #4]
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	685a      	ldr	r2, [r3, #4]
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	3308      	adds	r3, #8
 8016156:	429a      	cmp	r2, r3
 8016158:	d104      	bne.n	8016164 <vTaskSwitchContext+0x8c>
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	685a      	ldr	r2, [r3, #4]
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	605a      	str	r2, [r3, #4]
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	4a0c      	ldr	r2, [pc, #48]	@ (801619c <vTaskSwitchContext+0xc4>)
 801616c:	6013      	str	r3, [r2, #0]
 801616e:	4a09      	ldr	r2, [pc, #36]	@ (8016194 <vTaskSwitchContext+0xbc>)
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016174:	4b09      	ldr	r3, [pc, #36]	@ (801619c <vTaskSwitchContext+0xc4>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	3354      	adds	r3, #84	@ 0x54
 801617a:	4a09      	ldr	r2, [pc, #36]	@ (80161a0 <vTaskSwitchContext+0xc8>)
 801617c:	6013      	str	r3, [r2, #0]
}
 801617e:	bf00      	nop
 8016180:	3714      	adds	r7, #20
 8016182:	46bd      	mov	sp, r7
 8016184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016188:	4770      	bx	lr
 801618a:	bf00      	nop
 801618c:	200013f8 	.word	0x200013f8
 8016190:	200013e4 	.word	0x200013e4
 8016194:	200013d8 	.word	0x200013d8
 8016198:	20000f00 	.word	0x20000f00
 801619c:	20000efc 	.word	0x20000efc
 80161a0:	2000012c 	.word	0x2000012c

080161a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b084      	sub	sp, #16
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d10b      	bne.n	80161cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80161b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161b8:	f383 8811 	msr	BASEPRI, r3
 80161bc:	f3bf 8f6f 	isb	sy
 80161c0:	f3bf 8f4f 	dsb	sy
 80161c4:	60fb      	str	r3, [r7, #12]
}
 80161c6:	bf00      	nop
 80161c8:	bf00      	nop
 80161ca:	e7fd      	b.n	80161c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80161cc:	4b07      	ldr	r3, [pc, #28]	@ (80161ec <vTaskPlaceOnEventList+0x48>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	3318      	adds	r3, #24
 80161d2:	4619      	mov	r1, r3
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7fe fb6c 	bl	80148b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80161da:	2101      	movs	r1, #1
 80161dc:	6838      	ldr	r0, [r7, #0]
 80161de:	f000 fd9f 	bl	8016d20 <prvAddCurrentTaskToDelayedList>
}
 80161e2:	bf00      	nop
 80161e4:	3710      	adds	r7, #16
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	20000efc 	.word	0x20000efc

080161f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d10b      	bne.n	801621a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8016202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016206:	f383 8811 	msr	BASEPRI, r3
 801620a:	f3bf 8f6f 	isb	sy
 801620e:	f3bf 8f4f 	dsb	sy
 8016212:	617b      	str	r3, [r7, #20]
}
 8016214:	bf00      	nop
 8016216:	bf00      	nop
 8016218:	e7fd      	b.n	8016216 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801621a:	4b0a      	ldr	r3, [pc, #40]	@ (8016244 <vTaskPlaceOnEventListRestricted+0x54>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	3318      	adds	r3, #24
 8016220:	4619      	mov	r1, r3
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7fe fb21 	bl	801486a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d002      	beq.n	8016234 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801622e:	f04f 33ff 	mov.w	r3, #4294967295
 8016232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016234:	6879      	ldr	r1, [r7, #4]
 8016236:	68b8      	ldr	r0, [r7, #8]
 8016238:	f000 fd72 	bl	8016d20 <prvAddCurrentTaskToDelayedList>
	}
 801623c:	bf00      	nop
 801623e:	3718      	adds	r7, #24
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}
 8016244:	20000efc 	.word	0x20000efc

08016248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b086      	sub	sp, #24
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d10b      	bne.n	8016276 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016262:	f383 8811 	msr	BASEPRI, r3
 8016266:	f3bf 8f6f 	isb	sy
 801626a:	f3bf 8f4f 	dsb	sy
 801626e:	60fb      	str	r3, [r7, #12]
}
 8016270:	bf00      	nop
 8016272:	bf00      	nop
 8016274:	e7fd      	b.n	8016272 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	3318      	adds	r3, #24
 801627a:	4618      	mov	r0, r3
 801627c:	f7fe fb52 	bl	8014924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016280:	4b1d      	ldr	r3, [pc, #116]	@ (80162f8 <xTaskRemoveFromEventList+0xb0>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d11d      	bne.n	80162c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	3304      	adds	r3, #4
 801628c:	4618      	mov	r0, r3
 801628e:	f7fe fb49 	bl	8014924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016296:	4b19      	ldr	r3, [pc, #100]	@ (80162fc <xTaskRemoveFromEventList+0xb4>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	429a      	cmp	r2, r3
 801629c:	d903      	bls.n	80162a6 <xTaskRemoveFromEventList+0x5e>
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162a2:	4a16      	ldr	r2, [pc, #88]	@ (80162fc <xTaskRemoveFromEventList+0xb4>)
 80162a4:	6013      	str	r3, [r2, #0]
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162aa:	4613      	mov	r3, r2
 80162ac:	009b      	lsls	r3, r3, #2
 80162ae:	4413      	add	r3, r2
 80162b0:	009b      	lsls	r3, r3, #2
 80162b2:	4a13      	ldr	r2, [pc, #76]	@ (8016300 <xTaskRemoveFromEventList+0xb8>)
 80162b4:	441a      	add	r2, r3
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	3304      	adds	r3, #4
 80162ba:	4619      	mov	r1, r3
 80162bc:	4610      	mov	r0, r2
 80162be:	f7fe fad4 	bl	801486a <vListInsertEnd>
 80162c2:	e005      	b.n	80162d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	3318      	adds	r3, #24
 80162c8:	4619      	mov	r1, r3
 80162ca:	480e      	ldr	r0, [pc, #56]	@ (8016304 <xTaskRemoveFromEventList+0xbc>)
 80162cc:	f7fe facd 	bl	801486a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162d4:	4b0c      	ldr	r3, [pc, #48]	@ (8016308 <xTaskRemoveFromEventList+0xc0>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162da:	429a      	cmp	r2, r3
 80162dc:	d905      	bls.n	80162ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80162de:	2301      	movs	r3, #1
 80162e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80162e2:	4b0a      	ldr	r3, [pc, #40]	@ (801630c <xTaskRemoveFromEventList+0xc4>)
 80162e4:	2201      	movs	r2, #1
 80162e6:	601a      	str	r2, [r3, #0]
 80162e8:	e001      	b.n	80162ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80162ea:	2300      	movs	r3, #0
 80162ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80162ee:	697b      	ldr	r3, [r7, #20]
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3718      	adds	r7, #24
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	200013f8 	.word	0x200013f8
 80162fc:	200013d8 	.word	0x200013d8
 8016300:	20000f00 	.word	0x20000f00
 8016304:	20001390 	.word	0x20001390
 8016308:	20000efc 	.word	0x20000efc
 801630c:	200013e4 	.word	0x200013e4

08016310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016310:	b480      	push	{r7}
 8016312:	b083      	sub	sp, #12
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016318:	4b06      	ldr	r3, [pc, #24]	@ (8016334 <vTaskInternalSetTimeOutState+0x24>)
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016320:	4b05      	ldr	r3, [pc, #20]	@ (8016338 <vTaskInternalSetTimeOutState+0x28>)
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	605a      	str	r2, [r3, #4]
}
 8016328:	bf00      	nop
 801632a:	370c      	adds	r7, #12
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr
 8016334:	200013e8 	.word	0x200013e8
 8016338:	200013d4 	.word	0x200013d4

0801633c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b088      	sub	sp, #32
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d10b      	bne.n	8016364 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016350:	f383 8811 	msr	BASEPRI, r3
 8016354:	f3bf 8f6f 	isb	sy
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	613b      	str	r3, [r7, #16]
}
 801635e:	bf00      	nop
 8016360:	bf00      	nop
 8016362:	e7fd      	b.n	8016360 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d10b      	bne.n	8016382 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801636e:	f383 8811 	msr	BASEPRI, r3
 8016372:	f3bf 8f6f 	isb	sy
 8016376:	f3bf 8f4f 	dsb	sy
 801637a:	60fb      	str	r3, [r7, #12]
}
 801637c:	bf00      	nop
 801637e:	bf00      	nop
 8016380:	e7fd      	b.n	801637e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8016382:	f001 f9a9 	bl	80176d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016386:	4b1d      	ldr	r3, [pc, #116]	@ (80163fc <xTaskCheckForTimeOut+0xc0>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	685b      	ldr	r3, [r3, #4]
 8016390:	69ba      	ldr	r2, [r7, #24]
 8016392:	1ad3      	subs	r3, r2, r3
 8016394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801639e:	d102      	bne.n	80163a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80163a0:	2300      	movs	r3, #0
 80163a2:	61fb      	str	r3, [r7, #28]
 80163a4:	e023      	b.n	80163ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	4b15      	ldr	r3, [pc, #84]	@ (8016400 <xTaskCheckForTimeOut+0xc4>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d007      	beq.n	80163c2 <xTaskCheckForTimeOut+0x86>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	69ba      	ldr	r2, [r7, #24]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d302      	bcc.n	80163c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80163bc:	2301      	movs	r3, #1
 80163be:	61fb      	str	r3, [r7, #28]
 80163c0:	e015      	b.n	80163ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	697a      	ldr	r2, [r7, #20]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d20b      	bcs.n	80163e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	681a      	ldr	r2, [r3, #0]
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	1ad2      	subs	r2, r2, r3
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	f7ff ff99 	bl	8016310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80163de:	2300      	movs	r3, #0
 80163e0:	61fb      	str	r3, [r7, #28]
 80163e2:	e004      	b.n	80163ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	2200      	movs	r2, #0
 80163e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80163ea:	2301      	movs	r3, #1
 80163ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80163ee:	f001 f9a5 	bl	801773c <vPortExitCritical>

	return xReturn;
 80163f2:	69fb      	ldr	r3, [r7, #28]
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	3720      	adds	r7, #32
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	200013d4 	.word	0x200013d4
 8016400:	200013e8 	.word	0x200013e8

08016404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016404:	b480      	push	{r7}
 8016406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016408:	4b03      	ldr	r3, [pc, #12]	@ (8016418 <vTaskMissedYield+0x14>)
 801640a:	2201      	movs	r2, #1
 801640c:	601a      	str	r2, [r3, #0]
}
 801640e:	bf00      	nop
 8016410:	46bd      	mov	sp, r7
 8016412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016416:	4770      	bx	lr
 8016418:	200013e4 	.word	0x200013e4

0801641c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016424:	f000 f852 	bl	80164cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016428:	4b06      	ldr	r3, [pc, #24]	@ (8016444 <prvIdleTask+0x28>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2b01      	cmp	r3, #1
 801642e:	d9f9      	bls.n	8016424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016430:	4b05      	ldr	r3, [pc, #20]	@ (8016448 <prvIdleTask+0x2c>)
 8016432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016436:	601a      	str	r2, [r3, #0]
 8016438:	f3bf 8f4f 	dsb	sy
 801643c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016440:	e7f0      	b.n	8016424 <prvIdleTask+0x8>
 8016442:	bf00      	nop
 8016444:	20000f00 	.word	0x20000f00
 8016448:	e000ed04 	.word	0xe000ed04

0801644c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016452:	2300      	movs	r3, #0
 8016454:	607b      	str	r3, [r7, #4]
 8016456:	e00c      	b.n	8016472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016458:	687a      	ldr	r2, [r7, #4]
 801645a:	4613      	mov	r3, r2
 801645c:	009b      	lsls	r3, r3, #2
 801645e:	4413      	add	r3, r2
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	4a12      	ldr	r2, [pc, #72]	@ (80164ac <prvInitialiseTaskLists+0x60>)
 8016464:	4413      	add	r3, r2
 8016466:	4618      	mov	r0, r3
 8016468:	f7fe f9d2 	bl	8014810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	3301      	adds	r3, #1
 8016470:	607b      	str	r3, [r7, #4]
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2b37      	cmp	r3, #55	@ 0x37
 8016476:	d9ef      	bls.n	8016458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016478:	480d      	ldr	r0, [pc, #52]	@ (80164b0 <prvInitialiseTaskLists+0x64>)
 801647a:	f7fe f9c9 	bl	8014810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801647e:	480d      	ldr	r0, [pc, #52]	@ (80164b4 <prvInitialiseTaskLists+0x68>)
 8016480:	f7fe f9c6 	bl	8014810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016484:	480c      	ldr	r0, [pc, #48]	@ (80164b8 <prvInitialiseTaskLists+0x6c>)
 8016486:	f7fe f9c3 	bl	8014810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801648a:	480c      	ldr	r0, [pc, #48]	@ (80164bc <prvInitialiseTaskLists+0x70>)
 801648c:	f7fe f9c0 	bl	8014810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016490:	480b      	ldr	r0, [pc, #44]	@ (80164c0 <prvInitialiseTaskLists+0x74>)
 8016492:	f7fe f9bd 	bl	8014810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016496:	4b0b      	ldr	r3, [pc, #44]	@ (80164c4 <prvInitialiseTaskLists+0x78>)
 8016498:	4a05      	ldr	r2, [pc, #20]	@ (80164b0 <prvInitialiseTaskLists+0x64>)
 801649a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801649c:	4b0a      	ldr	r3, [pc, #40]	@ (80164c8 <prvInitialiseTaskLists+0x7c>)
 801649e:	4a05      	ldr	r2, [pc, #20]	@ (80164b4 <prvInitialiseTaskLists+0x68>)
 80164a0:	601a      	str	r2, [r3, #0]
}
 80164a2:	bf00      	nop
 80164a4:	3708      	adds	r7, #8
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	20000f00 	.word	0x20000f00
 80164b0:	20001360 	.word	0x20001360
 80164b4:	20001374 	.word	0x20001374
 80164b8:	20001390 	.word	0x20001390
 80164bc:	200013a4 	.word	0x200013a4
 80164c0:	200013bc 	.word	0x200013bc
 80164c4:	20001388 	.word	0x20001388
 80164c8:	2000138c 	.word	0x2000138c

080164cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80164d2:	e019      	b.n	8016508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80164d4:	f001 f900 	bl	80176d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164d8:	4b10      	ldr	r3, [pc, #64]	@ (801651c <prvCheckTasksWaitingTermination+0x50>)
 80164da:	68db      	ldr	r3, [r3, #12]
 80164dc:	68db      	ldr	r3, [r3, #12]
 80164de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	3304      	adds	r3, #4
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7fe fa1d 	bl	8014924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80164ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016520 <prvCheckTasksWaitingTermination+0x54>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	3b01      	subs	r3, #1
 80164f0:	4a0b      	ldr	r2, [pc, #44]	@ (8016520 <prvCheckTasksWaitingTermination+0x54>)
 80164f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80164f4:	4b0b      	ldr	r3, [pc, #44]	@ (8016524 <prvCheckTasksWaitingTermination+0x58>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	3b01      	subs	r3, #1
 80164fa:	4a0a      	ldr	r2, [pc, #40]	@ (8016524 <prvCheckTasksWaitingTermination+0x58>)
 80164fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80164fe:	f001 f91d 	bl	801773c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f000 f810 	bl	8016528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016508:	4b06      	ldr	r3, [pc, #24]	@ (8016524 <prvCheckTasksWaitingTermination+0x58>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d1e1      	bne.n	80164d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016510:	bf00      	nop
 8016512:	bf00      	nop
 8016514:	3708      	adds	r7, #8
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	200013a4 	.word	0x200013a4
 8016520:	200013d0 	.word	0x200013d0
 8016524:	200013b8 	.word	0x200013b8

08016528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	3354      	adds	r3, #84	@ 0x54
 8016534:	4618      	mov	r0, r3
 8016536:	f002 ffcd 	bl	80194d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016540:	2b00      	cmp	r3, #0
 8016542:	d108      	bne.n	8016556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016548:	4618      	mov	r0, r3
 801654a:	f001 fab5 	bl	8017ab8 <vPortFree>
				vPortFree( pxTCB );
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f001 fab2 	bl	8017ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016554:	e019      	b.n	801658a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801655c:	2b01      	cmp	r3, #1
 801655e:	d103      	bne.n	8016568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f001 faa9 	bl	8017ab8 <vPortFree>
	}
 8016566:	e010      	b.n	801658a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801656e:	2b02      	cmp	r3, #2
 8016570:	d00b      	beq.n	801658a <prvDeleteTCB+0x62>
	__asm volatile
 8016572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016576:	f383 8811 	msr	BASEPRI, r3
 801657a:	f3bf 8f6f 	isb	sy
 801657e:	f3bf 8f4f 	dsb	sy
 8016582:	60fb      	str	r3, [r7, #12]
}
 8016584:	bf00      	nop
 8016586:	bf00      	nop
 8016588:	e7fd      	b.n	8016586 <prvDeleteTCB+0x5e>
	}
 801658a:	bf00      	nop
 801658c:	3710      	adds	r7, #16
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}
	...

08016594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016594:	b480      	push	{r7}
 8016596:	b083      	sub	sp, #12
 8016598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801659a:	4b0c      	ldr	r3, [pc, #48]	@ (80165cc <prvResetNextTaskUnblockTime+0x38>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d104      	bne.n	80165ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80165a4:	4b0a      	ldr	r3, [pc, #40]	@ (80165d0 <prvResetNextTaskUnblockTime+0x3c>)
 80165a6:	f04f 32ff 	mov.w	r2, #4294967295
 80165aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80165ac:	e008      	b.n	80165c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ae:	4b07      	ldr	r3, [pc, #28]	@ (80165cc <prvResetNextTaskUnblockTime+0x38>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	68db      	ldr	r3, [r3, #12]
 80165b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	4a04      	ldr	r2, [pc, #16]	@ (80165d0 <prvResetNextTaskUnblockTime+0x3c>)
 80165be:	6013      	str	r3, [r2, #0]
}
 80165c0:	bf00      	nop
 80165c2:	370c      	adds	r7, #12
 80165c4:	46bd      	mov	sp, r7
 80165c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ca:	4770      	bx	lr
 80165cc:	20001388 	.word	0x20001388
 80165d0:	200013f0 	.word	0x200013f0

080165d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80165d4:	b480      	push	{r7}
 80165d6:	b083      	sub	sp, #12
 80165d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80165da:	4b05      	ldr	r3, [pc, #20]	@ (80165f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	607b      	str	r3, [r7, #4]

		return xReturn;
 80165e0:	687b      	ldr	r3, [r7, #4]
	}
 80165e2:	4618      	mov	r0, r3
 80165e4:	370c      	adds	r7, #12
 80165e6:	46bd      	mov	sp, r7
 80165e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	20000efc 	.word	0x20000efc

080165f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80165f4:	b480      	push	{r7}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80165fa:	4b0b      	ldr	r3, [pc, #44]	@ (8016628 <xTaskGetSchedulerState+0x34>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d102      	bne.n	8016608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016602:	2301      	movs	r3, #1
 8016604:	607b      	str	r3, [r7, #4]
 8016606:	e008      	b.n	801661a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016608:	4b08      	ldr	r3, [pc, #32]	@ (801662c <xTaskGetSchedulerState+0x38>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d102      	bne.n	8016616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016610:	2302      	movs	r3, #2
 8016612:	607b      	str	r3, [r7, #4]
 8016614:	e001      	b.n	801661a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016616:	2300      	movs	r3, #0
 8016618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801661a:	687b      	ldr	r3, [r7, #4]
	}
 801661c:	4618      	mov	r0, r3
 801661e:	370c      	adds	r7, #12
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr
 8016628:	200013dc 	.word	0x200013dc
 801662c:	200013f8 	.word	0x200013f8

08016630 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801663c:	2300      	movs	r3, #0
 801663e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d051      	beq.n	80166ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801664a:	4b2a      	ldr	r3, [pc, #168]	@ (80166f4 <xTaskPriorityInherit+0xc4>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016650:	429a      	cmp	r2, r3
 8016652:	d241      	bcs.n	80166d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	699b      	ldr	r3, [r3, #24]
 8016658:	2b00      	cmp	r3, #0
 801665a:	db06      	blt.n	801666a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801665c:	4b25      	ldr	r3, [pc, #148]	@ (80166f4 <xTaskPriorityInherit+0xc4>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016662:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	6959      	ldr	r1, [r3, #20]
 801666e:	68bb      	ldr	r3, [r7, #8]
 8016670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016672:	4613      	mov	r3, r2
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	4413      	add	r3, r2
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	4a1f      	ldr	r2, [pc, #124]	@ (80166f8 <xTaskPriorityInherit+0xc8>)
 801667c:	4413      	add	r3, r2
 801667e:	4299      	cmp	r1, r3
 8016680:	d122      	bne.n	80166c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	3304      	adds	r3, #4
 8016686:	4618      	mov	r0, r3
 8016688:	f7fe f94c 	bl	8014924 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801668c:	4b19      	ldr	r3, [pc, #100]	@ (80166f4 <xTaskPriorityInherit+0xc4>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016692:	68bb      	ldr	r3, [r7, #8]
 8016694:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801669a:	4b18      	ldr	r3, [pc, #96]	@ (80166fc <xTaskPriorityInherit+0xcc>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d903      	bls.n	80166aa <xTaskPriorityInherit+0x7a>
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166a6:	4a15      	ldr	r2, [pc, #84]	@ (80166fc <xTaskPriorityInherit+0xcc>)
 80166a8:	6013      	str	r3, [r2, #0]
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166ae:	4613      	mov	r3, r2
 80166b0:	009b      	lsls	r3, r3, #2
 80166b2:	4413      	add	r3, r2
 80166b4:	009b      	lsls	r3, r3, #2
 80166b6:	4a10      	ldr	r2, [pc, #64]	@ (80166f8 <xTaskPriorityInherit+0xc8>)
 80166b8:	441a      	add	r2, r3
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	3304      	adds	r3, #4
 80166be:	4619      	mov	r1, r3
 80166c0:	4610      	mov	r0, r2
 80166c2:	f7fe f8d2 	bl	801486a <vListInsertEnd>
 80166c6:	e004      	b.n	80166d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80166c8:	4b0a      	ldr	r3, [pc, #40]	@ (80166f4 <xTaskPriorityInherit+0xc4>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80166d2:	2301      	movs	r3, #1
 80166d4:	60fb      	str	r3, [r7, #12]
 80166d6:	e008      	b.n	80166ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80166dc:	4b05      	ldr	r3, [pc, #20]	@ (80166f4 <xTaskPriorityInherit+0xc4>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d201      	bcs.n	80166ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80166e6:	2301      	movs	r3, #1
 80166e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80166ea:	68fb      	ldr	r3, [r7, #12]
	}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3710      	adds	r7, #16
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	20000efc 	.word	0x20000efc
 80166f8:	20000f00 	.word	0x20000f00
 80166fc:	200013d8 	.word	0x200013d8

08016700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016700:	b580      	push	{r7, lr}
 8016702:	b086      	sub	sp, #24
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801670c:	2300      	movs	r3, #0
 801670e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d058      	beq.n	80167c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016716:	4b2f      	ldr	r3, [pc, #188]	@ (80167d4 <xTaskPriorityDisinherit+0xd4>)
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	693a      	ldr	r2, [r7, #16]
 801671c:	429a      	cmp	r2, r3
 801671e:	d00b      	beq.n	8016738 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016724:	f383 8811 	msr	BASEPRI, r3
 8016728:	f3bf 8f6f 	isb	sy
 801672c:	f3bf 8f4f 	dsb	sy
 8016730:	60fb      	str	r3, [r7, #12]
}
 8016732:	bf00      	nop
 8016734:	bf00      	nop
 8016736:	e7fd      	b.n	8016734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801673c:	2b00      	cmp	r3, #0
 801673e:	d10b      	bne.n	8016758 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016744:	f383 8811 	msr	BASEPRI, r3
 8016748:	f3bf 8f6f 	isb	sy
 801674c:	f3bf 8f4f 	dsb	sy
 8016750:	60bb      	str	r3, [r7, #8]
}
 8016752:	bf00      	nop
 8016754:	bf00      	nop
 8016756:	e7fd      	b.n	8016754 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016758:	693b      	ldr	r3, [r7, #16]
 801675a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801675c:	1e5a      	subs	r2, r3, #1
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801676a:	429a      	cmp	r2, r3
 801676c:	d02c      	beq.n	80167c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016772:	2b00      	cmp	r3, #0
 8016774:	d128      	bne.n	80167c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	3304      	adds	r3, #4
 801677a:	4618      	mov	r0, r3
 801677c:	f7fe f8d2 	bl	8014924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016788:	693b      	ldr	r3, [r7, #16]
 801678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801678c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016798:	4b0f      	ldr	r3, [pc, #60]	@ (80167d8 <xTaskPriorityDisinherit+0xd8>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	429a      	cmp	r2, r3
 801679e:	d903      	bls.n	80167a8 <xTaskPriorityDisinherit+0xa8>
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167a4:	4a0c      	ldr	r2, [pc, #48]	@ (80167d8 <xTaskPriorityDisinherit+0xd8>)
 80167a6:	6013      	str	r3, [r2, #0]
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80167ac:	4613      	mov	r3, r2
 80167ae:	009b      	lsls	r3, r3, #2
 80167b0:	4413      	add	r3, r2
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	4a09      	ldr	r2, [pc, #36]	@ (80167dc <xTaskPriorityDisinherit+0xdc>)
 80167b6:	441a      	add	r2, r3
 80167b8:	693b      	ldr	r3, [r7, #16]
 80167ba:	3304      	adds	r3, #4
 80167bc:	4619      	mov	r1, r3
 80167be:	4610      	mov	r0, r2
 80167c0:	f7fe f853 	bl	801486a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80167c4:	2301      	movs	r3, #1
 80167c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80167c8:	697b      	ldr	r3, [r7, #20]
	}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3718      	adds	r7, #24
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	20000efc 	.word	0x20000efc
 80167d8:	200013d8 	.word	0x200013d8
 80167dc:	20000f00 	.word	0x20000f00

080167e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b088      	sub	sp, #32
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80167ee:	2301      	movs	r3, #1
 80167f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d06c      	beq.n	80168d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d10b      	bne.n	8016818 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016804:	f383 8811 	msr	BASEPRI, r3
 8016808:	f3bf 8f6f 	isb	sy
 801680c:	f3bf 8f4f 	dsb	sy
 8016810:	60fb      	str	r3, [r7, #12]
}
 8016812:	bf00      	nop
 8016814:	bf00      	nop
 8016816:	e7fd      	b.n	8016814 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016818:	69bb      	ldr	r3, [r7, #24]
 801681a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801681c:	683a      	ldr	r2, [r7, #0]
 801681e:	429a      	cmp	r2, r3
 8016820:	d902      	bls.n	8016828 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	61fb      	str	r3, [r7, #28]
 8016826:	e002      	b.n	801682e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016828:	69bb      	ldr	r3, [r7, #24]
 801682a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801682c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801682e:	69bb      	ldr	r3, [r7, #24]
 8016830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016832:	69fa      	ldr	r2, [r7, #28]
 8016834:	429a      	cmp	r2, r3
 8016836:	d04c      	beq.n	80168d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016838:	69bb      	ldr	r3, [r7, #24]
 801683a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801683c:	697a      	ldr	r2, [r7, #20]
 801683e:	429a      	cmp	r2, r3
 8016840:	d147      	bne.n	80168d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016842:	4b26      	ldr	r3, [pc, #152]	@ (80168dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	69ba      	ldr	r2, [r7, #24]
 8016848:	429a      	cmp	r2, r3
 801684a:	d10b      	bne.n	8016864 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016850:	f383 8811 	msr	BASEPRI, r3
 8016854:	f3bf 8f6f 	isb	sy
 8016858:	f3bf 8f4f 	dsb	sy
 801685c:	60bb      	str	r3, [r7, #8]
}
 801685e:	bf00      	nop
 8016860:	bf00      	nop
 8016862:	e7fd      	b.n	8016860 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016864:	69bb      	ldr	r3, [r7, #24]
 8016866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801686a:	69bb      	ldr	r3, [r7, #24]
 801686c:	69fa      	ldr	r2, [r7, #28]
 801686e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016870:	69bb      	ldr	r3, [r7, #24]
 8016872:	699b      	ldr	r3, [r3, #24]
 8016874:	2b00      	cmp	r3, #0
 8016876:	db04      	blt.n	8016882 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016878:	69fb      	ldr	r3, [r7, #28]
 801687a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801687e:	69bb      	ldr	r3, [r7, #24]
 8016880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016882:	69bb      	ldr	r3, [r7, #24]
 8016884:	6959      	ldr	r1, [r3, #20]
 8016886:	693a      	ldr	r2, [r7, #16]
 8016888:	4613      	mov	r3, r2
 801688a:	009b      	lsls	r3, r3, #2
 801688c:	4413      	add	r3, r2
 801688e:	009b      	lsls	r3, r3, #2
 8016890:	4a13      	ldr	r2, [pc, #76]	@ (80168e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016892:	4413      	add	r3, r2
 8016894:	4299      	cmp	r1, r3
 8016896:	d11c      	bne.n	80168d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016898:	69bb      	ldr	r3, [r7, #24]
 801689a:	3304      	adds	r3, #4
 801689c:	4618      	mov	r0, r3
 801689e:	f7fe f841 	bl	8014924 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80168a2:	69bb      	ldr	r3, [r7, #24]
 80168a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168a6:	4b0f      	ldr	r3, [pc, #60]	@ (80168e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d903      	bls.n	80168b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80168ae:	69bb      	ldr	r3, [r7, #24]
 80168b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168b2:	4a0c      	ldr	r2, [pc, #48]	@ (80168e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80168b4:	6013      	str	r3, [r2, #0]
 80168b6:	69bb      	ldr	r3, [r7, #24]
 80168b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168ba:	4613      	mov	r3, r2
 80168bc:	009b      	lsls	r3, r3, #2
 80168be:	4413      	add	r3, r2
 80168c0:	009b      	lsls	r3, r3, #2
 80168c2:	4a07      	ldr	r2, [pc, #28]	@ (80168e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80168c4:	441a      	add	r2, r3
 80168c6:	69bb      	ldr	r3, [r7, #24]
 80168c8:	3304      	adds	r3, #4
 80168ca:	4619      	mov	r1, r3
 80168cc:	4610      	mov	r0, r2
 80168ce:	f7fd ffcc 	bl	801486a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80168d2:	bf00      	nop
 80168d4:	3720      	adds	r7, #32
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	20000efc 	.word	0x20000efc
 80168e0:	20000f00 	.word	0x20000f00
 80168e4:	200013d8 	.word	0x200013d8

080168e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80168e8:	b480      	push	{r7}
 80168ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80168ec:	4b07      	ldr	r3, [pc, #28]	@ (801690c <pvTaskIncrementMutexHeldCount+0x24>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d004      	beq.n	80168fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80168f4:	4b05      	ldr	r3, [pc, #20]	@ (801690c <pvTaskIncrementMutexHeldCount+0x24>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80168fa:	3201      	adds	r2, #1
 80168fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80168fe:	4b03      	ldr	r3, [pc, #12]	@ (801690c <pvTaskIncrementMutexHeldCount+0x24>)
 8016900:	681b      	ldr	r3, [r3, #0]
	}
 8016902:	4618      	mov	r0, r3
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr
 801690c:	20000efc 	.word	0x20000efc

08016910 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8016910:	b580      	push	{r7, lr}
 8016912:	b086      	sub	sp, #24
 8016914:	af00      	add	r7, sp, #0
 8016916:	60f8      	str	r0, [r7, #12]
 8016918:	60b9      	str	r1, [r7, #8]
 801691a:	607a      	str	r2, [r7, #4]
 801691c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801691e:	f000 fedb 	bl	80176d8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016922:	4b29      	ldr	r3, [pc, #164]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801692a:	b2db      	uxtb	r3, r3
 801692c:	2b02      	cmp	r3, #2
 801692e:	d01c      	beq.n	801696a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8016930:	4b25      	ldr	r3, [pc, #148]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8016938:	68fa      	ldr	r2, [r7, #12]
 801693a:	43d2      	mvns	r2, r2
 801693c:	400a      	ands	r2, r1
 801693e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016942:	4b21      	ldr	r3, [pc, #132]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2201      	movs	r2, #1
 8016948:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d00b      	beq.n	801696a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016952:	2101      	movs	r1, #1
 8016954:	6838      	ldr	r0, [r7, #0]
 8016956:	f000 f9e3 	bl	8016d20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801695a:	4b1c      	ldr	r3, [pc, #112]	@ (80169cc <xTaskNotifyWait+0xbc>)
 801695c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016960:	601a      	str	r2, [r3, #0]
 8016962:	f3bf 8f4f 	dsb	sy
 8016966:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801696a:	f000 fee7 	bl	801773c <vPortExitCritical>

		taskENTER_CRITICAL();
 801696e:	f000 feb3 	bl	80176d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d005      	beq.n	8016984 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8016978:	4b13      	ldr	r3, [pc, #76]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016984:	4b10      	ldr	r3, [pc, #64]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801698c:	b2db      	uxtb	r3, r3
 801698e:	2b02      	cmp	r3, #2
 8016990:	d002      	beq.n	8016998 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8016992:	2300      	movs	r3, #0
 8016994:	617b      	str	r3, [r7, #20]
 8016996:	e00a      	b.n	80169ae <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8016998:	4b0b      	ldr	r3, [pc, #44]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80169a0:	68ba      	ldr	r2, [r7, #8]
 80169a2:	43d2      	mvns	r2, r2
 80169a4:	400a      	ands	r2, r1
 80169a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80169aa:	2301      	movs	r3, #1
 80169ac:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80169ae:	4b06      	ldr	r3, [pc, #24]	@ (80169c8 <xTaskNotifyWait+0xb8>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	2200      	movs	r2, #0
 80169b4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80169b8:	f000 fec0 	bl	801773c <vPortExitCritical>

		return xReturn;
 80169bc:	697b      	ldr	r3, [r7, #20]
	}
 80169be:	4618      	mov	r0, r3
 80169c0:	3718      	adds	r7, #24
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	20000efc 	.word	0x20000efc
 80169cc:	e000ed04 	.word	0xe000ed04

080169d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b08a      	sub	sp, #40	@ 0x28
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	603b      	str	r3, [r7, #0]
 80169dc:	4613      	mov	r3, r2
 80169de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80169e0:	2301      	movs	r3, #1
 80169e2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d10b      	bne.n	8016a02 <xTaskGenericNotify+0x32>
	__asm volatile
 80169ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169ee:	f383 8811 	msr	BASEPRI, r3
 80169f2:	f3bf 8f6f 	isb	sy
 80169f6:	f3bf 8f4f 	dsb	sy
 80169fa:	61bb      	str	r3, [r7, #24]
}
 80169fc:	bf00      	nop
 80169fe:	bf00      	nop
 8016a00:	e7fd      	b.n	80169fe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8016a06:	f000 fe67 	bl	80176d8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d004      	beq.n	8016a1a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016a10:	6a3b      	ldr	r3, [r7, #32]
 8016a12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016a1a:	6a3b      	ldr	r3, [r7, #32]
 8016a1c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8016a20:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016a22:	6a3b      	ldr	r3, [r7, #32]
 8016a24:	2202      	movs	r2, #2
 8016a26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8016a2a:	79fb      	ldrb	r3, [r7, #7]
 8016a2c:	2b04      	cmp	r3, #4
 8016a2e:	d82e      	bhi.n	8016a8e <xTaskGenericNotify+0xbe>
 8016a30:	a201      	add	r2, pc, #4	@ (adr r2, 8016a38 <xTaskGenericNotify+0x68>)
 8016a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a36:	bf00      	nop
 8016a38:	08016ab3 	.word	0x08016ab3
 8016a3c:	08016a4d 	.word	0x08016a4d
 8016a40:	08016a5f 	.word	0x08016a5f
 8016a44:	08016a6f 	.word	0x08016a6f
 8016a48:	08016a79 	.word	0x08016a79
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8016a4c:	6a3b      	ldr	r3, [r7, #32]
 8016a4e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	431a      	orrs	r2, r3
 8016a56:	6a3b      	ldr	r3, [r7, #32]
 8016a58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8016a5c:	e02c      	b.n	8016ab8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8016a5e:	6a3b      	ldr	r3, [r7, #32]
 8016a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016a64:	1c5a      	adds	r2, r3, #1
 8016a66:	6a3b      	ldr	r3, [r7, #32]
 8016a68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8016a6c:	e024      	b.n	8016ab8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8016a6e:	6a3b      	ldr	r3, [r7, #32]
 8016a70:	68ba      	ldr	r2, [r7, #8]
 8016a72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8016a76:	e01f      	b.n	8016ab8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016a78:	7ffb      	ldrb	r3, [r7, #31]
 8016a7a:	2b02      	cmp	r3, #2
 8016a7c:	d004      	beq.n	8016a88 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8016a7e:	6a3b      	ldr	r3, [r7, #32]
 8016a80:	68ba      	ldr	r2, [r7, #8]
 8016a82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016a86:	e017      	b.n	8016ab8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8016a8c:	e014      	b.n	8016ab8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016a8e:	6a3b      	ldr	r3, [r7, #32]
 8016a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a98:	d00d      	beq.n	8016ab6 <xTaskGenericNotify+0xe6>
	__asm volatile
 8016a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a9e:	f383 8811 	msr	BASEPRI, r3
 8016aa2:	f3bf 8f6f 	isb	sy
 8016aa6:	f3bf 8f4f 	dsb	sy
 8016aaa:	617b      	str	r3, [r7, #20]
}
 8016aac:	bf00      	nop
 8016aae:	bf00      	nop
 8016ab0:	e7fd      	b.n	8016aae <xTaskGenericNotify+0xde>
					break;
 8016ab2:	bf00      	nop
 8016ab4:	e000      	b.n	8016ab8 <xTaskGenericNotify+0xe8>

					break;
 8016ab6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016ab8:	7ffb      	ldrb	r3, [r7, #31]
 8016aba:	2b01      	cmp	r3, #1
 8016abc:	d13b      	bne.n	8016b36 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016abe:	6a3b      	ldr	r3, [r7, #32]
 8016ac0:	3304      	adds	r3, #4
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7fd ff2e 	bl	8014924 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8016ac8:	6a3b      	ldr	r3, [r7, #32]
 8016aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016acc:	4b1d      	ldr	r3, [pc, #116]	@ (8016b44 <xTaskGenericNotify+0x174>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d903      	bls.n	8016adc <xTaskGenericNotify+0x10c>
 8016ad4:	6a3b      	ldr	r3, [r7, #32]
 8016ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8016b44 <xTaskGenericNotify+0x174>)
 8016ada:	6013      	str	r3, [r2, #0]
 8016adc:	6a3b      	ldr	r3, [r7, #32]
 8016ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	009b      	lsls	r3, r3, #2
 8016ae4:	4413      	add	r3, r2
 8016ae6:	009b      	lsls	r3, r3, #2
 8016ae8:	4a17      	ldr	r2, [pc, #92]	@ (8016b48 <xTaskGenericNotify+0x178>)
 8016aea:	441a      	add	r2, r3
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	3304      	adds	r3, #4
 8016af0:	4619      	mov	r1, r3
 8016af2:	4610      	mov	r0, r2
 8016af4:	f7fd feb9 	bl	801486a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016af8:	6a3b      	ldr	r3, [r7, #32]
 8016afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d00b      	beq.n	8016b18 <xTaskGenericNotify+0x148>
	__asm volatile
 8016b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b04:	f383 8811 	msr	BASEPRI, r3
 8016b08:	f3bf 8f6f 	isb	sy
 8016b0c:	f3bf 8f4f 	dsb	sy
 8016b10:	613b      	str	r3, [r7, #16]
}
 8016b12:	bf00      	nop
 8016b14:	bf00      	nop
 8016b16:	e7fd      	b.n	8016b14 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b18:	6a3b      	ldr	r3, [r7, #32]
 8016b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8016b4c <xTaskGenericNotify+0x17c>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d907      	bls.n	8016b36 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8016b26:	4b0a      	ldr	r3, [pc, #40]	@ (8016b50 <xTaskGenericNotify+0x180>)
 8016b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016b2c:	601a      	str	r2, [r3, #0]
 8016b2e:	f3bf 8f4f 	dsb	sy
 8016b32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016b36:	f000 fe01 	bl	801773c <vPortExitCritical>

		return xReturn;
 8016b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3728      	adds	r7, #40	@ 0x28
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	200013d8 	.word	0x200013d8
 8016b48:	20000f00 	.word	0x20000f00
 8016b4c:	20000efc 	.word	0x20000efc
 8016b50:	e000ed04 	.word	0xe000ed04

08016b54 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b08e      	sub	sp, #56	@ 0x38
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	60f8      	str	r0, [r7, #12]
 8016b5c:	60b9      	str	r1, [r7, #8]
 8016b5e:	603b      	str	r3, [r7, #0]
 8016b60:	4613      	mov	r3, r2
 8016b62:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8016b64:	2301      	movs	r3, #1
 8016b66:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d10b      	bne.n	8016b86 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016b80:	bf00      	nop
 8016b82:	bf00      	nop
 8016b84:	e7fd      	b.n	8016b82 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b86:	f000 fe87 	bl	8017898 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8016b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8016b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b96:	f383 8811 	msr	BASEPRI, r3
 8016b9a:	f3bf 8f6f 	isb	sy
 8016b9e:	f3bf 8f4f 	dsb	sy
 8016ba2:	623a      	str	r2, [r7, #32]
 8016ba4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8016ba6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d004      	beq.n	8016bba <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bb2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bbc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8016bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bc6:	2202      	movs	r2, #2
 8016bc8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8016bcc:	79fb      	ldrb	r3, [r7, #7]
 8016bce:	2b04      	cmp	r3, #4
 8016bd0:	d82e      	bhi.n	8016c30 <xTaskGenericNotifyFromISR+0xdc>
 8016bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8016bd8 <xTaskGenericNotifyFromISR+0x84>)
 8016bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bd8:	08016c55 	.word	0x08016c55
 8016bdc:	08016bed 	.word	0x08016bed
 8016be0:	08016bff 	.word	0x08016bff
 8016be4:	08016c0f 	.word	0x08016c0f
 8016be8:	08016c19 	.word	0x08016c19
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8016bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	431a      	orrs	r2, r3
 8016bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bf8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8016bfc:	e02d      	b.n	8016c5a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8016bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016c04:	1c5a      	adds	r2, r3, #1
 8016c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8016c0c:	e025      	b.n	8016c5a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8016c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8016c16:	e020      	b.n	8016c5a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016c18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c1c:	2b02      	cmp	r3, #2
 8016c1e:	d004      	beq.n	8016c2a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8016c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c22:	68ba      	ldr	r2, [r7, #8]
 8016c24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016c28:	e017      	b.n	8016c5a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8016c2e:	e014      	b.n	8016c5a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c3a:	d00d      	beq.n	8016c58 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8016c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c40:	f383 8811 	msr	BASEPRI, r3
 8016c44:	f3bf 8f6f 	isb	sy
 8016c48:	f3bf 8f4f 	dsb	sy
 8016c4c:	61bb      	str	r3, [r7, #24]
}
 8016c4e:	bf00      	nop
 8016c50:	bf00      	nop
 8016c52:	e7fd      	b.n	8016c50 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8016c54:	bf00      	nop
 8016c56:	e000      	b.n	8016c5a <xTaskGenericNotifyFromISR+0x106>
					break;
 8016c58:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d147      	bne.n	8016cf2 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d00b      	beq.n	8016c82 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8016c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c6e:	f383 8811 	msr	BASEPRI, r3
 8016c72:	f3bf 8f6f 	isb	sy
 8016c76:	f3bf 8f4f 	dsb	sy
 8016c7a:	617b      	str	r3, [r7, #20]
}
 8016c7c:	bf00      	nop
 8016c7e:	bf00      	nop
 8016c80:	e7fd      	b.n	8016c7e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c82:	4b21      	ldr	r3, [pc, #132]	@ (8016d08 <xTaskGenericNotifyFromISR+0x1b4>)
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d11d      	bne.n	8016cc6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c8c:	3304      	adds	r3, #4
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7fd fe48 	bl	8014924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c98:	4b1c      	ldr	r3, [pc, #112]	@ (8016d0c <xTaskGenericNotifyFromISR+0x1b8>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d903      	bls.n	8016ca8 <xTaskGenericNotifyFromISR+0x154>
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ca4:	4a19      	ldr	r2, [pc, #100]	@ (8016d0c <xTaskGenericNotifyFromISR+0x1b8>)
 8016ca6:	6013      	str	r3, [r2, #0]
 8016ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cac:	4613      	mov	r3, r2
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	4413      	add	r3, r2
 8016cb2:	009b      	lsls	r3, r3, #2
 8016cb4:	4a16      	ldr	r2, [pc, #88]	@ (8016d10 <xTaskGenericNotifyFromISR+0x1bc>)
 8016cb6:	441a      	add	r2, r3
 8016cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cba:	3304      	adds	r3, #4
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	4610      	mov	r0, r2
 8016cc0:	f7fd fdd3 	bl	801486a <vListInsertEnd>
 8016cc4:	e005      	b.n	8016cd2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cc8:	3318      	adds	r3, #24
 8016cca:	4619      	mov	r1, r3
 8016ccc:	4811      	ldr	r0, [pc, #68]	@ (8016d14 <xTaskGenericNotifyFromISR+0x1c0>)
 8016cce:	f7fd fdcc 	bl	801486a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cd6:	4b10      	ldr	r3, [pc, #64]	@ (8016d18 <xTaskGenericNotifyFromISR+0x1c4>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d908      	bls.n	8016cf2 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8016ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d002      	beq.n	8016cec <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ce8:	2201      	movs	r2, #1
 8016cea:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8016cec:	4b0b      	ldr	r3, [pc, #44]	@ (8016d1c <xTaskGenericNotifyFromISR+0x1c8>)
 8016cee:	2201      	movs	r2, #1
 8016cf0:	601a      	str	r2, [r3, #0]
 8016cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	f383 8811 	msr	BASEPRI, r3
}
 8016cfc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8016cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8016d00:	4618      	mov	r0, r3
 8016d02:	3738      	adds	r7, #56	@ 0x38
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	200013f8 	.word	0x200013f8
 8016d0c:	200013d8 	.word	0x200013d8
 8016d10:	20000f00 	.word	0x20000f00
 8016d14:	20001390 	.word	0x20001390
 8016d18:	20000efc 	.word	0x20000efc
 8016d1c:	200013e4 	.word	0x200013e4

08016d20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
 8016d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016d2a:	4b21      	ldr	r3, [pc, #132]	@ (8016db0 <prvAddCurrentTaskToDelayedList+0x90>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d30:	4b20      	ldr	r3, [pc, #128]	@ (8016db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	3304      	adds	r3, #4
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7fd fdf4 	bl	8014924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d42:	d10a      	bne.n	8016d5a <prvAddCurrentTaskToDelayedList+0x3a>
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d007      	beq.n	8016d5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8016db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	3304      	adds	r3, #4
 8016d50:	4619      	mov	r1, r3
 8016d52:	4819      	ldr	r0, [pc, #100]	@ (8016db8 <prvAddCurrentTaskToDelayedList+0x98>)
 8016d54:	f7fd fd89 	bl	801486a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016d58:	e026      	b.n	8016da8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016d5a:	68fa      	ldr	r2, [r7, #12]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	4413      	add	r3, r2
 8016d60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016d62:	4b14      	ldr	r3, [pc, #80]	@ (8016db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	68ba      	ldr	r2, [r7, #8]
 8016d68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016d6a:	68ba      	ldr	r2, [r7, #8]
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d209      	bcs.n	8016d86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d72:	4b12      	ldr	r3, [pc, #72]	@ (8016dbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8016d74:	681a      	ldr	r2, [r3, #0]
 8016d76:	4b0f      	ldr	r3, [pc, #60]	@ (8016db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	3304      	adds	r3, #4
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	4610      	mov	r0, r2
 8016d80:	f7fd fd97 	bl	80148b2 <vListInsert>
}
 8016d84:	e010      	b.n	8016da8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d86:	4b0e      	ldr	r3, [pc, #56]	@ (8016dc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8016db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	3304      	adds	r3, #4
 8016d90:	4619      	mov	r1, r3
 8016d92:	4610      	mov	r0, r2
 8016d94:	f7fd fd8d 	bl	80148b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016d98:	4b0a      	ldr	r3, [pc, #40]	@ (8016dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	68ba      	ldr	r2, [r7, #8]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d202      	bcs.n	8016da8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016da2:	4a08      	ldr	r2, [pc, #32]	@ (8016dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	6013      	str	r3, [r2, #0]
}
 8016da8:	bf00      	nop
 8016daa:	3710      	adds	r7, #16
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}
 8016db0:	200013d4 	.word	0x200013d4
 8016db4:	20000efc 	.word	0x20000efc
 8016db8:	200013bc 	.word	0x200013bc
 8016dbc:	2000138c 	.word	0x2000138c
 8016dc0:	20001388 	.word	0x20001388
 8016dc4:	200013f0 	.word	0x200013f0

08016dc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b08a      	sub	sp, #40	@ 0x28
 8016dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016dd2:	f000 fb13 	bl	80173fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8016e4c <xTimerCreateTimerTask+0x84>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d021      	beq.n	8016e22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016dde:	2300      	movs	r3, #0
 8016de0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016de2:	2300      	movs	r3, #0
 8016de4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016de6:	1d3a      	adds	r2, r7, #4
 8016de8:	f107 0108 	add.w	r1, r7, #8
 8016dec:	f107 030c 	add.w	r3, r7, #12
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7fd fcf3 	bl	80147dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016df6:	6879      	ldr	r1, [r7, #4]
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	68fa      	ldr	r2, [r7, #12]
 8016dfc:	9202      	str	r2, [sp, #8]
 8016dfe:	9301      	str	r3, [sp, #4]
 8016e00:	2302      	movs	r3, #2
 8016e02:	9300      	str	r3, [sp, #0]
 8016e04:	2300      	movs	r3, #0
 8016e06:	460a      	mov	r2, r1
 8016e08:	4911      	ldr	r1, [pc, #68]	@ (8016e50 <xTimerCreateTimerTask+0x88>)
 8016e0a:	4812      	ldr	r0, [pc, #72]	@ (8016e54 <xTimerCreateTimerTask+0x8c>)
 8016e0c:	f7fe fd4c 	bl	80158a8 <xTaskCreateStatic>
 8016e10:	4603      	mov	r3, r0
 8016e12:	4a11      	ldr	r2, [pc, #68]	@ (8016e58 <xTimerCreateTimerTask+0x90>)
 8016e14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016e16:	4b10      	ldr	r3, [pc, #64]	@ (8016e58 <xTimerCreateTimerTask+0x90>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d001      	beq.n	8016e22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016e1e:	2301      	movs	r3, #1
 8016e20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016e22:	697b      	ldr	r3, [r7, #20]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d10b      	bne.n	8016e40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8016e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e2c:	f383 8811 	msr	BASEPRI, r3
 8016e30:	f3bf 8f6f 	isb	sy
 8016e34:	f3bf 8f4f 	dsb	sy
 8016e38:	613b      	str	r3, [r7, #16]
}
 8016e3a:	bf00      	nop
 8016e3c:	bf00      	nop
 8016e3e:	e7fd      	b.n	8016e3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016e40:	697b      	ldr	r3, [r7, #20]
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3718      	adds	r7, #24
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	2000142c 	.word	0x2000142c
 8016e50:	0801d484 	.word	0x0801d484
 8016e54:	08016f95 	.word	0x08016f95
 8016e58:	20001430 	.word	0x20001430

08016e5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b08a      	sub	sp, #40	@ 0x28
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	60f8      	str	r0, [r7, #12]
 8016e64:	60b9      	str	r1, [r7, #8]
 8016e66:	607a      	str	r2, [r7, #4]
 8016e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d10b      	bne.n	8016e8c <xTimerGenericCommand+0x30>
	__asm volatile
 8016e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e78:	f383 8811 	msr	BASEPRI, r3
 8016e7c:	f3bf 8f6f 	isb	sy
 8016e80:	f3bf 8f4f 	dsb	sy
 8016e84:	623b      	str	r3, [r7, #32]
}
 8016e86:	bf00      	nop
 8016e88:	bf00      	nop
 8016e8a:	e7fd      	b.n	8016e88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016e8c:	4b19      	ldr	r3, [pc, #100]	@ (8016ef4 <xTimerGenericCommand+0x98>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d02a      	beq.n	8016eea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	2b05      	cmp	r3, #5
 8016ea4:	dc18      	bgt.n	8016ed8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016ea6:	f7ff fba5 	bl	80165f4 <xTaskGetSchedulerState>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b02      	cmp	r3, #2
 8016eae:	d109      	bne.n	8016ec4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016eb0:	4b10      	ldr	r3, [pc, #64]	@ (8016ef4 <xTimerGenericCommand+0x98>)
 8016eb2:	6818      	ldr	r0, [r3, #0]
 8016eb4:	f107 0110 	add.w	r1, r7, #16
 8016eb8:	2300      	movs	r3, #0
 8016eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ebc:	f7fd ff5a 	bl	8014d74 <xQueueGenericSend>
 8016ec0:	6278      	str	r0, [r7, #36]	@ 0x24
 8016ec2:	e012      	b.n	8016eea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8016ef4 <xTimerGenericCommand+0x98>)
 8016ec6:	6818      	ldr	r0, [r3, #0]
 8016ec8:	f107 0110 	add.w	r1, r7, #16
 8016ecc:	2300      	movs	r3, #0
 8016ece:	2200      	movs	r2, #0
 8016ed0:	f7fd ff50 	bl	8014d74 <xQueueGenericSend>
 8016ed4:	6278      	str	r0, [r7, #36]	@ 0x24
 8016ed6:	e008      	b.n	8016eea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016ed8:	4b06      	ldr	r3, [pc, #24]	@ (8016ef4 <xTimerGenericCommand+0x98>)
 8016eda:	6818      	ldr	r0, [r3, #0]
 8016edc:	f107 0110 	add.w	r1, r7, #16
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	683a      	ldr	r2, [r7, #0]
 8016ee4:	f7fe f848 	bl	8014f78 <xQueueGenericSendFromISR>
 8016ee8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3728      	adds	r7, #40	@ 0x28
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	2000142c 	.word	0x2000142c

08016ef8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b088      	sub	sp, #32
 8016efc:	af02      	add	r7, sp, #8
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f02:	4b23      	ldr	r3, [pc, #140]	@ (8016f90 <prvProcessExpiredTimer+0x98>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	68db      	ldr	r3, [r3, #12]
 8016f0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016f0c:	697b      	ldr	r3, [r7, #20]
 8016f0e:	3304      	adds	r3, #4
 8016f10:	4618      	mov	r0, r3
 8016f12:	f7fd fd07 	bl	8014924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016f1c:	f003 0304 	and.w	r3, r3, #4
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d023      	beq.n	8016f6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	699a      	ldr	r2, [r3, #24]
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	18d1      	adds	r1, r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	683a      	ldr	r2, [r7, #0]
 8016f30:	6978      	ldr	r0, [r7, #20]
 8016f32:	f000 f8d5 	bl	80170e0 <prvInsertTimerInActiveList>
 8016f36:	4603      	mov	r3, r0
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d020      	beq.n	8016f7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	2300      	movs	r3, #0
 8016f42:	687a      	ldr	r2, [r7, #4]
 8016f44:	2100      	movs	r1, #0
 8016f46:	6978      	ldr	r0, [r7, #20]
 8016f48:	f7ff ff88 	bl	8016e5c <xTimerGenericCommand>
 8016f4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d114      	bne.n	8016f7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8016f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f58:	f383 8811 	msr	BASEPRI, r3
 8016f5c:	f3bf 8f6f 	isb	sy
 8016f60:	f3bf 8f4f 	dsb	sy
 8016f64:	60fb      	str	r3, [r7, #12]
}
 8016f66:	bf00      	nop
 8016f68:	bf00      	nop
 8016f6a:	e7fd      	b.n	8016f68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016f6c:	697b      	ldr	r3, [r7, #20]
 8016f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016f72:	f023 0301 	bic.w	r3, r3, #1
 8016f76:	b2da      	uxtb	r2, r3
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	6a1b      	ldr	r3, [r3, #32]
 8016f82:	6978      	ldr	r0, [r7, #20]
 8016f84:	4798      	blx	r3
}
 8016f86:	bf00      	nop
 8016f88:	3718      	adds	r7, #24
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
 8016f8e:	bf00      	nop
 8016f90:	20001424 	.word	0x20001424

08016f94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b084      	sub	sp, #16
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016f9c:	f107 0308 	add.w	r3, r7, #8
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f000 f859 	bl	8017058 <prvGetNextExpireTime>
 8016fa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	4619      	mov	r1, r3
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f000 f805 	bl	8016fbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016fb2:	f000 f8d7 	bl	8017164 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016fb6:	bf00      	nop
 8016fb8:	e7f0      	b.n	8016f9c <prvTimerTask+0x8>
	...

08016fbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b084      	sub	sp, #16
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
 8016fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016fc6:	f7fe ff11 	bl	8015dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016fca:	f107 0308 	add.w	r3, r7, #8
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f000 f866 	bl	80170a0 <prvSampleTimeNow>
 8016fd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d130      	bne.n	801703e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d10a      	bne.n	8016ff8 <prvProcessTimerOrBlockTask+0x3c>
 8016fe2:	687a      	ldr	r2, [r7, #4]
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d806      	bhi.n	8016ff8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016fea:	f7fe ff0d 	bl	8015e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016fee:	68f9      	ldr	r1, [r7, #12]
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f7ff ff81 	bl	8016ef8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016ff6:	e024      	b.n	8017042 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d008      	beq.n	8017010 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016ffe:	4b13      	ldr	r3, [pc, #76]	@ (801704c <prvProcessTimerOrBlockTask+0x90>)
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d101      	bne.n	801700c <prvProcessTimerOrBlockTask+0x50>
 8017008:	2301      	movs	r3, #1
 801700a:	e000      	b.n	801700e <prvProcessTimerOrBlockTask+0x52>
 801700c:	2300      	movs	r3, #0
 801700e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017010:	4b0f      	ldr	r3, [pc, #60]	@ (8017050 <prvProcessTimerOrBlockTask+0x94>)
 8017012:	6818      	ldr	r0, [r3, #0]
 8017014:	687a      	ldr	r2, [r7, #4]
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	1ad3      	subs	r3, r2, r3
 801701a:	683a      	ldr	r2, [r7, #0]
 801701c:	4619      	mov	r1, r3
 801701e:	f7fe fc0f 	bl	8015840 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017022:	f7fe fef1 	bl	8015e08 <xTaskResumeAll>
 8017026:	4603      	mov	r3, r0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d10a      	bne.n	8017042 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801702c:	4b09      	ldr	r3, [pc, #36]	@ (8017054 <prvProcessTimerOrBlockTask+0x98>)
 801702e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017032:	601a      	str	r2, [r3, #0]
 8017034:	f3bf 8f4f 	dsb	sy
 8017038:	f3bf 8f6f 	isb	sy
}
 801703c:	e001      	b.n	8017042 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801703e:	f7fe fee3 	bl	8015e08 <xTaskResumeAll>
}
 8017042:	bf00      	nop
 8017044:	3710      	adds	r7, #16
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	20001428 	.word	0x20001428
 8017050:	2000142c 	.word	0x2000142c
 8017054:	e000ed04 	.word	0xe000ed04

08017058 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017058:	b480      	push	{r7}
 801705a:	b085      	sub	sp, #20
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017060:	4b0e      	ldr	r3, [pc, #56]	@ (801709c <prvGetNextExpireTime+0x44>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d101      	bne.n	801706e <prvGetNextExpireTime+0x16>
 801706a:	2201      	movs	r2, #1
 801706c:	e000      	b.n	8017070 <prvGetNextExpireTime+0x18>
 801706e:	2200      	movs	r2, #0
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d105      	bne.n	8017088 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801707c:	4b07      	ldr	r3, [pc, #28]	@ (801709c <prvGetNextExpireTime+0x44>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	68db      	ldr	r3, [r3, #12]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	60fb      	str	r3, [r7, #12]
 8017086:	e001      	b.n	801708c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017088:	2300      	movs	r3, #0
 801708a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801708c:	68fb      	ldr	r3, [r7, #12]
}
 801708e:	4618      	mov	r0, r3
 8017090:	3714      	adds	r7, #20
 8017092:	46bd      	mov	sp, r7
 8017094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017098:	4770      	bx	lr
 801709a:	bf00      	nop
 801709c:	20001424 	.word	0x20001424

080170a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b084      	sub	sp, #16
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80170a8:	f7fe ff4c 	bl	8015f44 <xTaskGetTickCount>
 80170ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80170ae:	4b0b      	ldr	r3, [pc, #44]	@ (80170dc <prvSampleTimeNow+0x3c>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	68fa      	ldr	r2, [r7, #12]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d205      	bcs.n	80170c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80170b8:	f000 f93a 	bl	8017330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2201      	movs	r2, #1
 80170c0:	601a      	str	r2, [r3, #0]
 80170c2:	e002      	b.n	80170ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2200      	movs	r2, #0
 80170c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80170ca:	4a04      	ldr	r2, [pc, #16]	@ (80170dc <prvSampleTimeNow+0x3c>)
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80170d0:	68fb      	ldr	r3, [r7, #12]
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3710      	adds	r7, #16
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	20001434 	.word	0x20001434

080170e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b086      	sub	sp, #24
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80170ee:	2300      	movs	r3, #0
 80170f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	68ba      	ldr	r2, [r7, #8]
 80170f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	68fa      	ldr	r2, [r7, #12]
 80170fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80170fe:	68ba      	ldr	r2, [r7, #8]
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	429a      	cmp	r2, r3
 8017104:	d812      	bhi.n	801712c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	1ad2      	subs	r2, r2, r3
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	699b      	ldr	r3, [r3, #24]
 8017110:	429a      	cmp	r2, r3
 8017112:	d302      	bcc.n	801711a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017114:	2301      	movs	r3, #1
 8017116:	617b      	str	r3, [r7, #20]
 8017118:	e01b      	b.n	8017152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801711a:	4b10      	ldr	r3, [pc, #64]	@ (801715c <prvInsertTimerInActiveList+0x7c>)
 801711c:	681a      	ldr	r2, [r3, #0]
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	3304      	adds	r3, #4
 8017122:	4619      	mov	r1, r3
 8017124:	4610      	mov	r0, r2
 8017126:	f7fd fbc4 	bl	80148b2 <vListInsert>
 801712a:	e012      	b.n	8017152 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801712c:	687a      	ldr	r2, [r7, #4]
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	429a      	cmp	r2, r3
 8017132:	d206      	bcs.n	8017142 <prvInsertTimerInActiveList+0x62>
 8017134:	68ba      	ldr	r2, [r7, #8]
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	429a      	cmp	r2, r3
 801713a:	d302      	bcc.n	8017142 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801713c:	2301      	movs	r3, #1
 801713e:	617b      	str	r3, [r7, #20]
 8017140:	e007      	b.n	8017152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017142:	4b07      	ldr	r3, [pc, #28]	@ (8017160 <prvInsertTimerInActiveList+0x80>)
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	3304      	adds	r3, #4
 801714a:	4619      	mov	r1, r3
 801714c:	4610      	mov	r0, r2
 801714e:	f7fd fbb0 	bl	80148b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017152:	697b      	ldr	r3, [r7, #20]
}
 8017154:	4618      	mov	r0, r3
 8017156:	3718      	adds	r7, #24
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}
 801715c:	20001428 	.word	0x20001428
 8017160:	20001424 	.word	0x20001424

08017164 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b08e      	sub	sp, #56	@ 0x38
 8017168:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801716a:	e0ce      	b.n	801730a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2b00      	cmp	r3, #0
 8017170:	da19      	bge.n	80171a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017172:	1d3b      	adds	r3, r7, #4
 8017174:	3304      	adds	r3, #4
 8017176:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801717a:	2b00      	cmp	r3, #0
 801717c:	d10b      	bne.n	8017196 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017182:	f383 8811 	msr	BASEPRI, r3
 8017186:	f3bf 8f6f 	isb	sy
 801718a:	f3bf 8f4f 	dsb	sy
 801718e:	61fb      	str	r3, [r7, #28]
}
 8017190:	bf00      	nop
 8017192:	bf00      	nop
 8017194:	e7fd      	b.n	8017192 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801719c:	6850      	ldr	r0, [r2, #4]
 801719e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80171a0:	6892      	ldr	r2, [r2, #8]
 80171a2:	4611      	mov	r1, r2
 80171a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f2c0 80ae 	blt.w	801730a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80171b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171b4:	695b      	ldr	r3, [r3, #20]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d004      	beq.n	80171c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80171ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171bc:	3304      	adds	r3, #4
 80171be:	4618      	mov	r0, r3
 80171c0:	f7fd fbb0 	bl	8014924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80171c4:	463b      	mov	r3, r7
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7ff ff6a 	bl	80170a0 <prvSampleTimeNow>
 80171cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2b09      	cmp	r3, #9
 80171d2:	f200 8097 	bhi.w	8017304 <prvProcessReceivedCommands+0x1a0>
 80171d6:	a201      	add	r2, pc, #4	@ (adr r2, 80171dc <prvProcessReceivedCommands+0x78>)
 80171d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171dc:	08017205 	.word	0x08017205
 80171e0:	08017205 	.word	0x08017205
 80171e4:	08017205 	.word	0x08017205
 80171e8:	0801727b 	.word	0x0801727b
 80171ec:	0801728f 	.word	0x0801728f
 80171f0:	080172db 	.word	0x080172db
 80171f4:	08017205 	.word	0x08017205
 80171f8:	08017205 	.word	0x08017205
 80171fc:	0801727b 	.word	0x0801727b
 8017200:	0801728f 	.word	0x0801728f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017206:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801720a:	f043 0301 	orr.w	r3, r3, #1
 801720e:	b2da      	uxtb	r2, r3
 8017210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017212:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017216:	68ba      	ldr	r2, [r7, #8]
 8017218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801721a:	699b      	ldr	r3, [r3, #24]
 801721c:	18d1      	adds	r1, r2, r3
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017224:	f7ff ff5c 	bl	80170e0 <prvInsertTimerInActiveList>
 8017228:	4603      	mov	r3, r0
 801722a:	2b00      	cmp	r3, #0
 801722c:	d06c      	beq.n	8017308 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017230:	6a1b      	ldr	r3, [r3, #32]
 8017232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017234:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801723c:	f003 0304 	and.w	r3, r3, #4
 8017240:	2b00      	cmp	r3, #0
 8017242:	d061      	beq.n	8017308 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017248:	699b      	ldr	r3, [r3, #24]
 801724a:	441a      	add	r2, r3
 801724c:	2300      	movs	r3, #0
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	2300      	movs	r3, #0
 8017252:	2100      	movs	r1, #0
 8017254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017256:	f7ff fe01 	bl	8016e5c <xTimerGenericCommand>
 801725a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801725c:	6a3b      	ldr	r3, [r7, #32]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d152      	bne.n	8017308 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8017262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017266:	f383 8811 	msr	BASEPRI, r3
 801726a:	f3bf 8f6f 	isb	sy
 801726e:	f3bf 8f4f 	dsb	sy
 8017272:	61bb      	str	r3, [r7, #24]
}
 8017274:	bf00      	nop
 8017276:	bf00      	nop
 8017278:	e7fd      	b.n	8017276 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801727c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017280:	f023 0301 	bic.w	r3, r3, #1
 8017284:	b2da      	uxtb	r2, r3
 8017286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801728c:	e03d      	b.n	801730a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017294:	f043 0301 	orr.w	r3, r3, #1
 8017298:	b2da      	uxtb	r2, r3
 801729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801729c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80172a0:	68ba      	ldr	r2, [r7, #8]
 80172a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80172a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172a8:	699b      	ldr	r3, [r3, #24]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d10b      	bne.n	80172c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80172ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172b2:	f383 8811 	msr	BASEPRI, r3
 80172b6:	f3bf 8f6f 	isb	sy
 80172ba:	f3bf 8f4f 	dsb	sy
 80172be:	617b      	str	r3, [r7, #20]
}
 80172c0:	bf00      	nop
 80172c2:	bf00      	nop
 80172c4:	e7fd      	b.n	80172c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80172c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172c8:	699a      	ldr	r2, [r3, #24]
 80172ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172cc:	18d1      	adds	r1, r2, r3
 80172ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80172d4:	f7ff ff04 	bl	80170e0 <prvInsertTimerInActiveList>
					break;
 80172d8:	e017      	b.n	801730a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80172da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80172e0:	f003 0302 	and.w	r3, r3, #2
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d103      	bne.n	80172f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80172e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80172ea:	f000 fbe5 	bl	8017ab8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80172ee:	e00c      	b.n	801730a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80172f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80172f6:	f023 0301 	bic.w	r3, r3, #1
 80172fa:	b2da      	uxtb	r2, r3
 80172fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017302:	e002      	b.n	801730a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8017304:	bf00      	nop
 8017306:	e000      	b.n	801730a <prvProcessReceivedCommands+0x1a6>
					break;
 8017308:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801730a:	4b08      	ldr	r3, [pc, #32]	@ (801732c <prvProcessReceivedCommands+0x1c8>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	1d39      	adds	r1, r7, #4
 8017310:	2200      	movs	r2, #0
 8017312:	4618      	mov	r0, r3
 8017314:	f7fd fece 	bl	80150b4 <xQueueReceive>
 8017318:	4603      	mov	r3, r0
 801731a:	2b00      	cmp	r3, #0
 801731c:	f47f af26 	bne.w	801716c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017320:	bf00      	nop
 8017322:	bf00      	nop
 8017324:	3730      	adds	r7, #48	@ 0x30
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}
 801732a:	bf00      	nop
 801732c:	2000142c 	.word	0x2000142c

08017330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b088      	sub	sp, #32
 8017334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017336:	e049      	b.n	80173cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017338:	4b2e      	ldr	r3, [pc, #184]	@ (80173f4 <prvSwitchTimerLists+0xc4>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	68db      	ldr	r3, [r3, #12]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017342:	4b2c      	ldr	r3, [pc, #176]	@ (80173f4 <prvSwitchTimerLists+0xc4>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	68db      	ldr	r3, [r3, #12]
 8017348:	68db      	ldr	r3, [r3, #12]
 801734a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	3304      	adds	r3, #4
 8017350:	4618      	mov	r0, r3
 8017352:	f7fd fae7 	bl	8014924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	6a1b      	ldr	r3, [r3, #32]
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017364:	f003 0304 	and.w	r3, r3, #4
 8017368:	2b00      	cmp	r3, #0
 801736a:	d02f      	beq.n	80173cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	699b      	ldr	r3, [r3, #24]
 8017370:	693a      	ldr	r2, [r7, #16]
 8017372:	4413      	add	r3, r2
 8017374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017376:	68ba      	ldr	r2, [r7, #8]
 8017378:	693b      	ldr	r3, [r7, #16]
 801737a:	429a      	cmp	r2, r3
 801737c:	d90e      	bls.n	801739c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	68ba      	ldr	r2, [r7, #8]
 8017382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	68fa      	ldr	r2, [r7, #12]
 8017388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801738a:	4b1a      	ldr	r3, [pc, #104]	@ (80173f4 <prvSwitchTimerLists+0xc4>)
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	3304      	adds	r3, #4
 8017392:	4619      	mov	r1, r3
 8017394:	4610      	mov	r0, r2
 8017396:	f7fd fa8c 	bl	80148b2 <vListInsert>
 801739a:	e017      	b.n	80173cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801739c:	2300      	movs	r3, #0
 801739e:	9300      	str	r3, [sp, #0]
 80173a0:	2300      	movs	r3, #0
 80173a2:	693a      	ldr	r2, [r7, #16]
 80173a4:	2100      	movs	r1, #0
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f7ff fd58 	bl	8016e5c <xTimerGenericCommand>
 80173ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d10b      	bne.n	80173cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80173b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173b8:	f383 8811 	msr	BASEPRI, r3
 80173bc:	f3bf 8f6f 	isb	sy
 80173c0:	f3bf 8f4f 	dsb	sy
 80173c4:	603b      	str	r3, [r7, #0]
}
 80173c6:	bf00      	nop
 80173c8:	bf00      	nop
 80173ca:	e7fd      	b.n	80173c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80173cc:	4b09      	ldr	r3, [pc, #36]	@ (80173f4 <prvSwitchTimerLists+0xc4>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d1b0      	bne.n	8017338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80173d6:	4b07      	ldr	r3, [pc, #28]	@ (80173f4 <prvSwitchTimerLists+0xc4>)
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80173dc:	4b06      	ldr	r3, [pc, #24]	@ (80173f8 <prvSwitchTimerLists+0xc8>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	4a04      	ldr	r2, [pc, #16]	@ (80173f4 <prvSwitchTimerLists+0xc4>)
 80173e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80173e4:	4a04      	ldr	r2, [pc, #16]	@ (80173f8 <prvSwitchTimerLists+0xc8>)
 80173e6:	697b      	ldr	r3, [r7, #20]
 80173e8:	6013      	str	r3, [r2, #0]
}
 80173ea:	bf00      	nop
 80173ec:	3718      	adds	r7, #24
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	20001424 	.word	0x20001424
 80173f8:	20001428 	.word	0x20001428

080173fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017402:	f000 f969 	bl	80176d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017406:	4b15      	ldr	r3, [pc, #84]	@ (801745c <prvCheckForValidListAndQueue+0x60>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d120      	bne.n	8017450 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801740e:	4814      	ldr	r0, [pc, #80]	@ (8017460 <prvCheckForValidListAndQueue+0x64>)
 8017410:	f7fd f9fe 	bl	8014810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017414:	4813      	ldr	r0, [pc, #76]	@ (8017464 <prvCheckForValidListAndQueue+0x68>)
 8017416:	f7fd f9fb 	bl	8014810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801741a:	4b13      	ldr	r3, [pc, #76]	@ (8017468 <prvCheckForValidListAndQueue+0x6c>)
 801741c:	4a10      	ldr	r2, [pc, #64]	@ (8017460 <prvCheckForValidListAndQueue+0x64>)
 801741e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017420:	4b12      	ldr	r3, [pc, #72]	@ (801746c <prvCheckForValidListAndQueue+0x70>)
 8017422:	4a10      	ldr	r2, [pc, #64]	@ (8017464 <prvCheckForValidListAndQueue+0x68>)
 8017424:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017426:	2300      	movs	r3, #0
 8017428:	9300      	str	r3, [sp, #0]
 801742a:	4b11      	ldr	r3, [pc, #68]	@ (8017470 <prvCheckForValidListAndQueue+0x74>)
 801742c:	4a11      	ldr	r2, [pc, #68]	@ (8017474 <prvCheckForValidListAndQueue+0x78>)
 801742e:	2110      	movs	r1, #16
 8017430:	200a      	movs	r0, #10
 8017432:	f7fd fb0b 	bl	8014a4c <xQueueGenericCreateStatic>
 8017436:	4603      	mov	r3, r0
 8017438:	4a08      	ldr	r2, [pc, #32]	@ (801745c <prvCheckForValidListAndQueue+0x60>)
 801743a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801743c:	4b07      	ldr	r3, [pc, #28]	@ (801745c <prvCheckForValidListAndQueue+0x60>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d005      	beq.n	8017450 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017444:	4b05      	ldr	r3, [pc, #20]	@ (801745c <prvCheckForValidListAndQueue+0x60>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	490b      	ldr	r1, [pc, #44]	@ (8017478 <prvCheckForValidListAndQueue+0x7c>)
 801744a:	4618      	mov	r0, r3
 801744c:	f7fe f9ce 	bl	80157ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017450:	f000 f974 	bl	801773c <vPortExitCritical>
}
 8017454:	bf00      	nop
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}
 801745a:	bf00      	nop
 801745c:	2000142c 	.word	0x2000142c
 8017460:	200013fc 	.word	0x200013fc
 8017464:	20001410 	.word	0x20001410
 8017468:	20001424 	.word	0x20001424
 801746c:	20001428 	.word	0x20001428
 8017470:	200014d8 	.word	0x200014d8
 8017474:	20001438 	.word	0x20001438
 8017478:	0801d48c 	.word	0x0801d48c

0801747c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801747c:	b480      	push	{r7}
 801747e:	b085      	sub	sp, #20
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	3b04      	subs	r3, #4
 801748c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	3b04      	subs	r3, #4
 801749a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801749c:	68bb      	ldr	r3, [r7, #8]
 801749e:	f023 0201 	bic.w	r2, r3, #1
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	3b04      	subs	r3, #4
 80174aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80174ac:	4a0c      	ldr	r2, [pc, #48]	@ (80174e0 <pxPortInitialiseStack+0x64>)
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	3b14      	subs	r3, #20
 80174b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80174b8:	687a      	ldr	r2, [r7, #4]
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	3b04      	subs	r3, #4
 80174c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f06f 0202 	mvn.w	r2, #2
 80174ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	3b20      	subs	r3, #32
 80174d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80174d2:	68fb      	ldr	r3, [r7, #12]
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3714      	adds	r7, #20
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr
 80174e0:	080174e5 	.word	0x080174e5

080174e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80174e4:	b480      	push	{r7}
 80174e6:	b085      	sub	sp, #20
 80174e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80174ea:	2300      	movs	r3, #0
 80174ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80174ee:	4b13      	ldr	r3, [pc, #76]	@ (801753c <prvTaskExitError+0x58>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174f6:	d00b      	beq.n	8017510 <prvTaskExitError+0x2c>
	__asm volatile
 80174f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174fc:	f383 8811 	msr	BASEPRI, r3
 8017500:	f3bf 8f6f 	isb	sy
 8017504:	f3bf 8f4f 	dsb	sy
 8017508:	60fb      	str	r3, [r7, #12]
}
 801750a:	bf00      	nop
 801750c:	bf00      	nop
 801750e:	e7fd      	b.n	801750c <prvTaskExitError+0x28>
	__asm volatile
 8017510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017514:	f383 8811 	msr	BASEPRI, r3
 8017518:	f3bf 8f6f 	isb	sy
 801751c:	f3bf 8f4f 	dsb	sy
 8017520:	60bb      	str	r3, [r7, #8]
}
 8017522:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017524:	bf00      	nop
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d0fc      	beq.n	8017526 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801752c:	bf00      	nop
 801752e:	bf00      	nop
 8017530:	3714      	adds	r7, #20
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr
 801753a:	bf00      	nop
 801753c:	200000b4 	.word	0x200000b4

08017540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017540:	4b07      	ldr	r3, [pc, #28]	@ (8017560 <pxCurrentTCBConst2>)
 8017542:	6819      	ldr	r1, [r3, #0]
 8017544:	6808      	ldr	r0, [r1, #0]
 8017546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801754a:	f380 8809 	msr	PSP, r0
 801754e:	f3bf 8f6f 	isb	sy
 8017552:	f04f 0000 	mov.w	r0, #0
 8017556:	f380 8811 	msr	BASEPRI, r0
 801755a:	4770      	bx	lr
 801755c:	f3af 8000 	nop.w

08017560 <pxCurrentTCBConst2>:
 8017560:	20000efc 	.word	0x20000efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017564:	bf00      	nop
 8017566:	bf00      	nop

08017568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017568:	4808      	ldr	r0, [pc, #32]	@ (801758c <prvPortStartFirstTask+0x24>)
 801756a:	6800      	ldr	r0, [r0, #0]
 801756c:	6800      	ldr	r0, [r0, #0]
 801756e:	f380 8808 	msr	MSP, r0
 8017572:	f04f 0000 	mov.w	r0, #0
 8017576:	f380 8814 	msr	CONTROL, r0
 801757a:	b662      	cpsie	i
 801757c:	b661      	cpsie	f
 801757e:	f3bf 8f4f 	dsb	sy
 8017582:	f3bf 8f6f 	isb	sy
 8017586:	df00      	svc	0
 8017588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801758a:	bf00      	nop
 801758c:	e000ed08 	.word	0xe000ed08

08017590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b086      	sub	sp, #24
 8017594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017596:	4b47      	ldr	r3, [pc, #284]	@ (80176b4 <xPortStartScheduler+0x124>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	4a47      	ldr	r2, [pc, #284]	@ (80176b8 <xPortStartScheduler+0x128>)
 801759c:	4293      	cmp	r3, r2
 801759e:	d10b      	bne.n	80175b8 <xPortStartScheduler+0x28>
	__asm volatile
 80175a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175a4:	f383 8811 	msr	BASEPRI, r3
 80175a8:	f3bf 8f6f 	isb	sy
 80175ac:	f3bf 8f4f 	dsb	sy
 80175b0:	60fb      	str	r3, [r7, #12]
}
 80175b2:	bf00      	nop
 80175b4:	bf00      	nop
 80175b6:	e7fd      	b.n	80175b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80175b8:	4b3e      	ldr	r3, [pc, #248]	@ (80176b4 <xPortStartScheduler+0x124>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	4a3f      	ldr	r2, [pc, #252]	@ (80176bc <xPortStartScheduler+0x12c>)
 80175be:	4293      	cmp	r3, r2
 80175c0:	d10b      	bne.n	80175da <xPortStartScheduler+0x4a>
	__asm volatile
 80175c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175c6:	f383 8811 	msr	BASEPRI, r3
 80175ca:	f3bf 8f6f 	isb	sy
 80175ce:	f3bf 8f4f 	dsb	sy
 80175d2:	613b      	str	r3, [r7, #16]
}
 80175d4:	bf00      	nop
 80175d6:	bf00      	nop
 80175d8:	e7fd      	b.n	80175d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80175da:	4b39      	ldr	r3, [pc, #228]	@ (80176c0 <xPortStartScheduler+0x130>)
 80175dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	781b      	ldrb	r3, [r3, #0]
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	22ff      	movs	r2, #255	@ 0xff
 80175ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80175f4:	78fb      	ldrb	r3, [r7, #3]
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80175fc:	b2da      	uxtb	r2, r3
 80175fe:	4b31      	ldr	r3, [pc, #196]	@ (80176c4 <xPortStartScheduler+0x134>)
 8017600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017602:	4b31      	ldr	r3, [pc, #196]	@ (80176c8 <xPortStartScheduler+0x138>)
 8017604:	2207      	movs	r2, #7
 8017606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017608:	e009      	b.n	801761e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801760a:	4b2f      	ldr	r3, [pc, #188]	@ (80176c8 <xPortStartScheduler+0x138>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	3b01      	subs	r3, #1
 8017610:	4a2d      	ldr	r2, [pc, #180]	@ (80176c8 <xPortStartScheduler+0x138>)
 8017612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017614:	78fb      	ldrb	r3, [r7, #3]
 8017616:	b2db      	uxtb	r3, r3
 8017618:	005b      	lsls	r3, r3, #1
 801761a:	b2db      	uxtb	r3, r3
 801761c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801761e:	78fb      	ldrb	r3, [r7, #3]
 8017620:	b2db      	uxtb	r3, r3
 8017622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017626:	2b80      	cmp	r3, #128	@ 0x80
 8017628:	d0ef      	beq.n	801760a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801762a:	4b27      	ldr	r3, [pc, #156]	@ (80176c8 <xPortStartScheduler+0x138>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	f1c3 0307 	rsb	r3, r3, #7
 8017632:	2b04      	cmp	r3, #4
 8017634:	d00b      	beq.n	801764e <xPortStartScheduler+0xbe>
	__asm volatile
 8017636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801763a:	f383 8811 	msr	BASEPRI, r3
 801763e:	f3bf 8f6f 	isb	sy
 8017642:	f3bf 8f4f 	dsb	sy
 8017646:	60bb      	str	r3, [r7, #8]
}
 8017648:	bf00      	nop
 801764a:	bf00      	nop
 801764c:	e7fd      	b.n	801764a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801764e:	4b1e      	ldr	r3, [pc, #120]	@ (80176c8 <xPortStartScheduler+0x138>)
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	021b      	lsls	r3, r3, #8
 8017654:	4a1c      	ldr	r2, [pc, #112]	@ (80176c8 <xPortStartScheduler+0x138>)
 8017656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017658:	4b1b      	ldr	r3, [pc, #108]	@ (80176c8 <xPortStartScheduler+0x138>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017660:	4a19      	ldr	r2, [pc, #100]	@ (80176c8 <xPortStartScheduler+0x138>)
 8017662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	b2da      	uxtb	r2, r3
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801766c:	4b17      	ldr	r3, [pc, #92]	@ (80176cc <xPortStartScheduler+0x13c>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	4a16      	ldr	r2, [pc, #88]	@ (80176cc <xPortStartScheduler+0x13c>)
 8017672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017678:	4b14      	ldr	r3, [pc, #80]	@ (80176cc <xPortStartScheduler+0x13c>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	4a13      	ldr	r2, [pc, #76]	@ (80176cc <xPortStartScheduler+0x13c>)
 801767e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017684:	f000 f8da 	bl	801783c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017688:	4b11      	ldr	r3, [pc, #68]	@ (80176d0 <xPortStartScheduler+0x140>)
 801768a:	2200      	movs	r2, #0
 801768c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801768e:	f000 f8f9 	bl	8017884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017692:	4b10      	ldr	r3, [pc, #64]	@ (80176d4 <xPortStartScheduler+0x144>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	4a0f      	ldr	r2, [pc, #60]	@ (80176d4 <xPortStartScheduler+0x144>)
 8017698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801769c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801769e:	f7ff ff63 	bl	8017568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80176a2:	f7fe fd19 	bl	80160d8 <vTaskSwitchContext>
	prvTaskExitError();
 80176a6:	f7ff ff1d 	bl	80174e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80176aa:	2300      	movs	r3, #0
}
 80176ac:	4618      	mov	r0, r3
 80176ae:	3718      	adds	r7, #24
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}
 80176b4:	e000ed00 	.word	0xe000ed00
 80176b8:	410fc271 	.word	0x410fc271
 80176bc:	410fc270 	.word	0x410fc270
 80176c0:	e000e400 	.word	0xe000e400
 80176c4:	20001528 	.word	0x20001528
 80176c8:	2000152c 	.word	0x2000152c
 80176cc:	e000ed20 	.word	0xe000ed20
 80176d0:	200000b4 	.word	0x200000b4
 80176d4:	e000ef34 	.word	0xe000ef34

080176d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80176d8:	b480      	push	{r7}
 80176da:	b083      	sub	sp, #12
 80176dc:	af00      	add	r7, sp, #0
	__asm volatile
 80176de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176e2:	f383 8811 	msr	BASEPRI, r3
 80176e6:	f3bf 8f6f 	isb	sy
 80176ea:	f3bf 8f4f 	dsb	sy
 80176ee:	607b      	str	r3, [r7, #4]
}
 80176f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80176f2:	4b10      	ldr	r3, [pc, #64]	@ (8017734 <vPortEnterCritical+0x5c>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	3301      	adds	r3, #1
 80176f8:	4a0e      	ldr	r2, [pc, #56]	@ (8017734 <vPortEnterCritical+0x5c>)
 80176fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80176fc:	4b0d      	ldr	r3, [pc, #52]	@ (8017734 <vPortEnterCritical+0x5c>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2b01      	cmp	r3, #1
 8017702:	d110      	bne.n	8017726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017704:	4b0c      	ldr	r3, [pc, #48]	@ (8017738 <vPortEnterCritical+0x60>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	b2db      	uxtb	r3, r3
 801770a:	2b00      	cmp	r3, #0
 801770c:	d00b      	beq.n	8017726 <vPortEnterCritical+0x4e>
	__asm volatile
 801770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017712:	f383 8811 	msr	BASEPRI, r3
 8017716:	f3bf 8f6f 	isb	sy
 801771a:	f3bf 8f4f 	dsb	sy
 801771e:	603b      	str	r3, [r7, #0]
}
 8017720:	bf00      	nop
 8017722:	bf00      	nop
 8017724:	e7fd      	b.n	8017722 <vPortEnterCritical+0x4a>
	}
}
 8017726:	bf00      	nop
 8017728:	370c      	adds	r7, #12
 801772a:	46bd      	mov	sp, r7
 801772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017730:	4770      	bx	lr
 8017732:	bf00      	nop
 8017734:	200000b4 	.word	0x200000b4
 8017738:	e000ed04 	.word	0xe000ed04

0801773c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801773c:	b480      	push	{r7}
 801773e:	b083      	sub	sp, #12
 8017740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017742:	4b12      	ldr	r3, [pc, #72]	@ (801778c <vPortExitCritical+0x50>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d10b      	bne.n	8017762 <vPortExitCritical+0x26>
	__asm volatile
 801774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801774e:	f383 8811 	msr	BASEPRI, r3
 8017752:	f3bf 8f6f 	isb	sy
 8017756:	f3bf 8f4f 	dsb	sy
 801775a:	607b      	str	r3, [r7, #4]
}
 801775c:	bf00      	nop
 801775e:	bf00      	nop
 8017760:	e7fd      	b.n	801775e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017762:	4b0a      	ldr	r3, [pc, #40]	@ (801778c <vPortExitCritical+0x50>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	3b01      	subs	r3, #1
 8017768:	4a08      	ldr	r2, [pc, #32]	@ (801778c <vPortExitCritical+0x50>)
 801776a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801776c:	4b07      	ldr	r3, [pc, #28]	@ (801778c <vPortExitCritical+0x50>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d105      	bne.n	8017780 <vPortExitCritical+0x44>
 8017774:	2300      	movs	r3, #0
 8017776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	f383 8811 	msr	BASEPRI, r3
}
 801777e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017780:	bf00      	nop
 8017782:	370c      	adds	r7, #12
 8017784:	46bd      	mov	sp, r7
 8017786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778a:	4770      	bx	lr
 801778c:	200000b4 	.word	0x200000b4

08017790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017790:	f3ef 8009 	mrs	r0, PSP
 8017794:	f3bf 8f6f 	isb	sy
 8017798:	4b15      	ldr	r3, [pc, #84]	@ (80177f0 <pxCurrentTCBConst>)
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	f01e 0f10 	tst.w	lr, #16
 80177a0:	bf08      	it	eq
 80177a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80177a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177aa:	6010      	str	r0, [r2, #0]
 80177ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80177b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80177b4:	f380 8811 	msr	BASEPRI, r0
 80177b8:	f3bf 8f4f 	dsb	sy
 80177bc:	f3bf 8f6f 	isb	sy
 80177c0:	f7fe fc8a 	bl	80160d8 <vTaskSwitchContext>
 80177c4:	f04f 0000 	mov.w	r0, #0
 80177c8:	f380 8811 	msr	BASEPRI, r0
 80177cc:	bc09      	pop	{r0, r3}
 80177ce:	6819      	ldr	r1, [r3, #0]
 80177d0:	6808      	ldr	r0, [r1, #0]
 80177d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d6:	f01e 0f10 	tst.w	lr, #16
 80177da:	bf08      	it	eq
 80177dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80177e0:	f380 8809 	msr	PSP, r0
 80177e4:	f3bf 8f6f 	isb	sy
 80177e8:	4770      	bx	lr
 80177ea:	bf00      	nop
 80177ec:	f3af 8000 	nop.w

080177f0 <pxCurrentTCBConst>:
 80177f0:	20000efc 	.word	0x20000efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80177f4:	bf00      	nop
 80177f6:	bf00      	nop

080177f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
	__asm volatile
 80177fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017802:	f383 8811 	msr	BASEPRI, r3
 8017806:	f3bf 8f6f 	isb	sy
 801780a:	f3bf 8f4f 	dsb	sy
 801780e:	607b      	str	r3, [r7, #4]
}
 8017810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017812:	f7fe fba7 	bl	8015f64 <xTaskIncrementTick>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d003      	beq.n	8017824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801781c:	4b06      	ldr	r3, [pc, #24]	@ (8017838 <xPortSysTickHandler+0x40>)
 801781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017822:	601a      	str	r2, [r3, #0]
 8017824:	2300      	movs	r3, #0
 8017826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	f383 8811 	msr	BASEPRI, r3
}
 801782e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017830:	bf00      	nop
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	e000ed04 	.word	0xe000ed04

0801783c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801783c:	b480      	push	{r7}
 801783e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017840:	4b0b      	ldr	r3, [pc, #44]	@ (8017870 <vPortSetupTimerInterrupt+0x34>)
 8017842:	2200      	movs	r2, #0
 8017844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017846:	4b0b      	ldr	r3, [pc, #44]	@ (8017874 <vPortSetupTimerInterrupt+0x38>)
 8017848:	2200      	movs	r2, #0
 801784a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801784c:	4b0a      	ldr	r3, [pc, #40]	@ (8017878 <vPortSetupTimerInterrupt+0x3c>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	4a0a      	ldr	r2, [pc, #40]	@ (801787c <vPortSetupTimerInterrupt+0x40>)
 8017852:	fba2 2303 	umull	r2, r3, r2, r3
 8017856:	0a1b      	lsrs	r3, r3, #8
 8017858:	4a09      	ldr	r2, [pc, #36]	@ (8017880 <vPortSetupTimerInterrupt+0x44>)
 801785a:	3b01      	subs	r3, #1
 801785c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801785e:	4b04      	ldr	r3, [pc, #16]	@ (8017870 <vPortSetupTimerInterrupt+0x34>)
 8017860:	2207      	movs	r2, #7
 8017862:	601a      	str	r2, [r3, #0]
}
 8017864:	bf00      	nop
 8017866:	46bd      	mov	sp, r7
 8017868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786c:	4770      	bx	lr
 801786e:	bf00      	nop
 8017870:	e000e010 	.word	0xe000e010
 8017874:	e000e018 	.word	0xe000e018
 8017878:	2000001c 	.word	0x2000001c
 801787c:	51eb851f 	.word	0x51eb851f
 8017880:	e000e014 	.word	0xe000e014

08017884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017894 <vPortEnableVFP+0x10>
 8017888:	6801      	ldr	r1, [r0, #0]
 801788a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801788e:	6001      	str	r1, [r0, #0]
 8017890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017892:	bf00      	nop
 8017894:	e000ed88 	.word	0xe000ed88

08017898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017898:	b480      	push	{r7}
 801789a:	b085      	sub	sp, #20
 801789c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801789e:	f3ef 8305 	mrs	r3, IPSR
 80178a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2b0f      	cmp	r3, #15
 80178a8:	d915      	bls.n	80178d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80178aa:	4a18      	ldr	r2, [pc, #96]	@ (801790c <vPortValidateInterruptPriority+0x74>)
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	4413      	add	r3, r2
 80178b0:	781b      	ldrb	r3, [r3, #0]
 80178b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80178b4:	4b16      	ldr	r3, [pc, #88]	@ (8017910 <vPortValidateInterruptPriority+0x78>)
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	7afa      	ldrb	r2, [r7, #11]
 80178ba:	429a      	cmp	r2, r3
 80178bc:	d20b      	bcs.n	80178d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80178be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178c2:	f383 8811 	msr	BASEPRI, r3
 80178c6:	f3bf 8f6f 	isb	sy
 80178ca:	f3bf 8f4f 	dsb	sy
 80178ce:	607b      	str	r3, [r7, #4]
}
 80178d0:	bf00      	nop
 80178d2:	bf00      	nop
 80178d4:	e7fd      	b.n	80178d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80178d6:	4b0f      	ldr	r3, [pc, #60]	@ (8017914 <vPortValidateInterruptPriority+0x7c>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80178de:	4b0e      	ldr	r3, [pc, #56]	@ (8017918 <vPortValidateInterruptPriority+0x80>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	429a      	cmp	r2, r3
 80178e4:	d90b      	bls.n	80178fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80178e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178ea:	f383 8811 	msr	BASEPRI, r3
 80178ee:	f3bf 8f6f 	isb	sy
 80178f2:	f3bf 8f4f 	dsb	sy
 80178f6:	603b      	str	r3, [r7, #0]
}
 80178f8:	bf00      	nop
 80178fa:	bf00      	nop
 80178fc:	e7fd      	b.n	80178fa <vPortValidateInterruptPriority+0x62>
	}
 80178fe:	bf00      	nop
 8017900:	3714      	adds	r7, #20
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr
 801790a:	bf00      	nop
 801790c:	e000e3f0 	.word	0xe000e3f0
 8017910:	20001528 	.word	0x20001528
 8017914:	e000ed0c 	.word	0xe000ed0c
 8017918:	2000152c 	.word	0x2000152c

0801791c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b08a      	sub	sp, #40	@ 0x28
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017924:	2300      	movs	r3, #0
 8017926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017928:	f7fe fa60 	bl	8015dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801792c:	4b5c      	ldr	r3, [pc, #368]	@ (8017aa0 <pvPortMalloc+0x184>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d101      	bne.n	8017938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017934:	f000 f924 	bl	8017b80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017938:	4b5a      	ldr	r3, [pc, #360]	@ (8017aa4 <pvPortMalloc+0x188>)
 801793a:	681a      	ldr	r2, [r3, #0]
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	4013      	ands	r3, r2
 8017940:	2b00      	cmp	r3, #0
 8017942:	f040 8095 	bne.w	8017a70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d01e      	beq.n	801798a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801794c:	2208      	movs	r2, #8
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	4413      	add	r3, r2
 8017952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f003 0307 	and.w	r3, r3, #7
 801795a:	2b00      	cmp	r3, #0
 801795c:	d015      	beq.n	801798a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f023 0307 	bic.w	r3, r3, #7
 8017964:	3308      	adds	r3, #8
 8017966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f003 0307 	and.w	r3, r3, #7
 801796e:	2b00      	cmp	r3, #0
 8017970:	d00b      	beq.n	801798a <pvPortMalloc+0x6e>
	__asm volatile
 8017972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017976:	f383 8811 	msr	BASEPRI, r3
 801797a:	f3bf 8f6f 	isb	sy
 801797e:	f3bf 8f4f 	dsb	sy
 8017982:	617b      	str	r3, [r7, #20]
}
 8017984:	bf00      	nop
 8017986:	bf00      	nop
 8017988:	e7fd      	b.n	8017986 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d06f      	beq.n	8017a70 <pvPortMalloc+0x154>
 8017990:	4b45      	ldr	r3, [pc, #276]	@ (8017aa8 <pvPortMalloc+0x18c>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	687a      	ldr	r2, [r7, #4]
 8017996:	429a      	cmp	r2, r3
 8017998:	d86a      	bhi.n	8017a70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801799a:	4b44      	ldr	r3, [pc, #272]	@ (8017aac <pvPortMalloc+0x190>)
 801799c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801799e:	4b43      	ldr	r3, [pc, #268]	@ (8017aac <pvPortMalloc+0x190>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80179a4:	e004      	b.n	80179b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80179a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80179aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80179b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179b2:	685b      	ldr	r3, [r3, #4]
 80179b4:	687a      	ldr	r2, [r7, #4]
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d903      	bls.n	80179c2 <pvPortMalloc+0xa6>
 80179ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d1f1      	bne.n	80179a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80179c2:	4b37      	ldr	r3, [pc, #220]	@ (8017aa0 <pvPortMalloc+0x184>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d051      	beq.n	8017a70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80179cc:	6a3b      	ldr	r3, [r7, #32]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	2208      	movs	r2, #8
 80179d2:	4413      	add	r3, r2
 80179d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80179d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	6a3b      	ldr	r3, [r7, #32]
 80179dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80179de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179e0:	685a      	ldr	r2, [r3, #4]
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	1ad2      	subs	r2, r2, r3
 80179e6:	2308      	movs	r3, #8
 80179e8:	005b      	lsls	r3, r3, #1
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d920      	bls.n	8017a30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80179ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	4413      	add	r3, r2
 80179f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80179f6:	69bb      	ldr	r3, [r7, #24]
 80179f8:	f003 0307 	and.w	r3, r3, #7
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d00b      	beq.n	8017a18 <pvPortMalloc+0xfc>
	__asm volatile
 8017a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a04:	f383 8811 	msr	BASEPRI, r3
 8017a08:	f3bf 8f6f 	isb	sy
 8017a0c:	f3bf 8f4f 	dsb	sy
 8017a10:	613b      	str	r3, [r7, #16]
}
 8017a12:	bf00      	nop
 8017a14:	bf00      	nop
 8017a16:	e7fd      	b.n	8017a14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a1a:	685a      	ldr	r2, [r3, #4]
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	1ad2      	subs	r2, r2, r3
 8017a20:	69bb      	ldr	r3, [r7, #24]
 8017a22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a26:	687a      	ldr	r2, [r7, #4]
 8017a28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017a2a:	69b8      	ldr	r0, [r7, #24]
 8017a2c:	f000 f90a 	bl	8017c44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017a30:	4b1d      	ldr	r3, [pc, #116]	@ (8017aa8 <pvPortMalloc+0x18c>)
 8017a32:	681a      	ldr	r2, [r3, #0]
 8017a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a36:	685b      	ldr	r3, [r3, #4]
 8017a38:	1ad3      	subs	r3, r2, r3
 8017a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8017aa8 <pvPortMalloc+0x18c>)
 8017a3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8017aa8 <pvPortMalloc+0x18c>)
 8017a40:	681a      	ldr	r2, [r3, #0]
 8017a42:	4b1b      	ldr	r3, [pc, #108]	@ (8017ab0 <pvPortMalloc+0x194>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d203      	bcs.n	8017a52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017a4a:	4b17      	ldr	r3, [pc, #92]	@ (8017aa8 <pvPortMalloc+0x18c>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	4a18      	ldr	r2, [pc, #96]	@ (8017ab0 <pvPortMalloc+0x194>)
 8017a50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a54:	685a      	ldr	r2, [r3, #4]
 8017a56:	4b13      	ldr	r3, [pc, #76]	@ (8017aa4 <pvPortMalloc+0x188>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	431a      	orrs	r2, r3
 8017a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a62:	2200      	movs	r2, #0
 8017a64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017a66:	4b13      	ldr	r3, [pc, #76]	@ (8017ab4 <pvPortMalloc+0x198>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	3301      	adds	r3, #1
 8017a6c:	4a11      	ldr	r2, [pc, #68]	@ (8017ab4 <pvPortMalloc+0x198>)
 8017a6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017a70:	f7fe f9ca 	bl	8015e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	f003 0307 	and.w	r3, r3, #7
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d00b      	beq.n	8017a96 <pvPortMalloc+0x17a>
	__asm volatile
 8017a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a82:	f383 8811 	msr	BASEPRI, r3
 8017a86:	f3bf 8f6f 	isb	sy
 8017a8a:	f3bf 8f4f 	dsb	sy
 8017a8e:	60fb      	str	r3, [r7, #12]
}
 8017a90:	bf00      	nop
 8017a92:	bf00      	nop
 8017a94:	e7fd      	b.n	8017a92 <pvPortMalloc+0x176>
	return pvReturn;
 8017a96:	69fb      	ldr	r3, [r7, #28]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3728      	adds	r7, #40	@ 0x28
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	20009538 	.word	0x20009538
 8017aa4:	2000954c 	.word	0x2000954c
 8017aa8:	2000953c 	.word	0x2000953c
 8017aac:	20009530 	.word	0x20009530
 8017ab0:	20009540 	.word	0x20009540
 8017ab4:	20009544 	.word	0x20009544

08017ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b086      	sub	sp, #24
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d04f      	beq.n	8017b6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017aca:	2308      	movs	r3, #8
 8017acc:	425b      	negs	r3, r3
 8017ace:	697a      	ldr	r2, [r7, #20]
 8017ad0:	4413      	add	r3, r2
 8017ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017ad8:	693b      	ldr	r3, [r7, #16]
 8017ada:	685a      	ldr	r2, [r3, #4]
 8017adc:	4b25      	ldr	r3, [pc, #148]	@ (8017b74 <vPortFree+0xbc>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	4013      	ands	r3, r2
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d10b      	bne.n	8017afe <vPortFree+0x46>
	__asm volatile
 8017ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017aea:	f383 8811 	msr	BASEPRI, r3
 8017aee:	f3bf 8f6f 	isb	sy
 8017af2:	f3bf 8f4f 	dsb	sy
 8017af6:	60fb      	str	r3, [r7, #12]
}
 8017af8:	bf00      	nop
 8017afa:	bf00      	nop
 8017afc:	e7fd      	b.n	8017afa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017afe:	693b      	ldr	r3, [r7, #16]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00b      	beq.n	8017b1e <vPortFree+0x66>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	60bb      	str	r3, [r7, #8]
}
 8017b18:	bf00      	nop
 8017b1a:	bf00      	nop
 8017b1c:	e7fd      	b.n	8017b1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	4b14      	ldr	r3, [pc, #80]	@ (8017b74 <vPortFree+0xbc>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	4013      	ands	r3, r2
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d01e      	beq.n	8017b6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017b2c:	693b      	ldr	r3, [r7, #16]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d11a      	bne.n	8017b6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	685a      	ldr	r2, [r3, #4]
 8017b38:	4b0e      	ldr	r3, [pc, #56]	@ (8017b74 <vPortFree+0xbc>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	43db      	mvns	r3, r3
 8017b3e:	401a      	ands	r2, r3
 8017b40:	693b      	ldr	r3, [r7, #16]
 8017b42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017b44:	f7fe f952 	bl	8015dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	685a      	ldr	r2, [r3, #4]
 8017b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8017b78 <vPortFree+0xc0>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	4413      	add	r3, r2
 8017b52:	4a09      	ldr	r2, [pc, #36]	@ (8017b78 <vPortFree+0xc0>)
 8017b54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017b56:	6938      	ldr	r0, [r7, #16]
 8017b58:	f000 f874 	bl	8017c44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017b5c:	4b07      	ldr	r3, [pc, #28]	@ (8017b7c <vPortFree+0xc4>)
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	3301      	adds	r3, #1
 8017b62:	4a06      	ldr	r2, [pc, #24]	@ (8017b7c <vPortFree+0xc4>)
 8017b64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017b66:	f7fe f94f 	bl	8015e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017b6a:	bf00      	nop
 8017b6c:	3718      	adds	r7, #24
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
 8017b72:	bf00      	nop
 8017b74:	2000954c 	.word	0x2000954c
 8017b78:	2000953c 	.word	0x2000953c
 8017b7c:	20009548 	.word	0x20009548

08017b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017b80:	b480      	push	{r7}
 8017b82:	b085      	sub	sp, #20
 8017b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017b8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017b8c:	4b27      	ldr	r3, [pc, #156]	@ (8017c2c <prvHeapInit+0xac>)
 8017b8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	f003 0307 	and.w	r3, r3, #7
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d00c      	beq.n	8017bb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	3307      	adds	r3, #7
 8017b9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	f023 0307 	bic.w	r3, r3, #7
 8017ba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017ba8:	68ba      	ldr	r2, [r7, #8]
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	1ad3      	subs	r3, r2, r3
 8017bae:	4a1f      	ldr	r2, [pc, #124]	@ (8017c2c <prvHeapInit+0xac>)
 8017bb0:	4413      	add	r3, r2
 8017bb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8017c30 <prvHeapInit+0xb0>)
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8017c30 <prvHeapInit+0xb0>)
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	68ba      	ldr	r2, [r7, #8]
 8017bc8:	4413      	add	r3, r2
 8017bca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017bcc:	2208      	movs	r2, #8
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	1a9b      	subs	r3, r3, r2
 8017bd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	f023 0307 	bic.w	r3, r3, #7
 8017bda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	4a15      	ldr	r2, [pc, #84]	@ (8017c34 <prvHeapInit+0xb4>)
 8017be0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017be2:	4b14      	ldr	r3, [pc, #80]	@ (8017c34 <prvHeapInit+0xb4>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	2200      	movs	r2, #0
 8017be8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017bea:	4b12      	ldr	r3, [pc, #72]	@ (8017c34 <prvHeapInit+0xb4>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	68fa      	ldr	r2, [r7, #12]
 8017bfa:	1ad2      	subs	r2, r2, r3
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017c00:	4b0c      	ldr	r3, [pc, #48]	@ (8017c34 <prvHeapInit+0xb4>)
 8017c02:	681a      	ldr	r2, [r3, #0]
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	685b      	ldr	r3, [r3, #4]
 8017c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8017c38 <prvHeapInit+0xb8>)
 8017c0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	685b      	ldr	r3, [r3, #4]
 8017c14:	4a09      	ldr	r2, [pc, #36]	@ (8017c3c <prvHeapInit+0xbc>)
 8017c16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017c18:	4b09      	ldr	r3, [pc, #36]	@ (8017c40 <prvHeapInit+0xc0>)
 8017c1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017c1e:	601a      	str	r2, [r3, #0]
}
 8017c20:	bf00      	nop
 8017c22:	3714      	adds	r7, #20
 8017c24:	46bd      	mov	sp, r7
 8017c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2a:	4770      	bx	lr
 8017c2c:	20001530 	.word	0x20001530
 8017c30:	20009530 	.word	0x20009530
 8017c34:	20009538 	.word	0x20009538
 8017c38:	20009540 	.word	0x20009540
 8017c3c:	2000953c 	.word	0x2000953c
 8017c40:	2000954c 	.word	0x2000954c

08017c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017c44:	b480      	push	{r7}
 8017c46:	b085      	sub	sp, #20
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017c4c:	4b28      	ldr	r3, [pc, #160]	@ (8017cf0 <prvInsertBlockIntoFreeList+0xac>)
 8017c4e:	60fb      	str	r3, [r7, #12]
 8017c50:	e002      	b.n	8017c58 <prvInsertBlockIntoFreeList+0x14>
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	60fb      	str	r3, [r7, #12]
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	687a      	ldr	r2, [r7, #4]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d8f7      	bhi.n	8017c52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	68ba      	ldr	r2, [r7, #8]
 8017c6c:	4413      	add	r3, r2
 8017c6e:	687a      	ldr	r2, [r7, #4]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d108      	bne.n	8017c86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	685a      	ldr	r2, [r3, #4]
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	685b      	ldr	r3, [r3, #4]
 8017c7c:	441a      	add	r2, r3
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	68ba      	ldr	r2, [r7, #8]
 8017c90:	441a      	add	r2, r3
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d118      	bne.n	8017ccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	681a      	ldr	r2, [r3, #0]
 8017c9e:	4b15      	ldr	r3, [pc, #84]	@ (8017cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	429a      	cmp	r2, r3
 8017ca4:	d00d      	beq.n	8017cc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	685a      	ldr	r2, [r3, #4]
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	441a      	add	r2, r3
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	681a      	ldr	r2, [r3, #0]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	601a      	str	r2, [r3, #0]
 8017cc0:	e008      	b.n	8017cd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8017cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	601a      	str	r2, [r3, #0]
 8017cca:	e003      	b.n	8017cd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	681a      	ldr	r2, [r3, #0]
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017cd4:	68fa      	ldr	r2, [r7, #12]
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	d002      	beq.n	8017ce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	687a      	ldr	r2, [r7, #4]
 8017ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ce2:	bf00      	nop
 8017ce4:	3714      	adds	r7, #20
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop
 8017cf0:	20009530 	.word	0x20009530
 8017cf4:	20009538 	.word	0x20009538

08017cf8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	4912      	ldr	r1, [pc, #72]	@ (8017d48 <MX_USB_Device_Init+0x50>)
 8017d00:	4812      	ldr	r0, [pc, #72]	@ (8017d4c <MX_USB_Device_Init+0x54>)
 8017d02:	f7fa fe81 	bl	8012a08 <USBD_Init>
 8017d06:	4603      	mov	r3, r0
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d001      	beq.n	8017d10 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8017d0c:	f7f0 fc46 	bl	800859c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8017d10:	490f      	ldr	r1, [pc, #60]	@ (8017d50 <MX_USB_Device_Init+0x58>)
 8017d12:	480e      	ldr	r0, [pc, #56]	@ (8017d4c <MX_USB_Device_Init+0x54>)
 8017d14:	f7fa fea8 	bl	8012a68 <USBD_RegisterClass>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d001      	beq.n	8017d22 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8017d1e:	f7f0 fc3d 	bl	800859c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8017d22:	490c      	ldr	r1, [pc, #48]	@ (8017d54 <MX_USB_Device_Init+0x5c>)
 8017d24:	4809      	ldr	r0, [pc, #36]	@ (8017d4c <MX_USB_Device_Init+0x54>)
 8017d26:	f7fa fd9f 	bl	8012868 <USBD_CDC_RegisterInterface>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d001      	beq.n	8017d34 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8017d30:	f7f0 fc34 	bl	800859c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8017d34:	4805      	ldr	r0, [pc, #20]	@ (8017d4c <MX_USB_Device_Init+0x54>)
 8017d36:	f7fa fecd 	bl	8012ad4 <USBD_Start>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d001      	beq.n	8017d44 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8017d40:	f7f0 fc2c 	bl	800859c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8017d44:	bf00      	nop
 8017d46:	bd80      	pop	{r7, pc}
 8017d48:	200000cc 	.word	0x200000cc
 8017d4c:	20009550 	.word	0x20009550
 8017d50:	20000034 	.word	0x20000034
 8017d54:	200000b8 	.word	0x200000b8

08017d58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	4905      	ldr	r1, [pc, #20]	@ (8017d74 <CDC_Init_FS+0x1c>)
 8017d60:	4805      	ldr	r0, [pc, #20]	@ (8017d78 <CDC_Init_FS+0x20>)
 8017d62:	f7fa fd9b 	bl	801289c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017d66:	4905      	ldr	r1, [pc, #20]	@ (8017d7c <CDC_Init_FS+0x24>)
 8017d68:	4803      	ldr	r0, [pc, #12]	@ (8017d78 <CDC_Init_FS+0x20>)
 8017d6a:	f7fa fdb9 	bl	80128e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017d6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	bd80      	pop	{r7, pc}
 8017d74:	2000a02c 	.word	0x2000a02c
 8017d78:	20009550 	.word	0x20009550
 8017d7c:	2000982c 	.word	0x2000982c

08017d80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017d80:	b480      	push	{r7}
 8017d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017d84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8e:	4770      	bx	lr

08017d90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017d90:	b480      	push	{r7}
 8017d92:	b083      	sub	sp, #12
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	4603      	mov	r3, r0
 8017d98:	6039      	str	r1, [r7, #0]
 8017d9a:	71fb      	strb	r3, [r7, #7]
 8017d9c:	4613      	mov	r3, r2
 8017d9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017da0:	79fb      	ldrb	r3, [r7, #7]
 8017da2:	2b23      	cmp	r3, #35	@ 0x23
 8017da4:	d84a      	bhi.n	8017e3c <CDC_Control_FS+0xac>
 8017da6:	a201      	add	r2, pc, #4	@ (adr r2, 8017dac <CDC_Control_FS+0x1c>)
 8017da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dac:	08017e3d 	.word	0x08017e3d
 8017db0:	08017e3d 	.word	0x08017e3d
 8017db4:	08017e3d 	.word	0x08017e3d
 8017db8:	08017e3d 	.word	0x08017e3d
 8017dbc:	08017e3d 	.word	0x08017e3d
 8017dc0:	08017e3d 	.word	0x08017e3d
 8017dc4:	08017e3d 	.word	0x08017e3d
 8017dc8:	08017e3d 	.word	0x08017e3d
 8017dcc:	08017e3d 	.word	0x08017e3d
 8017dd0:	08017e3d 	.word	0x08017e3d
 8017dd4:	08017e3d 	.word	0x08017e3d
 8017dd8:	08017e3d 	.word	0x08017e3d
 8017ddc:	08017e3d 	.word	0x08017e3d
 8017de0:	08017e3d 	.word	0x08017e3d
 8017de4:	08017e3d 	.word	0x08017e3d
 8017de8:	08017e3d 	.word	0x08017e3d
 8017dec:	08017e3d 	.word	0x08017e3d
 8017df0:	08017e3d 	.word	0x08017e3d
 8017df4:	08017e3d 	.word	0x08017e3d
 8017df8:	08017e3d 	.word	0x08017e3d
 8017dfc:	08017e3d 	.word	0x08017e3d
 8017e00:	08017e3d 	.word	0x08017e3d
 8017e04:	08017e3d 	.word	0x08017e3d
 8017e08:	08017e3d 	.word	0x08017e3d
 8017e0c:	08017e3d 	.word	0x08017e3d
 8017e10:	08017e3d 	.word	0x08017e3d
 8017e14:	08017e3d 	.word	0x08017e3d
 8017e18:	08017e3d 	.word	0x08017e3d
 8017e1c:	08017e3d 	.word	0x08017e3d
 8017e20:	08017e3d 	.word	0x08017e3d
 8017e24:	08017e3d 	.word	0x08017e3d
 8017e28:	08017e3d 	.word	0x08017e3d
 8017e2c:	08017e3d 	.word	0x08017e3d
 8017e30:	08017e3d 	.word	0x08017e3d
 8017e34:	08017e3d 	.word	0x08017e3d
 8017e38:	08017e3d 	.word	0x08017e3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017e3c:	bf00      	nop
  }

  return (USBD_OK);
 8017e3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017e40:	4618      	mov	r0, r3
 8017e42:	370c      	adds	r7, #12
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr

08017e4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b082      	sub	sp, #8
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017e56:	6879      	ldr	r1, [r7, #4]
 8017e58:	4805      	ldr	r0, [pc, #20]	@ (8017e70 <CDC_Receive_FS+0x24>)
 8017e5a:	f7fa fd41 	bl	80128e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017e5e:	4804      	ldr	r0, [pc, #16]	@ (8017e70 <CDC_Receive_FS+0x24>)
 8017e60:	f7fa fd9c 	bl	801299c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017e64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017e66:	4618      	mov	r0, r3
 8017e68:	3708      	adds	r7, #8
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bd80      	pop	{r7, pc}
 8017e6e:	bf00      	nop
 8017e70:	20009550 	.word	0x20009550

08017e74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b084      	sub	sp, #16
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	460b      	mov	r3, r1
 8017e7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017e80:	2300      	movs	r3, #0
 8017e82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017e84:	4b0d      	ldr	r3, [pc, #52]	@ (8017ebc <CDC_Transmit_FS+0x48>)
 8017e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017e8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d001      	beq.n	8017e9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017e96:	2301      	movs	r3, #1
 8017e98:	e00b      	b.n	8017eb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017e9a:	887b      	ldrh	r3, [r7, #2]
 8017e9c:	461a      	mov	r2, r3
 8017e9e:	6879      	ldr	r1, [r7, #4]
 8017ea0:	4806      	ldr	r0, [pc, #24]	@ (8017ebc <CDC_Transmit_FS+0x48>)
 8017ea2:	f7fa fcfb 	bl	801289c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017ea6:	4805      	ldr	r0, [pc, #20]	@ (8017ebc <CDC_Transmit_FS+0x48>)
 8017ea8:	f7fa fd38 	bl	801291c <USBD_CDC_TransmitPacket>
 8017eac:	4603      	mov	r3, r0
 8017eae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3710      	adds	r7, #16
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	20009550 	.word	0x20009550

08017ec0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b087      	sub	sp, #28
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	4613      	mov	r3, r2
 8017ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	371c      	adds	r7, #28
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr
	...

08017ee4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	b083      	sub	sp, #12
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	4603      	mov	r3, r0
 8017eec:	6039      	str	r1, [r7, #0]
 8017eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	2212      	movs	r2, #18
 8017ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8017ef6:	4b03      	ldr	r3, [pc, #12]	@ (8017f04 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8017ef8:	4618      	mov	r0, r3
 8017efa:	370c      	adds	r7, #12
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr
 8017f04:	200000ec 	.word	0x200000ec

08017f08 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b083      	sub	sp, #12
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	4603      	mov	r3, r0
 8017f10:	6039      	str	r1, [r7, #0]
 8017f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	2204      	movs	r2, #4
 8017f18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017f1a:	4b03      	ldr	r3, [pc, #12]	@ (8017f28 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	370c      	adds	r7, #12
 8017f20:	46bd      	mov	sp, r7
 8017f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f26:	4770      	bx	lr
 8017f28:	20000100 	.word	0x20000100

08017f2c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b082      	sub	sp, #8
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	4603      	mov	r3, r0
 8017f34:	6039      	str	r1, [r7, #0]
 8017f36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017f38:	79fb      	ldrb	r3, [r7, #7]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d105      	bne.n	8017f4a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017f3e:	683a      	ldr	r2, [r7, #0]
 8017f40:	4907      	ldr	r1, [pc, #28]	@ (8017f60 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017f42:	4808      	ldr	r0, [pc, #32]	@ (8017f64 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017f44:	f7fb ff0e 	bl	8013d64 <USBD_GetString>
 8017f48:	e004      	b.n	8017f54 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017f4a:	683a      	ldr	r2, [r7, #0]
 8017f4c:	4904      	ldr	r1, [pc, #16]	@ (8017f60 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017f4e:	4805      	ldr	r0, [pc, #20]	@ (8017f64 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017f50:	f7fb ff08 	bl	8013d64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017f54:	4b02      	ldr	r3, [pc, #8]	@ (8017f60 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8017f56:	4618      	mov	r0, r3
 8017f58:	3708      	adds	r7, #8
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}
 8017f5e:	bf00      	nop
 8017f60:	2000a82c 	.word	0x2000a82c
 8017f64:	0801d494 	.word	0x0801d494

08017f68 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	4603      	mov	r3, r0
 8017f70:	6039      	str	r1, [r7, #0]
 8017f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017f74:	683a      	ldr	r2, [r7, #0]
 8017f76:	4904      	ldr	r1, [pc, #16]	@ (8017f88 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8017f78:	4804      	ldr	r0, [pc, #16]	@ (8017f8c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8017f7a:	f7fb fef3 	bl	8013d64 <USBD_GetString>
  return USBD_StrDesc;
 8017f7e:	4b02      	ldr	r3, [pc, #8]	@ (8017f88 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3708      	adds	r7, #8
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	2000a82c 	.word	0x2000a82c
 8017f8c:	0801d4ac 	.word	0x0801d4ac

08017f90 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	4603      	mov	r3, r0
 8017f98:	6039      	str	r1, [r7, #0]
 8017f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	221a      	movs	r2, #26
 8017fa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017fa2:	f000 f843 	bl	801802c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017fa6:	4b02      	ldr	r3, [pc, #8]	@ (8017fb0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3708      	adds	r7, #8
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	20000104 	.word	0x20000104

08017fb4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b082      	sub	sp, #8
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	4603      	mov	r3, r0
 8017fbc:	6039      	str	r1, [r7, #0]
 8017fbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017fc0:	79fb      	ldrb	r3, [r7, #7]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d105      	bne.n	8017fd2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017fc6:	683a      	ldr	r2, [r7, #0]
 8017fc8:	4907      	ldr	r1, [pc, #28]	@ (8017fe8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017fca:	4808      	ldr	r0, [pc, #32]	@ (8017fec <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017fcc:	f7fb feca 	bl	8013d64 <USBD_GetString>
 8017fd0:	e004      	b.n	8017fdc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017fd2:	683a      	ldr	r2, [r7, #0]
 8017fd4:	4904      	ldr	r1, [pc, #16]	@ (8017fe8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017fd6:	4805      	ldr	r0, [pc, #20]	@ (8017fec <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017fd8:	f7fb fec4 	bl	8013d64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017fdc:	4b02      	ldr	r3, [pc, #8]	@ (8017fe8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	3708      	adds	r7, #8
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}
 8017fe6:	bf00      	nop
 8017fe8:	2000a82c 	.word	0x2000a82c
 8017fec:	0801d4c0 	.word	0x0801d4c0

08017ff0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b082      	sub	sp, #8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	6039      	str	r1, [r7, #0]
 8017ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017ffc:	79fb      	ldrb	r3, [r7, #7]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d105      	bne.n	801800e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018002:	683a      	ldr	r2, [r7, #0]
 8018004:	4907      	ldr	r1, [pc, #28]	@ (8018024 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018006:	4808      	ldr	r0, [pc, #32]	@ (8018028 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018008:	f7fb feac 	bl	8013d64 <USBD_GetString>
 801800c:	e004      	b.n	8018018 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801800e:	683a      	ldr	r2, [r7, #0]
 8018010:	4904      	ldr	r1, [pc, #16]	@ (8018024 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018012:	4805      	ldr	r0, [pc, #20]	@ (8018028 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018014:	f7fb fea6 	bl	8013d64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018018:	4b02      	ldr	r3, [pc, #8]	@ (8018024 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801801a:	4618      	mov	r0, r3
 801801c:	3708      	adds	r7, #8
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	2000a82c 	.word	0x2000a82c
 8018028:	0801d4cc 	.word	0x0801d4cc

0801802c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b084      	sub	sp, #16
 8018030:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018032:	4b0f      	ldr	r3, [pc, #60]	@ (8018070 <Get_SerialNum+0x44>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018038:	4b0e      	ldr	r3, [pc, #56]	@ (8018074 <Get_SerialNum+0x48>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801803e:	4b0e      	ldr	r3, [pc, #56]	@ (8018078 <Get_SerialNum+0x4c>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018044:	68fa      	ldr	r2, [r7, #12]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	4413      	add	r3, r2
 801804a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d009      	beq.n	8018066 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018052:	2208      	movs	r2, #8
 8018054:	4909      	ldr	r1, [pc, #36]	@ (801807c <Get_SerialNum+0x50>)
 8018056:	68f8      	ldr	r0, [r7, #12]
 8018058:	f000 f814 	bl	8018084 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801805c:	2204      	movs	r2, #4
 801805e:	4908      	ldr	r1, [pc, #32]	@ (8018080 <Get_SerialNum+0x54>)
 8018060:	68b8      	ldr	r0, [r7, #8]
 8018062:	f000 f80f 	bl	8018084 <IntToUnicode>
  }
}
 8018066:	bf00      	nop
 8018068:	3710      	adds	r7, #16
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}
 801806e:	bf00      	nop
 8018070:	1fff7590 	.word	0x1fff7590
 8018074:	1fff7594 	.word	0x1fff7594
 8018078:	1fff7598 	.word	0x1fff7598
 801807c:	20000106 	.word	0x20000106
 8018080:	20000116 	.word	0x20000116

08018084 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018084:	b480      	push	{r7}
 8018086:	b087      	sub	sp, #28
 8018088:	af00      	add	r7, sp, #0
 801808a:	60f8      	str	r0, [r7, #12]
 801808c:	60b9      	str	r1, [r7, #8]
 801808e:	4613      	mov	r3, r2
 8018090:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018092:	2300      	movs	r3, #0
 8018094:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018096:	2300      	movs	r3, #0
 8018098:	75fb      	strb	r3, [r7, #23]
 801809a:	e027      	b.n	80180ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	0f1b      	lsrs	r3, r3, #28
 80180a0:	2b09      	cmp	r3, #9
 80180a2:	d80b      	bhi.n	80180bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	0f1b      	lsrs	r3, r3, #28
 80180a8:	b2da      	uxtb	r2, r3
 80180aa:	7dfb      	ldrb	r3, [r7, #23]
 80180ac:	005b      	lsls	r3, r3, #1
 80180ae:	4619      	mov	r1, r3
 80180b0:	68bb      	ldr	r3, [r7, #8]
 80180b2:	440b      	add	r3, r1
 80180b4:	3230      	adds	r2, #48	@ 0x30
 80180b6:	b2d2      	uxtb	r2, r2
 80180b8:	701a      	strb	r2, [r3, #0]
 80180ba:	e00a      	b.n	80180d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	0f1b      	lsrs	r3, r3, #28
 80180c0:	b2da      	uxtb	r2, r3
 80180c2:	7dfb      	ldrb	r3, [r7, #23]
 80180c4:	005b      	lsls	r3, r3, #1
 80180c6:	4619      	mov	r1, r3
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	440b      	add	r3, r1
 80180cc:	3237      	adds	r2, #55	@ 0x37
 80180ce:	b2d2      	uxtb	r2, r2
 80180d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	011b      	lsls	r3, r3, #4
 80180d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80180d8:	7dfb      	ldrb	r3, [r7, #23]
 80180da:	005b      	lsls	r3, r3, #1
 80180dc:	3301      	adds	r3, #1
 80180de:	68ba      	ldr	r2, [r7, #8]
 80180e0:	4413      	add	r3, r2
 80180e2:	2200      	movs	r2, #0
 80180e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80180e6:	7dfb      	ldrb	r3, [r7, #23]
 80180e8:	3301      	adds	r3, #1
 80180ea:	75fb      	strb	r3, [r7, #23]
 80180ec:	7dfa      	ldrb	r2, [r7, #23]
 80180ee:	79fb      	ldrb	r3, [r7, #7]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d3d3      	bcc.n	801809c <IntToUnicode+0x18>
  }
}
 80180f4:	bf00      	nop
 80180f6:	bf00      	nop
 80180f8:	371c      	adds	r7, #28
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr

08018102 <LL_AHB2_GRP1_EnableClock>:
{
 8018102:	b480      	push	{r7}
 8018104:	b085      	sub	sp, #20
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801810a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801810e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	4313      	orrs	r3, r2
 8018118:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801811a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801811e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	4013      	ands	r3, r2
 8018124:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018126:	68fb      	ldr	r3, [r7, #12]
}
 8018128:	bf00      	nop
 801812a:	3714      	adds	r7, #20
 801812c:	46bd      	mov	sp, r7
 801812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018132:	4770      	bx	lr

08018134 <LL_APB1_GRP1_EnableClock>:
{
 8018134:	b480      	push	{r7}
 8018136:	b085      	sub	sp, #20
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801813c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018140:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	4313      	orrs	r3, r2
 801814a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801814c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018150:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	4013      	ands	r3, r2
 8018156:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018158:	68fb      	ldr	r3, [r7, #12]
}
 801815a:	bf00      	nop
 801815c:	3714      	adds	r7, #20
 801815e:	46bd      	mov	sp, r7
 8018160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018164:	4770      	bx	lr
	...

08018168 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b09c      	sub	sp, #112	@ 0x70
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018170:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8018174:	2200      	movs	r2, #0
 8018176:	601a      	str	r2, [r3, #0]
 8018178:	605a      	str	r2, [r3, #4]
 801817a:	609a      	str	r2, [r3, #8]
 801817c:	60da      	str	r2, [r3, #12]
 801817e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018180:	f107 030c 	add.w	r3, r7, #12
 8018184:	2250      	movs	r2, #80	@ 0x50
 8018186:	2100      	movs	r1, #0
 8018188:	4618      	mov	r0, r3
 801818a:	f001 f987 	bl	801949c <memset>
  if(pcdHandle->Instance==USB)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	4a1b      	ldr	r2, [pc, #108]	@ (8018200 <HAL_PCD_MspInit+0x98>)
 8018194:	4293      	cmp	r3, r2
 8018196:	d12f      	bne.n	80181f8 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801819c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801819e:	2300      	movs	r3, #0
 80181a0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80181a2:	f107 030c 	add.w	r3, r7, #12
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7f7 fa1d 	bl	800f5e6 <HAL_RCCEx_PeriphCLKConfig>
 80181ac:	4603      	mov	r3, r0
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d001      	beq.n	80181b6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80181b2:	f7f0 f9f3 	bl	800859c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80181b6:	2001      	movs	r0, #1
 80181b8:	f7ff ffa3 	bl	8018102 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80181bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80181c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181c2:	2302      	movs	r3, #2
 80181c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181c6:	2300      	movs	r3, #0
 80181c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80181ca:	2300      	movs	r3, #0
 80181cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80181ce:	230a      	movs	r3, #10
 80181d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80181d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80181d6:	4619      	mov	r1, r3
 80181d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80181dc:	f7f2 fc20 	bl	800aa20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80181e0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80181e4:	f7ff ffa6 	bl	8018134 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80181e8:	2200      	movs	r2, #0
 80181ea:	2105      	movs	r1, #5
 80181ec:	2014      	movs	r0, #20
 80181ee:	f7f2 f90d 	bl	800a40c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80181f2:	2014      	movs	r0, #20
 80181f4:	f7f2 f924 	bl	800a440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80181f8:	bf00      	nop
 80181fa:	3770      	adds	r7, #112	@ 0x70
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	40006800 	.word	0x40006800

08018204 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b082      	sub	sp, #8
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018218:	4619      	mov	r1, r3
 801821a:	4610      	mov	r0, r2
 801821c:	f7fa fca7 	bl	8012b6e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018220:	bf00      	nop
 8018222:	3708      	adds	r7, #8
 8018224:	46bd      	mov	sp, r7
 8018226:	bd80      	pop	{r7, pc}

08018228 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b082      	sub	sp, #8
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	460b      	mov	r3, r1
 8018232:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801823a:	78fa      	ldrb	r2, [r7, #3]
 801823c:	6879      	ldr	r1, [r7, #4]
 801823e:	4613      	mov	r3, r2
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	4413      	add	r3, r2
 8018244:	00db      	lsls	r3, r3, #3
 8018246:	440b      	add	r3, r1
 8018248:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	78fb      	ldrb	r3, [r7, #3]
 8018250:	4619      	mov	r1, r3
 8018252:	f7fa fce1 	bl	8012c18 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018256:	bf00      	nop
 8018258:	3708      	adds	r7, #8
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}

0801825e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801825e:	b580      	push	{r7, lr}
 8018260:	b082      	sub	sp, #8
 8018262:	af00      	add	r7, sp, #0
 8018264:	6078      	str	r0, [r7, #4]
 8018266:	460b      	mov	r3, r1
 8018268:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018270:	78fa      	ldrb	r2, [r7, #3]
 8018272:	6879      	ldr	r1, [r7, #4]
 8018274:	4613      	mov	r3, r2
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	4413      	add	r3, r2
 801827a:	00db      	lsls	r3, r3, #3
 801827c:	440b      	add	r3, r1
 801827e:	3324      	adds	r3, #36	@ 0x24
 8018280:	681a      	ldr	r2, [r3, #0]
 8018282:	78fb      	ldrb	r3, [r7, #3]
 8018284:	4619      	mov	r1, r3
 8018286:	f7fa fd7a 	bl	8012d7e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801828a:	bf00      	nop
 801828c:	3708      	adds	r7, #8
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}

08018292 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018292:	b580      	push	{r7, lr}
 8018294:	b082      	sub	sp, #8
 8018296:	af00      	add	r7, sp, #0
 8018298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80182a0:	4618      	mov	r0, r3
 80182a2:	f7fa feb4 	bl	801300e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80182a6:	bf00      	nop
 80182a8:	3708      	adds	r7, #8
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}

080182ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182ae:	b580      	push	{r7, lr}
 80182b0:	b084      	sub	sp, #16
 80182b2:	af00      	add	r7, sp, #0
 80182b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80182b6:	2301      	movs	r3, #1
 80182b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	795b      	ldrb	r3, [r3, #5]
 80182be:	2b02      	cmp	r3, #2
 80182c0:	d001      	beq.n	80182c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80182c2:	f7f0 f96b 	bl	800859c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80182cc:	7bfa      	ldrb	r2, [r7, #15]
 80182ce:	4611      	mov	r1, r2
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7fa fe58 	bl	8012f86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80182dc:	4618      	mov	r0, r3
 80182de:	f7fa fe00 	bl	8012ee2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80182e2:	bf00      	nop
 80182e4:	3710      	adds	r7, #16
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
	...

080182ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b082      	sub	sp, #8
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fa fe53 	bl	8012fa6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	7a5b      	ldrb	r3, [r3, #9]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d005      	beq.n	8018314 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018308:	4b04      	ldr	r3, [pc, #16]	@ (801831c <HAL_PCD_SuspendCallback+0x30>)
 801830a:	691b      	ldr	r3, [r3, #16]
 801830c:	4a03      	ldr	r2, [pc, #12]	@ (801831c <HAL_PCD_SuspendCallback+0x30>)
 801830e:	f043 0306 	orr.w	r3, r3, #6
 8018312:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018314:	bf00      	nop
 8018316:	3708      	adds	r7, #8
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}
 801831c:	e000ed00 	.word	0xe000ed00

08018320 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	7a5b      	ldrb	r3, [r3, #9]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d007      	beq.n	8018340 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018330:	4b08      	ldr	r3, [pc, #32]	@ (8018354 <HAL_PCD_ResumeCallback+0x34>)
 8018332:	691b      	ldr	r3, [r3, #16]
 8018334:	4a07      	ldr	r2, [pc, #28]	@ (8018354 <HAL_PCD_ResumeCallback+0x34>)
 8018336:	f023 0306 	bic.w	r3, r3, #6
 801833a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801833c:	f000 f9fa 	bl	8018734 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018346:	4618      	mov	r0, r3
 8018348:	f7fa fe49 	bl	8012fde <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801834c:	bf00      	nop
 801834e:	3708      	adds	r7, #8
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}
 8018354:	e000ed00 	.word	0xe000ed00

08018358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b082      	sub	sp, #8
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018360:	4a2c      	ldr	r2, [pc, #176]	@ (8018414 <USBD_LL_Init+0xbc>)
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	4a2a      	ldr	r2, [pc, #168]	@ (8018414 <USBD_LL_Init+0xbc>)
 801836c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018370:	f7f5 fdd8 	bl	800df24 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018374:	4b27      	ldr	r3, [pc, #156]	@ (8018414 <USBD_LL_Init+0xbc>)
 8018376:	4a28      	ldr	r2, [pc, #160]	@ (8018418 <USBD_LL_Init+0xc0>)
 8018378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801837a:	4b26      	ldr	r3, [pc, #152]	@ (8018414 <USBD_LL_Init+0xbc>)
 801837c:	2208      	movs	r2, #8
 801837e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018380:	4b24      	ldr	r3, [pc, #144]	@ (8018414 <USBD_LL_Init+0xbc>)
 8018382:	2202      	movs	r2, #2
 8018384:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018386:	4b23      	ldr	r3, [pc, #140]	@ (8018414 <USBD_LL_Init+0xbc>)
 8018388:	2202      	movs	r2, #2
 801838a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801838c:	4b21      	ldr	r3, [pc, #132]	@ (8018414 <USBD_LL_Init+0xbc>)
 801838e:	2200      	movs	r2, #0
 8018390:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018392:	4b20      	ldr	r3, [pc, #128]	@ (8018414 <USBD_LL_Init+0xbc>)
 8018394:	2200      	movs	r2, #0
 8018396:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018398:	4b1e      	ldr	r3, [pc, #120]	@ (8018414 <USBD_LL_Init+0xbc>)
 801839a:	2200      	movs	r2, #0
 801839c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801839e:	4b1d      	ldr	r3, [pc, #116]	@ (8018414 <USBD_LL_Init+0xbc>)
 80183a0:	2200      	movs	r2, #0
 80183a2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80183a4:	481b      	ldr	r0, [pc, #108]	@ (8018414 <USBD_LL_Init+0xbc>)
 80183a6:	f7f4 f89e 	bl	800c4e6 <HAL_PCD_Init>
 80183aa:	4603      	mov	r3, r0
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d001      	beq.n	80183b4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80183b0:	f7f0 f8f4 	bl	800859c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183ba:	2318      	movs	r3, #24
 80183bc:	2200      	movs	r2, #0
 80183be:	2100      	movs	r1, #0
 80183c0:	f7f5 fd25 	bl	800de0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183ca:	2358      	movs	r3, #88	@ 0x58
 80183cc:	2200      	movs	r2, #0
 80183ce:	2180      	movs	r1, #128	@ 0x80
 80183d0:	f7f5 fd1d 	bl	800de0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183da:	23c0      	movs	r3, #192	@ 0xc0
 80183dc:	2200      	movs	r2, #0
 80183de:	2181      	movs	r1, #129	@ 0x81
 80183e0:	f7f5 fd15 	bl	800de0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80183ee:	2200      	movs	r2, #0
 80183f0:	2101      	movs	r1, #1
 80183f2:	f7f5 fd0c 	bl	800de0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018400:	2200      	movs	r2, #0
 8018402:	2182      	movs	r1, #130	@ 0x82
 8018404:	f7f5 fd03 	bl	800de0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018408:	2300      	movs	r3, #0
}
 801840a:	4618      	mov	r0, r3
 801840c:	3708      	adds	r7, #8
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
 8018412:	bf00      	nop
 8018414:	2000aa2c 	.word	0x2000aa2c
 8018418:	40006800 	.word	0x40006800

0801841c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018424:	2300      	movs	r3, #0
 8018426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018428:	2300      	movs	r3, #0
 801842a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018432:	4618      	mov	r0, r3
 8018434:	f7f4 f925 	bl	800c682 <HAL_PCD_Start>
 8018438:	4603      	mov	r3, r0
 801843a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801843c:	7bfb      	ldrb	r3, [r7, #15]
 801843e:	4618      	mov	r0, r3
 8018440:	f000 f97e 	bl	8018740 <USBD_Get_USB_Status>
 8018444:	4603      	mov	r3, r0
 8018446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018448:	7bbb      	ldrb	r3, [r7, #14]
}
 801844a:	4618      	mov	r0, r3
 801844c:	3710      	adds	r7, #16
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}

08018452 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018452:	b580      	push	{r7, lr}
 8018454:	b084      	sub	sp, #16
 8018456:	af00      	add	r7, sp, #0
 8018458:	6078      	str	r0, [r7, #4]
 801845a:	4608      	mov	r0, r1
 801845c:	4611      	mov	r1, r2
 801845e:	461a      	mov	r2, r3
 8018460:	4603      	mov	r3, r0
 8018462:	70fb      	strb	r3, [r7, #3]
 8018464:	460b      	mov	r3, r1
 8018466:	70bb      	strb	r3, [r7, #2]
 8018468:	4613      	mov	r3, r2
 801846a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801846c:	2300      	movs	r3, #0
 801846e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018470:	2300      	movs	r3, #0
 8018472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801847a:	78bb      	ldrb	r3, [r7, #2]
 801847c:	883a      	ldrh	r2, [r7, #0]
 801847e:	78f9      	ldrb	r1, [r7, #3]
 8018480:	f7f4 fa6c 	bl	800c95c <HAL_PCD_EP_Open>
 8018484:	4603      	mov	r3, r0
 8018486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018488:	7bfb      	ldrb	r3, [r7, #15]
 801848a:	4618      	mov	r0, r3
 801848c:	f000 f958 	bl	8018740 <USBD_Get_USB_Status>
 8018490:	4603      	mov	r3, r0
 8018492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018494:	7bbb      	ldrb	r3, [r7, #14]
}
 8018496:	4618      	mov	r0, r3
 8018498:	3710      	adds	r7, #16
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}

0801849e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801849e:	b580      	push	{r7, lr}
 80184a0:	b084      	sub	sp, #16
 80184a2:	af00      	add	r7, sp, #0
 80184a4:	6078      	str	r0, [r7, #4]
 80184a6:	460b      	mov	r3, r1
 80184a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184aa:	2300      	movs	r3, #0
 80184ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184ae:	2300      	movs	r3, #0
 80184b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184b8:	78fa      	ldrb	r2, [r7, #3]
 80184ba:	4611      	mov	r1, r2
 80184bc:	4618      	mov	r0, r3
 80184be:	f7f4 faac 	bl	800ca1a <HAL_PCD_EP_Close>
 80184c2:	4603      	mov	r3, r0
 80184c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184c6:	7bfb      	ldrb	r3, [r7, #15]
 80184c8:	4618      	mov	r0, r3
 80184ca:	f000 f939 	bl	8018740 <USBD_Get_USB_Status>
 80184ce:	4603      	mov	r3, r0
 80184d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80184d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3710      	adds	r7, #16
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}

080184dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b084      	sub	sp, #16
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
 80184e4:	460b      	mov	r3, r1
 80184e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184e8:	2300      	movs	r3, #0
 80184ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184ec:	2300      	movs	r3, #0
 80184ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184f6:	78fa      	ldrb	r2, [r7, #3]
 80184f8:	4611      	mov	r1, r2
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7f4 fb55 	bl	800cbaa <HAL_PCD_EP_SetStall>
 8018500:	4603      	mov	r3, r0
 8018502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018504:	7bfb      	ldrb	r3, [r7, #15]
 8018506:	4618      	mov	r0, r3
 8018508:	f000 f91a 	bl	8018740 <USBD_Get_USB_Status>
 801850c:	4603      	mov	r3, r0
 801850e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018510:	7bbb      	ldrb	r3, [r7, #14]
}
 8018512:	4618      	mov	r0, r3
 8018514:	3710      	adds	r7, #16
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}

0801851a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801851a:	b580      	push	{r7, lr}
 801851c:	b084      	sub	sp, #16
 801851e:	af00      	add	r7, sp, #0
 8018520:	6078      	str	r0, [r7, #4]
 8018522:	460b      	mov	r3, r1
 8018524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018526:	2300      	movs	r3, #0
 8018528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801852a:	2300      	movs	r3, #0
 801852c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018534:	78fa      	ldrb	r2, [r7, #3]
 8018536:	4611      	mov	r1, r2
 8018538:	4618      	mov	r0, r3
 801853a:	f7f4 fb88 	bl	800cc4e <HAL_PCD_EP_ClrStall>
 801853e:	4603      	mov	r3, r0
 8018540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018542:	7bfb      	ldrb	r3, [r7, #15]
 8018544:	4618      	mov	r0, r3
 8018546:	f000 f8fb 	bl	8018740 <USBD_Get_USB_Status>
 801854a:	4603      	mov	r3, r0
 801854c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801854e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018550:	4618      	mov	r0, r3
 8018552:	3710      	adds	r7, #16
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018558:	b480      	push	{r7}
 801855a:	b085      	sub	sp, #20
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	460b      	mov	r3, r1
 8018562:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801856a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801856c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018570:	2b00      	cmp	r3, #0
 8018572:	da0b      	bge.n	801858c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018574:	78fb      	ldrb	r3, [r7, #3]
 8018576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801857a:	68f9      	ldr	r1, [r7, #12]
 801857c:	4613      	mov	r3, r2
 801857e:	009b      	lsls	r3, r3, #2
 8018580:	4413      	add	r3, r2
 8018582:	00db      	lsls	r3, r3, #3
 8018584:	440b      	add	r3, r1
 8018586:	3312      	adds	r3, #18
 8018588:	781b      	ldrb	r3, [r3, #0]
 801858a:	e00b      	b.n	80185a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801858c:	78fb      	ldrb	r3, [r7, #3]
 801858e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018592:	68f9      	ldr	r1, [r7, #12]
 8018594:	4613      	mov	r3, r2
 8018596:	009b      	lsls	r3, r3, #2
 8018598:	4413      	add	r3, r2
 801859a:	00db      	lsls	r3, r3, #3
 801859c:	440b      	add	r3, r1
 801859e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80185a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3714      	adds	r7, #20
 80185a8:	46bd      	mov	sp, r7
 80185aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ae:	4770      	bx	lr

080185b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	460b      	mov	r3, r1
 80185ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185bc:	2300      	movs	r3, #0
 80185be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185c0:	2300      	movs	r3, #0
 80185c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80185ca:	78fa      	ldrb	r2, [r7, #3]
 80185cc:	4611      	mov	r1, r2
 80185ce:	4618      	mov	r0, r3
 80185d0:	f7f4 f9a0 	bl	800c914 <HAL_PCD_SetAddress>
 80185d4:	4603      	mov	r3, r0
 80185d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185d8:	7bfb      	ldrb	r3, [r7, #15]
 80185da:	4618      	mov	r0, r3
 80185dc:	f000 f8b0 	bl	8018740 <USBD_Get_USB_Status>
 80185e0:	4603      	mov	r3, r0
 80185e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80185e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3710      	adds	r7, #16
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80185ee:	b580      	push	{r7, lr}
 80185f0:	b086      	sub	sp, #24
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	60f8      	str	r0, [r7, #12]
 80185f6:	607a      	str	r2, [r7, #4]
 80185f8:	603b      	str	r3, [r7, #0]
 80185fa:	460b      	mov	r3, r1
 80185fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185fe:	2300      	movs	r3, #0
 8018600:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018602:	2300      	movs	r3, #0
 8018604:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801860c:	7af9      	ldrb	r1, [r7, #11]
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	687a      	ldr	r2, [r7, #4]
 8018612:	f7f4 fa93 	bl	800cb3c <HAL_PCD_EP_Transmit>
 8018616:	4603      	mov	r3, r0
 8018618:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801861a:	7dfb      	ldrb	r3, [r7, #23]
 801861c:	4618      	mov	r0, r3
 801861e:	f000 f88f 	bl	8018740 <USBD_Get_USB_Status>
 8018622:	4603      	mov	r3, r0
 8018624:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018626:	7dbb      	ldrb	r3, [r7, #22]
}
 8018628:	4618      	mov	r0, r3
 801862a:	3718      	adds	r7, #24
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}

08018630 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b086      	sub	sp, #24
 8018634:	af00      	add	r7, sp, #0
 8018636:	60f8      	str	r0, [r7, #12]
 8018638:	607a      	str	r2, [r7, #4]
 801863a:	603b      	str	r3, [r7, #0]
 801863c:	460b      	mov	r3, r1
 801863e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018640:	2300      	movs	r3, #0
 8018642:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018644:	2300      	movs	r3, #0
 8018646:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801864e:	7af9      	ldrb	r1, [r7, #11]
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	687a      	ldr	r2, [r7, #4]
 8018654:	f7f4 fa29 	bl	800caaa <HAL_PCD_EP_Receive>
 8018658:	4603      	mov	r3, r0
 801865a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801865c:	7dfb      	ldrb	r3, [r7, #23]
 801865e:	4618      	mov	r0, r3
 8018660:	f000 f86e 	bl	8018740 <USBD_Get_USB_Status>
 8018664:	4603      	mov	r3, r0
 8018666:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018668:	7dbb      	ldrb	r3, [r7, #22]
}
 801866a:	4618      	mov	r0, r3
 801866c:	3718      	adds	r7, #24
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}

08018672 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018672:	b580      	push	{r7, lr}
 8018674:	b082      	sub	sp, #8
 8018676:	af00      	add	r7, sp, #0
 8018678:	6078      	str	r0, [r7, #4]
 801867a:	460b      	mov	r3, r1
 801867c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018684:	78fa      	ldrb	r2, [r7, #3]
 8018686:	4611      	mov	r1, r2
 8018688:	4618      	mov	r0, r3
 801868a:	f7f4 fa3f 	bl	800cb0c <HAL_PCD_EP_GetRxCount>
 801868e:	4603      	mov	r3, r0
}
 8018690:	4618      	mov	r0, r3
 8018692:	3708      	adds	r7, #8
 8018694:	46bd      	mov	sp, r7
 8018696:	bd80      	pop	{r7, pc}

08018698 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b082      	sub	sp, #8
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
 80186a0:	460b      	mov	r3, r1
 80186a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80186a4:	78fb      	ldrb	r3, [r7, #3]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d002      	beq.n	80186b0 <HAL_PCDEx_LPM_Callback+0x18>
 80186aa:	2b01      	cmp	r3, #1
 80186ac:	d013      	beq.n	80186d6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80186ae:	e023      	b.n	80186f8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	7a5b      	ldrb	r3, [r3, #9]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d007      	beq.n	80186c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80186b8:	f000 f83c 	bl	8018734 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80186bc:	4b10      	ldr	r3, [pc, #64]	@ (8018700 <HAL_PCDEx_LPM_Callback+0x68>)
 80186be:	691b      	ldr	r3, [r3, #16]
 80186c0:	4a0f      	ldr	r2, [pc, #60]	@ (8018700 <HAL_PCDEx_LPM_Callback+0x68>)
 80186c2:	f023 0306 	bic.w	r3, r3, #6
 80186c6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7fa fc85 	bl	8012fde <USBD_LL_Resume>
    break;
 80186d4:	e010      	b.n	80186f8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80186dc:	4618      	mov	r0, r3
 80186de:	f7fa fc62 	bl	8012fa6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	7a5b      	ldrb	r3, [r3, #9]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d005      	beq.n	80186f6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80186ea:	4b05      	ldr	r3, [pc, #20]	@ (8018700 <HAL_PCDEx_LPM_Callback+0x68>)
 80186ec:	691b      	ldr	r3, [r3, #16]
 80186ee:	4a04      	ldr	r2, [pc, #16]	@ (8018700 <HAL_PCDEx_LPM_Callback+0x68>)
 80186f0:	f043 0306 	orr.w	r3, r3, #6
 80186f4:	6113      	str	r3, [r2, #16]
    break;
 80186f6:	bf00      	nop
}
 80186f8:	bf00      	nop
 80186fa:	3708      	adds	r7, #8
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	e000ed00 	.word	0xe000ed00

08018704 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018704:	b480      	push	{r7}
 8018706:	b083      	sub	sp, #12
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801870c:	4b03      	ldr	r3, [pc, #12]	@ (801871c <USBD_static_malloc+0x18>)
}
 801870e:	4618      	mov	r0, r3
 8018710:	370c      	adds	r7, #12
 8018712:	46bd      	mov	sp, r7
 8018714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018718:	4770      	bx	lr
 801871a:	bf00      	nop
 801871c:	2000ad08 	.word	0x2000ad08

08018720 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018720:	b480      	push	{r7}
 8018722:	b083      	sub	sp, #12
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018728:	bf00      	nop
 801872a:	370c      	adds	r7, #12
 801872c:	46bd      	mov	sp, r7
 801872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018732:	4770      	bx	lr

08018734 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018738:	f7ef fa6c 	bl	8007c14 <SystemClock_Config>
}
 801873c:	bf00      	nop
 801873e:	bd80      	pop	{r7, pc}

08018740 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018740:	b480      	push	{r7}
 8018742:	b085      	sub	sp, #20
 8018744:	af00      	add	r7, sp, #0
 8018746:	4603      	mov	r3, r0
 8018748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801874a:	2300      	movs	r3, #0
 801874c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801874e:	79fb      	ldrb	r3, [r7, #7]
 8018750:	2b03      	cmp	r3, #3
 8018752:	d817      	bhi.n	8018784 <USBD_Get_USB_Status+0x44>
 8018754:	a201      	add	r2, pc, #4	@ (adr r2, 801875c <USBD_Get_USB_Status+0x1c>)
 8018756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801875a:	bf00      	nop
 801875c:	0801876d 	.word	0x0801876d
 8018760:	08018773 	.word	0x08018773
 8018764:	08018779 	.word	0x08018779
 8018768:	0801877f 	.word	0x0801877f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801876c:	2300      	movs	r3, #0
 801876e:	73fb      	strb	r3, [r7, #15]
    break;
 8018770:	e00b      	b.n	801878a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018772:	2303      	movs	r3, #3
 8018774:	73fb      	strb	r3, [r7, #15]
    break;
 8018776:	e008      	b.n	801878a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018778:	2301      	movs	r3, #1
 801877a:	73fb      	strb	r3, [r7, #15]
    break;
 801877c:	e005      	b.n	801878a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801877e:	2303      	movs	r3, #3
 8018780:	73fb      	strb	r3, [r7, #15]
    break;
 8018782:	e002      	b.n	801878a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018784:	2303      	movs	r3, #3
 8018786:	73fb      	strb	r3, [r7, #15]
    break;
 8018788:	bf00      	nop
  }
  return usb_status;
 801878a:	7bfb      	ldrb	r3, [r7, #15]
}
 801878c:	4618      	mov	r0, r3
 801878e:	3714      	adds	r7, #20
 8018790:	46bd      	mov	sp, r7
 8018792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018796:	4770      	bx	lr

08018798 <__cvt>:
 8018798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801879c:	ec57 6b10 	vmov	r6, r7, d0
 80187a0:	2f00      	cmp	r7, #0
 80187a2:	460c      	mov	r4, r1
 80187a4:	4619      	mov	r1, r3
 80187a6:	463b      	mov	r3, r7
 80187a8:	bfbb      	ittet	lt
 80187aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80187ae:	461f      	movlt	r7, r3
 80187b0:	2300      	movge	r3, #0
 80187b2:	232d      	movlt	r3, #45	@ 0x2d
 80187b4:	700b      	strb	r3, [r1, #0]
 80187b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80187bc:	4691      	mov	r9, r2
 80187be:	f023 0820 	bic.w	r8, r3, #32
 80187c2:	bfbc      	itt	lt
 80187c4:	4632      	movlt	r2, r6
 80187c6:	4616      	movlt	r6, r2
 80187c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80187cc:	d005      	beq.n	80187da <__cvt+0x42>
 80187ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80187d2:	d100      	bne.n	80187d6 <__cvt+0x3e>
 80187d4:	3401      	adds	r4, #1
 80187d6:	2102      	movs	r1, #2
 80187d8:	e000      	b.n	80187dc <__cvt+0x44>
 80187da:	2103      	movs	r1, #3
 80187dc:	ab03      	add	r3, sp, #12
 80187de:	9301      	str	r3, [sp, #4]
 80187e0:	ab02      	add	r3, sp, #8
 80187e2:	9300      	str	r3, [sp, #0]
 80187e4:	ec47 6b10 	vmov	d0, r6, r7
 80187e8:	4653      	mov	r3, sl
 80187ea:	4622      	mov	r2, r4
 80187ec:	f000 ffcc 	bl	8019788 <_dtoa_r>
 80187f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80187f4:	4605      	mov	r5, r0
 80187f6:	d119      	bne.n	801882c <__cvt+0x94>
 80187f8:	f019 0f01 	tst.w	r9, #1
 80187fc:	d00e      	beq.n	801881c <__cvt+0x84>
 80187fe:	eb00 0904 	add.w	r9, r0, r4
 8018802:	2200      	movs	r2, #0
 8018804:	2300      	movs	r3, #0
 8018806:	4630      	mov	r0, r6
 8018808:	4639      	mov	r1, r7
 801880a:	f7e8 f935 	bl	8000a78 <__aeabi_dcmpeq>
 801880e:	b108      	cbz	r0, 8018814 <__cvt+0x7c>
 8018810:	f8cd 900c 	str.w	r9, [sp, #12]
 8018814:	2230      	movs	r2, #48	@ 0x30
 8018816:	9b03      	ldr	r3, [sp, #12]
 8018818:	454b      	cmp	r3, r9
 801881a:	d31e      	bcc.n	801885a <__cvt+0xc2>
 801881c:	9b03      	ldr	r3, [sp, #12]
 801881e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018820:	1b5b      	subs	r3, r3, r5
 8018822:	4628      	mov	r0, r5
 8018824:	6013      	str	r3, [r2, #0]
 8018826:	b004      	add	sp, #16
 8018828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801882c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018830:	eb00 0904 	add.w	r9, r0, r4
 8018834:	d1e5      	bne.n	8018802 <__cvt+0x6a>
 8018836:	7803      	ldrb	r3, [r0, #0]
 8018838:	2b30      	cmp	r3, #48	@ 0x30
 801883a:	d10a      	bne.n	8018852 <__cvt+0xba>
 801883c:	2200      	movs	r2, #0
 801883e:	2300      	movs	r3, #0
 8018840:	4630      	mov	r0, r6
 8018842:	4639      	mov	r1, r7
 8018844:	f7e8 f918 	bl	8000a78 <__aeabi_dcmpeq>
 8018848:	b918      	cbnz	r0, 8018852 <__cvt+0xba>
 801884a:	f1c4 0401 	rsb	r4, r4, #1
 801884e:	f8ca 4000 	str.w	r4, [sl]
 8018852:	f8da 3000 	ldr.w	r3, [sl]
 8018856:	4499      	add	r9, r3
 8018858:	e7d3      	b.n	8018802 <__cvt+0x6a>
 801885a:	1c59      	adds	r1, r3, #1
 801885c:	9103      	str	r1, [sp, #12]
 801885e:	701a      	strb	r2, [r3, #0]
 8018860:	e7d9      	b.n	8018816 <__cvt+0x7e>

08018862 <__exponent>:
 8018862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018864:	2900      	cmp	r1, #0
 8018866:	bfba      	itte	lt
 8018868:	4249      	neglt	r1, r1
 801886a:	232d      	movlt	r3, #45	@ 0x2d
 801886c:	232b      	movge	r3, #43	@ 0x2b
 801886e:	2909      	cmp	r1, #9
 8018870:	7002      	strb	r2, [r0, #0]
 8018872:	7043      	strb	r3, [r0, #1]
 8018874:	dd29      	ble.n	80188ca <__exponent+0x68>
 8018876:	f10d 0307 	add.w	r3, sp, #7
 801887a:	461d      	mov	r5, r3
 801887c:	270a      	movs	r7, #10
 801887e:	461a      	mov	r2, r3
 8018880:	fbb1 f6f7 	udiv	r6, r1, r7
 8018884:	fb07 1416 	mls	r4, r7, r6, r1
 8018888:	3430      	adds	r4, #48	@ 0x30
 801888a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801888e:	460c      	mov	r4, r1
 8018890:	2c63      	cmp	r4, #99	@ 0x63
 8018892:	f103 33ff 	add.w	r3, r3, #4294967295
 8018896:	4631      	mov	r1, r6
 8018898:	dcf1      	bgt.n	801887e <__exponent+0x1c>
 801889a:	3130      	adds	r1, #48	@ 0x30
 801889c:	1e94      	subs	r4, r2, #2
 801889e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80188a2:	1c41      	adds	r1, r0, #1
 80188a4:	4623      	mov	r3, r4
 80188a6:	42ab      	cmp	r3, r5
 80188a8:	d30a      	bcc.n	80188c0 <__exponent+0x5e>
 80188aa:	f10d 0309 	add.w	r3, sp, #9
 80188ae:	1a9b      	subs	r3, r3, r2
 80188b0:	42ac      	cmp	r4, r5
 80188b2:	bf88      	it	hi
 80188b4:	2300      	movhi	r3, #0
 80188b6:	3302      	adds	r3, #2
 80188b8:	4403      	add	r3, r0
 80188ba:	1a18      	subs	r0, r3, r0
 80188bc:	b003      	add	sp, #12
 80188be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80188c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80188c8:	e7ed      	b.n	80188a6 <__exponent+0x44>
 80188ca:	2330      	movs	r3, #48	@ 0x30
 80188cc:	3130      	adds	r1, #48	@ 0x30
 80188ce:	7083      	strb	r3, [r0, #2]
 80188d0:	70c1      	strb	r1, [r0, #3]
 80188d2:	1d03      	adds	r3, r0, #4
 80188d4:	e7f1      	b.n	80188ba <__exponent+0x58>
	...

080188d8 <_printf_float>:
 80188d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188dc:	b08d      	sub	sp, #52	@ 0x34
 80188de:	460c      	mov	r4, r1
 80188e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80188e4:	4616      	mov	r6, r2
 80188e6:	461f      	mov	r7, r3
 80188e8:	4605      	mov	r5, r0
 80188ea:	f000 fddf 	bl	80194ac <_localeconv_r>
 80188ee:	6803      	ldr	r3, [r0, #0]
 80188f0:	9304      	str	r3, [sp, #16]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7e7 fc94 	bl	8000220 <strlen>
 80188f8:	2300      	movs	r3, #0
 80188fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80188fc:	f8d8 3000 	ldr.w	r3, [r8]
 8018900:	9005      	str	r0, [sp, #20]
 8018902:	3307      	adds	r3, #7
 8018904:	f023 0307 	bic.w	r3, r3, #7
 8018908:	f103 0208 	add.w	r2, r3, #8
 801890c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018910:	f8d4 b000 	ldr.w	fp, [r4]
 8018914:	f8c8 2000 	str.w	r2, [r8]
 8018918:	e9d3 8900 	ldrd	r8, r9, [r3]
 801891c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018920:	9307      	str	r3, [sp, #28]
 8018922:	f8cd 8018 	str.w	r8, [sp, #24]
 8018926:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801892a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801892e:	4b9c      	ldr	r3, [pc, #624]	@ (8018ba0 <_printf_float+0x2c8>)
 8018930:	f04f 32ff 	mov.w	r2, #4294967295
 8018934:	f7e8 f8d2 	bl	8000adc <__aeabi_dcmpun>
 8018938:	bb70      	cbnz	r0, 8018998 <_printf_float+0xc0>
 801893a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801893e:	4b98      	ldr	r3, [pc, #608]	@ (8018ba0 <_printf_float+0x2c8>)
 8018940:	f04f 32ff 	mov.w	r2, #4294967295
 8018944:	f7e8 f8ac 	bl	8000aa0 <__aeabi_dcmple>
 8018948:	bb30      	cbnz	r0, 8018998 <_printf_float+0xc0>
 801894a:	2200      	movs	r2, #0
 801894c:	2300      	movs	r3, #0
 801894e:	4640      	mov	r0, r8
 8018950:	4649      	mov	r1, r9
 8018952:	f7e8 f89b 	bl	8000a8c <__aeabi_dcmplt>
 8018956:	b110      	cbz	r0, 801895e <_printf_float+0x86>
 8018958:	232d      	movs	r3, #45	@ 0x2d
 801895a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801895e:	4a91      	ldr	r2, [pc, #580]	@ (8018ba4 <_printf_float+0x2cc>)
 8018960:	4b91      	ldr	r3, [pc, #580]	@ (8018ba8 <_printf_float+0x2d0>)
 8018962:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018966:	bf8c      	ite	hi
 8018968:	4690      	movhi	r8, r2
 801896a:	4698      	movls	r8, r3
 801896c:	2303      	movs	r3, #3
 801896e:	6123      	str	r3, [r4, #16]
 8018970:	f02b 0304 	bic.w	r3, fp, #4
 8018974:	6023      	str	r3, [r4, #0]
 8018976:	f04f 0900 	mov.w	r9, #0
 801897a:	9700      	str	r7, [sp, #0]
 801897c:	4633      	mov	r3, r6
 801897e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018980:	4621      	mov	r1, r4
 8018982:	4628      	mov	r0, r5
 8018984:	f000 f9d2 	bl	8018d2c <_printf_common>
 8018988:	3001      	adds	r0, #1
 801898a:	f040 808d 	bne.w	8018aa8 <_printf_float+0x1d0>
 801898e:	f04f 30ff 	mov.w	r0, #4294967295
 8018992:	b00d      	add	sp, #52	@ 0x34
 8018994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018998:	4642      	mov	r2, r8
 801899a:	464b      	mov	r3, r9
 801899c:	4640      	mov	r0, r8
 801899e:	4649      	mov	r1, r9
 80189a0:	f7e8 f89c 	bl	8000adc <__aeabi_dcmpun>
 80189a4:	b140      	cbz	r0, 80189b8 <_printf_float+0xe0>
 80189a6:	464b      	mov	r3, r9
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	bfbc      	itt	lt
 80189ac:	232d      	movlt	r3, #45	@ 0x2d
 80189ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80189b2:	4a7e      	ldr	r2, [pc, #504]	@ (8018bac <_printf_float+0x2d4>)
 80189b4:	4b7e      	ldr	r3, [pc, #504]	@ (8018bb0 <_printf_float+0x2d8>)
 80189b6:	e7d4      	b.n	8018962 <_printf_float+0x8a>
 80189b8:	6863      	ldr	r3, [r4, #4]
 80189ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80189be:	9206      	str	r2, [sp, #24]
 80189c0:	1c5a      	adds	r2, r3, #1
 80189c2:	d13b      	bne.n	8018a3c <_printf_float+0x164>
 80189c4:	2306      	movs	r3, #6
 80189c6:	6063      	str	r3, [r4, #4]
 80189c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80189cc:	2300      	movs	r3, #0
 80189ce:	6022      	str	r2, [r4, #0]
 80189d0:	9303      	str	r3, [sp, #12]
 80189d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80189d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80189d8:	ab09      	add	r3, sp, #36	@ 0x24
 80189da:	9300      	str	r3, [sp, #0]
 80189dc:	6861      	ldr	r1, [r4, #4]
 80189de:	ec49 8b10 	vmov	d0, r8, r9
 80189e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80189e6:	4628      	mov	r0, r5
 80189e8:	f7ff fed6 	bl	8018798 <__cvt>
 80189ec:	9b06      	ldr	r3, [sp, #24]
 80189ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80189f0:	2b47      	cmp	r3, #71	@ 0x47
 80189f2:	4680      	mov	r8, r0
 80189f4:	d129      	bne.n	8018a4a <_printf_float+0x172>
 80189f6:	1cc8      	adds	r0, r1, #3
 80189f8:	db02      	blt.n	8018a00 <_printf_float+0x128>
 80189fa:	6863      	ldr	r3, [r4, #4]
 80189fc:	4299      	cmp	r1, r3
 80189fe:	dd41      	ble.n	8018a84 <_printf_float+0x1ac>
 8018a00:	f1aa 0a02 	sub.w	sl, sl, #2
 8018a04:	fa5f fa8a 	uxtb.w	sl, sl
 8018a08:	3901      	subs	r1, #1
 8018a0a:	4652      	mov	r2, sl
 8018a0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018a10:	9109      	str	r1, [sp, #36]	@ 0x24
 8018a12:	f7ff ff26 	bl	8018862 <__exponent>
 8018a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a18:	1813      	adds	r3, r2, r0
 8018a1a:	2a01      	cmp	r2, #1
 8018a1c:	4681      	mov	r9, r0
 8018a1e:	6123      	str	r3, [r4, #16]
 8018a20:	dc02      	bgt.n	8018a28 <_printf_float+0x150>
 8018a22:	6822      	ldr	r2, [r4, #0]
 8018a24:	07d2      	lsls	r2, r2, #31
 8018a26:	d501      	bpl.n	8018a2c <_printf_float+0x154>
 8018a28:	3301      	adds	r3, #1
 8018a2a:	6123      	str	r3, [r4, #16]
 8018a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d0a2      	beq.n	801897a <_printf_float+0xa2>
 8018a34:	232d      	movs	r3, #45	@ 0x2d
 8018a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018a3a:	e79e      	b.n	801897a <_printf_float+0xa2>
 8018a3c:	9a06      	ldr	r2, [sp, #24]
 8018a3e:	2a47      	cmp	r2, #71	@ 0x47
 8018a40:	d1c2      	bne.n	80189c8 <_printf_float+0xf0>
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d1c0      	bne.n	80189c8 <_printf_float+0xf0>
 8018a46:	2301      	movs	r3, #1
 8018a48:	e7bd      	b.n	80189c6 <_printf_float+0xee>
 8018a4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018a4e:	d9db      	bls.n	8018a08 <_printf_float+0x130>
 8018a50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8018a54:	d118      	bne.n	8018a88 <_printf_float+0x1b0>
 8018a56:	2900      	cmp	r1, #0
 8018a58:	6863      	ldr	r3, [r4, #4]
 8018a5a:	dd0b      	ble.n	8018a74 <_printf_float+0x19c>
 8018a5c:	6121      	str	r1, [r4, #16]
 8018a5e:	b913      	cbnz	r3, 8018a66 <_printf_float+0x18e>
 8018a60:	6822      	ldr	r2, [r4, #0]
 8018a62:	07d0      	lsls	r0, r2, #31
 8018a64:	d502      	bpl.n	8018a6c <_printf_float+0x194>
 8018a66:	3301      	adds	r3, #1
 8018a68:	440b      	add	r3, r1
 8018a6a:	6123      	str	r3, [r4, #16]
 8018a6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018a6e:	f04f 0900 	mov.w	r9, #0
 8018a72:	e7db      	b.n	8018a2c <_printf_float+0x154>
 8018a74:	b913      	cbnz	r3, 8018a7c <_printf_float+0x1a4>
 8018a76:	6822      	ldr	r2, [r4, #0]
 8018a78:	07d2      	lsls	r2, r2, #31
 8018a7a:	d501      	bpl.n	8018a80 <_printf_float+0x1a8>
 8018a7c:	3302      	adds	r3, #2
 8018a7e:	e7f4      	b.n	8018a6a <_printf_float+0x192>
 8018a80:	2301      	movs	r3, #1
 8018a82:	e7f2      	b.n	8018a6a <_printf_float+0x192>
 8018a84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8018a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a8a:	4299      	cmp	r1, r3
 8018a8c:	db05      	blt.n	8018a9a <_printf_float+0x1c2>
 8018a8e:	6823      	ldr	r3, [r4, #0]
 8018a90:	6121      	str	r1, [r4, #16]
 8018a92:	07d8      	lsls	r0, r3, #31
 8018a94:	d5ea      	bpl.n	8018a6c <_printf_float+0x194>
 8018a96:	1c4b      	adds	r3, r1, #1
 8018a98:	e7e7      	b.n	8018a6a <_printf_float+0x192>
 8018a9a:	2900      	cmp	r1, #0
 8018a9c:	bfd4      	ite	le
 8018a9e:	f1c1 0202 	rsble	r2, r1, #2
 8018aa2:	2201      	movgt	r2, #1
 8018aa4:	4413      	add	r3, r2
 8018aa6:	e7e0      	b.n	8018a6a <_printf_float+0x192>
 8018aa8:	6823      	ldr	r3, [r4, #0]
 8018aaa:	055a      	lsls	r2, r3, #21
 8018aac:	d407      	bmi.n	8018abe <_printf_float+0x1e6>
 8018aae:	6923      	ldr	r3, [r4, #16]
 8018ab0:	4642      	mov	r2, r8
 8018ab2:	4631      	mov	r1, r6
 8018ab4:	4628      	mov	r0, r5
 8018ab6:	47b8      	blx	r7
 8018ab8:	3001      	adds	r0, #1
 8018aba:	d12b      	bne.n	8018b14 <_printf_float+0x23c>
 8018abc:	e767      	b.n	801898e <_printf_float+0xb6>
 8018abe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018ac2:	f240 80dd 	bls.w	8018c80 <_printf_float+0x3a8>
 8018ac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018aca:	2200      	movs	r2, #0
 8018acc:	2300      	movs	r3, #0
 8018ace:	f7e7 ffd3 	bl	8000a78 <__aeabi_dcmpeq>
 8018ad2:	2800      	cmp	r0, #0
 8018ad4:	d033      	beq.n	8018b3e <_printf_float+0x266>
 8018ad6:	4a37      	ldr	r2, [pc, #220]	@ (8018bb4 <_printf_float+0x2dc>)
 8018ad8:	2301      	movs	r3, #1
 8018ada:	4631      	mov	r1, r6
 8018adc:	4628      	mov	r0, r5
 8018ade:	47b8      	blx	r7
 8018ae0:	3001      	adds	r0, #1
 8018ae2:	f43f af54 	beq.w	801898e <_printf_float+0xb6>
 8018ae6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018aea:	4543      	cmp	r3, r8
 8018aec:	db02      	blt.n	8018af4 <_printf_float+0x21c>
 8018aee:	6823      	ldr	r3, [r4, #0]
 8018af0:	07d8      	lsls	r0, r3, #31
 8018af2:	d50f      	bpl.n	8018b14 <_printf_float+0x23c>
 8018af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018af8:	4631      	mov	r1, r6
 8018afa:	4628      	mov	r0, r5
 8018afc:	47b8      	blx	r7
 8018afe:	3001      	adds	r0, #1
 8018b00:	f43f af45 	beq.w	801898e <_printf_float+0xb6>
 8018b04:	f04f 0900 	mov.w	r9, #0
 8018b08:	f108 38ff 	add.w	r8, r8, #4294967295
 8018b0c:	f104 0a1a 	add.w	sl, r4, #26
 8018b10:	45c8      	cmp	r8, r9
 8018b12:	dc09      	bgt.n	8018b28 <_printf_float+0x250>
 8018b14:	6823      	ldr	r3, [r4, #0]
 8018b16:	079b      	lsls	r3, r3, #30
 8018b18:	f100 8103 	bmi.w	8018d22 <_printf_float+0x44a>
 8018b1c:	68e0      	ldr	r0, [r4, #12]
 8018b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b20:	4298      	cmp	r0, r3
 8018b22:	bfb8      	it	lt
 8018b24:	4618      	movlt	r0, r3
 8018b26:	e734      	b.n	8018992 <_printf_float+0xba>
 8018b28:	2301      	movs	r3, #1
 8018b2a:	4652      	mov	r2, sl
 8018b2c:	4631      	mov	r1, r6
 8018b2e:	4628      	mov	r0, r5
 8018b30:	47b8      	blx	r7
 8018b32:	3001      	adds	r0, #1
 8018b34:	f43f af2b 	beq.w	801898e <_printf_float+0xb6>
 8018b38:	f109 0901 	add.w	r9, r9, #1
 8018b3c:	e7e8      	b.n	8018b10 <_printf_float+0x238>
 8018b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	dc39      	bgt.n	8018bb8 <_printf_float+0x2e0>
 8018b44:	4a1b      	ldr	r2, [pc, #108]	@ (8018bb4 <_printf_float+0x2dc>)
 8018b46:	2301      	movs	r3, #1
 8018b48:	4631      	mov	r1, r6
 8018b4a:	4628      	mov	r0, r5
 8018b4c:	47b8      	blx	r7
 8018b4e:	3001      	adds	r0, #1
 8018b50:	f43f af1d 	beq.w	801898e <_printf_float+0xb6>
 8018b54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018b58:	ea59 0303 	orrs.w	r3, r9, r3
 8018b5c:	d102      	bne.n	8018b64 <_printf_float+0x28c>
 8018b5e:	6823      	ldr	r3, [r4, #0]
 8018b60:	07d9      	lsls	r1, r3, #31
 8018b62:	d5d7      	bpl.n	8018b14 <_printf_float+0x23c>
 8018b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b68:	4631      	mov	r1, r6
 8018b6a:	4628      	mov	r0, r5
 8018b6c:	47b8      	blx	r7
 8018b6e:	3001      	adds	r0, #1
 8018b70:	f43f af0d 	beq.w	801898e <_printf_float+0xb6>
 8018b74:	f04f 0a00 	mov.w	sl, #0
 8018b78:	f104 0b1a 	add.w	fp, r4, #26
 8018b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b7e:	425b      	negs	r3, r3
 8018b80:	4553      	cmp	r3, sl
 8018b82:	dc01      	bgt.n	8018b88 <_printf_float+0x2b0>
 8018b84:	464b      	mov	r3, r9
 8018b86:	e793      	b.n	8018ab0 <_printf_float+0x1d8>
 8018b88:	2301      	movs	r3, #1
 8018b8a:	465a      	mov	r2, fp
 8018b8c:	4631      	mov	r1, r6
 8018b8e:	4628      	mov	r0, r5
 8018b90:	47b8      	blx	r7
 8018b92:	3001      	adds	r0, #1
 8018b94:	f43f aefb 	beq.w	801898e <_printf_float+0xb6>
 8018b98:	f10a 0a01 	add.w	sl, sl, #1
 8018b9c:	e7ee      	b.n	8018b7c <_printf_float+0x2a4>
 8018b9e:	bf00      	nop
 8018ba0:	7fefffff 	.word	0x7fefffff
 8018ba4:	0801f664 	.word	0x0801f664
 8018ba8:	0801f660 	.word	0x0801f660
 8018bac:	0801f66c 	.word	0x0801f66c
 8018bb0:	0801f668 	.word	0x0801f668
 8018bb4:	0801f670 	.word	0x0801f670
 8018bb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018bba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018bbe:	4553      	cmp	r3, sl
 8018bc0:	bfa8      	it	ge
 8018bc2:	4653      	movge	r3, sl
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	4699      	mov	r9, r3
 8018bc8:	dc36      	bgt.n	8018c38 <_printf_float+0x360>
 8018bca:	f04f 0b00 	mov.w	fp, #0
 8018bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018bd2:	f104 021a 	add.w	r2, r4, #26
 8018bd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018bd8:	9306      	str	r3, [sp, #24]
 8018bda:	eba3 0309 	sub.w	r3, r3, r9
 8018bde:	455b      	cmp	r3, fp
 8018be0:	dc31      	bgt.n	8018c46 <_printf_float+0x36e>
 8018be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018be4:	459a      	cmp	sl, r3
 8018be6:	dc3a      	bgt.n	8018c5e <_printf_float+0x386>
 8018be8:	6823      	ldr	r3, [r4, #0]
 8018bea:	07da      	lsls	r2, r3, #31
 8018bec:	d437      	bmi.n	8018c5e <_printf_float+0x386>
 8018bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bf0:	ebaa 0903 	sub.w	r9, sl, r3
 8018bf4:	9b06      	ldr	r3, [sp, #24]
 8018bf6:	ebaa 0303 	sub.w	r3, sl, r3
 8018bfa:	4599      	cmp	r9, r3
 8018bfc:	bfa8      	it	ge
 8018bfe:	4699      	movge	r9, r3
 8018c00:	f1b9 0f00 	cmp.w	r9, #0
 8018c04:	dc33      	bgt.n	8018c6e <_printf_float+0x396>
 8018c06:	f04f 0800 	mov.w	r8, #0
 8018c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018c0e:	f104 0b1a 	add.w	fp, r4, #26
 8018c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c14:	ebaa 0303 	sub.w	r3, sl, r3
 8018c18:	eba3 0309 	sub.w	r3, r3, r9
 8018c1c:	4543      	cmp	r3, r8
 8018c1e:	f77f af79 	ble.w	8018b14 <_printf_float+0x23c>
 8018c22:	2301      	movs	r3, #1
 8018c24:	465a      	mov	r2, fp
 8018c26:	4631      	mov	r1, r6
 8018c28:	4628      	mov	r0, r5
 8018c2a:	47b8      	blx	r7
 8018c2c:	3001      	adds	r0, #1
 8018c2e:	f43f aeae 	beq.w	801898e <_printf_float+0xb6>
 8018c32:	f108 0801 	add.w	r8, r8, #1
 8018c36:	e7ec      	b.n	8018c12 <_printf_float+0x33a>
 8018c38:	4642      	mov	r2, r8
 8018c3a:	4631      	mov	r1, r6
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	47b8      	blx	r7
 8018c40:	3001      	adds	r0, #1
 8018c42:	d1c2      	bne.n	8018bca <_printf_float+0x2f2>
 8018c44:	e6a3      	b.n	801898e <_printf_float+0xb6>
 8018c46:	2301      	movs	r3, #1
 8018c48:	4631      	mov	r1, r6
 8018c4a:	4628      	mov	r0, r5
 8018c4c:	9206      	str	r2, [sp, #24]
 8018c4e:	47b8      	blx	r7
 8018c50:	3001      	adds	r0, #1
 8018c52:	f43f ae9c 	beq.w	801898e <_printf_float+0xb6>
 8018c56:	9a06      	ldr	r2, [sp, #24]
 8018c58:	f10b 0b01 	add.w	fp, fp, #1
 8018c5c:	e7bb      	b.n	8018bd6 <_printf_float+0x2fe>
 8018c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c62:	4631      	mov	r1, r6
 8018c64:	4628      	mov	r0, r5
 8018c66:	47b8      	blx	r7
 8018c68:	3001      	adds	r0, #1
 8018c6a:	d1c0      	bne.n	8018bee <_printf_float+0x316>
 8018c6c:	e68f      	b.n	801898e <_printf_float+0xb6>
 8018c6e:	9a06      	ldr	r2, [sp, #24]
 8018c70:	464b      	mov	r3, r9
 8018c72:	4442      	add	r2, r8
 8018c74:	4631      	mov	r1, r6
 8018c76:	4628      	mov	r0, r5
 8018c78:	47b8      	blx	r7
 8018c7a:	3001      	adds	r0, #1
 8018c7c:	d1c3      	bne.n	8018c06 <_printf_float+0x32e>
 8018c7e:	e686      	b.n	801898e <_printf_float+0xb6>
 8018c80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018c84:	f1ba 0f01 	cmp.w	sl, #1
 8018c88:	dc01      	bgt.n	8018c8e <_printf_float+0x3b6>
 8018c8a:	07db      	lsls	r3, r3, #31
 8018c8c:	d536      	bpl.n	8018cfc <_printf_float+0x424>
 8018c8e:	2301      	movs	r3, #1
 8018c90:	4642      	mov	r2, r8
 8018c92:	4631      	mov	r1, r6
 8018c94:	4628      	mov	r0, r5
 8018c96:	47b8      	blx	r7
 8018c98:	3001      	adds	r0, #1
 8018c9a:	f43f ae78 	beq.w	801898e <_printf_float+0xb6>
 8018c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ca2:	4631      	mov	r1, r6
 8018ca4:	4628      	mov	r0, r5
 8018ca6:	47b8      	blx	r7
 8018ca8:	3001      	adds	r0, #1
 8018caa:	f43f ae70 	beq.w	801898e <_printf_float+0xb6>
 8018cae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018cba:	f7e7 fedd 	bl	8000a78 <__aeabi_dcmpeq>
 8018cbe:	b9c0      	cbnz	r0, 8018cf2 <_printf_float+0x41a>
 8018cc0:	4653      	mov	r3, sl
 8018cc2:	f108 0201 	add.w	r2, r8, #1
 8018cc6:	4631      	mov	r1, r6
 8018cc8:	4628      	mov	r0, r5
 8018cca:	47b8      	blx	r7
 8018ccc:	3001      	adds	r0, #1
 8018cce:	d10c      	bne.n	8018cea <_printf_float+0x412>
 8018cd0:	e65d      	b.n	801898e <_printf_float+0xb6>
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	465a      	mov	r2, fp
 8018cd6:	4631      	mov	r1, r6
 8018cd8:	4628      	mov	r0, r5
 8018cda:	47b8      	blx	r7
 8018cdc:	3001      	adds	r0, #1
 8018cde:	f43f ae56 	beq.w	801898e <_printf_float+0xb6>
 8018ce2:	f108 0801 	add.w	r8, r8, #1
 8018ce6:	45d0      	cmp	r8, sl
 8018ce8:	dbf3      	blt.n	8018cd2 <_printf_float+0x3fa>
 8018cea:	464b      	mov	r3, r9
 8018cec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018cf0:	e6df      	b.n	8018ab2 <_printf_float+0x1da>
 8018cf2:	f04f 0800 	mov.w	r8, #0
 8018cf6:	f104 0b1a 	add.w	fp, r4, #26
 8018cfa:	e7f4      	b.n	8018ce6 <_printf_float+0x40e>
 8018cfc:	2301      	movs	r3, #1
 8018cfe:	4642      	mov	r2, r8
 8018d00:	e7e1      	b.n	8018cc6 <_printf_float+0x3ee>
 8018d02:	2301      	movs	r3, #1
 8018d04:	464a      	mov	r2, r9
 8018d06:	4631      	mov	r1, r6
 8018d08:	4628      	mov	r0, r5
 8018d0a:	47b8      	blx	r7
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	f43f ae3e 	beq.w	801898e <_printf_float+0xb6>
 8018d12:	f108 0801 	add.w	r8, r8, #1
 8018d16:	68e3      	ldr	r3, [r4, #12]
 8018d18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d1a:	1a5b      	subs	r3, r3, r1
 8018d1c:	4543      	cmp	r3, r8
 8018d1e:	dcf0      	bgt.n	8018d02 <_printf_float+0x42a>
 8018d20:	e6fc      	b.n	8018b1c <_printf_float+0x244>
 8018d22:	f04f 0800 	mov.w	r8, #0
 8018d26:	f104 0919 	add.w	r9, r4, #25
 8018d2a:	e7f4      	b.n	8018d16 <_printf_float+0x43e>

08018d2c <_printf_common>:
 8018d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d30:	4616      	mov	r6, r2
 8018d32:	4698      	mov	r8, r3
 8018d34:	688a      	ldr	r2, [r1, #8]
 8018d36:	690b      	ldr	r3, [r1, #16]
 8018d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018d3c:	4293      	cmp	r3, r2
 8018d3e:	bfb8      	it	lt
 8018d40:	4613      	movlt	r3, r2
 8018d42:	6033      	str	r3, [r6, #0]
 8018d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018d48:	4607      	mov	r7, r0
 8018d4a:	460c      	mov	r4, r1
 8018d4c:	b10a      	cbz	r2, 8018d52 <_printf_common+0x26>
 8018d4e:	3301      	adds	r3, #1
 8018d50:	6033      	str	r3, [r6, #0]
 8018d52:	6823      	ldr	r3, [r4, #0]
 8018d54:	0699      	lsls	r1, r3, #26
 8018d56:	bf42      	ittt	mi
 8018d58:	6833      	ldrmi	r3, [r6, #0]
 8018d5a:	3302      	addmi	r3, #2
 8018d5c:	6033      	strmi	r3, [r6, #0]
 8018d5e:	6825      	ldr	r5, [r4, #0]
 8018d60:	f015 0506 	ands.w	r5, r5, #6
 8018d64:	d106      	bne.n	8018d74 <_printf_common+0x48>
 8018d66:	f104 0a19 	add.w	sl, r4, #25
 8018d6a:	68e3      	ldr	r3, [r4, #12]
 8018d6c:	6832      	ldr	r2, [r6, #0]
 8018d6e:	1a9b      	subs	r3, r3, r2
 8018d70:	42ab      	cmp	r3, r5
 8018d72:	dc26      	bgt.n	8018dc2 <_printf_common+0x96>
 8018d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018d78:	6822      	ldr	r2, [r4, #0]
 8018d7a:	3b00      	subs	r3, #0
 8018d7c:	bf18      	it	ne
 8018d7e:	2301      	movne	r3, #1
 8018d80:	0692      	lsls	r2, r2, #26
 8018d82:	d42b      	bmi.n	8018ddc <_printf_common+0xb0>
 8018d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018d88:	4641      	mov	r1, r8
 8018d8a:	4638      	mov	r0, r7
 8018d8c:	47c8      	blx	r9
 8018d8e:	3001      	adds	r0, #1
 8018d90:	d01e      	beq.n	8018dd0 <_printf_common+0xa4>
 8018d92:	6823      	ldr	r3, [r4, #0]
 8018d94:	6922      	ldr	r2, [r4, #16]
 8018d96:	f003 0306 	and.w	r3, r3, #6
 8018d9a:	2b04      	cmp	r3, #4
 8018d9c:	bf02      	ittt	eq
 8018d9e:	68e5      	ldreq	r5, [r4, #12]
 8018da0:	6833      	ldreq	r3, [r6, #0]
 8018da2:	1aed      	subeq	r5, r5, r3
 8018da4:	68a3      	ldr	r3, [r4, #8]
 8018da6:	bf0c      	ite	eq
 8018da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018dac:	2500      	movne	r5, #0
 8018dae:	4293      	cmp	r3, r2
 8018db0:	bfc4      	itt	gt
 8018db2:	1a9b      	subgt	r3, r3, r2
 8018db4:	18ed      	addgt	r5, r5, r3
 8018db6:	2600      	movs	r6, #0
 8018db8:	341a      	adds	r4, #26
 8018dba:	42b5      	cmp	r5, r6
 8018dbc:	d11a      	bne.n	8018df4 <_printf_common+0xc8>
 8018dbe:	2000      	movs	r0, #0
 8018dc0:	e008      	b.n	8018dd4 <_printf_common+0xa8>
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	4652      	mov	r2, sl
 8018dc6:	4641      	mov	r1, r8
 8018dc8:	4638      	mov	r0, r7
 8018dca:	47c8      	blx	r9
 8018dcc:	3001      	adds	r0, #1
 8018dce:	d103      	bne.n	8018dd8 <_printf_common+0xac>
 8018dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8018dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dd8:	3501      	adds	r5, #1
 8018dda:	e7c6      	b.n	8018d6a <_printf_common+0x3e>
 8018ddc:	18e1      	adds	r1, r4, r3
 8018dde:	1c5a      	adds	r2, r3, #1
 8018de0:	2030      	movs	r0, #48	@ 0x30
 8018de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018de6:	4422      	add	r2, r4
 8018de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018df0:	3302      	adds	r3, #2
 8018df2:	e7c7      	b.n	8018d84 <_printf_common+0x58>
 8018df4:	2301      	movs	r3, #1
 8018df6:	4622      	mov	r2, r4
 8018df8:	4641      	mov	r1, r8
 8018dfa:	4638      	mov	r0, r7
 8018dfc:	47c8      	blx	r9
 8018dfe:	3001      	adds	r0, #1
 8018e00:	d0e6      	beq.n	8018dd0 <_printf_common+0xa4>
 8018e02:	3601      	adds	r6, #1
 8018e04:	e7d9      	b.n	8018dba <_printf_common+0x8e>
	...

08018e08 <_printf_i>:
 8018e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018e0c:	7e0f      	ldrb	r7, [r1, #24]
 8018e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018e10:	2f78      	cmp	r7, #120	@ 0x78
 8018e12:	4691      	mov	r9, r2
 8018e14:	4680      	mov	r8, r0
 8018e16:	460c      	mov	r4, r1
 8018e18:	469a      	mov	sl, r3
 8018e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018e1e:	d807      	bhi.n	8018e30 <_printf_i+0x28>
 8018e20:	2f62      	cmp	r7, #98	@ 0x62
 8018e22:	d80a      	bhi.n	8018e3a <_printf_i+0x32>
 8018e24:	2f00      	cmp	r7, #0
 8018e26:	f000 80d1 	beq.w	8018fcc <_printf_i+0x1c4>
 8018e2a:	2f58      	cmp	r7, #88	@ 0x58
 8018e2c:	f000 80b8 	beq.w	8018fa0 <_printf_i+0x198>
 8018e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018e38:	e03a      	b.n	8018eb0 <_printf_i+0xa8>
 8018e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018e3e:	2b15      	cmp	r3, #21
 8018e40:	d8f6      	bhi.n	8018e30 <_printf_i+0x28>
 8018e42:	a101      	add	r1, pc, #4	@ (adr r1, 8018e48 <_printf_i+0x40>)
 8018e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018e48:	08018ea1 	.word	0x08018ea1
 8018e4c:	08018eb5 	.word	0x08018eb5
 8018e50:	08018e31 	.word	0x08018e31
 8018e54:	08018e31 	.word	0x08018e31
 8018e58:	08018e31 	.word	0x08018e31
 8018e5c:	08018e31 	.word	0x08018e31
 8018e60:	08018eb5 	.word	0x08018eb5
 8018e64:	08018e31 	.word	0x08018e31
 8018e68:	08018e31 	.word	0x08018e31
 8018e6c:	08018e31 	.word	0x08018e31
 8018e70:	08018e31 	.word	0x08018e31
 8018e74:	08018fb3 	.word	0x08018fb3
 8018e78:	08018edf 	.word	0x08018edf
 8018e7c:	08018f6d 	.word	0x08018f6d
 8018e80:	08018e31 	.word	0x08018e31
 8018e84:	08018e31 	.word	0x08018e31
 8018e88:	08018fd5 	.word	0x08018fd5
 8018e8c:	08018e31 	.word	0x08018e31
 8018e90:	08018edf 	.word	0x08018edf
 8018e94:	08018e31 	.word	0x08018e31
 8018e98:	08018e31 	.word	0x08018e31
 8018e9c:	08018f75 	.word	0x08018f75
 8018ea0:	6833      	ldr	r3, [r6, #0]
 8018ea2:	1d1a      	adds	r2, r3, #4
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	6032      	str	r2, [r6, #0]
 8018ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018eb0:	2301      	movs	r3, #1
 8018eb2:	e09c      	b.n	8018fee <_printf_i+0x1e6>
 8018eb4:	6833      	ldr	r3, [r6, #0]
 8018eb6:	6820      	ldr	r0, [r4, #0]
 8018eb8:	1d19      	adds	r1, r3, #4
 8018eba:	6031      	str	r1, [r6, #0]
 8018ebc:	0606      	lsls	r6, r0, #24
 8018ebe:	d501      	bpl.n	8018ec4 <_printf_i+0xbc>
 8018ec0:	681d      	ldr	r5, [r3, #0]
 8018ec2:	e003      	b.n	8018ecc <_printf_i+0xc4>
 8018ec4:	0645      	lsls	r5, r0, #25
 8018ec6:	d5fb      	bpl.n	8018ec0 <_printf_i+0xb8>
 8018ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018ecc:	2d00      	cmp	r5, #0
 8018ece:	da03      	bge.n	8018ed8 <_printf_i+0xd0>
 8018ed0:	232d      	movs	r3, #45	@ 0x2d
 8018ed2:	426d      	negs	r5, r5
 8018ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ed8:	4858      	ldr	r0, [pc, #352]	@ (801903c <_printf_i+0x234>)
 8018eda:	230a      	movs	r3, #10
 8018edc:	e011      	b.n	8018f02 <_printf_i+0xfa>
 8018ede:	6821      	ldr	r1, [r4, #0]
 8018ee0:	6833      	ldr	r3, [r6, #0]
 8018ee2:	0608      	lsls	r0, r1, #24
 8018ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8018ee8:	d402      	bmi.n	8018ef0 <_printf_i+0xe8>
 8018eea:	0649      	lsls	r1, r1, #25
 8018eec:	bf48      	it	mi
 8018eee:	b2ad      	uxthmi	r5, r5
 8018ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8018ef2:	4852      	ldr	r0, [pc, #328]	@ (801903c <_printf_i+0x234>)
 8018ef4:	6033      	str	r3, [r6, #0]
 8018ef6:	bf14      	ite	ne
 8018ef8:	230a      	movne	r3, #10
 8018efa:	2308      	moveq	r3, #8
 8018efc:	2100      	movs	r1, #0
 8018efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018f02:	6866      	ldr	r6, [r4, #4]
 8018f04:	60a6      	str	r6, [r4, #8]
 8018f06:	2e00      	cmp	r6, #0
 8018f08:	db05      	blt.n	8018f16 <_printf_i+0x10e>
 8018f0a:	6821      	ldr	r1, [r4, #0]
 8018f0c:	432e      	orrs	r6, r5
 8018f0e:	f021 0104 	bic.w	r1, r1, #4
 8018f12:	6021      	str	r1, [r4, #0]
 8018f14:	d04b      	beq.n	8018fae <_printf_i+0x1a6>
 8018f16:	4616      	mov	r6, r2
 8018f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8018f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8018f20:	5dc7      	ldrb	r7, [r0, r7]
 8018f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018f26:	462f      	mov	r7, r5
 8018f28:	42bb      	cmp	r3, r7
 8018f2a:	460d      	mov	r5, r1
 8018f2c:	d9f4      	bls.n	8018f18 <_printf_i+0x110>
 8018f2e:	2b08      	cmp	r3, #8
 8018f30:	d10b      	bne.n	8018f4a <_printf_i+0x142>
 8018f32:	6823      	ldr	r3, [r4, #0]
 8018f34:	07df      	lsls	r7, r3, #31
 8018f36:	d508      	bpl.n	8018f4a <_printf_i+0x142>
 8018f38:	6923      	ldr	r3, [r4, #16]
 8018f3a:	6861      	ldr	r1, [r4, #4]
 8018f3c:	4299      	cmp	r1, r3
 8018f3e:	bfde      	ittt	le
 8018f40:	2330      	movle	r3, #48	@ 0x30
 8018f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018f4a:	1b92      	subs	r2, r2, r6
 8018f4c:	6122      	str	r2, [r4, #16]
 8018f4e:	f8cd a000 	str.w	sl, [sp]
 8018f52:	464b      	mov	r3, r9
 8018f54:	aa03      	add	r2, sp, #12
 8018f56:	4621      	mov	r1, r4
 8018f58:	4640      	mov	r0, r8
 8018f5a:	f7ff fee7 	bl	8018d2c <_printf_common>
 8018f5e:	3001      	adds	r0, #1
 8018f60:	d14a      	bne.n	8018ff8 <_printf_i+0x1f0>
 8018f62:	f04f 30ff 	mov.w	r0, #4294967295
 8018f66:	b004      	add	sp, #16
 8018f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f6c:	6823      	ldr	r3, [r4, #0]
 8018f6e:	f043 0320 	orr.w	r3, r3, #32
 8018f72:	6023      	str	r3, [r4, #0]
 8018f74:	4832      	ldr	r0, [pc, #200]	@ (8019040 <_printf_i+0x238>)
 8018f76:	2778      	movs	r7, #120	@ 0x78
 8018f78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018f7c:	6823      	ldr	r3, [r4, #0]
 8018f7e:	6831      	ldr	r1, [r6, #0]
 8018f80:	061f      	lsls	r7, r3, #24
 8018f82:	f851 5b04 	ldr.w	r5, [r1], #4
 8018f86:	d402      	bmi.n	8018f8e <_printf_i+0x186>
 8018f88:	065f      	lsls	r7, r3, #25
 8018f8a:	bf48      	it	mi
 8018f8c:	b2ad      	uxthmi	r5, r5
 8018f8e:	6031      	str	r1, [r6, #0]
 8018f90:	07d9      	lsls	r1, r3, #31
 8018f92:	bf44      	itt	mi
 8018f94:	f043 0320 	orrmi.w	r3, r3, #32
 8018f98:	6023      	strmi	r3, [r4, #0]
 8018f9a:	b11d      	cbz	r5, 8018fa4 <_printf_i+0x19c>
 8018f9c:	2310      	movs	r3, #16
 8018f9e:	e7ad      	b.n	8018efc <_printf_i+0xf4>
 8018fa0:	4826      	ldr	r0, [pc, #152]	@ (801903c <_printf_i+0x234>)
 8018fa2:	e7e9      	b.n	8018f78 <_printf_i+0x170>
 8018fa4:	6823      	ldr	r3, [r4, #0]
 8018fa6:	f023 0320 	bic.w	r3, r3, #32
 8018faa:	6023      	str	r3, [r4, #0]
 8018fac:	e7f6      	b.n	8018f9c <_printf_i+0x194>
 8018fae:	4616      	mov	r6, r2
 8018fb0:	e7bd      	b.n	8018f2e <_printf_i+0x126>
 8018fb2:	6833      	ldr	r3, [r6, #0]
 8018fb4:	6825      	ldr	r5, [r4, #0]
 8018fb6:	6961      	ldr	r1, [r4, #20]
 8018fb8:	1d18      	adds	r0, r3, #4
 8018fba:	6030      	str	r0, [r6, #0]
 8018fbc:	062e      	lsls	r6, r5, #24
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	d501      	bpl.n	8018fc6 <_printf_i+0x1be>
 8018fc2:	6019      	str	r1, [r3, #0]
 8018fc4:	e002      	b.n	8018fcc <_printf_i+0x1c4>
 8018fc6:	0668      	lsls	r0, r5, #25
 8018fc8:	d5fb      	bpl.n	8018fc2 <_printf_i+0x1ba>
 8018fca:	8019      	strh	r1, [r3, #0]
 8018fcc:	2300      	movs	r3, #0
 8018fce:	6123      	str	r3, [r4, #16]
 8018fd0:	4616      	mov	r6, r2
 8018fd2:	e7bc      	b.n	8018f4e <_printf_i+0x146>
 8018fd4:	6833      	ldr	r3, [r6, #0]
 8018fd6:	1d1a      	adds	r2, r3, #4
 8018fd8:	6032      	str	r2, [r6, #0]
 8018fda:	681e      	ldr	r6, [r3, #0]
 8018fdc:	6862      	ldr	r2, [r4, #4]
 8018fde:	2100      	movs	r1, #0
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	f7e7 f8cd 	bl	8000180 <memchr>
 8018fe6:	b108      	cbz	r0, 8018fec <_printf_i+0x1e4>
 8018fe8:	1b80      	subs	r0, r0, r6
 8018fea:	6060      	str	r0, [r4, #4]
 8018fec:	6863      	ldr	r3, [r4, #4]
 8018fee:	6123      	str	r3, [r4, #16]
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ff6:	e7aa      	b.n	8018f4e <_printf_i+0x146>
 8018ff8:	6923      	ldr	r3, [r4, #16]
 8018ffa:	4632      	mov	r2, r6
 8018ffc:	4649      	mov	r1, r9
 8018ffe:	4640      	mov	r0, r8
 8019000:	47d0      	blx	sl
 8019002:	3001      	adds	r0, #1
 8019004:	d0ad      	beq.n	8018f62 <_printf_i+0x15a>
 8019006:	6823      	ldr	r3, [r4, #0]
 8019008:	079b      	lsls	r3, r3, #30
 801900a:	d413      	bmi.n	8019034 <_printf_i+0x22c>
 801900c:	68e0      	ldr	r0, [r4, #12]
 801900e:	9b03      	ldr	r3, [sp, #12]
 8019010:	4298      	cmp	r0, r3
 8019012:	bfb8      	it	lt
 8019014:	4618      	movlt	r0, r3
 8019016:	e7a6      	b.n	8018f66 <_printf_i+0x15e>
 8019018:	2301      	movs	r3, #1
 801901a:	4632      	mov	r2, r6
 801901c:	4649      	mov	r1, r9
 801901e:	4640      	mov	r0, r8
 8019020:	47d0      	blx	sl
 8019022:	3001      	adds	r0, #1
 8019024:	d09d      	beq.n	8018f62 <_printf_i+0x15a>
 8019026:	3501      	adds	r5, #1
 8019028:	68e3      	ldr	r3, [r4, #12]
 801902a:	9903      	ldr	r1, [sp, #12]
 801902c:	1a5b      	subs	r3, r3, r1
 801902e:	42ab      	cmp	r3, r5
 8019030:	dcf2      	bgt.n	8019018 <_printf_i+0x210>
 8019032:	e7eb      	b.n	801900c <_printf_i+0x204>
 8019034:	2500      	movs	r5, #0
 8019036:	f104 0619 	add.w	r6, r4, #25
 801903a:	e7f5      	b.n	8019028 <_printf_i+0x220>
 801903c:	0801f672 	.word	0x0801f672
 8019040:	0801f683 	.word	0x0801f683

08019044 <std>:
 8019044:	2300      	movs	r3, #0
 8019046:	b510      	push	{r4, lr}
 8019048:	4604      	mov	r4, r0
 801904a:	e9c0 3300 	strd	r3, r3, [r0]
 801904e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019052:	6083      	str	r3, [r0, #8]
 8019054:	8181      	strh	r1, [r0, #12]
 8019056:	6643      	str	r3, [r0, #100]	@ 0x64
 8019058:	81c2      	strh	r2, [r0, #14]
 801905a:	6183      	str	r3, [r0, #24]
 801905c:	4619      	mov	r1, r3
 801905e:	2208      	movs	r2, #8
 8019060:	305c      	adds	r0, #92	@ 0x5c
 8019062:	f000 fa1b 	bl	801949c <memset>
 8019066:	4b0d      	ldr	r3, [pc, #52]	@ (801909c <std+0x58>)
 8019068:	6263      	str	r3, [r4, #36]	@ 0x24
 801906a:	4b0d      	ldr	r3, [pc, #52]	@ (80190a0 <std+0x5c>)
 801906c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801906e:	4b0d      	ldr	r3, [pc, #52]	@ (80190a4 <std+0x60>)
 8019070:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019072:	4b0d      	ldr	r3, [pc, #52]	@ (80190a8 <std+0x64>)
 8019074:	6323      	str	r3, [r4, #48]	@ 0x30
 8019076:	4b0d      	ldr	r3, [pc, #52]	@ (80190ac <std+0x68>)
 8019078:	6224      	str	r4, [r4, #32]
 801907a:	429c      	cmp	r4, r3
 801907c:	d006      	beq.n	801908c <std+0x48>
 801907e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019082:	4294      	cmp	r4, r2
 8019084:	d002      	beq.n	801908c <std+0x48>
 8019086:	33d0      	adds	r3, #208	@ 0xd0
 8019088:	429c      	cmp	r4, r3
 801908a:	d105      	bne.n	8019098 <std+0x54>
 801908c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019094:	f000 badc 	b.w	8019650 <__retarget_lock_init_recursive>
 8019098:	bd10      	pop	{r4, pc}
 801909a:	bf00      	nop
 801909c:	080192ed 	.word	0x080192ed
 80190a0:	0801930f 	.word	0x0801930f
 80190a4:	08019347 	.word	0x08019347
 80190a8:	0801936b 	.word	0x0801936b
 80190ac:	2000af28 	.word	0x2000af28

080190b0 <stdio_exit_handler>:
 80190b0:	4a02      	ldr	r2, [pc, #8]	@ (80190bc <stdio_exit_handler+0xc>)
 80190b2:	4903      	ldr	r1, [pc, #12]	@ (80190c0 <stdio_exit_handler+0x10>)
 80190b4:	4803      	ldr	r0, [pc, #12]	@ (80190c4 <stdio_exit_handler+0x14>)
 80190b6:	f000 b869 	b.w	801918c <_fwalk_sglue>
 80190ba:	bf00      	nop
 80190bc:	20000120 	.word	0x20000120
 80190c0:	0801b259 	.word	0x0801b259
 80190c4:	20000130 	.word	0x20000130

080190c8 <cleanup_stdio>:
 80190c8:	6841      	ldr	r1, [r0, #4]
 80190ca:	4b0c      	ldr	r3, [pc, #48]	@ (80190fc <cleanup_stdio+0x34>)
 80190cc:	4299      	cmp	r1, r3
 80190ce:	b510      	push	{r4, lr}
 80190d0:	4604      	mov	r4, r0
 80190d2:	d001      	beq.n	80190d8 <cleanup_stdio+0x10>
 80190d4:	f002 f8c0 	bl	801b258 <_fflush_r>
 80190d8:	68a1      	ldr	r1, [r4, #8]
 80190da:	4b09      	ldr	r3, [pc, #36]	@ (8019100 <cleanup_stdio+0x38>)
 80190dc:	4299      	cmp	r1, r3
 80190de:	d002      	beq.n	80190e6 <cleanup_stdio+0x1e>
 80190e0:	4620      	mov	r0, r4
 80190e2:	f002 f8b9 	bl	801b258 <_fflush_r>
 80190e6:	68e1      	ldr	r1, [r4, #12]
 80190e8:	4b06      	ldr	r3, [pc, #24]	@ (8019104 <cleanup_stdio+0x3c>)
 80190ea:	4299      	cmp	r1, r3
 80190ec:	d004      	beq.n	80190f8 <cleanup_stdio+0x30>
 80190ee:	4620      	mov	r0, r4
 80190f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190f4:	f002 b8b0 	b.w	801b258 <_fflush_r>
 80190f8:	bd10      	pop	{r4, pc}
 80190fa:	bf00      	nop
 80190fc:	2000af28 	.word	0x2000af28
 8019100:	2000af90 	.word	0x2000af90
 8019104:	2000aff8 	.word	0x2000aff8

08019108 <global_stdio_init.part.0>:
 8019108:	b510      	push	{r4, lr}
 801910a:	4b0b      	ldr	r3, [pc, #44]	@ (8019138 <global_stdio_init.part.0+0x30>)
 801910c:	4c0b      	ldr	r4, [pc, #44]	@ (801913c <global_stdio_init.part.0+0x34>)
 801910e:	4a0c      	ldr	r2, [pc, #48]	@ (8019140 <global_stdio_init.part.0+0x38>)
 8019110:	601a      	str	r2, [r3, #0]
 8019112:	4620      	mov	r0, r4
 8019114:	2200      	movs	r2, #0
 8019116:	2104      	movs	r1, #4
 8019118:	f7ff ff94 	bl	8019044 <std>
 801911c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019120:	2201      	movs	r2, #1
 8019122:	2109      	movs	r1, #9
 8019124:	f7ff ff8e 	bl	8019044 <std>
 8019128:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801912c:	2202      	movs	r2, #2
 801912e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019132:	2112      	movs	r1, #18
 8019134:	f7ff bf86 	b.w	8019044 <std>
 8019138:	2000b060 	.word	0x2000b060
 801913c:	2000af28 	.word	0x2000af28
 8019140:	080190b1 	.word	0x080190b1

08019144 <__sfp_lock_acquire>:
 8019144:	4801      	ldr	r0, [pc, #4]	@ (801914c <__sfp_lock_acquire+0x8>)
 8019146:	f000 ba84 	b.w	8019652 <__retarget_lock_acquire_recursive>
 801914a:	bf00      	nop
 801914c:	2000b069 	.word	0x2000b069

08019150 <__sfp_lock_release>:
 8019150:	4801      	ldr	r0, [pc, #4]	@ (8019158 <__sfp_lock_release+0x8>)
 8019152:	f000 ba7f 	b.w	8019654 <__retarget_lock_release_recursive>
 8019156:	bf00      	nop
 8019158:	2000b069 	.word	0x2000b069

0801915c <__sinit>:
 801915c:	b510      	push	{r4, lr}
 801915e:	4604      	mov	r4, r0
 8019160:	f7ff fff0 	bl	8019144 <__sfp_lock_acquire>
 8019164:	6a23      	ldr	r3, [r4, #32]
 8019166:	b11b      	cbz	r3, 8019170 <__sinit+0x14>
 8019168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801916c:	f7ff bff0 	b.w	8019150 <__sfp_lock_release>
 8019170:	4b04      	ldr	r3, [pc, #16]	@ (8019184 <__sinit+0x28>)
 8019172:	6223      	str	r3, [r4, #32]
 8019174:	4b04      	ldr	r3, [pc, #16]	@ (8019188 <__sinit+0x2c>)
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d1f5      	bne.n	8019168 <__sinit+0xc>
 801917c:	f7ff ffc4 	bl	8019108 <global_stdio_init.part.0>
 8019180:	e7f2      	b.n	8019168 <__sinit+0xc>
 8019182:	bf00      	nop
 8019184:	080190c9 	.word	0x080190c9
 8019188:	2000b060 	.word	0x2000b060

0801918c <_fwalk_sglue>:
 801918c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019190:	4607      	mov	r7, r0
 8019192:	4688      	mov	r8, r1
 8019194:	4614      	mov	r4, r2
 8019196:	2600      	movs	r6, #0
 8019198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801919c:	f1b9 0901 	subs.w	r9, r9, #1
 80191a0:	d505      	bpl.n	80191ae <_fwalk_sglue+0x22>
 80191a2:	6824      	ldr	r4, [r4, #0]
 80191a4:	2c00      	cmp	r4, #0
 80191a6:	d1f7      	bne.n	8019198 <_fwalk_sglue+0xc>
 80191a8:	4630      	mov	r0, r6
 80191aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191ae:	89ab      	ldrh	r3, [r5, #12]
 80191b0:	2b01      	cmp	r3, #1
 80191b2:	d907      	bls.n	80191c4 <_fwalk_sglue+0x38>
 80191b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80191b8:	3301      	adds	r3, #1
 80191ba:	d003      	beq.n	80191c4 <_fwalk_sglue+0x38>
 80191bc:	4629      	mov	r1, r5
 80191be:	4638      	mov	r0, r7
 80191c0:	47c0      	blx	r8
 80191c2:	4306      	orrs	r6, r0
 80191c4:	3568      	adds	r5, #104	@ 0x68
 80191c6:	e7e9      	b.n	801919c <_fwalk_sglue+0x10>

080191c8 <iprintf>:
 80191c8:	b40f      	push	{r0, r1, r2, r3}
 80191ca:	b507      	push	{r0, r1, r2, lr}
 80191cc:	4906      	ldr	r1, [pc, #24]	@ (80191e8 <iprintf+0x20>)
 80191ce:	ab04      	add	r3, sp, #16
 80191d0:	6808      	ldr	r0, [r1, #0]
 80191d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80191d6:	6881      	ldr	r1, [r0, #8]
 80191d8:	9301      	str	r3, [sp, #4]
 80191da:	f001 fea1 	bl	801af20 <_vfiprintf_r>
 80191de:	b003      	add	sp, #12
 80191e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80191e4:	b004      	add	sp, #16
 80191e6:	4770      	bx	lr
 80191e8:	2000012c 	.word	0x2000012c

080191ec <_puts_r>:
 80191ec:	6a03      	ldr	r3, [r0, #32]
 80191ee:	b570      	push	{r4, r5, r6, lr}
 80191f0:	6884      	ldr	r4, [r0, #8]
 80191f2:	4605      	mov	r5, r0
 80191f4:	460e      	mov	r6, r1
 80191f6:	b90b      	cbnz	r3, 80191fc <_puts_r+0x10>
 80191f8:	f7ff ffb0 	bl	801915c <__sinit>
 80191fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80191fe:	07db      	lsls	r3, r3, #31
 8019200:	d405      	bmi.n	801920e <_puts_r+0x22>
 8019202:	89a3      	ldrh	r3, [r4, #12]
 8019204:	0598      	lsls	r0, r3, #22
 8019206:	d402      	bmi.n	801920e <_puts_r+0x22>
 8019208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801920a:	f000 fa22 	bl	8019652 <__retarget_lock_acquire_recursive>
 801920e:	89a3      	ldrh	r3, [r4, #12]
 8019210:	0719      	lsls	r1, r3, #28
 8019212:	d502      	bpl.n	801921a <_puts_r+0x2e>
 8019214:	6923      	ldr	r3, [r4, #16]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d135      	bne.n	8019286 <_puts_r+0x9a>
 801921a:	4621      	mov	r1, r4
 801921c:	4628      	mov	r0, r5
 801921e:	f000 f8e7 	bl	80193f0 <__swsetup_r>
 8019222:	b380      	cbz	r0, 8019286 <_puts_r+0x9a>
 8019224:	f04f 35ff 	mov.w	r5, #4294967295
 8019228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801922a:	07da      	lsls	r2, r3, #31
 801922c:	d405      	bmi.n	801923a <_puts_r+0x4e>
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	059b      	lsls	r3, r3, #22
 8019232:	d402      	bmi.n	801923a <_puts_r+0x4e>
 8019234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019236:	f000 fa0d 	bl	8019654 <__retarget_lock_release_recursive>
 801923a:	4628      	mov	r0, r5
 801923c:	bd70      	pop	{r4, r5, r6, pc}
 801923e:	2b00      	cmp	r3, #0
 8019240:	da04      	bge.n	801924c <_puts_r+0x60>
 8019242:	69a2      	ldr	r2, [r4, #24]
 8019244:	429a      	cmp	r2, r3
 8019246:	dc17      	bgt.n	8019278 <_puts_r+0x8c>
 8019248:	290a      	cmp	r1, #10
 801924a:	d015      	beq.n	8019278 <_puts_r+0x8c>
 801924c:	6823      	ldr	r3, [r4, #0]
 801924e:	1c5a      	adds	r2, r3, #1
 8019250:	6022      	str	r2, [r4, #0]
 8019252:	7019      	strb	r1, [r3, #0]
 8019254:	68a3      	ldr	r3, [r4, #8]
 8019256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801925a:	3b01      	subs	r3, #1
 801925c:	60a3      	str	r3, [r4, #8]
 801925e:	2900      	cmp	r1, #0
 8019260:	d1ed      	bne.n	801923e <_puts_r+0x52>
 8019262:	2b00      	cmp	r3, #0
 8019264:	da11      	bge.n	801928a <_puts_r+0x9e>
 8019266:	4622      	mov	r2, r4
 8019268:	210a      	movs	r1, #10
 801926a:	4628      	mov	r0, r5
 801926c:	f000 f881 	bl	8019372 <__swbuf_r>
 8019270:	3001      	adds	r0, #1
 8019272:	d0d7      	beq.n	8019224 <_puts_r+0x38>
 8019274:	250a      	movs	r5, #10
 8019276:	e7d7      	b.n	8019228 <_puts_r+0x3c>
 8019278:	4622      	mov	r2, r4
 801927a:	4628      	mov	r0, r5
 801927c:	f000 f879 	bl	8019372 <__swbuf_r>
 8019280:	3001      	adds	r0, #1
 8019282:	d1e7      	bne.n	8019254 <_puts_r+0x68>
 8019284:	e7ce      	b.n	8019224 <_puts_r+0x38>
 8019286:	3e01      	subs	r6, #1
 8019288:	e7e4      	b.n	8019254 <_puts_r+0x68>
 801928a:	6823      	ldr	r3, [r4, #0]
 801928c:	1c5a      	adds	r2, r3, #1
 801928e:	6022      	str	r2, [r4, #0]
 8019290:	220a      	movs	r2, #10
 8019292:	701a      	strb	r2, [r3, #0]
 8019294:	e7ee      	b.n	8019274 <_puts_r+0x88>
	...

08019298 <puts>:
 8019298:	4b02      	ldr	r3, [pc, #8]	@ (80192a4 <puts+0xc>)
 801929a:	4601      	mov	r1, r0
 801929c:	6818      	ldr	r0, [r3, #0]
 801929e:	f7ff bfa5 	b.w	80191ec <_puts_r>
 80192a2:	bf00      	nop
 80192a4:	2000012c 	.word	0x2000012c

080192a8 <siprintf>:
 80192a8:	b40e      	push	{r1, r2, r3}
 80192aa:	b510      	push	{r4, lr}
 80192ac:	b09d      	sub	sp, #116	@ 0x74
 80192ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80192b0:	9002      	str	r0, [sp, #8]
 80192b2:	9006      	str	r0, [sp, #24]
 80192b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80192b8:	480a      	ldr	r0, [pc, #40]	@ (80192e4 <siprintf+0x3c>)
 80192ba:	9107      	str	r1, [sp, #28]
 80192bc:	9104      	str	r1, [sp, #16]
 80192be:	490a      	ldr	r1, [pc, #40]	@ (80192e8 <siprintf+0x40>)
 80192c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80192c4:	9105      	str	r1, [sp, #20]
 80192c6:	2400      	movs	r4, #0
 80192c8:	a902      	add	r1, sp, #8
 80192ca:	6800      	ldr	r0, [r0, #0]
 80192cc:	9301      	str	r3, [sp, #4]
 80192ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80192d0:	f001 fd00 	bl	801acd4 <_svfiprintf_r>
 80192d4:	9b02      	ldr	r3, [sp, #8]
 80192d6:	701c      	strb	r4, [r3, #0]
 80192d8:	b01d      	add	sp, #116	@ 0x74
 80192da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192de:	b003      	add	sp, #12
 80192e0:	4770      	bx	lr
 80192e2:	bf00      	nop
 80192e4:	2000012c 	.word	0x2000012c
 80192e8:	ffff0208 	.word	0xffff0208

080192ec <__sread>:
 80192ec:	b510      	push	{r4, lr}
 80192ee:	460c      	mov	r4, r1
 80192f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192f4:	f000 f95e 	bl	80195b4 <_read_r>
 80192f8:	2800      	cmp	r0, #0
 80192fa:	bfab      	itete	ge
 80192fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80192fe:	89a3      	ldrhlt	r3, [r4, #12]
 8019300:	181b      	addge	r3, r3, r0
 8019302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019306:	bfac      	ite	ge
 8019308:	6563      	strge	r3, [r4, #84]	@ 0x54
 801930a:	81a3      	strhlt	r3, [r4, #12]
 801930c:	bd10      	pop	{r4, pc}

0801930e <__swrite>:
 801930e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019312:	461f      	mov	r7, r3
 8019314:	898b      	ldrh	r3, [r1, #12]
 8019316:	05db      	lsls	r3, r3, #23
 8019318:	4605      	mov	r5, r0
 801931a:	460c      	mov	r4, r1
 801931c:	4616      	mov	r6, r2
 801931e:	d505      	bpl.n	801932c <__swrite+0x1e>
 8019320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019324:	2302      	movs	r3, #2
 8019326:	2200      	movs	r2, #0
 8019328:	f000 f932 	bl	8019590 <_lseek_r>
 801932c:	89a3      	ldrh	r3, [r4, #12]
 801932e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019336:	81a3      	strh	r3, [r4, #12]
 8019338:	4632      	mov	r2, r6
 801933a:	463b      	mov	r3, r7
 801933c:	4628      	mov	r0, r5
 801933e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019342:	f000 b949 	b.w	80195d8 <_write_r>

08019346 <__sseek>:
 8019346:	b510      	push	{r4, lr}
 8019348:	460c      	mov	r4, r1
 801934a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801934e:	f000 f91f 	bl	8019590 <_lseek_r>
 8019352:	1c43      	adds	r3, r0, #1
 8019354:	89a3      	ldrh	r3, [r4, #12]
 8019356:	bf15      	itete	ne
 8019358:	6560      	strne	r0, [r4, #84]	@ 0x54
 801935a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801935e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019362:	81a3      	strheq	r3, [r4, #12]
 8019364:	bf18      	it	ne
 8019366:	81a3      	strhne	r3, [r4, #12]
 8019368:	bd10      	pop	{r4, pc}

0801936a <__sclose>:
 801936a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801936e:	f000 b8a1 	b.w	80194b4 <_close_r>

08019372 <__swbuf_r>:
 8019372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019374:	460e      	mov	r6, r1
 8019376:	4614      	mov	r4, r2
 8019378:	4605      	mov	r5, r0
 801937a:	b118      	cbz	r0, 8019384 <__swbuf_r+0x12>
 801937c:	6a03      	ldr	r3, [r0, #32]
 801937e:	b90b      	cbnz	r3, 8019384 <__swbuf_r+0x12>
 8019380:	f7ff feec 	bl	801915c <__sinit>
 8019384:	69a3      	ldr	r3, [r4, #24]
 8019386:	60a3      	str	r3, [r4, #8]
 8019388:	89a3      	ldrh	r3, [r4, #12]
 801938a:	071a      	lsls	r2, r3, #28
 801938c:	d501      	bpl.n	8019392 <__swbuf_r+0x20>
 801938e:	6923      	ldr	r3, [r4, #16]
 8019390:	b943      	cbnz	r3, 80193a4 <__swbuf_r+0x32>
 8019392:	4621      	mov	r1, r4
 8019394:	4628      	mov	r0, r5
 8019396:	f000 f82b 	bl	80193f0 <__swsetup_r>
 801939a:	b118      	cbz	r0, 80193a4 <__swbuf_r+0x32>
 801939c:	f04f 37ff 	mov.w	r7, #4294967295
 80193a0:	4638      	mov	r0, r7
 80193a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193a4:	6823      	ldr	r3, [r4, #0]
 80193a6:	6922      	ldr	r2, [r4, #16]
 80193a8:	1a98      	subs	r0, r3, r2
 80193aa:	6963      	ldr	r3, [r4, #20]
 80193ac:	b2f6      	uxtb	r6, r6
 80193ae:	4283      	cmp	r3, r0
 80193b0:	4637      	mov	r7, r6
 80193b2:	dc05      	bgt.n	80193c0 <__swbuf_r+0x4e>
 80193b4:	4621      	mov	r1, r4
 80193b6:	4628      	mov	r0, r5
 80193b8:	f001 ff4e 	bl	801b258 <_fflush_r>
 80193bc:	2800      	cmp	r0, #0
 80193be:	d1ed      	bne.n	801939c <__swbuf_r+0x2a>
 80193c0:	68a3      	ldr	r3, [r4, #8]
 80193c2:	3b01      	subs	r3, #1
 80193c4:	60a3      	str	r3, [r4, #8]
 80193c6:	6823      	ldr	r3, [r4, #0]
 80193c8:	1c5a      	adds	r2, r3, #1
 80193ca:	6022      	str	r2, [r4, #0]
 80193cc:	701e      	strb	r6, [r3, #0]
 80193ce:	6962      	ldr	r2, [r4, #20]
 80193d0:	1c43      	adds	r3, r0, #1
 80193d2:	429a      	cmp	r2, r3
 80193d4:	d004      	beq.n	80193e0 <__swbuf_r+0x6e>
 80193d6:	89a3      	ldrh	r3, [r4, #12]
 80193d8:	07db      	lsls	r3, r3, #31
 80193da:	d5e1      	bpl.n	80193a0 <__swbuf_r+0x2e>
 80193dc:	2e0a      	cmp	r6, #10
 80193de:	d1df      	bne.n	80193a0 <__swbuf_r+0x2e>
 80193e0:	4621      	mov	r1, r4
 80193e2:	4628      	mov	r0, r5
 80193e4:	f001 ff38 	bl	801b258 <_fflush_r>
 80193e8:	2800      	cmp	r0, #0
 80193ea:	d0d9      	beq.n	80193a0 <__swbuf_r+0x2e>
 80193ec:	e7d6      	b.n	801939c <__swbuf_r+0x2a>
	...

080193f0 <__swsetup_r>:
 80193f0:	b538      	push	{r3, r4, r5, lr}
 80193f2:	4b29      	ldr	r3, [pc, #164]	@ (8019498 <__swsetup_r+0xa8>)
 80193f4:	4605      	mov	r5, r0
 80193f6:	6818      	ldr	r0, [r3, #0]
 80193f8:	460c      	mov	r4, r1
 80193fa:	b118      	cbz	r0, 8019404 <__swsetup_r+0x14>
 80193fc:	6a03      	ldr	r3, [r0, #32]
 80193fe:	b90b      	cbnz	r3, 8019404 <__swsetup_r+0x14>
 8019400:	f7ff feac 	bl	801915c <__sinit>
 8019404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019408:	0719      	lsls	r1, r3, #28
 801940a:	d422      	bmi.n	8019452 <__swsetup_r+0x62>
 801940c:	06da      	lsls	r2, r3, #27
 801940e:	d407      	bmi.n	8019420 <__swsetup_r+0x30>
 8019410:	2209      	movs	r2, #9
 8019412:	602a      	str	r2, [r5, #0]
 8019414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019418:	81a3      	strh	r3, [r4, #12]
 801941a:	f04f 30ff 	mov.w	r0, #4294967295
 801941e:	e033      	b.n	8019488 <__swsetup_r+0x98>
 8019420:	0758      	lsls	r0, r3, #29
 8019422:	d512      	bpl.n	801944a <__swsetup_r+0x5a>
 8019424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019426:	b141      	cbz	r1, 801943a <__swsetup_r+0x4a>
 8019428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801942c:	4299      	cmp	r1, r3
 801942e:	d002      	beq.n	8019436 <__swsetup_r+0x46>
 8019430:	4628      	mov	r0, r5
 8019432:	f000 ff79 	bl	801a328 <_free_r>
 8019436:	2300      	movs	r3, #0
 8019438:	6363      	str	r3, [r4, #52]	@ 0x34
 801943a:	89a3      	ldrh	r3, [r4, #12]
 801943c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019440:	81a3      	strh	r3, [r4, #12]
 8019442:	2300      	movs	r3, #0
 8019444:	6063      	str	r3, [r4, #4]
 8019446:	6923      	ldr	r3, [r4, #16]
 8019448:	6023      	str	r3, [r4, #0]
 801944a:	89a3      	ldrh	r3, [r4, #12]
 801944c:	f043 0308 	orr.w	r3, r3, #8
 8019450:	81a3      	strh	r3, [r4, #12]
 8019452:	6923      	ldr	r3, [r4, #16]
 8019454:	b94b      	cbnz	r3, 801946a <__swsetup_r+0x7a>
 8019456:	89a3      	ldrh	r3, [r4, #12]
 8019458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019460:	d003      	beq.n	801946a <__swsetup_r+0x7a>
 8019462:	4621      	mov	r1, r4
 8019464:	4628      	mov	r0, r5
 8019466:	f001 ff45 	bl	801b2f4 <__smakebuf_r>
 801946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801946e:	f013 0201 	ands.w	r2, r3, #1
 8019472:	d00a      	beq.n	801948a <__swsetup_r+0x9a>
 8019474:	2200      	movs	r2, #0
 8019476:	60a2      	str	r2, [r4, #8]
 8019478:	6962      	ldr	r2, [r4, #20]
 801947a:	4252      	negs	r2, r2
 801947c:	61a2      	str	r2, [r4, #24]
 801947e:	6922      	ldr	r2, [r4, #16]
 8019480:	b942      	cbnz	r2, 8019494 <__swsetup_r+0xa4>
 8019482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019486:	d1c5      	bne.n	8019414 <__swsetup_r+0x24>
 8019488:	bd38      	pop	{r3, r4, r5, pc}
 801948a:	0799      	lsls	r1, r3, #30
 801948c:	bf58      	it	pl
 801948e:	6962      	ldrpl	r2, [r4, #20]
 8019490:	60a2      	str	r2, [r4, #8]
 8019492:	e7f4      	b.n	801947e <__swsetup_r+0x8e>
 8019494:	2000      	movs	r0, #0
 8019496:	e7f7      	b.n	8019488 <__swsetup_r+0x98>
 8019498:	2000012c 	.word	0x2000012c

0801949c <memset>:
 801949c:	4402      	add	r2, r0
 801949e:	4603      	mov	r3, r0
 80194a0:	4293      	cmp	r3, r2
 80194a2:	d100      	bne.n	80194a6 <memset+0xa>
 80194a4:	4770      	bx	lr
 80194a6:	f803 1b01 	strb.w	r1, [r3], #1
 80194aa:	e7f9      	b.n	80194a0 <memset+0x4>

080194ac <_localeconv_r>:
 80194ac:	4800      	ldr	r0, [pc, #0]	@ (80194b0 <_localeconv_r+0x4>)
 80194ae:	4770      	bx	lr
 80194b0:	2000026c 	.word	0x2000026c

080194b4 <_close_r>:
 80194b4:	b538      	push	{r3, r4, r5, lr}
 80194b6:	4d06      	ldr	r5, [pc, #24]	@ (80194d0 <_close_r+0x1c>)
 80194b8:	2300      	movs	r3, #0
 80194ba:	4604      	mov	r4, r0
 80194bc:	4608      	mov	r0, r1
 80194be:	602b      	str	r3, [r5, #0]
 80194c0:	f7ef faea 	bl	8008a98 <_close>
 80194c4:	1c43      	adds	r3, r0, #1
 80194c6:	d102      	bne.n	80194ce <_close_r+0x1a>
 80194c8:	682b      	ldr	r3, [r5, #0]
 80194ca:	b103      	cbz	r3, 80194ce <_close_r+0x1a>
 80194cc:	6023      	str	r3, [r4, #0]
 80194ce:	bd38      	pop	{r3, r4, r5, pc}
 80194d0:	2000b064 	.word	0x2000b064

080194d4 <_reclaim_reent>:
 80194d4:	4b2d      	ldr	r3, [pc, #180]	@ (801958c <_reclaim_reent+0xb8>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	4283      	cmp	r3, r0
 80194da:	b570      	push	{r4, r5, r6, lr}
 80194dc:	4604      	mov	r4, r0
 80194de:	d053      	beq.n	8019588 <_reclaim_reent+0xb4>
 80194e0:	69c3      	ldr	r3, [r0, #28]
 80194e2:	b31b      	cbz	r3, 801952c <_reclaim_reent+0x58>
 80194e4:	68db      	ldr	r3, [r3, #12]
 80194e6:	b163      	cbz	r3, 8019502 <_reclaim_reent+0x2e>
 80194e8:	2500      	movs	r5, #0
 80194ea:	69e3      	ldr	r3, [r4, #28]
 80194ec:	68db      	ldr	r3, [r3, #12]
 80194ee:	5959      	ldr	r1, [r3, r5]
 80194f0:	b9b1      	cbnz	r1, 8019520 <_reclaim_reent+0x4c>
 80194f2:	3504      	adds	r5, #4
 80194f4:	2d80      	cmp	r5, #128	@ 0x80
 80194f6:	d1f8      	bne.n	80194ea <_reclaim_reent+0x16>
 80194f8:	69e3      	ldr	r3, [r4, #28]
 80194fa:	4620      	mov	r0, r4
 80194fc:	68d9      	ldr	r1, [r3, #12]
 80194fe:	f000 ff13 	bl	801a328 <_free_r>
 8019502:	69e3      	ldr	r3, [r4, #28]
 8019504:	6819      	ldr	r1, [r3, #0]
 8019506:	b111      	cbz	r1, 801950e <_reclaim_reent+0x3a>
 8019508:	4620      	mov	r0, r4
 801950a:	f000 ff0d 	bl	801a328 <_free_r>
 801950e:	69e3      	ldr	r3, [r4, #28]
 8019510:	689d      	ldr	r5, [r3, #8]
 8019512:	b15d      	cbz	r5, 801952c <_reclaim_reent+0x58>
 8019514:	4629      	mov	r1, r5
 8019516:	4620      	mov	r0, r4
 8019518:	682d      	ldr	r5, [r5, #0]
 801951a:	f000 ff05 	bl	801a328 <_free_r>
 801951e:	e7f8      	b.n	8019512 <_reclaim_reent+0x3e>
 8019520:	680e      	ldr	r6, [r1, #0]
 8019522:	4620      	mov	r0, r4
 8019524:	f000 ff00 	bl	801a328 <_free_r>
 8019528:	4631      	mov	r1, r6
 801952a:	e7e1      	b.n	80194f0 <_reclaim_reent+0x1c>
 801952c:	6961      	ldr	r1, [r4, #20]
 801952e:	b111      	cbz	r1, 8019536 <_reclaim_reent+0x62>
 8019530:	4620      	mov	r0, r4
 8019532:	f000 fef9 	bl	801a328 <_free_r>
 8019536:	69e1      	ldr	r1, [r4, #28]
 8019538:	b111      	cbz	r1, 8019540 <_reclaim_reent+0x6c>
 801953a:	4620      	mov	r0, r4
 801953c:	f000 fef4 	bl	801a328 <_free_r>
 8019540:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019542:	b111      	cbz	r1, 801954a <_reclaim_reent+0x76>
 8019544:	4620      	mov	r0, r4
 8019546:	f000 feef 	bl	801a328 <_free_r>
 801954a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801954c:	b111      	cbz	r1, 8019554 <_reclaim_reent+0x80>
 801954e:	4620      	mov	r0, r4
 8019550:	f000 feea 	bl	801a328 <_free_r>
 8019554:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019556:	b111      	cbz	r1, 801955e <_reclaim_reent+0x8a>
 8019558:	4620      	mov	r0, r4
 801955a:	f000 fee5 	bl	801a328 <_free_r>
 801955e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019560:	b111      	cbz	r1, 8019568 <_reclaim_reent+0x94>
 8019562:	4620      	mov	r0, r4
 8019564:	f000 fee0 	bl	801a328 <_free_r>
 8019568:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801956a:	b111      	cbz	r1, 8019572 <_reclaim_reent+0x9e>
 801956c:	4620      	mov	r0, r4
 801956e:	f000 fedb 	bl	801a328 <_free_r>
 8019572:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019574:	b111      	cbz	r1, 801957c <_reclaim_reent+0xa8>
 8019576:	4620      	mov	r0, r4
 8019578:	f000 fed6 	bl	801a328 <_free_r>
 801957c:	6a23      	ldr	r3, [r4, #32]
 801957e:	b11b      	cbz	r3, 8019588 <_reclaim_reent+0xb4>
 8019580:	4620      	mov	r0, r4
 8019582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019586:	4718      	bx	r3
 8019588:	bd70      	pop	{r4, r5, r6, pc}
 801958a:	bf00      	nop
 801958c:	2000012c 	.word	0x2000012c

08019590 <_lseek_r>:
 8019590:	b538      	push	{r3, r4, r5, lr}
 8019592:	4d07      	ldr	r5, [pc, #28]	@ (80195b0 <_lseek_r+0x20>)
 8019594:	4604      	mov	r4, r0
 8019596:	4608      	mov	r0, r1
 8019598:	4611      	mov	r1, r2
 801959a:	2200      	movs	r2, #0
 801959c:	602a      	str	r2, [r5, #0]
 801959e:	461a      	mov	r2, r3
 80195a0:	f7ef faa1 	bl	8008ae6 <_lseek>
 80195a4:	1c43      	adds	r3, r0, #1
 80195a6:	d102      	bne.n	80195ae <_lseek_r+0x1e>
 80195a8:	682b      	ldr	r3, [r5, #0]
 80195aa:	b103      	cbz	r3, 80195ae <_lseek_r+0x1e>
 80195ac:	6023      	str	r3, [r4, #0]
 80195ae:	bd38      	pop	{r3, r4, r5, pc}
 80195b0:	2000b064 	.word	0x2000b064

080195b4 <_read_r>:
 80195b4:	b538      	push	{r3, r4, r5, lr}
 80195b6:	4d07      	ldr	r5, [pc, #28]	@ (80195d4 <_read_r+0x20>)
 80195b8:	4604      	mov	r4, r0
 80195ba:	4608      	mov	r0, r1
 80195bc:	4611      	mov	r1, r2
 80195be:	2200      	movs	r2, #0
 80195c0:	602a      	str	r2, [r5, #0]
 80195c2:	461a      	mov	r2, r3
 80195c4:	f7ef fa2f 	bl	8008a26 <_read>
 80195c8:	1c43      	adds	r3, r0, #1
 80195ca:	d102      	bne.n	80195d2 <_read_r+0x1e>
 80195cc:	682b      	ldr	r3, [r5, #0]
 80195ce:	b103      	cbz	r3, 80195d2 <_read_r+0x1e>
 80195d0:	6023      	str	r3, [r4, #0]
 80195d2:	bd38      	pop	{r3, r4, r5, pc}
 80195d4:	2000b064 	.word	0x2000b064

080195d8 <_write_r>:
 80195d8:	b538      	push	{r3, r4, r5, lr}
 80195da:	4d07      	ldr	r5, [pc, #28]	@ (80195f8 <_write_r+0x20>)
 80195dc:	4604      	mov	r4, r0
 80195de:	4608      	mov	r0, r1
 80195e0:	4611      	mov	r1, r2
 80195e2:	2200      	movs	r2, #0
 80195e4:	602a      	str	r2, [r5, #0]
 80195e6:	461a      	mov	r2, r3
 80195e8:	f7ef fa3a 	bl	8008a60 <_write>
 80195ec:	1c43      	adds	r3, r0, #1
 80195ee:	d102      	bne.n	80195f6 <_write_r+0x1e>
 80195f0:	682b      	ldr	r3, [r5, #0]
 80195f2:	b103      	cbz	r3, 80195f6 <_write_r+0x1e>
 80195f4:	6023      	str	r3, [r4, #0]
 80195f6:	bd38      	pop	{r3, r4, r5, pc}
 80195f8:	2000b064 	.word	0x2000b064

080195fc <__errno>:
 80195fc:	4b01      	ldr	r3, [pc, #4]	@ (8019604 <__errno+0x8>)
 80195fe:	6818      	ldr	r0, [r3, #0]
 8019600:	4770      	bx	lr
 8019602:	bf00      	nop
 8019604:	2000012c 	.word	0x2000012c

08019608 <__libc_init_array>:
 8019608:	b570      	push	{r4, r5, r6, lr}
 801960a:	4d0d      	ldr	r5, [pc, #52]	@ (8019640 <__libc_init_array+0x38>)
 801960c:	4c0d      	ldr	r4, [pc, #52]	@ (8019644 <__libc_init_array+0x3c>)
 801960e:	1b64      	subs	r4, r4, r5
 8019610:	10a4      	asrs	r4, r4, #2
 8019612:	2600      	movs	r6, #0
 8019614:	42a6      	cmp	r6, r4
 8019616:	d109      	bne.n	801962c <__libc_init_array+0x24>
 8019618:	4d0b      	ldr	r5, [pc, #44]	@ (8019648 <__libc_init_array+0x40>)
 801961a:	4c0c      	ldr	r4, [pc, #48]	@ (801964c <__libc_init_array+0x44>)
 801961c:	f002 ff36 	bl	801c48c <_init>
 8019620:	1b64      	subs	r4, r4, r5
 8019622:	10a4      	asrs	r4, r4, #2
 8019624:	2600      	movs	r6, #0
 8019626:	42a6      	cmp	r6, r4
 8019628:	d105      	bne.n	8019636 <__libc_init_array+0x2e>
 801962a:	bd70      	pop	{r4, r5, r6, pc}
 801962c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019630:	4798      	blx	r3
 8019632:	3601      	adds	r6, #1
 8019634:	e7ee      	b.n	8019614 <__libc_init_array+0xc>
 8019636:	f855 3b04 	ldr.w	r3, [r5], #4
 801963a:	4798      	blx	r3
 801963c:	3601      	adds	r6, #1
 801963e:	e7f2      	b.n	8019626 <__libc_init_array+0x1e>
 8019640:	0801fa20 	.word	0x0801fa20
 8019644:	0801fa20 	.word	0x0801fa20
 8019648:	0801fa20 	.word	0x0801fa20
 801964c:	0801fa24 	.word	0x0801fa24

08019650 <__retarget_lock_init_recursive>:
 8019650:	4770      	bx	lr

08019652 <__retarget_lock_acquire_recursive>:
 8019652:	4770      	bx	lr

08019654 <__retarget_lock_release_recursive>:
 8019654:	4770      	bx	lr

08019656 <memcpy>:
 8019656:	440a      	add	r2, r1
 8019658:	4291      	cmp	r1, r2
 801965a:	f100 33ff 	add.w	r3, r0, #4294967295
 801965e:	d100      	bne.n	8019662 <memcpy+0xc>
 8019660:	4770      	bx	lr
 8019662:	b510      	push	{r4, lr}
 8019664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019668:	f803 4f01 	strb.w	r4, [r3, #1]!
 801966c:	4291      	cmp	r1, r2
 801966e:	d1f9      	bne.n	8019664 <memcpy+0xe>
 8019670:	bd10      	pop	{r4, pc}

08019672 <quorem>:
 8019672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019676:	6903      	ldr	r3, [r0, #16]
 8019678:	690c      	ldr	r4, [r1, #16]
 801967a:	42a3      	cmp	r3, r4
 801967c:	4607      	mov	r7, r0
 801967e:	db7e      	blt.n	801977e <quorem+0x10c>
 8019680:	3c01      	subs	r4, #1
 8019682:	f101 0814 	add.w	r8, r1, #20
 8019686:	00a3      	lsls	r3, r4, #2
 8019688:	f100 0514 	add.w	r5, r0, #20
 801968c:	9300      	str	r3, [sp, #0]
 801968e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019692:	9301      	str	r3, [sp, #4]
 8019694:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801969c:	3301      	adds	r3, #1
 801969e:	429a      	cmp	r2, r3
 80196a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80196a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80196a8:	d32e      	bcc.n	8019708 <quorem+0x96>
 80196aa:	f04f 0a00 	mov.w	sl, #0
 80196ae:	46c4      	mov	ip, r8
 80196b0:	46ae      	mov	lr, r5
 80196b2:	46d3      	mov	fp, sl
 80196b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80196b8:	b298      	uxth	r0, r3
 80196ba:	fb06 a000 	mla	r0, r6, r0, sl
 80196be:	0c02      	lsrs	r2, r0, #16
 80196c0:	0c1b      	lsrs	r3, r3, #16
 80196c2:	fb06 2303 	mla	r3, r6, r3, r2
 80196c6:	f8de 2000 	ldr.w	r2, [lr]
 80196ca:	b280      	uxth	r0, r0
 80196cc:	b292      	uxth	r2, r2
 80196ce:	1a12      	subs	r2, r2, r0
 80196d0:	445a      	add	r2, fp
 80196d2:	f8de 0000 	ldr.w	r0, [lr]
 80196d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80196da:	b29b      	uxth	r3, r3
 80196dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80196e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80196e4:	b292      	uxth	r2, r2
 80196e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80196ea:	45e1      	cmp	r9, ip
 80196ec:	f84e 2b04 	str.w	r2, [lr], #4
 80196f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80196f4:	d2de      	bcs.n	80196b4 <quorem+0x42>
 80196f6:	9b00      	ldr	r3, [sp, #0]
 80196f8:	58eb      	ldr	r3, [r5, r3]
 80196fa:	b92b      	cbnz	r3, 8019708 <quorem+0x96>
 80196fc:	9b01      	ldr	r3, [sp, #4]
 80196fe:	3b04      	subs	r3, #4
 8019700:	429d      	cmp	r5, r3
 8019702:	461a      	mov	r2, r3
 8019704:	d32f      	bcc.n	8019766 <quorem+0xf4>
 8019706:	613c      	str	r4, [r7, #16]
 8019708:	4638      	mov	r0, r7
 801970a:	f001 f97f 	bl	801aa0c <__mcmp>
 801970e:	2800      	cmp	r0, #0
 8019710:	db25      	blt.n	801975e <quorem+0xec>
 8019712:	4629      	mov	r1, r5
 8019714:	2000      	movs	r0, #0
 8019716:	f858 2b04 	ldr.w	r2, [r8], #4
 801971a:	f8d1 c000 	ldr.w	ip, [r1]
 801971e:	fa1f fe82 	uxth.w	lr, r2
 8019722:	fa1f f38c 	uxth.w	r3, ip
 8019726:	eba3 030e 	sub.w	r3, r3, lr
 801972a:	4403      	add	r3, r0
 801972c:	0c12      	lsrs	r2, r2, #16
 801972e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019732:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019736:	b29b      	uxth	r3, r3
 8019738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801973c:	45c1      	cmp	r9, r8
 801973e:	f841 3b04 	str.w	r3, [r1], #4
 8019742:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019746:	d2e6      	bcs.n	8019716 <quorem+0xa4>
 8019748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801974c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019750:	b922      	cbnz	r2, 801975c <quorem+0xea>
 8019752:	3b04      	subs	r3, #4
 8019754:	429d      	cmp	r5, r3
 8019756:	461a      	mov	r2, r3
 8019758:	d30b      	bcc.n	8019772 <quorem+0x100>
 801975a:	613c      	str	r4, [r7, #16]
 801975c:	3601      	adds	r6, #1
 801975e:	4630      	mov	r0, r6
 8019760:	b003      	add	sp, #12
 8019762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019766:	6812      	ldr	r2, [r2, #0]
 8019768:	3b04      	subs	r3, #4
 801976a:	2a00      	cmp	r2, #0
 801976c:	d1cb      	bne.n	8019706 <quorem+0x94>
 801976e:	3c01      	subs	r4, #1
 8019770:	e7c6      	b.n	8019700 <quorem+0x8e>
 8019772:	6812      	ldr	r2, [r2, #0]
 8019774:	3b04      	subs	r3, #4
 8019776:	2a00      	cmp	r2, #0
 8019778:	d1ef      	bne.n	801975a <quorem+0xe8>
 801977a:	3c01      	subs	r4, #1
 801977c:	e7ea      	b.n	8019754 <quorem+0xe2>
 801977e:	2000      	movs	r0, #0
 8019780:	e7ee      	b.n	8019760 <quorem+0xee>
 8019782:	0000      	movs	r0, r0
 8019784:	0000      	movs	r0, r0
	...

08019788 <_dtoa_r>:
 8019788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801978c:	69c7      	ldr	r7, [r0, #28]
 801978e:	b097      	sub	sp, #92	@ 0x5c
 8019790:	ed8d 0b04 	vstr	d0, [sp, #16]
 8019794:	ec55 4b10 	vmov	r4, r5, d0
 8019798:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801979a:	9107      	str	r1, [sp, #28]
 801979c:	4681      	mov	r9, r0
 801979e:	920c      	str	r2, [sp, #48]	@ 0x30
 80197a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80197a2:	b97f      	cbnz	r7, 80197c4 <_dtoa_r+0x3c>
 80197a4:	2010      	movs	r0, #16
 80197a6:	f000 fe09 	bl	801a3bc <malloc>
 80197aa:	4602      	mov	r2, r0
 80197ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80197b0:	b920      	cbnz	r0, 80197bc <_dtoa_r+0x34>
 80197b2:	4ba9      	ldr	r3, [pc, #676]	@ (8019a58 <_dtoa_r+0x2d0>)
 80197b4:	21ef      	movs	r1, #239	@ 0xef
 80197b6:	48a9      	ldr	r0, [pc, #676]	@ (8019a5c <_dtoa_r+0x2d4>)
 80197b8:	f001 fe24 	bl	801b404 <__assert_func>
 80197bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80197c0:	6007      	str	r7, [r0, #0]
 80197c2:	60c7      	str	r7, [r0, #12]
 80197c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80197c8:	6819      	ldr	r1, [r3, #0]
 80197ca:	b159      	cbz	r1, 80197e4 <_dtoa_r+0x5c>
 80197cc:	685a      	ldr	r2, [r3, #4]
 80197ce:	604a      	str	r2, [r1, #4]
 80197d0:	2301      	movs	r3, #1
 80197d2:	4093      	lsls	r3, r2
 80197d4:	608b      	str	r3, [r1, #8]
 80197d6:	4648      	mov	r0, r9
 80197d8:	f000 fee6 	bl	801a5a8 <_Bfree>
 80197dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80197e0:	2200      	movs	r2, #0
 80197e2:	601a      	str	r2, [r3, #0]
 80197e4:	1e2b      	subs	r3, r5, #0
 80197e6:	bfb9      	ittee	lt
 80197e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80197ec:	9305      	strlt	r3, [sp, #20]
 80197ee:	2300      	movge	r3, #0
 80197f0:	6033      	strge	r3, [r6, #0]
 80197f2:	9f05      	ldr	r7, [sp, #20]
 80197f4:	4b9a      	ldr	r3, [pc, #616]	@ (8019a60 <_dtoa_r+0x2d8>)
 80197f6:	bfbc      	itt	lt
 80197f8:	2201      	movlt	r2, #1
 80197fa:	6032      	strlt	r2, [r6, #0]
 80197fc:	43bb      	bics	r3, r7
 80197fe:	d112      	bne.n	8019826 <_dtoa_r+0x9e>
 8019800:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019802:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019806:	6013      	str	r3, [r2, #0]
 8019808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801980c:	4323      	orrs	r3, r4
 801980e:	f000 855a 	beq.w	801a2c6 <_dtoa_r+0xb3e>
 8019812:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019814:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8019a74 <_dtoa_r+0x2ec>
 8019818:	2b00      	cmp	r3, #0
 801981a:	f000 855c 	beq.w	801a2d6 <_dtoa_r+0xb4e>
 801981e:	f10a 0303 	add.w	r3, sl, #3
 8019822:	f000 bd56 	b.w	801a2d2 <_dtoa_r+0xb4a>
 8019826:	ed9d 7b04 	vldr	d7, [sp, #16]
 801982a:	2200      	movs	r2, #0
 801982c:	ec51 0b17 	vmov	r0, r1, d7
 8019830:	2300      	movs	r3, #0
 8019832:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8019836:	f7e7 f91f 	bl	8000a78 <__aeabi_dcmpeq>
 801983a:	4680      	mov	r8, r0
 801983c:	b158      	cbz	r0, 8019856 <_dtoa_r+0xce>
 801983e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019840:	2301      	movs	r3, #1
 8019842:	6013      	str	r3, [r2, #0]
 8019844:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019846:	b113      	cbz	r3, 801984e <_dtoa_r+0xc6>
 8019848:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801984a:	4b86      	ldr	r3, [pc, #536]	@ (8019a64 <_dtoa_r+0x2dc>)
 801984c:	6013      	str	r3, [r2, #0]
 801984e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8019a78 <_dtoa_r+0x2f0>
 8019852:	f000 bd40 	b.w	801a2d6 <_dtoa_r+0xb4e>
 8019856:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801985a:	aa14      	add	r2, sp, #80	@ 0x50
 801985c:	a915      	add	r1, sp, #84	@ 0x54
 801985e:	4648      	mov	r0, r9
 8019860:	f001 f984 	bl	801ab6c <__d2b>
 8019864:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8019868:	9002      	str	r0, [sp, #8]
 801986a:	2e00      	cmp	r6, #0
 801986c:	d078      	beq.n	8019960 <_dtoa_r+0x1d8>
 801986e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019870:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8019874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019878:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801987c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8019880:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8019884:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8019888:	4619      	mov	r1, r3
 801988a:	2200      	movs	r2, #0
 801988c:	4b76      	ldr	r3, [pc, #472]	@ (8019a68 <_dtoa_r+0x2e0>)
 801988e:	f7e6 fcd3 	bl	8000238 <__aeabi_dsub>
 8019892:	a36b      	add	r3, pc, #428	@ (adr r3, 8019a40 <_dtoa_r+0x2b8>)
 8019894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019898:	f7e6 fe86 	bl	80005a8 <__aeabi_dmul>
 801989c:	a36a      	add	r3, pc, #424	@ (adr r3, 8019a48 <_dtoa_r+0x2c0>)
 801989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198a2:	f7e6 fccb 	bl	800023c <__adddf3>
 80198a6:	4604      	mov	r4, r0
 80198a8:	4630      	mov	r0, r6
 80198aa:	460d      	mov	r5, r1
 80198ac:	f7e6 fe12 	bl	80004d4 <__aeabi_i2d>
 80198b0:	a367      	add	r3, pc, #412	@ (adr r3, 8019a50 <_dtoa_r+0x2c8>)
 80198b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b6:	f7e6 fe77 	bl	80005a8 <__aeabi_dmul>
 80198ba:	4602      	mov	r2, r0
 80198bc:	460b      	mov	r3, r1
 80198be:	4620      	mov	r0, r4
 80198c0:	4629      	mov	r1, r5
 80198c2:	f7e6 fcbb 	bl	800023c <__adddf3>
 80198c6:	4604      	mov	r4, r0
 80198c8:	460d      	mov	r5, r1
 80198ca:	f7e7 f91d 	bl	8000b08 <__aeabi_d2iz>
 80198ce:	2200      	movs	r2, #0
 80198d0:	4607      	mov	r7, r0
 80198d2:	2300      	movs	r3, #0
 80198d4:	4620      	mov	r0, r4
 80198d6:	4629      	mov	r1, r5
 80198d8:	f7e7 f8d8 	bl	8000a8c <__aeabi_dcmplt>
 80198dc:	b140      	cbz	r0, 80198f0 <_dtoa_r+0x168>
 80198de:	4638      	mov	r0, r7
 80198e0:	f7e6 fdf8 	bl	80004d4 <__aeabi_i2d>
 80198e4:	4622      	mov	r2, r4
 80198e6:	462b      	mov	r3, r5
 80198e8:	f7e7 f8c6 	bl	8000a78 <__aeabi_dcmpeq>
 80198ec:	b900      	cbnz	r0, 80198f0 <_dtoa_r+0x168>
 80198ee:	3f01      	subs	r7, #1
 80198f0:	2f16      	cmp	r7, #22
 80198f2:	d852      	bhi.n	801999a <_dtoa_r+0x212>
 80198f4:	4b5d      	ldr	r3, [pc, #372]	@ (8019a6c <_dtoa_r+0x2e4>)
 80198f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80198fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019902:	f7e7 f8c3 	bl	8000a8c <__aeabi_dcmplt>
 8019906:	2800      	cmp	r0, #0
 8019908:	d049      	beq.n	801999e <_dtoa_r+0x216>
 801990a:	3f01      	subs	r7, #1
 801990c:	2300      	movs	r3, #0
 801990e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019910:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019912:	1b9b      	subs	r3, r3, r6
 8019914:	1e5a      	subs	r2, r3, #1
 8019916:	bf45      	ittet	mi
 8019918:	f1c3 0301 	rsbmi	r3, r3, #1
 801991c:	9300      	strmi	r3, [sp, #0]
 801991e:	2300      	movpl	r3, #0
 8019920:	2300      	movmi	r3, #0
 8019922:	9206      	str	r2, [sp, #24]
 8019924:	bf54      	ite	pl
 8019926:	9300      	strpl	r3, [sp, #0]
 8019928:	9306      	strmi	r3, [sp, #24]
 801992a:	2f00      	cmp	r7, #0
 801992c:	db39      	blt.n	80199a2 <_dtoa_r+0x21a>
 801992e:	9b06      	ldr	r3, [sp, #24]
 8019930:	970d      	str	r7, [sp, #52]	@ 0x34
 8019932:	443b      	add	r3, r7
 8019934:	9306      	str	r3, [sp, #24]
 8019936:	2300      	movs	r3, #0
 8019938:	9308      	str	r3, [sp, #32]
 801993a:	9b07      	ldr	r3, [sp, #28]
 801993c:	2b09      	cmp	r3, #9
 801993e:	d863      	bhi.n	8019a08 <_dtoa_r+0x280>
 8019940:	2b05      	cmp	r3, #5
 8019942:	bfc4      	itt	gt
 8019944:	3b04      	subgt	r3, #4
 8019946:	9307      	strgt	r3, [sp, #28]
 8019948:	9b07      	ldr	r3, [sp, #28]
 801994a:	f1a3 0302 	sub.w	r3, r3, #2
 801994e:	bfcc      	ite	gt
 8019950:	2400      	movgt	r4, #0
 8019952:	2401      	movle	r4, #1
 8019954:	2b03      	cmp	r3, #3
 8019956:	d863      	bhi.n	8019a20 <_dtoa_r+0x298>
 8019958:	e8df f003 	tbb	[pc, r3]
 801995c:	2b375452 	.word	0x2b375452
 8019960:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8019964:	441e      	add	r6, r3
 8019966:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801996a:	2b20      	cmp	r3, #32
 801996c:	bfc1      	itttt	gt
 801996e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8019972:	409f      	lslgt	r7, r3
 8019974:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8019978:	fa24 f303 	lsrgt.w	r3, r4, r3
 801997c:	bfd6      	itet	le
 801997e:	f1c3 0320 	rsble	r3, r3, #32
 8019982:	ea47 0003 	orrgt.w	r0, r7, r3
 8019986:	fa04 f003 	lslle.w	r0, r4, r3
 801998a:	f7e6 fd93 	bl	80004b4 <__aeabi_ui2d>
 801998e:	2201      	movs	r2, #1
 8019990:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8019994:	3e01      	subs	r6, #1
 8019996:	9212      	str	r2, [sp, #72]	@ 0x48
 8019998:	e776      	b.n	8019888 <_dtoa_r+0x100>
 801999a:	2301      	movs	r3, #1
 801999c:	e7b7      	b.n	801990e <_dtoa_r+0x186>
 801999e:	9010      	str	r0, [sp, #64]	@ 0x40
 80199a0:	e7b6      	b.n	8019910 <_dtoa_r+0x188>
 80199a2:	9b00      	ldr	r3, [sp, #0]
 80199a4:	1bdb      	subs	r3, r3, r7
 80199a6:	9300      	str	r3, [sp, #0]
 80199a8:	427b      	negs	r3, r7
 80199aa:	9308      	str	r3, [sp, #32]
 80199ac:	2300      	movs	r3, #0
 80199ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80199b0:	e7c3      	b.n	801993a <_dtoa_r+0x1b2>
 80199b2:	2301      	movs	r3, #1
 80199b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80199b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199b8:	eb07 0b03 	add.w	fp, r7, r3
 80199bc:	f10b 0301 	add.w	r3, fp, #1
 80199c0:	2b01      	cmp	r3, #1
 80199c2:	9303      	str	r3, [sp, #12]
 80199c4:	bfb8      	it	lt
 80199c6:	2301      	movlt	r3, #1
 80199c8:	e006      	b.n	80199d8 <_dtoa_r+0x250>
 80199ca:	2301      	movs	r3, #1
 80199cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80199ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	dd28      	ble.n	8019a26 <_dtoa_r+0x29e>
 80199d4:	469b      	mov	fp, r3
 80199d6:	9303      	str	r3, [sp, #12]
 80199d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80199dc:	2100      	movs	r1, #0
 80199de:	2204      	movs	r2, #4
 80199e0:	f102 0514 	add.w	r5, r2, #20
 80199e4:	429d      	cmp	r5, r3
 80199e6:	d926      	bls.n	8019a36 <_dtoa_r+0x2ae>
 80199e8:	6041      	str	r1, [r0, #4]
 80199ea:	4648      	mov	r0, r9
 80199ec:	f000 fd9c 	bl	801a528 <_Balloc>
 80199f0:	4682      	mov	sl, r0
 80199f2:	2800      	cmp	r0, #0
 80199f4:	d142      	bne.n	8019a7c <_dtoa_r+0x2f4>
 80199f6:	4b1e      	ldr	r3, [pc, #120]	@ (8019a70 <_dtoa_r+0x2e8>)
 80199f8:	4602      	mov	r2, r0
 80199fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80199fe:	e6da      	b.n	80197b6 <_dtoa_r+0x2e>
 8019a00:	2300      	movs	r3, #0
 8019a02:	e7e3      	b.n	80199cc <_dtoa_r+0x244>
 8019a04:	2300      	movs	r3, #0
 8019a06:	e7d5      	b.n	80199b4 <_dtoa_r+0x22c>
 8019a08:	2401      	movs	r4, #1
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	9307      	str	r3, [sp, #28]
 8019a0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8019a10:	f04f 3bff 	mov.w	fp, #4294967295
 8019a14:	2200      	movs	r2, #0
 8019a16:	f8cd b00c 	str.w	fp, [sp, #12]
 8019a1a:	2312      	movs	r3, #18
 8019a1c:	920c      	str	r2, [sp, #48]	@ 0x30
 8019a1e:	e7db      	b.n	80199d8 <_dtoa_r+0x250>
 8019a20:	2301      	movs	r3, #1
 8019a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a24:	e7f4      	b.n	8019a10 <_dtoa_r+0x288>
 8019a26:	f04f 0b01 	mov.w	fp, #1
 8019a2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8019a2e:	465b      	mov	r3, fp
 8019a30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8019a34:	e7d0      	b.n	80199d8 <_dtoa_r+0x250>
 8019a36:	3101      	adds	r1, #1
 8019a38:	0052      	lsls	r2, r2, #1
 8019a3a:	e7d1      	b.n	80199e0 <_dtoa_r+0x258>
 8019a3c:	f3af 8000 	nop.w
 8019a40:	636f4361 	.word	0x636f4361
 8019a44:	3fd287a7 	.word	0x3fd287a7
 8019a48:	8b60c8b3 	.word	0x8b60c8b3
 8019a4c:	3fc68a28 	.word	0x3fc68a28
 8019a50:	509f79fb 	.word	0x509f79fb
 8019a54:	3fd34413 	.word	0x3fd34413
 8019a58:	0801f6a1 	.word	0x0801f6a1
 8019a5c:	0801f6b8 	.word	0x0801f6b8
 8019a60:	7ff00000 	.word	0x7ff00000
 8019a64:	0801f671 	.word	0x0801f671
 8019a68:	3ff80000 	.word	0x3ff80000
 8019a6c:	0801f808 	.word	0x0801f808
 8019a70:	0801f710 	.word	0x0801f710
 8019a74:	0801f69d 	.word	0x0801f69d
 8019a78:	0801f670 	.word	0x0801f670
 8019a7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019a80:	6018      	str	r0, [r3, #0]
 8019a82:	9b03      	ldr	r3, [sp, #12]
 8019a84:	2b0e      	cmp	r3, #14
 8019a86:	f200 80a1 	bhi.w	8019bcc <_dtoa_r+0x444>
 8019a8a:	2c00      	cmp	r4, #0
 8019a8c:	f000 809e 	beq.w	8019bcc <_dtoa_r+0x444>
 8019a90:	2f00      	cmp	r7, #0
 8019a92:	dd33      	ble.n	8019afc <_dtoa_r+0x374>
 8019a94:	4b9c      	ldr	r3, [pc, #624]	@ (8019d08 <_dtoa_r+0x580>)
 8019a96:	f007 020f 	and.w	r2, r7, #15
 8019a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019a9e:	ed93 7b00 	vldr	d7, [r3]
 8019aa2:	05f8      	lsls	r0, r7, #23
 8019aa4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8019aa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8019aac:	d516      	bpl.n	8019adc <_dtoa_r+0x354>
 8019aae:	4b97      	ldr	r3, [pc, #604]	@ (8019d0c <_dtoa_r+0x584>)
 8019ab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019ab8:	f7e6 fea0 	bl	80007fc <__aeabi_ddiv>
 8019abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019ac0:	f004 040f 	and.w	r4, r4, #15
 8019ac4:	2603      	movs	r6, #3
 8019ac6:	4d91      	ldr	r5, [pc, #580]	@ (8019d0c <_dtoa_r+0x584>)
 8019ac8:	b954      	cbnz	r4, 8019ae0 <_dtoa_r+0x358>
 8019aca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019ad2:	f7e6 fe93 	bl	80007fc <__aeabi_ddiv>
 8019ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019ada:	e028      	b.n	8019b2e <_dtoa_r+0x3a6>
 8019adc:	2602      	movs	r6, #2
 8019ade:	e7f2      	b.n	8019ac6 <_dtoa_r+0x33e>
 8019ae0:	07e1      	lsls	r1, r4, #31
 8019ae2:	d508      	bpl.n	8019af6 <_dtoa_r+0x36e>
 8019ae4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8019ae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019aec:	f7e6 fd5c 	bl	80005a8 <__aeabi_dmul>
 8019af0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019af4:	3601      	adds	r6, #1
 8019af6:	1064      	asrs	r4, r4, #1
 8019af8:	3508      	adds	r5, #8
 8019afa:	e7e5      	b.n	8019ac8 <_dtoa_r+0x340>
 8019afc:	f000 80af 	beq.w	8019c5e <_dtoa_r+0x4d6>
 8019b00:	427c      	negs	r4, r7
 8019b02:	4b81      	ldr	r3, [pc, #516]	@ (8019d08 <_dtoa_r+0x580>)
 8019b04:	4d81      	ldr	r5, [pc, #516]	@ (8019d0c <_dtoa_r+0x584>)
 8019b06:	f004 020f 	and.w	r2, r4, #15
 8019b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019b16:	f7e6 fd47 	bl	80005a8 <__aeabi_dmul>
 8019b1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019b1e:	1124      	asrs	r4, r4, #4
 8019b20:	2300      	movs	r3, #0
 8019b22:	2602      	movs	r6, #2
 8019b24:	2c00      	cmp	r4, #0
 8019b26:	f040 808f 	bne.w	8019c48 <_dtoa_r+0x4c0>
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d1d3      	bne.n	8019ad6 <_dtoa_r+0x34e>
 8019b2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019b30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	f000 8094 	beq.w	8019c62 <_dtoa_r+0x4da>
 8019b3a:	4b75      	ldr	r3, [pc, #468]	@ (8019d10 <_dtoa_r+0x588>)
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	4620      	mov	r0, r4
 8019b40:	4629      	mov	r1, r5
 8019b42:	f7e6 ffa3 	bl	8000a8c <__aeabi_dcmplt>
 8019b46:	2800      	cmp	r0, #0
 8019b48:	f000 808b 	beq.w	8019c62 <_dtoa_r+0x4da>
 8019b4c:	9b03      	ldr	r3, [sp, #12]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	f000 8087 	beq.w	8019c62 <_dtoa_r+0x4da>
 8019b54:	f1bb 0f00 	cmp.w	fp, #0
 8019b58:	dd34      	ble.n	8019bc4 <_dtoa_r+0x43c>
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	4b6d      	ldr	r3, [pc, #436]	@ (8019d14 <_dtoa_r+0x58c>)
 8019b5e:	2200      	movs	r2, #0
 8019b60:	4629      	mov	r1, r5
 8019b62:	f7e6 fd21 	bl	80005a8 <__aeabi_dmul>
 8019b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019b6a:	f107 38ff 	add.w	r8, r7, #4294967295
 8019b6e:	3601      	adds	r6, #1
 8019b70:	465c      	mov	r4, fp
 8019b72:	4630      	mov	r0, r6
 8019b74:	f7e6 fcae 	bl	80004d4 <__aeabi_i2d>
 8019b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019b7c:	f7e6 fd14 	bl	80005a8 <__aeabi_dmul>
 8019b80:	4b65      	ldr	r3, [pc, #404]	@ (8019d18 <_dtoa_r+0x590>)
 8019b82:	2200      	movs	r2, #0
 8019b84:	f7e6 fb5a 	bl	800023c <__adddf3>
 8019b88:	4605      	mov	r5, r0
 8019b8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8019b8e:	2c00      	cmp	r4, #0
 8019b90:	d16a      	bne.n	8019c68 <_dtoa_r+0x4e0>
 8019b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019b96:	4b61      	ldr	r3, [pc, #388]	@ (8019d1c <_dtoa_r+0x594>)
 8019b98:	2200      	movs	r2, #0
 8019b9a:	f7e6 fb4d 	bl	8000238 <__aeabi_dsub>
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	460b      	mov	r3, r1
 8019ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019ba6:	462a      	mov	r2, r5
 8019ba8:	4633      	mov	r3, r6
 8019baa:	f7e6 ff8d 	bl	8000ac8 <__aeabi_dcmpgt>
 8019bae:	2800      	cmp	r0, #0
 8019bb0:	f040 8298 	bne.w	801a0e4 <_dtoa_r+0x95c>
 8019bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019bb8:	462a      	mov	r2, r5
 8019bba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8019bbe:	f7e6 ff65 	bl	8000a8c <__aeabi_dcmplt>
 8019bc2:	bb38      	cbnz	r0, 8019c14 <_dtoa_r+0x48c>
 8019bc4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8019bc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8019bcc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	f2c0 8157 	blt.w	8019e82 <_dtoa_r+0x6fa>
 8019bd4:	2f0e      	cmp	r7, #14
 8019bd6:	f300 8154 	bgt.w	8019e82 <_dtoa_r+0x6fa>
 8019bda:	4b4b      	ldr	r3, [pc, #300]	@ (8019d08 <_dtoa_r+0x580>)
 8019bdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019be0:	ed93 7b00 	vldr	d7, [r3]
 8019be4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	ed8d 7b00 	vstr	d7, [sp]
 8019bec:	f280 80e5 	bge.w	8019dba <_dtoa_r+0x632>
 8019bf0:	9b03      	ldr	r3, [sp, #12]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	f300 80e1 	bgt.w	8019dba <_dtoa_r+0x632>
 8019bf8:	d10c      	bne.n	8019c14 <_dtoa_r+0x48c>
 8019bfa:	4b48      	ldr	r3, [pc, #288]	@ (8019d1c <_dtoa_r+0x594>)
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	ec51 0b17 	vmov	r0, r1, d7
 8019c02:	f7e6 fcd1 	bl	80005a8 <__aeabi_dmul>
 8019c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019c0a:	f7e6 ff53 	bl	8000ab4 <__aeabi_dcmpge>
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	f000 8266 	beq.w	801a0e0 <_dtoa_r+0x958>
 8019c14:	2400      	movs	r4, #0
 8019c16:	4625      	mov	r5, r4
 8019c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c1a:	4656      	mov	r6, sl
 8019c1c:	ea6f 0803 	mvn.w	r8, r3
 8019c20:	2700      	movs	r7, #0
 8019c22:	4621      	mov	r1, r4
 8019c24:	4648      	mov	r0, r9
 8019c26:	f000 fcbf 	bl	801a5a8 <_Bfree>
 8019c2a:	2d00      	cmp	r5, #0
 8019c2c:	f000 80bd 	beq.w	8019daa <_dtoa_r+0x622>
 8019c30:	b12f      	cbz	r7, 8019c3e <_dtoa_r+0x4b6>
 8019c32:	42af      	cmp	r7, r5
 8019c34:	d003      	beq.n	8019c3e <_dtoa_r+0x4b6>
 8019c36:	4639      	mov	r1, r7
 8019c38:	4648      	mov	r0, r9
 8019c3a:	f000 fcb5 	bl	801a5a8 <_Bfree>
 8019c3e:	4629      	mov	r1, r5
 8019c40:	4648      	mov	r0, r9
 8019c42:	f000 fcb1 	bl	801a5a8 <_Bfree>
 8019c46:	e0b0      	b.n	8019daa <_dtoa_r+0x622>
 8019c48:	07e2      	lsls	r2, r4, #31
 8019c4a:	d505      	bpl.n	8019c58 <_dtoa_r+0x4d0>
 8019c4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019c50:	f7e6 fcaa 	bl	80005a8 <__aeabi_dmul>
 8019c54:	3601      	adds	r6, #1
 8019c56:	2301      	movs	r3, #1
 8019c58:	1064      	asrs	r4, r4, #1
 8019c5a:	3508      	adds	r5, #8
 8019c5c:	e762      	b.n	8019b24 <_dtoa_r+0x39c>
 8019c5e:	2602      	movs	r6, #2
 8019c60:	e765      	b.n	8019b2e <_dtoa_r+0x3a6>
 8019c62:	9c03      	ldr	r4, [sp, #12]
 8019c64:	46b8      	mov	r8, r7
 8019c66:	e784      	b.n	8019b72 <_dtoa_r+0x3ea>
 8019c68:	4b27      	ldr	r3, [pc, #156]	@ (8019d08 <_dtoa_r+0x580>)
 8019c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019c6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019c70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019c74:	4454      	add	r4, sl
 8019c76:	2900      	cmp	r1, #0
 8019c78:	d054      	beq.n	8019d24 <_dtoa_r+0x59c>
 8019c7a:	4929      	ldr	r1, [pc, #164]	@ (8019d20 <_dtoa_r+0x598>)
 8019c7c:	2000      	movs	r0, #0
 8019c7e:	f7e6 fdbd 	bl	80007fc <__aeabi_ddiv>
 8019c82:	4633      	mov	r3, r6
 8019c84:	462a      	mov	r2, r5
 8019c86:	f7e6 fad7 	bl	8000238 <__aeabi_dsub>
 8019c8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019c8e:	4656      	mov	r6, sl
 8019c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019c94:	f7e6 ff38 	bl	8000b08 <__aeabi_d2iz>
 8019c98:	4605      	mov	r5, r0
 8019c9a:	f7e6 fc1b 	bl	80004d4 <__aeabi_i2d>
 8019c9e:	4602      	mov	r2, r0
 8019ca0:	460b      	mov	r3, r1
 8019ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019ca6:	f7e6 fac7 	bl	8000238 <__aeabi_dsub>
 8019caa:	3530      	adds	r5, #48	@ 0x30
 8019cac:	4602      	mov	r2, r0
 8019cae:	460b      	mov	r3, r1
 8019cb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019cb4:	f806 5b01 	strb.w	r5, [r6], #1
 8019cb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019cbc:	f7e6 fee6 	bl	8000a8c <__aeabi_dcmplt>
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	d172      	bne.n	8019daa <_dtoa_r+0x622>
 8019cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019cc8:	4911      	ldr	r1, [pc, #68]	@ (8019d10 <_dtoa_r+0x588>)
 8019cca:	2000      	movs	r0, #0
 8019ccc:	f7e6 fab4 	bl	8000238 <__aeabi_dsub>
 8019cd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019cd4:	f7e6 feda 	bl	8000a8c <__aeabi_dcmplt>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	f040 80b4 	bne.w	8019e46 <_dtoa_r+0x6be>
 8019cde:	42a6      	cmp	r6, r4
 8019ce0:	f43f af70 	beq.w	8019bc4 <_dtoa_r+0x43c>
 8019ce4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8019ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8019d14 <_dtoa_r+0x58c>)
 8019cea:	2200      	movs	r2, #0
 8019cec:	f7e6 fc5c 	bl	80005a8 <__aeabi_dmul>
 8019cf0:	4b08      	ldr	r3, [pc, #32]	@ (8019d14 <_dtoa_r+0x58c>)
 8019cf2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019cfc:	f7e6 fc54 	bl	80005a8 <__aeabi_dmul>
 8019d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019d04:	e7c4      	b.n	8019c90 <_dtoa_r+0x508>
 8019d06:	bf00      	nop
 8019d08:	0801f808 	.word	0x0801f808
 8019d0c:	0801f7e0 	.word	0x0801f7e0
 8019d10:	3ff00000 	.word	0x3ff00000
 8019d14:	40240000 	.word	0x40240000
 8019d18:	401c0000 	.word	0x401c0000
 8019d1c:	40140000 	.word	0x40140000
 8019d20:	3fe00000 	.word	0x3fe00000
 8019d24:	4631      	mov	r1, r6
 8019d26:	4628      	mov	r0, r5
 8019d28:	f7e6 fc3e 	bl	80005a8 <__aeabi_dmul>
 8019d2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019d30:	9413      	str	r4, [sp, #76]	@ 0x4c
 8019d32:	4656      	mov	r6, sl
 8019d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019d38:	f7e6 fee6 	bl	8000b08 <__aeabi_d2iz>
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	f7e6 fbc9 	bl	80004d4 <__aeabi_i2d>
 8019d42:	4602      	mov	r2, r0
 8019d44:	460b      	mov	r3, r1
 8019d46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019d4a:	f7e6 fa75 	bl	8000238 <__aeabi_dsub>
 8019d4e:	3530      	adds	r5, #48	@ 0x30
 8019d50:	f806 5b01 	strb.w	r5, [r6], #1
 8019d54:	4602      	mov	r2, r0
 8019d56:	460b      	mov	r3, r1
 8019d58:	42a6      	cmp	r6, r4
 8019d5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019d5e:	f04f 0200 	mov.w	r2, #0
 8019d62:	d124      	bne.n	8019dae <_dtoa_r+0x626>
 8019d64:	4baf      	ldr	r3, [pc, #700]	@ (801a024 <_dtoa_r+0x89c>)
 8019d66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8019d6a:	f7e6 fa67 	bl	800023c <__adddf3>
 8019d6e:	4602      	mov	r2, r0
 8019d70:	460b      	mov	r3, r1
 8019d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019d76:	f7e6 fea7 	bl	8000ac8 <__aeabi_dcmpgt>
 8019d7a:	2800      	cmp	r0, #0
 8019d7c:	d163      	bne.n	8019e46 <_dtoa_r+0x6be>
 8019d7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019d82:	49a8      	ldr	r1, [pc, #672]	@ (801a024 <_dtoa_r+0x89c>)
 8019d84:	2000      	movs	r0, #0
 8019d86:	f7e6 fa57 	bl	8000238 <__aeabi_dsub>
 8019d8a:	4602      	mov	r2, r0
 8019d8c:	460b      	mov	r3, r1
 8019d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019d92:	f7e6 fe7b 	bl	8000a8c <__aeabi_dcmplt>
 8019d96:	2800      	cmp	r0, #0
 8019d98:	f43f af14 	beq.w	8019bc4 <_dtoa_r+0x43c>
 8019d9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019d9e:	1e73      	subs	r3, r6, #1
 8019da0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019da2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019da6:	2b30      	cmp	r3, #48	@ 0x30
 8019da8:	d0f8      	beq.n	8019d9c <_dtoa_r+0x614>
 8019daa:	4647      	mov	r7, r8
 8019dac:	e03b      	b.n	8019e26 <_dtoa_r+0x69e>
 8019dae:	4b9e      	ldr	r3, [pc, #632]	@ (801a028 <_dtoa_r+0x8a0>)
 8019db0:	f7e6 fbfa 	bl	80005a8 <__aeabi_dmul>
 8019db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019db8:	e7bc      	b.n	8019d34 <_dtoa_r+0x5ac>
 8019dba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8019dbe:	4656      	mov	r6, sl
 8019dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	4629      	mov	r1, r5
 8019dc8:	f7e6 fd18 	bl	80007fc <__aeabi_ddiv>
 8019dcc:	f7e6 fe9c 	bl	8000b08 <__aeabi_d2iz>
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	f7e6 fb7f 	bl	80004d4 <__aeabi_i2d>
 8019dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019dda:	f7e6 fbe5 	bl	80005a8 <__aeabi_dmul>
 8019dde:	4602      	mov	r2, r0
 8019de0:	460b      	mov	r3, r1
 8019de2:	4620      	mov	r0, r4
 8019de4:	4629      	mov	r1, r5
 8019de6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8019dea:	f7e6 fa25 	bl	8000238 <__aeabi_dsub>
 8019dee:	f806 4b01 	strb.w	r4, [r6], #1
 8019df2:	9d03      	ldr	r5, [sp, #12]
 8019df4:	eba6 040a 	sub.w	r4, r6, sl
 8019df8:	42a5      	cmp	r5, r4
 8019dfa:	4602      	mov	r2, r0
 8019dfc:	460b      	mov	r3, r1
 8019dfe:	d133      	bne.n	8019e68 <_dtoa_r+0x6e0>
 8019e00:	f7e6 fa1c 	bl	800023c <__adddf3>
 8019e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e08:	4604      	mov	r4, r0
 8019e0a:	460d      	mov	r5, r1
 8019e0c:	f7e6 fe5c 	bl	8000ac8 <__aeabi_dcmpgt>
 8019e10:	b9c0      	cbnz	r0, 8019e44 <_dtoa_r+0x6bc>
 8019e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e16:	4620      	mov	r0, r4
 8019e18:	4629      	mov	r1, r5
 8019e1a:	f7e6 fe2d 	bl	8000a78 <__aeabi_dcmpeq>
 8019e1e:	b110      	cbz	r0, 8019e26 <_dtoa_r+0x69e>
 8019e20:	f018 0f01 	tst.w	r8, #1
 8019e24:	d10e      	bne.n	8019e44 <_dtoa_r+0x6bc>
 8019e26:	9902      	ldr	r1, [sp, #8]
 8019e28:	4648      	mov	r0, r9
 8019e2a:	f000 fbbd 	bl	801a5a8 <_Bfree>
 8019e2e:	2300      	movs	r3, #0
 8019e30:	7033      	strb	r3, [r6, #0]
 8019e32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019e34:	3701      	adds	r7, #1
 8019e36:	601f      	str	r7, [r3, #0]
 8019e38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	f000 824b 	beq.w	801a2d6 <_dtoa_r+0xb4e>
 8019e40:	601e      	str	r6, [r3, #0]
 8019e42:	e248      	b.n	801a2d6 <_dtoa_r+0xb4e>
 8019e44:	46b8      	mov	r8, r7
 8019e46:	4633      	mov	r3, r6
 8019e48:	461e      	mov	r6, r3
 8019e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019e4e:	2a39      	cmp	r2, #57	@ 0x39
 8019e50:	d106      	bne.n	8019e60 <_dtoa_r+0x6d8>
 8019e52:	459a      	cmp	sl, r3
 8019e54:	d1f8      	bne.n	8019e48 <_dtoa_r+0x6c0>
 8019e56:	2230      	movs	r2, #48	@ 0x30
 8019e58:	f108 0801 	add.w	r8, r8, #1
 8019e5c:	f88a 2000 	strb.w	r2, [sl]
 8019e60:	781a      	ldrb	r2, [r3, #0]
 8019e62:	3201      	adds	r2, #1
 8019e64:	701a      	strb	r2, [r3, #0]
 8019e66:	e7a0      	b.n	8019daa <_dtoa_r+0x622>
 8019e68:	4b6f      	ldr	r3, [pc, #444]	@ (801a028 <_dtoa_r+0x8a0>)
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	f7e6 fb9c 	bl	80005a8 <__aeabi_dmul>
 8019e70:	2200      	movs	r2, #0
 8019e72:	2300      	movs	r3, #0
 8019e74:	4604      	mov	r4, r0
 8019e76:	460d      	mov	r5, r1
 8019e78:	f7e6 fdfe 	bl	8000a78 <__aeabi_dcmpeq>
 8019e7c:	2800      	cmp	r0, #0
 8019e7e:	d09f      	beq.n	8019dc0 <_dtoa_r+0x638>
 8019e80:	e7d1      	b.n	8019e26 <_dtoa_r+0x69e>
 8019e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e84:	2a00      	cmp	r2, #0
 8019e86:	f000 80ea 	beq.w	801a05e <_dtoa_r+0x8d6>
 8019e8a:	9a07      	ldr	r2, [sp, #28]
 8019e8c:	2a01      	cmp	r2, #1
 8019e8e:	f300 80cd 	bgt.w	801a02c <_dtoa_r+0x8a4>
 8019e92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019e94:	2a00      	cmp	r2, #0
 8019e96:	f000 80c1 	beq.w	801a01c <_dtoa_r+0x894>
 8019e9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8019e9e:	9c08      	ldr	r4, [sp, #32]
 8019ea0:	9e00      	ldr	r6, [sp, #0]
 8019ea2:	9a00      	ldr	r2, [sp, #0]
 8019ea4:	441a      	add	r2, r3
 8019ea6:	9200      	str	r2, [sp, #0]
 8019ea8:	9a06      	ldr	r2, [sp, #24]
 8019eaa:	2101      	movs	r1, #1
 8019eac:	441a      	add	r2, r3
 8019eae:	4648      	mov	r0, r9
 8019eb0:	9206      	str	r2, [sp, #24]
 8019eb2:	f000 fc2d 	bl	801a710 <__i2b>
 8019eb6:	4605      	mov	r5, r0
 8019eb8:	b166      	cbz	r6, 8019ed4 <_dtoa_r+0x74c>
 8019eba:	9b06      	ldr	r3, [sp, #24]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	dd09      	ble.n	8019ed4 <_dtoa_r+0x74c>
 8019ec0:	42b3      	cmp	r3, r6
 8019ec2:	9a00      	ldr	r2, [sp, #0]
 8019ec4:	bfa8      	it	ge
 8019ec6:	4633      	movge	r3, r6
 8019ec8:	1ad2      	subs	r2, r2, r3
 8019eca:	9200      	str	r2, [sp, #0]
 8019ecc:	9a06      	ldr	r2, [sp, #24]
 8019ece:	1af6      	subs	r6, r6, r3
 8019ed0:	1ad3      	subs	r3, r2, r3
 8019ed2:	9306      	str	r3, [sp, #24]
 8019ed4:	9b08      	ldr	r3, [sp, #32]
 8019ed6:	b30b      	cbz	r3, 8019f1c <_dtoa_r+0x794>
 8019ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	f000 80c6 	beq.w	801a06c <_dtoa_r+0x8e4>
 8019ee0:	2c00      	cmp	r4, #0
 8019ee2:	f000 80c0 	beq.w	801a066 <_dtoa_r+0x8de>
 8019ee6:	4629      	mov	r1, r5
 8019ee8:	4622      	mov	r2, r4
 8019eea:	4648      	mov	r0, r9
 8019eec:	f000 fcc8 	bl	801a880 <__pow5mult>
 8019ef0:	9a02      	ldr	r2, [sp, #8]
 8019ef2:	4601      	mov	r1, r0
 8019ef4:	4605      	mov	r5, r0
 8019ef6:	4648      	mov	r0, r9
 8019ef8:	f000 fc20 	bl	801a73c <__multiply>
 8019efc:	9902      	ldr	r1, [sp, #8]
 8019efe:	4680      	mov	r8, r0
 8019f00:	4648      	mov	r0, r9
 8019f02:	f000 fb51 	bl	801a5a8 <_Bfree>
 8019f06:	9b08      	ldr	r3, [sp, #32]
 8019f08:	1b1b      	subs	r3, r3, r4
 8019f0a:	9308      	str	r3, [sp, #32]
 8019f0c:	f000 80b1 	beq.w	801a072 <_dtoa_r+0x8ea>
 8019f10:	9a08      	ldr	r2, [sp, #32]
 8019f12:	4641      	mov	r1, r8
 8019f14:	4648      	mov	r0, r9
 8019f16:	f000 fcb3 	bl	801a880 <__pow5mult>
 8019f1a:	9002      	str	r0, [sp, #8]
 8019f1c:	2101      	movs	r1, #1
 8019f1e:	4648      	mov	r0, r9
 8019f20:	f000 fbf6 	bl	801a710 <__i2b>
 8019f24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f26:	4604      	mov	r4, r0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	f000 81d8 	beq.w	801a2de <_dtoa_r+0xb56>
 8019f2e:	461a      	mov	r2, r3
 8019f30:	4601      	mov	r1, r0
 8019f32:	4648      	mov	r0, r9
 8019f34:	f000 fca4 	bl	801a880 <__pow5mult>
 8019f38:	9b07      	ldr	r3, [sp, #28]
 8019f3a:	2b01      	cmp	r3, #1
 8019f3c:	4604      	mov	r4, r0
 8019f3e:	f300 809f 	bgt.w	801a080 <_dtoa_r+0x8f8>
 8019f42:	9b04      	ldr	r3, [sp, #16]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	f040 8097 	bne.w	801a078 <_dtoa_r+0x8f0>
 8019f4a:	9b05      	ldr	r3, [sp, #20]
 8019f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	f040 8093 	bne.w	801a07c <_dtoa_r+0x8f4>
 8019f56:	9b05      	ldr	r3, [sp, #20]
 8019f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019f5c:	0d1b      	lsrs	r3, r3, #20
 8019f5e:	051b      	lsls	r3, r3, #20
 8019f60:	b133      	cbz	r3, 8019f70 <_dtoa_r+0x7e8>
 8019f62:	9b00      	ldr	r3, [sp, #0]
 8019f64:	3301      	adds	r3, #1
 8019f66:	9300      	str	r3, [sp, #0]
 8019f68:	9b06      	ldr	r3, [sp, #24]
 8019f6a:	3301      	adds	r3, #1
 8019f6c:	9306      	str	r3, [sp, #24]
 8019f6e:	2301      	movs	r3, #1
 8019f70:	9308      	str	r3, [sp, #32]
 8019f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	f000 81b8 	beq.w	801a2ea <_dtoa_r+0xb62>
 8019f7a:	6923      	ldr	r3, [r4, #16]
 8019f7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019f80:	6918      	ldr	r0, [r3, #16]
 8019f82:	f000 fb79 	bl	801a678 <__hi0bits>
 8019f86:	f1c0 0020 	rsb	r0, r0, #32
 8019f8a:	9b06      	ldr	r3, [sp, #24]
 8019f8c:	4418      	add	r0, r3
 8019f8e:	f010 001f 	ands.w	r0, r0, #31
 8019f92:	f000 8082 	beq.w	801a09a <_dtoa_r+0x912>
 8019f96:	f1c0 0320 	rsb	r3, r0, #32
 8019f9a:	2b04      	cmp	r3, #4
 8019f9c:	dd73      	ble.n	801a086 <_dtoa_r+0x8fe>
 8019f9e:	9b00      	ldr	r3, [sp, #0]
 8019fa0:	f1c0 001c 	rsb	r0, r0, #28
 8019fa4:	4403      	add	r3, r0
 8019fa6:	9300      	str	r3, [sp, #0]
 8019fa8:	9b06      	ldr	r3, [sp, #24]
 8019faa:	4403      	add	r3, r0
 8019fac:	4406      	add	r6, r0
 8019fae:	9306      	str	r3, [sp, #24]
 8019fb0:	9b00      	ldr	r3, [sp, #0]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	dd05      	ble.n	8019fc2 <_dtoa_r+0x83a>
 8019fb6:	9902      	ldr	r1, [sp, #8]
 8019fb8:	461a      	mov	r2, r3
 8019fba:	4648      	mov	r0, r9
 8019fbc:	f000 fcba 	bl	801a934 <__lshift>
 8019fc0:	9002      	str	r0, [sp, #8]
 8019fc2:	9b06      	ldr	r3, [sp, #24]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	dd05      	ble.n	8019fd4 <_dtoa_r+0x84c>
 8019fc8:	4621      	mov	r1, r4
 8019fca:	461a      	mov	r2, r3
 8019fcc:	4648      	mov	r0, r9
 8019fce:	f000 fcb1 	bl	801a934 <__lshift>
 8019fd2:	4604      	mov	r4, r0
 8019fd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d061      	beq.n	801a09e <_dtoa_r+0x916>
 8019fda:	9802      	ldr	r0, [sp, #8]
 8019fdc:	4621      	mov	r1, r4
 8019fde:	f000 fd15 	bl	801aa0c <__mcmp>
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	da5b      	bge.n	801a09e <_dtoa_r+0x916>
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	9902      	ldr	r1, [sp, #8]
 8019fea:	220a      	movs	r2, #10
 8019fec:	4648      	mov	r0, r9
 8019fee:	f000 fafd 	bl	801a5ec <__multadd>
 8019ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ff4:	9002      	str	r0, [sp, #8]
 8019ff6:	f107 38ff 	add.w	r8, r7, #4294967295
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	f000 8177 	beq.w	801a2ee <_dtoa_r+0xb66>
 801a000:	4629      	mov	r1, r5
 801a002:	2300      	movs	r3, #0
 801a004:	220a      	movs	r2, #10
 801a006:	4648      	mov	r0, r9
 801a008:	f000 faf0 	bl	801a5ec <__multadd>
 801a00c:	f1bb 0f00 	cmp.w	fp, #0
 801a010:	4605      	mov	r5, r0
 801a012:	dc6f      	bgt.n	801a0f4 <_dtoa_r+0x96c>
 801a014:	9b07      	ldr	r3, [sp, #28]
 801a016:	2b02      	cmp	r3, #2
 801a018:	dc49      	bgt.n	801a0ae <_dtoa_r+0x926>
 801a01a:	e06b      	b.n	801a0f4 <_dtoa_r+0x96c>
 801a01c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a01e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801a022:	e73c      	b.n	8019e9e <_dtoa_r+0x716>
 801a024:	3fe00000 	.word	0x3fe00000
 801a028:	40240000 	.word	0x40240000
 801a02c:	9b03      	ldr	r3, [sp, #12]
 801a02e:	1e5c      	subs	r4, r3, #1
 801a030:	9b08      	ldr	r3, [sp, #32]
 801a032:	42a3      	cmp	r3, r4
 801a034:	db09      	blt.n	801a04a <_dtoa_r+0x8c2>
 801a036:	1b1c      	subs	r4, r3, r4
 801a038:	9b03      	ldr	r3, [sp, #12]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	f6bf af30 	bge.w	8019ea0 <_dtoa_r+0x718>
 801a040:	9b00      	ldr	r3, [sp, #0]
 801a042:	9a03      	ldr	r2, [sp, #12]
 801a044:	1a9e      	subs	r6, r3, r2
 801a046:	2300      	movs	r3, #0
 801a048:	e72b      	b.n	8019ea2 <_dtoa_r+0x71a>
 801a04a:	9b08      	ldr	r3, [sp, #32]
 801a04c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a04e:	9408      	str	r4, [sp, #32]
 801a050:	1ae3      	subs	r3, r4, r3
 801a052:	441a      	add	r2, r3
 801a054:	9e00      	ldr	r6, [sp, #0]
 801a056:	9b03      	ldr	r3, [sp, #12]
 801a058:	920d      	str	r2, [sp, #52]	@ 0x34
 801a05a:	2400      	movs	r4, #0
 801a05c:	e721      	b.n	8019ea2 <_dtoa_r+0x71a>
 801a05e:	9c08      	ldr	r4, [sp, #32]
 801a060:	9e00      	ldr	r6, [sp, #0]
 801a062:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801a064:	e728      	b.n	8019eb8 <_dtoa_r+0x730>
 801a066:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a06a:	e751      	b.n	8019f10 <_dtoa_r+0x788>
 801a06c:	9a08      	ldr	r2, [sp, #32]
 801a06e:	9902      	ldr	r1, [sp, #8]
 801a070:	e750      	b.n	8019f14 <_dtoa_r+0x78c>
 801a072:	f8cd 8008 	str.w	r8, [sp, #8]
 801a076:	e751      	b.n	8019f1c <_dtoa_r+0x794>
 801a078:	2300      	movs	r3, #0
 801a07a:	e779      	b.n	8019f70 <_dtoa_r+0x7e8>
 801a07c:	9b04      	ldr	r3, [sp, #16]
 801a07e:	e777      	b.n	8019f70 <_dtoa_r+0x7e8>
 801a080:	2300      	movs	r3, #0
 801a082:	9308      	str	r3, [sp, #32]
 801a084:	e779      	b.n	8019f7a <_dtoa_r+0x7f2>
 801a086:	d093      	beq.n	8019fb0 <_dtoa_r+0x828>
 801a088:	9a00      	ldr	r2, [sp, #0]
 801a08a:	331c      	adds	r3, #28
 801a08c:	441a      	add	r2, r3
 801a08e:	9200      	str	r2, [sp, #0]
 801a090:	9a06      	ldr	r2, [sp, #24]
 801a092:	441a      	add	r2, r3
 801a094:	441e      	add	r6, r3
 801a096:	9206      	str	r2, [sp, #24]
 801a098:	e78a      	b.n	8019fb0 <_dtoa_r+0x828>
 801a09a:	4603      	mov	r3, r0
 801a09c:	e7f4      	b.n	801a088 <_dtoa_r+0x900>
 801a09e:	9b03      	ldr	r3, [sp, #12]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	46b8      	mov	r8, r7
 801a0a4:	dc20      	bgt.n	801a0e8 <_dtoa_r+0x960>
 801a0a6:	469b      	mov	fp, r3
 801a0a8:	9b07      	ldr	r3, [sp, #28]
 801a0aa:	2b02      	cmp	r3, #2
 801a0ac:	dd1e      	ble.n	801a0ec <_dtoa_r+0x964>
 801a0ae:	f1bb 0f00 	cmp.w	fp, #0
 801a0b2:	f47f adb1 	bne.w	8019c18 <_dtoa_r+0x490>
 801a0b6:	4621      	mov	r1, r4
 801a0b8:	465b      	mov	r3, fp
 801a0ba:	2205      	movs	r2, #5
 801a0bc:	4648      	mov	r0, r9
 801a0be:	f000 fa95 	bl	801a5ec <__multadd>
 801a0c2:	4601      	mov	r1, r0
 801a0c4:	4604      	mov	r4, r0
 801a0c6:	9802      	ldr	r0, [sp, #8]
 801a0c8:	f000 fca0 	bl	801aa0c <__mcmp>
 801a0cc:	2800      	cmp	r0, #0
 801a0ce:	f77f ada3 	ble.w	8019c18 <_dtoa_r+0x490>
 801a0d2:	4656      	mov	r6, sl
 801a0d4:	2331      	movs	r3, #49	@ 0x31
 801a0d6:	f806 3b01 	strb.w	r3, [r6], #1
 801a0da:	f108 0801 	add.w	r8, r8, #1
 801a0de:	e59f      	b.n	8019c20 <_dtoa_r+0x498>
 801a0e0:	9c03      	ldr	r4, [sp, #12]
 801a0e2:	46b8      	mov	r8, r7
 801a0e4:	4625      	mov	r5, r4
 801a0e6:	e7f4      	b.n	801a0d2 <_dtoa_r+0x94a>
 801a0e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801a0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	f000 8101 	beq.w	801a2f6 <_dtoa_r+0xb6e>
 801a0f4:	2e00      	cmp	r6, #0
 801a0f6:	dd05      	ble.n	801a104 <_dtoa_r+0x97c>
 801a0f8:	4629      	mov	r1, r5
 801a0fa:	4632      	mov	r2, r6
 801a0fc:	4648      	mov	r0, r9
 801a0fe:	f000 fc19 	bl	801a934 <__lshift>
 801a102:	4605      	mov	r5, r0
 801a104:	9b08      	ldr	r3, [sp, #32]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d05c      	beq.n	801a1c4 <_dtoa_r+0xa3c>
 801a10a:	6869      	ldr	r1, [r5, #4]
 801a10c:	4648      	mov	r0, r9
 801a10e:	f000 fa0b 	bl	801a528 <_Balloc>
 801a112:	4606      	mov	r6, r0
 801a114:	b928      	cbnz	r0, 801a122 <_dtoa_r+0x99a>
 801a116:	4b82      	ldr	r3, [pc, #520]	@ (801a320 <_dtoa_r+0xb98>)
 801a118:	4602      	mov	r2, r0
 801a11a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a11e:	f7ff bb4a 	b.w	80197b6 <_dtoa_r+0x2e>
 801a122:	692a      	ldr	r2, [r5, #16]
 801a124:	3202      	adds	r2, #2
 801a126:	0092      	lsls	r2, r2, #2
 801a128:	f105 010c 	add.w	r1, r5, #12
 801a12c:	300c      	adds	r0, #12
 801a12e:	f7ff fa92 	bl	8019656 <memcpy>
 801a132:	2201      	movs	r2, #1
 801a134:	4631      	mov	r1, r6
 801a136:	4648      	mov	r0, r9
 801a138:	f000 fbfc 	bl	801a934 <__lshift>
 801a13c:	f10a 0301 	add.w	r3, sl, #1
 801a140:	9300      	str	r3, [sp, #0]
 801a142:	eb0a 030b 	add.w	r3, sl, fp
 801a146:	9308      	str	r3, [sp, #32]
 801a148:	9b04      	ldr	r3, [sp, #16]
 801a14a:	f003 0301 	and.w	r3, r3, #1
 801a14e:	462f      	mov	r7, r5
 801a150:	9306      	str	r3, [sp, #24]
 801a152:	4605      	mov	r5, r0
 801a154:	9b00      	ldr	r3, [sp, #0]
 801a156:	9802      	ldr	r0, [sp, #8]
 801a158:	4621      	mov	r1, r4
 801a15a:	f103 3bff 	add.w	fp, r3, #4294967295
 801a15e:	f7ff fa88 	bl	8019672 <quorem>
 801a162:	4603      	mov	r3, r0
 801a164:	3330      	adds	r3, #48	@ 0x30
 801a166:	9003      	str	r0, [sp, #12]
 801a168:	4639      	mov	r1, r7
 801a16a:	9802      	ldr	r0, [sp, #8]
 801a16c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a16e:	f000 fc4d 	bl	801aa0c <__mcmp>
 801a172:	462a      	mov	r2, r5
 801a174:	9004      	str	r0, [sp, #16]
 801a176:	4621      	mov	r1, r4
 801a178:	4648      	mov	r0, r9
 801a17a:	f000 fc63 	bl	801aa44 <__mdiff>
 801a17e:	68c2      	ldr	r2, [r0, #12]
 801a180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a182:	4606      	mov	r6, r0
 801a184:	bb02      	cbnz	r2, 801a1c8 <_dtoa_r+0xa40>
 801a186:	4601      	mov	r1, r0
 801a188:	9802      	ldr	r0, [sp, #8]
 801a18a:	f000 fc3f 	bl	801aa0c <__mcmp>
 801a18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a190:	4602      	mov	r2, r0
 801a192:	4631      	mov	r1, r6
 801a194:	4648      	mov	r0, r9
 801a196:	920c      	str	r2, [sp, #48]	@ 0x30
 801a198:	9309      	str	r3, [sp, #36]	@ 0x24
 801a19a:	f000 fa05 	bl	801a5a8 <_Bfree>
 801a19e:	9b07      	ldr	r3, [sp, #28]
 801a1a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a1a2:	9e00      	ldr	r6, [sp, #0]
 801a1a4:	ea42 0103 	orr.w	r1, r2, r3
 801a1a8:	9b06      	ldr	r3, [sp, #24]
 801a1aa:	4319      	orrs	r1, r3
 801a1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1ae:	d10d      	bne.n	801a1cc <_dtoa_r+0xa44>
 801a1b0:	2b39      	cmp	r3, #57	@ 0x39
 801a1b2:	d027      	beq.n	801a204 <_dtoa_r+0xa7c>
 801a1b4:	9a04      	ldr	r2, [sp, #16]
 801a1b6:	2a00      	cmp	r2, #0
 801a1b8:	dd01      	ble.n	801a1be <_dtoa_r+0xa36>
 801a1ba:	9b03      	ldr	r3, [sp, #12]
 801a1bc:	3331      	adds	r3, #49	@ 0x31
 801a1be:	f88b 3000 	strb.w	r3, [fp]
 801a1c2:	e52e      	b.n	8019c22 <_dtoa_r+0x49a>
 801a1c4:	4628      	mov	r0, r5
 801a1c6:	e7b9      	b.n	801a13c <_dtoa_r+0x9b4>
 801a1c8:	2201      	movs	r2, #1
 801a1ca:	e7e2      	b.n	801a192 <_dtoa_r+0xa0a>
 801a1cc:	9904      	ldr	r1, [sp, #16]
 801a1ce:	2900      	cmp	r1, #0
 801a1d0:	db04      	blt.n	801a1dc <_dtoa_r+0xa54>
 801a1d2:	9807      	ldr	r0, [sp, #28]
 801a1d4:	4301      	orrs	r1, r0
 801a1d6:	9806      	ldr	r0, [sp, #24]
 801a1d8:	4301      	orrs	r1, r0
 801a1da:	d120      	bne.n	801a21e <_dtoa_r+0xa96>
 801a1dc:	2a00      	cmp	r2, #0
 801a1de:	ddee      	ble.n	801a1be <_dtoa_r+0xa36>
 801a1e0:	9902      	ldr	r1, [sp, #8]
 801a1e2:	9300      	str	r3, [sp, #0]
 801a1e4:	2201      	movs	r2, #1
 801a1e6:	4648      	mov	r0, r9
 801a1e8:	f000 fba4 	bl	801a934 <__lshift>
 801a1ec:	4621      	mov	r1, r4
 801a1ee:	9002      	str	r0, [sp, #8]
 801a1f0:	f000 fc0c 	bl	801aa0c <__mcmp>
 801a1f4:	2800      	cmp	r0, #0
 801a1f6:	9b00      	ldr	r3, [sp, #0]
 801a1f8:	dc02      	bgt.n	801a200 <_dtoa_r+0xa78>
 801a1fa:	d1e0      	bne.n	801a1be <_dtoa_r+0xa36>
 801a1fc:	07da      	lsls	r2, r3, #31
 801a1fe:	d5de      	bpl.n	801a1be <_dtoa_r+0xa36>
 801a200:	2b39      	cmp	r3, #57	@ 0x39
 801a202:	d1da      	bne.n	801a1ba <_dtoa_r+0xa32>
 801a204:	2339      	movs	r3, #57	@ 0x39
 801a206:	f88b 3000 	strb.w	r3, [fp]
 801a20a:	4633      	mov	r3, r6
 801a20c:	461e      	mov	r6, r3
 801a20e:	3b01      	subs	r3, #1
 801a210:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a214:	2a39      	cmp	r2, #57	@ 0x39
 801a216:	d04e      	beq.n	801a2b6 <_dtoa_r+0xb2e>
 801a218:	3201      	adds	r2, #1
 801a21a:	701a      	strb	r2, [r3, #0]
 801a21c:	e501      	b.n	8019c22 <_dtoa_r+0x49a>
 801a21e:	2a00      	cmp	r2, #0
 801a220:	dd03      	ble.n	801a22a <_dtoa_r+0xaa2>
 801a222:	2b39      	cmp	r3, #57	@ 0x39
 801a224:	d0ee      	beq.n	801a204 <_dtoa_r+0xa7c>
 801a226:	3301      	adds	r3, #1
 801a228:	e7c9      	b.n	801a1be <_dtoa_r+0xa36>
 801a22a:	9a00      	ldr	r2, [sp, #0]
 801a22c:	9908      	ldr	r1, [sp, #32]
 801a22e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a232:	428a      	cmp	r2, r1
 801a234:	d028      	beq.n	801a288 <_dtoa_r+0xb00>
 801a236:	9902      	ldr	r1, [sp, #8]
 801a238:	2300      	movs	r3, #0
 801a23a:	220a      	movs	r2, #10
 801a23c:	4648      	mov	r0, r9
 801a23e:	f000 f9d5 	bl	801a5ec <__multadd>
 801a242:	42af      	cmp	r7, r5
 801a244:	9002      	str	r0, [sp, #8]
 801a246:	f04f 0300 	mov.w	r3, #0
 801a24a:	f04f 020a 	mov.w	r2, #10
 801a24e:	4639      	mov	r1, r7
 801a250:	4648      	mov	r0, r9
 801a252:	d107      	bne.n	801a264 <_dtoa_r+0xadc>
 801a254:	f000 f9ca 	bl	801a5ec <__multadd>
 801a258:	4607      	mov	r7, r0
 801a25a:	4605      	mov	r5, r0
 801a25c:	9b00      	ldr	r3, [sp, #0]
 801a25e:	3301      	adds	r3, #1
 801a260:	9300      	str	r3, [sp, #0]
 801a262:	e777      	b.n	801a154 <_dtoa_r+0x9cc>
 801a264:	f000 f9c2 	bl	801a5ec <__multadd>
 801a268:	4629      	mov	r1, r5
 801a26a:	4607      	mov	r7, r0
 801a26c:	2300      	movs	r3, #0
 801a26e:	220a      	movs	r2, #10
 801a270:	4648      	mov	r0, r9
 801a272:	f000 f9bb 	bl	801a5ec <__multadd>
 801a276:	4605      	mov	r5, r0
 801a278:	e7f0      	b.n	801a25c <_dtoa_r+0xad4>
 801a27a:	f1bb 0f00 	cmp.w	fp, #0
 801a27e:	bfcc      	ite	gt
 801a280:	465e      	movgt	r6, fp
 801a282:	2601      	movle	r6, #1
 801a284:	4456      	add	r6, sl
 801a286:	2700      	movs	r7, #0
 801a288:	9902      	ldr	r1, [sp, #8]
 801a28a:	9300      	str	r3, [sp, #0]
 801a28c:	2201      	movs	r2, #1
 801a28e:	4648      	mov	r0, r9
 801a290:	f000 fb50 	bl	801a934 <__lshift>
 801a294:	4621      	mov	r1, r4
 801a296:	9002      	str	r0, [sp, #8]
 801a298:	f000 fbb8 	bl	801aa0c <__mcmp>
 801a29c:	2800      	cmp	r0, #0
 801a29e:	dcb4      	bgt.n	801a20a <_dtoa_r+0xa82>
 801a2a0:	d102      	bne.n	801a2a8 <_dtoa_r+0xb20>
 801a2a2:	9b00      	ldr	r3, [sp, #0]
 801a2a4:	07db      	lsls	r3, r3, #31
 801a2a6:	d4b0      	bmi.n	801a20a <_dtoa_r+0xa82>
 801a2a8:	4633      	mov	r3, r6
 801a2aa:	461e      	mov	r6, r3
 801a2ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a2b0:	2a30      	cmp	r2, #48	@ 0x30
 801a2b2:	d0fa      	beq.n	801a2aa <_dtoa_r+0xb22>
 801a2b4:	e4b5      	b.n	8019c22 <_dtoa_r+0x49a>
 801a2b6:	459a      	cmp	sl, r3
 801a2b8:	d1a8      	bne.n	801a20c <_dtoa_r+0xa84>
 801a2ba:	2331      	movs	r3, #49	@ 0x31
 801a2bc:	f108 0801 	add.w	r8, r8, #1
 801a2c0:	f88a 3000 	strb.w	r3, [sl]
 801a2c4:	e4ad      	b.n	8019c22 <_dtoa_r+0x49a>
 801a2c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a2c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801a324 <_dtoa_r+0xb9c>
 801a2cc:	b11b      	cbz	r3, 801a2d6 <_dtoa_r+0xb4e>
 801a2ce:	f10a 0308 	add.w	r3, sl, #8
 801a2d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a2d4:	6013      	str	r3, [r2, #0]
 801a2d6:	4650      	mov	r0, sl
 801a2d8:	b017      	add	sp, #92	@ 0x5c
 801a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2de:	9b07      	ldr	r3, [sp, #28]
 801a2e0:	2b01      	cmp	r3, #1
 801a2e2:	f77f ae2e 	ble.w	8019f42 <_dtoa_r+0x7ba>
 801a2e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a2e8:	9308      	str	r3, [sp, #32]
 801a2ea:	2001      	movs	r0, #1
 801a2ec:	e64d      	b.n	8019f8a <_dtoa_r+0x802>
 801a2ee:	f1bb 0f00 	cmp.w	fp, #0
 801a2f2:	f77f aed9 	ble.w	801a0a8 <_dtoa_r+0x920>
 801a2f6:	4656      	mov	r6, sl
 801a2f8:	9802      	ldr	r0, [sp, #8]
 801a2fa:	4621      	mov	r1, r4
 801a2fc:	f7ff f9b9 	bl	8019672 <quorem>
 801a300:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801a304:	f806 3b01 	strb.w	r3, [r6], #1
 801a308:	eba6 020a 	sub.w	r2, r6, sl
 801a30c:	4593      	cmp	fp, r2
 801a30e:	ddb4      	ble.n	801a27a <_dtoa_r+0xaf2>
 801a310:	9902      	ldr	r1, [sp, #8]
 801a312:	2300      	movs	r3, #0
 801a314:	220a      	movs	r2, #10
 801a316:	4648      	mov	r0, r9
 801a318:	f000 f968 	bl	801a5ec <__multadd>
 801a31c:	9002      	str	r0, [sp, #8]
 801a31e:	e7eb      	b.n	801a2f8 <_dtoa_r+0xb70>
 801a320:	0801f710 	.word	0x0801f710
 801a324:	0801f694 	.word	0x0801f694

0801a328 <_free_r>:
 801a328:	b538      	push	{r3, r4, r5, lr}
 801a32a:	4605      	mov	r5, r0
 801a32c:	2900      	cmp	r1, #0
 801a32e:	d041      	beq.n	801a3b4 <_free_r+0x8c>
 801a330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a334:	1f0c      	subs	r4, r1, #4
 801a336:	2b00      	cmp	r3, #0
 801a338:	bfb8      	it	lt
 801a33a:	18e4      	addlt	r4, r4, r3
 801a33c:	f000 f8e8 	bl	801a510 <__malloc_lock>
 801a340:	4a1d      	ldr	r2, [pc, #116]	@ (801a3b8 <_free_r+0x90>)
 801a342:	6813      	ldr	r3, [r2, #0]
 801a344:	b933      	cbnz	r3, 801a354 <_free_r+0x2c>
 801a346:	6063      	str	r3, [r4, #4]
 801a348:	6014      	str	r4, [r2, #0]
 801a34a:	4628      	mov	r0, r5
 801a34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a350:	f000 b8e4 	b.w	801a51c <__malloc_unlock>
 801a354:	42a3      	cmp	r3, r4
 801a356:	d908      	bls.n	801a36a <_free_r+0x42>
 801a358:	6820      	ldr	r0, [r4, #0]
 801a35a:	1821      	adds	r1, r4, r0
 801a35c:	428b      	cmp	r3, r1
 801a35e:	bf01      	itttt	eq
 801a360:	6819      	ldreq	r1, [r3, #0]
 801a362:	685b      	ldreq	r3, [r3, #4]
 801a364:	1809      	addeq	r1, r1, r0
 801a366:	6021      	streq	r1, [r4, #0]
 801a368:	e7ed      	b.n	801a346 <_free_r+0x1e>
 801a36a:	461a      	mov	r2, r3
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	b10b      	cbz	r3, 801a374 <_free_r+0x4c>
 801a370:	42a3      	cmp	r3, r4
 801a372:	d9fa      	bls.n	801a36a <_free_r+0x42>
 801a374:	6811      	ldr	r1, [r2, #0]
 801a376:	1850      	adds	r0, r2, r1
 801a378:	42a0      	cmp	r0, r4
 801a37a:	d10b      	bne.n	801a394 <_free_r+0x6c>
 801a37c:	6820      	ldr	r0, [r4, #0]
 801a37e:	4401      	add	r1, r0
 801a380:	1850      	adds	r0, r2, r1
 801a382:	4283      	cmp	r3, r0
 801a384:	6011      	str	r1, [r2, #0]
 801a386:	d1e0      	bne.n	801a34a <_free_r+0x22>
 801a388:	6818      	ldr	r0, [r3, #0]
 801a38a:	685b      	ldr	r3, [r3, #4]
 801a38c:	6053      	str	r3, [r2, #4]
 801a38e:	4408      	add	r0, r1
 801a390:	6010      	str	r0, [r2, #0]
 801a392:	e7da      	b.n	801a34a <_free_r+0x22>
 801a394:	d902      	bls.n	801a39c <_free_r+0x74>
 801a396:	230c      	movs	r3, #12
 801a398:	602b      	str	r3, [r5, #0]
 801a39a:	e7d6      	b.n	801a34a <_free_r+0x22>
 801a39c:	6820      	ldr	r0, [r4, #0]
 801a39e:	1821      	adds	r1, r4, r0
 801a3a0:	428b      	cmp	r3, r1
 801a3a2:	bf04      	itt	eq
 801a3a4:	6819      	ldreq	r1, [r3, #0]
 801a3a6:	685b      	ldreq	r3, [r3, #4]
 801a3a8:	6063      	str	r3, [r4, #4]
 801a3aa:	bf04      	itt	eq
 801a3ac:	1809      	addeq	r1, r1, r0
 801a3ae:	6021      	streq	r1, [r4, #0]
 801a3b0:	6054      	str	r4, [r2, #4]
 801a3b2:	e7ca      	b.n	801a34a <_free_r+0x22>
 801a3b4:	bd38      	pop	{r3, r4, r5, pc}
 801a3b6:	bf00      	nop
 801a3b8:	2000b070 	.word	0x2000b070

0801a3bc <malloc>:
 801a3bc:	4b02      	ldr	r3, [pc, #8]	@ (801a3c8 <malloc+0xc>)
 801a3be:	4601      	mov	r1, r0
 801a3c0:	6818      	ldr	r0, [r3, #0]
 801a3c2:	f000 b825 	b.w	801a410 <_malloc_r>
 801a3c6:	bf00      	nop
 801a3c8:	2000012c 	.word	0x2000012c

0801a3cc <sbrk_aligned>:
 801a3cc:	b570      	push	{r4, r5, r6, lr}
 801a3ce:	4e0f      	ldr	r6, [pc, #60]	@ (801a40c <sbrk_aligned+0x40>)
 801a3d0:	460c      	mov	r4, r1
 801a3d2:	6831      	ldr	r1, [r6, #0]
 801a3d4:	4605      	mov	r5, r0
 801a3d6:	b911      	cbnz	r1, 801a3de <sbrk_aligned+0x12>
 801a3d8:	f001 f804 	bl	801b3e4 <_sbrk_r>
 801a3dc:	6030      	str	r0, [r6, #0]
 801a3de:	4621      	mov	r1, r4
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	f000 ffff 	bl	801b3e4 <_sbrk_r>
 801a3e6:	1c43      	adds	r3, r0, #1
 801a3e8:	d103      	bne.n	801a3f2 <sbrk_aligned+0x26>
 801a3ea:	f04f 34ff 	mov.w	r4, #4294967295
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	bd70      	pop	{r4, r5, r6, pc}
 801a3f2:	1cc4      	adds	r4, r0, #3
 801a3f4:	f024 0403 	bic.w	r4, r4, #3
 801a3f8:	42a0      	cmp	r0, r4
 801a3fa:	d0f8      	beq.n	801a3ee <sbrk_aligned+0x22>
 801a3fc:	1a21      	subs	r1, r4, r0
 801a3fe:	4628      	mov	r0, r5
 801a400:	f000 fff0 	bl	801b3e4 <_sbrk_r>
 801a404:	3001      	adds	r0, #1
 801a406:	d1f2      	bne.n	801a3ee <sbrk_aligned+0x22>
 801a408:	e7ef      	b.n	801a3ea <sbrk_aligned+0x1e>
 801a40a:	bf00      	nop
 801a40c:	2000b06c 	.word	0x2000b06c

0801a410 <_malloc_r>:
 801a410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a414:	1ccd      	adds	r5, r1, #3
 801a416:	f025 0503 	bic.w	r5, r5, #3
 801a41a:	3508      	adds	r5, #8
 801a41c:	2d0c      	cmp	r5, #12
 801a41e:	bf38      	it	cc
 801a420:	250c      	movcc	r5, #12
 801a422:	2d00      	cmp	r5, #0
 801a424:	4606      	mov	r6, r0
 801a426:	db01      	blt.n	801a42c <_malloc_r+0x1c>
 801a428:	42a9      	cmp	r1, r5
 801a42a:	d904      	bls.n	801a436 <_malloc_r+0x26>
 801a42c:	230c      	movs	r3, #12
 801a42e:	6033      	str	r3, [r6, #0]
 801a430:	2000      	movs	r0, #0
 801a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a50c <_malloc_r+0xfc>
 801a43a:	f000 f869 	bl	801a510 <__malloc_lock>
 801a43e:	f8d8 3000 	ldr.w	r3, [r8]
 801a442:	461c      	mov	r4, r3
 801a444:	bb44      	cbnz	r4, 801a498 <_malloc_r+0x88>
 801a446:	4629      	mov	r1, r5
 801a448:	4630      	mov	r0, r6
 801a44a:	f7ff ffbf 	bl	801a3cc <sbrk_aligned>
 801a44e:	1c43      	adds	r3, r0, #1
 801a450:	4604      	mov	r4, r0
 801a452:	d158      	bne.n	801a506 <_malloc_r+0xf6>
 801a454:	f8d8 4000 	ldr.w	r4, [r8]
 801a458:	4627      	mov	r7, r4
 801a45a:	2f00      	cmp	r7, #0
 801a45c:	d143      	bne.n	801a4e6 <_malloc_r+0xd6>
 801a45e:	2c00      	cmp	r4, #0
 801a460:	d04b      	beq.n	801a4fa <_malloc_r+0xea>
 801a462:	6823      	ldr	r3, [r4, #0]
 801a464:	4639      	mov	r1, r7
 801a466:	4630      	mov	r0, r6
 801a468:	eb04 0903 	add.w	r9, r4, r3
 801a46c:	f000 ffba 	bl	801b3e4 <_sbrk_r>
 801a470:	4581      	cmp	r9, r0
 801a472:	d142      	bne.n	801a4fa <_malloc_r+0xea>
 801a474:	6821      	ldr	r1, [r4, #0]
 801a476:	1a6d      	subs	r5, r5, r1
 801a478:	4629      	mov	r1, r5
 801a47a:	4630      	mov	r0, r6
 801a47c:	f7ff ffa6 	bl	801a3cc <sbrk_aligned>
 801a480:	3001      	adds	r0, #1
 801a482:	d03a      	beq.n	801a4fa <_malloc_r+0xea>
 801a484:	6823      	ldr	r3, [r4, #0]
 801a486:	442b      	add	r3, r5
 801a488:	6023      	str	r3, [r4, #0]
 801a48a:	f8d8 3000 	ldr.w	r3, [r8]
 801a48e:	685a      	ldr	r2, [r3, #4]
 801a490:	bb62      	cbnz	r2, 801a4ec <_malloc_r+0xdc>
 801a492:	f8c8 7000 	str.w	r7, [r8]
 801a496:	e00f      	b.n	801a4b8 <_malloc_r+0xa8>
 801a498:	6822      	ldr	r2, [r4, #0]
 801a49a:	1b52      	subs	r2, r2, r5
 801a49c:	d420      	bmi.n	801a4e0 <_malloc_r+0xd0>
 801a49e:	2a0b      	cmp	r2, #11
 801a4a0:	d917      	bls.n	801a4d2 <_malloc_r+0xc2>
 801a4a2:	1961      	adds	r1, r4, r5
 801a4a4:	42a3      	cmp	r3, r4
 801a4a6:	6025      	str	r5, [r4, #0]
 801a4a8:	bf18      	it	ne
 801a4aa:	6059      	strne	r1, [r3, #4]
 801a4ac:	6863      	ldr	r3, [r4, #4]
 801a4ae:	bf08      	it	eq
 801a4b0:	f8c8 1000 	streq.w	r1, [r8]
 801a4b4:	5162      	str	r2, [r4, r5]
 801a4b6:	604b      	str	r3, [r1, #4]
 801a4b8:	4630      	mov	r0, r6
 801a4ba:	f000 f82f 	bl	801a51c <__malloc_unlock>
 801a4be:	f104 000b 	add.w	r0, r4, #11
 801a4c2:	1d23      	adds	r3, r4, #4
 801a4c4:	f020 0007 	bic.w	r0, r0, #7
 801a4c8:	1ac2      	subs	r2, r0, r3
 801a4ca:	bf1c      	itt	ne
 801a4cc:	1a1b      	subne	r3, r3, r0
 801a4ce:	50a3      	strne	r3, [r4, r2]
 801a4d0:	e7af      	b.n	801a432 <_malloc_r+0x22>
 801a4d2:	6862      	ldr	r2, [r4, #4]
 801a4d4:	42a3      	cmp	r3, r4
 801a4d6:	bf0c      	ite	eq
 801a4d8:	f8c8 2000 	streq.w	r2, [r8]
 801a4dc:	605a      	strne	r2, [r3, #4]
 801a4de:	e7eb      	b.n	801a4b8 <_malloc_r+0xa8>
 801a4e0:	4623      	mov	r3, r4
 801a4e2:	6864      	ldr	r4, [r4, #4]
 801a4e4:	e7ae      	b.n	801a444 <_malloc_r+0x34>
 801a4e6:	463c      	mov	r4, r7
 801a4e8:	687f      	ldr	r7, [r7, #4]
 801a4ea:	e7b6      	b.n	801a45a <_malloc_r+0x4a>
 801a4ec:	461a      	mov	r2, r3
 801a4ee:	685b      	ldr	r3, [r3, #4]
 801a4f0:	42a3      	cmp	r3, r4
 801a4f2:	d1fb      	bne.n	801a4ec <_malloc_r+0xdc>
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	6053      	str	r3, [r2, #4]
 801a4f8:	e7de      	b.n	801a4b8 <_malloc_r+0xa8>
 801a4fa:	230c      	movs	r3, #12
 801a4fc:	6033      	str	r3, [r6, #0]
 801a4fe:	4630      	mov	r0, r6
 801a500:	f000 f80c 	bl	801a51c <__malloc_unlock>
 801a504:	e794      	b.n	801a430 <_malloc_r+0x20>
 801a506:	6005      	str	r5, [r0, #0]
 801a508:	e7d6      	b.n	801a4b8 <_malloc_r+0xa8>
 801a50a:	bf00      	nop
 801a50c:	2000b070 	.word	0x2000b070

0801a510 <__malloc_lock>:
 801a510:	4801      	ldr	r0, [pc, #4]	@ (801a518 <__malloc_lock+0x8>)
 801a512:	f7ff b89e 	b.w	8019652 <__retarget_lock_acquire_recursive>
 801a516:	bf00      	nop
 801a518:	2000b068 	.word	0x2000b068

0801a51c <__malloc_unlock>:
 801a51c:	4801      	ldr	r0, [pc, #4]	@ (801a524 <__malloc_unlock+0x8>)
 801a51e:	f7ff b899 	b.w	8019654 <__retarget_lock_release_recursive>
 801a522:	bf00      	nop
 801a524:	2000b068 	.word	0x2000b068

0801a528 <_Balloc>:
 801a528:	b570      	push	{r4, r5, r6, lr}
 801a52a:	69c6      	ldr	r6, [r0, #28]
 801a52c:	4604      	mov	r4, r0
 801a52e:	460d      	mov	r5, r1
 801a530:	b976      	cbnz	r6, 801a550 <_Balloc+0x28>
 801a532:	2010      	movs	r0, #16
 801a534:	f7ff ff42 	bl	801a3bc <malloc>
 801a538:	4602      	mov	r2, r0
 801a53a:	61e0      	str	r0, [r4, #28]
 801a53c:	b920      	cbnz	r0, 801a548 <_Balloc+0x20>
 801a53e:	4b18      	ldr	r3, [pc, #96]	@ (801a5a0 <_Balloc+0x78>)
 801a540:	4818      	ldr	r0, [pc, #96]	@ (801a5a4 <_Balloc+0x7c>)
 801a542:	216b      	movs	r1, #107	@ 0x6b
 801a544:	f000 ff5e 	bl	801b404 <__assert_func>
 801a548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a54c:	6006      	str	r6, [r0, #0]
 801a54e:	60c6      	str	r6, [r0, #12]
 801a550:	69e6      	ldr	r6, [r4, #28]
 801a552:	68f3      	ldr	r3, [r6, #12]
 801a554:	b183      	cbz	r3, 801a578 <_Balloc+0x50>
 801a556:	69e3      	ldr	r3, [r4, #28]
 801a558:	68db      	ldr	r3, [r3, #12]
 801a55a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a55e:	b9b8      	cbnz	r0, 801a590 <_Balloc+0x68>
 801a560:	2101      	movs	r1, #1
 801a562:	fa01 f605 	lsl.w	r6, r1, r5
 801a566:	1d72      	adds	r2, r6, #5
 801a568:	0092      	lsls	r2, r2, #2
 801a56a:	4620      	mov	r0, r4
 801a56c:	f000 ff68 	bl	801b440 <_calloc_r>
 801a570:	b160      	cbz	r0, 801a58c <_Balloc+0x64>
 801a572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a576:	e00e      	b.n	801a596 <_Balloc+0x6e>
 801a578:	2221      	movs	r2, #33	@ 0x21
 801a57a:	2104      	movs	r1, #4
 801a57c:	4620      	mov	r0, r4
 801a57e:	f000 ff5f 	bl	801b440 <_calloc_r>
 801a582:	69e3      	ldr	r3, [r4, #28]
 801a584:	60f0      	str	r0, [r6, #12]
 801a586:	68db      	ldr	r3, [r3, #12]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d1e4      	bne.n	801a556 <_Balloc+0x2e>
 801a58c:	2000      	movs	r0, #0
 801a58e:	bd70      	pop	{r4, r5, r6, pc}
 801a590:	6802      	ldr	r2, [r0, #0]
 801a592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a596:	2300      	movs	r3, #0
 801a598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a59c:	e7f7      	b.n	801a58e <_Balloc+0x66>
 801a59e:	bf00      	nop
 801a5a0:	0801f6a1 	.word	0x0801f6a1
 801a5a4:	0801f721 	.word	0x0801f721

0801a5a8 <_Bfree>:
 801a5a8:	b570      	push	{r4, r5, r6, lr}
 801a5aa:	69c6      	ldr	r6, [r0, #28]
 801a5ac:	4605      	mov	r5, r0
 801a5ae:	460c      	mov	r4, r1
 801a5b0:	b976      	cbnz	r6, 801a5d0 <_Bfree+0x28>
 801a5b2:	2010      	movs	r0, #16
 801a5b4:	f7ff ff02 	bl	801a3bc <malloc>
 801a5b8:	4602      	mov	r2, r0
 801a5ba:	61e8      	str	r0, [r5, #28]
 801a5bc:	b920      	cbnz	r0, 801a5c8 <_Bfree+0x20>
 801a5be:	4b09      	ldr	r3, [pc, #36]	@ (801a5e4 <_Bfree+0x3c>)
 801a5c0:	4809      	ldr	r0, [pc, #36]	@ (801a5e8 <_Bfree+0x40>)
 801a5c2:	218f      	movs	r1, #143	@ 0x8f
 801a5c4:	f000 ff1e 	bl	801b404 <__assert_func>
 801a5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a5cc:	6006      	str	r6, [r0, #0]
 801a5ce:	60c6      	str	r6, [r0, #12]
 801a5d0:	b13c      	cbz	r4, 801a5e2 <_Bfree+0x3a>
 801a5d2:	69eb      	ldr	r3, [r5, #28]
 801a5d4:	6862      	ldr	r2, [r4, #4]
 801a5d6:	68db      	ldr	r3, [r3, #12]
 801a5d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a5dc:	6021      	str	r1, [r4, #0]
 801a5de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a5e2:	bd70      	pop	{r4, r5, r6, pc}
 801a5e4:	0801f6a1 	.word	0x0801f6a1
 801a5e8:	0801f721 	.word	0x0801f721

0801a5ec <__multadd>:
 801a5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f0:	690d      	ldr	r5, [r1, #16]
 801a5f2:	4607      	mov	r7, r0
 801a5f4:	460c      	mov	r4, r1
 801a5f6:	461e      	mov	r6, r3
 801a5f8:	f101 0c14 	add.w	ip, r1, #20
 801a5fc:	2000      	movs	r0, #0
 801a5fe:	f8dc 3000 	ldr.w	r3, [ip]
 801a602:	b299      	uxth	r1, r3
 801a604:	fb02 6101 	mla	r1, r2, r1, r6
 801a608:	0c1e      	lsrs	r6, r3, #16
 801a60a:	0c0b      	lsrs	r3, r1, #16
 801a60c:	fb02 3306 	mla	r3, r2, r6, r3
 801a610:	b289      	uxth	r1, r1
 801a612:	3001      	adds	r0, #1
 801a614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a618:	4285      	cmp	r5, r0
 801a61a:	f84c 1b04 	str.w	r1, [ip], #4
 801a61e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a622:	dcec      	bgt.n	801a5fe <__multadd+0x12>
 801a624:	b30e      	cbz	r6, 801a66a <__multadd+0x7e>
 801a626:	68a3      	ldr	r3, [r4, #8]
 801a628:	42ab      	cmp	r3, r5
 801a62a:	dc19      	bgt.n	801a660 <__multadd+0x74>
 801a62c:	6861      	ldr	r1, [r4, #4]
 801a62e:	4638      	mov	r0, r7
 801a630:	3101      	adds	r1, #1
 801a632:	f7ff ff79 	bl	801a528 <_Balloc>
 801a636:	4680      	mov	r8, r0
 801a638:	b928      	cbnz	r0, 801a646 <__multadd+0x5a>
 801a63a:	4602      	mov	r2, r0
 801a63c:	4b0c      	ldr	r3, [pc, #48]	@ (801a670 <__multadd+0x84>)
 801a63e:	480d      	ldr	r0, [pc, #52]	@ (801a674 <__multadd+0x88>)
 801a640:	21ba      	movs	r1, #186	@ 0xba
 801a642:	f000 fedf 	bl	801b404 <__assert_func>
 801a646:	6922      	ldr	r2, [r4, #16]
 801a648:	3202      	adds	r2, #2
 801a64a:	f104 010c 	add.w	r1, r4, #12
 801a64e:	0092      	lsls	r2, r2, #2
 801a650:	300c      	adds	r0, #12
 801a652:	f7ff f800 	bl	8019656 <memcpy>
 801a656:	4621      	mov	r1, r4
 801a658:	4638      	mov	r0, r7
 801a65a:	f7ff ffa5 	bl	801a5a8 <_Bfree>
 801a65e:	4644      	mov	r4, r8
 801a660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a664:	3501      	adds	r5, #1
 801a666:	615e      	str	r6, [r3, #20]
 801a668:	6125      	str	r5, [r4, #16]
 801a66a:	4620      	mov	r0, r4
 801a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a670:	0801f710 	.word	0x0801f710
 801a674:	0801f721 	.word	0x0801f721

0801a678 <__hi0bits>:
 801a678:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a67c:	4603      	mov	r3, r0
 801a67e:	bf36      	itet	cc
 801a680:	0403      	lslcc	r3, r0, #16
 801a682:	2000      	movcs	r0, #0
 801a684:	2010      	movcc	r0, #16
 801a686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a68a:	bf3c      	itt	cc
 801a68c:	021b      	lslcc	r3, r3, #8
 801a68e:	3008      	addcc	r0, #8
 801a690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a694:	bf3c      	itt	cc
 801a696:	011b      	lslcc	r3, r3, #4
 801a698:	3004      	addcc	r0, #4
 801a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a69e:	bf3c      	itt	cc
 801a6a0:	009b      	lslcc	r3, r3, #2
 801a6a2:	3002      	addcc	r0, #2
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	db05      	blt.n	801a6b4 <__hi0bits+0x3c>
 801a6a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a6ac:	f100 0001 	add.w	r0, r0, #1
 801a6b0:	bf08      	it	eq
 801a6b2:	2020      	moveq	r0, #32
 801a6b4:	4770      	bx	lr

0801a6b6 <__lo0bits>:
 801a6b6:	6803      	ldr	r3, [r0, #0]
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	f013 0007 	ands.w	r0, r3, #7
 801a6be:	d00b      	beq.n	801a6d8 <__lo0bits+0x22>
 801a6c0:	07d9      	lsls	r1, r3, #31
 801a6c2:	d421      	bmi.n	801a708 <__lo0bits+0x52>
 801a6c4:	0798      	lsls	r0, r3, #30
 801a6c6:	bf49      	itett	mi
 801a6c8:	085b      	lsrmi	r3, r3, #1
 801a6ca:	089b      	lsrpl	r3, r3, #2
 801a6cc:	2001      	movmi	r0, #1
 801a6ce:	6013      	strmi	r3, [r2, #0]
 801a6d0:	bf5c      	itt	pl
 801a6d2:	6013      	strpl	r3, [r2, #0]
 801a6d4:	2002      	movpl	r0, #2
 801a6d6:	4770      	bx	lr
 801a6d8:	b299      	uxth	r1, r3
 801a6da:	b909      	cbnz	r1, 801a6e0 <__lo0bits+0x2a>
 801a6dc:	0c1b      	lsrs	r3, r3, #16
 801a6de:	2010      	movs	r0, #16
 801a6e0:	b2d9      	uxtb	r1, r3
 801a6e2:	b909      	cbnz	r1, 801a6e8 <__lo0bits+0x32>
 801a6e4:	3008      	adds	r0, #8
 801a6e6:	0a1b      	lsrs	r3, r3, #8
 801a6e8:	0719      	lsls	r1, r3, #28
 801a6ea:	bf04      	itt	eq
 801a6ec:	091b      	lsreq	r3, r3, #4
 801a6ee:	3004      	addeq	r0, #4
 801a6f0:	0799      	lsls	r1, r3, #30
 801a6f2:	bf04      	itt	eq
 801a6f4:	089b      	lsreq	r3, r3, #2
 801a6f6:	3002      	addeq	r0, #2
 801a6f8:	07d9      	lsls	r1, r3, #31
 801a6fa:	d403      	bmi.n	801a704 <__lo0bits+0x4e>
 801a6fc:	085b      	lsrs	r3, r3, #1
 801a6fe:	f100 0001 	add.w	r0, r0, #1
 801a702:	d003      	beq.n	801a70c <__lo0bits+0x56>
 801a704:	6013      	str	r3, [r2, #0]
 801a706:	4770      	bx	lr
 801a708:	2000      	movs	r0, #0
 801a70a:	4770      	bx	lr
 801a70c:	2020      	movs	r0, #32
 801a70e:	4770      	bx	lr

0801a710 <__i2b>:
 801a710:	b510      	push	{r4, lr}
 801a712:	460c      	mov	r4, r1
 801a714:	2101      	movs	r1, #1
 801a716:	f7ff ff07 	bl	801a528 <_Balloc>
 801a71a:	4602      	mov	r2, r0
 801a71c:	b928      	cbnz	r0, 801a72a <__i2b+0x1a>
 801a71e:	4b05      	ldr	r3, [pc, #20]	@ (801a734 <__i2b+0x24>)
 801a720:	4805      	ldr	r0, [pc, #20]	@ (801a738 <__i2b+0x28>)
 801a722:	f240 1145 	movw	r1, #325	@ 0x145
 801a726:	f000 fe6d 	bl	801b404 <__assert_func>
 801a72a:	2301      	movs	r3, #1
 801a72c:	6144      	str	r4, [r0, #20]
 801a72e:	6103      	str	r3, [r0, #16]
 801a730:	bd10      	pop	{r4, pc}
 801a732:	bf00      	nop
 801a734:	0801f710 	.word	0x0801f710
 801a738:	0801f721 	.word	0x0801f721

0801a73c <__multiply>:
 801a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a740:	4617      	mov	r7, r2
 801a742:	690a      	ldr	r2, [r1, #16]
 801a744:	693b      	ldr	r3, [r7, #16]
 801a746:	429a      	cmp	r2, r3
 801a748:	bfa8      	it	ge
 801a74a:	463b      	movge	r3, r7
 801a74c:	4689      	mov	r9, r1
 801a74e:	bfa4      	itt	ge
 801a750:	460f      	movge	r7, r1
 801a752:	4699      	movge	r9, r3
 801a754:	693d      	ldr	r5, [r7, #16]
 801a756:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	6879      	ldr	r1, [r7, #4]
 801a75e:	eb05 060a 	add.w	r6, r5, sl
 801a762:	42b3      	cmp	r3, r6
 801a764:	b085      	sub	sp, #20
 801a766:	bfb8      	it	lt
 801a768:	3101      	addlt	r1, #1
 801a76a:	f7ff fedd 	bl	801a528 <_Balloc>
 801a76e:	b930      	cbnz	r0, 801a77e <__multiply+0x42>
 801a770:	4602      	mov	r2, r0
 801a772:	4b41      	ldr	r3, [pc, #260]	@ (801a878 <__multiply+0x13c>)
 801a774:	4841      	ldr	r0, [pc, #260]	@ (801a87c <__multiply+0x140>)
 801a776:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a77a:	f000 fe43 	bl	801b404 <__assert_func>
 801a77e:	f100 0414 	add.w	r4, r0, #20
 801a782:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801a786:	4623      	mov	r3, r4
 801a788:	2200      	movs	r2, #0
 801a78a:	4573      	cmp	r3, lr
 801a78c:	d320      	bcc.n	801a7d0 <__multiply+0x94>
 801a78e:	f107 0814 	add.w	r8, r7, #20
 801a792:	f109 0114 	add.w	r1, r9, #20
 801a796:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801a79a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801a79e:	9302      	str	r3, [sp, #8]
 801a7a0:	1beb      	subs	r3, r5, r7
 801a7a2:	3b15      	subs	r3, #21
 801a7a4:	f023 0303 	bic.w	r3, r3, #3
 801a7a8:	3304      	adds	r3, #4
 801a7aa:	3715      	adds	r7, #21
 801a7ac:	42bd      	cmp	r5, r7
 801a7ae:	bf38      	it	cc
 801a7b0:	2304      	movcc	r3, #4
 801a7b2:	9301      	str	r3, [sp, #4]
 801a7b4:	9b02      	ldr	r3, [sp, #8]
 801a7b6:	9103      	str	r1, [sp, #12]
 801a7b8:	428b      	cmp	r3, r1
 801a7ba:	d80c      	bhi.n	801a7d6 <__multiply+0x9a>
 801a7bc:	2e00      	cmp	r6, #0
 801a7be:	dd03      	ble.n	801a7c8 <__multiply+0x8c>
 801a7c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d055      	beq.n	801a874 <__multiply+0x138>
 801a7c8:	6106      	str	r6, [r0, #16]
 801a7ca:	b005      	add	sp, #20
 801a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7d0:	f843 2b04 	str.w	r2, [r3], #4
 801a7d4:	e7d9      	b.n	801a78a <__multiply+0x4e>
 801a7d6:	f8b1 a000 	ldrh.w	sl, [r1]
 801a7da:	f1ba 0f00 	cmp.w	sl, #0
 801a7de:	d01f      	beq.n	801a820 <__multiply+0xe4>
 801a7e0:	46c4      	mov	ip, r8
 801a7e2:	46a1      	mov	r9, r4
 801a7e4:	2700      	movs	r7, #0
 801a7e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a7ea:	f8d9 3000 	ldr.w	r3, [r9]
 801a7ee:	fa1f fb82 	uxth.w	fp, r2
 801a7f2:	b29b      	uxth	r3, r3
 801a7f4:	fb0a 330b 	mla	r3, sl, fp, r3
 801a7f8:	443b      	add	r3, r7
 801a7fa:	f8d9 7000 	ldr.w	r7, [r9]
 801a7fe:	0c12      	lsrs	r2, r2, #16
 801a800:	0c3f      	lsrs	r7, r7, #16
 801a802:	fb0a 7202 	mla	r2, sl, r2, r7
 801a806:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801a80a:	b29b      	uxth	r3, r3
 801a80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a810:	4565      	cmp	r5, ip
 801a812:	f849 3b04 	str.w	r3, [r9], #4
 801a816:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801a81a:	d8e4      	bhi.n	801a7e6 <__multiply+0xaa>
 801a81c:	9b01      	ldr	r3, [sp, #4]
 801a81e:	50e7      	str	r7, [r4, r3]
 801a820:	9b03      	ldr	r3, [sp, #12]
 801a822:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a826:	3104      	adds	r1, #4
 801a828:	f1b9 0f00 	cmp.w	r9, #0
 801a82c:	d020      	beq.n	801a870 <__multiply+0x134>
 801a82e:	6823      	ldr	r3, [r4, #0]
 801a830:	4647      	mov	r7, r8
 801a832:	46a4      	mov	ip, r4
 801a834:	f04f 0a00 	mov.w	sl, #0
 801a838:	f8b7 b000 	ldrh.w	fp, [r7]
 801a83c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801a840:	fb09 220b 	mla	r2, r9, fp, r2
 801a844:	4452      	add	r2, sl
 801a846:	b29b      	uxth	r3, r3
 801a848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a84c:	f84c 3b04 	str.w	r3, [ip], #4
 801a850:	f857 3b04 	ldr.w	r3, [r7], #4
 801a854:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a858:	f8bc 3000 	ldrh.w	r3, [ip]
 801a85c:	fb09 330a 	mla	r3, r9, sl, r3
 801a860:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801a864:	42bd      	cmp	r5, r7
 801a866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a86a:	d8e5      	bhi.n	801a838 <__multiply+0xfc>
 801a86c:	9a01      	ldr	r2, [sp, #4]
 801a86e:	50a3      	str	r3, [r4, r2]
 801a870:	3404      	adds	r4, #4
 801a872:	e79f      	b.n	801a7b4 <__multiply+0x78>
 801a874:	3e01      	subs	r6, #1
 801a876:	e7a1      	b.n	801a7bc <__multiply+0x80>
 801a878:	0801f710 	.word	0x0801f710
 801a87c:	0801f721 	.word	0x0801f721

0801a880 <__pow5mult>:
 801a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a884:	4615      	mov	r5, r2
 801a886:	f012 0203 	ands.w	r2, r2, #3
 801a88a:	4607      	mov	r7, r0
 801a88c:	460e      	mov	r6, r1
 801a88e:	d007      	beq.n	801a8a0 <__pow5mult+0x20>
 801a890:	4c25      	ldr	r4, [pc, #148]	@ (801a928 <__pow5mult+0xa8>)
 801a892:	3a01      	subs	r2, #1
 801a894:	2300      	movs	r3, #0
 801a896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a89a:	f7ff fea7 	bl	801a5ec <__multadd>
 801a89e:	4606      	mov	r6, r0
 801a8a0:	10ad      	asrs	r5, r5, #2
 801a8a2:	d03d      	beq.n	801a920 <__pow5mult+0xa0>
 801a8a4:	69fc      	ldr	r4, [r7, #28]
 801a8a6:	b97c      	cbnz	r4, 801a8c8 <__pow5mult+0x48>
 801a8a8:	2010      	movs	r0, #16
 801a8aa:	f7ff fd87 	bl	801a3bc <malloc>
 801a8ae:	4602      	mov	r2, r0
 801a8b0:	61f8      	str	r0, [r7, #28]
 801a8b2:	b928      	cbnz	r0, 801a8c0 <__pow5mult+0x40>
 801a8b4:	4b1d      	ldr	r3, [pc, #116]	@ (801a92c <__pow5mult+0xac>)
 801a8b6:	481e      	ldr	r0, [pc, #120]	@ (801a930 <__pow5mult+0xb0>)
 801a8b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a8bc:	f000 fda2 	bl	801b404 <__assert_func>
 801a8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a8c4:	6004      	str	r4, [r0, #0]
 801a8c6:	60c4      	str	r4, [r0, #12]
 801a8c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a8d0:	b94c      	cbnz	r4, 801a8e6 <__pow5mult+0x66>
 801a8d2:	f240 2171 	movw	r1, #625	@ 0x271
 801a8d6:	4638      	mov	r0, r7
 801a8d8:	f7ff ff1a 	bl	801a710 <__i2b>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	f8c8 0008 	str.w	r0, [r8, #8]
 801a8e2:	4604      	mov	r4, r0
 801a8e4:	6003      	str	r3, [r0, #0]
 801a8e6:	f04f 0900 	mov.w	r9, #0
 801a8ea:	07eb      	lsls	r3, r5, #31
 801a8ec:	d50a      	bpl.n	801a904 <__pow5mult+0x84>
 801a8ee:	4631      	mov	r1, r6
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	4638      	mov	r0, r7
 801a8f4:	f7ff ff22 	bl	801a73c <__multiply>
 801a8f8:	4631      	mov	r1, r6
 801a8fa:	4680      	mov	r8, r0
 801a8fc:	4638      	mov	r0, r7
 801a8fe:	f7ff fe53 	bl	801a5a8 <_Bfree>
 801a902:	4646      	mov	r6, r8
 801a904:	106d      	asrs	r5, r5, #1
 801a906:	d00b      	beq.n	801a920 <__pow5mult+0xa0>
 801a908:	6820      	ldr	r0, [r4, #0]
 801a90a:	b938      	cbnz	r0, 801a91c <__pow5mult+0x9c>
 801a90c:	4622      	mov	r2, r4
 801a90e:	4621      	mov	r1, r4
 801a910:	4638      	mov	r0, r7
 801a912:	f7ff ff13 	bl	801a73c <__multiply>
 801a916:	6020      	str	r0, [r4, #0]
 801a918:	f8c0 9000 	str.w	r9, [r0]
 801a91c:	4604      	mov	r4, r0
 801a91e:	e7e4      	b.n	801a8ea <__pow5mult+0x6a>
 801a920:	4630      	mov	r0, r6
 801a922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a926:	bf00      	nop
 801a928:	0801f7d4 	.word	0x0801f7d4
 801a92c:	0801f6a1 	.word	0x0801f6a1
 801a930:	0801f721 	.word	0x0801f721

0801a934 <__lshift>:
 801a934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a938:	460c      	mov	r4, r1
 801a93a:	6849      	ldr	r1, [r1, #4]
 801a93c:	6923      	ldr	r3, [r4, #16]
 801a93e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a942:	68a3      	ldr	r3, [r4, #8]
 801a944:	4607      	mov	r7, r0
 801a946:	4691      	mov	r9, r2
 801a948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a94c:	f108 0601 	add.w	r6, r8, #1
 801a950:	42b3      	cmp	r3, r6
 801a952:	db0b      	blt.n	801a96c <__lshift+0x38>
 801a954:	4638      	mov	r0, r7
 801a956:	f7ff fde7 	bl	801a528 <_Balloc>
 801a95a:	4605      	mov	r5, r0
 801a95c:	b948      	cbnz	r0, 801a972 <__lshift+0x3e>
 801a95e:	4602      	mov	r2, r0
 801a960:	4b28      	ldr	r3, [pc, #160]	@ (801aa04 <__lshift+0xd0>)
 801a962:	4829      	ldr	r0, [pc, #164]	@ (801aa08 <__lshift+0xd4>)
 801a964:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a968:	f000 fd4c 	bl	801b404 <__assert_func>
 801a96c:	3101      	adds	r1, #1
 801a96e:	005b      	lsls	r3, r3, #1
 801a970:	e7ee      	b.n	801a950 <__lshift+0x1c>
 801a972:	2300      	movs	r3, #0
 801a974:	f100 0114 	add.w	r1, r0, #20
 801a978:	f100 0210 	add.w	r2, r0, #16
 801a97c:	4618      	mov	r0, r3
 801a97e:	4553      	cmp	r3, sl
 801a980:	db33      	blt.n	801a9ea <__lshift+0xb6>
 801a982:	6920      	ldr	r0, [r4, #16]
 801a984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a988:	f104 0314 	add.w	r3, r4, #20
 801a98c:	f019 091f 	ands.w	r9, r9, #31
 801a990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a998:	d02b      	beq.n	801a9f2 <__lshift+0xbe>
 801a99a:	f1c9 0e20 	rsb	lr, r9, #32
 801a99e:	468a      	mov	sl, r1
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	6818      	ldr	r0, [r3, #0]
 801a9a4:	fa00 f009 	lsl.w	r0, r0, r9
 801a9a8:	4310      	orrs	r0, r2
 801a9aa:	f84a 0b04 	str.w	r0, [sl], #4
 801a9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9b2:	459c      	cmp	ip, r3
 801a9b4:	fa22 f20e 	lsr.w	r2, r2, lr
 801a9b8:	d8f3      	bhi.n	801a9a2 <__lshift+0x6e>
 801a9ba:	ebac 0304 	sub.w	r3, ip, r4
 801a9be:	3b15      	subs	r3, #21
 801a9c0:	f023 0303 	bic.w	r3, r3, #3
 801a9c4:	3304      	adds	r3, #4
 801a9c6:	f104 0015 	add.w	r0, r4, #21
 801a9ca:	4560      	cmp	r0, ip
 801a9cc:	bf88      	it	hi
 801a9ce:	2304      	movhi	r3, #4
 801a9d0:	50ca      	str	r2, [r1, r3]
 801a9d2:	b10a      	cbz	r2, 801a9d8 <__lshift+0xa4>
 801a9d4:	f108 0602 	add.w	r6, r8, #2
 801a9d8:	3e01      	subs	r6, #1
 801a9da:	4638      	mov	r0, r7
 801a9dc:	612e      	str	r6, [r5, #16]
 801a9de:	4621      	mov	r1, r4
 801a9e0:	f7ff fde2 	bl	801a5a8 <_Bfree>
 801a9e4:	4628      	mov	r0, r5
 801a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	e7c5      	b.n	801a97e <__lshift+0x4a>
 801a9f2:	3904      	subs	r1, #4
 801a9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 801a9fc:	459c      	cmp	ip, r3
 801a9fe:	d8f9      	bhi.n	801a9f4 <__lshift+0xc0>
 801aa00:	e7ea      	b.n	801a9d8 <__lshift+0xa4>
 801aa02:	bf00      	nop
 801aa04:	0801f710 	.word	0x0801f710
 801aa08:	0801f721 	.word	0x0801f721

0801aa0c <__mcmp>:
 801aa0c:	690a      	ldr	r2, [r1, #16]
 801aa0e:	4603      	mov	r3, r0
 801aa10:	6900      	ldr	r0, [r0, #16]
 801aa12:	1a80      	subs	r0, r0, r2
 801aa14:	b530      	push	{r4, r5, lr}
 801aa16:	d10e      	bne.n	801aa36 <__mcmp+0x2a>
 801aa18:	3314      	adds	r3, #20
 801aa1a:	3114      	adds	r1, #20
 801aa1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801aa20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801aa24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801aa28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801aa2c:	4295      	cmp	r5, r2
 801aa2e:	d003      	beq.n	801aa38 <__mcmp+0x2c>
 801aa30:	d205      	bcs.n	801aa3e <__mcmp+0x32>
 801aa32:	f04f 30ff 	mov.w	r0, #4294967295
 801aa36:	bd30      	pop	{r4, r5, pc}
 801aa38:	42a3      	cmp	r3, r4
 801aa3a:	d3f3      	bcc.n	801aa24 <__mcmp+0x18>
 801aa3c:	e7fb      	b.n	801aa36 <__mcmp+0x2a>
 801aa3e:	2001      	movs	r0, #1
 801aa40:	e7f9      	b.n	801aa36 <__mcmp+0x2a>
	...

0801aa44 <__mdiff>:
 801aa44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa48:	4689      	mov	r9, r1
 801aa4a:	4606      	mov	r6, r0
 801aa4c:	4611      	mov	r1, r2
 801aa4e:	4648      	mov	r0, r9
 801aa50:	4614      	mov	r4, r2
 801aa52:	f7ff ffdb 	bl	801aa0c <__mcmp>
 801aa56:	1e05      	subs	r5, r0, #0
 801aa58:	d112      	bne.n	801aa80 <__mdiff+0x3c>
 801aa5a:	4629      	mov	r1, r5
 801aa5c:	4630      	mov	r0, r6
 801aa5e:	f7ff fd63 	bl	801a528 <_Balloc>
 801aa62:	4602      	mov	r2, r0
 801aa64:	b928      	cbnz	r0, 801aa72 <__mdiff+0x2e>
 801aa66:	4b3f      	ldr	r3, [pc, #252]	@ (801ab64 <__mdiff+0x120>)
 801aa68:	f240 2137 	movw	r1, #567	@ 0x237
 801aa6c:	483e      	ldr	r0, [pc, #248]	@ (801ab68 <__mdiff+0x124>)
 801aa6e:	f000 fcc9 	bl	801b404 <__assert_func>
 801aa72:	2301      	movs	r3, #1
 801aa74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801aa78:	4610      	mov	r0, r2
 801aa7a:	b003      	add	sp, #12
 801aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa80:	bfbc      	itt	lt
 801aa82:	464b      	movlt	r3, r9
 801aa84:	46a1      	movlt	r9, r4
 801aa86:	4630      	mov	r0, r6
 801aa88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801aa8c:	bfba      	itte	lt
 801aa8e:	461c      	movlt	r4, r3
 801aa90:	2501      	movlt	r5, #1
 801aa92:	2500      	movge	r5, #0
 801aa94:	f7ff fd48 	bl	801a528 <_Balloc>
 801aa98:	4602      	mov	r2, r0
 801aa9a:	b918      	cbnz	r0, 801aaa4 <__mdiff+0x60>
 801aa9c:	4b31      	ldr	r3, [pc, #196]	@ (801ab64 <__mdiff+0x120>)
 801aa9e:	f240 2145 	movw	r1, #581	@ 0x245
 801aaa2:	e7e3      	b.n	801aa6c <__mdiff+0x28>
 801aaa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801aaa8:	6926      	ldr	r6, [r4, #16]
 801aaaa:	60c5      	str	r5, [r0, #12]
 801aaac:	f109 0310 	add.w	r3, r9, #16
 801aab0:	f109 0514 	add.w	r5, r9, #20
 801aab4:	f104 0e14 	add.w	lr, r4, #20
 801aab8:	f100 0b14 	add.w	fp, r0, #20
 801aabc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801aac0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801aac4:	9301      	str	r3, [sp, #4]
 801aac6:	46d9      	mov	r9, fp
 801aac8:	f04f 0c00 	mov.w	ip, #0
 801aacc:	9b01      	ldr	r3, [sp, #4]
 801aace:	f85e 0b04 	ldr.w	r0, [lr], #4
 801aad2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801aad6:	9301      	str	r3, [sp, #4]
 801aad8:	fa1f f38a 	uxth.w	r3, sl
 801aadc:	4619      	mov	r1, r3
 801aade:	b283      	uxth	r3, r0
 801aae0:	1acb      	subs	r3, r1, r3
 801aae2:	0c00      	lsrs	r0, r0, #16
 801aae4:	4463      	add	r3, ip
 801aae6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801aaea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801aaf4:	4576      	cmp	r6, lr
 801aaf6:	f849 3b04 	str.w	r3, [r9], #4
 801aafa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801aafe:	d8e5      	bhi.n	801aacc <__mdiff+0x88>
 801ab00:	1b33      	subs	r3, r6, r4
 801ab02:	3b15      	subs	r3, #21
 801ab04:	f023 0303 	bic.w	r3, r3, #3
 801ab08:	3415      	adds	r4, #21
 801ab0a:	3304      	adds	r3, #4
 801ab0c:	42a6      	cmp	r6, r4
 801ab0e:	bf38      	it	cc
 801ab10:	2304      	movcc	r3, #4
 801ab12:	441d      	add	r5, r3
 801ab14:	445b      	add	r3, fp
 801ab16:	461e      	mov	r6, r3
 801ab18:	462c      	mov	r4, r5
 801ab1a:	4544      	cmp	r4, r8
 801ab1c:	d30e      	bcc.n	801ab3c <__mdiff+0xf8>
 801ab1e:	f108 0103 	add.w	r1, r8, #3
 801ab22:	1b49      	subs	r1, r1, r5
 801ab24:	f021 0103 	bic.w	r1, r1, #3
 801ab28:	3d03      	subs	r5, #3
 801ab2a:	45a8      	cmp	r8, r5
 801ab2c:	bf38      	it	cc
 801ab2e:	2100      	movcc	r1, #0
 801ab30:	440b      	add	r3, r1
 801ab32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ab36:	b191      	cbz	r1, 801ab5e <__mdiff+0x11a>
 801ab38:	6117      	str	r7, [r2, #16]
 801ab3a:	e79d      	b.n	801aa78 <__mdiff+0x34>
 801ab3c:	f854 1b04 	ldr.w	r1, [r4], #4
 801ab40:	46e6      	mov	lr, ip
 801ab42:	0c08      	lsrs	r0, r1, #16
 801ab44:	fa1c fc81 	uxtah	ip, ip, r1
 801ab48:	4471      	add	r1, lr
 801ab4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ab4e:	b289      	uxth	r1, r1
 801ab50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ab54:	f846 1b04 	str.w	r1, [r6], #4
 801ab58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ab5c:	e7dd      	b.n	801ab1a <__mdiff+0xd6>
 801ab5e:	3f01      	subs	r7, #1
 801ab60:	e7e7      	b.n	801ab32 <__mdiff+0xee>
 801ab62:	bf00      	nop
 801ab64:	0801f710 	.word	0x0801f710
 801ab68:	0801f721 	.word	0x0801f721

0801ab6c <__d2b>:
 801ab6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ab70:	460f      	mov	r7, r1
 801ab72:	2101      	movs	r1, #1
 801ab74:	ec59 8b10 	vmov	r8, r9, d0
 801ab78:	4616      	mov	r6, r2
 801ab7a:	f7ff fcd5 	bl	801a528 <_Balloc>
 801ab7e:	4604      	mov	r4, r0
 801ab80:	b930      	cbnz	r0, 801ab90 <__d2b+0x24>
 801ab82:	4602      	mov	r2, r0
 801ab84:	4b23      	ldr	r3, [pc, #140]	@ (801ac14 <__d2b+0xa8>)
 801ab86:	4824      	ldr	r0, [pc, #144]	@ (801ac18 <__d2b+0xac>)
 801ab88:	f240 310f 	movw	r1, #783	@ 0x30f
 801ab8c:	f000 fc3a 	bl	801b404 <__assert_func>
 801ab90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ab94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ab98:	b10d      	cbz	r5, 801ab9e <__d2b+0x32>
 801ab9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ab9e:	9301      	str	r3, [sp, #4]
 801aba0:	f1b8 0300 	subs.w	r3, r8, #0
 801aba4:	d023      	beq.n	801abee <__d2b+0x82>
 801aba6:	4668      	mov	r0, sp
 801aba8:	9300      	str	r3, [sp, #0]
 801abaa:	f7ff fd84 	bl	801a6b6 <__lo0bits>
 801abae:	e9dd 1200 	ldrd	r1, r2, [sp]
 801abb2:	b1d0      	cbz	r0, 801abea <__d2b+0x7e>
 801abb4:	f1c0 0320 	rsb	r3, r0, #32
 801abb8:	fa02 f303 	lsl.w	r3, r2, r3
 801abbc:	430b      	orrs	r3, r1
 801abbe:	40c2      	lsrs	r2, r0
 801abc0:	6163      	str	r3, [r4, #20]
 801abc2:	9201      	str	r2, [sp, #4]
 801abc4:	9b01      	ldr	r3, [sp, #4]
 801abc6:	61a3      	str	r3, [r4, #24]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	bf0c      	ite	eq
 801abcc:	2201      	moveq	r2, #1
 801abce:	2202      	movne	r2, #2
 801abd0:	6122      	str	r2, [r4, #16]
 801abd2:	b1a5      	cbz	r5, 801abfe <__d2b+0x92>
 801abd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801abd8:	4405      	add	r5, r0
 801abda:	603d      	str	r5, [r7, #0]
 801abdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801abe0:	6030      	str	r0, [r6, #0]
 801abe2:	4620      	mov	r0, r4
 801abe4:	b003      	add	sp, #12
 801abe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abea:	6161      	str	r1, [r4, #20]
 801abec:	e7ea      	b.n	801abc4 <__d2b+0x58>
 801abee:	a801      	add	r0, sp, #4
 801abf0:	f7ff fd61 	bl	801a6b6 <__lo0bits>
 801abf4:	9b01      	ldr	r3, [sp, #4]
 801abf6:	6163      	str	r3, [r4, #20]
 801abf8:	3020      	adds	r0, #32
 801abfa:	2201      	movs	r2, #1
 801abfc:	e7e8      	b.n	801abd0 <__d2b+0x64>
 801abfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ac02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ac06:	6038      	str	r0, [r7, #0]
 801ac08:	6918      	ldr	r0, [r3, #16]
 801ac0a:	f7ff fd35 	bl	801a678 <__hi0bits>
 801ac0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ac12:	e7e5      	b.n	801abe0 <__d2b+0x74>
 801ac14:	0801f710 	.word	0x0801f710
 801ac18:	0801f721 	.word	0x0801f721

0801ac1c <__ssputs_r>:
 801ac1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac20:	688e      	ldr	r6, [r1, #8]
 801ac22:	461f      	mov	r7, r3
 801ac24:	42be      	cmp	r6, r7
 801ac26:	680b      	ldr	r3, [r1, #0]
 801ac28:	4682      	mov	sl, r0
 801ac2a:	460c      	mov	r4, r1
 801ac2c:	4690      	mov	r8, r2
 801ac2e:	d82d      	bhi.n	801ac8c <__ssputs_r+0x70>
 801ac30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ac38:	d026      	beq.n	801ac88 <__ssputs_r+0x6c>
 801ac3a:	6965      	ldr	r5, [r4, #20]
 801ac3c:	6909      	ldr	r1, [r1, #16]
 801ac3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac42:	eba3 0901 	sub.w	r9, r3, r1
 801ac46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ac4a:	1c7b      	adds	r3, r7, #1
 801ac4c:	444b      	add	r3, r9
 801ac4e:	106d      	asrs	r5, r5, #1
 801ac50:	429d      	cmp	r5, r3
 801ac52:	bf38      	it	cc
 801ac54:	461d      	movcc	r5, r3
 801ac56:	0553      	lsls	r3, r2, #21
 801ac58:	d527      	bpl.n	801acaa <__ssputs_r+0x8e>
 801ac5a:	4629      	mov	r1, r5
 801ac5c:	f7ff fbd8 	bl	801a410 <_malloc_r>
 801ac60:	4606      	mov	r6, r0
 801ac62:	b360      	cbz	r0, 801acbe <__ssputs_r+0xa2>
 801ac64:	6921      	ldr	r1, [r4, #16]
 801ac66:	464a      	mov	r2, r9
 801ac68:	f7fe fcf5 	bl	8019656 <memcpy>
 801ac6c:	89a3      	ldrh	r3, [r4, #12]
 801ac6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ac72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ac76:	81a3      	strh	r3, [r4, #12]
 801ac78:	6126      	str	r6, [r4, #16]
 801ac7a:	6165      	str	r5, [r4, #20]
 801ac7c:	444e      	add	r6, r9
 801ac7e:	eba5 0509 	sub.w	r5, r5, r9
 801ac82:	6026      	str	r6, [r4, #0]
 801ac84:	60a5      	str	r5, [r4, #8]
 801ac86:	463e      	mov	r6, r7
 801ac88:	42be      	cmp	r6, r7
 801ac8a:	d900      	bls.n	801ac8e <__ssputs_r+0x72>
 801ac8c:	463e      	mov	r6, r7
 801ac8e:	6820      	ldr	r0, [r4, #0]
 801ac90:	4632      	mov	r2, r6
 801ac92:	4641      	mov	r1, r8
 801ac94:	f000 fb6a 	bl	801b36c <memmove>
 801ac98:	68a3      	ldr	r3, [r4, #8]
 801ac9a:	1b9b      	subs	r3, r3, r6
 801ac9c:	60a3      	str	r3, [r4, #8]
 801ac9e:	6823      	ldr	r3, [r4, #0]
 801aca0:	4433      	add	r3, r6
 801aca2:	6023      	str	r3, [r4, #0]
 801aca4:	2000      	movs	r0, #0
 801aca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acaa:	462a      	mov	r2, r5
 801acac:	f000 fbee 	bl	801b48c <_realloc_r>
 801acb0:	4606      	mov	r6, r0
 801acb2:	2800      	cmp	r0, #0
 801acb4:	d1e0      	bne.n	801ac78 <__ssputs_r+0x5c>
 801acb6:	6921      	ldr	r1, [r4, #16]
 801acb8:	4650      	mov	r0, sl
 801acba:	f7ff fb35 	bl	801a328 <_free_r>
 801acbe:	230c      	movs	r3, #12
 801acc0:	f8ca 3000 	str.w	r3, [sl]
 801acc4:	89a3      	ldrh	r3, [r4, #12]
 801acc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801acca:	81a3      	strh	r3, [r4, #12]
 801accc:	f04f 30ff 	mov.w	r0, #4294967295
 801acd0:	e7e9      	b.n	801aca6 <__ssputs_r+0x8a>
	...

0801acd4 <_svfiprintf_r>:
 801acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acd8:	4698      	mov	r8, r3
 801acda:	898b      	ldrh	r3, [r1, #12]
 801acdc:	061b      	lsls	r3, r3, #24
 801acde:	b09d      	sub	sp, #116	@ 0x74
 801ace0:	4607      	mov	r7, r0
 801ace2:	460d      	mov	r5, r1
 801ace4:	4614      	mov	r4, r2
 801ace6:	d510      	bpl.n	801ad0a <_svfiprintf_r+0x36>
 801ace8:	690b      	ldr	r3, [r1, #16]
 801acea:	b973      	cbnz	r3, 801ad0a <_svfiprintf_r+0x36>
 801acec:	2140      	movs	r1, #64	@ 0x40
 801acee:	f7ff fb8f 	bl	801a410 <_malloc_r>
 801acf2:	6028      	str	r0, [r5, #0]
 801acf4:	6128      	str	r0, [r5, #16]
 801acf6:	b930      	cbnz	r0, 801ad06 <_svfiprintf_r+0x32>
 801acf8:	230c      	movs	r3, #12
 801acfa:	603b      	str	r3, [r7, #0]
 801acfc:	f04f 30ff 	mov.w	r0, #4294967295
 801ad00:	b01d      	add	sp, #116	@ 0x74
 801ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad06:	2340      	movs	r3, #64	@ 0x40
 801ad08:	616b      	str	r3, [r5, #20]
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad0e:	2320      	movs	r3, #32
 801ad10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ad14:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad18:	2330      	movs	r3, #48	@ 0x30
 801ad1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801aeb8 <_svfiprintf_r+0x1e4>
 801ad1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ad22:	f04f 0901 	mov.w	r9, #1
 801ad26:	4623      	mov	r3, r4
 801ad28:	469a      	mov	sl, r3
 801ad2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad2e:	b10a      	cbz	r2, 801ad34 <_svfiprintf_r+0x60>
 801ad30:	2a25      	cmp	r2, #37	@ 0x25
 801ad32:	d1f9      	bne.n	801ad28 <_svfiprintf_r+0x54>
 801ad34:	ebba 0b04 	subs.w	fp, sl, r4
 801ad38:	d00b      	beq.n	801ad52 <_svfiprintf_r+0x7e>
 801ad3a:	465b      	mov	r3, fp
 801ad3c:	4622      	mov	r2, r4
 801ad3e:	4629      	mov	r1, r5
 801ad40:	4638      	mov	r0, r7
 801ad42:	f7ff ff6b 	bl	801ac1c <__ssputs_r>
 801ad46:	3001      	adds	r0, #1
 801ad48:	f000 80a7 	beq.w	801ae9a <_svfiprintf_r+0x1c6>
 801ad4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad4e:	445a      	add	r2, fp
 801ad50:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad52:	f89a 3000 	ldrb.w	r3, [sl]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	f000 809f 	beq.w	801ae9a <_svfiprintf_r+0x1c6>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	f04f 32ff 	mov.w	r2, #4294967295
 801ad62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad66:	f10a 0a01 	add.w	sl, sl, #1
 801ad6a:	9304      	str	r3, [sp, #16]
 801ad6c:	9307      	str	r3, [sp, #28]
 801ad6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ad72:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad74:	4654      	mov	r4, sl
 801ad76:	2205      	movs	r2, #5
 801ad78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad7c:	484e      	ldr	r0, [pc, #312]	@ (801aeb8 <_svfiprintf_r+0x1e4>)
 801ad7e:	f7e5 f9ff 	bl	8000180 <memchr>
 801ad82:	9a04      	ldr	r2, [sp, #16]
 801ad84:	b9d8      	cbnz	r0, 801adbe <_svfiprintf_r+0xea>
 801ad86:	06d0      	lsls	r0, r2, #27
 801ad88:	bf44      	itt	mi
 801ad8a:	2320      	movmi	r3, #32
 801ad8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad90:	0711      	lsls	r1, r2, #28
 801ad92:	bf44      	itt	mi
 801ad94:	232b      	movmi	r3, #43	@ 0x2b
 801ad96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad9a:	f89a 3000 	ldrb.w	r3, [sl]
 801ad9e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ada0:	d015      	beq.n	801adce <_svfiprintf_r+0xfa>
 801ada2:	9a07      	ldr	r2, [sp, #28]
 801ada4:	4654      	mov	r4, sl
 801ada6:	2000      	movs	r0, #0
 801ada8:	f04f 0c0a 	mov.w	ip, #10
 801adac:	4621      	mov	r1, r4
 801adae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801adb2:	3b30      	subs	r3, #48	@ 0x30
 801adb4:	2b09      	cmp	r3, #9
 801adb6:	d94b      	bls.n	801ae50 <_svfiprintf_r+0x17c>
 801adb8:	b1b0      	cbz	r0, 801ade8 <_svfiprintf_r+0x114>
 801adba:	9207      	str	r2, [sp, #28]
 801adbc:	e014      	b.n	801ade8 <_svfiprintf_r+0x114>
 801adbe:	eba0 0308 	sub.w	r3, r0, r8
 801adc2:	fa09 f303 	lsl.w	r3, r9, r3
 801adc6:	4313      	orrs	r3, r2
 801adc8:	9304      	str	r3, [sp, #16]
 801adca:	46a2      	mov	sl, r4
 801adcc:	e7d2      	b.n	801ad74 <_svfiprintf_r+0xa0>
 801adce:	9b03      	ldr	r3, [sp, #12]
 801add0:	1d19      	adds	r1, r3, #4
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	9103      	str	r1, [sp, #12]
 801add6:	2b00      	cmp	r3, #0
 801add8:	bfbb      	ittet	lt
 801adda:	425b      	neglt	r3, r3
 801addc:	f042 0202 	orrlt.w	r2, r2, #2
 801ade0:	9307      	strge	r3, [sp, #28]
 801ade2:	9307      	strlt	r3, [sp, #28]
 801ade4:	bfb8      	it	lt
 801ade6:	9204      	strlt	r2, [sp, #16]
 801ade8:	7823      	ldrb	r3, [r4, #0]
 801adea:	2b2e      	cmp	r3, #46	@ 0x2e
 801adec:	d10a      	bne.n	801ae04 <_svfiprintf_r+0x130>
 801adee:	7863      	ldrb	r3, [r4, #1]
 801adf0:	2b2a      	cmp	r3, #42	@ 0x2a
 801adf2:	d132      	bne.n	801ae5a <_svfiprintf_r+0x186>
 801adf4:	9b03      	ldr	r3, [sp, #12]
 801adf6:	1d1a      	adds	r2, r3, #4
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	9203      	str	r2, [sp, #12]
 801adfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ae00:	3402      	adds	r4, #2
 801ae02:	9305      	str	r3, [sp, #20]
 801ae04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801aec8 <_svfiprintf_r+0x1f4>
 801ae08:	7821      	ldrb	r1, [r4, #0]
 801ae0a:	2203      	movs	r2, #3
 801ae0c:	4650      	mov	r0, sl
 801ae0e:	f7e5 f9b7 	bl	8000180 <memchr>
 801ae12:	b138      	cbz	r0, 801ae24 <_svfiprintf_r+0x150>
 801ae14:	9b04      	ldr	r3, [sp, #16]
 801ae16:	eba0 000a 	sub.w	r0, r0, sl
 801ae1a:	2240      	movs	r2, #64	@ 0x40
 801ae1c:	4082      	lsls	r2, r0
 801ae1e:	4313      	orrs	r3, r2
 801ae20:	3401      	adds	r4, #1
 801ae22:	9304      	str	r3, [sp, #16]
 801ae24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae28:	4824      	ldr	r0, [pc, #144]	@ (801aebc <_svfiprintf_r+0x1e8>)
 801ae2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ae2e:	2206      	movs	r2, #6
 801ae30:	f7e5 f9a6 	bl	8000180 <memchr>
 801ae34:	2800      	cmp	r0, #0
 801ae36:	d036      	beq.n	801aea6 <_svfiprintf_r+0x1d2>
 801ae38:	4b21      	ldr	r3, [pc, #132]	@ (801aec0 <_svfiprintf_r+0x1ec>)
 801ae3a:	bb1b      	cbnz	r3, 801ae84 <_svfiprintf_r+0x1b0>
 801ae3c:	9b03      	ldr	r3, [sp, #12]
 801ae3e:	3307      	adds	r3, #7
 801ae40:	f023 0307 	bic.w	r3, r3, #7
 801ae44:	3308      	adds	r3, #8
 801ae46:	9303      	str	r3, [sp, #12]
 801ae48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae4a:	4433      	add	r3, r6
 801ae4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae4e:	e76a      	b.n	801ad26 <_svfiprintf_r+0x52>
 801ae50:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae54:	460c      	mov	r4, r1
 801ae56:	2001      	movs	r0, #1
 801ae58:	e7a8      	b.n	801adac <_svfiprintf_r+0xd8>
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	3401      	adds	r4, #1
 801ae5e:	9305      	str	r3, [sp, #20]
 801ae60:	4619      	mov	r1, r3
 801ae62:	f04f 0c0a 	mov.w	ip, #10
 801ae66:	4620      	mov	r0, r4
 801ae68:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae6c:	3a30      	subs	r2, #48	@ 0x30
 801ae6e:	2a09      	cmp	r2, #9
 801ae70:	d903      	bls.n	801ae7a <_svfiprintf_r+0x1a6>
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d0c6      	beq.n	801ae04 <_svfiprintf_r+0x130>
 801ae76:	9105      	str	r1, [sp, #20]
 801ae78:	e7c4      	b.n	801ae04 <_svfiprintf_r+0x130>
 801ae7a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae7e:	4604      	mov	r4, r0
 801ae80:	2301      	movs	r3, #1
 801ae82:	e7f0      	b.n	801ae66 <_svfiprintf_r+0x192>
 801ae84:	ab03      	add	r3, sp, #12
 801ae86:	9300      	str	r3, [sp, #0]
 801ae88:	462a      	mov	r2, r5
 801ae8a:	4b0e      	ldr	r3, [pc, #56]	@ (801aec4 <_svfiprintf_r+0x1f0>)
 801ae8c:	a904      	add	r1, sp, #16
 801ae8e:	4638      	mov	r0, r7
 801ae90:	f7fd fd22 	bl	80188d8 <_printf_float>
 801ae94:	1c42      	adds	r2, r0, #1
 801ae96:	4606      	mov	r6, r0
 801ae98:	d1d6      	bne.n	801ae48 <_svfiprintf_r+0x174>
 801ae9a:	89ab      	ldrh	r3, [r5, #12]
 801ae9c:	065b      	lsls	r3, r3, #25
 801ae9e:	f53f af2d 	bmi.w	801acfc <_svfiprintf_r+0x28>
 801aea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aea4:	e72c      	b.n	801ad00 <_svfiprintf_r+0x2c>
 801aea6:	ab03      	add	r3, sp, #12
 801aea8:	9300      	str	r3, [sp, #0]
 801aeaa:	462a      	mov	r2, r5
 801aeac:	4b05      	ldr	r3, [pc, #20]	@ (801aec4 <_svfiprintf_r+0x1f0>)
 801aeae:	a904      	add	r1, sp, #16
 801aeb0:	4638      	mov	r0, r7
 801aeb2:	f7fd ffa9 	bl	8018e08 <_printf_i>
 801aeb6:	e7ed      	b.n	801ae94 <_svfiprintf_r+0x1c0>
 801aeb8:	0801f77a 	.word	0x0801f77a
 801aebc:	0801f784 	.word	0x0801f784
 801aec0:	080188d9 	.word	0x080188d9
 801aec4:	0801ac1d 	.word	0x0801ac1d
 801aec8:	0801f780 	.word	0x0801f780

0801aecc <__sfputc_r>:
 801aecc:	6893      	ldr	r3, [r2, #8]
 801aece:	3b01      	subs	r3, #1
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	b410      	push	{r4}
 801aed4:	6093      	str	r3, [r2, #8]
 801aed6:	da08      	bge.n	801aeea <__sfputc_r+0x1e>
 801aed8:	6994      	ldr	r4, [r2, #24]
 801aeda:	42a3      	cmp	r3, r4
 801aedc:	db01      	blt.n	801aee2 <__sfputc_r+0x16>
 801aede:	290a      	cmp	r1, #10
 801aee0:	d103      	bne.n	801aeea <__sfputc_r+0x1e>
 801aee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aee6:	f7fe ba44 	b.w	8019372 <__swbuf_r>
 801aeea:	6813      	ldr	r3, [r2, #0]
 801aeec:	1c58      	adds	r0, r3, #1
 801aeee:	6010      	str	r0, [r2, #0]
 801aef0:	7019      	strb	r1, [r3, #0]
 801aef2:	4608      	mov	r0, r1
 801aef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aef8:	4770      	bx	lr

0801aefa <__sfputs_r>:
 801aefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aefc:	4606      	mov	r6, r0
 801aefe:	460f      	mov	r7, r1
 801af00:	4614      	mov	r4, r2
 801af02:	18d5      	adds	r5, r2, r3
 801af04:	42ac      	cmp	r4, r5
 801af06:	d101      	bne.n	801af0c <__sfputs_r+0x12>
 801af08:	2000      	movs	r0, #0
 801af0a:	e007      	b.n	801af1c <__sfputs_r+0x22>
 801af0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af10:	463a      	mov	r2, r7
 801af12:	4630      	mov	r0, r6
 801af14:	f7ff ffda 	bl	801aecc <__sfputc_r>
 801af18:	1c43      	adds	r3, r0, #1
 801af1a:	d1f3      	bne.n	801af04 <__sfputs_r+0xa>
 801af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801af20 <_vfiprintf_r>:
 801af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	460d      	mov	r5, r1
 801af26:	b09d      	sub	sp, #116	@ 0x74
 801af28:	4614      	mov	r4, r2
 801af2a:	4698      	mov	r8, r3
 801af2c:	4606      	mov	r6, r0
 801af2e:	b118      	cbz	r0, 801af38 <_vfiprintf_r+0x18>
 801af30:	6a03      	ldr	r3, [r0, #32]
 801af32:	b90b      	cbnz	r3, 801af38 <_vfiprintf_r+0x18>
 801af34:	f7fe f912 	bl	801915c <__sinit>
 801af38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af3a:	07d9      	lsls	r1, r3, #31
 801af3c:	d405      	bmi.n	801af4a <_vfiprintf_r+0x2a>
 801af3e:	89ab      	ldrh	r3, [r5, #12]
 801af40:	059a      	lsls	r2, r3, #22
 801af42:	d402      	bmi.n	801af4a <_vfiprintf_r+0x2a>
 801af44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801af46:	f7fe fb84 	bl	8019652 <__retarget_lock_acquire_recursive>
 801af4a:	89ab      	ldrh	r3, [r5, #12]
 801af4c:	071b      	lsls	r3, r3, #28
 801af4e:	d501      	bpl.n	801af54 <_vfiprintf_r+0x34>
 801af50:	692b      	ldr	r3, [r5, #16]
 801af52:	b99b      	cbnz	r3, 801af7c <_vfiprintf_r+0x5c>
 801af54:	4629      	mov	r1, r5
 801af56:	4630      	mov	r0, r6
 801af58:	f7fe fa4a 	bl	80193f0 <__swsetup_r>
 801af5c:	b170      	cbz	r0, 801af7c <_vfiprintf_r+0x5c>
 801af5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801af60:	07dc      	lsls	r4, r3, #31
 801af62:	d504      	bpl.n	801af6e <_vfiprintf_r+0x4e>
 801af64:	f04f 30ff 	mov.w	r0, #4294967295
 801af68:	b01d      	add	sp, #116	@ 0x74
 801af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af6e:	89ab      	ldrh	r3, [r5, #12]
 801af70:	0598      	lsls	r0, r3, #22
 801af72:	d4f7      	bmi.n	801af64 <_vfiprintf_r+0x44>
 801af74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801af76:	f7fe fb6d 	bl	8019654 <__retarget_lock_release_recursive>
 801af7a:	e7f3      	b.n	801af64 <_vfiprintf_r+0x44>
 801af7c:	2300      	movs	r3, #0
 801af7e:	9309      	str	r3, [sp, #36]	@ 0x24
 801af80:	2320      	movs	r3, #32
 801af82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801af86:	f8cd 800c 	str.w	r8, [sp, #12]
 801af8a:	2330      	movs	r3, #48	@ 0x30
 801af8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b13c <_vfiprintf_r+0x21c>
 801af90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801af94:	f04f 0901 	mov.w	r9, #1
 801af98:	4623      	mov	r3, r4
 801af9a:	469a      	mov	sl, r3
 801af9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afa0:	b10a      	cbz	r2, 801afa6 <_vfiprintf_r+0x86>
 801afa2:	2a25      	cmp	r2, #37	@ 0x25
 801afa4:	d1f9      	bne.n	801af9a <_vfiprintf_r+0x7a>
 801afa6:	ebba 0b04 	subs.w	fp, sl, r4
 801afaa:	d00b      	beq.n	801afc4 <_vfiprintf_r+0xa4>
 801afac:	465b      	mov	r3, fp
 801afae:	4622      	mov	r2, r4
 801afb0:	4629      	mov	r1, r5
 801afb2:	4630      	mov	r0, r6
 801afb4:	f7ff ffa1 	bl	801aefa <__sfputs_r>
 801afb8:	3001      	adds	r0, #1
 801afba:	f000 80a7 	beq.w	801b10c <_vfiprintf_r+0x1ec>
 801afbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afc0:	445a      	add	r2, fp
 801afc2:	9209      	str	r2, [sp, #36]	@ 0x24
 801afc4:	f89a 3000 	ldrb.w	r3, [sl]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	f000 809f 	beq.w	801b10c <_vfiprintf_r+0x1ec>
 801afce:	2300      	movs	r3, #0
 801afd0:	f04f 32ff 	mov.w	r2, #4294967295
 801afd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afd8:	f10a 0a01 	add.w	sl, sl, #1
 801afdc:	9304      	str	r3, [sp, #16]
 801afde:	9307      	str	r3, [sp, #28]
 801afe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801afe4:	931a      	str	r3, [sp, #104]	@ 0x68
 801afe6:	4654      	mov	r4, sl
 801afe8:	2205      	movs	r2, #5
 801afea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afee:	4853      	ldr	r0, [pc, #332]	@ (801b13c <_vfiprintf_r+0x21c>)
 801aff0:	f7e5 f8c6 	bl	8000180 <memchr>
 801aff4:	9a04      	ldr	r2, [sp, #16]
 801aff6:	b9d8      	cbnz	r0, 801b030 <_vfiprintf_r+0x110>
 801aff8:	06d1      	lsls	r1, r2, #27
 801affa:	bf44      	itt	mi
 801affc:	2320      	movmi	r3, #32
 801affe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b002:	0713      	lsls	r3, r2, #28
 801b004:	bf44      	itt	mi
 801b006:	232b      	movmi	r3, #43	@ 0x2b
 801b008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b00c:	f89a 3000 	ldrb.w	r3, [sl]
 801b010:	2b2a      	cmp	r3, #42	@ 0x2a
 801b012:	d015      	beq.n	801b040 <_vfiprintf_r+0x120>
 801b014:	9a07      	ldr	r2, [sp, #28]
 801b016:	4654      	mov	r4, sl
 801b018:	2000      	movs	r0, #0
 801b01a:	f04f 0c0a 	mov.w	ip, #10
 801b01e:	4621      	mov	r1, r4
 801b020:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b024:	3b30      	subs	r3, #48	@ 0x30
 801b026:	2b09      	cmp	r3, #9
 801b028:	d94b      	bls.n	801b0c2 <_vfiprintf_r+0x1a2>
 801b02a:	b1b0      	cbz	r0, 801b05a <_vfiprintf_r+0x13a>
 801b02c:	9207      	str	r2, [sp, #28]
 801b02e:	e014      	b.n	801b05a <_vfiprintf_r+0x13a>
 801b030:	eba0 0308 	sub.w	r3, r0, r8
 801b034:	fa09 f303 	lsl.w	r3, r9, r3
 801b038:	4313      	orrs	r3, r2
 801b03a:	9304      	str	r3, [sp, #16]
 801b03c:	46a2      	mov	sl, r4
 801b03e:	e7d2      	b.n	801afe6 <_vfiprintf_r+0xc6>
 801b040:	9b03      	ldr	r3, [sp, #12]
 801b042:	1d19      	adds	r1, r3, #4
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	9103      	str	r1, [sp, #12]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	bfbb      	ittet	lt
 801b04c:	425b      	neglt	r3, r3
 801b04e:	f042 0202 	orrlt.w	r2, r2, #2
 801b052:	9307      	strge	r3, [sp, #28]
 801b054:	9307      	strlt	r3, [sp, #28]
 801b056:	bfb8      	it	lt
 801b058:	9204      	strlt	r2, [sp, #16]
 801b05a:	7823      	ldrb	r3, [r4, #0]
 801b05c:	2b2e      	cmp	r3, #46	@ 0x2e
 801b05e:	d10a      	bne.n	801b076 <_vfiprintf_r+0x156>
 801b060:	7863      	ldrb	r3, [r4, #1]
 801b062:	2b2a      	cmp	r3, #42	@ 0x2a
 801b064:	d132      	bne.n	801b0cc <_vfiprintf_r+0x1ac>
 801b066:	9b03      	ldr	r3, [sp, #12]
 801b068:	1d1a      	adds	r2, r3, #4
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	9203      	str	r2, [sp, #12]
 801b06e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b072:	3402      	adds	r4, #2
 801b074:	9305      	str	r3, [sp, #20]
 801b076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b14c <_vfiprintf_r+0x22c>
 801b07a:	7821      	ldrb	r1, [r4, #0]
 801b07c:	2203      	movs	r2, #3
 801b07e:	4650      	mov	r0, sl
 801b080:	f7e5 f87e 	bl	8000180 <memchr>
 801b084:	b138      	cbz	r0, 801b096 <_vfiprintf_r+0x176>
 801b086:	9b04      	ldr	r3, [sp, #16]
 801b088:	eba0 000a 	sub.w	r0, r0, sl
 801b08c:	2240      	movs	r2, #64	@ 0x40
 801b08e:	4082      	lsls	r2, r0
 801b090:	4313      	orrs	r3, r2
 801b092:	3401      	adds	r4, #1
 801b094:	9304      	str	r3, [sp, #16]
 801b096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b09a:	4829      	ldr	r0, [pc, #164]	@ (801b140 <_vfiprintf_r+0x220>)
 801b09c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b0a0:	2206      	movs	r2, #6
 801b0a2:	f7e5 f86d 	bl	8000180 <memchr>
 801b0a6:	2800      	cmp	r0, #0
 801b0a8:	d03f      	beq.n	801b12a <_vfiprintf_r+0x20a>
 801b0aa:	4b26      	ldr	r3, [pc, #152]	@ (801b144 <_vfiprintf_r+0x224>)
 801b0ac:	bb1b      	cbnz	r3, 801b0f6 <_vfiprintf_r+0x1d6>
 801b0ae:	9b03      	ldr	r3, [sp, #12]
 801b0b0:	3307      	adds	r3, #7
 801b0b2:	f023 0307 	bic.w	r3, r3, #7
 801b0b6:	3308      	adds	r3, #8
 801b0b8:	9303      	str	r3, [sp, #12]
 801b0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0bc:	443b      	add	r3, r7
 801b0be:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0c0:	e76a      	b.n	801af98 <_vfiprintf_r+0x78>
 801b0c2:	fb0c 3202 	mla	r2, ip, r2, r3
 801b0c6:	460c      	mov	r4, r1
 801b0c8:	2001      	movs	r0, #1
 801b0ca:	e7a8      	b.n	801b01e <_vfiprintf_r+0xfe>
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	3401      	adds	r4, #1
 801b0d0:	9305      	str	r3, [sp, #20]
 801b0d2:	4619      	mov	r1, r3
 801b0d4:	f04f 0c0a 	mov.w	ip, #10
 801b0d8:	4620      	mov	r0, r4
 801b0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0de:	3a30      	subs	r2, #48	@ 0x30
 801b0e0:	2a09      	cmp	r2, #9
 801b0e2:	d903      	bls.n	801b0ec <_vfiprintf_r+0x1cc>
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d0c6      	beq.n	801b076 <_vfiprintf_r+0x156>
 801b0e8:	9105      	str	r1, [sp, #20]
 801b0ea:	e7c4      	b.n	801b076 <_vfiprintf_r+0x156>
 801b0ec:	fb0c 2101 	mla	r1, ip, r1, r2
 801b0f0:	4604      	mov	r4, r0
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	e7f0      	b.n	801b0d8 <_vfiprintf_r+0x1b8>
 801b0f6:	ab03      	add	r3, sp, #12
 801b0f8:	9300      	str	r3, [sp, #0]
 801b0fa:	462a      	mov	r2, r5
 801b0fc:	4b12      	ldr	r3, [pc, #72]	@ (801b148 <_vfiprintf_r+0x228>)
 801b0fe:	a904      	add	r1, sp, #16
 801b100:	4630      	mov	r0, r6
 801b102:	f7fd fbe9 	bl	80188d8 <_printf_float>
 801b106:	4607      	mov	r7, r0
 801b108:	1c78      	adds	r0, r7, #1
 801b10a:	d1d6      	bne.n	801b0ba <_vfiprintf_r+0x19a>
 801b10c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b10e:	07d9      	lsls	r1, r3, #31
 801b110:	d405      	bmi.n	801b11e <_vfiprintf_r+0x1fe>
 801b112:	89ab      	ldrh	r3, [r5, #12]
 801b114:	059a      	lsls	r2, r3, #22
 801b116:	d402      	bmi.n	801b11e <_vfiprintf_r+0x1fe>
 801b118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b11a:	f7fe fa9b 	bl	8019654 <__retarget_lock_release_recursive>
 801b11e:	89ab      	ldrh	r3, [r5, #12]
 801b120:	065b      	lsls	r3, r3, #25
 801b122:	f53f af1f 	bmi.w	801af64 <_vfiprintf_r+0x44>
 801b126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b128:	e71e      	b.n	801af68 <_vfiprintf_r+0x48>
 801b12a:	ab03      	add	r3, sp, #12
 801b12c:	9300      	str	r3, [sp, #0]
 801b12e:	462a      	mov	r2, r5
 801b130:	4b05      	ldr	r3, [pc, #20]	@ (801b148 <_vfiprintf_r+0x228>)
 801b132:	a904      	add	r1, sp, #16
 801b134:	4630      	mov	r0, r6
 801b136:	f7fd fe67 	bl	8018e08 <_printf_i>
 801b13a:	e7e4      	b.n	801b106 <_vfiprintf_r+0x1e6>
 801b13c:	0801f77a 	.word	0x0801f77a
 801b140:	0801f784 	.word	0x0801f784
 801b144:	080188d9 	.word	0x080188d9
 801b148:	0801aefb 	.word	0x0801aefb
 801b14c:	0801f780 	.word	0x0801f780

0801b150 <__sflush_r>:
 801b150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b158:	0716      	lsls	r6, r2, #28
 801b15a:	4605      	mov	r5, r0
 801b15c:	460c      	mov	r4, r1
 801b15e:	d454      	bmi.n	801b20a <__sflush_r+0xba>
 801b160:	684b      	ldr	r3, [r1, #4]
 801b162:	2b00      	cmp	r3, #0
 801b164:	dc02      	bgt.n	801b16c <__sflush_r+0x1c>
 801b166:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b168:	2b00      	cmp	r3, #0
 801b16a:	dd48      	ble.n	801b1fe <__sflush_r+0xae>
 801b16c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b16e:	2e00      	cmp	r6, #0
 801b170:	d045      	beq.n	801b1fe <__sflush_r+0xae>
 801b172:	2300      	movs	r3, #0
 801b174:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b178:	682f      	ldr	r7, [r5, #0]
 801b17a:	6a21      	ldr	r1, [r4, #32]
 801b17c:	602b      	str	r3, [r5, #0]
 801b17e:	d030      	beq.n	801b1e2 <__sflush_r+0x92>
 801b180:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b182:	89a3      	ldrh	r3, [r4, #12]
 801b184:	0759      	lsls	r1, r3, #29
 801b186:	d505      	bpl.n	801b194 <__sflush_r+0x44>
 801b188:	6863      	ldr	r3, [r4, #4]
 801b18a:	1ad2      	subs	r2, r2, r3
 801b18c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b18e:	b10b      	cbz	r3, 801b194 <__sflush_r+0x44>
 801b190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b192:	1ad2      	subs	r2, r2, r3
 801b194:	2300      	movs	r3, #0
 801b196:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b198:	6a21      	ldr	r1, [r4, #32]
 801b19a:	4628      	mov	r0, r5
 801b19c:	47b0      	blx	r6
 801b19e:	1c43      	adds	r3, r0, #1
 801b1a0:	89a3      	ldrh	r3, [r4, #12]
 801b1a2:	d106      	bne.n	801b1b2 <__sflush_r+0x62>
 801b1a4:	6829      	ldr	r1, [r5, #0]
 801b1a6:	291d      	cmp	r1, #29
 801b1a8:	d82b      	bhi.n	801b202 <__sflush_r+0xb2>
 801b1aa:	4a2a      	ldr	r2, [pc, #168]	@ (801b254 <__sflush_r+0x104>)
 801b1ac:	40ca      	lsrs	r2, r1
 801b1ae:	07d6      	lsls	r6, r2, #31
 801b1b0:	d527      	bpl.n	801b202 <__sflush_r+0xb2>
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	6062      	str	r2, [r4, #4]
 801b1b6:	04d9      	lsls	r1, r3, #19
 801b1b8:	6922      	ldr	r2, [r4, #16]
 801b1ba:	6022      	str	r2, [r4, #0]
 801b1bc:	d504      	bpl.n	801b1c8 <__sflush_r+0x78>
 801b1be:	1c42      	adds	r2, r0, #1
 801b1c0:	d101      	bne.n	801b1c6 <__sflush_r+0x76>
 801b1c2:	682b      	ldr	r3, [r5, #0]
 801b1c4:	b903      	cbnz	r3, 801b1c8 <__sflush_r+0x78>
 801b1c6:	6560      	str	r0, [r4, #84]	@ 0x54
 801b1c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b1ca:	602f      	str	r7, [r5, #0]
 801b1cc:	b1b9      	cbz	r1, 801b1fe <__sflush_r+0xae>
 801b1ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b1d2:	4299      	cmp	r1, r3
 801b1d4:	d002      	beq.n	801b1dc <__sflush_r+0x8c>
 801b1d6:	4628      	mov	r0, r5
 801b1d8:	f7ff f8a6 	bl	801a328 <_free_r>
 801b1dc:	2300      	movs	r3, #0
 801b1de:	6363      	str	r3, [r4, #52]	@ 0x34
 801b1e0:	e00d      	b.n	801b1fe <__sflush_r+0xae>
 801b1e2:	2301      	movs	r3, #1
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	47b0      	blx	r6
 801b1e8:	4602      	mov	r2, r0
 801b1ea:	1c50      	adds	r0, r2, #1
 801b1ec:	d1c9      	bne.n	801b182 <__sflush_r+0x32>
 801b1ee:	682b      	ldr	r3, [r5, #0]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d0c6      	beq.n	801b182 <__sflush_r+0x32>
 801b1f4:	2b1d      	cmp	r3, #29
 801b1f6:	d001      	beq.n	801b1fc <__sflush_r+0xac>
 801b1f8:	2b16      	cmp	r3, #22
 801b1fa:	d11e      	bne.n	801b23a <__sflush_r+0xea>
 801b1fc:	602f      	str	r7, [r5, #0]
 801b1fe:	2000      	movs	r0, #0
 801b200:	e022      	b.n	801b248 <__sflush_r+0xf8>
 801b202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b206:	b21b      	sxth	r3, r3
 801b208:	e01b      	b.n	801b242 <__sflush_r+0xf2>
 801b20a:	690f      	ldr	r7, [r1, #16]
 801b20c:	2f00      	cmp	r7, #0
 801b20e:	d0f6      	beq.n	801b1fe <__sflush_r+0xae>
 801b210:	0793      	lsls	r3, r2, #30
 801b212:	680e      	ldr	r6, [r1, #0]
 801b214:	bf08      	it	eq
 801b216:	694b      	ldreq	r3, [r1, #20]
 801b218:	600f      	str	r7, [r1, #0]
 801b21a:	bf18      	it	ne
 801b21c:	2300      	movne	r3, #0
 801b21e:	eba6 0807 	sub.w	r8, r6, r7
 801b222:	608b      	str	r3, [r1, #8]
 801b224:	f1b8 0f00 	cmp.w	r8, #0
 801b228:	dde9      	ble.n	801b1fe <__sflush_r+0xae>
 801b22a:	6a21      	ldr	r1, [r4, #32]
 801b22c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b22e:	4643      	mov	r3, r8
 801b230:	463a      	mov	r2, r7
 801b232:	4628      	mov	r0, r5
 801b234:	47b0      	blx	r6
 801b236:	2800      	cmp	r0, #0
 801b238:	dc08      	bgt.n	801b24c <__sflush_r+0xfc>
 801b23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b242:	81a3      	strh	r3, [r4, #12]
 801b244:	f04f 30ff 	mov.w	r0, #4294967295
 801b248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b24c:	4407      	add	r7, r0
 801b24e:	eba8 0800 	sub.w	r8, r8, r0
 801b252:	e7e7      	b.n	801b224 <__sflush_r+0xd4>
 801b254:	20400001 	.word	0x20400001

0801b258 <_fflush_r>:
 801b258:	b538      	push	{r3, r4, r5, lr}
 801b25a:	690b      	ldr	r3, [r1, #16]
 801b25c:	4605      	mov	r5, r0
 801b25e:	460c      	mov	r4, r1
 801b260:	b913      	cbnz	r3, 801b268 <_fflush_r+0x10>
 801b262:	2500      	movs	r5, #0
 801b264:	4628      	mov	r0, r5
 801b266:	bd38      	pop	{r3, r4, r5, pc}
 801b268:	b118      	cbz	r0, 801b272 <_fflush_r+0x1a>
 801b26a:	6a03      	ldr	r3, [r0, #32]
 801b26c:	b90b      	cbnz	r3, 801b272 <_fflush_r+0x1a>
 801b26e:	f7fd ff75 	bl	801915c <__sinit>
 801b272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d0f3      	beq.n	801b262 <_fflush_r+0xa>
 801b27a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b27c:	07d0      	lsls	r0, r2, #31
 801b27e:	d404      	bmi.n	801b28a <_fflush_r+0x32>
 801b280:	0599      	lsls	r1, r3, #22
 801b282:	d402      	bmi.n	801b28a <_fflush_r+0x32>
 801b284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b286:	f7fe f9e4 	bl	8019652 <__retarget_lock_acquire_recursive>
 801b28a:	4628      	mov	r0, r5
 801b28c:	4621      	mov	r1, r4
 801b28e:	f7ff ff5f 	bl	801b150 <__sflush_r>
 801b292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b294:	07da      	lsls	r2, r3, #31
 801b296:	4605      	mov	r5, r0
 801b298:	d4e4      	bmi.n	801b264 <_fflush_r+0xc>
 801b29a:	89a3      	ldrh	r3, [r4, #12]
 801b29c:	059b      	lsls	r3, r3, #22
 801b29e:	d4e1      	bmi.n	801b264 <_fflush_r+0xc>
 801b2a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b2a2:	f7fe f9d7 	bl	8019654 <__retarget_lock_release_recursive>
 801b2a6:	e7dd      	b.n	801b264 <_fflush_r+0xc>

0801b2a8 <__swhatbuf_r>:
 801b2a8:	b570      	push	{r4, r5, r6, lr}
 801b2aa:	460c      	mov	r4, r1
 801b2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2b0:	2900      	cmp	r1, #0
 801b2b2:	b096      	sub	sp, #88	@ 0x58
 801b2b4:	4615      	mov	r5, r2
 801b2b6:	461e      	mov	r6, r3
 801b2b8:	da0d      	bge.n	801b2d6 <__swhatbuf_r+0x2e>
 801b2ba:	89a3      	ldrh	r3, [r4, #12]
 801b2bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b2c0:	f04f 0100 	mov.w	r1, #0
 801b2c4:	bf14      	ite	ne
 801b2c6:	2340      	movne	r3, #64	@ 0x40
 801b2c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b2cc:	2000      	movs	r0, #0
 801b2ce:	6031      	str	r1, [r6, #0]
 801b2d0:	602b      	str	r3, [r5, #0]
 801b2d2:	b016      	add	sp, #88	@ 0x58
 801b2d4:	bd70      	pop	{r4, r5, r6, pc}
 801b2d6:	466a      	mov	r2, sp
 801b2d8:	f000 f862 	bl	801b3a0 <_fstat_r>
 801b2dc:	2800      	cmp	r0, #0
 801b2de:	dbec      	blt.n	801b2ba <__swhatbuf_r+0x12>
 801b2e0:	9901      	ldr	r1, [sp, #4]
 801b2e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b2e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b2ea:	4259      	negs	r1, r3
 801b2ec:	4159      	adcs	r1, r3
 801b2ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b2f2:	e7eb      	b.n	801b2cc <__swhatbuf_r+0x24>

0801b2f4 <__smakebuf_r>:
 801b2f4:	898b      	ldrh	r3, [r1, #12]
 801b2f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b2f8:	079d      	lsls	r5, r3, #30
 801b2fa:	4606      	mov	r6, r0
 801b2fc:	460c      	mov	r4, r1
 801b2fe:	d507      	bpl.n	801b310 <__smakebuf_r+0x1c>
 801b300:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b304:	6023      	str	r3, [r4, #0]
 801b306:	6123      	str	r3, [r4, #16]
 801b308:	2301      	movs	r3, #1
 801b30a:	6163      	str	r3, [r4, #20]
 801b30c:	b003      	add	sp, #12
 801b30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b310:	ab01      	add	r3, sp, #4
 801b312:	466a      	mov	r2, sp
 801b314:	f7ff ffc8 	bl	801b2a8 <__swhatbuf_r>
 801b318:	9f00      	ldr	r7, [sp, #0]
 801b31a:	4605      	mov	r5, r0
 801b31c:	4639      	mov	r1, r7
 801b31e:	4630      	mov	r0, r6
 801b320:	f7ff f876 	bl	801a410 <_malloc_r>
 801b324:	b948      	cbnz	r0, 801b33a <__smakebuf_r+0x46>
 801b326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b32a:	059a      	lsls	r2, r3, #22
 801b32c:	d4ee      	bmi.n	801b30c <__smakebuf_r+0x18>
 801b32e:	f023 0303 	bic.w	r3, r3, #3
 801b332:	f043 0302 	orr.w	r3, r3, #2
 801b336:	81a3      	strh	r3, [r4, #12]
 801b338:	e7e2      	b.n	801b300 <__smakebuf_r+0xc>
 801b33a:	89a3      	ldrh	r3, [r4, #12]
 801b33c:	6020      	str	r0, [r4, #0]
 801b33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b342:	81a3      	strh	r3, [r4, #12]
 801b344:	9b01      	ldr	r3, [sp, #4]
 801b346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b34a:	b15b      	cbz	r3, 801b364 <__smakebuf_r+0x70>
 801b34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b350:	4630      	mov	r0, r6
 801b352:	f000 f837 	bl	801b3c4 <_isatty_r>
 801b356:	b128      	cbz	r0, 801b364 <__smakebuf_r+0x70>
 801b358:	89a3      	ldrh	r3, [r4, #12]
 801b35a:	f023 0303 	bic.w	r3, r3, #3
 801b35e:	f043 0301 	orr.w	r3, r3, #1
 801b362:	81a3      	strh	r3, [r4, #12]
 801b364:	89a3      	ldrh	r3, [r4, #12]
 801b366:	431d      	orrs	r5, r3
 801b368:	81a5      	strh	r5, [r4, #12]
 801b36a:	e7cf      	b.n	801b30c <__smakebuf_r+0x18>

0801b36c <memmove>:
 801b36c:	4288      	cmp	r0, r1
 801b36e:	b510      	push	{r4, lr}
 801b370:	eb01 0402 	add.w	r4, r1, r2
 801b374:	d902      	bls.n	801b37c <memmove+0x10>
 801b376:	4284      	cmp	r4, r0
 801b378:	4623      	mov	r3, r4
 801b37a:	d807      	bhi.n	801b38c <memmove+0x20>
 801b37c:	1e43      	subs	r3, r0, #1
 801b37e:	42a1      	cmp	r1, r4
 801b380:	d008      	beq.n	801b394 <memmove+0x28>
 801b382:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b38a:	e7f8      	b.n	801b37e <memmove+0x12>
 801b38c:	4402      	add	r2, r0
 801b38e:	4601      	mov	r1, r0
 801b390:	428a      	cmp	r2, r1
 801b392:	d100      	bne.n	801b396 <memmove+0x2a>
 801b394:	bd10      	pop	{r4, pc}
 801b396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b39a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b39e:	e7f7      	b.n	801b390 <memmove+0x24>

0801b3a0 <_fstat_r>:
 801b3a0:	b538      	push	{r3, r4, r5, lr}
 801b3a2:	4d07      	ldr	r5, [pc, #28]	@ (801b3c0 <_fstat_r+0x20>)
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	4604      	mov	r4, r0
 801b3a8:	4608      	mov	r0, r1
 801b3aa:	4611      	mov	r1, r2
 801b3ac:	602b      	str	r3, [r5, #0]
 801b3ae:	f7ed fb7f 	bl	8008ab0 <_fstat>
 801b3b2:	1c43      	adds	r3, r0, #1
 801b3b4:	d102      	bne.n	801b3bc <_fstat_r+0x1c>
 801b3b6:	682b      	ldr	r3, [r5, #0]
 801b3b8:	b103      	cbz	r3, 801b3bc <_fstat_r+0x1c>
 801b3ba:	6023      	str	r3, [r4, #0]
 801b3bc:	bd38      	pop	{r3, r4, r5, pc}
 801b3be:	bf00      	nop
 801b3c0:	2000b064 	.word	0x2000b064

0801b3c4 <_isatty_r>:
 801b3c4:	b538      	push	{r3, r4, r5, lr}
 801b3c6:	4d06      	ldr	r5, [pc, #24]	@ (801b3e0 <_isatty_r+0x1c>)
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	4604      	mov	r4, r0
 801b3cc:	4608      	mov	r0, r1
 801b3ce:	602b      	str	r3, [r5, #0]
 801b3d0:	f7ed fb7e 	bl	8008ad0 <_isatty>
 801b3d4:	1c43      	adds	r3, r0, #1
 801b3d6:	d102      	bne.n	801b3de <_isatty_r+0x1a>
 801b3d8:	682b      	ldr	r3, [r5, #0]
 801b3da:	b103      	cbz	r3, 801b3de <_isatty_r+0x1a>
 801b3dc:	6023      	str	r3, [r4, #0]
 801b3de:	bd38      	pop	{r3, r4, r5, pc}
 801b3e0:	2000b064 	.word	0x2000b064

0801b3e4 <_sbrk_r>:
 801b3e4:	b538      	push	{r3, r4, r5, lr}
 801b3e6:	4d06      	ldr	r5, [pc, #24]	@ (801b400 <_sbrk_r+0x1c>)
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	4604      	mov	r4, r0
 801b3ec:	4608      	mov	r0, r1
 801b3ee:	602b      	str	r3, [r5, #0]
 801b3f0:	f7ed fb86 	bl	8008b00 <_sbrk>
 801b3f4:	1c43      	adds	r3, r0, #1
 801b3f6:	d102      	bne.n	801b3fe <_sbrk_r+0x1a>
 801b3f8:	682b      	ldr	r3, [r5, #0]
 801b3fa:	b103      	cbz	r3, 801b3fe <_sbrk_r+0x1a>
 801b3fc:	6023      	str	r3, [r4, #0]
 801b3fe:	bd38      	pop	{r3, r4, r5, pc}
 801b400:	2000b064 	.word	0x2000b064

0801b404 <__assert_func>:
 801b404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b406:	4614      	mov	r4, r2
 801b408:	461a      	mov	r2, r3
 801b40a:	4b09      	ldr	r3, [pc, #36]	@ (801b430 <__assert_func+0x2c>)
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	4605      	mov	r5, r0
 801b410:	68d8      	ldr	r0, [r3, #12]
 801b412:	b14c      	cbz	r4, 801b428 <__assert_func+0x24>
 801b414:	4b07      	ldr	r3, [pc, #28]	@ (801b434 <__assert_func+0x30>)
 801b416:	9100      	str	r1, [sp, #0]
 801b418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b41c:	4906      	ldr	r1, [pc, #24]	@ (801b438 <__assert_func+0x34>)
 801b41e:	462b      	mov	r3, r5
 801b420:	f000 f870 	bl	801b504 <fiprintf>
 801b424:	f000 f880 	bl	801b528 <abort>
 801b428:	4b04      	ldr	r3, [pc, #16]	@ (801b43c <__assert_func+0x38>)
 801b42a:	461c      	mov	r4, r3
 801b42c:	e7f3      	b.n	801b416 <__assert_func+0x12>
 801b42e:	bf00      	nop
 801b430:	2000012c 	.word	0x2000012c
 801b434:	0801f795 	.word	0x0801f795
 801b438:	0801f7a2 	.word	0x0801f7a2
 801b43c:	0801f7d0 	.word	0x0801f7d0

0801b440 <_calloc_r>:
 801b440:	b570      	push	{r4, r5, r6, lr}
 801b442:	fba1 5402 	umull	r5, r4, r1, r2
 801b446:	b934      	cbnz	r4, 801b456 <_calloc_r+0x16>
 801b448:	4629      	mov	r1, r5
 801b44a:	f7fe ffe1 	bl	801a410 <_malloc_r>
 801b44e:	4606      	mov	r6, r0
 801b450:	b928      	cbnz	r0, 801b45e <_calloc_r+0x1e>
 801b452:	4630      	mov	r0, r6
 801b454:	bd70      	pop	{r4, r5, r6, pc}
 801b456:	220c      	movs	r2, #12
 801b458:	6002      	str	r2, [r0, #0]
 801b45a:	2600      	movs	r6, #0
 801b45c:	e7f9      	b.n	801b452 <_calloc_r+0x12>
 801b45e:	462a      	mov	r2, r5
 801b460:	4621      	mov	r1, r4
 801b462:	f7fe f81b 	bl	801949c <memset>
 801b466:	e7f4      	b.n	801b452 <_calloc_r+0x12>

0801b468 <__ascii_mbtowc>:
 801b468:	b082      	sub	sp, #8
 801b46a:	b901      	cbnz	r1, 801b46e <__ascii_mbtowc+0x6>
 801b46c:	a901      	add	r1, sp, #4
 801b46e:	b142      	cbz	r2, 801b482 <__ascii_mbtowc+0x1a>
 801b470:	b14b      	cbz	r3, 801b486 <__ascii_mbtowc+0x1e>
 801b472:	7813      	ldrb	r3, [r2, #0]
 801b474:	600b      	str	r3, [r1, #0]
 801b476:	7812      	ldrb	r2, [r2, #0]
 801b478:	1e10      	subs	r0, r2, #0
 801b47a:	bf18      	it	ne
 801b47c:	2001      	movne	r0, #1
 801b47e:	b002      	add	sp, #8
 801b480:	4770      	bx	lr
 801b482:	4610      	mov	r0, r2
 801b484:	e7fb      	b.n	801b47e <__ascii_mbtowc+0x16>
 801b486:	f06f 0001 	mvn.w	r0, #1
 801b48a:	e7f8      	b.n	801b47e <__ascii_mbtowc+0x16>

0801b48c <_realloc_r>:
 801b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b490:	4607      	mov	r7, r0
 801b492:	4614      	mov	r4, r2
 801b494:	460d      	mov	r5, r1
 801b496:	b921      	cbnz	r1, 801b4a2 <_realloc_r+0x16>
 801b498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b49c:	4611      	mov	r1, r2
 801b49e:	f7fe bfb7 	b.w	801a410 <_malloc_r>
 801b4a2:	b92a      	cbnz	r2, 801b4b0 <_realloc_r+0x24>
 801b4a4:	f7fe ff40 	bl	801a328 <_free_r>
 801b4a8:	4625      	mov	r5, r4
 801b4aa:	4628      	mov	r0, r5
 801b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4b0:	f000 f841 	bl	801b536 <_malloc_usable_size_r>
 801b4b4:	4284      	cmp	r4, r0
 801b4b6:	4606      	mov	r6, r0
 801b4b8:	d802      	bhi.n	801b4c0 <_realloc_r+0x34>
 801b4ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b4be:	d8f4      	bhi.n	801b4aa <_realloc_r+0x1e>
 801b4c0:	4621      	mov	r1, r4
 801b4c2:	4638      	mov	r0, r7
 801b4c4:	f7fe ffa4 	bl	801a410 <_malloc_r>
 801b4c8:	4680      	mov	r8, r0
 801b4ca:	b908      	cbnz	r0, 801b4d0 <_realloc_r+0x44>
 801b4cc:	4645      	mov	r5, r8
 801b4ce:	e7ec      	b.n	801b4aa <_realloc_r+0x1e>
 801b4d0:	42b4      	cmp	r4, r6
 801b4d2:	4622      	mov	r2, r4
 801b4d4:	4629      	mov	r1, r5
 801b4d6:	bf28      	it	cs
 801b4d8:	4632      	movcs	r2, r6
 801b4da:	f7fe f8bc 	bl	8019656 <memcpy>
 801b4de:	4629      	mov	r1, r5
 801b4e0:	4638      	mov	r0, r7
 801b4e2:	f7fe ff21 	bl	801a328 <_free_r>
 801b4e6:	e7f1      	b.n	801b4cc <_realloc_r+0x40>

0801b4e8 <__ascii_wctomb>:
 801b4e8:	4603      	mov	r3, r0
 801b4ea:	4608      	mov	r0, r1
 801b4ec:	b141      	cbz	r1, 801b500 <__ascii_wctomb+0x18>
 801b4ee:	2aff      	cmp	r2, #255	@ 0xff
 801b4f0:	d904      	bls.n	801b4fc <__ascii_wctomb+0x14>
 801b4f2:	228a      	movs	r2, #138	@ 0x8a
 801b4f4:	601a      	str	r2, [r3, #0]
 801b4f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b4fa:	4770      	bx	lr
 801b4fc:	700a      	strb	r2, [r1, #0]
 801b4fe:	2001      	movs	r0, #1
 801b500:	4770      	bx	lr
	...

0801b504 <fiprintf>:
 801b504:	b40e      	push	{r1, r2, r3}
 801b506:	b503      	push	{r0, r1, lr}
 801b508:	4601      	mov	r1, r0
 801b50a:	ab03      	add	r3, sp, #12
 801b50c:	4805      	ldr	r0, [pc, #20]	@ (801b524 <fiprintf+0x20>)
 801b50e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b512:	6800      	ldr	r0, [r0, #0]
 801b514:	9301      	str	r3, [sp, #4]
 801b516:	f7ff fd03 	bl	801af20 <_vfiprintf_r>
 801b51a:	b002      	add	sp, #8
 801b51c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b520:	b003      	add	sp, #12
 801b522:	4770      	bx	lr
 801b524:	2000012c 	.word	0x2000012c

0801b528 <abort>:
 801b528:	b508      	push	{r3, lr}
 801b52a:	2006      	movs	r0, #6
 801b52c:	f000 f834 	bl	801b598 <raise>
 801b530:	2001      	movs	r0, #1
 801b532:	f7ed fa6d 	bl	8008a10 <_exit>

0801b536 <_malloc_usable_size_r>:
 801b536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b53a:	1f18      	subs	r0, r3, #4
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	bfbc      	itt	lt
 801b540:	580b      	ldrlt	r3, [r1, r0]
 801b542:	18c0      	addlt	r0, r0, r3
 801b544:	4770      	bx	lr

0801b546 <_raise_r>:
 801b546:	291f      	cmp	r1, #31
 801b548:	b538      	push	{r3, r4, r5, lr}
 801b54a:	4605      	mov	r5, r0
 801b54c:	460c      	mov	r4, r1
 801b54e:	d904      	bls.n	801b55a <_raise_r+0x14>
 801b550:	2316      	movs	r3, #22
 801b552:	6003      	str	r3, [r0, #0]
 801b554:	f04f 30ff 	mov.w	r0, #4294967295
 801b558:	bd38      	pop	{r3, r4, r5, pc}
 801b55a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b55c:	b112      	cbz	r2, 801b564 <_raise_r+0x1e>
 801b55e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b562:	b94b      	cbnz	r3, 801b578 <_raise_r+0x32>
 801b564:	4628      	mov	r0, r5
 801b566:	f000 f831 	bl	801b5cc <_getpid_r>
 801b56a:	4622      	mov	r2, r4
 801b56c:	4601      	mov	r1, r0
 801b56e:	4628      	mov	r0, r5
 801b570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b574:	f000 b818 	b.w	801b5a8 <_kill_r>
 801b578:	2b01      	cmp	r3, #1
 801b57a:	d00a      	beq.n	801b592 <_raise_r+0x4c>
 801b57c:	1c59      	adds	r1, r3, #1
 801b57e:	d103      	bne.n	801b588 <_raise_r+0x42>
 801b580:	2316      	movs	r3, #22
 801b582:	6003      	str	r3, [r0, #0]
 801b584:	2001      	movs	r0, #1
 801b586:	e7e7      	b.n	801b558 <_raise_r+0x12>
 801b588:	2100      	movs	r1, #0
 801b58a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b58e:	4620      	mov	r0, r4
 801b590:	4798      	blx	r3
 801b592:	2000      	movs	r0, #0
 801b594:	e7e0      	b.n	801b558 <_raise_r+0x12>
	...

0801b598 <raise>:
 801b598:	4b02      	ldr	r3, [pc, #8]	@ (801b5a4 <raise+0xc>)
 801b59a:	4601      	mov	r1, r0
 801b59c:	6818      	ldr	r0, [r3, #0]
 801b59e:	f7ff bfd2 	b.w	801b546 <_raise_r>
 801b5a2:	bf00      	nop
 801b5a4:	2000012c 	.word	0x2000012c

0801b5a8 <_kill_r>:
 801b5a8:	b538      	push	{r3, r4, r5, lr}
 801b5aa:	4d07      	ldr	r5, [pc, #28]	@ (801b5c8 <_kill_r+0x20>)
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	4604      	mov	r4, r0
 801b5b0:	4608      	mov	r0, r1
 801b5b2:	4611      	mov	r1, r2
 801b5b4:	602b      	str	r3, [r5, #0]
 801b5b6:	f7ed fa1b 	bl	80089f0 <_kill>
 801b5ba:	1c43      	adds	r3, r0, #1
 801b5bc:	d102      	bne.n	801b5c4 <_kill_r+0x1c>
 801b5be:	682b      	ldr	r3, [r5, #0]
 801b5c0:	b103      	cbz	r3, 801b5c4 <_kill_r+0x1c>
 801b5c2:	6023      	str	r3, [r4, #0]
 801b5c4:	bd38      	pop	{r3, r4, r5, pc}
 801b5c6:	bf00      	nop
 801b5c8:	2000b064 	.word	0x2000b064

0801b5cc <_getpid_r>:
 801b5cc:	f7ed ba08 	b.w	80089e0 <_getpid>

0801b5d0 <pow>:
 801b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5d2:	ed2d 8b02 	vpush	{d8}
 801b5d6:	eeb0 8a40 	vmov.f32	s16, s0
 801b5da:	eef0 8a60 	vmov.f32	s17, s1
 801b5de:	ec55 4b11 	vmov	r4, r5, d1
 801b5e2:	f000 f871 	bl	801b6c8 <__ieee754_pow>
 801b5e6:	4622      	mov	r2, r4
 801b5e8:	462b      	mov	r3, r5
 801b5ea:	4620      	mov	r0, r4
 801b5ec:	4629      	mov	r1, r5
 801b5ee:	ec57 6b10 	vmov	r6, r7, d0
 801b5f2:	f7e5 fa73 	bl	8000adc <__aeabi_dcmpun>
 801b5f6:	2800      	cmp	r0, #0
 801b5f8:	d13b      	bne.n	801b672 <pow+0xa2>
 801b5fa:	ec51 0b18 	vmov	r0, r1, d8
 801b5fe:	2200      	movs	r2, #0
 801b600:	2300      	movs	r3, #0
 801b602:	f7e5 fa39 	bl	8000a78 <__aeabi_dcmpeq>
 801b606:	b1b8      	cbz	r0, 801b638 <pow+0x68>
 801b608:	2200      	movs	r2, #0
 801b60a:	2300      	movs	r3, #0
 801b60c:	4620      	mov	r0, r4
 801b60e:	4629      	mov	r1, r5
 801b610:	f7e5 fa32 	bl	8000a78 <__aeabi_dcmpeq>
 801b614:	2800      	cmp	r0, #0
 801b616:	d146      	bne.n	801b6a6 <pow+0xd6>
 801b618:	ec45 4b10 	vmov	d0, r4, r5
 801b61c:	f000 f848 	bl	801b6b0 <finite>
 801b620:	b338      	cbz	r0, 801b672 <pow+0xa2>
 801b622:	2200      	movs	r2, #0
 801b624:	2300      	movs	r3, #0
 801b626:	4620      	mov	r0, r4
 801b628:	4629      	mov	r1, r5
 801b62a:	f7e5 fa2f 	bl	8000a8c <__aeabi_dcmplt>
 801b62e:	b300      	cbz	r0, 801b672 <pow+0xa2>
 801b630:	f7fd ffe4 	bl	80195fc <__errno>
 801b634:	2322      	movs	r3, #34	@ 0x22
 801b636:	e01b      	b.n	801b670 <pow+0xa0>
 801b638:	ec47 6b10 	vmov	d0, r6, r7
 801b63c:	f000 f838 	bl	801b6b0 <finite>
 801b640:	b9e0      	cbnz	r0, 801b67c <pow+0xac>
 801b642:	eeb0 0a48 	vmov.f32	s0, s16
 801b646:	eef0 0a68 	vmov.f32	s1, s17
 801b64a:	f000 f831 	bl	801b6b0 <finite>
 801b64e:	b1a8      	cbz	r0, 801b67c <pow+0xac>
 801b650:	ec45 4b10 	vmov	d0, r4, r5
 801b654:	f000 f82c 	bl	801b6b0 <finite>
 801b658:	b180      	cbz	r0, 801b67c <pow+0xac>
 801b65a:	4632      	mov	r2, r6
 801b65c:	463b      	mov	r3, r7
 801b65e:	4630      	mov	r0, r6
 801b660:	4639      	mov	r1, r7
 801b662:	f7e5 fa3b 	bl	8000adc <__aeabi_dcmpun>
 801b666:	2800      	cmp	r0, #0
 801b668:	d0e2      	beq.n	801b630 <pow+0x60>
 801b66a:	f7fd ffc7 	bl	80195fc <__errno>
 801b66e:	2321      	movs	r3, #33	@ 0x21
 801b670:	6003      	str	r3, [r0, #0]
 801b672:	ecbd 8b02 	vpop	{d8}
 801b676:	ec47 6b10 	vmov	d0, r6, r7
 801b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b67c:	2200      	movs	r2, #0
 801b67e:	2300      	movs	r3, #0
 801b680:	4630      	mov	r0, r6
 801b682:	4639      	mov	r1, r7
 801b684:	f7e5 f9f8 	bl	8000a78 <__aeabi_dcmpeq>
 801b688:	2800      	cmp	r0, #0
 801b68a:	d0f2      	beq.n	801b672 <pow+0xa2>
 801b68c:	eeb0 0a48 	vmov.f32	s0, s16
 801b690:	eef0 0a68 	vmov.f32	s1, s17
 801b694:	f000 f80c 	bl	801b6b0 <finite>
 801b698:	2800      	cmp	r0, #0
 801b69a:	d0ea      	beq.n	801b672 <pow+0xa2>
 801b69c:	ec45 4b10 	vmov	d0, r4, r5
 801b6a0:	f000 f806 	bl	801b6b0 <finite>
 801b6a4:	e7c3      	b.n	801b62e <pow+0x5e>
 801b6a6:	4f01      	ldr	r7, [pc, #4]	@ (801b6ac <pow+0xdc>)
 801b6a8:	2600      	movs	r6, #0
 801b6aa:	e7e2      	b.n	801b672 <pow+0xa2>
 801b6ac:	3ff00000 	.word	0x3ff00000

0801b6b0 <finite>:
 801b6b0:	b082      	sub	sp, #8
 801b6b2:	ed8d 0b00 	vstr	d0, [sp]
 801b6b6:	9801      	ldr	r0, [sp, #4]
 801b6b8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801b6bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801b6c0:	0fc0      	lsrs	r0, r0, #31
 801b6c2:	b002      	add	sp, #8
 801b6c4:	4770      	bx	lr
	...

0801b6c8 <__ieee754_pow>:
 801b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6cc:	b091      	sub	sp, #68	@ 0x44
 801b6ce:	ed8d 1b00 	vstr	d1, [sp]
 801b6d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 801b6d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801b6da:	ea5a 0001 	orrs.w	r0, sl, r1
 801b6de:	ec57 6b10 	vmov	r6, r7, d0
 801b6e2:	d113      	bne.n	801b70c <__ieee754_pow+0x44>
 801b6e4:	19b3      	adds	r3, r6, r6
 801b6e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801b6ea:	4152      	adcs	r2, r2
 801b6ec:	4298      	cmp	r0, r3
 801b6ee:	4b9a      	ldr	r3, [pc, #616]	@ (801b958 <__ieee754_pow+0x290>)
 801b6f0:	4193      	sbcs	r3, r2
 801b6f2:	f080 84ee 	bcs.w	801c0d2 <__ieee754_pow+0xa0a>
 801b6f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b6fa:	4630      	mov	r0, r6
 801b6fc:	4639      	mov	r1, r7
 801b6fe:	f7e4 fd9d 	bl	800023c <__adddf3>
 801b702:	ec41 0b10 	vmov	d0, r0, r1
 801b706:	b011      	add	sp, #68	@ 0x44
 801b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b70c:	4a93      	ldr	r2, [pc, #588]	@ (801b95c <__ieee754_pow+0x294>)
 801b70e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 801b712:	4295      	cmp	r5, r2
 801b714:	46b8      	mov	r8, r7
 801b716:	4633      	mov	r3, r6
 801b718:	d80a      	bhi.n	801b730 <__ieee754_pow+0x68>
 801b71a:	d104      	bne.n	801b726 <__ieee754_pow+0x5e>
 801b71c:	2e00      	cmp	r6, #0
 801b71e:	d1ea      	bne.n	801b6f6 <__ieee754_pow+0x2e>
 801b720:	45aa      	cmp	sl, r5
 801b722:	d8e8      	bhi.n	801b6f6 <__ieee754_pow+0x2e>
 801b724:	e001      	b.n	801b72a <__ieee754_pow+0x62>
 801b726:	4592      	cmp	sl, r2
 801b728:	d802      	bhi.n	801b730 <__ieee754_pow+0x68>
 801b72a:	4592      	cmp	sl, r2
 801b72c:	d10f      	bne.n	801b74e <__ieee754_pow+0x86>
 801b72e:	b171      	cbz	r1, 801b74e <__ieee754_pow+0x86>
 801b730:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801b734:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801b738:	ea58 0803 	orrs.w	r8, r8, r3
 801b73c:	d1db      	bne.n	801b6f6 <__ieee754_pow+0x2e>
 801b73e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b742:	18db      	adds	r3, r3, r3
 801b744:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801b748:	4152      	adcs	r2, r2
 801b74a:	4598      	cmp	r8, r3
 801b74c:	e7cf      	b.n	801b6ee <__ieee754_pow+0x26>
 801b74e:	f1b8 0f00 	cmp.w	r8, #0
 801b752:	46ab      	mov	fp, r5
 801b754:	da43      	bge.n	801b7de <__ieee754_pow+0x116>
 801b756:	4a82      	ldr	r2, [pc, #520]	@ (801b960 <__ieee754_pow+0x298>)
 801b758:	4592      	cmp	sl, r2
 801b75a:	d856      	bhi.n	801b80a <__ieee754_pow+0x142>
 801b75c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801b760:	4592      	cmp	sl, r2
 801b762:	f240 84c5 	bls.w	801c0f0 <__ieee754_pow+0xa28>
 801b766:	ea4f 522a 	mov.w	r2, sl, asr #20
 801b76a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801b76e:	2a14      	cmp	r2, #20
 801b770:	dd18      	ble.n	801b7a4 <__ieee754_pow+0xdc>
 801b772:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801b776:	fa21 f402 	lsr.w	r4, r1, r2
 801b77a:	fa04 f202 	lsl.w	r2, r4, r2
 801b77e:	428a      	cmp	r2, r1
 801b780:	f040 84b6 	bne.w	801c0f0 <__ieee754_pow+0xa28>
 801b784:	f004 0401 	and.w	r4, r4, #1
 801b788:	f1c4 0402 	rsb	r4, r4, #2
 801b78c:	2900      	cmp	r1, #0
 801b78e:	d159      	bne.n	801b844 <__ieee754_pow+0x17c>
 801b790:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801b794:	d148      	bne.n	801b828 <__ieee754_pow+0x160>
 801b796:	4632      	mov	r2, r6
 801b798:	463b      	mov	r3, r7
 801b79a:	4630      	mov	r0, r6
 801b79c:	4639      	mov	r1, r7
 801b79e:	f7e4 ff03 	bl	80005a8 <__aeabi_dmul>
 801b7a2:	e7ae      	b.n	801b702 <__ieee754_pow+0x3a>
 801b7a4:	2900      	cmp	r1, #0
 801b7a6:	d14c      	bne.n	801b842 <__ieee754_pow+0x17a>
 801b7a8:	f1c2 0214 	rsb	r2, r2, #20
 801b7ac:	fa4a f402 	asr.w	r4, sl, r2
 801b7b0:	fa04 f202 	lsl.w	r2, r4, r2
 801b7b4:	4552      	cmp	r2, sl
 801b7b6:	f040 8498 	bne.w	801c0ea <__ieee754_pow+0xa22>
 801b7ba:	f004 0401 	and.w	r4, r4, #1
 801b7be:	f1c4 0402 	rsb	r4, r4, #2
 801b7c2:	4a68      	ldr	r2, [pc, #416]	@ (801b964 <__ieee754_pow+0x29c>)
 801b7c4:	4592      	cmp	sl, r2
 801b7c6:	d1e3      	bne.n	801b790 <__ieee754_pow+0xc8>
 801b7c8:	f1b9 0f00 	cmp.w	r9, #0
 801b7cc:	f280 8489 	bge.w	801c0e2 <__ieee754_pow+0xa1a>
 801b7d0:	4964      	ldr	r1, [pc, #400]	@ (801b964 <__ieee754_pow+0x29c>)
 801b7d2:	4632      	mov	r2, r6
 801b7d4:	463b      	mov	r3, r7
 801b7d6:	2000      	movs	r0, #0
 801b7d8:	f7e5 f810 	bl	80007fc <__aeabi_ddiv>
 801b7dc:	e791      	b.n	801b702 <__ieee754_pow+0x3a>
 801b7de:	2400      	movs	r4, #0
 801b7e0:	bb81      	cbnz	r1, 801b844 <__ieee754_pow+0x17c>
 801b7e2:	4a5e      	ldr	r2, [pc, #376]	@ (801b95c <__ieee754_pow+0x294>)
 801b7e4:	4592      	cmp	sl, r2
 801b7e6:	d1ec      	bne.n	801b7c2 <__ieee754_pow+0xfa>
 801b7e8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801b7ec:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801b7f0:	431a      	orrs	r2, r3
 801b7f2:	f000 846e 	beq.w	801c0d2 <__ieee754_pow+0xa0a>
 801b7f6:	4b5c      	ldr	r3, [pc, #368]	@ (801b968 <__ieee754_pow+0x2a0>)
 801b7f8:	429d      	cmp	r5, r3
 801b7fa:	d908      	bls.n	801b80e <__ieee754_pow+0x146>
 801b7fc:	f1b9 0f00 	cmp.w	r9, #0
 801b800:	f280 846b 	bge.w	801c0da <__ieee754_pow+0xa12>
 801b804:	2000      	movs	r0, #0
 801b806:	2100      	movs	r1, #0
 801b808:	e77b      	b.n	801b702 <__ieee754_pow+0x3a>
 801b80a:	2402      	movs	r4, #2
 801b80c:	e7e8      	b.n	801b7e0 <__ieee754_pow+0x118>
 801b80e:	f1b9 0f00 	cmp.w	r9, #0
 801b812:	f04f 0000 	mov.w	r0, #0
 801b816:	f04f 0100 	mov.w	r1, #0
 801b81a:	f6bf af72 	bge.w	801b702 <__ieee754_pow+0x3a>
 801b81e:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b822:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801b826:	e76c      	b.n	801b702 <__ieee754_pow+0x3a>
 801b828:	4a50      	ldr	r2, [pc, #320]	@ (801b96c <__ieee754_pow+0x2a4>)
 801b82a:	4591      	cmp	r9, r2
 801b82c:	d10a      	bne.n	801b844 <__ieee754_pow+0x17c>
 801b82e:	f1b8 0f00 	cmp.w	r8, #0
 801b832:	db07      	blt.n	801b844 <__ieee754_pow+0x17c>
 801b834:	ec47 6b10 	vmov	d0, r6, r7
 801b838:	b011      	add	sp, #68	@ 0x44
 801b83a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b83e:	f000 bd4f 	b.w	801c2e0 <__ieee754_sqrt>
 801b842:	2400      	movs	r4, #0
 801b844:	ec47 6b10 	vmov	d0, r6, r7
 801b848:	9302      	str	r3, [sp, #8]
 801b84a:	f000 fc87 	bl	801c15c <fabs>
 801b84e:	9b02      	ldr	r3, [sp, #8]
 801b850:	ec51 0b10 	vmov	r0, r1, d0
 801b854:	bb43      	cbnz	r3, 801b8a8 <__ieee754_pow+0x1e0>
 801b856:	4b43      	ldr	r3, [pc, #268]	@ (801b964 <__ieee754_pow+0x29c>)
 801b858:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801b85c:	429a      	cmp	r2, r3
 801b85e:	d000      	beq.n	801b862 <__ieee754_pow+0x19a>
 801b860:	bb15      	cbnz	r5, 801b8a8 <__ieee754_pow+0x1e0>
 801b862:	f1b9 0f00 	cmp.w	r9, #0
 801b866:	da05      	bge.n	801b874 <__ieee754_pow+0x1ac>
 801b868:	4602      	mov	r2, r0
 801b86a:	460b      	mov	r3, r1
 801b86c:	2000      	movs	r0, #0
 801b86e:	493d      	ldr	r1, [pc, #244]	@ (801b964 <__ieee754_pow+0x29c>)
 801b870:	f7e4 ffc4 	bl	80007fc <__aeabi_ddiv>
 801b874:	f1b8 0f00 	cmp.w	r8, #0
 801b878:	f6bf af43 	bge.w	801b702 <__ieee754_pow+0x3a>
 801b87c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801b880:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801b884:	4325      	orrs	r5, r4
 801b886:	d108      	bne.n	801b89a <__ieee754_pow+0x1d2>
 801b888:	4602      	mov	r2, r0
 801b88a:	460b      	mov	r3, r1
 801b88c:	4610      	mov	r0, r2
 801b88e:	4619      	mov	r1, r3
 801b890:	f7e4 fcd2 	bl	8000238 <__aeabi_dsub>
 801b894:	4602      	mov	r2, r0
 801b896:	460b      	mov	r3, r1
 801b898:	e79e      	b.n	801b7d8 <__ieee754_pow+0x110>
 801b89a:	2c01      	cmp	r4, #1
 801b89c:	f47f af31 	bne.w	801b702 <__ieee754_pow+0x3a>
 801b8a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b8a4:	4619      	mov	r1, r3
 801b8a6:	e72c      	b.n	801b702 <__ieee754_pow+0x3a>
 801b8a8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801b8ac:	3b01      	subs	r3, #1
 801b8ae:	ea53 0204 	orrs.w	r2, r3, r4
 801b8b2:	d102      	bne.n	801b8ba <__ieee754_pow+0x1f2>
 801b8b4:	4632      	mov	r2, r6
 801b8b6:	463b      	mov	r3, r7
 801b8b8:	e7e8      	b.n	801b88c <__ieee754_pow+0x1c4>
 801b8ba:	3c01      	subs	r4, #1
 801b8bc:	431c      	orrs	r4, r3
 801b8be:	d016      	beq.n	801b8ee <__ieee754_pow+0x226>
 801b8c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801b948 <__ieee754_pow+0x280>
 801b8c4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801b8c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b8cc:	f240 8110 	bls.w	801baf0 <__ieee754_pow+0x428>
 801b8d0:	4b27      	ldr	r3, [pc, #156]	@ (801b970 <__ieee754_pow+0x2a8>)
 801b8d2:	459a      	cmp	sl, r3
 801b8d4:	4b24      	ldr	r3, [pc, #144]	@ (801b968 <__ieee754_pow+0x2a0>)
 801b8d6:	d916      	bls.n	801b906 <__ieee754_pow+0x23e>
 801b8d8:	429d      	cmp	r5, r3
 801b8da:	d80b      	bhi.n	801b8f4 <__ieee754_pow+0x22c>
 801b8dc:	f1b9 0f00 	cmp.w	r9, #0
 801b8e0:	da0b      	bge.n	801b8fa <__ieee754_pow+0x232>
 801b8e2:	2000      	movs	r0, #0
 801b8e4:	b011      	add	sp, #68	@ 0x44
 801b8e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ea:	f000 bcf1 	b.w	801c2d0 <__math_oflow>
 801b8ee:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 801b950 <__ieee754_pow+0x288>
 801b8f2:	e7e7      	b.n	801b8c4 <__ieee754_pow+0x1fc>
 801b8f4:	f1b9 0f00 	cmp.w	r9, #0
 801b8f8:	dcf3      	bgt.n	801b8e2 <__ieee754_pow+0x21a>
 801b8fa:	2000      	movs	r0, #0
 801b8fc:	b011      	add	sp, #68	@ 0x44
 801b8fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b902:	f000 bcdd 	b.w	801c2c0 <__math_uflow>
 801b906:	429d      	cmp	r5, r3
 801b908:	d20c      	bcs.n	801b924 <__ieee754_pow+0x25c>
 801b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b90e:	2200      	movs	r2, #0
 801b910:	2300      	movs	r3, #0
 801b912:	f7e5 f8bb 	bl	8000a8c <__aeabi_dcmplt>
 801b916:	3800      	subs	r0, #0
 801b918:	bf18      	it	ne
 801b91a:	2001      	movne	r0, #1
 801b91c:	f1b9 0f00 	cmp.w	r9, #0
 801b920:	daec      	bge.n	801b8fc <__ieee754_pow+0x234>
 801b922:	e7df      	b.n	801b8e4 <__ieee754_pow+0x21c>
 801b924:	4b0f      	ldr	r3, [pc, #60]	@ (801b964 <__ieee754_pow+0x29c>)
 801b926:	429d      	cmp	r5, r3
 801b928:	f04f 0200 	mov.w	r2, #0
 801b92c:	d922      	bls.n	801b974 <__ieee754_pow+0x2ac>
 801b92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b932:	2300      	movs	r3, #0
 801b934:	f7e5 f8aa 	bl	8000a8c <__aeabi_dcmplt>
 801b938:	3800      	subs	r0, #0
 801b93a:	bf18      	it	ne
 801b93c:	2001      	movne	r0, #1
 801b93e:	f1b9 0f00 	cmp.w	r9, #0
 801b942:	dccf      	bgt.n	801b8e4 <__ieee754_pow+0x21c>
 801b944:	e7da      	b.n	801b8fc <__ieee754_pow+0x234>
 801b946:	bf00      	nop
 801b948:	00000000 	.word	0x00000000
 801b94c:	3ff00000 	.word	0x3ff00000
 801b950:	00000000 	.word	0x00000000
 801b954:	bff00000 	.word	0xbff00000
 801b958:	fff00000 	.word	0xfff00000
 801b95c:	7ff00000 	.word	0x7ff00000
 801b960:	433fffff 	.word	0x433fffff
 801b964:	3ff00000 	.word	0x3ff00000
 801b968:	3fefffff 	.word	0x3fefffff
 801b96c:	3fe00000 	.word	0x3fe00000
 801b970:	43f00000 	.word	0x43f00000
 801b974:	4b5a      	ldr	r3, [pc, #360]	@ (801bae0 <__ieee754_pow+0x418>)
 801b976:	f7e4 fc5f 	bl	8000238 <__aeabi_dsub>
 801b97a:	a351      	add	r3, pc, #324	@ (adr r3, 801bac0 <__ieee754_pow+0x3f8>)
 801b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b980:	4604      	mov	r4, r0
 801b982:	460d      	mov	r5, r1
 801b984:	f7e4 fe10 	bl	80005a8 <__aeabi_dmul>
 801b988:	a34f      	add	r3, pc, #316	@ (adr r3, 801bac8 <__ieee754_pow+0x400>)
 801b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b98e:	4606      	mov	r6, r0
 801b990:	460f      	mov	r7, r1
 801b992:	4620      	mov	r0, r4
 801b994:	4629      	mov	r1, r5
 801b996:	f7e4 fe07 	bl	80005a8 <__aeabi_dmul>
 801b99a:	4b52      	ldr	r3, [pc, #328]	@ (801bae4 <__ieee754_pow+0x41c>)
 801b99c:	4682      	mov	sl, r0
 801b99e:	468b      	mov	fp, r1
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	4620      	mov	r0, r4
 801b9a4:	4629      	mov	r1, r5
 801b9a6:	f7e4 fdff 	bl	80005a8 <__aeabi_dmul>
 801b9aa:	4602      	mov	r2, r0
 801b9ac:	460b      	mov	r3, r1
 801b9ae:	a148      	add	r1, pc, #288	@ (adr r1, 801bad0 <__ieee754_pow+0x408>)
 801b9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9b4:	f7e4 fc40 	bl	8000238 <__aeabi_dsub>
 801b9b8:	4622      	mov	r2, r4
 801b9ba:	462b      	mov	r3, r5
 801b9bc:	f7e4 fdf4 	bl	80005a8 <__aeabi_dmul>
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	460b      	mov	r3, r1
 801b9c4:	2000      	movs	r0, #0
 801b9c6:	4948      	ldr	r1, [pc, #288]	@ (801bae8 <__ieee754_pow+0x420>)
 801b9c8:	f7e4 fc36 	bl	8000238 <__aeabi_dsub>
 801b9cc:	4622      	mov	r2, r4
 801b9ce:	4680      	mov	r8, r0
 801b9d0:	4689      	mov	r9, r1
 801b9d2:	462b      	mov	r3, r5
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	4629      	mov	r1, r5
 801b9d8:	f7e4 fde6 	bl	80005a8 <__aeabi_dmul>
 801b9dc:	4602      	mov	r2, r0
 801b9de:	460b      	mov	r3, r1
 801b9e0:	4640      	mov	r0, r8
 801b9e2:	4649      	mov	r1, r9
 801b9e4:	f7e4 fde0 	bl	80005a8 <__aeabi_dmul>
 801b9e8:	a33b      	add	r3, pc, #236	@ (adr r3, 801bad8 <__ieee754_pow+0x410>)
 801b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ee:	f7e4 fddb 	bl	80005a8 <__aeabi_dmul>
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	460b      	mov	r3, r1
 801b9f6:	4650      	mov	r0, sl
 801b9f8:	4659      	mov	r1, fp
 801b9fa:	f7e4 fc1d 	bl	8000238 <__aeabi_dsub>
 801b9fe:	4602      	mov	r2, r0
 801ba00:	460b      	mov	r3, r1
 801ba02:	4680      	mov	r8, r0
 801ba04:	4689      	mov	r9, r1
 801ba06:	4630      	mov	r0, r6
 801ba08:	4639      	mov	r1, r7
 801ba0a:	f7e4 fc17 	bl	800023c <__adddf3>
 801ba0e:	2400      	movs	r4, #0
 801ba10:	4632      	mov	r2, r6
 801ba12:	463b      	mov	r3, r7
 801ba14:	4620      	mov	r0, r4
 801ba16:	460d      	mov	r5, r1
 801ba18:	f7e4 fc0e 	bl	8000238 <__aeabi_dsub>
 801ba1c:	4602      	mov	r2, r0
 801ba1e:	460b      	mov	r3, r1
 801ba20:	4640      	mov	r0, r8
 801ba22:	4649      	mov	r1, r9
 801ba24:	f7e4 fc08 	bl	8000238 <__aeabi_dsub>
 801ba28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ba30:	2300      	movs	r3, #0
 801ba32:	9304      	str	r3, [sp, #16]
 801ba34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ba38:	4606      	mov	r6, r0
 801ba3a:	460f      	mov	r7, r1
 801ba3c:	465b      	mov	r3, fp
 801ba3e:	4652      	mov	r2, sl
 801ba40:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ba44:	f7e4 fbf8 	bl	8000238 <__aeabi_dsub>
 801ba48:	4622      	mov	r2, r4
 801ba4a:	462b      	mov	r3, r5
 801ba4c:	f7e4 fdac 	bl	80005a8 <__aeabi_dmul>
 801ba50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba54:	4680      	mov	r8, r0
 801ba56:	4689      	mov	r9, r1
 801ba58:	4630      	mov	r0, r6
 801ba5a:	4639      	mov	r1, r7
 801ba5c:	f7e4 fda4 	bl	80005a8 <__aeabi_dmul>
 801ba60:	4602      	mov	r2, r0
 801ba62:	460b      	mov	r3, r1
 801ba64:	4640      	mov	r0, r8
 801ba66:	4649      	mov	r1, r9
 801ba68:	f7e4 fbe8 	bl	800023c <__adddf3>
 801ba6c:	465b      	mov	r3, fp
 801ba6e:	4606      	mov	r6, r0
 801ba70:	460f      	mov	r7, r1
 801ba72:	4652      	mov	r2, sl
 801ba74:	4620      	mov	r0, r4
 801ba76:	4629      	mov	r1, r5
 801ba78:	f7e4 fd96 	bl	80005a8 <__aeabi_dmul>
 801ba7c:	460b      	mov	r3, r1
 801ba7e:	4602      	mov	r2, r0
 801ba80:	4680      	mov	r8, r0
 801ba82:	4689      	mov	r9, r1
 801ba84:	4630      	mov	r0, r6
 801ba86:	4639      	mov	r1, r7
 801ba88:	f7e4 fbd8 	bl	800023c <__adddf3>
 801ba8c:	4b17      	ldr	r3, [pc, #92]	@ (801baec <__ieee754_pow+0x424>)
 801ba8e:	4299      	cmp	r1, r3
 801ba90:	4604      	mov	r4, r0
 801ba92:	460d      	mov	r5, r1
 801ba94:	468b      	mov	fp, r1
 801ba96:	f340 820b 	ble.w	801beb0 <__ieee754_pow+0x7e8>
 801ba9a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801ba9e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801baa2:	4303      	orrs	r3, r0
 801baa4:	f000 81ea 	beq.w	801be7c <__ieee754_pow+0x7b4>
 801baa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801baac:	2200      	movs	r2, #0
 801baae:	2300      	movs	r3, #0
 801bab0:	f7e4 ffec 	bl	8000a8c <__aeabi_dcmplt>
 801bab4:	3800      	subs	r0, #0
 801bab6:	bf18      	it	ne
 801bab8:	2001      	movne	r0, #1
 801baba:	e713      	b.n	801b8e4 <__ieee754_pow+0x21c>
 801babc:	f3af 8000 	nop.w
 801bac0:	60000000 	.word	0x60000000
 801bac4:	3ff71547 	.word	0x3ff71547
 801bac8:	f85ddf44 	.word	0xf85ddf44
 801bacc:	3e54ae0b 	.word	0x3e54ae0b
 801bad0:	55555555 	.word	0x55555555
 801bad4:	3fd55555 	.word	0x3fd55555
 801bad8:	652b82fe 	.word	0x652b82fe
 801badc:	3ff71547 	.word	0x3ff71547
 801bae0:	3ff00000 	.word	0x3ff00000
 801bae4:	3fd00000 	.word	0x3fd00000
 801bae8:	3fe00000 	.word	0x3fe00000
 801baec:	408fffff 	.word	0x408fffff
 801baf0:	4bd5      	ldr	r3, [pc, #852]	@ (801be48 <__ieee754_pow+0x780>)
 801baf2:	ea08 0303 	and.w	r3, r8, r3
 801baf6:	2200      	movs	r2, #0
 801baf8:	b92b      	cbnz	r3, 801bb06 <__ieee754_pow+0x43e>
 801bafa:	4bd4      	ldr	r3, [pc, #848]	@ (801be4c <__ieee754_pow+0x784>)
 801bafc:	f7e4 fd54 	bl	80005a8 <__aeabi_dmul>
 801bb00:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801bb04:	468b      	mov	fp, r1
 801bb06:	ea4f 532b 	mov.w	r3, fp, asr #20
 801bb0a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801bb0e:	4413      	add	r3, r2
 801bb10:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb12:	4bcf      	ldr	r3, [pc, #828]	@ (801be50 <__ieee754_pow+0x788>)
 801bb14:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801bb18:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801bb1c:	459b      	cmp	fp, r3
 801bb1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bb22:	dd08      	ble.n	801bb36 <__ieee754_pow+0x46e>
 801bb24:	4bcb      	ldr	r3, [pc, #812]	@ (801be54 <__ieee754_pow+0x78c>)
 801bb26:	459b      	cmp	fp, r3
 801bb28:	f340 81a5 	ble.w	801be76 <__ieee754_pow+0x7ae>
 801bb2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bb2e:	3301      	adds	r3, #1
 801bb30:	930a      	str	r3, [sp, #40]	@ 0x28
 801bb32:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801bb36:	f04f 0a00 	mov.w	sl, #0
 801bb3a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bb3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bb40:	4bc5      	ldr	r3, [pc, #788]	@ (801be58 <__ieee754_pow+0x790>)
 801bb42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bb46:	ed93 7b00 	vldr	d7, [r3]
 801bb4a:	4629      	mov	r1, r5
 801bb4c:	ec53 2b17 	vmov	r2, r3, d7
 801bb50:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bb54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bb58:	f7e4 fb6e 	bl	8000238 <__aeabi_dsub>
 801bb5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bb60:	4606      	mov	r6, r0
 801bb62:	460f      	mov	r7, r1
 801bb64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bb68:	f7e4 fb68 	bl	800023c <__adddf3>
 801bb6c:	4602      	mov	r2, r0
 801bb6e:	460b      	mov	r3, r1
 801bb70:	2000      	movs	r0, #0
 801bb72:	49ba      	ldr	r1, [pc, #744]	@ (801be5c <__ieee754_pow+0x794>)
 801bb74:	f7e4 fe42 	bl	80007fc <__aeabi_ddiv>
 801bb78:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	460b      	mov	r3, r1
 801bb80:	4630      	mov	r0, r6
 801bb82:	4639      	mov	r1, r7
 801bb84:	f7e4 fd10 	bl	80005a8 <__aeabi_dmul>
 801bb88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb8c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801bb90:	106d      	asrs	r5, r5, #1
 801bb92:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801bb96:	f04f 0b00 	mov.w	fp, #0
 801bb9a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801bb9e:	4661      	mov	r1, ip
 801bba0:	2200      	movs	r2, #0
 801bba2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bba6:	4658      	mov	r0, fp
 801bba8:	46e1      	mov	r9, ip
 801bbaa:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801bbae:	4614      	mov	r4, r2
 801bbb0:	461d      	mov	r5, r3
 801bbb2:	f7e4 fcf9 	bl	80005a8 <__aeabi_dmul>
 801bbb6:	4602      	mov	r2, r0
 801bbb8:	460b      	mov	r3, r1
 801bbba:	4630      	mov	r0, r6
 801bbbc:	4639      	mov	r1, r7
 801bbbe:	f7e4 fb3b 	bl	8000238 <__aeabi_dsub>
 801bbc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bbc6:	4606      	mov	r6, r0
 801bbc8:	460f      	mov	r7, r1
 801bbca:	4620      	mov	r0, r4
 801bbcc:	4629      	mov	r1, r5
 801bbce:	f7e4 fb33 	bl	8000238 <__aeabi_dsub>
 801bbd2:	4602      	mov	r2, r0
 801bbd4:	460b      	mov	r3, r1
 801bbd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bbda:	f7e4 fb2d 	bl	8000238 <__aeabi_dsub>
 801bbde:	465a      	mov	r2, fp
 801bbe0:	464b      	mov	r3, r9
 801bbe2:	f7e4 fce1 	bl	80005a8 <__aeabi_dmul>
 801bbe6:	4602      	mov	r2, r0
 801bbe8:	460b      	mov	r3, r1
 801bbea:	4630      	mov	r0, r6
 801bbec:	4639      	mov	r1, r7
 801bbee:	f7e4 fb23 	bl	8000238 <__aeabi_dsub>
 801bbf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801bbf6:	f7e4 fcd7 	bl	80005a8 <__aeabi_dmul>
 801bbfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bc02:	4610      	mov	r0, r2
 801bc04:	4619      	mov	r1, r3
 801bc06:	f7e4 fccf 	bl	80005a8 <__aeabi_dmul>
 801bc0a:	a37d      	add	r3, pc, #500	@ (adr r3, 801be00 <__ieee754_pow+0x738>)
 801bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc10:	4604      	mov	r4, r0
 801bc12:	460d      	mov	r5, r1
 801bc14:	f7e4 fcc8 	bl	80005a8 <__aeabi_dmul>
 801bc18:	a37b      	add	r3, pc, #492	@ (adr r3, 801be08 <__ieee754_pow+0x740>)
 801bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc1e:	f7e4 fb0d 	bl	800023c <__adddf3>
 801bc22:	4622      	mov	r2, r4
 801bc24:	462b      	mov	r3, r5
 801bc26:	f7e4 fcbf 	bl	80005a8 <__aeabi_dmul>
 801bc2a:	a379      	add	r3, pc, #484	@ (adr r3, 801be10 <__ieee754_pow+0x748>)
 801bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc30:	f7e4 fb04 	bl	800023c <__adddf3>
 801bc34:	4622      	mov	r2, r4
 801bc36:	462b      	mov	r3, r5
 801bc38:	f7e4 fcb6 	bl	80005a8 <__aeabi_dmul>
 801bc3c:	a376      	add	r3, pc, #472	@ (adr r3, 801be18 <__ieee754_pow+0x750>)
 801bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc42:	f7e4 fafb 	bl	800023c <__adddf3>
 801bc46:	4622      	mov	r2, r4
 801bc48:	462b      	mov	r3, r5
 801bc4a:	f7e4 fcad 	bl	80005a8 <__aeabi_dmul>
 801bc4e:	a374      	add	r3, pc, #464	@ (adr r3, 801be20 <__ieee754_pow+0x758>)
 801bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc54:	f7e4 faf2 	bl	800023c <__adddf3>
 801bc58:	4622      	mov	r2, r4
 801bc5a:	462b      	mov	r3, r5
 801bc5c:	f7e4 fca4 	bl	80005a8 <__aeabi_dmul>
 801bc60:	a371      	add	r3, pc, #452	@ (adr r3, 801be28 <__ieee754_pow+0x760>)
 801bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc66:	f7e4 fae9 	bl	800023c <__adddf3>
 801bc6a:	4622      	mov	r2, r4
 801bc6c:	4606      	mov	r6, r0
 801bc6e:	460f      	mov	r7, r1
 801bc70:	462b      	mov	r3, r5
 801bc72:	4620      	mov	r0, r4
 801bc74:	4629      	mov	r1, r5
 801bc76:	f7e4 fc97 	bl	80005a8 <__aeabi_dmul>
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	460b      	mov	r3, r1
 801bc7e:	4630      	mov	r0, r6
 801bc80:	4639      	mov	r1, r7
 801bc82:	f7e4 fc91 	bl	80005a8 <__aeabi_dmul>
 801bc86:	465a      	mov	r2, fp
 801bc88:	4604      	mov	r4, r0
 801bc8a:	460d      	mov	r5, r1
 801bc8c:	464b      	mov	r3, r9
 801bc8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc92:	f7e4 fad3 	bl	800023c <__adddf3>
 801bc96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bc9a:	f7e4 fc85 	bl	80005a8 <__aeabi_dmul>
 801bc9e:	4622      	mov	r2, r4
 801bca0:	462b      	mov	r3, r5
 801bca2:	f7e4 facb 	bl	800023c <__adddf3>
 801bca6:	465a      	mov	r2, fp
 801bca8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bcac:	464b      	mov	r3, r9
 801bcae:	4658      	mov	r0, fp
 801bcb0:	4649      	mov	r1, r9
 801bcb2:	f7e4 fc79 	bl	80005a8 <__aeabi_dmul>
 801bcb6:	4b6a      	ldr	r3, [pc, #424]	@ (801be60 <__ieee754_pow+0x798>)
 801bcb8:	2200      	movs	r2, #0
 801bcba:	4606      	mov	r6, r0
 801bcbc:	460f      	mov	r7, r1
 801bcbe:	f7e4 fabd 	bl	800023c <__adddf3>
 801bcc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bcc6:	f7e4 fab9 	bl	800023c <__adddf3>
 801bcca:	46d8      	mov	r8, fp
 801bccc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801bcd0:	460d      	mov	r5, r1
 801bcd2:	465a      	mov	r2, fp
 801bcd4:	460b      	mov	r3, r1
 801bcd6:	4640      	mov	r0, r8
 801bcd8:	4649      	mov	r1, r9
 801bcda:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801bcde:	f7e4 fc63 	bl	80005a8 <__aeabi_dmul>
 801bce2:	465c      	mov	r4, fp
 801bce4:	4680      	mov	r8, r0
 801bce6:	4689      	mov	r9, r1
 801bce8:	4b5d      	ldr	r3, [pc, #372]	@ (801be60 <__ieee754_pow+0x798>)
 801bcea:	2200      	movs	r2, #0
 801bcec:	4620      	mov	r0, r4
 801bcee:	4629      	mov	r1, r5
 801bcf0:	f7e4 faa2 	bl	8000238 <__aeabi_dsub>
 801bcf4:	4632      	mov	r2, r6
 801bcf6:	463b      	mov	r3, r7
 801bcf8:	f7e4 fa9e 	bl	8000238 <__aeabi_dsub>
 801bcfc:	4602      	mov	r2, r0
 801bcfe:	460b      	mov	r3, r1
 801bd00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd04:	f7e4 fa98 	bl	8000238 <__aeabi_dsub>
 801bd08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd0c:	f7e4 fc4c 	bl	80005a8 <__aeabi_dmul>
 801bd10:	4622      	mov	r2, r4
 801bd12:	4606      	mov	r6, r0
 801bd14:	460f      	mov	r7, r1
 801bd16:	462b      	mov	r3, r5
 801bd18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd1c:	f7e4 fc44 	bl	80005a8 <__aeabi_dmul>
 801bd20:	4602      	mov	r2, r0
 801bd22:	460b      	mov	r3, r1
 801bd24:	4630      	mov	r0, r6
 801bd26:	4639      	mov	r1, r7
 801bd28:	f7e4 fa88 	bl	800023c <__adddf3>
 801bd2c:	4606      	mov	r6, r0
 801bd2e:	460f      	mov	r7, r1
 801bd30:	4602      	mov	r2, r0
 801bd32:	460b      	mov	r3, r1
 801bd34:	4640      	mov	r0, r8
 801bd36:	4649      	mov	r1, r9
 801bd38:	f7e4 fa80 	bl	800023c <__adddf3>
 801bd3c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801bd40:	a33b      	add	r3, pc, #236	@ (adr r3, 801be30 <__ieee754_pow+0x768>)
 801bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd46:	4658      	mov	r0, fp
 801bd48:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801bd4c:	460d      	mov	r5, r1
 801bd4e:	f7e4 fc2b 	bl	80005a8 <__aeabi_dmul>
 801bd52:	465c      	mov	r4, fp
 801bd54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd58:	4642      	mov	r2, r8
 801bd5a:	464b      	mov	r3, r9
 801bd5c:	4620      	mov	r0, r4
 801bd5e:	4629      	mov	r1, r5
 801bd60:	f7e4 fa6a 	bl	8000238 <__aeabi_dsub>
 801bd64:	4602      	mov	r2, r0
 801bd66:	460b      	mov	r3, r1
 801bd68:	4630      	mov	r0, r6
 801bd6a:	4639      	mov	r1, r7
 801bd6c:	f7e4 fa64 	bl	8000238 <__aeabi_dsub>
 801bd70:	a331      	add	r3, pc, #196	@ (adr r3, 801be38 <__ieee754_pow+0x770>)
 801bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd76:	f7e4 fc17 	bl	80005a8 <__aeabi_dmul>
 801bd7a:	a331      	add	r3, pc, #196	@ (adr r3, 801be40 <__ieee754_pow+0x778>)
 801bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd80:	4606      	mov	r6, r0
 801bd82:	460f      	mov	r7, r1
 801bd84:	4620      	mov	r0, r4
 801bd86:	4629      	mov	r1, r5
 801bd88:	f7e4 fc0e 	bl	80005a8 <__aeabi_dmul>
 801bd8c:	4602      	mov	r2, r0
 801bd8e:	460b      	mov	r3, r1
 801bd90:	4630      	mov	r0, r6
 801bd92:	4639      	mov	r1, r7
 801bd94:	f7e4 fa52 	bl	800023c <__adddf3>
 801bd98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bd9a:	4b32      	ldr	r3, [pc, #200]	@ (801be64 <__ieee754_pow+0x79c>)
 801bd9c:	4413      	add	r3, r2
 801bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda2:	f7e4 fa4b 	bl	800023c <__adddf3>
 801bda6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bdaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801bdac:	f7e4 fb92 	bl	80004d4 <__aeabi_i2d>
 801bdb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bdb2:	4b2d      	ldr	r3, [pc, #180]	@ (801be68 <__ieee754_pow+0x7a0>)
 801bdb4:	4413      	add	r3, r2
 801bdb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bdba:	4606      	mov	r6, r0
 801bdbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bdc0:	460f      	mov	r7, r1
 801bdc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bdc6:	f7e4 fa39 	bl	800023c <__adddf3>
 801bdca:	4642      	mov	r2, r8
 801bdcc:	464b      	mov	r3, r9
 801bdce:	f7e4 fa35 	bl	800023c <__adddf3>
 801bdd2:	4632      	mov	r2, r6
 801bdd4:	463b      	mov	r3, r7
 801bdd6:	f7e4 fa31 	bl	800023c <__adddf3>
 801bdda:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801bdde:	4632      	mov	r2, r6
 801bde0:	463b      	mov	r3, r7
 801bde2:	4658      	mov	r0, fp
 801bde4:	460d      	mov	r5, r1
 801bde6:	f7e4 fa27 	bl	8000238 <__aeabi_dsub>
 801bdea:	4642      	mov	r2, r8
 801bdec:	464b      	mov	r3, r9
 801bdee:	f7e4 fa23 	bl	8000238 <__aeabi_dsub>
 801bdf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bdf6:	f7e4 fa1f 	bl	8000238 <__aeabi_dsub>
 801bdfa:	465c      	mov	r4, fp
 801bdfc:	e036      	b.n	801be6c <__ieee754_pow+0x7a4>
 801bdfe:	bf00      	nop
 801be00:	4a454eef 	.word	0x4a454eef
 801be04:	3fca7e28 	.word	0x3fca7e28
 801be08:	93c9db65 	.word	0x93c9db65
 801be0c:	3fcd864a 	.word	0x3fcd864a
 801be10:	a91d4101 	.word	0xa91d4101
 801be14:	3fd17460 	.word	0x3fd17460
 801be18:	518f264d 	.word	0x518f264d
 801be1c:	3fd55555 	.word	0x3fd55555
 801be20:	db6fabff 	.word	0xdb6fabff
 801be24:	3fdb6db6 	.word	0x3fdb6db6
 801be28:	33333303 	.word	0x33333303
 801be2c:	3fe33333 	.word	0x3fe33333
 801be30:	e0000000 	.word	0xe0000000
 801be34:	3feec709 	.word	0x3feec709
 801be38:	dc3a03fd 	.word	0xdc3a03fd
 801be3c:	3feec709 	.word	0x3feec709
 801be40:	145b01f5 	.word	0x145b01f5
 801be44:	be3e2fe0 	.word	0xbe3e2fe0
 801be48:	7ff00000 	.word	0x7ff00000
 801be4c:	43400000 	.word	0x43400000
 801be50:	0003988e 	.word	0x0003988e
 801be54:	000bb679 	.word	0x000bb679
 801be58:	0801f9f8 	.word	0x0801f9f8
 801be5c:	3ff00000 	.word	0x3ff00000
 801be60:	40080000 	.word	0x40080000
 801be64:	0801f9d8 	.word	0x0801f9d8
 801be68:	0801f9e8 	.word	0x0801f9e8
 801be6c:	4602      	mov	r2, r0
 801be6e:	460b      	mov	r3, r1
 801be70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801be74:	e5d6      	b.n	801ba24 <__ieee754_pow+0x35c>
 801be76:	f04f 0a01 	mov.w	sl, #1
 801be7a:	e65e      	b.n	801bb3a <__ieee754_pow+0x472>
 801be7c:	a3b5      	add	r3, pc, #724	@ (adr r3, 801c154 <__ieee754_pow+0xa8c>)
 801be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be82:	4630      	mov	r0, r6
 801be84:	4639      	mov	r1, r7
 801be86:	f7e4 f9d9 	bl	800023c <__adddf3>
 801be8a:	4642      	mov	r2, r8
 801be8c:	e9cd 0100 	strd	r0, r1, [sp]
 801be90:	464b      	mov	r3, r9
 801be92:	4620      	mov	r0, r4
 801be94:	4629      	mov	r1, r5
 801be96:	f7e4 f9cf 	bl	8000238 <__aeabi_dsub>
 801be9a:	4602      	mov	r2, r0
 801be9c:	460b      	mov	r3, r1
 801be9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bea2:	f7e4 fe11 	bl	8000ac8 <__aeabi_dcmpgt>
 801bea6:	2800      	cmp	r0, #0
 801bea8:	f47f adfe 	bne.w	801baa8 <__ieee754_pow+0x3e0>
 801beac:	4ba2      	ldr	r3, [pc, #648]	@ (801c138 <__ieee754_pow+0xa70>)
 801beae:	e022      	b.n	801bef6 <__ieee754_pow+0x82e>
 801beb0:	4ca2      	ldr	r4, [pc, #648]	@ (801c13c <__ieee754_pow+0xa74>)
 801beb2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801beb6:	42a3      	cmp	r3, r4
 801beb8:	d919      	bls.n	801beee <__ieee754_pow+0x826>
 801beba:	4ba1      	ldr	r3, [pc, #644]	@ (801c140 <__ieee754_pow+0xa78>)
 801bebc:	440b      	add	r3, r1
 801bebe:	4303      	orrs	r3, r0
 801bec0:	d009      	beq.n	801bed6 <__ieee754_pow+0x80e>
 801bec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bec6:	2200      	movs	r2, #0
 801bec8:	2300      	movs	r3, #0
 801beca:	f7e4 fddf 	bl	8000a8c <__aeabi_dcmplt>
 801bece:	3800      	subs	r0, #0
 801bed0:	bf18      	it	ne
 801bed2:	2001      	movne	r0, #1
 801bed4:	e512      	b.n	801b8fc <__ieee754_pow+0x234>
 801bed6:	4642      	mov	r2, r8
 801bed8:	464b      	mov	r3, r9
 801beda:	f7e4 f9ad 	bl	8000238 <__aeabi_dsub>
 801bede:	4632      	mov	r2, r6
 801bee0:	463b      	mov	r3, r7
 801bee2:	f7e4 fde7 	bl	8000ab4 <__aeabi_dcmpge>
 801bee6:	2800      	cmp	r0, #0
 801bee8:	d1eb      	bne.n	801bec2 <__ieee754_pow+0x7fa>
 801beea:	4b96      	ldr	r3, [pc, #600]	@ (801c144 <__ieee754_pow+0xa7c>)
 801beec:	e003      	b.n	801bef6 <__ieee754_pow+0x82e>
 801beee:	4a96      	ldr	r2, [pc, #600]	@ (801c148 <__ieee754_pow+0xa80>)
 801bef0:	4293      	cmp	r3, r2
 801bef2:	f240 80e7 	bls.w	801c0c4 <__ieee754_pow+0x9fc>
 801bef6:	151b      	asrs	r3, r3, #20
 801bef8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801befc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 801bf00:	fa4a fa03 	asr.w	sl, sl, r3
 801bf04:	44da      	add	sl, fp
 801bf06:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801bf0a:	4890      	ldr	r0, [pc, #576]	@ (801c14c <__ieee754_pow+0xa84>)
 801bf0c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801bf10:	4108      	asrs	r0, r1
 801bf12:	ea00 030a 	and.w	r3, r0, sl
 801bf16:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801bf1a:	f1c1 0114 	rsb	r1, r1, #20
 801bf1e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801bf22:	fa4a fa01 	asr.w	sl, sl, r1
 801bf26:	f1bb 0f00 	cmp.w	fp, #0
 801bf2a:	4640      	mov	r0, r8
 801bf2c:	4649      	mov	r1, r9
 801bf2e:	f04f 0200 	mov.w	r2, #0
 801bf32:	bfb8      	it	lt
 801bf34:	f1ca 0a00 	rsblt	sl, sl, #0
 801bf38:	f7e4 f97e 	bl	8000238 <__aeabi_dsub>
 801bf3c:	4680      	mov	r8, r0
 801bf3e:	4689      	mov	r9, r1
 801bf40:	4632      	mov	r2, r6
 801bf42:	463b      	mov	r3, r7
 801bf44:	4640      	mov	r0, r8
 801bf46:	4649      	mov	r1, r9
 801bf48:	f7e4 f978 	bl	800023c <__adddf3>
 801bf4c:	2400      	movs	r4, #0
 801bf4e:	a36a      	add	r3, pc, #424	@ (adr r3, 801c0f8 <__ieee754_pow+0xa30>)
 801bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf54:	4620      	mov	r0, r4
 801bf56:	460d      	mov	r5, r1
 801bf58:	f7e4 fb26 	bl	80005a8 <__aeabi_dmul>
 801bf5c:	4642      	mov	r2, r8
 801bf5e:	e9cd 0100 	strd	r0, r1, [sp]
 801bf62:	464b      	mov	r3, r9
 801bf64:	4620      	mov	r0, r4
 801bf66:	4629      	mov	r1, r5
 801bf68:	f7e4 f966 	bl	8000238 <__aeabi_dsub>
 801bf6c:	4602      	mov	r2, r0
 801bf6e:	460b      	mov	r3, r1
 801bf70:	4630      	mov	r0, r6
 801bf72:	4639      	mov	r1, r7
 801bf74:	f7e4 f960 	bl	8000238 <__aeabi_dsub>
 801bf78:	a361      	add	r3, pc, #388	@ (adr r3, 801c100 <__ieee754_pow+0xa38>)
 801bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf7e:	f7e4 fb13 	bl	80005a8 <__aeabi_dmul>
 801bf82:	a361      	add	r3, pc, #388	@ (adr r3, 801c108 <__ieee754_pow+0xa40>)
 801bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf88:	4680      	mov	r8, r0
 801bf8a:	4689      	mov	r9, r1
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	4629      	mov	r1, r5
 801bf90:	f7e4 fb0a 	bl	80005a8 <__aeabi_dmul>
 801bf94:	4602      	mov	r2, r0
 801bf96:	460b      	mov	r3, r1
 801bf98:	4640      	mov	r0, r8
 801bf9a:	4649      	mov	r1, r9
 801bf9c:	f7e4 f94e 	bl	800023c <__adddf3>
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	460d      	mov	r5, r1
 801bfa4:	4602      	mov	r2, r0
 801bfa6:	460b      	mov	r3, r1
 801bfa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bfac:	f7e4 f946 	bl	800023c <__adddf3>
 801bfb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bfb4:	4680      	mov	r8, r0
 801bfb6:	4689      	mov	r9, r1
 801bfb8:	f7e4 f93e 	bl	8000238 <__aeabi_dsub>
 801bfbc:	4602      	mov	r2, r0
 801bfbe:	460b      	mov	r3, r1
 801bfc0:	4620      	mov	r0, r4
 801bfc2:	4629      	mov	r1, r5
 801bfc4:	f7e4 f938 	bl	8000238 <__aeabi_dsub>
 801bfc8:	4642      	mov	r2, r8
 801bfca:	4606      	mov	r6, r0
 801bfcc:	460f      	mov	r7, r1
 801bfce:	464b      	mov	r3, r9
 801bfd0:	4640      	mov	r0, r8
 801bfd2:	4649      	mov	r1, r9
 801bfd4:	f7e4 fae8 	bl	80005a8 <__aeabi_dmul>
 801bfd8:	a34d      	add	r3, pc, #308	@ (adr r3, 801c110 <__ieee754_pow+0xa48>)
 801bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfde:	4604      	mov	r4, r0
 801bfe0:	460d      	mov	r5, r1
 801bfe2:	f7e4 fae1 	bl	80005a8 <__aeabi_dmul>
 801bfe6:	a34c      	add	r3, pc, #304	@ (adr r3, 801c118 <__ieee754_pow+0xa50>)
 801bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfec:	f7e4 f924 	bl	8000238 <__aeabi_dsub>
 801bff0:	4622      	mov	r2, r4
 801bff2:	462b      	mov	r3, r5
 801bff4:	f7e4 fad8 	bl	80005a8 <__aeabi_dmul>
 801bff8:	a349      	add	r3, pc, #292	@ (adr r3, 801c120 <__ieee754_pow+0xa58>)
 801bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bffe:	f7e4 f91d 	bl	800023c <__adddf3>
 801c002:	4622      	mov	r2, r4
 801c004:	462b      	mov	r3, r5
 801c006:	f7e4 facf 	bl	80005a8 <__aeabi_dmul>
 801c00a:	a347      	add	r3, pc, #284	@ (adr r3, 801c128 <__ieee754_pow+0xa60>)
 801c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c010:	f7e4 f912 	bl	8000238 <__aeabi_dsub>
 801c014:	4622      	mov	r2, r4
 801c016:	462b      	mov	r3, r5
 801c018:	f7e4 fac6 	bl	80005a8 <__aeabi_dmul>
 801c01c:	a344      	add	r3, pc, #272	@ (adr r3, 801c130 <__ieee754_pow+0xa68>)
 801c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c022:	f7e4 f90b 	bl	800023c <__adddf3>
 801c026:	4622      	mov	r2, r4
 801c028:	462b      	mov	r3, r5
 801c02a:	f7e4 fabd 	bl	80005a8 <__aeabi_dmul>
 801c02e:	4602      	mov	r2, r0
 801c030:	460b      	mov	r3, r1
 801c032:	4640      	mov	r0, r8
 801c034:	4649      	mov	r1, r9
 801c036:	f7e4 f8ff 	bl	8000238 <__aeabi_dsub>
 801c03a:	4604      	mov	r4, r0
 801c03c:	460d      	mov	r5, r1
 801c03e:	4602      	mov	r2, r0
 801c040:	460b      	mov	r3, r1
 801c042:	4640      	mov	r0, r8
 801c044:	4649      	mov	r1, r9
 801c046:	f7e4 faaf 	bl	80005a8 <__aeabi_dmul>
 801c04a:	2200      	movs	r2, #0
 801c04c:	e9cd 0100 	strd	r0, r1, [sp]
 801c050:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c054:	4620      	mov	r0, r4
 801c056:	4629      	mov	r1, r5
 801c058:	f7e4 f8ee 	bl	8000238 <__aeabi_dsub>
 801c05c:	4602      	mov	r2, r0
 801c05e:	460b      	mov	r3, r1
 801c060:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c064:	f7e4 fbca 	bl	80007fc <__aeabi_ddiv>
 801c068:	4632      	mov	r2, r6
 801c06a:	4604      	mov	r4, r0
 801c06c:	460d      	mov	r5, r1
 801c06e:	463b      	mov	r3, r7
 801c070:	4640      	mov	r0, r8
 801c072:	4649      	mov	r1, r9
 801c074:	f7e4 fa98 	bl	80005a8 <__aeabi_dmul>
 801c078:	4632      	mov	r2, r6
 801c07a:	463b      	mov	r3, r7
 801c07c:	f7e4 f8de 	bl	800023c <__adddf3>
 801c080:	4602      	mov	r2, r0
 801c082:	460b      	mov	r3, r1
 801c084:	4620      	mov	r0, r4
 801c086:	4629      	mov	r1, r5
 801c088:	f7e4 f8d6 	bl	8000238 <__aeabi_dsub>
 801c08c:	4642      	mov	r2, r8
 801c08e:	464b      	mov	r3, r9
 801c090:	f7e4 f8d2 	bl	8000238 <__aeabi_dsub>
 801c094:	460b      	mov	r3, r1
 801c096:	4602      	mov	r2, r0
 801c098:	492d      	ldr	r1, [pc, #180]	@ (801c150 <__ieee754_pow+0xa88>)
 801c09a:	2000      	movs	r0, #0
 801c09c:	f7e4 f8cc 	bl	8000238 <__aeabi_dsub>
 801c0a0:	ec41 0b10 	vmov	d0, r0, r1
 801c0a4:	ee10 3a90 	vmov	r3, s1
 801c0a8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c0ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c0b0:	da0b      	bge.n	801c0ca <__ieee754_pow+0xa02>
 801c0b2:	4650      	mov	r0, sl
 801c0b4:	f000 f85c 	bl	801c170 <scalbn>
 801c0b8:	ec51 0b10 	vmov	r0, r1, d0
 801c0bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c0c0:	f7ff bb6d 	b.w	801b79e <__ieee754_pow+0xd6>
 801c0c4:	f8dd a010 	ldr.w	sl, [sp, #16]
 801c0c8:	e73a      	b.n	801bf40 <__ieee754_pow+0x878>
 801c0ca:	ec51 0b10 	vmov	r0, r1, d0
 801c0ce:	4619      	mov	r1, r3
 801c0d0:	e7f4      	b.n	801c0bc <__ieee754_pow+0x9f4>
 801c0d2:	491f      	ldr	r1, [pc, #124]	@ (801c150 <__ieee754_pow+0xa88>)
 801c0d4:	2000      	movs	r0, #0
 801c0d6:	f7ff bb14 	b.w	801b702 <__ieee754_pow+0x3a>
 801c0da:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c0de:	f7ff bb10 	b.w	801b702 <__ieee754_pow+0x3a>
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	4639      	mov	r1, r7
 801c0e6:	f7ff bb0c 	b.w	801b702 <__ieee754_pow+0x3a>
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	f7ff bb69 	b.w	801b7c2 <__ieee754_pow+0xfa>
 801c0f0:	2400      	movs	r4, #0
 801c0f2:	f7ff bb4b 	b.w	801b78c <__ieee754_pow+0xc4>
 801c0f6:	bf00      	nop
 801c0f8:	00000000 	.word	0x00000000
 801c0fc:	3fe62e43 	.word	0x3fe62e43
 801c100:	fefa39ef 	.word	0xfefa39ef
 801c104:	3fe62e42 	.word	0x3fe62e42
 801c108:	0ca86c39 	.word	0x0ca86c39
 801c10c:	be205c61 	.word	0xbe205c61
 801c110:	72bea4d0 	.word	0x72bea4d0
 801c114:	3e663769 	.word	0x3e663769
 801c118:	c5d26bf1 	.word	0xc5d26bf1
 801c11c:	3ebbbd41 	.word	0x3ebbbd41
 801c120:	af25de2c 	.word	0xaf25de2c
 801c124:	3f11566a 	.word	0x3f11566a
 801c128:	16bebd93 	.word	0x16bebd93
 801c12c:	3f66c16c 	.word	0x3f66c16c
 801c130:	5555553e 	.word	0x5555553e
 801c134:	3fc55555 	.word	0x3fc55555
 801c138:	40900000 	.word	0x40900000
 801c13c:	4090cbff 	.word	0x4090cbff
 801c140:	3f6f3400 	.word	0x3f6f3400
 801c144:	4090cc00 	.word	0x4090cc00
 801c148:	3fe00000 	.word	0x3fe00000
 801c14c:	fff00000 	.word	0xfff00000
 801c150:	3ff00000 	.word	0x3ff00000
 801c154:	652b82fe 	.word	0x652b82fe
 801c158:	3c971547 	.word	0x3c971547

0801c15c <fabs>:
 801c15c:	ec51 0b10 	vmov	r0, r1, d0
 801c160:	4602      	mov	r2, r0
 801c162:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c166:	ec43 2b10 	vmov	d0, r2, r3
 801c16a:	4770      	bx	lr
 801c16c:	0000      	movs	r0, r0
	...

0801c170 <scalbn>:
 801c170:	b570      	push	{r4, r5, r6, lr}
 801c172:	ec55 4b10 	vmov	r4, r5, d0
 801c176:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c17a:	4606      	mov	r6, r0
 801c17c:	462b      	mov	r3, r5
 801c17e:	b991      	cbnz	r1, 801c1a6 <scalbn+0x36>
 801c180:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801c184:	4323      	orrs	r3, r4
 801c186:	d03b      	beq.n	801c200 <scalbn+0x90>
 801c188:	4b33      	ldr	r3, [pc, #204]	@ (801c258 <scalbn+0xe8>)
 801c18a:	4620      	mov	r0, r4
 801c18c:	4629      	mov	r1, r5
 801c18e:	2200      	movs	r2, #0
 801c190:	f7e4 fa0a 	bl	80005a8 <__aeabi_dmul>
 801c194:	4b31      	ldr	r3, [pc, #196]	@ (801c25c <scalbn+0xec>)
 801c196:	429e      	cmp	r6, r3
 801c198:	4604      	mov	r4, r0
 801c19a:	460d      	mov	r5, r1
 801c19c:	da0f      	bge.n	801c1be <scalbn+0x4e>
 801c19e:	a326      	add	r3, pc, #152	@ (adr r3, 801c238 <scalbn+0xc8>)
 801c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a4:	e01e      	b.n	801c1e4 <scalbn+0x74>
 801c1a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c1aa:	4291      	cmp	r1, r2
 801c1ac:	d10b      	bne.n	801c1c6 <scalbn+0x56>
 801c1ae:	4622      	mov	r2, r4
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	4629      	mov	r1, r5
 801c1b4:	f7e4 f842 	bl	800023c <__adddf3>
 801c1b8:	4604      	mov	r4, r0
 801c1ba:	460d      	mov	r5, r1
 801c1bc:	e020      	b.n	801c200 <scalbn+0x90>
 801c1be:	460b      	mov	r3, r1
 801c1c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c1c4:	3936      	subs	r1, #54	@ 0x36
 801c1c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801c1ca:	4296      	cmp	r6, r2
 801c1cc:	dd0d      	ble.n	801c1ea <scalbn+0x7a>
 801c1ce:	2d00      	cmp	r5, #0
 801c1d0:	a11b      	add	r1, pc, #108	@ (adr r1, 801c240 <scalbn+0xd0>)
 801c1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1d6:	da02      	bge.n	801c1de <scalbn+0x6e>
 801c1d8:	a11b      	add	r1, pc, #108	@ (adr r1, 801c248 <scalbn+0xd8>)
 801c1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c1de:	a318      	add	r3, pc, #96	@ (adr r3, 801c240 <scalbn+0xd0>)
 801c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e4:	f7e4 f9e0 	bl	80005a8 <__aeabi_dmul>
 801c1e8:	e7e6      	b.n	801c1b8 <scalbn+0x48>
 801c1ea:	1872      	adds	r2, r6, r1
 801c1ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801c1f0:	428a      	cmp	r2, r1
 801c1f2:	dcec      	bgt.n	801c1ce <scalbn+0x5e>
 801c1f4:	2a00      	cmp	r2, #0
 801c1f6:	dd06      	ble.n	801c206 <scalbn+0x96>
 801c1f8:	f36f 531e 	bfc	r3, #20, #11
 801c1fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c200:	ec45 4b10 	vmov	d0, r4, r5
 801c204:	bd70      	pop	{r4, r5, r6, pc}
 801c206:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801c20a:	da08      	bge.n	801c21e <scalbn+0xae>
 801c20c:	2d00      	cmp	r5, #0
 801c20e:	a10a      	add	r1, pc, #40	@ (adr r1, 801c238 <scalbn+0xc8>)
 801c210:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c214:	dac3      	bge.n	801c19e <scalbn+0x2e>
 801c216:	a10e      	add	r1, pc, #56	@ (adr r1, 801c250 <scalbn+0xe0>)
 801c218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c21c:	e7bf      	b.n	801c19e <scalbn+0x2e>
 801c21e:	3236      	adds	r2, #54	@ 0x36
 801c220:	f36f 531e 	bfc	r3, #20, #11
 801c224:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c228:	4620      	mov	r0, r4
 801c22a:	4b0d      	ldr	r3, [pc, #52]	@ (801c260 <scalbn+0xf0>)
 801c22c:	4629      	mov	r1, r5
 801c22e:	2200      	movs	r2, #0
 801c230:	e7d8      	b.n	801c1e4 <scalbn+0x74>
 801c232:	bf00      	nop
 801c234:	f3af 8000 	nop.w
 801c238:	c2f8f359 	.word	0xc2f8f359
 801c23c:	01a56e1f 	.word	0x01a56e1f
 801c240:	8800759c 	.word	0x8800759c
 801c244:	7e37e43c 	.word	0x7e37e43c
 801c248:	8800759c 	.word	0x8800759c
 801c24c:	fe37e43c 	.word	0xfe37e43c
 801c250:	c2f8f359 	.word	0xc2f8f359
 801c254:	81a56e1f 	.word	0x81a56e1f
 801c258:	43500000 	.word	0x43500000
 801c25c:	ffff3cb0 	.word	0xffff3cb0
 801c260:	3c900000 	.word	0x3c900000

0801c264 <with_errno>:
 801c264:	b510      	push	{r4, lr}
 801c266:	ed2d 8b02 	vpush	{d8}
 801c26a:	eeb0 8a40 	vmov.f32	s16, s0
 801c26e:	eef0 8a60 	vmov.f32	s17, s1
 801c272:	4604      	mov	r4, r0
 801c274:	f7fd f9c2 	bl	80195fc <__errno>
 801c278:	eeb0 0a48 	vmov.f32	s0, s16
 801c27c:	eef0 0a68 	vmov.f32	s1, s17
 801c280:	ecbd 8b02 	vpop	{d8}
 801c284:	6004      	str	r4, [r0, #0]
 801c286:	bd10      	pop	{r4, pc}

0801c288 <xflow>:
 801c288:	4603      	mov	r3, r0
 801c28a:	b507      	push	{r0, r1, r2, lr}
 801c28c:	ec51 0b10 	vmov	r0, r1, d0
 801c290:	b183      	cbz	r3, 801c2b4 <xflow+0x2c>
 801c292:	4602      	mov	r2, r0
 801c294:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c298:	e9cd 2300 	strd	r2, r3, [sp]
 801c29c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c2a0:	f7e4 f982 	bl	80005a8 <__aeabi_dmul>
 801c2a4:	ec41 0b10 	vmov	d0, r0, r1
 801c2a8:	2022      	movs	r0, #34	@ 0x22
 801c2aa:	b003      	add	sp, #12
 801c2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801c2b0:	f7ff bfd8 	b.w	801c264 <with_errno>
 801c2b4:	4602      	mov	r2, r0
 801c2b6:	460b      	mov	r3, r1
 801c2b8:	e7ee      	b.n	801c298 <xflow+0x10>
 801c2ba:	0000      	movs	r0, r0
 801c2bc:	0000      	movs	r0, r0
	...

0801c2c0 <__math_uflow>:
 801c2c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c2c8 <__math_uflow+0x8>
 801c2c4:	f7ff bfe0 	b.w	801c288 <xflow>
 801c2c8:	00000000 	.word	0x00000000
 801c2cc:	10000000 	.word	0x10000000

0801c2d0 <__math_oflow>:
 801c2d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c2d8 <__math_oflow+0x8>
 801c2d4:	f7ff bfd8 	b.w	801c288 <xflow>
 801c2d8:	00000000 	.word	0x00000000
 801c2dc:	70000000 	.word	0x70000000

0801c2e0 <__ieee754_sqrt>:
 801c2e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e4:	4a66      	ldr	r2, [pc, #408]	@ (801c480 <__ieee754_sqrt+0x1a0>)
 801c2e6:	ec55 4b10 	vmov	r4, r5, d0
 801c2ea:	43aa      	bics	r2, r5
 801c2ec:	462b      	mov	r3, r5
 801c2ee:	4621      	mov	r1, r4
 801c2f0:	d110      	bne.n	801c314 <__ieee754_sqrt+0x34>
 801c2f2:	4622      	mov	r2, r4
 801c2f4:	4620      	mov	r0, r4
 801c2f6:	4629      	mov	r1, r5
 801c2f8:	f7e4 f956 	bl	80005a8 <__aeabi_dmul>
 801c2fc:	4602      	mov	r2, r0
 801c2fe:	460b      	mov	r3, r1
 801c300:	4620      	mov	r0, r4
 801c302:	4629      	mov	r1, r5
 801c304:	f7e3 ff9a 	bl	800023c <__adddf3>
 801c308:	4604      	mov	r4, r0
 801c30a:	460d      	mov	r5, r1
 801c30c:	ec45 4b10 	vmov	d0, r4, r5
 801c310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c314:	2d00      	cmp	r5, #0
 801c316:	dc0e      	bgt.n	801c336 <__ieee754_sqrt+0x56>
 801c318:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801c31c:	4322      	orrs	r2, r4
 801c31e:	d0f5      	beq.n	801c30c <__ieee754_sqrt+0x2c>
 801c320:	b19d      	cbz	r5, 801c34a <__ieee754_sqrt+0x6a>
 801c322:	4622      	mov	r2, r4
 801c324:	4620      	mov	r0, r4
 801c326:	4629      	mov	r1, r5
 801c328:	f7e3 ff86 	bl	8000238 <__aeabi_dsub>
 801c32c:	4602      	mov	r2, r0
 801c32e:	460b      	mov	r3, r1
 801c330:	f7e4 fa64 	bl	80007fc <__aeabi_ddiv>
 801c334:	e7e8      	b.n	801c308 <__ieee754_sqrt+0x28>
 801c336:	152a      	asrs	r2, r5, #20
 801c338:	d115      	bne.n	801c366 <__ieee754_sqrt+0x86>
 801c33a:	2000      	movs	r0, #0
 801c33c:	e009      	b.n	801c352 <__ieee754_sqrt+0x72>
 801c33e:	0acb      	lsrs	r3, r1, #11
 801c340:	3a15      	subs	r2, #21
 801c342:	0549      	lsls	r1, r1, #21
 801c344:	2b00      	cmp	r3, #0
 801c346:	d0fa      	beq.n	801c33e <__ieee754_sqrt+0x5e>
 801c348:	e7f7      	b.n	801c33a <__ieee754_sqrt+0x5a>
 801c34a:	462a      	mov	r2, r5
 801c34c:	e7fa      	b.n	801c344 <__ieee754_sqrt+0x64>
 801c34e:	005b      	lsls	r3, r3, #1
 801c350:	3001      	adds	r0, #1
 801c352:	02dc      	lsls	r4, r3, #11
 801c354:	d5fb      	bpl.n	801c34e <__ieee754_sqrt+0x6e>
 801c356:	1e44      	subs	r4, r0, #1
 801c358:	1b12      	subs	r2, r2, r4
 801c35a:	f1c0 0420 	rsb	r4, r0, #32
 801c35e:	fa21 f404 	lsr.w	r4, r1, r4
 801c362:	4323      	orrs	r3, r4
 801c364:	4081      	lsls	r1, r0
 801c366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c36a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801c36e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c372:	07d2      	lsls	r2, r2, #31
 801c374:	bf5c      	itt	pl
 801c376:	005b      	lslpl	r3, r3, #1
 801c378:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801c37c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c380:	bf58      	it	pl
 801c382:	0049      	lslpl	r1, r1, #1
 801c384:	2600      	movs	r6, #0
 801c386:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801c38a:	107f      	asrs	r7, r7, #1
 801c38c:	0049      	lsls	r1, r1, #1
 801c38e:	2016      	movs	r0, #22
 801c390:	4632      	mov	r2, r6
 801c392:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801c396:	1915      	adds	r5, r2, r4
 801c398:	429d      	cmp	r5, r3
 801c39a:	bfde      	ittt	le
 801c39c:	192a      	addle	r2, r5, r4
 801c39e:	1b5b      	suble	r3, r3, r5
 801c3a0:	1936      	addle	r6, r6, r4
 801c3a2:	0fcd      	lsrs	r5, r1, #31
 801c3a4:	3801      	subs	r0, #1
 801c3a6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801c3aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c3ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c3b2:	d1f0      	bne.n	801c396 <__ieee754_sqrt+0xb6>
 801c3b4:	4605      	mov	r5, r0
 801c3b6:	2420      	movs	r4, #32
 801c3b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801c3bc:	4293      	cmp	r3, r2
 801c3be:	eb0c 0e00 	add.w	lr, ip, r0
 801c3c2:	dc02      	bgt.n	801c3ca <__ieee754_sqrt+0xea>
 801c3c4:	d113      	bne.n	801c3ee <__ieee754_sqrt+0x10e>
 801c3c6:	458e      	cmp	lr, r1
 801c3c8:	d811      	bhi.n	801c3ee <__ieee754_sqrt+0x10e>
 801c3ca:	f1be 0f00 	cmp.w	lr, #0
 801c3ce:	eb0e 000c 	add.w	r0, lr, ip
 801c3d2:	da3f      	bge.n	801c454 <__ieee754_sqrt+0x174>
 801c3d4:	2800      	cmp	r0, #0
 801c3d6:	db3d      	blt.n	801c454 <__ieee754_sqrt+0x174>
 801c3d8:	f102 0801 	add.w	r8, r2, #1
 801c3dc:	1a9b      	subs	r3, r3, r2
 801c3de:	458e      	cmp	lr, r1
 801c3e0:	bf88      	it	hi
 801c3e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801c3e6:	eba1 010e 	sub.w	r1, r1, lr
 801c3ea:	4465      	add	r5, ip
 801c3ec:	4642      	mov	r2, r8
 801c3ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801c3f2:	3c01      	subs	r4, #1
 801c3f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801c3f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c3fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801c400:	d1dc      	bne.n	801c3bc <__ieee754_sqrt+0xdc>
 801c402:	4319      	orrs	r1, r3
 801c404:	d01b      	beq.n	801c43e <__ieee754_sqrt+0x15e>
 801c406:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801c484 <__ieee754_sqrt+0x1a4>
 801c40a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801c488 <__ieee754_sqrt+0x1a8>
 801c40e:	e9da 0100 	ldrd	r0, r1, [sl]
 801c412:	e9db 2300 	ldrd	r2, r3, [fp]
 801c416:	f7e3 ff0f 	bl	8000238 <__aeabi_dsub>
 801c41a:	e9da 8900 	ldrd	r8, r9, [sl]
 801c41e:	4602      	mov	r2, r0
 801c420:	460b      	mov	r3, r1
 801c422:	4640      	mov	r0, r8
 801c424:	4649      	mov	r1, r9
 801c426:	f7e4 fb3b 	bl	8000aa0 <__aeabi_dcmple>
 801c42a:	b140      	cbz	r0, 801c43e <__ieee754_sqrt+0x15e>
 801c42c:	f1b5 3fff 	cmp.w	r5, #4294967295
 801c430:	e9da 0100 	ldrd	r0, r1, [sl]
 801c434:	e9db 2300 	ldrd	r2, r3, [fp]
 801c438:	d10e      	bne.n	801c458 <__ieee754_sqrt+0x178>
 801c43a:	3601      	adds	r6, #1
 801c43c:	4625      	mov	r5, r4
 801c43e:	1073      	asrs	r3, r6, #1
 801c440:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801c444:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801c448:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801c44c:	086b      	lsrs	r3, r5, #1
 801c44e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801c452:	e759      	b.n	801c308 <__ieee754_sqrt+0x28>
 801c454:	4690      	mov	r8, r2
 801c456:	e7c1      	b.n	801c3dc <__ieee754_sqrt+0xfc>
 801c458:	f7e3 fef0 	bl	800023c <__adddf3>
 801c45c:	e9da 8900 	ldrd	r8, r9, [sl]
 801c460:	4602      	mov	r2, r0
 801c462:	460b      	mov	r3, r1
 801c464:	4640      	mov	r0, r8
 801c466:	4649      	mov	r1, r9
 801c468:	f7e4 fb10 	bl	8000a8c <__aeabi_dcmplt>
 801c46c:	b120      	cbz	r0, 801c478 <__ieee754_sqrt+0x198>
 801c46e:	1cab      	adds	r3, r5, #2
 801c470:	bf08      	it	eq
 801c472:	3601      	addeq	r6, #1
 801c474:	3502      	adds	r5, #2
 801c476:	e7e2      	b.n	801c43e <__ieee754_sqrt+0x15e>
 801c478:	1c6b      	adds	r3, r5, #1
 801c47a:	f023 0501 	bic.w	r5, r3, #1
 801c47e:	e7de      	b.n	801c43e <__ieee754_sqrt+0x15e>
 801c480:	7ff00000 	.word	0x7ff00000
 801c484:	0801fa10 	.word	0x0801fa10
 801c488:	0801fa08 	.word	0x0801fa08

0801c48c <_init>:
 801c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c48e:	bf00      	nop
 801c490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c492:	bc08      	pop	{r3}
 801c494:	469e      	mov	lr, r3
 801c496:	4770      	bx	lr

0801c498 <_fini>:
 801c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c49a:	bf00      	nop
 801c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c49e:	bc08      	pop	{r3}
 801c4a0:	469e      	mov	lr, r3
 801c4a2:	4770      	bx	lr
